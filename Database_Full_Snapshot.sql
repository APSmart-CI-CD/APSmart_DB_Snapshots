-- MySQL dump 10.13  Distrib 8.0.41, for Win64 (x86_64)
--
-- Host: apsmart-main-db-mysql8.c6jssxf3a4wt.us-east-1.rds.amazonaws.com    Database: dbQA
-- ------------------------------------------------------
-- Server version	8.0.36

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
SET @MYSQLDUMP_TEMP_LOG_BIN = @@SESSION.SQL_LOG_BIN;
SET @@SESSION.SQL_LOG_BIN= 0;

--
-- GTID state at the beginning of the backup 
--

SET @@GLOBAL.GTID_PURGED=/*!80000 '+'*/ '';

--
-- Table structure for table `2016-08-01-InvoiceList`
--

DROP TABLE IF EXISTS `2016-08-01-InvoiceList`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `2016-08-01-InvoiceList` (
  `invoiceId` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `24LastFour`
--

DROP TABLE IF EXISTS `24LastFour`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `24LastFour` (
  `01_Last Four` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `AC30CardNums`
--

DROP TABLE IF EXISTS `AC30CardNums`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `AC30CardNums` (
  `TransactionDate` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `TransactionIdentifier` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CardNumber` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `APClerkVendor`
--

DROP TABLE IF EXISTS `APClerkVendor`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `APClerkVendor` (
  `APClerkId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `VendorId` int NOT NULL,
  PRIMARY KEY (`APClerkId`,`VendorId`),
  KEY `IX_APClerkId` (`APClerkId`) USING BTREE,
  KEY `IX_VendorId` (`VendorId`) USING BTREE,
  CONSTRAINT `APClerkVendor_ibfk_1` FOREIGN KEY (`APClerkId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `APClerkVendor_ibfk_2` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `APclerkSetting`
--

DROP TABLE IF EXISTS `APclerkSetting`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `APclerkSetting` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `InvoiceId` int NOT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `IsModified` tinyint(1) NOT NULL,
  `SourceId` int DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_InvoiceId` (`InvoiceId`) USING BTREE,
  KEY `IX_UserId` (`UserId`) USING BTREE,
  CONSTRAINT `APclerkSetting_ibfk_1` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `APclerkSetting_ibfk_2` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=240 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `AVGIH`
--

DROP TABLE IF EXISTS `AVGIH`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `AVGIH` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `InvoiceId` int DEFAULT NULL,
  `Actor` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Action` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ActionDate` datetime DEFAULT NULL,
  `PreviousData` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `NewData` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `Field` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `InitialStatus` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CurrentStatus` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ActorId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `OldID` int DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=56799280 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `AVGINV`
--

DROP TABLE IF EXISTS `AVGINV`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `AVGINV` (
  `ClientId` int DEFAULT NULL,
  `InvoiceId` int NOT NULL AUTO_INCREMENT,
  `VendorId` int DEFAULT NULL,
  `InvoiceNo` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `InvoiceDate` datetime DEFAULT NULL,
  `PaymentDueDate` datetime DEFAULT NULL,
  `InvoiceTotal` decimal(18,2) DEFAULT NULL,
  `ApprovalRequired` tinyint(1) NOT NULL,
  `ApprovalStatusId` tinyint unsigned NOT NULL,
  `AprovedDate` datetime DEFAULT NULL,
  `AcceptedDate` datetime DEFAULT NULL,
  `SubmissionDate` datetime DEFAULT NULL,
  `RejectedDate` datetime DEFAULT NULL,
  `IsPaused` tinyint(1) NOT NULL,
  `IsExceptionRaised` tinyint(1) NOT NULL,
  `ShippedToAddressId` int DEFAULT NULL,
  `ApproverId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT '',
  `IsPOInvoice` tinyint(1) NOT NULL,
  `ScannedDate` datetime NOT NULL,
  `PONumber` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `RONumber` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ShippingDate` datetime DEFAULT NULL,
  `NetTermDate` datetime DEFAULT NULL,
  `NetTermDiscount` decimal(18,2) DEFAULT NULL,
  `Tax` decimal(18,2) DEFAULT NULL,
  `FreightCharges` decimal(18,2) DEFAULT NULL,
  `InvoiceType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `CheckNumber` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsModified` tinyint(1) NOT NULL,
  `BillToAddressId` int DEFAULT NULL,
  `RemitToAddressId` int DEFAULT NULL,
  `OrgId` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Currency` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CountryCode` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CompanyCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ModifiedDate` datetime DEFAULT NULL,
  `Comment` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `ShipToName` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `BillToName` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `BatchID` int DEFAULT NULL,
  `InvoiceName` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CaptureCompletedDate` datetime DEFAULT NULL,
  `LastActionDate` datetime DEFAULT NULL,
  `GLDate` datetime DEFAULT NULL,
  `LastActionBy` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsDeleted` tinyint(1) NOT NULL,
  `LocationId` int DEFAULT NULL,
  `IsOutPutPending` tinyint(1) NOT NULL,
  `CaptureBatchId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AdjustmentAmount` decimal(18,2) DEFAULT NULL,
  `SubCategoryType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorSiteId` int DEFAULT NULL,
  `PayImmediate` tinyint(1) NOT NULL,
  `VerifierId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `TaxGLCodeId` int DEFAULT NULL,
  `AccountCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `StoreNumber` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ServiceMonth` datetime DEFAULT NULL,
  `IsMultipleSubmission` tinyint(1) NOT NULL,
  `OpenTaskTime` datetime DEFAULT NULL,
  `CompletedTaskTime` datetime DEFAULT NULL,
  `RecognitionCompleteTime` datetime DEFAULT NULL,
  `ABBYYBatchName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VerifierName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsValidated` tinyint(1) DEFAULT NULL,
  `DeliveryNumber` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsBigAirSyncComplete` tinyint(1) DEFAULT NULL,
  `IsLocked` tinyint(1) NOT NULL,
  `LockedAt` datetime DEFAULT NULL,
  `LockedBy` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Container` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `POLookup` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `POReverseLookup` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `POReverseLookupVariance` int DEFAULT NULL,
  `LineItemsQuantityFilterVariance` int DEFAULT NULL,
  `OtherCharges` decimal(18,2) DEFAULT NULL,
  `CustomerLocationId` int DEFAULT NULL,
  `VendorLocationId` int DEFAULT NULL,
  `ValidationCompleted` tinyint(1) DEFAULT NULL,
  `TransactionIdentifer` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SourceInvoiceId` int DEFAULT NULL,
  `PaperlessSubmission` tinyint(1) DEFAULT '0',
  `Reissued` tinyint(1) NOT NULL,
  `UserField1` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField2` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField3` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField4` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField5` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField6` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField7` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField8` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField9` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField10` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsConfidential` tinyint(1) DEFAULT '0',
  `ArchiveReason` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PaymentProcessingDate` datetime DEFAULT NULL,
  `DiscountRequestedAmount` decimal(18,2) DEFAULT NULL,
  `DiscountGranted` tinyint(1) DEFAULT NULL,
  `DiscountExpireDate` datetime DEFAULT NULL,
  `ClientDocId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ParentInvoiceId` int DEFAULT NULL,
  `ProjectTypeId` int DEFAULT NULL,
  `SubProjectTypeId` int DEFAULT NULL,
  `USDInvoiceTotal` decimal(18,2) DEFAULT NULL,
  `Term` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PaymentMethod` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ExternalId` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CustomerId` int DEFAULT NULL,
  `CalculableOtherCharges` decimal(18,2) DEFAULT NULL,
  `AccountCodeId` int DEFAULT NULL,
  `ShipToId` int DEFAULT NULL,
  `TaxCodeId` int DEFAULT NULL,
  `CheckDate` date DEFAULT NULL,
  `Ten99Amount` decimal(18,2) DEFAULT NULL,
  `PaymentId` int DEFAULT NULL,
  `InvoiceTotalWithTax` decimal(18,2) DEFAULT NULL,
  `IsDaat` tinyint(1) NOT NULL DEFAULT '0',
  `PrepaymentNoteId` int DEFAULT NULL,
  `HaulerWONumber` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `HaulerServiceDescription` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `HaulerServiceArea` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `HaulerServiceDate` date DEFAULT NULL,
  `HaulerFrequency` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `HaulerQuantity` decimal(10,0) DEFAULT NULL,
  `HaulerUnitCost` decimal(10,0) DEFAULT NULL,
  PRIMARY KEY (`InvoiceId`)
) ENGINE=InnoDB AUTO_INCREMENT=4610369 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `AVG_APH`
--

DROP TABLE IF EXISTS `AVG_APH`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `AVG_APH` (
  `ApprovalHistoryID` int NOT NULL,
  `InvoiceId` int NOT NULL,
  `ApproverId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `GLCodeId` int NOT NULL,
  `AmountAppoved` decimal(18,2) NOT NULL,
  `StateChangedDate` datetime NOT NULL,
  `CustomerId` int DEFAULT NULL,
  `Recoverabletax` int DEFAULT NULL,
  `SpecialNote` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CategoryId` int DEFAULT NULL,
  `DepartmentId` int DEFAULT NULL,
  `TaxCodeId` int DEFAULT NULL,
  `TaxableAmount` decimal(18,2) DEFAULT NULL,
  `TaxAmount` decimal(18,2) DEFAULT NULL,
  `WithholdingTaxId` int DEFAULT NULL,
  `PurchaseNum` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ImportDoc` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `RecoverableTaxAmout` decimal(18,2) DEFAULT NULL,
  `ProjectId` int DEFAULT NULL,
  `SubProjectId` int DEFAULT NULL,
  `CompanyCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SourceApprovalHistoryId` int DEFAULT NULL,
  `ItemId` int DEFAULT NULL,
  `AccountingVariable1` int DEFAULT NULL,
  `AccountingVariable2` int DEFAULT NULL,
  `AccountingVariable3` int DEFAULT NULL,
  `AccountingVariable4` int DEFAULT NULL,
  `VendorId` int DEFAULT NULL,
  `OrgId` int DEFAULT NULL,
  `AmountInPercent` decimal(18,2) DEFAULT NULL,
  `IsDistributedLine` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`ApprovalHistoryID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `AWFByCustomer`
--

DROP TABLE IF EXISTS `AWFByCustomer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `AWFByCustomer` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `CustomerId` int DEFAULT NULL,
  `StateId` int DEFAULT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Title` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_CustomerId` (`CustomerId`) USING BTREE,
  KEY `IX_StateId` (`StateId`) USING BTREE,
  KEY `IX_UserId` (`UserId`) USING BTREE,
  CONSTRAINT `AWFByCustomer_ibfk_1` FOREIGN KEY (`CustomerId`) REFERENCES `Customer` (`CustomerId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `AWFByCustomer_ibfk_2` FOREIGN KEY (`StateId`) REFERENCES `State` (`StateId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `AWFByCustomer_ibfk_3` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=495 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `AcceptedNonPOInvoicesHardy`
--

DROP TABLE IF EXISTS `AcceptedNonPOInvoicesHardy`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `AcceptedNonPOInvoicesHardy` (
  `# ClientId` int DEFAULT NULL,
  `InvoiceId` int DEFAULT NULL,
  `VendorId` int DEFAULT NULL,
  `InvoiceNo` int DEFAULT NULL,
  `InvoiceDate` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `PaymentDueDate` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `InvoiceTotal` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `ApprovalRequired` int DEFAULT NULL,
  `ApprovalStatusId` int DEFAULT NULL,
  `AprovedDate` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `AcceptedDate` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `SubmissionDate` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `RejectedDate` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `IsPaused` int DEFAULT NULL,
  `IsExceptionRaised` int DEFAULT NULL,
  `ShippedToAddressId` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `ApproverId` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `IsPOInvoice` int DEFAULT NULL,
  `ScannedDate` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `PONumber` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `RONumber` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `ShippingDate` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `NetTermDate` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `NetTermDiscount` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `Tax` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `FreightCharges` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `InvoiceType` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `CheckNumber` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `IsModified` int DEFAULT NULL,
  `BillToAddressId` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `RemitToAddressId` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `OrgId` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `Currency` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `Description` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `CountryCode` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `CompanyCode` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `ModifiedDate` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `Comment` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `ShipToName` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `BillToName` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `BatchID` int DEFAULT NULL,
  `InvoiceName` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `CaptureCompletedDate` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `LastActionDate` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `GLDate` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `LastActionBy` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `IsDeleted` int DEFAULT NULL,
  `LocationId` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `IsOutPutPending` int DEFAULT NULL,
  `CaptureBatchId` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `AdjustmentAmount` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `SubCategoryType` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `VendorSiteId` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `PayImmediate` int DEFAULT NULL,
  `VerifierId` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `TaxGLCodeId` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `AccountCode` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `StoreNumber` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `ServiceMonth` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `IsMultipleSubmission` int DEFAULT NULL,
  `OpenTaskTime` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `CompletedTaskTime` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `RecognitionCompleteTime` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `ABBYYBatchName` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `VerifierName` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `IsValidated` int DEFAULT NULL,
  `DeliveryNumber` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `IsBigAirSyncComplete` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `IsLocked` int DEFAULT NULL,
  `LockedAt` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `LockedBy` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `Container` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `POLookup` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `POReverseLookup` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `POReverseLookupVariance` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `LineItemsQuantityFilterVariance` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `OtherCharges` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `CustomerLocationId` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `VendorLocationId` int DEFAULT NULL,
  `ValidationCompleted` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `TransactionIdentifer` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `SourceInvoiceId` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `PaperlessSubmission` int DEFAULT NULL,
  `Reissued` int DEFAULT NULL,
  `UserField1` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `UserField2` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `UserField3` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `UserField4` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `UserField5` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `UserField6` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `UserField7` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `UserField8` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `UserField9` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `UserField10` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `IsConfidential` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `ArchiveReason` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `PaymentProcessingDate` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `DiscountRequestedAmount` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `DiscountGranted` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `DiscountExpireDate` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `ClientDocId` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `ParentInvoiceId` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `ProjectTypeId` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `SubProjectTypeId` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `USDInvoiceTotal` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `Term` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `PaymentMethod` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `ExternalId` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `CustomerId` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `CalculableOtherCharges` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `AccountCodeId` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `ShipToId` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `TaxCodeId` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `CheckDate` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `Ten99Amount` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `PaymentId` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `InvoiceTotalWithTax` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `IsDaat` int DEFAULT NULL,
  `PrepaymentNoteId` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `HaulerWONumber` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `HaulerServiceDescription` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `HaulerServiceArea` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `HaulerServiceDate` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `HaulerFrequency` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `HaulerQuantity` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `HaulerUnitCost` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `AccountMapping170118ForCloudX`
--

DROP TABLE IF EXISTS `AccountMapping170118ForCloudX`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `AccountMapping170118ForCloudX` (
  `ACCOUNT_NUMBER` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `New Mapping as on Jan 05th 2017` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `New Account Description - 1` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `AccountingVariable`
--

DROP TABLE IF EXISTS `AccountingVariable`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `AccountingVariable` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ClientId` int NOT NULL,
  `ClientCompanyId` int DEFAULT NULL,
  `AccountingVariablesSFId` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `AccountingVariablesName` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AccountingVariablesStatus` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AccountingVariablesType` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `LastActionDate` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_AccountingVariable_ClientId` (`ClientId`) USING BTREE,
  KEY `FK_AccountingVariable_ClientCo` (`ClientCompanyId`) USING BTREE,
  CONSTRAINT `AccountingVariable_ibfk_1` FOREIGN KEY (`ClientCompanyId`) REFERENCES `ClientCompany` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `AccountingVariable_ibfk_2` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=417253 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ActionSecurity`
--

DROP TABLE IF EXISTS `ActionSecurity`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ActionSecurity` (
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `Controller` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Action` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ParentController` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ParentAction` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`UserId`,`Controller`,`Action`),
  KEY `IX_UserId` (`UserId`) USING BTREE,
  CONSTRAINT `ActionSecurity_ibfk_1` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Address`
--

DROP TABLE IF EXISTS `Address`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Address` (
  `AddressId` int NOT NULL AUTO_INCREMENT,
  `StateId` int DEFAULT NULL,
  `ZipCode` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `StreetName` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CityName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Address1` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Address2` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Address3` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Address4` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Country` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PhoneNo` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Email` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Fax` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ContactPerson` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SourceAddressId` int DEFAULT NULL,
  `Created_by` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Created_date` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `LastUpdated_by` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `LastUpdated_date` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`AddressId`),
  KEY `IX_StateId` (`StateId`) USING BTREE,
  CONSTRAINT `Address_ibfk_1` FOREIGN KEY (`StateId`) REFERENCES `State` (`StateId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=50294233 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `AdminTab`
--

DROP TABLE IF EXISTS `AdminTab`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `AdminTab` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `MenuName` varchar(45) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `DisplayName` varchar(45) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ParentMenuId` int DEFAULT NULL,
  `OrderNo` int DEFAULT NULL,
  `ClientId` int DEFAULT NULL,
  PRIMARY KEY (`Id`),
  UNIQUE KEY `AdminTab_Client_Unique` (`ClientId`,`MenuName`) USING BTREE,
  KEY `AdminTab_Client_idx` (`ClientId`) USING BTREE,
  KEY `AdminTab_AdminTab_Par_idx` (`ParentMenuId`) USING BTREE,
  CONSTRAINT `AdminTab_ibfk_1` FOREIGN KEY (`ParentMenuId`) REFERENCES `AdminTab` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `AdminTab_ibfk_2` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Alert`
--

DROP TABLE IF EXISTS `Alert`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Alert` (
  `AlertKey` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `AlertName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AlertGrouping` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Frequency` int NOT NULL DEFAULT '0',
  `StoredProc` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SortOrderGrouping` int NOT NULL DEFAULT '0',
  `SortOrderName` int NOT NULL DEFAULT '0',
  `isActive` bit(1) NOT NULL DEFAULT b'0',
  `isInternal` bit(1) DEFAULT NULL,
  PRIMARY KEY (`AlertKey`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `AlertClient`
--

DROP TABLE IF EXISTS `AlertClient`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `AlertClient` (
  `AlertKey` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ClientId` int NOT NULL,
  `isActive` bit(1) NOT NULL DEFAULT b'0',
  `LastRunDateTime` datetime DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`AlertKey`,`ClientId`),
  KEY `AlertClient_ClientId` (`ClientId`) USING BTREE,
  CONSTRAINT `AlertClient_ibfk_1` FOREIGN KEY (`AlertKey`) REFERENCES `Alert` (`AlertKey`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `AlertClient_ibfk_2` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `AlertClientInstance`
--

DROP TABLE IF EXISTS `AlertClientInstance`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `AlertClientInstance` (
  `AlertId` int NOT NULL AUTO_INCREMENT,
  `AlertKey` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ClientId` int NOT NULL,
  PRIMARY KEY (`AlertId`),
  KEY `AlertClientInstance_AlertClient` (`AlertKey`,`ClientId`) USING BTREE,
  CONSTRAINT `AlertClientInstance_ibfk_1` FOREIGN KEY (`AlertKey`, `ClientId`) REFERENCES `AlertClient` (`AlertKey`, `ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `AlertClientInstanceFields`
--

DROP TABLE IF EXISTS `AlertClientInstanceFields`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `AlertClientInstanceFields` (
  `AlertId` int NOT NULL,
  `Field` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Value` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`AlertId`,`Field`),
  CONSTRAINT `AlertClientInstanceFields_ibfk_1` FOREIGN KEY (`AlertId`) REFERENCES `AlertClientInstance` (`AlertId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `AlertClientInstanceHit`
--

DROP TABLE IF EXISTS `AlertClientInstanceHit`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `AlertClientInstanceHit` (
  `AlertId` int NOT NULL,
  `DataValue` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `RunDateTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`AlertId`,`DataValue`,`RunDateTime`),
  CONSTRAINT `AlertClientInstanceHit_ibfk_1` FOREIGN KEY (`AlertId`) REFERENCES `AlertClientInstance` (`AlertId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `AlertFields`
--

DROP TABLE IF EXISTS `AlertFields`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `AlertFields` (
  `AlertKey` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Field` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Label` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `DataType` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `FieldOrder` int NOT NULL,
  `DependencyField` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`AlertKey`,`Field`),
  CONSTRAINT `AlertFields_ibfk_1` FOREIGN KEY (`AlertKey`) REFERENCES `Alert` (`AlertKey`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ApClerkAlphabtes`
--

DROP TABLE IF EXISTS `ApClerkAlphabtes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApClerkAlphabtes` (
  `UserID` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `Alphabtes` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`UserID`),
  KEY `IX_UserID` (`UserID`) USING BTREE,
  CONSTRAINT `ApClerkAlphabtes_ibfk_1` FOREIGN KEY (`UserID`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ApprovalHistory`
--

DROP TABLE IF EXISTS `ApprovalHistory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApprovalHistory` (
  `ApprovalHistoryID` int NOT NULL AUTO_INCREMENT,
  `InvoiceId` int NOT NULL,
  `ApproverId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `GLCodeId` int NOT NULL,
  `AmountAppoved` decimal(18,4) NOT NULL,
  `StateChangedDate` datetime NOT NULL,
  `CustomerId` int DEFAULT NULL,
  `Recoverabletax` int DEFAULT NULL,
  `SpecialNote` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CategoryId` int DEFAULT NULL,
  `DepartmentId` int DEFAULT NULL,
  `TaxCodeId` int DEFAULT NULL,
  `TaxableAmount` decimal(18,4) DEFAULT NULL,
  `TaxAmount` decimal(18,4) DEFAULT NULL,
  `WithholdingTaxId` int DEFAULT NULL,
  `PurchaseNum` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ImportDoc` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `RecoverableTaxAmout` decimal(18,4) DEFAULT NULL,
  `ProjectId` int DEFAULT NULL,
  `SubProjectId` int DEFAULT NULL,
  `CompanyCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SourceApprovalHistoryId` int DEFAULT NULL,
  `ItemId` int DEFAULT NULL,
  `AccountingVariable1` int DEFAULT NULL,
  `AccountingVariable2` int DEFAULT NULL,
  `AccountingVariable3` int DEFAULT NULL,
  `AccountingVariable4` int DEFAULT NULL,
  `VendorId` int DEFAULT NULL,
  `OrgId` int DEFAULT NULL,
  `AmountInPercent` decimal(18,2) DEFAULT NULL,
  `IsDistributedLine` tinyint(1) DEFAULT NULL,
  `Category1` int DEFAULT NULL,
  `Category2` int DEFAULT NULL,
  `SubCategory1` int DEFAULT NULL,
  `SubCategory2` int DEFAULT NULL,
  `ExternalRef` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ServiceDateGl` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Quantity` decimal(18,2) DEFAULT NULL,
  `UserField1` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField2` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField3` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField4` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField5` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField6` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField7` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField8` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField9` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`ApprovalHistoryID`),
  KEY `IX_ApproverId` (`ApproverId`) USING BTREE,
  KEY `IX_CategoryId` (`CategoryId`) USING BTREE,
  KEY `IX_CustomerId` (`CustomerId`) USING BTREE,
  KEY `IX_DepartmentId` (`DepartmentId`) USING BTREE,
  KEY `IX_GLCodeId` (`GLCodeId`) USING BTREE,
  KEY `IX_InvoiceId` (`InvoiceId`) USING BTREE,
  KEY `IX_ProjectId` (`ProjectId`) USING BTREE,
  KEY `IX_SubProjectId` (`SubProjectId`) USING BTREE,
  KEY `IX_TaxCodeId` (`TaxCodeId`) USING BTREE,
  KEY `IX_WithholdingTaxId` (`WithholdingTaxId`) USING BTREE,
  KEY `ItemId` (`ItemId`) USING BTREE,
  KEY `FK_ApprovalHistory_AccVariable1` (`AccountingVariable1`) USING BTREE,
  KEY `FK_ApprovalHistory_AccVariable2` (`AccountingVariable2`) USING BTREE,
  KEY `FK_ApprovalHistory_AccVariable3` (`AccountingVariable3`) USING BTREE,
  KEY `FK_ApprovalHistory_AccVariable4` (`AccountingVariable4`) USING BTREE,
  KEY `VendorId` (`VendorId`) USING BTREE,
  KEY `OrgId` (`OrgId`) USING BTREE,
  KEY `FK_ApprovalHistory_Category1` (`Category1`) USING BTREE,
  KEY `FK_ApprovalHistory_Category2` (`Category2`) USING BTREE,
  KEY `FK_ApprovalHistory_SubCategory1` (`SubCategory1`) USING BTREE,
  KEY `FK_ApprovalHistory_SubCategory2` (`SubCategory2`) USING BTREE,
  CONSTRAINT `ApprovalHistory_ibfk_1` FOREIGN KEY (`OrgId`) REFERENCES `OrgData` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalHistory_ibfk_10` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalHistory_ibfk_11` FOREIGN KEY (`GLCodeId`) REFERENCES `GLCode` (`GLCodeId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalHistory_ibfk_12` FOREIGN KEY (`ItemId`) REFERENCES `Item` (`ItemId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalHistory_ibfk_13` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalHistory_ibfk_14` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalHistory_ibfk_15` FOREIGN KEY (`ProjectId`) REFERENCES `ProjectType` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalHistory_ibfk_16` FOREIGN KEY (`SubCategory1`) REFERENCES `SubCategrory` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalHistory_ibfk_17` FOREIGN KEY (`SubCategory2`) REFERENCES `SubCategrory` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalHistory_ibfk_18` FOREIGN KEY (`SubProjectId`) REFERENCES `SubProjectType` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalHistory_ibfk_19` FOREIGN KEY (`TaxCodeId`) REFERENCES `Tax` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalHistory_ibfk_2` FOREIGN KEY (`AccountingVariable1`) REFERENCES `AccountingVariable` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalHistory_ibfk_20` FOREIGN KEY (`ApproverId`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalHistory_ibfk_21` FOREIGN KEY (`WithholdingTaxId`) REFERENCES `WithHoldingTax` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalHistory_ibfk_3` FOREIGN KEY (`AccountingVariable2`) REFERENCES `AccountingVariable` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalHistory_ibfk_4` FOREIGN KEY (`AccountingVariable3`) REFERENCES `AccountingVariable` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalHistory_ibfk_5` FOREIGN KEY (`AccountingVariable4`) REFERENCES `AccountingVariable` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalHistory_ibfk_6` FOREIGN KEY (`Category1`) REFERENCES `Category` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalHistory_ibfk_7` FOREIGN KEY (`Category2`) REFERENCES `Category` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalHistory_ibfk_8` FOREIGN KEY (`CategoryId`) REFERENCES `Category` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalHistory_ibfk_9` FOREIGN KEY (`CustomerId`) REFERENCES `Customer` (`CustomerId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=7835573 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ApprovalStatusIdForReport`
--

DROP TABLE IF EXISTS `ApprovalStatusIdForReport`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApprovalStatusIdForReport` (
  `Id` int NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ApprovalStep`
--

DROP TABLE IF EXISTS `ApprovalStep`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApprovalStep` (
  `ApprovalStepId` int NOT NULL AUTO_INCREMENT,
  `StepName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ClientId` int NOT NULL,
  `ClientCompanyId` int DEFAULT NULL,
  `OrderNo` tinyint unsigned NOT NULL,
  `ApprovalStepRule` tinyint unsigned DEFAULT NULL,
  `IsPO` tinyint(1) NOT NULL,
  `WorkflowType` tinyint NOT NULL DEFAULT '0',
  PRIMARY KEY (`ApprovalStepId`),
  KEY `IX_ClientCompanyId` (`ClientCompanyId`) USING BTREE,
  CONSTRAINT `ApprovalStep_ibfk_1` FOREIGN KEY (`ClientCompanyId`) REFERENCES `ClientCompany` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=2060 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ApprovalStepDepartments`
--

DROP TABLE IF EXISTS `ApprovalStepDepartments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApprovalStepDepartments` (
  `ApprovalStepId` int NOT NULL,
  `DepartmentId` int NOT NULL,
  PRIMARY KEY (`ApprovalStepId`,`DepartmentId`),
  KEY `FK_ApprovalStepDepartments_Department` (`DepartmentId`) USING BTREE,
  CONSTRAINT `ApprovalStepDepartments_ibfk_1` FOREIGN KEY (`ApprovalStepId`) REFERENCES `ApprovalStep` (`ApprovalStepId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalStepDepartments_ibfk_2` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ApprovalSubStep`
--

DROP TABLE IF EXISTS `ApprovalSubStep`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApprovalSubStep` (
  `ApprovalSubStepId` int NOT NULL AUTO_INCREMENT,
  `ApprovalStepId` int NOT NULL,
  `SubStepName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `OrderNo` tinyint unsigned NOT NULL,
  `MaxAllowedAmount` decimal(18,2) DEFAULT NULL,
  `ApprovalForwardingRule` tinyint unsigned DEFAULT NULL,
  `CheckExpression` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`ApprovalSubStepId`),
  KEY `IX_ApprovalStepId` (`ApprovalStepId`) USING BTREE,
  CONSTRAINT `ApprovalSubStep_ibfk_1` FOREIGN KEY (`ApprovalStepId`) REFERENCES `ApprovalStep` (`ApprovalStepId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=3046 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ApprovalSubStepCatchAllUserFilter`
--

DROP TABLE IF EXISTS `ApprovalSubStepCatchAllUserFilter`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApprovalSubStepCatchAllUserFilter` (
  `ApprovalSubStepId` int NOT NULL,
  `ApprovalStepCatchAllUserFilterType` tinyint unsigned NOT NULL,
  PRIMARY KEY (`ApprovalSubStepId`,`ApprovalStepCatchAllUserFilterType`),
  KEY `IX_ApprovalSubStepId` (`ApprovalSubStepId`) USING BTREE,
  CONSTRAINT `ApprovalSubStepCatchAllUserFilter_ibfk_1` FOREIGN KEY (`ApprovalSubStepId`) REFERENCES `ApprovalSubStep` (`ApprovalSubStepId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ApprovalSubStepCatchAllUsers`
--

DROP TABLE IF EXISTS `ApprovalSubStepCatchAllUsers`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApprovalSubStepCatchAllUsers` (
  `ApprovalSubStepCatchAllUserId` int NOT NULL AUTO_INCREMENT,
  `ApprovalSubStepId` int NOT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `Alphabets` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PickupFolderName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`ApprovalSubStepCatchAllUserId`),
  UNIQUE KEY `IX_ApprovalSubStepId_UserId_Alphabets_PickupFolderName` (`ApprovalSubStepId`,`UserId`,`Alphabets`,`PickupFolderName`) USING BTREE,
  KEY `IX_ApprovalSubStepId` (`ApprovalSubStepId`) USING BTREE,
  KEY `IX_UserId` (`UserId`) USING BTREE,
  CONSTRAINT `ApprovalSubStepCatchAllUsers_ibfk_1` FOREIGN KEY (`ApprovalSubStepId`) REFERENCES `ApprovalSubStep` (`ApprovalSubStepId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepCatchAllUsers_ibfk_2` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=10417 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ApprovalSubStepOrganization`
--

DROP TABLE IF EXISTS `ApprovalSubStepOrganization`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApprovalSubStepOrganization` (
  `ApprovalSubStepId` int NOT NULL,
  `OrganizationId` int NOT NULL,
  PRIMARY KEY (`ApprovalSubStepId`,`OrganizationId`),
  KEY `IX_ApprovalSubStepId` (`ApprovalSubStepId`) USING BTREE,
  KEY `IX_OrganizationId` (`OrganizationId`) USING BTREE,
  CONSTRAINT `ApprovalSubStepOrganization_ibfk_1` FOREIGN KEY (`ApprovalSubStepId`) REFERENCES `ApprovalSubStep` (`ApprovalSubStepId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepOrganization_ibfk_2` FOREIGN KEY (`OrganizationId`) REFERENCES `OrgData` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ApprovalSubStepUser`
--

DROP TABLE IF EXISTS `ApprovalSubStepUser`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApprovalSubStepUser` (
  `ApprovalSubStepId` int NOT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `ManualAssignmentOnly` tinyint(1) NOT NULL,
  `CompareByFilterIntersection` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`ApprovalSubStepId`,`UserId`),
  KEY `IX_ApprovalSubStepId` (`ApprovalSubStepId`) USING BTREE,
  KEY `IX_UserId` (`UserId`) USING BTREE,
  CONSTRAINT `ApprovalSubStepUser_ibfk_1` FOREIGN KEY (`ApprovalSubStepId`) REFERENCES `ApprovalSubStep` (`ApprovalSubStepId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepUser_ibfk_2` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ApprovalSubStepUserDepartment`
--

DROP TABLE IF EXISTS `ApprovalSubStepUserDepartment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApprovalSubStepUserDepartment` (
  `ApprovalSubStepId` int NOT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `DepartmentId` int NOT NULL,
  PRIMARY KEY (`ApprovalSubStepId`,`UserId`,`DepartmentId`),
  KEY `IX_ApprovalSubStepId_UserId` (`ApprovalSubStepId`,`UserId`) USING BTREE,
  KEY `IX_DepartmentId` (`DepartmentId`) USING BTREE,
  KEY `UserId` (`UserId`) USING BTREE,
  CONSTRAINT `ApprovalSubStepUserDepartment_ibfk_1` FOREIGN KEY (`ApprovalSubStepId`, `UserId`) REFERENCES `ApprovalSubStepUser` (`ApprovalSubStepId`, `UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepUserDepartment_ibfk_2` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ApprovalSubStepUserFilter`
--

DROP TABLE IF EXISTS `ApprovalSubStepUserFilter`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApprovalSubStepUserFilter` (
  `ApprovalSubStepId` int NOT NULL,
  `ApprovalStepUserFilterType` tinyint unsigned NOT NULL,
  PRIMARY KEY (`ApprovalSubStepId`,`ApprovalStepUserFilterType`),
  KEY `IX_ApprovalSubStepId` (`ApprovalSubStepId`) USING BTREE,
  CONSTRAINT `ApprovalSubStepUserFilter_ibfk_1` FOREIGN KEY (`ApprovalSubStepId`) REFERENCES `ApprovalSubStep` (`ApprovalSubStepId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ApprovalSubStepUserGL`
--

DROP TABLE IF EXISTS `ApprovalSubStepUserGL`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApprovalSubStepUserGL` (
  `ApprovalSubStepId` int NOT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `GLCodeId` int NOT NULL,
  PRIMARY KEY (`ApprovalSubStepId`,`UserId`,`GLCodeId`),
  KEY `IX_ApprovalSubStepId_UserId` (`ApprovalSubStepId`,`UserId`) USING BTREE,
  KEY `IX_GLCodeId` (`GLCodeId`) USING BTREE,
  CONSTRAINT `ApprovalSubStepUserGL_ibfk_1` FOREIGN KEY (`ApprovalSubStepId`, `UserId`) REFERENCES `ApprovalSubStepUser` (`ApprovalSubStepId`, `UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepUserGL_ibfk_2` FOREIGN KEY (`GLCodeId`) REFERENCES `GLCode` (`GLCodeId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ApprovalSubStepUserOrgData`
--

DROP TABLE IF EXISTS `ApprovalSubStepUserOrgData`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApprovalSubStepUserOrgData` (
  `ApprovalSubStepId` int NOT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `OrgId` int NOT NULL,
  PRIMARY KEY (`ApprovalSubStepId`,`UserId`,`OrgId`),
  KEY `FK_ApprovalSubStepUserOrgData_ibfk_2` (`UserId`) USING BTREE,
  KEY `FK_ApprovalSubStepUserOrgData_ibfk_3` (`OrgId`) USING BTREE,
  CONSTRAINT `ApprovalSubStepUserOrgData_ibfk_1` FOREIGN KEY (`ApprovalSubStepId`, `UserId`) REFERENCES `ApprovalSubStepUser` (`ApprovalSubStepId`, `UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepUserOrgData_ibfk_2` FOREIGN KEY (`ApprovalSubStepId`) REFERENCES `ApprovalSubStep` (`ApprovalSubStepId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepUserOrgData_ibfk_3` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepUserOrgData_ibfk_4` FOREIGN KEY (`OrgId`) REFERENCES `OrgData` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ApprovalSubStepUserProject`
--

DROP TABLE IF EXISTS `ApprovalSubStepUserProject`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApprovalSubStepUserProject` (
  `ApprovalSubStepId` int NOT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `ProjectTypeId` int NOT NULL,
  PRIMARY KEY (`ApprovalSubStepId`,`UserId`,`ProjectTypeId`),
  KEY `IX_ApprovalSubStepId_UserId` (`ApprovalSubStepId`,`UserId`) USING BTREE,
  KEY `IX_ProjectTypeId` (`ProjectTypeId`) USING BTREE,
  KEY `UserId` (`UserId`) USING BTREE,
  CONSTRAINT `ApprovalSubStepUserProject_ibfk_1` FOREIGN KEY (`ApprovalSubStepId`, `UserId`) REFERENCES `ApprovalSubStepUser` (`ApprovalSubStepId`, `UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepUserProject_ibfk_2` FOREIGN KEY (`ProjectTypeId`) REFERENCES `ProjectType` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ApprovalSubStepUserVendor`
--

DROP TABLE IF EXISTS `ApprovalSubStepUserVendor`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApprovalSubStepUserVendor` (
  `ApprovalSubStepId` int NOT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `VendorId` int NOT NULL,
  `FirstEscalationManagerId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SecondEscalationManagerId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ThirdEscalationManagerId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Duration` int DEFAULT NULL,
  `AddedDate` datetime DEFAULT NULL,
  PRIMARY KEY (`ApprovalSubStepId`,`UserId`,`VendorId`),
  KEY `IX_ApprovalSubStepId` (`ApprovalSubStepId`) USING BTREE,
  KEY `IX_UserId` (`UserId`) USING BTREE,
  KEY `IX_VendorId` (`VendorId`) USING BTREE,
  CONSTRAINT `ApprovalSubStepUserVendor_ibfk_1` FOREIGN KEY (`ApprovalSubStepId`, `UserId`) REFERENCES `ApprovalSubStepUser` (`ApprovalSubStepId`, `UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepUserVendor_ibfk_2` FOREIGN KEY (`ApprovalSubStepId`) REFERENCES `ApprovalSubStep` (`ApprovalSubStepId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepUserVendor_ibfk_3` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepUserVendor_ibfk_4` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`cloudxuser`@`%`*/ /*!50003 TRIGGER `ApprovalSubStepUserVendor_Before_Insert` BEFORE INSERT ON `ApprovalSubStepUserVendor` FOR EACH ROW BEGIN
  SET New.AddedDate = NOW();
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `ApprovalSubStepUserVendorAccountNumber`
--

DROP TABLE IF EXISTS `ApprovalSubStepUserVendorAccountNumber`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApprovalSubStepUserVendorAccountNumber` (
  `ApprovalSubStepId` int NOT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `VendorId` int NOT NULL,
  `AccountNumber` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `FirstEscalationManagerId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SecondEscalationManagerId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ThirdEscalationManagerId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Duration` int DEFAULT NULL,
  PRIMARY KEY (`ApprovalSubStepId`,`UserId`,`VendorId`,`AccountNumber`),
  KEY `IX_ApprovalSubStepId` (`ApprovalSubStepId`) USING BTREE,
  KEY `IX_UserId` (`UserId`) USING BTREE,
  KEY `IX_VendorId` (`VendorId`) USING BTREE,
  KEY `IX_AccountNumber` (`AccountNumber`) USING BTREE,
  CONSTRAINT `ApprovalSubStepUserVendorAccountNumber_ibfk_1` FOREIGN KEY (`ApprovalSubStepId`, `UserId`) REFERENCES `ApprovalSubStepUser` (`ApprovalSubStepId`, `UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepUserVendorAccountNumber_ibfk_2` FOREIGN KEY (`ApprovalSubStepId`) REFERENCES `ApprovalSubStep` (`ApprovalSubStepId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepUserVendorAccountNumber_ibfk_3` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepUserVendorAccountNumber_ibfk_4` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ApprovalSubStepUserVendorAlphabet`
--

DROP TABLE IF EXISTS `ApprovalSubStepUserVendorAlphabet`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApprovalSubStepUserVendorAlphabet` (
  `ApprovalSubStepId` int NOT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `Alphabets` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`ApprovalSubStepId`,`UserId`),
  KEY `IX_ApprovalSubStepId_UserId` (`ApprovalSubStepId`,`UserId`) USING BTREE,
  CONSTRAINT `ApprovalSubStepUserVendorAlphabet_ibfk_1` FOREIGN KEY (`ApprovalSubStepId`, `UserId`) REFERENCES `ApprovalSubStepUser` (`ApprovalSubStepId`, `UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ApprovalSubStepUserVendorDepartment`
--

DROP TABLE IF EXISTS `ApprovalSubStepUserVendorDepartment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApprovalSubStepUserVendorDepartment` (
  `ApprovalSubStepId` int NOT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `VendorId` int NOT NULL,
  `DepartmentId` int NOT NULL,
  `FirstEscalationManagerId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SecondEscalationManagerId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ThirdEscalationManagerId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Duration` int DEFAULT NULL,
  PRIMARY KEY (`ApprovalSubStepId`,`UserId`,`VendorId`,`DepartmentId`),
  KEY `IX_ApprovalSubStepId` (`ApprovalSubStepId`) USING BTREE,
  KEY `IX_UserId` (`UserId`) USING BTREE,
  KEY `IX_VendorId` (`VendorId`) USING BTREE,
  KEY `IX_DepartmentId` (`DepartmentId`) USING BTREE,
  CONSTRAINT `ApprovalSubStepUserVendorDepartment_ibfk_1` FOREIGN KEY (`ApprovalSubStepId`, `UserId`) REFERENCES `ApprovalSubStepUser` (`ApprovalSubStepId`, `UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepUserVendorDepartment_ibfk_2` FOREIGN KEY (`ApprovalSubStepId`) REFERENCES `ApprovalSubStep` (`ApprovalSubStepId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepUserVendorDepartment_ibfk_3` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepUserVendorDepartment_ibfk_4` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepUserVendorDepartment_ibfk_5` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ApprovalSubStepUserVendorGL`
--

DROP TABLE IF EXISTS `ApprovalSubStepUserVendorGL`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApprovalSubStepUserVendorGL` (
  `ApprovalSubStepId` int NOT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `VendorId` int NOT NULL,
  `GLCodeId` int NOT NULL,
  `FirstEscalationManagerId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SecondEscalationManagerId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ThirdEscalationManagerId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Duration` int DEFAULT NULL,
  PRIMARY KEY (`ApprovalSubStepId`,`UserId`,`VendorId`,`GLCodeId`),
  KEY `IX_ApprovalSubStepId` (`ApprovalSubStepId`) USING BTREE,
  KEY `IX_UserId` (`UserId`) USING BTREE,
  KEY `IX_VendorId` (`VendorId`) USING BTREE,
  KEY `IX_GLCodeId` (`GLCodeId`) USING BTREE,
  CONSTRAINT `ApprovalSubStepUserVendorGL_ibfk_1` FOREIGN KEY (`ApprovalSubStepId`, `UserId`) REFERENCES `ApprovalSubStepUser` (`ApprovalSubStepId`, `UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepUserVendorGL_ibfk_2` FOREIGN KEY (`ApprovalSubStepId`) REFERENCES `ApprovalSubStep` (`ApprovalSubStepId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepUserVendorGL_ibfk_3` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepUserVendorGL_ibfk_4` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepUserVendorGL_ibfk_5` FOREIGN KEY (`GLCodeId`) REFERENCES `GLCode` (`GLCodeId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ApprovalSubStepUserVendorOrgData`
--

DROP TABLE IF EXISTS `ApprovalSubStepUserVendorOrgData`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApprovalSubStepUserVendorOrgData` (
  `ApprovalSubStepId` int NOT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `VendorId` int NOT NULL,
  `OrgId` int NOT NULL,
  PRIMARY KEY (`ApprovalSubStepId`,`UserId`,`VendorId`,`OrgId`),
  KEY `FK_ApprovalSubStepUserVendorOrgData_ibfk_2` (`UserId`) USING BTREE,
  KEY `FK_ApprovalSubStepUserVendorOrgData_ibfk_3` (`VendorId`) USING BTREE,
  KEY `FK_ApprovalSubStepUserVendorOrgData_ibfk_4` (`OrgId`) USING BTREE,
  CONSTRAINT `ApprovalSubStepUserVendorOrgData_ibfk_1` FOREIGN KEY (`ApprovalSubStepId`, `UserId`) REFERENCES `ApprovalSubStepUser` (`ApprovalSubStepId`, `UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepUserVendorOrgData_ibfk_2` FOREIGN KEY (`ApprovalSubStepId`) REFERENCES `ApprovalSubStep` (`ApprovalSubStepId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepUserVendorOrgData_ibfk_3` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepUserVendorOrgData_ibfk_4` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalSubStepUserVendorOrgData_ibfk_5` FOREIGN KEY (`OrgId`) REFERENCES `OrgData` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ApprovalWorkFlow`
--

DROP TABLE IF EXISTS `ApprovalWorkFlow`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApprovalWorkFlow` (
  `VendorId` int NOT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `Title` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `FirstEscalationManagerId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SeondEscalationManagerId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ThirdEscalationManagerId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ExceptionHandlerId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CurrentLevelUserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Duration` int NOT NULL,
  `Type` tinyint unsigned NOT NULL,
  PRIMARY KEY (`VendorId`,`UserId`,`Title`),
  KEY `IX_CurrentLevelUserId` (`CurrentLevelUserId`) USING BTREE,
  KEY `IX_ExceptionHandlerId` (`ExceptionHandlerId`) USING BTREE,
  KEY `IX_FirstEscalationManagerId` (`FirstEscalationManagerId`) USING BTREE,
  KEY `IX_SeondEscalationManagerId` (`SeondEscalationManagerId`) USING BTREE,
  KEY `IX_ThirdEscalationManagerId` (`ThirdEscalationManagerId`) USING BTREE,
  KEY `IX_UserId` (`UserId`) USING BTREE,
  KEY `IX_VendorId` (`VendorId`) USING BTREE,
  CONSTRAINT `ApprovalWorkFlow_ibfk_1` FOREIGN KEY (`CurrentLevelUserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalWorkFlow_ibfk_2` FOREIGN KEY (`ExceptionHandlerId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalWorkFlow_ibfk_3` FOREIGN KEY (`FirstEscalationManagerId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalWorkFlow_ibfk_4` FOREIGN KEY (`SeondEscalationManagerId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalWorkFlow_ibfk_5` FOREIGN KEY (`ThirdEscalationManagerId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalWorkFlow_ibfk_6` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `ApprovalWorkFlow_ibfk_7` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ApproverByAmount`
--

DROP TABLE IF EXISTS `ApproverByAmount`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApproverByAmount` (
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `MaximumAllowedAmount` decimal(18,2) NOT NULL,
  `SecondApproverId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `AuthCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Id` int NOT NULL AUTO_INCREMENT,
  `VendorId` int DEFAULT NULL,
  `IsPOIsNoPOIsBoth` tinyint(1) DEFAULT NULL,
  `WorkflowType` tinyint DEFAULT '0',
  `CostCenters` varchar(4000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ClientCompanyId` int DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_SecondApproverId` (`SecondApproverId`) USING BTREE,
  KEY `IX_UserId` (`UserId`) USING BTREE,
  KEY `IX_VendorId` (`VendorId`) USING BTREE,
  KEY `FK_ApproverByAmount_ClientCompany_Id` (`ClientCompanyId`) USING BTREE,
  CONSTRAINT `ApproverByAmount_ibfk_1` FOREIGN KEY (`ClientCompanyId`) REFERENCES `ClientCompany` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApproverByAmount_ibfk_2` FOREIGN KEY (`SecondApproverId`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `ApproverByAmount_ibfk_3` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `ApproverByAmount_ibfk_4` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=87476 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ApproverByDepartment`
--

DROP TABLE IF EXISTS `ApproverByDepartment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApproverByDepartment` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `MaximumAllowedAmount` decimal(18,2) NOT NULL,
  `SecondApproverId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `DepartmentId` int DEFAULT NULL,
  PRIMARY KEY (`Id`),
  UNIQUE KEY `IX_ApproverByDepartment_UniqueId` (`UserId`,`MaximumAllowedAmount`,`SecondApproverId`,`DepartmentId`) USING BTREE,
  KEY `IX_SecondApproverId` (`SecondApproverId`) USING BTREE,
  KEY `IX_UserId` (`UserId`) USING BTREE,
  KEY `IX_DepartmentId` (`DepartmentId`) USING BTREE,
  CONSTRAINT `ApproverByDepartment_ibfk_1` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ApproverByDepartment_ibfk_2` FOREIGN KEY (`SecondApproverId`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `ApproverByDepartment_ibfk_3` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=53589 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ApproverGLCode`
--

DROP TABLE IF EXISTS `ApproverGLCode`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApproverGLCode` (
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `GLCodeId` int NOT NULL,
  `Id` int NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`Id`),
  KEY `IX_GLCodeId` (`GLCodeId`) USING BTREE,
  KEY `IX_UserId` (`UserId`) USING BTREE,
  CONSTRAINT `ApproverGLCode_ibfk_1` FOREIGN KEY (`GLCodeId`) REFERENCES `GLCode` (`GLCodeId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `ApproverGLCode_ibfk_2` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=3295278 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ApproverPerformanceReport`
--

DROP TABLE IF EXISTS `ApproverPerformanceReport`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApproverPerformanceReport` (
  `ActorId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `WeekOf` datetime NOT NULL,
  `GeneratedOn` datetime NOT NULL,
  `Average` float(12,5) NOT NULL,
  `Maximum` int NOT NULL,
  `YearlyAverage` float(12,5) NOT NULL,
  `Total` int NOT NULL,
  `YearlyTotal` int NOT NULL,
  PRIMARY KEY (`ActorId`,`WeekOf`),
  CONSTRAINT `ApproverPerformanceReport_ibfk_1` FOREIGN KEY (`ActorId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ApproverSetting`
--

DROP TABLE IF EXISTS `ApproverSetting`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ApproverSetting` (
  `InvoiceId` int NOT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `DateIssued` datetime NOT NULL,
  `IsDelegated` tinyint(1) NOT NULL,
  `IsApproved` tinyint(1) NOT NULL,
  `IsEscalated` tinyint(1) NOT NULL,
  `OrderNo` int NOT NULL,
  `IsHold` tinyint(1) NOT NULL,
  `RecoveryDate` datetime DEFAULT NULL,
  PRIMARY KEY (`InvoiceId`,`UserId`),
  KEY `IX_InvoiceId` (`InvoiceId`) USING BTREE,
  KEY `IX_UserId` (`UserId`) USING BTREE,
  CONSTRAINT `ApproverSetting_ibfk_1` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `ApproverSetting_ibfk_2` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`cloudxuser`@`%`*/ /*!50003 TRIGGER `ApproverSetting_AFTER_INSERT` AFTER INSERT ON `ApproverSetting` FOR EACH ROW BEGIN
  DECLARE id int;
  DECLARE UserId varchar(50);
  DECLARE IsDelegate int;
  DECLARE IsApproved int;
  DECLARE IsEscalated int;
  DECLARE IsHold int;
  DECLARE RecoveryDate date;
  DECLARE OrderNo int;
  DECLARE ClientId int;
  DECLARE CountRecord int;

  SET id = New.InvoiceId;
  SET UserId = NEW.UserId;
  SET IsDelegate = NEW.IsDelegated;
  SET IsApproved = NEW.IsApproved;
  SET IsEscalated = NEW.IsEscalated;
  SET IsHold = NEW.IsHold;
  SET RecoveryDate = NEW.RecoveryDate;
  SET OrderNo = NEW.OrderNo;
  SELECT
    ClientId
  FROM Invoice
  WHERE InvoiceId = id LIMIT 1 INTO ClientId;

  IF ClientId NOT IN (SELECT
        *
      FROM UserInvoiceAssignmentTriggerExcludedClients) THEN
    SELECT
      COUNT(InvoiceId)
    FROM Invoice
    WHERE InvoiceId = id
    AND IsPaused = 0
    AND (
    (ApprovalRequired = 0
    AND IsPOInvoice = 1)
    OR (ApprovalRequired = 1
    AND IsPOInvoice = 0)
    )
    AND ApprovalStatusId = 3
    AND IsDeleted = 0 INTO CountRecord;

    DELETE
      FROM UserInvoiceAssignment
    WHERE InvoiceId = id;

    IF IsDelegate = 0
      AND IsApproved = 0
      AND IsEscalated = 0
      AND OrderNo = 1
      AND IsHold = 0
      AND CountRecord > 0 THEN
      INSERT INTO UserInvoiceAssignment (InvoiceId, UserId, `Type`, State)
        SELECT
          InvoiceId,
          UserId,
          0,
          2
        FROM NEW;

    END IF;
  END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`cloudxuser`@`%`*/ /*!50003 TRIGGER `ApproverSetting_AFTER_UPDATE` AFTER UPDATE ON `ApproverSetting` FOR EACH ROW BEGIN
  DECLARE id int;
  DECLARE UserId varchar(50);
  DECLARE IsDelegate int;
  DECLARE IsApproved int;
  DECLARE IsEscalated int;
  DECLARE IsHold int;
  DECLARE RecoveryDate date;
  DECLARE OrderNo int;
  DECLARE ClientId int;
  DECLARE CountRecord int;

  SET id = New.InvoiceId;
  SET UserId = NEW.UserId;
  SET IsDelegate = NEW.IsDelegated;
  SET IsApproved = NEW.IsApproved;
  SET IsEscalated = NEW.IsEscalated;
  SET IsHold = NEW.IsHold;
  SET RecoveryDate = NEW.RecoveryDate;
  SET OrderNo = NEW.OrderNo;
  SELECT
    ClientId
  FROM Invoice
  WHERE InvoiceId = id LIMIT 1 INTO ClientId;

  IF ClientId NOT IN (SELECT
        *
      FROM UserInvoiceAssignmentTriggerExcludedClients) THEN
    SELECT
      COUNT(InvoiceId)
    FROM Invoice
    WHERE InvoiceId = id
    AND IsPaused = 0
    AND (
    (ApprovalRequired = 0
    AND IsPOInvoice = 1)
    OR (ApprovalRequired = 1
    AND IsPOInvoice = 0)
    )
    AND ApprovalStatusId = 3
    AND IsDeleted = 0 INTO CountRecord;

    DELETE
      FROM UserInvoiceAssignment
    WHERE InvoiceId = id;

    IF IsDelegate = 0
      AND IsApproved = 0
      AND IsEscalated = 0
      AND OrderNo = 1
      AND IsHold = 0
      AND CountRecord > 0 THEN
      INSERT INTO UserInvoiceAssignment (InvoiceId, UserId, `Type`, State)
        SELECT
          InvoiceId,
          UserId,
          0,
          2
        FROM NEW;

    END IF;
  END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`cloudxuser`@`%`*/ /*!50003 TRIGGER `ApproverSetting_AFTER_DELETE` AFTER DELETE ON `ApproverSetting` FOR EACH ROW BEGIN
  DECLARE id int;
  DECLARE UserId varchar(50);
  DECLARE IsDelegate int;
  DECLARE IsApproved int;
  DECLARE IsEscalated int;
  DECLARE IsHold int;
  DECLARE RecoveryDate date;
  DECLARE OrderNo int;
  DECLARE CountRecord int;
  DECLARE ClientId int;

  SET id = OLD.InvoiceId;
  SET UserId = OLD.UserId;
  SET IsDelegate = OLD.IsDelegated;
  SET IsApproved = OLD.IsApproved;
  SET IsEscalated = OLD.IsEscalated;
  SET IsHold = OLD.IsHold;
  SET RecoveryDate = OLD.RecoveryDate;
  SET OrderNo = OLD.OrderNo;
  SELECT
    COUNT(InvoiceId)
  FROM Invoice
  WHERE InvoiceId = id
  AND IsPaused = 0
  AND (
  (ApprovalRequired = 0
  AND IsPOInvoice = 1)
  OR (ApprovalRequired = 1
  AND IsPOInvoice = 0)
  )
  AND ApprovalStatusId = 3
  AND IsDeleted = 0 INTO CountRecord;

  SELECT
    ClientId
  FROM Invoice
  WHERE InvoiceId = id INTO ClientId;

  IF ClientId NOT IN (SELECT
        *
      FROM UserInvoiceAssignmentTriggerExcludedClients) THEN
    IF IsDelegate = 0
      AND IsApproved = 0
      AND IsEscalated = 0
      AND OrderNo = 1
      AND IsHold = 0
      AND CountRecord > 0 THEN
      DELETE
        FROM UserInvoiceAssignment
      WHERE CAST(UserInvoiceAssignment.InvoiceId AS char(50)) + CAST(UserInvoiceAssignment.UserId AS char(50)) IN (SELECT
            (CAST(DELETED.InvoiceId AS char(50)) + CAST(DELETED.UserId AS char(50)))
          FROM OLD);
    END IF;
  END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `ArchiveReason`
--

DROP TABLE IF EXISTS `ArchiveReason`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ArchiveReason` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ArchiveReason` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ClientId` int NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3271 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `AuditorAssigment`
--

DROP TABLE IF EXISTS `AuditorAssigment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `AuditorAssigment` (
  `AssigmentId` int NOT NULL AUTO_INCREMENT,
  `AssignedBy` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `AssigmentDate` datetime NOT NULL,
  `AuditorID` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `InvoiceID` int NOT NULL,
  `IsAudited` tinyint(1) NOT NULL,
  PRIMARY KEY (`AssigmentId`),
  KEY `IX_AssignedBy` (`AssignedBy`) USING BTREE,
  KEY `IX_AuditorID` (`AuditorID`) USING BTREE,
  KEY `IX_InvoiceID` (`InvoiceID`) USING BTREE,
  CONSTRAINT `AuditorAssigment_ibfk_1` FOREIGN KEY (`InvoiceID`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `AuditorAssigment_ibfk_2` FOREIGN KEY (`AssignedBy`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `AuditorAssigment_ibfk_3` FOREIGN KEY (`AuditorID`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=2434 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `AuditorReviewHistory`
--

DROP TABLE IF EXISTS `AuditorReviewHistory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `AuditorReviewHistory` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ClientId` int NOT NULL,
  `ClosedDate` datetime DEFAULT (utc_timestamp()),
  `ClosedBy` char(36) COLLATE utf8mb4_general_ci NOT NULL,
  `AuditorID` char(36) COLLATE utf8mb4_general_ci NOT NULL,
  `EntryDate` datetime NOT NULL,
  `Comment` longtext COLLATE utf8mb4_general_ci NOT NULL,
  `InvoiceID` int NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `AuditorReviewHistory_InvoiceId` (`InvoiceID`),
  KEY `AuditorReviewHistory_ClientId` (`AuditorID`),
  KEY `AuditorReviewHistory_AuditorId` (`ClientId`),
  CONSTRAINT `AuditorReviewHistory_AuditorId` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`),
  CONSTRAINT `AuditorReviewHistory_ClientId` FOREIGN KEY (`AuditorID`) REFERENCES `User` (`UserId`),
  CONSTRAINT `AuditorReviewHistory_InvoiceId` FOREIGN KEY (`InvoiceID`) REFERENCES `Invoice` (`InvoiceId`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci AVG_ROW_LENGTH=3276 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `AuditorsComments`
--

DROP TABLE IF EXISTS `AuditorsComments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `AuditorsComments` (
  `commentID` int NOT NULL AUTO_INCREMENT,
  `EntryDate` datetime NOT NULL,
  `AuditorID` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `InvoiceID` int NOT NULL,
  `Comment` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`commentID`),
  KEY `IX_AuditorID` (`AuditorID`) USING BTREE,
  KEY `IX_InvoiceID` (`InvoiceID`) USING BTREE,
  CONSTRAINT `AuditorsComments_ibfk_1` FOREIGN KEY (`InvoiceID`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `AuditorsComments_ibfk_2` FOREIGN KEY (`AuditorID`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `AutoApproveReport`
--

DROP TABLE IF EXISTS `AutoApproveReport`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `AutoApproveReport` (
  `InvoiceId` int NOT NULL,
  `ItemLineItemDetailId` int NOT NULL,
  `LastAttemptDate` datetime NOT NULL,
  `Previous1ItemLineItemDetailId` int DEFAULT NULL,
  `Previous2ItemLineItemDetailId` int DEFAULT NULL,
  `IsValid` tinyint(1) NOT NULL,
  `FailReason` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ActionDate` date DEFAULT NULL,
  PRIMARY KEY (`InvoiceId`,`ItemLineItemDetailId`,`LastAttemptDate`),
  KEY `IX_InvoiceId` (`InvoiceId`) USING BTREE,
  KEY `IX_AutoApproveReport_Filter` (`InvoiceId`,`IsValid`,`ActionDate`) USING BTREE,
  CONSTRAINT `AutoApproveReport_ibfk_1` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`cloudxuser`@`%`*/ /*!50003 TRIGGER `AutoApproveReport_BEFORE_INSERT` BEFORE INSERT ON `AutoApproveReport` FOR EACH ROW BEGIN
  SET NEW.ActionDate = DATE(NEW.LastAttemptDate);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `AutomaticApproveVendors`
--

DROP TABLE IF EXISTS `AutomaticApproveVendors`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `AutomaticApproveVendors` (
  `AutomaticApproveVendorId` int NOT NULL AUTO_INCREMENT,
  `ClientId` int NOT NULL,
  `VendorId` int NOT NULL,
  PRIMARY KEY (`AutomaticApproveVendorId`),
  KEY `IX_ClientId` (`ClientId`) USING BTREE,
  CONSTRAINT `AutomaticApproveVendors_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=222 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Batch`
--

DROP TABLE IF EXISTS `Batch`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Batch` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `BatchName` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CapturedBatchID` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `BatchType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CreatedDate` datetime DEFAULT NULL,
  `Source` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ClientID` int DEFAULT NULL,
  `Sender` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SourceBatchId` int DEFAULT NULL,
  `PickupFolderName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `OrderNo` int DEFAULT NULL,
  `MatchWithCSV` tinyint(1) NOT NULL DEFAULT '0',
  `LoadedToServerDate` datetime DEFAULT NULL,
  `Receiver` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ReceivedBatchName` varchar(40) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SenderAndReceiverUpdatedDate` datetime DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `ReceivedBatchName` (`ReceivedBatchName`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=6600605 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `CSVBatch`
--

DROP TABLE IF EXISTS `CSVBatch`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `CSVBatch` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `BatchName` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CapturedBatchID` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `BatchType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CreatedDate` datetime DEFAULT NULL,
  `Source` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ClientID` int DEFAULT NULL,
  `Sender` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SourceBatchId` int DEFAULT NULL,
  `PickupFolderName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `OrderNo` int DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=1168882 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `CSVInvoice`
--

DROP TABLE IF EXISTS `CSVInvoice`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `CSVInvoice` (
  `ClientId` int NOT NULL,
  `InvoiceId` int NOT NULL AUTO_INCREMENT,
  `VendorId` int DEFAULT NULL,
  `InvoiceNo` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `InvoiceDate` datetime DEFAULT NULL,
  `PaymentDueDate` datetime DEFAULT NULL,
  `InvoiceTotal` decimal(18,2) DEFAULT NULL,
  `ApprovalRequired` tinyint(1) NOT NULL,
  `ApprovalStatusId` tinyint unsigned NOT NULL,
  `AprovedDate` datetime DEFAULT NULL,
  `IsPaused` tinyint(1) NOT NULL,
  `IsExceptionRaised` tinyint(1) NOT NULL,
  `ShippedToAddressId` int DEFAULT NULL,
  `ApproverId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsPOInvoice` tinyint(1) NOT NULL,
  `ScannedDate` datetime NOT NULL,
  `PONumber` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ShippingDate` datetime DEFAULT NULL,
  `NetTermDate` datetime DEFAULT NULL,
  `NetTermDiscount` decimal(18,2) DEFAULT NULL,
  `Tax` decimal(18,2) DEFAULT NULL,
  `FreightCharges` decimal(18,2) DEFAULT NULL,
  `InvoiceType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `CheckNumber` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsModified` tinyint(1) NOT NULL,
  `BillToAddressId` int DEFAULT NULL,
  `RemitToAddressId` int DEFAULT NULL,
  `OrgId` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Currency` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CountryCode` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CompanyCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ModifiedDate` datetime DEFAULT NULL,
  `Comment` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `ShipToName` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `BillToName` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `BatchID` int DEFAULT NULL,
  `InvoiceName` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CaptureCompletedDate` datetime DEFAULT NULL,
  `LastActionDate` datetime DEFAULT NULL,
  `GLDate` datetime DEFAULT NULL,
  `LastActionBy` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsDeleted` tinyint(1) NOT NULL,
  `LocationId` int DEFAULT NULL,
  `IsOutPutPending` tinyint(1) NOT NULL,
  `CaptureBatchId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AdjustmentAmount` decimal(18,2) DEFAULT NULL,
  `SubCategoryType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorSiteId` int DEFAULT NULL,
  `PayImmediate` tinyint(1) NOT NULL,
  `VerifierId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `TaxGLCodeId` int DEFAULT NULL,
  `AccountCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `StoreNumber` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ServiceMonth` datetime DEFAULT NULL,
  `IsMultipleSubmission` tinyint(1) NOT NULL,
  `OpenTaskTime` datetime DEFAULT NULL,
  `CompletedTaskTime` datetime DEFAULT NULL,
  `RecognitionCompleteTime` datetime DEFAULT NULL,
  `ABBYYBatchName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VerifierName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsValidated` tinyint(1) DEFAULT NULL,
  `DeliveryNumber` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsBigAirSyncComplete` tinyint(1) DEFAULT NULL,
  `IsLocked` tinyint(1) NOT NULL,
  `LockedAt` datetime DEFAULT NULL,
  `LockedBy` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Container` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `POLookup` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `POReverseLookup` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `POReverseLookupVariance` int DEFAULT NULL,
  `LineItemsQuantityFilterVariance` int DEFAULT NULL,
  `OtherCharges` decimal(18,2) DEFAULT NULL,
  `CustomerLocationId` int DEFAULT NULL,
  `VendorLocationId` int DEFAULT NULL,
  `ValidationCompleted` tinyint(1) DEFAULT NULL,
  `TransactionIdentifer` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SourceInvoiceId` int DEFAULT NULL,
  `PaperlessSubmission` tinyint(1) DEFAULT '0',
  `Reissued` tinyint(1) NOT NULL,
  `UserField1` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField2` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField3` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField4` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField5` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField6` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField7` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField8` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField9` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField10` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsConfidential` tinyint(1) DEFAULT '0',
  `ArchiveReason` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PaymentProcessingDate` datetime DEFAULT NULL,
  `DiscountRequestedAmount` decimal(18,2) DEFAULT NULL,
  `DiscountGranted` tinyint(1) DEFAULT NULL,
  `DiscountExpireDate` datetime DEFAULT NULL,
  `ClientDocId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ParentInvoiceId` int DEFAULT NULL,
  `ProjectTypeId` int DEFAULT NULL,
  `SubProjectTypeId` int DEFAULT NULL,
  `USDInvoiceTotal` decimal(18,2) DEFAULT NULL,
  `Term` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PaymentMethod` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ExternalId` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CustomerId` int DEFAULT NULL,
  `AccountCodeId` int DEFAULT NULL,
  PRIMARY KEY (`InvoiceId`),
  KEY `IX_CSVApprovalStatusId` (`ApprovalStatusId`) USING BTREE,
  KEY `IX_CSVApproverId` (`ApproverId`) USING BTREE,
  KEY `IX_CSVBatchID` (`BatchID`) USING BTREE,
  KEY `IX_CSVBillToAddressId` (`BillToAddressId`) USING BTREE,
  KEY `IX_CSVClientId` (`ClientId`) USING BTREE,
  KEY `IX_CSVCustomerLocationId` (`CustomerLocationId`) USING BTREE,
  KEY `IX_CSVLocationId` (`LocationId`) USING BTREE,
  KEY `IX_CSVRemitToAddressId` (`RemitToAddressId`) USING BTREE,
  KEY `IX_CSVShippedToAddressId` (`ShippedToAddressId`) USING BTREE,
  KEY `IX_CSVVendorId` (`VendorId`) USING BTREE,
  KEY `IX_CSVVendorLocationId` (`VendorLocationId`) USING BTREE,
  KEY `IX_CSVVendorSiteId` (`VendorSiteId`) USING BTREE,
  KEY `IX_CSVVerifierId` (`VerifierId`) USING BTREE,
  KEY `IX_CSVClientId_InvoiceNo` (`ClientId`,`InvoiceNo`) USING BTREE,
  KEY `FK_CSVInvoice_CSVInvoice_ParentInvoiceId` (`ParentInvoiceId`) USING BTREE,
  KEY `CSVProjectId` (`ProjectTypeId`) USING BTREE,
  KEY `CSVSubProjectId` (`SubProjectTypeId`) USING BTREE,
  KEY `IX_CustomerId` (`CustomerId`) USING BTREE,
  CONSTRAINT `CSVInvoice_ibfk_1` FOREIGN KEY (`BillToAddressId`) REFERENCES `Address` (`AddressId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `CSVInvoice_ibfk_10` FOREIGN KEY (`RemitToAddressId`) REFERENCES `Address` (`AddressId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `CSVInvoice_ibfk_11` FOREIGN KEY (`ShippedToAddressId`) REFERENCES `Address` (`AddressId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `CSVInvoice_ibfk_12` FOREIGN KEY (`BatchID`) REFERENCES `CSVBatch` (`ID`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `CSVInvoice_ibfk_13` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `CSVInvoice_ibfk_14` FOREIGN KEY (`CustomerLocationId`) REFERENCES `CustomerLocation` (`CustomerLocationId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `CSVInvoice_ibfk_15` FOREIGN KEY (`VendorSiteId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `CSVInvoice_ibfk_16` FOREIGN KEY (`ApprovalStatusId`) REFERENCES `InvoiceStatus` (`StateId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `CSVInvoice_ibfk_17` FOREIGN KEY (`ParentInvoiceId`) REFERENCES `CSVInvoice` (`InvoiceId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `CSVInvoice_ibfk_2` FOREIGN KEY (`LocationId`) REFERENCES `Location` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `CSVInvoice_ibfk_3` FOREIGN KEY (`ApproverId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `CSVInvoice_ibfk_4` FOREIGN KEY (`VerifierId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `CSVInvoice_ibfk_5` FOREIGN KEY (`VendorLocationId`) REFERENCES `VendorLocation` (`VendorLocationId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `CSVInvoice_ibfk_6` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `CSVInvoice_ibfk_7` FOREIGN KEY (`ProjectTypeId`) REFERENCES `ProjectType` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `CSVInvoice_ibfk_8` FOREIGN KEY (`SubProjectTypeId`) REFERENCES `SubProjectType` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `CSVInvoice_ibfk_9` FOREIGN KEY (`CustomerId`) REFERENCES `Customer` (`CustomerId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=2713844 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `CSVLineItemDetail`
--

DROP TABLE IF EXISTS `CSVLineItemDetail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `CSVLineItemDetail` (
  `InvoiceId` int NOT NULL,
  `LineItemDetailId` int NOT NULL AUTO_INCREMENT,
  `ActualQty` double DEFAULT NULL,
  `Quantity` double DEFAULT NULL,
  `ProductId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ProductDescription` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `Description` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `UnitPrice` double DEFAULT NULL,
  `CalculatedUnitPrice` double DEFAULT NULL,
  `CalculatedExtAmt` double DEFAULT NULL,
  `TotalAmount` double DEFAULT NULL,
  `ItemNo` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UnitOfPurchase` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `LineNo` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `POHeaderId` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `POLineId` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `POLineLocationId` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `RecievedTransactionId` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PONumber` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `GLCode` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsExpense` tinyint(1) NOT NULL,
  `OrderQuantity` double DEFAULT NULL,
  `ClientCompanyId` int DEFAULT NULL,
  `DeliveryDate` datetime DEFAULT NULL,
  `Container` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField1` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField2` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField3` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField4` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField5` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField6` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField7` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField8` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField9` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField10` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SourceLineItemDetailId` int DEFAULT NULL,
  `POType` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `HasError` tinyint(1) NOT NULL DEFAULT '0',
  `POId` int DEFAULT NULL,
  `OtherChargesId` int DEFAULT NULL,
  `DepartmentId` int DEFAULT NULL,
  `Currency` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CustomerId` int DEFAULT NULL,
  `ProjectTypeId` int DEFAULT NULL,
  `SubProjectTypeId` int DEFAULT NULL,
  PRIMARY KEY (`LineItemDetailId`),
  KEY `IX_CSVClientCompanyId` (`ClientCompanyId`) USING BTREE,
  KEY `IX_CSVInvoiceId` (`InvoiceId`) USING BTREE,
  KEY `FK_CSVLineItemDetail_PO_Id` (`POId`) USING BTREE,
  KEY `CSVOtherChargesId` (`OtherChargesId`) USING BTREE,
  KEY `FK_CSVLineItemDetail_Department_DepartmentId_idx` (`DepartmentId`) USING BTREE,
  KEY `CSVCustomerId` (`CustomerId`) USING BTREE,
  KEY `CSVProjectTypeId` (`ProjectTypeId`) USING BTREE,
  KEY `CSVSubProjectTypeId` (`SubProjectTypeId`) USING BTREE,
  CONSTRAINT `CSVLineItemDetail_ibfk_1` FOREIGN KEY (`ClientCompanyId`) REFERENCES `ClientCompany` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `CSVLineItemDetail_ibfk_2` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `CSVLineItemDetail_ibfk_3` FOREIGN KEY (`InvoiceId`) REFERENCES `CSVInvoice` (`InvoiceId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `CSVLineItemDetail_ibfk_4` FOREIGN KEY (`POId`) REFERENCES `PO` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `CSVLineItemDetail_ibfk_5` FOREIGN KEY (`OtherChargesId`) REFERENCES `OtherCharges` (`OtherChargesId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `CSVLineItemDetail_ibfk_6` FOREIGN KEY (`CustomerId`) REFERENCES `Customer` (`CustomerId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `CSVLineItemDetail_ibfk_7` FOREIGN KEY (`ProjectTypeId`) REFERENCES `ProjectType` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `CSVLineItemDetail_ibfk_8` FOREIGN KEY (`SubProjectTypeId`) REFERENCES `SubProjectType` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `CapEx`
--

DROP TABLE IF EXISTS `CapEx`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `CapEx` (
  `CapExId` int NOT NULL,
  `CapExName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Number` int DEFAULT NULL,
  `Budget` decimal(18,2) DEFAULT NULL,
  `Balance` decimal(18,2) DEFAULT NULL,
  `OwnerEmail` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsActive` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`CapExId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `CaptureActiveUser`
--

DROP TABLE IF EXISTS `CaptureActiveUser`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `CaptureActiveUser` (
  `APSmartUserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `WindowUserId` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `InvoiceId` int NOT NULL,
  PRIMARY KEY (`APSmartUserId`,`WindowUserId`,`InvoiceId`),
  KEY `IX_APSmartUserId` (`APSmartUserId`) USING BTREE,
  CONSTRAINT `CaptureActiveUser_ibfk_1` FOREIGN KEY (`APSmartUserId`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Category`
--

DROP TABLE IF EXISTS `Category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Category` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ClientId` int DEFAULT NULL,
  `CustomerId` int DEFAULT NULL,
  `CategoryName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CategoryNo` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CategoryType` tinyint DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_CustomerId` (`CustomerId`) USING BTREE,
  CONSTRAINT `Category_ibfk_1` FOREIGN KEY (`CustomerId`) REFERENCES `Customer` (`CustomerId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=6852025 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ChargeType`
--

DROP TABLE IF EXISTS `ChargeType`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ChargeType` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ClientId` int DEFAULT NULL,
  `ChargeTypeText` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Number` int DEFAULT NULL,
  `NewField1` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `NewField2` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  KEY `Id` (`Id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ChildClientCompany`
--

DROP TABLE IF EXISTS `ChildClientCompany`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ChildClientCompany` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ClientCompanyId` int NOT NULL,
  `ChildClientCompanyId` int NOT NULL,
  `Percentage` decimal(18,2) NOT NULL,
  `ChildType` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `RatioType` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_ChildClientCompany_ClientCompanyId` (`ClientCompanyId`) USING BTREE,
  KEY `FK_ChildClientCompany_ChildClientCompanyId` (`ChildClientCompanyId`) USING BTREE,
  CONSTRAINT `ChildClientCompany_ibfk_1` FOREIGN KEY (`ChildClientCompanyId`) REFERENCES `ClientCompany` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ChildClientCompany_ibfk_2` FOREIGN KEY (`ClientCompanyId`) REFERENCES `ClientCompany` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=743 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `City`
--

DROP TABLE IF EXISTS `City`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `City` (
  `StateId` int NOT NULL,
  `CityId` int NOT NULL AUTO_INCREMENT,
  `CityName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`CityId`),
  KEY `IX_StateId` (`StateId`) USING BTREE,
  CONSTRAINT `City_ibfk_1` FOREIGN KEY (`StateId`) REFERENCES `State` (`StateId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Client`
--

DROP TABLE IF EXISTS `Client`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Client` (
  `ClientId` int NOT NULL AUTO_INCREMENT,
  `CustomerName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ContactPerson` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AddressId` int NOT NULL,
  `Telephone` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Fax` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Email` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `InBoundFTP` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `OutBoundFTP` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ImagePath` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Logo` longblob,
  `ElementSeparator` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SegmentSeparator` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SubElementSeparator` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ReceiverId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Indicator` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Source` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `BackupFolder` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `WebSiteAddress` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ParentId` int DEFAULT NULL,
  `ClientInBoundFTP` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ClientOutBoundFTP` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FtpUserName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FtpPassword` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ClosingDate` int DEFAULT NULL,
  `EnableEscalationService` tinyint(1) NOT NULL,
  `ClosingStartDate` datetime DEFAULT NULL,
  `ClosingDuration` int DEFAULT NULL,
  `IsActive` tinyint(1) DEFAULT NULL,
  `InvoiceOverflow` tinyint(1) DEFAULT NULL,
  `VendorEmailDomainName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorPortalHomeTabContent` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `AccountCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CustomerID` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CodeWord` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsOCRClient` tinyint(1) NOT NULL,
  `HoldDaysWhenLineItemMismatch` int DEFAULT NULL,
  `HoldDaysWhenThereAreNoLineItems` int DEFAULT NULL,
  `AdjustmentAmount` double DEFAULT NULL,
  `AdjustmentPercent` double DEFAULT NULL,
  `UnitCostDifferencePer100Limit` double DEFAULT NULL,
  `ShippingDatePlusMinusInvoiceDate` int DEFAULT NULL,
  `ShippingDateMinDateBeforeToday` int DEFAULT NULL,
  `AllowedInvoiceFutureDate` int DEFAULT NULL,
  `AllowedInvoiceDateFromScanDate` int DEFAULT NULL,
  `UnitPriceDecimalPlace` int DEFAULT NULL,
  `UnitPriceDisplayDecimalPlace` int DEFAULT NULL,
  `PasswordResetAfterDays` int DEFAULT NULL,
  `PaymentApprovalRequired` tinyint(1) DEFAULT '1',
  `FreightChargeLimitAmount` double DEFAULT NULL,
  `PasswordRegex` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PasswordRegexMessage` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CreditCardVendorId` int DEFAULT NULL,
  `BaseCurrency` tinyint NOT NULL DEFAULT '0',
  `NotificationEmailDays` int DEFAULT NULL,
  `FreightChargeLimitPercent` double DEFAULT NULL,
  `TaxLimitAmount` double DEFAULT NULL,
  `TaxLimitPercent` double DEFAULT NULL,
  `PONoStartAt` int DEFAULT NULL,
  `POSafetyNotificationEmails` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Enable2FA` tinyint(1) DEFAULT '0',
  `TwoFACodeDeliveryType` tinyint DEFAULT '0',
  `IntegrationAPIKey` varchar(250) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CustomerShortName` varchar(50) COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`ClientId`),
  KEY `IX_AddressId` (`AddressId`) USING BTREE,
  KEY `CreditCardVendorId` (`CreditCardVendorId`) USING BTREE,
  CONSTRAINT `Client_ibfk_1` FOREIGN KEY (`AddressId`) REFERENCES `Address` (`AddressId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `Client_ibfk_2` FOREIGN KEY (`CreditCardVendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=200 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`cloudxuser`@`%`*/ /*!50003 TRIGGER `AddReportFilterByClientAfterClientInsert` AFTER INSERT ON `Client` FOR EACH ROW BEGIN

  INSERT INTO `ClientSpecificConfigReport` (`ClientId`, `ClientSpecificConfigTypeReport`)
    SELECT
      *
    FROM (SELECT
        `ClientId`,
        `AttributeCode`
      FROM `Client`
        CROSS JOIN `ClientSpecificConfigDefReport`) extT
    WHERE NOT EXISTS (SELECT
        `ClientId`,
        ClientSpecificConfigTypeReport
      FROM `ClientSpecificConfigReport` intT
      WHERE extT.`ClientId` = intT.`ClientId`
      AND extT.`AttributeCode` = intT.`ClientSpecificConfigTypeReport`);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `ClientBankAccount`
--

DROP TABLE IF EXISTS `ClientBankAccount`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientBankAccount` (
  `ClientId` int NOT NULL,
  `BankAccount` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`ClientId`,`BankAccount`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientCheckBooks`
--

DROP TABLE IF EXISTS `ClientCheckBooks`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientCheckBooks` (
  `ClientCheckBookId` int NOT NULL AUTO_INCREMENT,
  `ClientId` int DEFAULT NULL,
  `CheckBookName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CheckBookDescription` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsActive` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`ClientCheckBookId`),
  KEY `ClientId` (`ClientId`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientCompany`
--

DROP TABLE IF EXISTS `ClientCompany`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientCompany` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ClientId` int NOT NULL,
  `CompanyCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Description` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField1` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField2` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField3` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField4` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField5` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField6` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField7` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField8` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorTypes` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AllowPOAutoApproval` tinyint(1) DEFAULT NULL,
  `IsActive` tinyint(1) NOT NULL DEFAULT '1',
  `DefaultDepartment` int DEFAULT NULL,
  `DefaultProject` int DEFAULT NULL,
  `DafaultGLCode` int DEFAULT NULL,
  `AutoPopulateChild` tinyint(1) DEFAULT NULL,
  `Group` int DEFAULT NULL COMMENT 'Same group of client companies will result in Vendors, Gls and POes being filtered per group rather than individual company code.',
  PRIMARY KEY (`Id`),
  KEY `FK_ClientCompany_DefaultDepartment` (`DefaultDepartment`) USING BTREE,
  KEY `FK_ClientCompany_DefaultProject` (`DefaultProject`) USING BTREE,
  KEY `FK_ClientCompany_DafaultGLCode` (`DafaultGLCode`) USING BTREE,
  CONSTRAINT `ClientCompany_ibfk_1` FOREIGN KEY (`DafaultGLCode`) REFERENCES `GLCode` (`GLCodeId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ClientCompany_ibfk_2` FOREIGN KEY (`DefaultDepartment`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ClientCompany_ibfk_3` FOREIGN KEY (`DefaultProject`) REFERENCES `ProjectType` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=2096 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientCurrencies`
--

DROP TABLE IF EXISTS `ClientCurrencies`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientCurrencies` (
  `ClientId` int NOT NULL,
  `Currency` int NOT NULL,
  `CurrencyAbbrevation` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DisplayOrderNo` int NOT NULL,
  `CurrencySymbol` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`ClientId`,`Currency`),
  CONSTRAINT `ClientCurrencies_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientEmailTemplates`
--

DROP TABLE IF EXISTS `ClientEmailTemplates`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientEmailTemplates` (
  `ClientId` int NOT NULL,
  `EmailTemplateType` tinyint unsigned NOT NULL,
  `Subject` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `Body` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  PRIMARY KEY (`ClientId`,`EmailTemplateType`),
  KEY `EmailTemplateType` (`EmailTemplateType`) USING BTREE,
  CONSTRAINT `ClientEmailTemplates_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ClientEmailTemplates_ibfk_2` FOREIGN KEY (`EmailTemplateType`) REFERENCES `EmailTemplates` (`EmailTemplateType`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientEmployeeType`
--

DROP TABLE IF EXISTS `ClientEmployeeType`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientEmployeeType` (
  `EmployeeTypeId` int NOT NULL AUTO_INCREMENT,
  `ClientId` int DEFAULT NULL,
  `TypeName` varchar(30) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `isActive` bit(1) NOT NULL DEFAULT (1),
  PRIMARY KEY (`EmployeeTypeId`),
  KEY `ClientEmployeeType_ClientId` (`ClientId`),
  CONSTRAINT `ClientEmployeeType_ClientId` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci AVG_ROW_LENGTH=256 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientExceptionRule`
--

DROP TABLE IF EXISTS `ClientExceptionRule`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientExceptionRule` (
  `ClientId` int NOT NULL,
  `ConfigurableExceptionType` tinyint unsigned NOT NULL,
  `Task` tinyint unsigned NOT NULL,
  `InvoiceType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT 'Invoice',
  `CanBeOverridenByApprover` tinyint(1) NOT NULL,
  PRIMARY KEY (`ClientId`,`ConfigurableExceptionType`,`Task`,`InvoiceType`),
  KEY `IX_ClientId` (`ClientId`) USING BTREE,
  CONSTRAINT `ClientExceptionRule_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientExpenseCategory`
--

DROP TABLE IF EXISTS `ClientExpenseCategory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientExpenseCategory` (
  `ExpenseCategoryId` int NOT NULL AUTO_INCREMENT,
  `ClientId` int NOT NULL,
  `CategoryName` varchar(30) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `EntryLabel` varchar(30) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Tooltip` varchar(200) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AllowQtyOrAmount` char(1) COLLATE utf8mb4_general_ci DEFAULT (_utf8mb3'Q'),
  `GLCode` varchar(100) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `isReceiptRequired` bit(1) NOT NULL DEFAULT (0x31),
  `isActive` bit(1) NOT NULL DEFAULT (0x31),
  PRIMARY KEY (`ExpenseCategoryId`),
  KEY `ClientExpenseCategory_ClientId` (`ClientId`),
  CONSTRAINT `ClientExpenseCategory_ClientId` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientExpenseCategoryByEmployeeType`
--

DROP TABLE IF EXISTS `ClientExpenseCategoryByEmployeeType`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientExpenseCategoryByEmployeeType` (
  `ExpenseCategoryId` int NOT NULL,
  `EmployeeTypeId` int NOT NULL,
  `QtyMin` int DEFAULT NULL,
  `QtyMax` int DEFAULT NULL,
  `QtyRate` decimal(18,2) DEFAULT NULL,
  `AmountMin` decimal(18,2) DEFAULT NULL,
  `AmountMax` decimal(18,2) DEFAULT NULL,
  `isActive` bit(1) NOT NULL DEFAULT (0x31),
  PRIMARY KEY (`ExpenseCategoryId`,`EmployeeTypeId`),
  KEY `ClientExpenseCategoryByEmployeeType_EmployeeTypeId` (`EmployeeTypeId`),
  CONSTRAINT `ClientExpenseCategoryByEmployeeType_EmployeeTypeId` FOREIGN KEY (`EmployeeTypeId`) REFERENCES `ClientEmployeeType` (`EmployeeTypeId`),
  CONSTRAINT `ClientExpenseCategoryByEmployeeType_ExpenseCategoryId` FOREIGN KEY (`ExpenseCategoryId`) REFERENCES `ClientExpenseCategory` (`ExpenseCategoryId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientExpenseCurrency`
--

DROP TABLE IF EXISTS `ClientExpenseCurrency`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientExpenseCurrency` (
  `ClientId` int DEFAULT NULL,
  `Currency` varchar(3) COLLATE utf8mb4_general_ci NOT NULL,
  `isActive` bit(1) NOT NULL DEFAULT (1),
  KEY `ClientExpenseCurrency_ClientId` (`ClientId`),
  CONSTRAINT `ClientExpenseCurrency_ClientId` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci AVG_ROW_LENGTH=16 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientForwardEmail`
--

DROP TABLE IF EXISTS `ClientForwardEmail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientForwardEmail` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ClientId` int DEFAULT NULL,
  `Body` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `EmailToForwardTo` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientInvoiceAttribute`
--

DROP TABLE IF EXISTS `ClientInvoiceAttribute`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientInvoiceAttribute` (
  `ClientID` int NOT NULL,
  `InvoiceAttributeID` int NOT NULL,
  `Task` tinyint unsigned NOT NULL,
  `InvoiceType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT 'Invoice',
  `EditorType` tinyint unsigned DEFAULT NULL,
  `ParentInvoiceAttributeName` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsCritical` tinyint(1) NOT NULL,
  `IsRequred` tinyint(1) NOT NULL,
  `IsReadonly` tinyint(1) NOT NULL,
  `OrderNo` tinyint unsigned NOT NULL,
  `DisplayName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DisplayFormat` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Regex` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsHiddenByDefault` tinyint(1) DEFAULT NULL,
  `IsTaxRow` tinyint(1) DEFAULT NULL,
  `CheckDuplicate` tinyint(1) NOT NULL,
  `OrderByOrder` smallint DEFAULT NULL,
  `ClientCompanyId` int NOT NULL DEFAULT '0',
  `ExpenseTypeId` int NOT NULL,
  `DefaultValue` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `MaxLimit` int DEFAULT NULL,
  `FieldPatternRegex` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FieldReplacementRegex` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsBlockLetter` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`ClientID`,`InvoiceAttributeID`,`Task`,`InvoiceType`,`ClientCompanyId`,`ExpenseTypeId`),
  KEY `IX_InvoiceAttributeID` (`InvoiceAttributeID`) USING BTREE,
  KEY `FK_ClientInvoiceAttribute_ClientCompany_idx` (`ClientCompanyId`) USING BTREE,
  KEY `FK_ClientInvoiceattribute_ExpenseType_idx` (`ExpenseTypeId`) USING BTREE,
  CONSTRAINT `ClientInvoiceAttribute_ibfk_1` FOREIGN KEY (`ClientCompanyId`) REFERENCES `ClientCompany` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ClientInvoiceAttribute_ibfk_2` FOREIGN KEY (`ExpenseTypeId`) REFERENCES `ExpenseType` (`ExpenseId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ClientInvoiceAttribute_ibfk_3` FOREIGN KEY (`InvoiceAttributeID`) REFERENCES `InvoiceAttribute` (`InvoiceAttributeID`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientInvoiceAttributeRule`
--

DROP TABLE IF EXISTS `ClientInvoiceAttributeRule`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientInvoiceAttributeRule` (
  `ClientInvoiceAttributeRuleId` int NOT NULL AUTO_INCREMENT,
  `ClientId` int NOT NULL,
  `Task` tinyint unsigned NOT NULL,
  `RuleType` tinyint unsigned NOT NULL,
  `IsAndDetailGroupConditionalOperator` tinyint(1) NOT NULL,
  `IsCritical` tinyint(1) DEFAULT NULL,
  `Message` varchar(440) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CanBeOverriddenByApprover` tinyint(1) DEFAULT NULL,
  `InvoiceType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT 'Invoice',
  PRIMARY KEY (`ClientInvoiceAttributeRuleId`),
  KEY `IX_ClientId` (`ClientId`) USING BTREE,
  CONSTRAINT `ClientInvoiceAttributeRule_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=79 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientInvoiceAttributeRuleDetail`
--

DROP TABLE IF EXISTS `ClientInvoiceAttributeRuleDetail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientInvoiceAttributeRuleDetail` (
  `ClientInvoiceAttributeRuleDetailId` int NOT NULL AUTO_INCREMENT,
  `ClientInvoiceAttributeRuleId` int NOT NULL,
  `CustomQuery` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `ComparingValue` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Operator` tinyint unsigned NOT NULL,
  `InvoiceAttributeID` int NOT NULL,
  `IsAndGroupConditionalOperator` tinyint(1) NOT NULL,
  `GroupNumber` tinyint unsigned DEFAULT NULL,
  PRIMARY KEY (`ClientInvoiceAttributeRuleDetailId`),
  KEY `IX_ClientInvoiceAttributeRuleId` (`ClientInvoiceAttributeRuleId`) USING BTREE,
  KEY `IX_InvoiceAttributeID` (`InvoiceAttributeID`) USING BTREE,
  CONSTRAINT `ClientInvoiceAttributeRuleDetail_ibfk_1` FOREIGN KEY (`ClientInvoiceAttributeRuleId`) REFERENCES `ClientInvoiceAttributeRule` (`ClientInvoiceAttributeRuleId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `ClientInvoiceAttributeRuleDetail_ibfk_2` FOREIGN KEY (`InvoiceAttributeID`) REFERENCES `InvoiceAttribute` (`InvoiceAttributeID`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=129 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientInvoiceAttributeType`
--

DROP TABLE IF EXISTS `ClientInvoiceAttributeType`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientInvoiceAttributeType` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `ActionName` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `EnumValue` int NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=48 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientInvoiceType`
--

DROP TABLE IF EXISTS `ClientInvoiceType`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientInvoiceType` (
  `ClientId` int NOT NULL,
  `InvoiceTypeName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`ClientId`,`InvoiceTypeName`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientLineItemTotalExtraField`
--

DROP TABLE IF EXISTS `ClientLineItemTotalExtraField`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientLineItemTotalExtraField` (
  `ClientInvoiceAttributeRuleId` int NOT NULL,
  `InvoiceAttributeId` int NOT NULL,
  `GroupNumber` int DEFAULT NULL,
  `GroupOperator` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`ClientInvoiceAttributeRuleId`,`InvoiceAttributeId`),
  KEY `IX_ClientInvoiceAttributeRuleId` (`ClientInvoiceAttributeRuleId`) USING BTREE,
  KEY `IX_InvoiceAttributeId` (`InvoiceAttributeId`) USING BTREE,
  CONSTRAINT `ClientLineItemTotalExtraField_ibfk_1` FOREIGN KEY (`InvoiceAttributeId`) REFERENCES `InvoiceAttribute` (`InvoiceAttributeID`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `ClientLineItemTotalExtraField_ibfk_2` FOREIGN KEY (`ClientInvoiceAttributeRuleId`) REFERENCES `ClientInvoiceAttributeRule` (`ClientInvoiceAttributeRuleId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientLocation`
--

DROP TABLE IF EXISTS `ClientLocation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientLocation` (
  `ClientLocationId` int NOT NULL AUTO_INCREMENT,
  `ClientId` int NOT NULL,
  `ContactName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SignageContents` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `OwnerName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `StateId` int DEFAULT NULL,
  `City` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Address1` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Address2` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ZipCode` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `PhoneNo` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Email` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Fax` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsActive` tinyint(1) NOT NULL DEFAULT '1',
  `CompanyId` int DEFAULT NULL,
  PRIMARY KEY (`ClientLocationId`),
  KEY `StateId` (`StateId`) USING BTREE,
  KEY `ClientLocation_ibfk_1` (`ClientId`) USING BTREE,
  CONSTRAINT `ClientLocation_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ClientLocation_ibfk_2` FOREIGN KEY (`StateId`) REFERENCES `State` (`StateId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=89955 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientPONumberMatching`
--

DROP TABLE IF EXISTS `ClientPONumberMatching`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientPONumberMatching` (
  `ClientId` int NOT NULL,
  `Length` int NOT NULL,
  `StringToAppend` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`ClientId`,`Length`),
  KEY `IX_ClientId` (`ClientId`) USING BTREE,
  CONSTRAINT `ClientPONumberMatching_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientPONumberSplitter`
--

DROP TABLE IF EXISTS `ClientPONumberSplitter`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientPONumberSplitter` (
  `ClientId` int NOT NULL,
  `SplitterCharacter` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`ClientId`,`SplitterCharacter`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientPOTypes`
--

DROP TABLE IF EXISTS `ClientPOTypes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientPOTypes` (
  `ClientId` int NOT NULL,
  `POTypeId` int NOT NULL,
  PRIMARY KEY (`ClientId`,`POTypeId`),
  CONSTRAINT `ClientPOTypes_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientPaymentTerms`
--

DROP TABLE IF EXISTS `ClientPaymentTerms`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientPaymentTerms` (
  `ClientId` int NOT NULL,
  `TermCode` varchar(30) COLLATE utf8mb4_general_ci NOT NULL,
  `Discount` decimal(5,2) NOT NULL DEFAULT '0.00',
  `DiscountDays` int NOT NULL DEFAULT '0',
  `Due` varchar(20) COLLATE utf8mb4_general_ci NOT NULL DEFAULT 'Net',
  `DueDays` int NOT NULL DEFAULT '30',
  `isDefault` bit(1) NOT NULL DEFAULT b'0',
  `TermLabel` varchar(255) COLLATE utf8mb4_general_ci GENERATED ALWAYS AS (ifnull(nullif(rtrim(concat(replace(ifnull(concat(nullif(`Discount`,0),_utf8mb3'%',(case when (`Due` <> _utf8mb4'EOM') then concat(_utf8mb3'/',nullif(`DiscountDays`,0)) else _utf8mb3'' end),_utf8mb3' '),_utf8mb3''),_utf8mb3'.00%',_utf8mb3'%'),(case when (`Due` = _utf8mb4'Net') then _utf8mb3'Net' when (`Due` = _utf8mb4'EOM') then _utf8mb3'EOM' when (`Due` = _utf8mb4'EOM NET') then _utf8mb3'EOM Net' else _utf8mb3'' end),_utf8mb3' ',ifnull(nullif(`DueDays`,0),_utf8mb3''))),_utf8mb3'Net'),_utf8mb3'Upon Receipt')) VIRTUAL,
  PRIMARY KEY (`ClientId`,`TermCode`),
  CONSTRAINT `ClientPaymentTerms_ClientID` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci AVG_ROW_LENGTH=16384 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientRoleFunctions`
--

DROP TABLE IF EXISTS `ClientRoleFunctions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientRoleFunctions` (
  `RoleId` int NOT NULL,
  `FunctionKey` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Access` tinyint DEFAULT NULL,
  PRIMARY KEY (`RoleId`,`FunctionKey`),
  KEY `ClientRoleFunctions_FunctionKey` (`FunctionKey`) USING BTREE,
  CONSTRAINT `ClientRoleFunctions_ibfk_1` FOREIGN KEY (`FunctionKey`) REFERENCES `SystemFunctions` (`FunctionKey`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientRoles`
--

DROP TABLE IF EXISTS `ClientRoles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientRoles` (
  `RoleId` int NOT NULL AUTO_INCREMENT,
  `RoleName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ClientId` int DEFAULT NULL,
  `isAdmin` tinyint DEFAULT NULL,
  `isInternal` tinyint DEFAULT NULL,
  `isLocked` tinyint DEFAULT NULL,
  PRIMARY KEY (`RoleId`),
  KEY `ClientRoles_ClientId` (`ClientId`) USING BTREE,
  CONSTRAINT `ClientRoles_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=85 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientShippingServices`
--

DROP TABLE IF EXISTS `ClientShippingServices`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientShippingServices` (
  `ClientId` int NOT NULL,
  `ShippingService` int NOT NULL,
  `DisplayOrderNo` int NOT NULL DEFAULT '1',
  PRIMARY KEY (`ClientId`,`ShippingService`),
  CONSTRAINT `ClientShippingServices_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientSpecificConfig`
--

DROP TABLE IF EXISTS `ClientSpecificConfig`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientSpecificConfig` (
  `ClientId` int NOT NULL,
  `ClientSpecificConfigType` int NOT NULL,
  `Argument1` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`ClientId`,`ClientSpecificConfigType`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientSpecificConfigDef`
--

DROP TABLE IF EXISTS `ClientSpecificConfigDef`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientSpecificConfigDef` (
  `LineItemDetailAddCodeFunctionality` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `0` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientSpecificConfigDefReport`
--

DROP TABLE IF EXISTS `ClientSpecificConfigDefReport`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientSpecificConfigDefReport` (
  `AttributeCode` int DEFAULT NULL,
  `Definition` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`cloudxuser`@`%`*/ /*!50003 TRIGGER `AddReportFilterByClientAfterReportDefInsert` AFTER INSERT ON `ClientSpecificConfigDefReport` FOR EACH ROW BEGIN

  INSERT INTO `ClientSpecificConfigReport` (`ClientId`, `ClientSpecificConfigTypeReport`)
    SELECT
      *
    FROM (SELECT
        `ClientId`,
        `AttributeCode`
      FROM `Client`
        CROSS JOIN `ClientSpecificConfigDefReport`) extT
    WHERE NOT EXISTS (SELECT
        `ClientId`,
        ClientSpecificConfigTypeReport
      FROM `ClientSpecificConfigReport` intT
      WHERE extT.`ClientId` = intT.`ClientId`
      AND extT.`AttributeCode` = intT.`ClientSpecificConfigTypeReport`);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `ClientSpecificConfigReport`
--

DROP TABLE IF EXISTS `ClientSpecificConfigReport`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientSpecificConfigReport` (
  `ClientId` int NOT NULL,
  `ClientSpecificConfigTypeReport` int NOT NULL,
  `IsEnabled` int DEFAULT '1',
  PRIMARY KEY (`ClientId`,`ClientSpecificConfigTypeReport`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientTicket`
--

DROP TABLE IF EXISTS `ClientTicket`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientTicket` (
  `FileName` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `OriginalFileName` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Subject` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TicketDate` datetime NOT NULL,
  `TicketId` int NOT NULL,
  `ClientId` int NOT NULL,
  `CreatedDate` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`FileName`,`Subject`,`TicketDate`,`TicketId`,`ClientId`),
  KEY `ClientId` (`ClientId`) USING BTREE,
  CONSTRAINT `ClientTicket_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientUOMs`
--

DROP TABLE IF EXISTS `ClientUOMs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientUOMs` (
  `ClientUOMId` int NOT NULL AUTO_INCREMENT,
  `ClientId` int NOT NULL,
  `UOMId` int NOT NULL,
  PRIMARY KEY (`ClientUOMId`),
  UNIQUE KEY `ClientId_UOMId` (`ClientId`,`UOMId`) USING BTREE,
  KEY `FK_ClientUOM_ibfk_2` (`UOMId`) USING BTREE,
  CONSTRAINT `ClientUOMs_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ClientUOMs_ibfk_2` FOREIGN KEY (`UOMId`) REFERENCES `UOM` (`UOMId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=168 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientUnacceptedLIDescription`
--

DROP TABLE IF EXISTS `ClientUnacceptedLIDescription`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientUnacceptedLIDescription` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ClientId` int NOT NULL,
  `Description` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ExceptionMessage` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_ClientId` (`ClientId`) USING BTREE,
  CONSTRAINT `ClientUnacceptedLIDescription_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientUserRoles`
--

DROP TABLE IF EXISTS `ClientUserRoles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientUserRoles` (
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `RoleId` int NOT NULL,
  PRIMARY KEY (`UserId`,`RoleId`),
  KEY `ClientUserRoles_RoleId` (`RoleId`) USING BTREE,
  CONSTRAINT `ClientUserRoles_ibfk_1` FOREIGN KEY (`RoleId`) REFERENCES `ClientRoles` (`RoleId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ClientUserRoles_ibfk_2` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientVendorSyncIgnoreAlphabet`
--

DROP TABLE IF EXISTS `ClientVendorSyncIgnoreAlphabet`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientVendorSyncIgnoreAlphabet` (
  `ClientId` int NOT NULL,
  `VendorNoAlphabets` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorNameAlphabets` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`ClientId`),
  KEY `IX_ClientId` (`ClientId`) USING BTREE,
  CONSTRAINT `ClientVendorSyncIgnoreAlphabet_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientWorkFlow`
--

DROP TABLE IF EXISTS `ClientWorkFlow`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientWorkFlow` (
  `ClientId` int NOT NULL,
  `AddGuidToFileName` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`ClientId`),
  KEY `IX_ClientId` (`ClientId`) USING BTREE,
  CONSTRAINT `ClientWorkFlow_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientWorkFlowBackup`
--

DROP TABLE IF EXISTS `ClientWorkFlowBackup`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientWorkFlowBackup` (
  `ClientId` int NOT NULL,
  `AddGuidToFileName` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`ClientId`),
  KEY `IX_ClientId` (`ClientId`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ClientWorkFlowFolder`
--

DROP TABLE IF EXISTS `ClientWorkFlowFolder`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ClientWorkFlowFolder` (
  `ClientID` int NOT NULL,
  `PickupFolderName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `BatchType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TiffQueueFolderPath` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `SplitTiffDropOffFolderPath` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `SplitTiffDestinationFolderPath` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `BackupFolderPath` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ApprovalRequired` tinyint(1) NOT NULL,
  `IsInvoicePOType` tinyint(1) NOT NULL,
  `OrgID` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CountryCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CompanyCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Source` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SplitByNoOfPages` int NOT NULL,
  `TiffOCRDropOfFolder` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `DocumentType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `OrderNo` int DEFAULT NULL,
  `MatchWithCSV` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ClientID`,`PickupFolderName`,`CompanyCode`),
  KEY `IX_ClientID` (`ClientID`) USING BTREE,
  CONSTRAINT `ClientWorkFlowFolder_ibfk_1` FOREIGN KEY (`ClientID`) REFERENCES `Client` (`ClientId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `CloudXParagon`
--

DROP TABLE IF EXISTS `CloudXParagon`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `CloudXParagon` (
  `lst_mod_id` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `lst_mod_ts` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `ivo_ext_id` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `ivo_sta_cd` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `pay_fg` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `grs_at` double DEFAULT NULL,
  `tax_at` int DEFAULT NULL,
  `frt_at` int DEFAULT NULL,
  `org_nm` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `vnd_int_id` int DEFAULT NULL,
  `total_at` double DEFAULT NULL,
  `ivo_line_count` int DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Temporary view structure for view `Coinstar-ApproverByAmountWithVendor`
--

DROP TABLE IF EXISTS `Coinstar-ApproverByAmountWithVendor`;
/*!50001 DROP VIEW IF EXISTS `Coinstar-ApproverByAmountWithVendor`*/;
SET @saved_cs_client     = @@character_set_client;
/*!50503 SET character_set_client = utf8mb4 */;
/*!50001 CREATE VIEW `Coinstar-ApproverByAmountWithVendor` AS SELECT 
 1 AS `FullName`,
 1 AS `Email`,
 1 AS `MaximumAllowedAmount`,
 1 AS `Vendor`,
 1 AS `SecondApprover`*/;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `Contract`
--

DROP TABLE IF EXISTS `Contract`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Contract` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `LineNo` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PostWithNo` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `EquipmentNo` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `No` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Description` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `WasteMaterialCode` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Description2` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Quantity` double DEFAULT NULL,
  `UnitOfMeasurement` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UnitPrice` decimal(18,2) DEFAULT NULL,
  `Amount` decimal(18,2) DEFAULT NULL,
  `ContractHeaderId` int DEFAULT NULL,
  `IsFrenchise` tinyint(1) NOT NULL,
  `ServiceDate` datetime DEFAULT NULL,
  `OrderDate` datetime DEFAULT NULL,
  `LineType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `InternalId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Frequency` int NOT NULL,
  `FrequencyCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FrequencyCodeDescription` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_ContractHeaderId` (`ContractHeaderId`) USING BTREE,
  CONSTRAINT `Contract_ibfk_1` FOREIGN KEY (`ContractHeaderId`) REFERENCES `ContractHeader` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=743409 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ContractHeader`
--

DROP TABLE IF EXISTS `ContractHeader`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ContractHeader` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ContractNo` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ServiceAddessCode` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ServiceAddressName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `BusinessWithNo` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorInternalID` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=317485 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Customer`
--

DROP TABLE IF EXISTS `Customer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Customer` (
  `ClientId` int NOT NULL,
  `CustomerId` int NOT NULL AUTO_INCREMENT,
  `CustomerName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ContactPerson` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AddressId` int DEFAULT NULL,
  `Telephone` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Fax` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Email` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CustomerNo` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CompanyCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SearchName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `InternalId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PaymentTerms` int DEFAULT NULL,
  `IsDeleted` tinyint(1) NOT NULL,
  `SBTType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PODReq` tinyint(1) DEFAULT NULL,
  `DBCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SourceCustomerId` int DEFAULT NULL,
  `AutoApproveEnabled` tinyint(1) NOT NULL DEFAULT '0',
  `ExternalId` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`CustomerId`),
  KEY `IX_AddressId` (`AddressId`) USING BTREE,
  KEY `IX_ClientId` (`ClientId`) USING BTREE,
  CONSTRAINT `Customer_ibfk_1` FOREIGN KEY (`AddressId`) REFERENCES `Address` (`AddressId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Customer_ibfk_2` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=132169 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `CustomerItem`
--

DROP TABLE IF EXISTS `CustomerItem`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `CustomerItem` (
  `CustomerId` int NOT NULL,
  `ItemId` int NOT NULL,
  PRIMARY KEY (`CustomerId`,`ItemId`),
  KEY `IX_CustomerId` (`CustomerId`) USING BTREE,
  KEY `IX_ItemId` (`ItemId`) USING BTREE,
  CONSTRAINT `CustomerItem_ibfk_1` FOREIGN KEY (`CustomerId`) REFERENCES `Customer` (`CustomerId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `CustomerItem_ibfk_2` FOREIGN KEY (`ItemId`) REFERENCES `Item` (`ItemId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `CustomerItemPrice`
--

DROP TABLE IF EXISTS `CustomerItemPrice`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `CustomerItemPrice` (
  `CustomerID` int NOT NULL,
  `ItemID` int NOT NULL,
  `Price` double NOT NULL,
  `CustomerPriceID` int NOT NULL AUTO_INCREMENT,
  `DBCode` char(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`CustomerPriceID`),
  KEY `IX_CustomerID` (`CustomerID`) USING BTREE,
  KEY `IX_ItemID` (`ItemID`) USING BTREE,
  CONSTRAINT `CustomerItemPrice_ibfk_1` FOREIGN KEY (`CustomerID`) REFERENCES `Customer` (`CustomerId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `CustomerItemPrice_ibfk_2` FOREIGN KEY (`ItemID`) REFERENCES `Item` (`ItemId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=15240 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `CustomerLocation`
--

DROP TABLE IF EXISTS `CustomerLocation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `CustomerLocation` (
  `CustomerLocationId` int NOT NULL AUTO_INCREMENT,
  `CustomerId` int NOT NULL,
  `LocationNumber` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `LocationName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `AddressId` int NOT NULL,
  `VendorLocationId` int NOT NULL,
  `DBCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsActive` tinyint(1) NOT NULL,
  `AutoApproveEnabled` tinyint(1) NOT NULL DEFAULT '1',
  `MaxFuelCharges` decimal(18,2) DEFAULT NULL,
  PRIMARY KEY (`CustomerLocationId`),
  KEY `IX_AddressId` (`AddressId`) USING BTREE,
  KEY `IX_CustomerId` (`CustomerId`) USING BTREE,
  KEY `IX_VendorLocationId` (`VendorLocationId`) USING BTREE,
  CONSTRAINT `CustomerLocation_ibfk_1` FOREIGN KEY (`AddressId`) REFERENCES `Address` (`AddressId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `CustomerLocation_ibfk_2` FOREIGN KEY (`CustomerId`) REFERENCES `Customer` (`CustomerId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `CustomerLocation_ibfk_3` FOREIGN KEY (`VendorLocationId`) REFERENCES `VendorLocation` (`VendorLocationId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=10700 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `CustomerLocationItem`
--

DROP TABLE IF EXISTS `CustomerLocationItem`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `CustomerLocationItem` (
  `CustomerLocationItemId` int NOT NULL AUTO_INCREMENT,
  `CustomerLocationId` int NOT NULL,
  `ItemId` int NOT NULL,
  `Description` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `VendorPrice` double NOT NULL,
  `CustomerPrice` double NOT NULL,
  `DefaultQuantity` int DEFAULT NULL,
  `VendorProductNumber` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorQuantity` int DEFAULT NULL,
  `InventoryCount` int DEFAULT NULL,
  `NestleQuantity` int DEFAULT NULL,
  `IsActive` tinyint(1) NOT NULL,
  `PriceChangeDate` date DEFAULT NULL,
  PRIMARY KEY (`CustomerLocationItemId`),
  KEY `IX_CustomerLocationId` (`CustomerLocationId`) USING BTREE,
  KEY `IX_ItemId` (`ItemId`) USING BTREE,
  CONSTRAINT `CustomerLocationItem_ibfk_1` FOREIGN KEY (`CustomerLocationId`) REFERENCES `CustomerLocation` (`CustomerLocationId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `CustomerLocationItem_ibfk_2` FOREIGN KEY (`ItemId`) REFERENCES `Item` (`ItemId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=265426 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `CustomerSite`
--

DROP TABLE IF EXISTS `CustomerSite`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `CustomerSite` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `CustomerId` int DEFAULT NULL,
  `Code` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Name` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AddressId` int DEFAULT NULL,
  `InternalId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_AddressId` (`AddressId`) USING BTREE,
  KEY `IX_CustomerId` (`CustomerId`) USING BTREE,
  CONSTRAINT `CustomerSite_ibfk_1` FOREIGN KEY (`AddressId`) REFERENCES `Address` (`AddressId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `CustomerSite_ibfk_2` FOREIGN KEY (`CustomerId`) REFERENCES `Customer` (`CustomerId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=10258 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `DailyExchangeRate`
--

DROP TABLE IF EXISTS `DailyExchangeRate`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `DailyExchangeRate` (
  `Date` date NOT NULL,
  `FromCurrency` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ToCurrency` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ExchangeRate` decimal(10,8) NOT NULL,
  PRIMARY KEY (`Date`,`FromCurrency`,`ToCurrency`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `DashboardActiveActors`
--

DROP TABLE IF EXISTS `DashboardActiveActors`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `DashboardActiveActors` (
  `ValidActorID` int NOT NULL AUTO_INCREMENT,
  `ActorName` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `WorkingHoursPerDay` int NOT NULL,
  PRIMARY KEY (`ValidActorID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `DashboardActiveClients`
--

DROP TABLE IF EXISTS `DashboardActiveClients`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `DashboardActiveClients` (
  `ValidClientID` int NOT NULL AUTO_INCREMENT,
  `ClientName` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  PRIMARY KEY (`ValidClientID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `DataEntryUserAssociation`
--

DROP TABLE IF EXISTS `DataEntryUserAssociation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `DataEntryUserAssociation` (
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `AssociatedUserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`UserId`,`AssociatedUserId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `DataLoadTaskConfig`
--

DROP TABLE IF EXISTS `DataLoadTaskConfig`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `DataLoadTaskConfig` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ClientId` int DEFAULT NULL,
  `DataEntity` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Parameters` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FilePath` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ExecuteFilePath` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `LastActionDate` datetime DEFAULT NULL,
  `LastActionBy` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Status` int DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_DataLoadTaskConfig_Client_idx` (`ClientId`) USING BTREE,
  CONSTRAINT `DataLoadTaskConfig_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `DataQuality`
--

DROP TABLE IF EXISTS `DataQuality`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `DataQuality` (
  `DataQualityId` int NOT NULL AUTO_INCREMENT,
  `ClientId` int NOT NULL,
  `InvoiceId` int NOT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `FieldChanged` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `OrginalValue` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ChangedValue` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`DataQualityId`),
  KEY `ClientId` (`ClientId`) USING BTREE,
  KEY `InvoiceId` (`InvoiceId`) USING BTREE,
  KEY `UserId` (`UserId`) USING BTREE,
  CONSTRAINT `DataQuality_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `DataQuality_ibfk_2` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `DataQuality_ibfk_3` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=263950 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `DateRangeForReport`
--

DROP TABLE IF EXISTS `DateRangeForReport`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `DateRangeForReport` (
  `Id` int NOT NULL,
  `DateRange` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Dec32`
--

DROP TABLE IF EXISTS `Dec32`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Dec32` (
  `Posted Amount` decimal(10,0) DEFAULT NULL,
  `PO#` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Dec321`
--

DROP TABLE IF EXISTS `Dec321`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Dec321` (
  `Posted Amount` double DEFAULT NULL,
  `PO#` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `DelegationHistory`
--

DROP TABLE IF EXISTS `DelegationHistory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `DelegationHistory` (
  `DelegatId` int NOT NULL AUTO_INCREMENT,
  `DelegatedFrom` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `DelegatedTo` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `InvoiceId` int NOT NULL,
  `DateDelegated` datetime NOT NULL,
  `DurationLeft` int NOT NULL,
  `Comment` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsApproved` tinyint(1) NOT NULL,
  `IsDelegate` tinyint(1) NOT NULL,
  `IsEscalated` tinyint(1) NOT NULL,
  PRIMARY KEY (`DelegatId`),
  KEY `IX_DelegatedFrom` (`DelegatedFrom`) USING BTREE,
  KEY `IX_DelegatedTo` (`DelegatedTo`) USING BTREE,
  KEY `IX_InvoiceId` (`InvoiceId`) USING BTREE,
  CONSTRAINT `DelegationHistory_ibfk_1` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `DelegationHistory_ibfk_2` FOREIGN KEY (`DelegatedFrom`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `DelegationHistory_ibfk_3` FOREIGN KEY (`DelegatedTo`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`cloudxuser`@`%`*/ /*!50003 TRIGGER `DelegationHistory_AFTER_INSERT` AFTER INSERT ON `DelegationHistory` FOR EACH ROW BEGIN
  DECLARE id int;
  DECLARE DelegatedTo varchar(50);
  DECLARE IsDelegate int;
  DECLARE IsApproved int;
  DECLARE IsEscalated int;
  DECLARE ClientId int;

  SET id = NEW.InvoiceId;
  SET DelegatedTo = NEW.DelegatedTo;
  SET IsDelegate = NEW.IsDelegate;
  SET IsApproved = NEW.IsApproved;
  SET IsEscalated = NEW.IsEscalated;
  SELECT
    ClientId
  FROM Invoice
  WHERE InvoiceId = id LIMIT 1 INTO ClientId;

  IF ClientId NOT IN (SELECT
        *
      FROM UserInvoiceAssignmentTriggerExcludedClients) THEN
    DELETE
      FROM UserInvoiceAssignment
    WHERE InvoiceId = id;

    IF IsDelegate = 0
      AND IsApproved = 0
      AND IsEscalated = 0 THEN
      INSERT INTO UserInvoiceAssignment (InvoiceId
      , UserId, `Type`, State)
        VALUES (id, DelegatedTo, 0, 3);
    END IF;
  END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`cloudxuser`@`%`*/ /*!50003 TRIGGER `DelegationHistory_AFTER_UPDATE` AFTER UPDATE ON `DelegationHistory` FOR EACH ROW BEGIN
  DECLARE id int;
  DECLARE DelegatedTo varchar(50);
  DECLARE IsDelegate int;
  DECLARE IsApproved int;
  DECLARE IsEscalated int;
  DECLARE ClientId int;

  SET id = NEW.InvoiceId;
  SET DelegatedTo = NEW.DelegatedTo;
  SET IsDelegate = NEW.IsDelegate;
  SET IsApproved = NEW.IsApproved;
  SET IsEscalated = NEW.IsEscalated;
  SELECT
    ClientId
  FROM Invoice
  WHERE InvoiceId = id LIMIT 1 INTO ClientId;

  IF ClientId NOT IN (SELECT
        *
      FROM UserInvoiceAssignmentTriggerExcludedClients) THEN
    DELETE
      FROM UserInvoiceAssignment
    WHERE InvoiceId = id;

    IF IsDelegate = 0
      AND IsApproved = 0
      AND IsEscalated = 0 THEN
      INSERT INTO UserInvoiceAssignment (InvoiceId
      , UserId, `Type`, State)
        VALUES (id, DelegatedTo, 0, 3);
    END IF;
  END IF;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`cloudxuser`@`%`*/ /*!50003 TRIGGER `DelegationHistory_AFTER_DELETE` AFTER DELETE ON `DelegationHistory` FOR EACH ROW BEGIN
  DECLARE id int;
  DECLARE DelegatedTo varchar(50);
  DECLARE IsDelegate int;
  DECLARE IsApproved int;
  DECLARE IsEscalated int;
  DECLARE ClientId int;

  SET id = OLD.InvoiceId;
  SET DelegatedTo = OLD.DelegatedTo;
  SET IsDelegate = OLD.IsDelegate;
  SET IsApproved = OLD.IsApproved;
  SET IsEscalated = OLD.IsEscalated;
  SELECT
    ClientId
  FROM Invoice
  WHERE InvoiceId = id LIMIT 1 INTO ClientId;

  IF ClientId NOT IN (SELECT
        *
      FROM UserInvoiceAssignmentTriggerExcludedClients) THEN
    IF IsDelegate = 0
      AND IsApproved = 0
      AND IsEscalated = 0 THEN
      DELETE
        FROM UserInvoiceAssignment
      WHERE (SELECT
            (CAST(InvoiceId AS char(50)) + CAST(UserId AS char(50)))
          FROM UserInvoiceAssignment) IN (SELECT
            (CAST(InvoiceId AS char(50)) + CAST(DelegatedTo AS char(50)))
          FROM OLD);
    END IF;
  END IF;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `Department`
--

DROP TABLE IF EXISTS `Department`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Department` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `DepartmentName` varchar(75) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Description` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ClientId` int DEFAULT NULL,
  `VendorId` int DEFAULT NULL,
  `AddressId` int DEFAULT NULL,
  `InternalId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `RemitToAddressId` int DEFAULT NULL,
  `ClientCompanyId` int DEFAULT NULL,
  `IsActive` tinyint(1) DEFAULT NULL,
  `SourceDepartmentId` int DEFAULT NULL,
  `ParentDepartmentId` int DEFAULT NULL,
  `ExternalId` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ProjectTypeId` int DEFAULT NULL,
  `OrgId` int DEFAULT NULL,
  `Address2Id` int DEFAULT NULL,
  `DepartmentPriority` int DEFAULT '0',
  PRIMARY KEY (`Id`),
  KEY `IX_AddressId` (`AddressId`) USING BTREE,
  KEY `IX_ClientCompanyId` (`ClientCompanyId`) USING BTREE,
  KEY `IX_ClientId` (`ClientId`) USING BTREE,
  KEY `IX_RemitToAddressId` (`RemitToAddressId`) USING BTREE,
  KEY `IX_VendorId` (`VendorId`) USING BTREE,
  KEY `ParentDepartmentId` (`ParentDepartmentId`) USING BTREE,
  KEY `OrgId` (`OrgId`) USING BTREE,
  KEY `FK_Department_Address_Address2Id` (`Address2Id`) USING BTREE,
  CONSTRAINT `Department_ibfk_1` FOREIGN KEY (`OrgId`) REFERENCES `OrgData` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Department_ibfk_2` FOREIGN KEY (`Address2Id`) REFERENCES `Address` (`AddressId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Department_ibfk_3` FOREIGN KEY (`AddressId`) REFERENCES `Address` (`AddressId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Department_ibfk_4` FOREIGN KEY (`RemitToAddressId`) REFERENCES `Address` (`AddressId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Department_ibfk_5` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Department_ibfk_6` FOREIGN KEY (`ClientCompanyId`) REFERENCES `ClientCompany` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Department_ibfk_7` FOREIGN KEY (`ParentDepartmentId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Department_ibfk_8` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=10129143 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `DepartmentGLCode`
--

DROP TABLE IF EXISTS `DepartmentGLCode`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `DepartmentGLCode` (
  `DepartmentId` int NOT NULL,
  `GLCodeId` int NOT NULL,
  PRIMARY KEY (`DepartmentId`,`GLCodeId`),
  KEY `IX_DepartmentId` (`DepartmentId`) USING BTREE,
  KEY `IX_GLCodeId` (`GLCodeId`) USING BTREE,
  CONSTRAINT `DepartmentGLCode_ibfk_1` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `DepartmentGLCode_ibfk_2` FOREIGN KEY (`GLCodeId`) REFERENCES `GLCode` (`GLCodeId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `DepartmentHistory`
--

DROP TABLE IF EXISTS `DepartmentHistory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `DepartmentHistory` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `DepartmentId` int DEFAULT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Action` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ActionDate` datetime DEFAULT NULL,
  `PreviousData` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `NewData` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  PRIMARY KEY (`Id`),
  KEY `FK_DepartmentHistory_Department_DepartmentId` (`DepartmentId`) USING BTREE,
  KEY `FK_DepartmentHistory_User_UserId` (`UserId`) USING BTREE,
  CONSTRAINT `DepartmentHistory_ibfk_1` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `DepartmentHistory_ibfk_2` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=36 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `DepartmentManager`
--

DROP TABLE IF EXISTS `DepartmentManager`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `DepartmentManager` (
  `Id` int NOT NULL,
  `DepartmentId` int NOT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `DepartmentId` (`DepartmentId`) USING BTREE,
  KEY `UserId` (`UserId`) USING BTREE,
  CONSTRAINT `DepartmentManager_ibfk_1` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `DepartmentManager_ibfk_2` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `DepartmentProjectType`
--

DROP TABLE IF EXISTS `DepartmentProjectType`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `DepartmentProjectType` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `DepartmentId` int DEFAULT NULL,
  `ProjectTypeId` int DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `DepartmentId` (`DepartmentId`) USING BTREE,
  KEY `ProjectTypeId` (`ProjectTypeId`) USING BTREE,
  CONSTRAINT `DepartmentProjectType_ibfk_1` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `DepartmentProjectType_ibfk_2` FOREIGN KEY (`ProjectTypeId`) REFERENCES `ProjectType` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `DynamicReport`
--

DROP TABLE IF EXISTS `DynamicReport`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `DynamicReport` (
  `ReportId` int NOT NULL AUTO_INCREMENT,
  `ClientId` int NOT NULL,
  `ReportName` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ReportType` int NOT NULL,
  `UserField1` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`ReportId`),
  KEY `FK_DynamicReport_Client_ClientId_idx` (`ClientId`) USING BTREE,
  CONSTRAINT `DynamicReport_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=200 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `DynamicReportAttribute`
--

DROP TABLE IF EXISTS `DynamicReportAttribute`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `DynamicReportAttribute` (
  `ReportId` int NOT NULL,
  `InvoiceAttributeId` int NOT NULL,
  `OrderNo` int NOT NULL,
  PRIMARY KEY (`ReportId`,`InvoiceAttributeId`),
  KEY `FK_DynamicReportAttribute_InvoiceAttribute_InvoiceAttribute_idx` (`InvoiceAttributeId`) USING BTREE,
  CONSTRAINT `DynamicReportAttribute_ibfk_1` FOREIGN KEY (`ReportId`) REFERENCES `DynamicReport` (`ReportId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `DynamicReportAttribute_ibfk_2` FOREIGN KEY (`InvoiceAttributeId`) REFERENCES `InvoiceAttribute` (`InvoiceAttributeID`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ECs2016-06-06`
--

DROP TABLE IF EXISTS `ECs2016-06-06`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ECs2016-06-06` (
  `CardNumber` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `InvoiceId` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Amount` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Email`
--

DROP TABLE IF EXISTS `Email`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Email` (
  `Id` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `ClientId` int NOT NULL,
  `CreatedDate` datetime NOT NULL,
  `SentDate` datetime DEFAULT NULL,
  `Subject` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Body` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `EmailType` smallint NOT NULL,
  `SentFromName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SentFromEmailAddress` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SendAfter` datetime DEFAULT NULL,
  `Priority` int NOT NULL DEFAULT '1',
  PRIMARY KEY (`Id`),
  KEY `ClientId` (`ClientId`) USING BTREE,
  KEY `CurrentUserName` (`SentFromName`) USING BTREE,
  CONSTRAINT `Email_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `EmailAttachmentInformations`
--

DROP TABLE IF EXISTS `EmailAttachmentInformations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `EmailAttachmentInformations` (
  `EmailAttachmentInformationEmailId` int DEFAULT NULL,
  `EmailAttachmentInformationName` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `EmailAttachmentInformationSize` varchar(11) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `EmailAttachmentInformationId` int NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`EmailAttachmentInformationId`),
  KEY `EmailAttachmentInformationEmailId` (`EmailAttachmentInformationEmailId`) USING BTREE,
  CONSTRAINT `EmailAttachmentInformations_ibfk_1` FOREIGN KEY (`EmailAttachmentInformationEmailId`) REFERENCES `EmailCaptures` (`EmailCaptureId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=740 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `EmailAttachments`
--

DROP TABLE IF EXISTS `EmailAttachments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `EmailAttachments` (
  `EmailId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `AttachmentPath` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `FileName` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DeleteAttachmentAfterSending` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`EmailId`,`AttachmentPath`),
  CONSTRAINT `EmailAttachments_ibfk_1` FOREIGN KEY (`EmailId`) REFERENCES `Email` (`Id`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `EmailCaptureAttachments`
--

DROP TABLE IF EXISTS `EmailCaptureAttachments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `EmailCaptureAttachments` (
  `EmailCaptureAttachmentId` int NOT NULL AUTO_INCREMENT,
  `EmailCaptureClientEmailId` int NOT NULL,
  `EmailAttachmentName` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `NewAttachmentName` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `EmailAttachmentSize` int NOT NULL,
  `EmailDate` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Checksum` varchar(4000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`EmailCaptureAttachmentId`),
  KEY `EmailCaptureId` (`EmailCaptureClientEmailId`) USING BTREE,
  KEY `EmailCaptureAttachments_EmailAttachmentName` (`EmailAttachmentName`) USING BTREE,
  CONSTRAINT `EmailCaptureAttachments_ibfk_1` FOREIGN KEY (`EmailCaptureClientEmailId`) REFERENCES `EmailCaptureClientEmails` (`EmailCaptureClientEmailId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=5134707 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `EmailCaptureAutoNotificationConfig`
--

DROP TABLE IF EXISTS `EmailCaptureAutoNotificationConfig`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `EmailCaptureAutoNotificationConfig` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ClientId` int DEFAULT NULL,
  `Notification` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `CCEmails` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  PRIMARY KEY (`Id`),
  KEY `FK_EmailCaptureAutoNotificationConfig_ClientId` (`ClientId`) USING BTREE,
  CONSTRAINT `EmailCaptureAutoNotificationConfig_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `EmailCaptureClientEmails`
--

DROP TABLE IF EXISTS `EmailCaptureClientEmails`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `EmailCaptureClientEmails` (
  `EmailCaptureClientEmailId` int NOT NULL AUTO_INCREMENT,
  `EmailCaptureClientId` int NOT NULL,
  `EmailSource` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ToAddress` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CCAddress` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `EmailSubject` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ReceivedDateTime` datetime NOT NULL,
  `ExceptionEmail` tinyint DEFAULT NULL,
  PRIMARY KEY (`EmailCaptureClientEmailId`),
  KEY `EmailCaptureClientId` (`EmailCaptureClientId`) USING BTREE,
  CONSTRAINT `EmailCaptureClientEmails_ibfk_1` FOREIGN KEY (`EmailCaptureClientId`) REFERENCES `EmailCaptureClients` (`EmailCaptureClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=4604680 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `EmailCaptureClients`
--

DROP TABLE IF EXISTS `EmailCaptureClients`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `EmailCaptureClients` (
  `EmailCaptureClientId` int NOT NULL AUTO_INCREMENT,
  `ClientId` int NOT NULL,
  `EmailAddress` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `DropFolder` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `NotifyEmail` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `MailServerUrl` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `MailServerUserName` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `MailServerPassword` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `MailServerProtocol` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `MailServerPort` int NOT NULL,
  `RetainFileName` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`EmailCaptureClientId`),
  KEY `ClientId` (`ClientId`) USING BTREE,
  CONSTRAINT `EmailCaptureClients_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=10523 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `EmailCaptureEmailLog`
--

DROP TABLE IF EXISTS `EmailCaptureEmailLog`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `EmailCaptureEmailLog` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Server` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `EmailId` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `LastMessageNumber` int DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=903992 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `EmailCaptureException`
--

DROP TABLE IF EXISTS `EmailCaptureException`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `EmailCaptureException` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ClientId` int DEFAULT NULL,
  `Sender` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Receiver` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Subject` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Date` datetime DEFAULT NULL,
  `ExceptionType` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Remark` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `FailedEmailFileName` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_EmailCaptureException_ClientId` (`ClientId`) USING BTREE,
  CONSTRAINT `EmailCaptureException_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=1312245 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `EmailCaptureLog`
--

DROP TABLE IF EXISTS `EmailCaptureLog`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `EmailCaptureLog` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Sender` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Receiver` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Subject` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Date` datetime DEFAULT NULL,
  `NumberOfAttachments` int DEFAULT NULL,
  `Attachments` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  PRIMARY KEY (`Id`),
  FULLTEXT KEY `Subject` (`Subject`,`Sender`)
) ENGINE=InnoDB AUTO_INCREMENT=2157151 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `EmailCaptures`
--

DROP TABLE IF EXISTS `EmailCaptures`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `EmailCaptures` (
  `EmailCaptureId` int NOT NULL AUTO_INCREMENT,
  `EmailCaptureSender` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `EmailCaptureReceiver` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `EmailCaptureCopyTo` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `EmailCaptureReceivedDateTime` datetime DEFAULT NULL,
  `EmailCaptureNumberPDFAttached` int DEFAULT NULL,
  `EmailCaptureClientId` int DEFAULT NULL,
  `EmailCaptureBatchId` int DEFAULT NULL,
  `CorrectClientId` int DEFAULT NULL,
  PRIMARY KEY (`EmailCaptureId`)
) ENGINE=InnoDB AUTO_INCREMENT=1082 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `EmailHistory`
--

DROP TABLE IF EXISTS `EmailHistory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `EmailHistory` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `Email` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=320 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `EmailRecipients`
--

DROP TABLE IF EXISTS `EmailRecipients`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `EmailRecipients` (
  `EmailId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `EmailAddress` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `RecipientType` tinyint NOT NULL,
  `RecipientName` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`EmailId`,`EmailAddress`),
  KEY `EmailRecipients_ibfk_1` (`UserId`) USING BTREE,
  CONSTRAINT `EmailRecipients_ibfk_1` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `EmailRecipients_ibfk_2` FOREIGN KEY (`EmailId`) REFERENCES `Email` (`Id`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `EmailTemplates`
--

DROP TABLE IF EXISTS `EmailTemplates`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `EmailTemplates` (
  `EmailTemplateType` tinyint unsigned NOT NULL,
  `Subject` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Body` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`EmailTemplateType`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Escalation`
--

DROP TABLE IF EXISTS `Escalation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Escalation` (
  `EscalationId` int NOT NULL AUTO_INCREMENT,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `EscalateToUserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `VendorId` int DEFAULT NULL,
  `Duration` int NOT NULL,
  `ApprovalSubStepId` int NOT NULL,
  PRIMARY KEY (`EscalationId`),
  KEY `IX_ApprovalSubStepId_UserId` (`ApprovalSubStepId`,`UserId`) USING BTREE,
  KEY `IX_EscalateToUserId` (`EscalateToUserId`) USING BTREE,
  KEY `IX_VendorId` (`VendorId`) USING BTREE,
  KEY `FK_Escalation_User_UserId` (`UserId`) USING BTREE,
  CONSTRAINT `Escalation_ibfk_1` FOREIGN KEY (`ApprovalSubStepId`, `UserId`) REFERENCES `ApprovalSubStepUser` (`ApprovalSubStepId`, `UserId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `Escalation_ibfk_2` FOREIGN KEY (`EscalateToUserId`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `Escalation_ibfk_3` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `Escalation_ibfk_4` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `EscalationHistory`
--

DROP TABLE IF EXISTS `EscalationHistory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `EscalationHistory` (
  `InvoiceId` int NOT NULL,
  `EscalatedFromId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `EscalatedToId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `DateEscalated` datetime NOT NULL,
  `Comment` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsApproved` tinyint(1) NOT NULL,
  `IsDelegated` tinyint(1) NOT NULL,
  `IsEscalated` tinyint(1) NOT NULL,
  PRIMARY KEY (`InvoiceId`,`EscalatedFromId`,`EscalatedToId`),
  KEY `IX_EscalatedFromId` (`EscalatedFromId`) USING BTREE,
  KEY `IX_EscalatedToId` (`EscalatedToId`) USING BTREE,
  KEY `IX_InvoiceId` (`InvoiceId`) USING BTREE,
  CONSTRAINT `EscalationHistory_ibfk_1` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `EscalationHistory_ibfk_2` FOREIGN KEY (`EscalatedFromId`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `EscalationHistory_ibfk_3` FOREIGN KEY (`EscalatedToId`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`cloudxuser`@`%`*/ /*!50003 TRIGGER `EscalationHistory_AFTER_INSERT` AFTER INSERT ON `EscalationHistory` FOR EACH ROW BEGIN
  DECLARE id int;
  DECLARE EscalatedToId varchar(50);
  DECLARE IsDelegate int;
  DECLARE IsApproved int;
  DECLARE IsEscalated int;
  DECLARE ClientId int;

  SET id = NEW.InvoiceId;
  SET EscalatedToId = NEW.EscalatedToId;
  SET IsDelegate = NEW.IsDelegated;
  SET IsApproved = NEW.IsApproved;
  SET IsEscalated = NEW.IsEscalated;
  SELECT
    ClientId
  FROM Invoice
  WHERE InvoiceId = id LIMIT 1 INTO ClientId;

  IF ClientId NOT IN (SELECT
        *
      FROM UserInvoiceAssignmentTriggerExcludedClients) THEN
    DELETE
      FROM UserInvoiceAssignment
    WHERE InvoiceId = id;

    IF IsDelegate = 0
      AND IsApproved = 0
      AND IsEscalated = 0 THEN
      INSERT INTO UserInvoiceAssignment (InvoiceId, UserId, Type, State)
        VALUES (id, EscalatedToId, 0, 4);
    END IF;
  END IF;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`cloudxuser`@`%`*/ /*!50003 TRIGGER `EscalationHistory_AFTER_UPDATE` AFTER UPDATE ON `EscalationHistory` FOR EACH ROW BEGIN
  DECLARE id int;
  DECLARE EscalatedToId varchar(50);
  DECLARE IsDelegate int;
  DECLARE IsApproved int;
  DECLARE IsEscalated int;
  DECLARE ClientId int;

  SET id = NEW.InvoiceId;
  SET EscalatedToId = NEW.EscalatedToId;
  SET IsDelegate = NEW.IsDelegated;
  SET IsApproved = NEW.IsApproved;
  SET IsEscalated = NEW.IsEscalated;
  SELECT
    ClientId
  FROM Invoice
  WHERE InvoiceId = id LIMIT 1 INTO ClientId;

  IF ClientId NOT IN (SELECT
        *
      FROM UserInvoiceAssignmentTriggerExcludedClients) THEN
    DELETE
      FROM UserInvoiceAssignment
    WHERE InvoiceId = id;

    IF IsDelegate = 0
      AND IsApproved = 0
      AND IsEscalated = 0 THEN
      INSERT INTO UserInvoiceAssignment (InvoiceId, UserId, Type, State)
        VALUES (id, EscalatedToId, 0, 4);
    END IF;
  END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`cloudxuser`@`%`*/ /*!50003 TRIGGER `EscalationHistory_AFTER_DELETE` AFTER DELETE ON `EscalationHistory` FOR EACH ROW BEGIN
  DECLARE id int;
  DECLARE EscalatedToId varchar(50);
  DECLARE IsDelegate int;
  DECLARE IsApproved int;
  DECLARE IsEscalated int;
  DECLARE ClientId int;

  SET id = OLD.InvoiceId;
  SET EscalatedToId = OLD.EscalatedToId;
  SET IsDelegate = OLD.IsDelegated;
  SET IsApproved = OLD.IsApproved;
  SET IsEscalated = OLD.IsEscalated;
  SELECT
    ClientId
  FROM Invoice
  WHERE InvoiceId = id LIMIT 1 INTO ClientId;

  IF ClientId NOT IN (SELECT
        *
      FROM UserInvoiceAssignmentTriggerExcludedClients) THEN
    IF IsDelegate = 0
      AND IsApproved = 0
      AND IsEscalated = 0 THEN
      DELETE
        FROM UserInvoiceAssignment
      WHERE (SELECT
            (CAST(InvoiceId AS char(50)) +
            CAST(UserId AS char(50)))
          FROM UserInvoiceAssignment) IN (SELECT
            (CAST(InvoiceId AS char(50)) +
            CAST(EscalatedToId AS char(50)))
          FROM OLD);
    END IF;
  END IF;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `ExHandlersManager`
--

DROP TABLE IF EXISTS `ExHandlersManager`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ExHandlersManager` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ManagerId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Duration` int DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_ManagerId` (`ManagerId`) USING BTREE,
  KEY `IX_UserId` (`UserId`) USING BTREE,
  CONSTRAINT `ExHandlersManager_ibfk_1` FOREIGN KEY (`ManagerId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ExHandlersManager_ibfk_2` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ExcelInvoiceSubmitPickup`
--

DROP TABLE IF EXISTS `ExcelInvoiceSubmitPickup`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ExcelInvoiceSubmitPickup` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `FileName` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ClientId` int DEFAULT NULL,
  `InvoiceId` int DEFAULT NULL,
  `DateCreated` datetime DEFAULT NULL,
  `IsPicked` tinyint(1) DEFAULT NULL,
  `PickedDate` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `ExcelInvoiceSubmitPickup_Client_idx` (`ClientId`) USING BTREE,
  KEY `ExcelInvoiceSubmitPickup_Invoice_idx` (`InvoiceId`) USING BTREE,
  CONSTRAINT `ExcelInvoiceSubmitPickup_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ExcelInvoiceSubmitPickup_ibfk_2` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=531 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ExcelSubmissionMapping`
--

DROP TABLE IF EXISTS `ExcelSubmissionMapping`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ExcelSubmissionMapping` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `RowNo` int DEFAULT NULL,
  `ColumnNo` int DEFAULT NULL,
  `InvoiceAttributeId` int DEFAULT NULL,
  `ClientId` int DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `ExcelInvoice_InvoiceAttribute_idx` (`InvoiceAttributeId`) USING BTREE,
  KEY `ExcelInvoice_Client_idx` (`ClientId`) USING BTREE,
  CONSTRAINT `ExcelSubmissionMapping_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ExcelSubmissionMapping_ibfk_2` FOREIGN KEY (`InvoiceAttributeId`) REFERENCES `InvoiceAttribute` (`InvoiceAttributeID`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Exception`
--

DROP TABLE IF EXISTS `Exception`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Exception` (
  `ExceptionId` bigint NOT NULL AUTO_INCREMENT,
  `InvoiceId` int NOT NULL,
  `ExceptionTypeId` tinyint unsigned NOT NULL,
  `Comment` varchar(440) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`ExceptionId`),
  KEY `IX_ExceptionTypeId` (`ExceptionTypeId`) USING BTREE,
  KEY `IX_InvoiceId` (`InvoiceId`) USING BTREE,
  CONSTRAINT `Exception_ibfk_1` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=5549406 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ExceptionHistory`
--

DROP TABLE IF EXISTS `ExceptionHistory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ExceptionHistory` (
  `ExceptionId` int NOT NULL AUTO_INCREMENT,
  `InvoiceId` int DEFAULT NULL,
  `ExceptionTypeId` tinyint unsigned DEFAULT NULL,
  `ExceptionHandlerId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ExceptionHandledDate` datetime DEFAULT NULL,
  `Comment` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `SourceExceptionId` int DEFAULT NULL,
  PRIMARY KEY (`ExceptionId`),
  KEY `IX_ExceptionHandlerId` (`ExceptionHandlerId`) USING BTREE,
  KEY `IX_ExceptionTypeId` (`ExceptionTypeId`) USING BTREE,
  KEY `IX_InvoiceId` (`InvoiceId`) USING BTREE,
  CONSTRAINT `ExceptionHistory_ibfk_1` FOREIGN KEY (`ExceptionTypeId`) REFERENCES `ExceptionType` (`ExceptionId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ExceptionHistory_ibfk_2` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ExceptionHistory_ibfk_3` FOREIGN KEY (`ExceptionHandlerId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=4973644 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ExceptionType`
--

DROP TABLE IF EXISTS `ExceptionType`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ExceptionType` (
  `ExceptionId` tinyint unsigned NOT NULL,
  `Name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`ExceptionId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ExpenseSmart_OTP`
--

DROP TABLE IF EXISTS `ExpenseSmart_OTP`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ExpenseSmart_OTP` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `UserId` char(36) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `OtpCode` char(10) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DeviceId` varchar(100) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ExpirationTime` datetime DEFAULT NULL,
  `Attempts` int DEFAULT NULL,
  `DateCreated` datetime DEFAULT NULL,
  `IsVerified` tinyint(1) DEFAULT '0',
  KEY `Id` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ExpenseSmart_UserExpenseAttachment`
--

DROP TABLE IF EXISTS `ExpenseSmart_UserExpenseAttachment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ExpenseSmart_UserExpenseAttachment` (
  `UserExpenseAttachmentId` int NOT NULL AUTO_INCREMENT,
  `ExpenseId` int NOT NULL,
  `ImageUrl` varchar(200) COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`UserExpenseAttachmentId`),
  KEY `ExpenseSmart_UserExpenseAttachment_ExpenseId` (`ExpenseId`),
  CONSTRAINT `ExpenseSmart_UserExpenseAttachment_ExpenseId` FOREIGN KEY (`ExpenseId`) REFERENCES `ExpenseSmart_UserExpenseHeader` (`ExpenseId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ExpenseSmart_UserExpenseHeader`
--

DROP TABLE IF EXISTS `ExpenseSmart_UserExpenseHeader`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ExpenseSmart_UserExpenseHeader` (
  `ExpenseId` int NOT NULL AUTO_INCREMENT,
  `UniqueId` varchar(100) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Version` varchar(50) COLLATE utf8mb4_general_ci NOT NULL,
  `UserId` char(36) COLLATE utf8mb4_general_ci NOT NULL,
  `Description` varchar(100) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PeriodDate1` char(10) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PeriodDate2` char(10) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CreatedDatetime` datetime NOT NULL,
  `InvoiceId` int DEFAULT NULL,
  `InvoiceTotal` decimal(18,2) DEFAULT NULL,
  PRIMARY KEY (`ExpenseId`),
  KEY `ExpenseSmart_UserExpenseHeader_UserId` (`UserId`),
  CONSTRAINT `ExpenseSmart_UserExpenseHeader_UserId` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ExpenseSmart_UserExpenseLine`
--

DROP TABLE IF EXISTS `ExpenseSmart_UserExpenseLine`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ExpenseSmart_UserExpenseLine` (
  `ExpenseLineId` int NOT NULL AUTO_INCREMENT,
  `ExpenseId` int NOT NULL,
  `ExpenseCategoryId` int NOT NULL,
  `EntryDate` char(10) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Qty` int DEFAULT NULL,
  `QtyRate` decimal(18,2) DEFAULT NULL,
  `Currency` char(3) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CurrencyAmount` decimal(18,2) DEFAULT NULL,
  `EXRRate` decimal(10,5) DEFAULT NULL,
  `CurrencyFinal` char(3) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FinalAmount` decimal(18,2) DEFAULT NULL,
  `LineInfo` varchar(30) COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`ExpenseLineId`),
  KEY `ExpenseSmart_UserExpenseLine_ExpenseId` (`ExpenseId`),
  CONSTRAINT `ExpenseSmart_UserExpenseLine_ExpenseId` FOREIGN KEY (`ExpenseId`) REFERENCES `ExpenseSmart_UserExpenseHeader` (`ExpenseId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ExpenseType`
--

DROP TABLE IF EXISTS `ExpenseType`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ExpenseType` (
  `ExpenseId` int NOT NULL AUTO_INCREMENT,
  `ExpenseName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ClientId` int DEFAULT NULL,
  `IsActive` tinyint(1) NOT NULL,
  PRIMARY KEY (`ExpenseId`),
  UNIQUE KEY `ExpenseType_ClientId_ExpenseType` (`ExpenseName`,`ClientId`) USING BTREE,
  KEY `ClientId` (`ClientId`) USING BTREE,
  CONSTRAINT `ExpenseType_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ExportList`
--

DROP TABLE IF EXISTS `ExportList`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ExportList` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ClientId` int DEFAULT NULL,
  `InvoiceId` int DEFAULT NULL,
  `OutPutFileName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DateCreated` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_ClientId` (`ClientId`) USING BTREE,
  KEY `IX_InvoiceId` (`InvoiceId`) USING BTREE,
  CONSTRAINT `ExportList_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ExportList_ibfk_2` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=467094 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ExportProcess`
--

DROP TABLE IF EXISTS `ExportProcess`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ExportProcess` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ClientId` int NOT NULL,
  `RequestedDate` datetime NOT NULL DEFAULT (utc_timestamp()),
  `CompletedDate` datetime DEFAULT NULL,
  `UserId` char(36) COLLATE utf8mb4_general_ci NOT NULL,
  `AdditionalUserIds` mediumtext COLLATE utf8mb4_general_ci,
  `isNotifyAll` tinyint NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `ExportProcess_ClientID` (`ClientId`),
  CONSTRAINT `ExportProcess_ClientID` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci AVG_ROW_LENGTH=3276 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `FreightCodes`
--

DROP TABLE IF EXISTS `FreightCodes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `FreightCodes` (
  `FreightCodeId` int NOT NULL AUTO_INCREMENT,
  `Code` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Description` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ClientId` int NOT NULL,
  `IsActive` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`FreightCodeId`),
  KEY `FK_FreightCodes_ibfk_1` (`ClientId`) USING BTREE,
  CONSTRAINT `FreightCodes_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=222 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Frequency`
--

DROP TABLE IF EXISTS `Frequency`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Frequency` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `FrequencyCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FrequencyDescription` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Code` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=46 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `GLCode`
--

DROP TABLE IF EXISTS `GLCode`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `GLCode` (
  `ClientId` int NOT NULL,
  `GLCodeId` int NOT NULL AUTO_INCREMENT,
  `GLCodeName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Desccription` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ActivityRequired` tinyint(1) NOT NULL,
  `SubAccount` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsProjectTypeRequred` tinyint(1) DEFAULT NULL,
  `IsSubProjectTypeRequired` tinyint(1) DEFAULT NULL,
  `ProjectType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SubProjectType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ClientCompanyId` int DEFAULT NULL,
  `IsActive` tinyint(1) NOT NULL,
  `SourceGLCodeId` int DEFAULT NULL,
  `GLShortCode` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `LastActionDate` datetime DEFAULT NULL,
  `LastActionBy` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ExternalId` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `GLCodeType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Percentage` decimal(18,2) DEFAULT NULL,
  `LastUpdateDate` datetime DEFAULT NULL,
  `Category1` int DEFAULT NULL,
  `Category2` int DEFAULT NULL,
  `Created_by` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Created_date` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `LastUpdated_by` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `LastUpdated_date` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `ForInvoiceType` tinyint DEFAULT '0',
  PRIMARY KEY (`GLCodeId`),
  KEY `IX_ClientCompanyId` (`ClientCompanyId`) USING BTREE,
  KEY `IX_ClientId` (`ClientId`) USING BTREE,
  KEY `FK_GLCode_Category1` (`Category1`) USING BTREE,
  KEY `FK_GLCode_Category2` (`Category2`) USING BTREE,
  CONSTRAINT `GLCode_ibfk_1` FOREIGN KEY (`Category1`) REFERENCES `Category` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `GLCode_ibfk_2` FOREIGN KEY (`Category2`) REFERENCES `Category` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `GLCode_ibfk_3` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `GLCode_ibfk_4` FOREIGN KEY (`ClientCompanyId`) REFERENCES `ClientCompany` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=1557828383 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`cloudxuser`@`%`*/ /*!50003 TRIGGER `GLCode_BeforeUpdate` BEFORE UPDATE ON `GLCode` FOR EACH ROW BEGIN
  SET New.LastUpdateDate = NOW();
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `GLCodeHistory`
--

DROP TABLE IF EXISTS `GLCodeHistory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `GLCodeHistory` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `GLCodeId` int NOT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Action` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ActionDate` datetime DEFAULT NULL,
  `PreviousData` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `NewData` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  PRIMARY KEY (`Id`),
  KEY `FK_GLCodeHistory_GLCode` (`GLCodeId`) USING BTREE,
  KEY `FK_GLCodeHistory_UserId` (`UserId`) USING BTREE,
  CONSTRAINT `GLCodeHistory_ibfk_1` FOREIGN KEY (`GLCodeId`) REFERENCES `GLCode` (`GLCodeId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `GLCodeHistory_ibfk_2` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `GLSegements`
--

DROP TABLE IF EXISTS `GLSegements`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `GLSegements` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `OrgId` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Segment1` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Segment2` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Segment3` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Segment4` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Segment5` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Segment6` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=15448 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `GridColumnConfig`
--

DROP TABLE IF EXISTS `GridColumnConfig`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `GridColumnConfig` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `GridName` varchar(45) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CategoryName` varchar(45) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ClientId` int DEFAULT NULL,
  `ColumnName` varchar(45) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `OrderNo` int DEFAULT NULL,
  `DisplayName` varchar(45) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `GridColumn_Client_idx` (`ClientId`) USING BTREE,
  CONSTRAINT `GridColumnConfig_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HFJobsAggregatedCounter`
--

DROP TABLE IF EXISTS `HFJobsAggregatedCounter`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HFJobsAggregatedCounter` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Key` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `Value` int NOT NULL,
  `ExpireAt` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  UNIQUE KEY `IX_HFJobsCounterAggregated_Key` (`Key`)
) ENGINE=InnoDB AUTO_INCREMENT=900 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HFJobsCounter`
--

DROP TABLE IF EXISTS `HFJobsCounter`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HFJobsCounter` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Key` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `Value` int NOT NULL,
  `ExpireAt` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_HFJobsCounter_Key` (`Key`)
) ENGINE=InnoDB AUTO_INCREMENT=1663 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HFJobsDistributedLock`
--

DROP TABLE IF EXISTS `HFJobsDistributedLock`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HFJobsDistributedLock` (
  `Resource` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `CreatedAt` datetime(6) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HFJobsHash`
--

DROP TABLE IF EXISTS `HFJobsHash`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HFJobsHash` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Key` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `Field` varchar(40) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `Value` longtext,
  `ExpireAt` datetime(6) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  UNIQUE KEY `IX_HFJobsHash_Key_Field` (`Key`,`Field`)
) ENGINE=InnoDB AUTO_INCREMENT=1667 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HFJobsJob`
--

DROP TABLE IF EXISTS `HFJobsJob`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HFJobsJob` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `StateId` int DEFAULT NULL,
  `StateName` varchar(20) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `InvocationData` longtext NOT NULL,
  `Arguments` longtext NOT NULL,
  `CreatedAt` datetime(6) NOT NULL,
  `ExpireAt` datetime(6) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_HFJobsJob_StateName` (`StateName`)
) ENGINE=InnoDB AUTO_INCREMENT=555 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HFJobsJobParameter`
--

DROP TABLE IF EXISTS `HFJobsJobParameter`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HFJobsJobParameter` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `JobId` int NOT NULL,
  `Name` varchar(40) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `Value` longtext,
  PRIMARY KEY (`Id`),
  UNIQUE KEY `IX_HFJobsJobParameter_JobId_Name` (`JobId`,`Name`),
  KEY `FK_HFJobsJobParameter_Job` (`JobId`),
  CONSTRAINT `FK_HFJobsJobParameter_Job` FOREIGN KEY (`JobId`) REFERENCES `HFJobsJob` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=1673 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HFJobsJobQueue`
--

DROP TABLE IF EXISTS `HFJobsJobQueue`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HFJobsJobQueue` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `JobId` int NOT NULL,
  `FetchedAt` datetime(6) DEFAULT NULL,
  `Queue` varchar(50) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `FetchToken` varchar(36) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_HFJobsJobQueue_QueueAndFetchedAt` (`Queue`,`FetchedAt`)
) ENGINE=InnoDB AUTO_INCREMENT=565 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HFJobsJobState`
--

DROP TABLE IF EXISTS `HFJobsJobState`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HFJobsJobState` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `JobId` int NOT NULL,
  `CreatedAt` datetime(6) NOT NULL,
  `Name` varchar(20) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `Reason` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `Data` longtext,
  PRIMARY KEY (`Id`),
  KEY `FK_HFJobsJobState_Job` (`JobId`),
  CONSTRAINT `FK_HFJobsJobState_Job` FOREIGN KEY (`JobId`) REFERENCES `HFJobsJob` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HFJobsList`
--

DROP TABLE IF EXISTS `HFJobsList`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HFJobsList` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Key` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `Value` longtext,
  `ExpireAt` datetime(6) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HFJobsServer`
--

DROP TABLE IF EXISTS `HFJobsServer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HFJobsServer` (
  `Id` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `Data` longtext NOT NULL,
  `LastHeartbeat` datetime(6) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HFJobsSet`
--

DROP TABLE IF EXISTS `HFJobsSet`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HFJobsSet` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Key` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `Value` varchar(256) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `Score` float NOT NULL,
  `ExpireAt` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  UNIQUE KEY `IX_HFJobsSet_Key_Value` (`Key`,`Value`)
) ENGINE=InnoDB AUTO_INCREMENT=131952 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HFJobsState`
--

DROP TABLE IF EXISTS `HFJobsState`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HFJobsState` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `JobId` int NOT NULL,
  `Name` varchar(20) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `Reason` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `CreatedAt` datetime(6) NOT NULL,
  `Data` longtext,
  PRIMARY KEY (`Id`),
  KEY `FK_HFJobsHangFire_State_Job` (`JobId`),
  CONSTRAINT `FK_HFJobsHangFire_State_Job` FOREIGN KEY (`JobId`) REFERENCES `HFJobsJob` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=1703 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HandHFactoryMoters`
--

DROP TABLE IF EXISTS `HandHFactoryMoters`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HandHFactoryMoters` (
  `Invoice Number` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Misc 1` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Invoice Date` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Due Date` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Net Amount` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HangfireAggregatedCounter`
--

DROP TABLE IF EXISTS `HangfireAggregatedCounter`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HangfireAggregatedCounter` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Key` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `Value` int NOT NULL,
  `ExpireAt` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  UNIQUE KEY `IX_HangfireCounterAggregated_Key` (`Key`),
  KEY `IX_AggregatedCounter_ExpireAt` (`ExpireAt`)
) ENGINE=InnoDB AUTO_INCREMENT=181 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HangfireCounter`
--

DROP TABLE IF EXISTS `HangfireCounter`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HangfireCounter` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Key` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `Value` int NOT NULL,
  `ExpireAt` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_HangfireCounter_Key` (`Key`)
) ENGINE=InnoDB AUTO_INCREMENT=379 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HangfireDistributedLock`
--

DROP TABLE IF EXISTS `HangfireDistributedLock`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HangfireDistributedLock` (
  `Resource` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `CreatedAt` datetime(6) NOT NULL,
  KEY `IX_DistributedLock_Resource` (`Resource`,`CreatedAt`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HangfireHash`
--

DROP TABLE IF EXISTS `HangfireHash`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HangfireHash` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Key` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `Field` varchar(40) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `Value` longtext,
  `ExpireAt` datetime(6) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  UNIQUE KEY `IX_HangfireHash_Key_Field` (`Key`,`Field`),
  KEY `IX_Hash_ExpireAt` (`ExpireAt`)
) ENGINE=InnoDB AUTO_INCREMENT=383 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HangfireJob`
--

DROP TABLE IF EXISTS `HangfireJob`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HangfireJob` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `StateId` int DEFAULT NULL,
  `StateName` varchar(20) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `InvocationData` longtext NOT NULL,
  `Arguments` longtext NOT NULL,
  `CreatedAt` datetime(6) NOT NULL,
  `ExpireAt` datetime(6) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_HangfireJob_StateName` (`StateName`),
  KEY `IX_Job_ExpireAt` (`ExpireAt`)
) ENGINE=InnoDB AUTO_INCREMENT=175 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HangfireJobParameter`
--

DROP TABLE IF EXISTS `HangfireJobParameter`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HangfireJobParameter` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `JobId` int NOT NULL,
  `Name` varchar(40) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `Value` longtext,
  PRIMARY KEY (`Id`),
  UNIQUE KEY `IX_HangfireJobParameter_JobId_Name` (`JobId`,`Name`),
  KEY `FK_HangfireJobParameter_Job` (`JobId`),
  CONSTRAINT `FK_HangfireJobParameter_Job` FOREIGN KEY (`JobId`) REFERENCES `HangfireJob` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=425 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HangfireJobQueue`
--

DROP TABLE IF EXISTS `HangfireJobQueue`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HangfireJobQueue` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `JobId` int NOT NULL,
  `FetchedAt` datetime(6) DEFAULT NULL,
  `Queue` varchar(50) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `FetchToken` varchar(36) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_HangfireJobQueue_QueueAndFetchedAt` (`Queue`,`FetchedAt`),
  KEY `IX_JobQueue_FetchToken` (`FetchToken`)
) ENGINE=InnoDB AUTO_INCREMENT=131 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HangfireJobState`
--

DROP TABLE IF EXISTS `HangfireJobState`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HangfireJobState` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `JobId` int NOT NULL,
  `CreatedAt` datetime(6) NOT NULL,
  `Name` varchar(20) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `Reason` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `Data` longtext,
  PRIMARY KEY (`Id`),
  KEY `FK_HangfireJobState_Job` (`JobId`),
  CONSTRAINT `FK_HangfireJobState_Job` FOREIGN KEY (`JobId`) REFERENCES `HangfireJob` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HangfireList`
--

DROP TABLE IF EXISTS `HangfireList`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HangfireList` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Key` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `Value` longtext,
  `ExpireAt` datetime(6) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_List_ExpireAt` (`ExpireAt`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HangfireMigration`
--

DROP TABLE IF EXISTS `HangfireMigration`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HangfireMigration` (
  `Id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `ExecutedAt` datetime(6) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HangfireServer`
--

DROP TABLE IF EXISTS `HangfireServer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HangfireServer` (
  `Id` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `Data` longtext NOT NULL,
  `LastHeartbeat` datetime(6) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HangfireSet`
--

DROP TABLE IF EXISTS `HangfireSet`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HangfireSet` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Key` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `Value` varchar(256) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `Score` double NOT NULL,
  `ExpireAt` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  UNIQUE KEY `IX_HangfireSet_Key_Value` (`Key`,`Value`),
  KEY `IX_Set_ExpireAt` (`ExpireAt`),
  KEY `IX_Set_KeyScore` (`Key`,`Score`,`Value`)
) ENGINE=InnoDB AUTO_INCREMENT=125 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HangfireState`
--

DROP TABLE IF EXISTS `HangfireState`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HangfireState` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `JobId` int NOT NULL,
  `Name` varchar(20) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL,
  `Reason` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,
  `CreatedAt` datetime(6) NOT NULL,
  `Data` longtext,
  PRIMARY KEY (`Id`),
  KEY `FK_HangfireHangFire_State_Job` (`JobId`),
  CONSTRAINT `FK_HangfireHangFire_State_Job` FOREIGN KEY (`JobId`) REFERENCES `HangfireJob` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=448 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `HarcVChng`
--

DROP TABLE IF EXISTS `HarcVChng`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `HarcVChng` (
  `ExternalIdA` varchar(18) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Externalid` varchar(18) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CompanyCodeA` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CompanyCode` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorIdA` int DEFAULT NULL,
  `VendorId` int DEFAULT NULL,
  `VendorNameA` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorNoA` varchar(13) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorNo` varchar(13) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `IPromotUPO`
--

DROP TABLE IF EXISTS `IPromotUPO`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `IPromotUPO` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `VendorId` int DEFAULT NULL,
  `PONumber` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PODate` date DEFAULT NULL,
  `JobcId` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ItemCode` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `LineNo` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_IPromotUPO_Vendor_Vendor_idx` (`VendorId`) USING BTREE,
  CONSTRAINT `IPromotUPO_ibfk_1` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=241213 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `IgnoreEmail`
--

DROP TABLE IF EXISTS `IgnoreEmail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `IgnoreEmail` (
  `ClientId` int DEFAULT NULL,
  `EmailAddress` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IgnoreEmailId` int NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`IgnoreEmailId`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Invoice`
--

DROP TABLE IF EXISTS `Invoice`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Invoice` (
  `ClientId` int NOT NULL,
  `InvoiceId` int NOT NULL AUTO_INCREMENT,
  `VendorId` int DEFAULT NULL,
  `InvoiceNo` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `InvoiceDate` datetime DEFAULT NULL,
  `PaymentDueDate` datetime DEFAULT NULL,
  `InvoiceTotal` decimal(18,2) DEFAULT NULL,
  `ApprovalRequired` tinyint(1) NOT NULL,
  `ApprovalStatusId` tinyint unsigned NOT NULL,
  `AprovedDate` datetime DEFAULT NULL,
  `AcceptedDate` datetime DEFAULT NULL,
  `SubmissionDate` datetime DEFAULT NULL,
  `RejectedDate` datetime DEFAULT NULL,
  `IsPaused` tinyint(1) NOT NULL,
  `IsExceptionRaised` tinyint(1) NOT NULL,
  `ShippedToAddressId` int DEFAULT NULL,
  `ApproverId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT '',
  `IsPOInvoice` tinyint(1) NOT NULL,
  `ScannedDate` datetime NOT NULL,
  `PONumber` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `RONumber` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ShippingDate` datetime DEFAULT NULL,
  `NetTermDate` datetime DEFAULT NULL,
  `NetTermDiscount` decimal(18,2) DEFAULT NULL,
  `Tax` decimal(18,2) DEFAULT NULL,
  `FreightCharges` decimal(18,2) DEFAULT NULL,
  `InvoiceType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `CheckNumber` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsModified` tinyint(1) NOT NULL,
  `BillToAddressId` int DEFAULT NULL,
  `RemitToAddressId` int DEFAULT NULL,
  `OrgId` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Currency` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CountryCode` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CompanyCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ModifiedDate` datetime DEFAULT NULL,
  `Comment` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `ShipToName` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `BillToName` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `BatchID` int DEFAULT NULL,
  `InvoiceName` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CaptureCompletedDate` datetime DEFAULT NULL,
  `LastActionDate` datetime DEFAULT NULL,
  `GLDate` datetime DEFAULT NULL,
  `LastActionBy` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsDeleted` tinyint(1) NOT NULL,
  `LocationId` int DEFAULT NULL,
  `IsOutPutPending` tinyint(1) NOT NULL,
  `CaptureBatchId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AdjustmentAmount` decimal(18,2) DEFAULT NULL,
  `SubCategoryType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorSiteId` int DEFAULT NULL,
  `PayImmediate` tinyint(1) NOT NULL,
  `VerifierId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `TaxGLCodeId` int DEFAULT NULL,
  `AccountCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `StoreNumber` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ServiceMonth` datetime DEFAULT NULL,
  `IsMultipleSubmission` tinyint(1) NOT NULL,
  `OpenTaskTime` datetime DEFAULT NULL,
  `CompletedTaskTime` datetime DEFAULT NULL,
  `RecognitionCompleteTime` datetime DEFAULT NULL,
  `ABBYYBatchName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VerifierName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsValidated` tinyint(1) DEFAULT NULL,
  `DeliveryNumber` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsBigAirSyncComplete` tinyint(1) DEFAULT NULL,
  `IsLocked` tinyint(1) NOT NULL,
  `LockedAt` datetime DEFAULT NULL,
  `LockedBy` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Container` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `POLookup` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `POReverseLookup` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `POReverseLookupVariance` int DEFAULT NULL,
  `LineItemsQuantityFilterVariance` int DEFAULT NULL,
  `OtherCharges` decimal(18,2) DEFAULT NULL,
  `CustomerLocationId` int DEFAULT NULL,
  `VendorLocationId` int DEFAULT NULL,
  `ValidationCompleted` tinyint(1) DEFAULT NULL,
  `TransactionIdentifer` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SourceInvoiceId` int DEFAULT NULL,
  `PaperlessSubmission` tinyint(1) DEFAULT '0',
  `Reissued` tinyint(1) NOT NULL,
  `UserField1` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField2` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField3` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField4` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField5` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField6` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField7` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField8` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField9` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField10` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsConfidential` tinyint(1) DEFAULT '0',
  `ArchiveReason` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PaymentProcessingDate` datetime DEFAULT NULL,
  `DiscountRequestedAmount` decimal(18,2) DEFAULT NULL,
  `DiscountGranted` tinyint(1) DEFAULT NULL,
  `DiscountExpireDate` datetime DEFAULT NULL,
  `ClientDocId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ParentInvoiceId` int DEFAULT NULL,
  `ProjectTypeId` int DEFAULT NULL,
  `SubProjectTypeId` int DEFAULT NULL,
  `USDInvoiceTotal` decimal(18,2) DEFAULT NULL,
  `Term` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PaymentMethod` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ExternalId` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CustomerId` int DEFAULT NULL,
  `CalculableOtherCharges` decimal(18,2) DEFAULT NULL,
  `AccountCodeId` int DEFAULT NULL,
  `ShipToId` int DEFAULT NULL,
  `TaxCodeId` int DEFAULT NULL,
  `CheckDate` date DEFAULT NULL,
  `Ten99Amount` decimal(18,2) DEFAULT NULL,
  `PaymentId` int DEFAULT NULL,
  `InvoiceTotalWithTax` decimal(18,2) DEFAULT NULL,
  `IsDaat` tinyint(1) NOT NULL DEFAULT '0',
  `PrepaymentNoteId` int DEFAULT NULL,
  `HaulerWONumber` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `HaulerServiceDescription` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `HaulerServiceArea` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `HaulerServiceDate` date DEFAULT NULL,
  `HaulerFrequency` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `HaulerQuantity` decimal(10,0) DEFAULT NULL,
  `HaulerUnitCost` decimal(10,0) DEFAULT NULL,
  `VoucherNumber` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `FreightGlCode` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `TaxGlCode` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `NSDepartmentId` int DEFAULT NULL,
  `ClassId` int DEFAULT NULL,
  `RemittanceAdvice` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `MiscCharges` decimal(18,2) DEFAULT NULL,
  `Material` decimal(18,2) DEFAULT NULL,
  `FuelOutbound` decimal(18,2) DEFAULT NULL,
  `MaterialSurcharge` decimal(18,2) DEFAULT NULL,
  `eTracClientCode` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  PRIMARY KEY (`InvoiceId`),
  KEY `IX_ApprovalStatusId` (`ApprovalStatusId`) USING BTREE,
  KEY `IX_ApproverId` (`ApproverId`) USING BTREE,
  KEY `IX_BatchID` (`BatchID`) USING BTREE,
  KEY `IX_BillToAddressId` (`BillToAddressId`) USING BTREE,
  KEY `IX_ClientId` (`ClientId`) USING BTREE,
  KEY `IX_CustomerLocationId` (`CustomerLocationId`) USING BTREE,
  KEY `IX_LocationId` (`LocationId`) USING BTREE,
  KEY `IX_RemitToAddressId` (`RemitToAddressId`) USING BTREE,
  KEY `IX_ShippedToAddressId` (`ShippedToAddressId`) USING BTREE,
  KEY `IX_VendorId` (`VendorId`) USING BTREE,
  KEY `IX_VendorLocationId` (`VendorLocationId`) USING BTREE,
  KEY `IX_VendorSiteId` (`VendorSiteId`) USING BTREE,
  KEY `IX_VerifierId` (`VerifierId`) USING BTREE,
  KEY `IX_ClientId_InvoiceNo` (`ClientId`,`InvoiceNo`) USING BTREE,
  KEY `FK_Invoice_Invoice_ParentInvoiceId` (`ParentInvoiceId`) USING BTREE,
  KEY `ProjectId` (`ProjectTypeId`) USING BTREE,
  KEY `SubProjectId` (`SubProjectTypeId`) USING BTREE,
  KEY `IX_CustomerId` (`CustomerId`) USING BTREE,
  KEY `FK_Invoice_ibfk_18` (`ShipToId`) USING BTREE,
  KEY `FK_Invoice_ibfk_19` (`TaxCodeId`) USING BTREE,
  KEY `Invoice_ibfk_1` (`PrepaymentNoteId`) USING BTREE,
  KEY `Invoice_InvoiceStatusDashboard` (`ClientId`,`IsPaused`,`IsDeleted`,`ApprovalStatusId`,`IsPOInvoice`) USING BTREE,
  KEY `NSDepartmentId` (`NSDepartmentId`) USING BTREE,
  KEY `ClassId` (`ClassId`) USING BTREE,
  KEY `index_userfield6` (`UserField6`) USING BTREE,
  CONSTRAINT `Invoice_ibfk_1` FOREIGN KEY (`BillToAddressId`) REFERENCES `Address` (`AddressId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Invoice_ibfk_10` FOREIGN KEY (`ShipToId`) REFERENCES `ClientLocation` (`ClientLocationId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Invoice_ibfk_11` FOREIGN KEY (`TaxCodeId`) REFERENCES `Tax` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Invoice_ibfk_12` FOREIGN KEY (`SubProjectTypeId`) REFERENCES `SubProjectType` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Invoice_ibfk_13` FOREIGN KEY (`ParentInvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Invoice_ibfk_14` FOREIGN KEY (`ApprovalStatusId`) REFERENCES `InvoiceStatus` (`StateId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `Invoice_ibfk_15` FOREIGN KEY (`LocationId`) REFERENCES `Location` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Invoice_ibfk_16` FOREIGN KEY (`ClassId`) REFERENCES `NSClass` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Invoice_ibfk_17` FOREIGN KEY (`NSDepartmentId`) REFERENCES `NSDepartment` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Invoice_ibfk_18` FOREIGN KEY (`ApproverId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Invoice_ibfk_19` FOREIGN KEY (`VerifierId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Invoice_ibfk_2` FOREIGN KEY (`RemitToAddressId`) REFERENCES `Address` (`AddressId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Invoice_ibfk_20` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Invoice_ibfk_21` FOREIGN KEY (`VendorLocationId`) REFERENCES `VendorLocation` (`VendorLocationId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Invoice_ibfk_22` FOREIGN KEY (`PrepaymentNoteId`) REFERENCES `Lookup` (`LookupId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Invoice_ibfk_3` FOREIGN KEY (`ShippedToAddressId`) REFERENCES `Address` (`AddressId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Invoice_ibfk_4` FOREIGN KEY (`BatchID`) REFERENCES `Batch` (`ID`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Invoice_ibfk_5` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `Invoice_ibfk_6` FOREIGN KEY (`CustomerLocationId`) REFERENCES `CustomerLocation` (`CustomerLocationId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Invoice_ibfk_7` FOREIGN KEY (`VendorSiteId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Invoice_ibfk_8` FOREIGN KEY (`ProjectTypeId`) REFERENCES `ProjectType` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Invoice_ibfk_9` FOREIGN KEY (`CustomerId`) REFERENCES `Customer` (`CustomerId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=663283312 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`cloudxuser`@`%`*/ /*!50003 TRIGGER `Invoice_After_Insert` AFTER INSERT ON `Invoice` FOR EACH ROW BEGIN
 	DECLARE BatchSource varchar(200);

	SELECT	Source
	INTO	BatchSource
	FROM	Batch
	WHERE	Id = New.BatchID and ifnull(Source, '') <> 'User'
	LIMIT 	1 ;
	
	IF BatchSource IS NOT NULL THEN
		INSERT INTO InvoiceHistory	(InvoiceId, Actor, `Action`, ActionDate, NewData, Field, CurrentStatus)
							VALUES	(NEW.InvoiceId, 'System', 'Set Invoice Source', UTC_TIMESTAMP(), BatchSource, 'Invoice Source', 'Captured');
	END IF;


END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`cloudxuser`@`%`*/ /*!50003 TRIGGER `Invoice_BEFORE_UPDATE` BEFORE UPDATE ON `Invoice` FOR EACH ROW BEGIN
  IF (NEW.ClientId = 26
    AND NEW.FreightCharges IS NOT NULL
    AND (NEW.ApprovalStatusId = 6
    OR NEW.ApprovalStatusId = 1)
    AND NEW.FreightCharges <> 0
    ) THEN
    SET NEW.OtherCharges = NEW.FreightCharges;
    SET NEW.FreightCharges = NULL;
  END IF;

  IF (NEW.ClientId = 97
    AND NEW.IsDaat = 1) THEN
    SET NEW.UserField6 = 'Yes';
  ELSEIF (NEW.ClientId = 97
    AND NEW.IsDaat = 0) THEN
    SET NEW.UserField6 = 'No';
  END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`cloudxuser`@`%`*/ /*!50003 TRIGGER `Invoice_AFTER_UPDATE` AFTER UPDATE ON `Invoice` FOR EACH ROW BEGIN
  DECLARE id int;
  DECLARE ClientId int;
  DECLARE FreightCharges decimal;
  DECLARE IsPaused int;
  DECLARE IsModified int;
  DECLARE ApprovalStatusId int;
  DECLARE IsDeleted int;
  DECLARE VendorId int;
  DECLARE UserId char(36);
  DECLARE OrgId int;
  DECLARE VendorOrgDataId int;
  DECLARE UserOrgId int;
  DECLARE ApprovalRequired int;
  DECLARE IsPoInvoice int;
  DECLARE FirstCharVendor varchar(1);
  DECLARE CountSetting int;
  DECLARE CountRecord int;
  DECLARE APClerkId char(36);

  SET id = NEW.InvoiceId;
  SET ClientId = NEW.ClientId;
  SET FreightCharges = NEW.FreightCharges;
  SET IsPaused = NEW.IsPaused;
  SET IsModified = NEW.IsModified;
  SET ApprovalStatusId = NEW.ApprovalStatusId;
  SET IsDeleted = NEW.IsDeleted;
  SET VendorId = NEW.VendorId;
  SET ApprovalRequired = NEW.ApprovalRequired;
  SET IsPoInvoice = NEW.IsPOInvoice;
	
	if not exists (select 1 from ClientRoles cr where cr.ClientId = ClientId limit 1) then  -- If the client has niot been migrated to NextGen

			  SELECT
			    COUNT(Id)
			  FROM APclerkSetting
			  WHERE InvoiceId = id
			  AND IsModified = 0
			  AND EXISTS (SELECT
			      *
			    FROM `User`
			    WHERE User.UserId = APclerkSetting.`UserId`
			    AND User.`IsActive` = TRUE) LIMIT 1 INTO CountSetting;
			
			  IF (IsDeleted = 1) THEN
			    DELETE
			      FROM UserInvoiceAssignment
			    WHERE InvoiceId = Id;
			  ELSEIF (CountSetting IS NOT NULL
			    AND CountSetting > 0
			    AND ApprovalStatusId = 6
			    AND Old.ApprovalStatusId != 6) THEN
			    DELETE
			      FROM UserInvoiceAssignment
			    WHERE InvoiceId = id;
			    INSERT INTO UserInvoiceAssignment (InvoiceId, UserId, `Type`, State, DateCreated)
			      SELECT
			        id,
			        APclerkSetting.UserId,
			        1,
			        1,
			        NOW()
			      FROM APclerkSetting
			      WHERE APclerkSetting.InvoiceId = id
			      AND APclerkSetting.IsModified = 0
			      AND EXISTS (SELECT
			          *
			        FROM `User`
			        WHERE User.UserId = APclerkSetting.APClerkId
			        AND User.`IsActive` = TRUE)
			      AND EXISTS (SELECT
			          *
			        FROM `UserRoles`
			        WHERE UserRoles.`UserId` = APclerkSetting.APClerkId
			        AND RoleId = 3);
			  ELSEIF (IsPaused = 0
			    AND IsModified = 0
			    AND ApprovalStatusId = 6
			    AND Old.ApprovalStatusId != 6) THEN
			    SELECT
			      apclv.APClerkId
			    FROM APClerkVendor apclv
			    WHERE apclv.VendorId = VendorId
			    AND EXISTS (SELECT
			        *
			      FROM `User`
			      WHERE User.UserId = apclv.`APClerkId`
			      AND User.`IsActive` = TRUE)
			    AND EXISTS (SELECT
			        *
			      FROM `UserRoles`
			      WHERE UserRoles.`UserId` = apclv.APClerkId
			      AND RoleId = 3) LIMIT 1 INTO UserId;
			    IF (VendorId IS NULL) THEN
			      DELETE
			        FROM UserInvoiceAssignment
			      WHERE InvoiceId = id;
			      IF (NEW.VendorSiteId IS NOT NULL
			        AND (SELECT
			            COUNT(*)
			          FROM `User`
			            INNER JOIN `UserRoles`
			              ON `User`.`ClientId` = NEW.ClientId
			              AND `User`.`IsActive` = 1
			              AND User.`UserId` = UserRoles.`UserId`
			            INNER JOIN `UserDepartment`
			              ON User.`UserId` = `UserDepartment`.`UserId`
			              AND UserDepartment.`DepartmentId` = NEW.VendorSiteId
			          WHERE `User`.`ClientId` = ClientId
			          AND UserRoles.`RoleId` = 3) > 0) THEN
			
			        INSERT INTO UserInvoiceAssignment (InvoiceId, UserId, `Type`, State, DateCreated)
			          SELECT
			            NEW.InvoiceId,
			            `User`.`UserId`,
			            1,
			            1,
			            NOW()
			          FROM `User`
			            INNER JOIN `UserRoles`
			              ON `User`.`ClientId` = ClientId
			              AND User.`UserId` = UserRoles.`UserId`
			            INNER JOIN `UserDepartment`
			              ON User.`UserId` = `UserDepartment`.`UserId`
			              AND UserDepartment.`DepartmentId` = NEW.VendorSiteId
			          WHERE `User`.`ClientId` = ClientId
			          AND UserRoles.`RoleId` = 3;
			      ELSE
			        INSERT INTO UserInvoiceAssignment (InvoiceId, UserId, `Type`, State, DateCreated)
			          SELECT
			            NEW.InvoiceId,
			            '00000000-0000-0000-0000-000000000000',
			            1,
			            1,
			            NOW();
			      END IF;
			    ELSEIF (UserId IS NOT NULL) THEN
			      SELECT
			        apclv.APClerkId INTO APClerkId
			      FROM APClerkVendor apclv
			      WHERE apclv.VendorId = VendorId
			      AND EXISTS (SELECT
			          *
			        FROM `User`
			        WHERE User.UserId = apclv.APClerkId
			        AND User.`IsActive` = TRUE)
			      AND EXISTS (SELECT
			          *
			        FROM UserRoles
			        WHERE UserRoles.`UserId` = apclv.APClerkId
			        AND RoleId = 3);
			      DELETE
			        FROM UserInvoiceAssignment
			      WHERE InvoiceId = id;
			      INSERT INTO UserInvoiceAssignment (InvoiceId, UserId, `Type`, State, DateCreated)
			        SELECT
			          id,
			          APClerkId,
			          1,
			          1,
			          NOW();
			    ELSE
			      SELECT
			        (SUBSTRING(VendorName, 1, 1))
			      FROM Vendor v
			      WHERE v.VendorId = VendorId LIMIT 1 INTO FirstCharVendor;
			      SELECT
			        alp.UserID
			      FROM ApClerkAlphabtes alp
			        INNER JOIN `User` u
			          ON u.UserId = alp.UserID
			          AND u.ClientId = ClientId
			          AND u.IsActive = 1
			          AND alp.Alphabtes LIKE CONCAT('%' + FirstCharVendor + '%')
			      WHERE EXISTS (SELECT
			          *
			        FROM `User`
			        WHERE User.UserId = alp.UserID
			        AND User.`IsActive` = TRUE)
			      AND EXISTS (SELECT
			          *
			        FROM UserRoles
			        WHERE UserRoles.`UserId` = alp.UserID
			        AND RoleId = 3) INTO UserId;
			      IF (UserId IS NOT NULL) THEN
			        DELETE
			          FROM UserInvoiceAssignment
			        WHERE InvoiceId = id;
			        INSERT INTO UserInvoiceAssignment (InvoiceId, UserId, `Type`, State, DateCreated)
			          SELECT
			            id,
			            alp.UserID,
			            1,
			            1,
			            NOW()
			          FROM ApClerkAlphabtes alp
			            INNER JOIN `User` u
			              ON u.UserId = alp.UserID
			              AND u.ClientId = ClientId
			              AND alp.Alphabtes LIKE CONCAT('%' + FirstCharVendor + '%')
			          WHERE EXISTS (SELECT
			              *
			            FROM `User`
			            WHERE User.UserId = alp.UserID
			            AND User.`IsActive` = TRUE)
			          AND EXISTS (SELECT
			              *
			            FROM UserRoles
			            WHERE UserRoles.`UserId` = alp.UserId
			            AND RoleId = 3);
			      ELSE
			        DELETE
			          FROM UserInvoiceAssignment
			        WHERE InvoiceId = id;
			        IF (NEW.VendorSiteId IS NOT NULL
			          AND (SELECT
			              COUNT(*)
			            FROM `User`
			              INNER JOIN `UserRoles`
			                ON `User`.`ClientId` = NEW.ClientId
			                AND `User`.`IsActive` = 1
			                AND User.`UserId` = UserRoles.`UserId`
			              INNER JOIN `UserDepartment`
			                ON User.`UserId` = `UserDepartment`.`UserId`
			                AND UserDepartment.`DepartmentId` = NEW.VendorSiteId
			            WHERE `User`.`ClientId` = ClientId
			            AND UserRoles.`RoleId` = 3) > 0) THEN
			
			          INSERT INTO UserInvoiceAssignment (InvoiceId, UserId, `Type`, State, DateCreated)
			            SELECT
			              NEW.InvoiceId,
			              `User`.`UserId`,
			              1,
			              1,
			              NOW()
			            FROM `User`
			              INNER JOIN `UserRoles`
			                ON `User`.`ClientId` = ClientId
			                AND User.`UserId` = UserRoles.`UserId`
			              INNER JOIN `UserDepartment`
			                ON User.`UserId` = `UserDepartment`.`UserId`
			                AND UserDepartment.`DepartmentId` = NEW.VendorSiteId
			            WHERE `User`.`ClientId` = ClientId
			            AND UserRoles.`RoleId` = 3;
			        ELSE
			          INSERT INTO UserInvoiceAssignment (InvoiceId, UserId, `Type`, State, DateCreated)
			            SELECT
			              NEW.InvoiceId,
			              '00000000-0000-0000-0000-000000000000',
			              1,
			              1,
			              NOW();
			        END IF;
			      END IF;
			    END IF;
			  END IF;
			
	end if;



END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `InvoiceArchiveReason`
--

DROP TABLE IF EXISTS `InvoiceArchiveReason`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `InvoiceArchiveReason` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ClientId` int NOT NULL,
  `ArchiveReason` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TotalCount` int NOT NULL,
  `LastUsed` date NOT NULL,
  PRIMARY KEY (`Id`),
  UNIQUE KEY `InvoiceArchiveReason_idx` (`ClientId`,`ArchiveReason`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2256 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `InvoiceAttribute`
--

DROP TABLE IF EXISTS `InvoiceAttribute`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `InvoiceAttribute` (
  `InvoiceAttributeID` int NOT NULL AUTO_INCREMENT,
  `InvoiceAttributeName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `EditorType` tinyint unsigned DEFAULT NULL,
  `DefaultDisplayName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DefaultDisplayFormat` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DefaultRegex` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsDefaultCritical` tinyint(1) NOT NULL,
  `IsDefaultRequred` tinyint(1) NOT NULL,
  `IsDefaultReadonly` tinyint(1) NOT NULL,
  `IsPOApprovalDefault` tinyint(1) NOT NULL,
  `IsNoPOApprovalDefault` tinyint(1) NOT NULL,
  `IsPOExceptionDefault` tinyint(1) NOT NULL,
  `IsNoPOExceptionDefault` tinyint(1) NOT NULL,
  `IsValidationDefault` tinyint(1) NOT NULL,
  `IsGlSlideDefault` tinyint(1) NOT NULL,
  PRIMARY KEY (`InvoiceAttributeID`)
) ENGINE=InnoDB AUTO_INCREMENT=445 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `InvoiceCustomer`
--

DROP TABLE IF EXISTS `InvoiceCustomer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `InvoiceCustomer` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `InvoiceId` int DEFAULT NULL,
  `CustomerId` int DEFAULT NULL,
  `CustomerSiteId` int DEFAULT NULL,
  `ContractNo` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorId` int DEFAULT NULL,
  `VendorSiteId` int DEFAULT NULL,
  `Amount` decimal(18,2) DEFAULT NULL,
  `DateRange` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_CustomerId` (`CustomerId`) USING BTREE,
  KEY `IX_CustomerSiteId` (`CustomerSiteId`) USING BTREE,
  KEY `IX_InvoiceId` (`InvoiceId`) USING BTREE,
  KEY `IX_VendorId` (`VendorId`) USING BTREE,
  KEY `IX_VendorSiteId` (`VendorSiteId`) USING BTREE,
  CONSTRAINT `InvoiceCustomer_ibfk_1` FOREIGN KEY (`CustomerId`) REFERENCES `Customer` (`CustomerId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `InvoiceCustomer_ibfk_2` FOREIGN KEY (`CustomerSiteId`) REFERENCES `CustomerSite` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `InvoiceCustomer_ibfk_3` FOREIGN KEY (`VendorSiteId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `InvoiceCustomer_ibfk_4` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `InvoiceCustomer_ibfk_5` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `InvoiceCustomerLineItem`
--

DROP TABLE IF EXISTS `InvoiceCustomerLineItem`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `InvoiceCustomerLineItem` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `InvoiceCustomerId` int DEFAULT NULL,
  `LineNo` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PostWithNo` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `EquipementNo` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ServiceId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Description` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `WasteMaterialCode` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Description2` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Quantity` double DEFAULT NULL,
  `UnitOfMeasurement` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UnitPrice` decimal(18,2) DEFAULT NULL,
  `Amount` decimal(18,2) DEFAULT NULL,
  `IsFrenchise` tinyint(1) NOT NULL,
  `ServiceDate` datetime DEFAULT NULL,
  `OrderDate` datetime DEFAULT NULL,
  `LineType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `InternalId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FrequencyCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FrequencyDescription` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsSelected` tinyint(1) NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_InvoiceCustomerId` (`InvoiceCustomerId`) USING BTREE,
  CONSTRAINT `InvoiceCustomerLineItem_ibfk_1` FOREIGN KEY (`InvoiceCustomerId`) REFERENCES `InvoiceCustomer` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `InvoiceDocs`
--

DROP TABLE IF EXISTS `InvoiceDocs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `InvoiceDocs` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `InvoiceId` int NOT NULL,
  `Url` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`Id`),
  UNIQUE KEY `unique_index_invoiceid_url` (`InvoiceId`,`Url`) USING BTREE,
  KEY `IX_InvoiceId` (`InvoiceId`) USING BTREE,
  CONSTRAINT `InvoiceDocs_ibfk_1` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=15330567 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `InvoiceGLCode`
--

DROP TABLE IF EXISTS `InvoiceGLCode`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `InvoiceGLCode` (
  `ItemId` int NOT NULL AUTO_INCREMENT,
  `InvoiceId` int NOT NULL,
  `GLCodeId` int NOT NULL,
  `GLAmount` decimal(18,2) DEFAULT NULL,
  PRIMARY KEY (`ItemId`,`InvoiceId`,`GLCodeId`),
  KEY `IX_GLCodeId` (`GLCodeId`) USING BTREE,
  KEY `IX_InvoiceId` (`InvoiceId`) USING BTREE,
  CONSTRAINT `InvoiceGLCode_ibfk_1` FOREIGN KEY (`GLCodeId`) REFERENCES `GLCode` (`GLCodeId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `InvoiceGLCode_ibfk_2` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `InvoiceHistory`
--

DROP TABLE IF EXISTS `InvoiceHistory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `InvoiceHistory` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `InvoiceId` int DEFAULT NULL,
  `Actor` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Action` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ActionDate` datetime DEFAULT NULL,
  `PreviousData` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `NewData` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `Field` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `InitialStatus` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CurrentStatus` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ActorId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `OldID` int DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_ActorId` (`ActorId`) USING BTREE,
  KEY `IX_InvoiceId` (`InvoiceId`) USING BTREE,
  CONSTRAINT `InvoiceHistory_ibfk_1` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `InvoiceHistory_ibfk_2` FOREIGN KEY (`ActorId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=178304702 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `InvoiceHistoryDec3`
--

DROP TABLE IF EXISTS `InvoiceHistoryDec3`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `InvoiceHistoryDec3` (
  `Id` int DEFAULT NULL,
  `InvoiceId` int DEFAULT NULL,
  `Actor` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Action` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ActionDate` datetime DEFAULT NULL,
  `PreviousData` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `NewData` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `Field` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `InitialStatus` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CurrentStatus` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ActorId` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `OldID` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `InvoiceHistoryRecovery`
--

DROP TABLE IF EXISTS `InvoiceHistoryRecovery`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `InvoiceHistoryRecovery` (
  `Id` int DEFAULT NULL,
  `InvoiceId` int DEFAULT NULL,
  `Actor` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Action` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ActionDate` datetime DEFAULT NULL,
  `PreviousData` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `NewData` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `Field` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `InitialStatus` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CurrentStatus` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ActorId` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `OldID` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `InvoiceStatus`
--

DROP TABLE IF EXISTS `InvoiceStatus`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `InvoiceStatus` (
  `StateId` tinyint unsigned NOT NULL,
  `StateName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`StateId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `InvoiceTemplate`
--

DROP TABLE IF EXISTS `InvoiceTemplate`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `InvoiceTemplate` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `VendorId` int NOT NULL,
  `TemplateName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `InvoiceAmount` decimal(18,2) DEFAULT NULL,
  `Tax` decimal(18,2) DEFAULT NULL,
  `FreightCharges` decimal(18,2) DEFAULT NULL,
  `InvoiceType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CompanyCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CountryCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Description` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `InvoiceId` int DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_InvoiceId` (`InvoiceId`) USING BTREE,
  KEY `IX_VendorId` (`VendorId`) USING BTREE,
  CONSTRAINT `InvoiceTemplate_ibfk_1` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `InvoiceTemplate_ibfk_2` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Item`
--

DROP TABLE IF EXISTS `Item`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Item` (
  `ItemId` int NOT NULL AUTO_INCREMENT,
  `ItemNo` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ItemDescription` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ClientId` int NOT NULL,
  `IsActive` tinyint(1) NOT NULL,
  `ExpenseTypeId` int DEFAULT NULL,
  `ItemType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UOMId` int DEFAULT NULL,
  `Price` decimal(18,6) DEFAULT NULL,
  `QuantityOnHand` decimal(18,2) DEFAULT NULL,
  `AlternativeUOMId` int DEFAULT NULL,
  `ConversionFactor` decimal(18,2) DEFAULT NULL,
  `AlternativeUOMCost` decimal(18,2) DEFAULT NULL,
  `MassQty` decimal(18,2) DEFAULT NULL,
  `ConversionQty` decimal(18,2) DEFAULT NULL,
  `OldPOPrice` decimal(18,6) DEFAULT NULL,
  `POInternalNote` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ExternalId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Max` int DEFAULT NULL,
  `Min` int DEFAULT NULL,
  PRIMARY KEY (`ItemId`),
  KEY `IX_ClientId` (`ClientId`) USING BTREE,
  KEY `ExpenseTypeId` (`ExpenseTypeId`) USING BTREE,
  KEY `FK_Item_ibfk_2` (`UOMId`) USING BTREE,
  CONSTRAINT `Item_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `Item_ibfk_2` FOREIGN KEY (`ExpenseTypeId`) REFERENCES `ExpenseType` (`ExpenseId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Item_ibfk_3` FOREIGN KEY (`UOMId`) REFERENCES `UOM` (`UOMId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=104090 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ItemDBCode`
--

DROP TABLE IF EXISTS `ItemDBCode`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ItemDBCode` (
  `ItemId` int NOT NULL,
  `DBCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`ItemId`,`DBCode`),
  KEY `IX_ItemId` (`ItemId`) USING BTREE,
  CONSTRAINT `ItemDBCode_ibfk_1` FOREIGN KEY (`ItemId`) REFERENCES `Item` (`ItemId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ItemLineItemDetail`
--

DROP TABLE IF EXISTS `ItemLineItemDetail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ItemLineItemDetail` (
  `ItemLineItemDetailId` int NOT NULL AUTO_INCREMENT,
  `InvoiceId` int NOT NULL,
  `CustomerLocationItemId` int DEFAULT NULL,
  `VendorItemNumber` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorItemDescription` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Quantity` int DEFAULT NULL,
  `UnitPrice` double DEFAULT NULL,
  `ExtPrice` double DEFAULT NULL,
  `CustomerPrice` double DEFAULT NULL,
  `CustomerQuantity` int DEFAULT NULL,
  PRIMARY KEY (`ItemLineItemDetailId`),
  KEY `IX_CustomerLocationItemId` (`CustomerLocationItemId`) USING BTREE,
  KEY `IX_InvoiceId` (`InvoiceId`) USING BTREE,
  CONSTRAINT `ItemLineItemDetail_ibfk_1` FOREIGN KEY (`CustomerLocationItemId`) REFERENCES `CustomerLocationItem` (`CustomerLocationItemId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ItemLineItemDetail_ibfk_2` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=2724481 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ItemVendor`
--

DROP TABLE IF EXISTS `ItemVendor`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ItemVendor` (
  `ItemVendorId` int NOT NULL,
  `ItemId` int NOT NULL,
  `VendorId` int NOT NULL,
  `ClientId` int NOT NULL,
  `Price` decimal(18,6) DEFAULT NULL,
  `SupplierPart` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Manufacturer` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `OEMPartNo` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PurchaseUOM` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `InvendtoryUOM` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ProductClass` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ProductType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FreightClass` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsActive` tinyint(1) NOT NULL,
  `Min` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Max` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CostofItem` decimal(18,6) DEFAULT NULL,
  `PurchaseLeadTime` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `MinOrderReq` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`ItemVendorId`),
  KEY `FK_ItemVendor_ItemId_Item_ItemId` (`ItemId`) USING BTREE,
  KEY `FK_ItemVendor_VendorId_Vendor_VendorId` (`VendorId`) USING BTREE,
  CONSTRAINT `ItemVendor_ibfk_1` FOREIGN KEY (`ItemId`) REFERENCES `Item` (`ItemId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ItemVendor_ibfk_2` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `LineItemDetail`
--

DROP TABLE IF EXISTS `LineItemDetail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `LineItemDetail` (
  `InvoiceId` int NOT NULL,
  `LineItemDetailId` int NOT NULL AUTO_INCREMENT,
  `ActualQty` double DEFAULT NULL,
  `Quantity` double DEFAULT NULL,
  `ProductId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ProductDescription` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `Description` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `UnitPrice` double DEFAULT NULL,
  `CalculatedUnitPrice` double DEFAULT NULL,
  `CalculatedExtAmt` double DEFAULT NULL,
  `TotalAmount` double DEFAULT NULL,
  `ItemNo` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UnitOfPurchase` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `LineNo` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `POHeaderId` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `POLineId` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `POLineLocationId` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `RecievedTransactionId` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PONumber` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `GLCode` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsExpense` tinyint(1) NOT NULL,
  `OrderQuantity` double DEFAULT NULL,
  `ClientCompanyId` int DEFAULT NULL,
  `DeliveryDate` datetime DEFAULT NULL,
  `Container` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField1` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField2` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField3` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField4` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField5` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField6` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField7` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField8` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField9` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField10` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SourceLineItemDetailId` int DEFAULT NULL,
  `POType` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `HasError` tinyint(1) NOT NULL DEFAULT '0',
  `POId` int DEFAULT NULL,
  `OtherChargesId` int DEFAULT NULL,
  `DepartmentId` int DEFAULT NULL,
  `Currency` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CustomerId` int DEFAULT NULL,
  `ProjectTypeId` int DEFAULT NULL,
  `SubProjectTypeId` int DEFAULT NULL,
  `Title` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SupplierType` int DEFAULT NULL,
  `PRUseDescription` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsRepairOrder` tinyint(1) DEFAULT NULL,
  `HaveParts` tinyint(1) DEFAULT NULL,
  `IsReturnToStock` tinyint(1) DEFAULT NULL,
  `IsCapitalProject` tinyint(1) DEFAULT NULL,
  `CapitalProjectNo` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `BudgetAvailableAfterPR` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CheckPerson` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DirectStockOrder` tinyint(1) DEFAULT NULL,
  `VendorTerm` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PRNumber` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `GRNUse` tinyint(1) DEFAULT NULL,
  `HTSCode` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SEApprovalNo` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `TaxCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `TaxCodeId` int DEFAULT NULL,
  `VendorId` int DEFAULT NULL,
  `AssetProjectId` int DEFAULT NULL,
  `ItemId` int DEFAULT NULL,
  PRIMARY KEY (`LineItemDetailId`),
  KEY `IX_ClientCompanyId` (`ClientCompanyId`) USING BTREE,
  KEY `IX_InvoiceId` (`InvoiceId`) USING BTREE,
  KEY `FK_LineItemDetail_PO_Id` (`POId`) USING BTREE,
  KEY `OtherChargesId` (`OtherChargesId`) USING BTREE,
  KEY `FK_LineItemDetail_Department_DepartmentId_idx` (`DepartmentId`) USING BTREE,
  KEY `CustomerId` (`CustomerId`) USING BTREE,
  KEY `ProjectTypeId` (`ProjectTypeId`) USING BTREE,
  KEY `SubProjectTypeId` (`SubProjectTypeId`) USING BTREE,
  KEY `TaxCodeId` (`TaxCodeId`) USING BTREE,
  KEY `LineItemDetail_ibfk_10` (`VendorId`) USING BTREE,
  KEY `AssetProjectId` (`AssetProjectId`) USING BTREE,
  KEY `FK_LineItemDetail_Item_ItemId` (`ItemId`) USING BTREE,
  CONSTRAINT `LineItemDetail_ibfk_1` FOREIGN KEY (`ClientCompanyId`) REFERENCES `ClientCompany` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `LineItemDetail_ibfk_10` FOREIGN KEY (`POId`) REFERENCES `PO` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `LineItemDetail_ibfk_11` FOREIGN KEY (`AssetProjectId`) REFERENCES `Lookup` (`LookupId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `LineItemDetail_ibfk_2` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `LineItemDetail_ibfk_3` FOREIGN KEY (`OtherChargesId`) REFERENCES `OtherCharges` (`OtherChargesId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `LineItemDetail_ibfk_4` FOREIGN KEY (`CustomerId`) REFERENCES `Customer` (`CustomerId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `LineItemDetail_ibfk_5` FOREIGN KEY (`ProjectTypeId`) REFERENCES `ProjectType` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `LineItemDetail_ibfk_6` FOREIGN KEY (`SubProjectTypeId`) REFERENCES `SubProjectType` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `LineItemDetail_ibfk_7` FOREIGN KEY (`TaxCodeId`) REFERENCES `Tax` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `LineItemDetail_ibfk_8` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `LineItemDetail_ibfk_9` FOREIGN KEY (`ItemId`) REFERENCES `Item` (`ItemId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=27389302 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Location`
--

DROP TABLE IF EXISTS `Location`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Location` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `LocationCode` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorId` int DEFAULT NULL,
  `AddressId` int DEFAULT NULL,
  `SourceLocationId` int DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_AddressId` (`AddressId`) USING BTREE,
  KEY `IX_VendorId` (`VendorId`) USING BTREE,
  CONSTRAINT `Location_ibfk_1` FOREIGN KEY (`AddressId`) REFERENCES `Address` (`AddressId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Location_ibfk_2` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=16409 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `LocationDepartment`
--

DROP TABLE IF EXISTS `LocationDepartment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `LocationDepartment` (
  `LocationId` int NOT NULL,
  `DepartmentId` int NOT NULL,
  PRIMARY KEY (`LocationId`,`DepartmentId`),
  KEY `DepartmentId` (`DepartmentId`) USING BTREE,
  CONSTRAINT `LocationDepartment_ibfk_1` FOREIGN KEY (`LocationId`) REFERENCES `Location` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `LocationDepartment_ibfk_2` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Lookup`
--

DROP TABLE IF EXISTS `Lookup`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Lookup` (
  `LookupId` int NOT NULL AUTO_INCREMENT,
  `ClientId` int NOT NULL,
  `LookupType` int NOT NULL,
  `Code` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Description` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsActive` tinyint(1) NOT NULL DEFAULT '1',
  `CompanyId` int DEFAULT NULL,
  PRIMARY KEY (`LookupId`),
  UNIQUE KEY `ClientId` (`ClientId`,`LookupType`,`Code`) USING BTREE,
  CONSTRAINT `Lookup_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=472 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Menu`
--

DROP TABLE IF EXISTS `Menu`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Menu` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ClientId` int NOT NULL,
  `MenuName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Roles` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `ClientId` (`ClientId`) USING BTREE,
  CONSTRAINT `Menu_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `MissingStatementInvoices`
--

DROP TABLE IF EXISTS `MissingStatementInvoices`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `MissingStatementInvoices` (
  `InvoiceId` int NOT NULL AUTO_INCREMENT,
  `InvoiceNo` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `InvoiceDate` datetime DEFAULT NULL,
  `PaymentDueDate` datetime DEFAULT NULL,
  `InvoiceTotal` decimal(18,2) DEFAULT NULL,
  `PONumber` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ParentInvoiceId` int DEFAULT NULL,
  `AlreadyAssociated` tinyint(1) NOT NULL DEFAULT '0',
  `AssociatedReferenceInvoiceId` int DEFAULT NULL,
  `AssociatedReferenceStatementId` int DEFAULT NULL,
  `AssociationCheckDate` datetime DEFAULT NULL,
  PRIMARY KEY (`InvoiceId`),
  UNIQUE KEY `InvoiceId` (`InvoiceId`,`ParentInvoiceId`) USING BTREE,
  KEY `ParentInvoiceId` (`ParentInvoiceId`) USING BTREE,
  KEY `AssociatedReferenceInvoiceId` (`AssociatedReferenceInvoiceId`) USING BTREE,
  CONSTRAINT `MissingStatementInvoices_ibfk_1` FOREIGN KEY (`ParentInvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=154835 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `MultipleSubmission_InvoiceCustomer`
--

DROP TABLE IF EXISTS `MultipleSubmission_InvoiceCustomer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `MultipleSubmission_InvoiceCustomer` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `InvoiceId` int NOT NULL,
  `Amount` decimal(18,2) NOT NULL,
  `CustomerId` int DEFAULT NULL,
  `CustomerSiteId` int DEFAULT NULL,
  `ContractNo` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorId` int DEFAULT NULL,
  `VendorSiteId` int DEFAULT NULL,
  `DateRange` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_CustomerId` (`CustomerId`) USING BTREE,
  KEY `IX_CustomerSiteId` (`CustomerSiteId`) USING BTREE,
  KEY `IX_InvoiceId` (`InvoiceId`) USING BTREE,
  KEY `IX_VendorId` (`VendorId`) USING BTREE,
  KEY `IX_VendorSiteId` (`VendorSiteId`) USING BTREE,
  CONSTRAINT `MultipleSubmission_InvoiceCustomer_ibfk_1` FOREIGN KEY (`CustomerSiteId`) REFERENCES `CustomerSite` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `MultipleSubmission_InvoiceCustomer_ibfk_2` FOREIGN KEY (`CustomerId`) REFERENCES `Customer` (`CustomerId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `MultipleSubmission_InvoiceCustomer_ibfk_3` FOREIGN KEY (`VendorSiteId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `MultipleSubmission_InvoiceCustomer_ibfk_4` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `MultipleSubmission_InvoiceCustomer_ibfk_5` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `MultipleSubmission_InvoiceCustomerLineItem`
--

DROP TABLE IF EXISTS `MultipleSubmission_InvoiceCustomerLineItem`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `MultipleSubmission_InvoiceCustomerLineItem` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `LineNo` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PostWithNo` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `EquipementNo` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ServiceId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Description` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `WasteMaterialCode` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Description2` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Quantity` double DEFAULT NULL,
  `UnitOfMeasurement` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UnitPrice` decimal(18,2) DEFAULT NULL,
  `Amount` decimal(18,2) DEFAULT NULL,
  `IsFrenchise` tinyint(1) NOT NULL,
  `ServiceDate` datetime DEFAULT NULL,
  `OrderDate` datetime DEFAULT NULL,
  `LineType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `InternalId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FrequencyCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FrequencyDescription` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `MultipleSubmissionId` int NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_MultipleSubmissionId` (`MultipleSubmissionId`) USING BTREE,
  CONSTRAINT `MultipleSubmission_InvoiceCustomerLineItem_ibfk_1` FOREIGN KEY (`MultipleSubmissionId`) REFERENCES `MultipleSubmission_InvoiceCustomer` (`Id`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `NSClass`
--

DROP TABLE IF EXISTS `NSClass`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `NSClass` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `NSClass` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Description` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ClientId` int DEFAULT NULL,
  `VendorId` int DEFAULT NULL,
  `InternalId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ClientCompanyId` int DEFAULT NULL,
  `IsActive` tinyint(1) DEFAULT NULL,
  `ExternalId` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `ClientId` (`ClientId`) USING BTREE,
  KEY `VendorId` (`VendorId`) USING BTREE,
  KEY `NSClass_ClientCompany` (`ClientCompanyId`) USING BTREE,
  CONSTRAINT `NSClass_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `NSClass_ibfk_2` FOREIGN KEY (`ClientCompanyId`) REFERENCES `ClientCompany` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `NSClass_ibfk_3` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=40 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `NSDepartment`
--

DROP TABLE IF EXISTS `NSDepartment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `NSDepartment` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `NSDepartmentName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Description` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ClientId` int DEFAULT NULL,
  `VendorId` int DEFAULT NULL,
  `InternalId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ClientCompanyId` int DEFAULT NULL,
  `IsActive` tinyint(1) DEFAULT NULL,
  `ExternalId` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `ClientId` (`ClientId`) USING BTREE,
  KEY `VendorId` (`VendorId`) USING BTREE,
  KEY `NSDeprtment_ClientCompany` (`ClientCompanyId`) USING BTREE,
  CONSTRAINT `NSDepartment_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `NSDepartment_ibfk_2` FOREIGN KEY (`ClientCompanyId`) REFERENCES `ClientCompany` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `NSDepartment_ibfk_3` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=42 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Notification`
--

DROP TABLE IF EXISTS `Notification`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Notification` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `InvoiceId` int NOT NULL,
  `NotificationFromId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `FromApprovalSubStepId` int DEFAULT NULL,
  `NotificationToId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `ToApprovalSubStepId` int DEFAULT NULL,
  `AmountApproved` decimal(18,2) NOT NULL,
  `DateApproved` datetime NOT NULL,
  `IsAccepted` tinyint unsigned NOT NULL,
  `Type` smallint NOT NULL,
  `IsRejected` tinyint(1) NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_InvoiceId` (`InvoiceId`) USING BTREE,
  KEY `IX_NotificationFromId` (`NotificationFromId`) USING BTREE,
  KEY `IX_NotificationToId` (`NotificationToId`) USING BTREE,
  CONSTRAINT `Notification_ibfk_1` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `Notification_ibfk_2` FOREIGN KEY (`NotificationFromId`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `Notification_ibfk_3` FOREIGN KEY (`NotificationToId`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=2527971 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`cloudxuser`@`%`*/ /*!50003 TRIGGER `Notification_AFTER_INSERT` AFTER INSERT ON `Notification` FOR EACH ROW BEGIN
  DECLARE id int;
  DECLARE NotificationToId varchar(50);
  DECLARE IsAccepted int;
  DECLARE ClientId int;

  SET id = NEW.InvoiceId;
  SET NotificationToId = NEW.NotificationToId;
  SET IsAccepted = NEW.IsAccepted;
  SELECT
    ClientId
  FROM Invoice
  WHERE InvoiceId = id INTO ClientId;

  IF (ClientId NOT IN (SELECT
        *
      FROM UserInvoiceAssignmentTriggerExcludedClients)) THEN
    DELETE
      FROM UserInvoiceAssignment
    WHERE InvoiceId = id;

    IF (IsAccepted = 0
      OR IsAccepted = 2) THEN
      INSERT INTO UserInvoiceAssignment (InvoiceId, UserId, `Type`, State)
        VALUES (id, NotificationToId, 0, 1);
    END IF;
  END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`cloudxuser`@`%`*/ /*!50003 TRIGGER `Notification_AFTER_UPDATE` AFTER UPDATE ON `Notification` FOR EACH ROW BEGIN
  DECLARE id int;
  DECLARE NotificationToId varchar(50);
  DECLARE IsAccepted int;
  DECLARE ClientId int;

  SET id = NEW.InvoiceId;
  SET NotificationToId = NEW.NotificationToId;
  SET IsAccepted = NEW.IsAccepted;
  SELECT
    ClientId
  FROM Invoice
  WHERE InvoiceId = id INTO ClientId;

  IF (ClientId NOT IN (SELECT
        *
      FROM UserInvoiceAssignmentTriggerExcludedClients)) THEN
    DELETE
      FROM UserInvoiceAssignment
    WHERE InvoiceId = id;

    IF (IsAccepted = 0
      OR IsAccepted = 2) THEN
      INSERT INTO UserInvoiceAssignment (InvoiceId, UserId, `Type`, State)
        VALUES (id, NotificationToId, 0, 1);
    END IF;
  END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`cloudxuser`@`%`*/ /*!50003 TRIGGER `Notification_AFTER_DELETE` AFTER DELETE ON `Notification` FOR EACH ROW BEGIN
  DECLARE id int;
  DECLARE NotificationToId varchar(50);
  DECLARE IsAccepted int;
  DECLARE ClientId int;

  SET id = OLD.Id;
  SET NotificationToId = OLD.NotificationToId;
  SET IsAccepted = OLD.IsAccepted;
  SELECT
    ClientId
  FROM Invoice
  WHERE InvoiceId = id INTO ClientId;

  IF (ClientId NOT IN (SELECT
        *
      FROM UserInvoiceAssignmentTriggerExcludedClients)) THEN
    DELETE
      FROM UserInvoiceAssignment
    WHERE InvoiceId = id
      AND UserId = NotificationToId;
  END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `Nov2`
--

DROP TABLE IF EXISTS `Nov2`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Nov2` (
  `LastFour` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Operation`
--

DROP TABLE IF EXISTS `Operation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Operation` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `OperationName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `OperationRole`
--

DROP TABLE IF EXISTS `OperationRole`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `OperationRole` (
  `OperationId` int NOT NULL,
  `RoleId` int NOT NULL,
  `CanView` tinyint(1) NOT NULL,
  `CanAdd` tinyint(1) NOT NULL,
  `CanUpdate` tinyint(1) NOT NULL,
  `CanDelete` tinyint(1) NOT NULL,
  `AllowAll` tinyint(1) NOT NULL,
  `DenyAll` tinyint(1) NOT NULL,
  PRIMARY KEY (`OperationId`,`RoleId`),
  KEY `IX_OperationId` (`OperationId`) USING BTREE,
  KEY `IX_RoleId` (`RoleId`) USING BTREE,
  CONSTRAINT `OperationRole_ibfk_1` FOREIGN KEY (`OperationId`) REFERENCES `Operation` (`Id`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `OperationRole_ibfk_2` FOREIGN KEY (`RoleId`) REFERENCES `Role` (`RoleId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `OrgData`
--

DROP TABLE IF EXISTS `OrgData`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `OrgData` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `OrgId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `OrgName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ClientId` int NOT NULL,
  `IsActive` tinyint(1) NOT NULL,
  `SourceId` int DEFAULT NULL,
  `CountryCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CompanyCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ExternalId` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_ClientId` (`ClientId`) USING BTREE,
  CONSTRAINT `OrgData_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=9432 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `OrgDepartment`
--

DROP TABLE IF EXISTS `OrgDepartment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `OrgDepartment` (
  `OrgDepartmentId` int NOT NULL AUTO_INCREMENT,
  `OrgId` int DEFAULT NULL,
  `DepartmentId` int DEFAULT NULL,
  PRIMARY KEY (`OrgDepartmentId`),
  KEY `OrgId` (`OrgId`) USING BTREE,
  KEY `DepartmentId` (`DepartmentId`) USING BTREE,
  CONSTRAINT `OrgDepartment_ibfk_1` FOREIGN KEY (`OrgId`) REFERENCES `OrgData` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `OrgDepartment_ibfk_2` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=2264 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `OtherCharges`
--

DROP TABLE IF EXISTS `OtherCharges`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `OtherCharges` (
  `OtherChargesId` int NOT NULL AUTO_INCREMENT,
  `Description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `GLCodeId` int DEFAULT NULL,
  `ClientId` int NOT NULL,
  PRIMARY KEY (`OtherChargesId`),
  UNIQUE KEY `Description` (`Description`,`ClientId`) USING BTREE,
  KEY `GLCodeId` (`GLCodeId`) USING BTREE,
  KEY `ClientId` (`ClientId`) USING BTREE,
  CONSTRAINT `OtherCharges_ibfk_1` FOREIGN KEY (`GLCodeId`) REFERENCES `GLCode` (`GLCodeId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `OtherCharges_ibfk_2` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `PO`
--

DROP TABLE IF EXISTS `PO`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `PO` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `VendorId` int DEFAULT NULL,
  `PONumber` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Amount` double(18,8) DEFAULT NULL,
  `POType` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `POStatus` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ItemNumber` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorCatNumber` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UnitOfPurchase` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `OrderQty` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UnitCost` double(18,8) DEFAULT NULL,
  `ExtCost` double(18,8) DEFAULT NULL,
  `RcvdQty` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT '0',
  `ClientId` int DEFAULT NULL,
  `IsMatched` int DEFAULT NULL,
  `LineNo` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Description` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `POHeaderId` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `POLineId` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `POLineLocationId` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `RecievedTransactionId` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `GLCode` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsExpense` tinyint(1) NOT NULL,
  `ClientCompanyId` int DEFAULT NULL,
  `DeliveryDate` date DEFAULT NULL,
  `Container` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PurchaserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Currency` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField1` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField2` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField3` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField4` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField5` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField6` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField7` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField8` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField9` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField10` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SourceId` int DEFAULT NULL,
  `OrderDate` date DEFAULT NULL,
  `ExpenseTypeId` int DEFAULT NULL,
  `LastActionDate` datetime DEFAULT NULL,
  `LastActionBy` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DepartmentId` int DEFAULT NULL,
  `CustomerId` int DEFAULT NULL,
  `ProjectTypeId` int DEFAULT NULL,
  `SubProjectTypeId` int DEFAULT NULL,
  `PODetailId` int DEFAULT NULL,
  `ExternalId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Title` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SupplierType` int DEFAULT NULL,
  `PRUseDescription` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsRepairOrder` tinyint(1) DEFAULT NULL,
  `HaveParts` tinyint(1) DEFAULT NULL,
  `IsReturnToStock` tinyint(1) DEFAULT NULL,
  `IsCapitalProject` tinyint(1) DEFAULT NULL,
  `CapitalProjectNo` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `BudgetAvailableAfterPR` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CheckPerson` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DirectStockOrder` tinyint(1) DEFAULT NULL,
  `VendorTerm` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PRNumber` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `GRNUse` tinyint(1) DEFAULT NULL,
  `HTSCode` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SEApprovalNo` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `TaxCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `TaxCodeId` int DEFAULT NULL,
  `FreightCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FreightCodeId` int DEFAULT NULL,
  `AssetProjectId` int DEFAULT NULL,
  `ItemId` int DEFAULT NULL,
  `MatchedFlag` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_ClientCompanyId` (`ClientCompanyId`) USING BTREE,
  KEY `IX_ClientId` (`ClientId`) USING BTREE,
  KEY `IX_VendorId` (`VendorId`) USING BTREE,
  KEY `FK_PO_ExpenseType_idx` (`ExpenseTypeId`) USING BTREE,
  KEY `FK_PO_Department_Id_idx` (`DepartmentId`) USING BTREE,
  KEY `CustomerId` (`CustomerId`) USING BTREE,
  KEY `ProjectTypeId` (`ProjectTypeId`) USING BTREE,
  KEY `SubProjectTypeId` (`SubProjectTypeId`) USING BTREE,
  KEY `TaxCodeId` (`TaxCodeId`) USING BTREE,
  KEY `FK_PO_ibfk_10` (`PurchaserId`) USING BTREE,
  KEY `AssetProjectId` (`AssetProjectId`) USING BTREE,
  KEY `FK_PO_ibfk_5` (`ItemId`) USING BTREE,
  CONSTRAINT `PO_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PO_ibfk_10` FOREIGN KEY (`ItemId`) REFERENCES `Item` (`ItemId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PO_ibfk_11` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PO_ibfk_12` FOREIGN KEY (`AssetProjectId`) REFERENCES `Lookup` (`LookupId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PO_ibfk_2` FOREIGN KEY (`ClientCompanyId`) REFERENCES `ClientCompany` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PO_ibfk_3` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PO_ibfk_4` FOREIGN KEY (`ExpenseTypeId`) REFERENCES `ExpenseType` (`ExpenseId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PO_ibfk_5` FOREIGN KEY (`CustomerId`) REFERENCES `Customer` (`CustomerId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PO_ibfk_6` FOREIGN KEY (`PurchaserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PO_ibfk_7` FOREIGN KEY (`ProjectTypeId`) REFERENCES `ProjectType` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PO_ibfk_8` FOREIGN KEY (`SubProjectTypeId`) REFERENCES `SubProjectType` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PO_ibfk_9` FOREIGN KEY (`TaxCodeId`) REFERENCES `Tax` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=389677220 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`cloudxuser`@`%`*/ /*!50003 TRIGGER `PO_BEFORE_DELETE` BEFORE DELETE ON `PO` FOR EACH ROW BEGIN
  UPDATE `APSHTML`.`LineItemDetail`
  SET POId = NULL
  WHERE POId = OLD.Id;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `POAttachment`
--

DROP TABLE IF EXISTS `POAttachment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `POAttachment` (
  `POAttachmentId` int NOT NULL AUTO_INCREMENT,
  `POHeaderId` int NOT NULL,
  `FileName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `UniqueFileName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`POAttachmentId`),
  KEY `POHeaderId` (`POHeaderId`) USING BTREE,
  CONSTRAINT `POAttachment_ibfk_1` FOREIGN KEY (`POHeaderId`) REFERENCES `POHeader` (`POHeaderId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=147547 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `PODetail`
--

DROP TABLE IF EXISTS `PODetail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `PODetail` (
  `PODetailId` int NOT NULL AUTO_INCREMENT,
  `POHeaderId` int NOT NULL,
  `Description` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `OrderQty` double DEFAULT NULL,
  `RcvdQty` double DEFAULT NULL,
  `UnitCost` double DEFAULT NULL,
  `ExtCost` double DEFAULT NULL,
  `HeaderId` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `LineId` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `LineLocationId` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `RecievedTransactionId` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `GLCodeId` int DEFAULT NULL,
  `DeliveryDate` date DEFAULT NULL,
  `Container` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Currency` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `OrderDate` date DEFAULT NULL,
  `UnitOfPurchase` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UOMId` int DEFAULT NULL,
  `ItemId` int DEFAULT NULL,
  `DepartmentId` int DEFAULT NULL,
  `GRNUse` tinyint(1) DEFAULT '0',
  `HTSCode` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SEApprovalNo` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `TaxCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `TaxCodeId` int DEFAULT NULL,
  `WarehouseId` int DEFAULT NULL,
  `Discount` double DEFAULT NULL,
  `AdditionalDescription` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `NonStockItemNo` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ClassId` int DEFAULT NULL,
  `MassQty` decimal(18,6) DEFAULT NULL,
  `ConversionQty` decimal(18,2) DEFAULT NULL,
  `OldPOPrice` decimal(18,2) DEFAULT NULL,
  `POInternalNote` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsStockPO` tinyint(1) DEFAULT NULL,
  `UserField1` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField2` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField3` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField4` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField5` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField6` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField7` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField8` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField9` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`PODetailId`),
  KEY `POHeaderId` (`POHeaderId`) USING BTREE,
  KEY `GLCodeId` (`GLCodeId`) USING BTREE,
  KEY `FK_PODetail_ItemId` (`ItemId`) USING BTREE,
  KEY `DepartmentId` (`DepartmentId`) USING BTREE,
  KEY `TaxCodeId` (`TaxCodeId`) USING BTREE,
  KEY `FK_PODetail_ClassId` (`ClassId`) USING BTREE,
  KEY `FK_PODetail_WarehouseId` (`WarehouseId`) USING BTREE,
  KEY `FK_PODetail_ibfk_3` (`UOMId`) USING BTREE,
  CONSTRAINT `PODetail_ibfk_1` FOREIGN KEY (`POHeaderId`) REFERENCES `POHeader` (`POHeaderId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PODetail_ibfk_2` FOREIGN KEY (`GLCodeId`) REFERENCES `GLCode` (`GLCodeId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PODetail_ibfk_3` FOREIGN KEY (`UOMId`) REFERENCES `UOM` (`UOMId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PODetail_ibfk_4` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PODetail_ibfk_5` FOREIGN KEY (`TaxCodeId`) REFERENCES `Tax` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PODetail_ibfk_6` FOREIGN KEY (`ItemId`) REFERENCES `Item` (`ItemId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PODetail_ibfk_7` FOREIGN KEY (`WarehouseId`) REFERENCES `Warehouse` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=399411 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `POHeader`
--

DROP TABLE IF EXISTS `POHeader`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `POHeader` (
  `POHeaderId` int NOT NULL AUTO_INCREMENT,
  `ClientId` int NOT NULL,
  `PONumber` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorId` int DEFAULT NULL,
  `IsDeleted` tinyint(1) NOT NULL DEFAULT '0',
  `POStatus` int NOT NULL,
  `PaymentMethod` tinyint DEFAULT NULL,
  `PurchasedForUserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `EstDeliveryDate` datetime DEFAULT NULL,
  `EstOrderDate` datetime DEFAULT NULL,
  `OrderToBePlacedBy` tinyint DEFAULT NULL,
  `NeedFormalPO` tinyint(1) DEFAULT NULL,
  `RequiresAdvancePayment` tinyint(1) DEFAULT NULL,
  `InternalNote` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ProjectId` int DEFAULT NULL,
  `SubProjectId` int DEFAULT NULL,
  `VendorNote` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ShipToId` int DEFAULT NULL,
  `Currency` tinyint DEFAULT NULL,
  `ContractStart` date DEFAULT NULL,
  `ContractEnd` date DEFAULT NULL,
  `DepartmentId` int DEFAULT NULL,
  `OrderPlacedOn` date DEFAULT NULL,
  `OrderPlacedByUserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ApprovalDate` datetime DEFAULT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `IsLocked` tinyint(1) NOT NULL DEFAULT '0',
  `LockedAt` datetime DEFAULT NULL,
  `LockedById` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `POType` int DEFAULT NULL,
  `CustomerId` int DEFAULT NULL,
  `ShippingService` tinyint DEFAULT NULL,
  `CompanyId` int DEFAULT NULL,
  `ActualVendor` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CreditCard` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Title` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SupplierType` int DEFAULT NULL,
  `PRUseDescription` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsRepairOrder` tinyint(1) NOT NULL DEFAULT '0',
  `HaveParts` tinyint(1) DEFAULT '0',
  `IsReturnToStock` tinyint(1) DEFAULT NULL,
  `IsCapitalProject` tinyint(1) NOT NULL DEFAULT '0',
  `CapitalProjectNo` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `LineNo` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `BudgetAvailableAfterPR` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CheckPerson` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DirectStockOrder` tinyint(1) DEFAULT NULL,
  `VendorTerm` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ExternalPONumber` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Remark` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CreatedDate` datetime DEFAULT NULL,
  `ApproverId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `LastReissuedDate` datetime DEFAULT NULL,
  `IsStockedPO` tinyint(1) DEFAULT NULL,
  `DeliveryAddressId` int DEFAULT NULL,
  `POTypeChar` varchar(2) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FooterComments` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `HeaderComments` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ReplacesPO` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ChangeOrderNumber` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorLocationId` int DEFAULT NULL,
  `ShippingTermId` int DEFAULT NULL,
  `FreightCodeId` int DEFAULT NULL,
  `AuthorizationCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FOBPoint` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AcknowledgementRequired` tinyint(1) DEFAULT NULL,
  `BuyerId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Discount` double DEFAULT NULL,
  `LastSavedOn` datetime DEFAULT NULL,
  `WarehouseId` int DEFAULT NULL,
  `SafetyReview` tinyint(1) NOT NULL DEFAULT '0',
  `FreightRequired` tinyint(1) DEFAULT '0',
  `CustomerPONumber` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AlternativeStreet` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AlternativeCity` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AlternativeState` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AlternativeZipCode` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AddToExistingPO` tinyint(1) NOT NULL DEFAULT '0',
  `ExistingPONo` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AlternativeName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ProjectUsageId` int DEFAULT NULL,
  `AssetProjectId` int DEFAULT NULL,
  `BudgetedAssetId` int DEFAULT NULL,
  `ChangeOrder` tinyint(1) DEFAULT '0',
  `IsStockedSpecial` int DEFAULT NULL,
  `CreatorEmail` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorEmail` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField1` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField2` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField3` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField4` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField5` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField6` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField7` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField8` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField9` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PaymentTermId` int DEFAULT NULL,
  `TermAndConditionId` int DEFAULT NULL,
  PRIMARY KEY (`POHeaderId`),
  KEY `ClientId` (`ClientId`) USING BTREE,
  KEY `VendorId` (`VendorId`) USING BTREE,
  KEY `UserId` (`UserId`) USING BTREE,
  KEY `PurchasedForUserId` (`PurchasedForUserId`) USING BTREE,
  KEY `ProjectId` (`ProjectId`) USING BTREE,
  KEY `SubProjectId` (`SubProjectId`) USING BTREE,
  KEY `OrderPlacedByUserId` (`OrderPlacedByUserId`) USING BTREE,
  KEY `DepartmentId` (`DepartmentId`) USING BTREE,
  KEY `LockedById` (`LockedById`) USING BTREE,
  KEY `ShipToId` (`ShipToId`) USING BTREE,
  KEY `CustomerId` (`CustomerId`) USING BTREE,
  KEY `POHeader_ibfk_12` (`CompanyId`) USING BTREE,
  KEY `ApproverId` (`ApproverId`) USING BTREE,
  KEY `FK_POHeader_DeliveryAddressId` (`DeliveryAddressId`) USING BTREE,
  KEY `FK_POHeader_ibfk_14` (`VendorLocationId`) USING BTREE,
  KEY `FK_POHeader_ibfk_16` (`FreightCodeId`) USING BTREE,
  KEY `FK_POHeader_ibfk_15` (`ShippingTermId`) USING BTREE,
  KEY `FK_POHeader_ibfk_17` (`BuyerId`) USING BTREE,
  KEY `POHeader_ibfk_1` (`ProjectUsageId`) USING BTREE,
  KEY `POHeader_ibfk_2` (`AssetProjectId`) USING BTREE,
  KEY `POHeader_ibfk_3` (`BudgetedAssetId`) USING BTREE,
  KEY `POHeader_PaymentTerm_PaymentTermId` (`PaymentTermId`) USING BTREE,
  KEY `POHeader_TermAndCondition_TermAndConditionId` (`TermAndConditionId`) USING BTREE,
  CONSTRAINT `POHeader_ibfk_1` FOREIGN KEY (`DeliveryAddressId`) REFERENCES `Address` (`AddressId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `POHeader_ibfk_10` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `POHeader_ibfk_11` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `POHeader_ibfk_12` FOREIGN KEY (`PurchasedForUserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `POHeader_ibfk_13` FOREIGN KEY (`ProjectId`) REFERENCES `ProjectType` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `POHeader_ibfk_14` FOREIGN KEY (`ApproverId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `POHeader_ibfk_15` FOREIGN KEY (`SubProjectId`) REFERENCES `SubProjectType` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `POHeader_ibfk_16` FOREIGN KEY (`OrderPlacedByUserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `POHeader_ibfk_17` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `POHeader_ibfk_18` FOREIGN KEY (`LockedById`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `POHeader_ibfk_19` FOREIGN KEY (`ProjectUsageId`) REFERENCES `Lookup` (`LookupId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `POHeader_ibfk_2` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `POHeader_ibfk_20` FOREIGN KEY (`AssetProjectId`) REFERENCES `Lookup` (`LookupId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `POHeader_ibfk_21` FOREIGN KEY (`BudgetedAssetId`) REFERENCES `Lookup` (`LookupId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `POHeader_ibfk_22` FOREIGN KEY (`PaymentTermId`) REFERENCES `PaymentTerm` (`PaymentTermId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `POHeader_ibfk_23` FOREIGN KEY (`TermAndConditionId`) REFERENCES `TermAndCondition` (`TermAndConditionId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `POHeader_ibfk_3` FOREIGN KEY (`ShipToId`) REFERENCES `ClientLocation` (`ClientLocationId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `POHeader_ibfk_4` FOREIGN KEY (`CustomerId`) REFERENCES `Customer` (`CustomerId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `POHeader_ibfk_5` FOREIGN KEY (`CompanyId`) REFERENCES `ClientCompany` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `POHeader_ibfk_6` FOREIGN KEY (`VendorLocationId`) REFERENCES `VendorLocation` (`VendorLocationId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `POHeader_ibfk_7` FOREIGN KEY (`ShippingTermId`) REFERENCES `ShippingTerms` (`ShippingTermId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `POHeader_ibfk_8` FOREIGN KEY (`FreightCodeId`) REFERENCES `FreightCodes` (`FreightCodeId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `POHeader_ibfk_9` FOREIGN KEY (`BuyerId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=152230 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `POHeaderHistory`
--

DROP TABLE IF EXISTS `POHeaderHistory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `POHeaderHistory` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `POHeaderId` int DEFAULT NULL,
  `Actor` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Action` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ActionDate` datetime DEFAULT NULL,
  `PreviousData` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `NewData` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `Field` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `InitialStatus` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CurrentStatus` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ActorId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `POHeaderHistory_POHeader` (`POHeaderId`) USING BTREE,
  KEY `POHeaderHistory_User` (`ActorId`) USING BTREE,
  CONSTRAINT `POHeaderHistory_ibfk_1` FOREIGN KEY (`POHeaderId`) REFERENCES `POHeader` (`POHeaderId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `POHeaderHistory_ibfk_2` FOREIGN KEY (`ActorId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=1363577 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `POHeaderPONumber`
--

DROP TABLE IF EXISTS `POHeaderPONumber`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `POHeaderPONumber` (
  `POHeaderId` int NOT NULL,
  `PONumber` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ClientId` int NOT NULL,
  PRIMARY KEY (`POHeaderId`),
  UNIQUE KEY `PONumber` (`PONumber`,`ClientId`) USING BTREE,
  CONSTRAINT `POHeaderPONumber_ibfk_1` FOREIGN KEY (`POHeaderId`) REFERENCES `POHeader` (`POHeaderId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `POInvoice`
--

DROP TABLE IF EXISTS `POInvoice`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `POInvoice` (
  `POIDetailId` int NOT NULL AUTO_INCREMENT,
  `InvoiceId` int DEFAULT NULL,
  `PONumber` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ShippingDate` datetime DEFAULT NULL,
  `NetTermDate` datetime DEFAULT NULL,
  `NetTermDiscount` decimal(18,2) DEFAULT NULL,
  `Tax` decimal(18,2) DEFAULT NULL,
  `FreightCharges` decimal(18,2) DEFAULT NULL,
  PRIMARY KEY (`POIDetailId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `POToReload`
--

DROP TABLE IF EXISTS `POToReload`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `POToReload` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ClientId` int NOT NULL,
  `VendorId` int DEFAULT NULL,
  `InvoiceId` int DEFAULT NULL,
  `PONumber` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `State` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=23429 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `PRApprovalWorkflow`
--

DROP TABLE IF EXISTS `PRApprovalWorkflow`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `PRApprovalWorkflow` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `CanAccess` int NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `UserId` (`UserId`) USING BTREE,
  CONSTRAINT `PRApprovalWorkflow_ibfk_1` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=577 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `PRApprovalWorkflowDetail`
--

DROP TABLE IF EXISTS `PRApprovalWorkflowDetail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `PRApprovalWorkflowDetail` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ManagerId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `PRApprovalWorkflowId` int NOT NULL,
  `MaximumAmount` decimal(18,2) NOT NULL,
  `DepartmentId` int DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `ManagerId` (`ManagerId`) USING BTREE,
  KEY `PRApprovalWorkflowId` (`PRApprovalWorkflowId`) USING BTREE,
  KEY `DepartmentId` (`DepartmentId`) USING BTREE,
  CONSTRAINT `PRApprovalWorkflowDetail_ibfk_1` FOREIGN KEY (`ManagerId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PRApprovalWorkflowDetail_ibfk_2` FOREIGN KEY (`PRApprovalWorkflowId`) REFERENCES `PRApprovalWorkflow` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PRApprovalWorkflowDetail_ibfk_3` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=2776 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `PRClass`
--

DROP TABLE IF EXISTS `PRClass`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `PRClass` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ClientId` int NOT NULL,
  `Code` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_PRClass_ClientId` (`ClientId`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=132 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `PausedInvoice`
--

DROP TABLE IF EXISTS `PausedInvoice`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `PausedInvoice` (
  `InvoiceId` int NOT NULL,
  `PauseBy` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PausedDate` datetime NOT NULL,
  `Comment` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  PRIMARY KEY (`InvoiceId`),
  KEY `IX_InvoiceId` (`InvoiceId`) USING BTREE,
  CONSTRAINT `PausedInvoice_ibfk_1` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `PaymentApprovalSteps`
--

DROP TABLE IF EXISTS `PaymentApprovalSteps`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `PaymentApprovalSteps` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ClientId` int NOT NULL,
  `MinAmount` decimal(18,2) NOT NULL DEFAULT '0.00',
  `MaxAmount` decimal(18,2) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_PaymentApprovalSteps_ClientId` (`ClientId`) USING BTREE,
  CONSTRAINT `PaymentApprovalSteps_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `PaymentApprovalUsers`
--

DROP TABLE IF EXISTS `PaymentApprovalUsers`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `PaymentApprovalUsers` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `PaymentApprovalStepId` int NOT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ManagerId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_PaymentApprovalUsers_PaymentApprovalStepId` (`PaymentApprovalStepId`) USING BTREE,
  KEY `FK_PaymentApprovalUsers_UserId` (`UserId`) USING BTREE,
  KEY `FK_PaymentApprovalUsers_ManagerId` (`ManagerId`) USING BTREE,
  CONSTRAINT `PaymentApprovalUsers_ibfk_1` FOREIGN KEY (`ManagerId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PaymentApprovalUsers_ibfk_2` FOREIGN KEY (`PaymentApprovalStepId`) REFERENCES `PaymentApprovalSteps` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PaymentApprovalUsers_ibfk_3` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=94 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `PaymentDateRangeForReport`
--

DROP TABLE IF EXISTS `PaymentDateRangeForReport`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `PaymentDateRangeForReport` (
  `Id` int NOT NULL,
  `DateRange` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `PaymentSecondApprover`
--

DROP TABLE IF EXISTS `PaymentSecondApprover`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `PaymentSecondApprover` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `SecondApproverId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `VendorId` int DEFAULT NULL,
  `CompanyId` int DEFAULT NULL,
  `ThirdApproverId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_PaymentSecondApprover_FirstApprover` (`UserId`) USING BTREE,
  KEY `FK_PaymentSecondApprover_SecondApprover` (`SecondApproverId`) USING BTREE,
  KEY `FK_PaymentSecondApprover_ThirdApproverId` (`ThirdApproverId`) USING BTREE,
  CONSTRAINT `PaymentSecondApprover_ibfk_1` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PaymentSecondApprover_ibfk_2` FOREIGN KEY (`SecondApproverId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PaymentSecondApprover_ibfk_3` FOREIGN KEY (`ThirdApproverId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=203 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `PaymentStatus`
--

DROP TABLE IF EXISTS `PaymentStatus`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `PaymentStatus` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `InvoiceId` int NOT NULL,
  `TransactionTypeId` int NOT NULL,
  `SupplierNo` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `GrossAmount` double NOT NULL,
  `CardNumber` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ReceivedDate` date NOT NULL,
  `InvoiceNo` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `TransactionIdentifier` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `TransactionTypeDescription` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CustomerLocation` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorLocation` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PassedFirstApproval` tinyint(1) DEFAULT NULL,
  `ApprovedInCPay` tinyint(1) DEFAULT NULL,
  `DiscountAmount` double DEFAULT NULL,
  `DiscountDate` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_InvoiceId` (`InvoiceId`) USING BTREE,
  KEY `IX_TransactionTypeId` (`TransactionTypeId`) USING BTREE,
  KEY `IDX_PaymentStatus_ReceivedDate` (`ReceivedDate`) USING BTREE,
  CONSTRAINT `PaymentStatus_ibfk_1` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `PaymentStatus_ibfk_2` FOREIGN KEY (`TransactionTypeId`) REFERENCES `TransactionType` (`Id`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=1833468 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `PaymentStatusRecovery`
--

DROP TABLE IF EXISTS `PaymentStatusRecovery`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `PaymentStatusRecovery` (
  `Id` int DEFAULT NULL,
  `InvoiceId` int DEFAULT NULL,
  `TransactionTypeId` int DEFAULT NULL,
  `SupplierNo` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `GrossAmount` double DEFAULT NULL,
  `CardNumber` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ReceivedDate` date DEFAULT NULL,
  `InvoiceNo` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `TransactionIdentifier` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `TransactionTypeDescription` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CustomerLocation` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorLocation` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PassedFirstApproval` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ApprovedInCPay` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DiscountAmount` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DiscountDate` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `PaymentTerm`
--

DROP TABLE IF EXISTS `PaymentTerm`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `PaymentTerm` (
  `PaymentTermId` int NOT NULL AUTO_INCREMENT,
  `Code` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Description` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ClientId` int NOT NULL,
  `IsActive` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`PaymentTermId`),
  KEY `FK_PaymentTerm_ibfk_1` (`ClientId`) USING BTREE,
  CONSTRAINT `PaymentTerm_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `PendingApprovalHistory`
--

DROP TABLE IF EXISTS `PendingApprovalHistory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `PendingApprovalHistory` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `InvoiceId` int NOT NULL,
  `ApproverId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `GLCodeId` int NOT NULL,
  `AmountAppoved` decimal(18,4) NOT NULL,
  `CustomerId` int DEFAULT NULL,
  `Recoverabletax` int DEFAULT NULL,
  `SpecialNote` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `GLCodeType` smallint NOT NULL,
  `SiteId` int DEFAULT NULL,
  `CategoryId` int DEFAULT NULL,
  `DepartmentId` int DEFAULT NULL,
  `TaxCodeId` int DEFAULT NULL,
  `TaxableAmount` decimal(18,4) DEFAULT NULL,
  `TaxAmount` decimal(18,4) DEFAULT NULL,
  `RecorableTaxAmount` decimal(18,4) DEFAULT NULL,
  `ProjectId` int DEFAULT NULL,
  `SubProjectId` int DEFAULT NULL,
  `CompanyCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ItemId` int DEFAULT NULL,
  `AccountingVariable1` int DEFAULT NULL,
  `AccountingVariable2` int DEFAULT NULL,
  `AccountingVariable3` int DEFAULT NULL,
  `AccountingVariable4` int DEFAULT NULL,
  `VendorId` int DEFAULT NULL,
  `OrgId` int DEFAULT NULL,
  `AmountInPercent` decimal(18,2) DEFAULT NULL,
  `IsDistributedLine` tinyint(1) DEFAULT NULL,
  `Category1` int DEFAULT NULL,
  `Category2` int DEFAULT NULL,
  `SubCategory1` int DEFAULT NULL,
  `SubCategory2` int DEFAULT NULL,
  `ImportDoc` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ExternalRef` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ServiceDateGl` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Quantity` decimal(18,2) DEFAULT NULL,
  `UserField1` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField2` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField3` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField4` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField5` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField6` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField7` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField8` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField9` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `IX_CategoryId` (`CategoryId`) USING BTREE,
  KEY `IX_CustomerId` (`CustomerId`) USING BTREE,
  KEY `IX_DepartmentId` (`DepartmentId`) USING BTREE,
  KEY `IX_GLCodeId` (`GLCodeId`) USING BTREE,
  KEY `IX_ProjectId` (`ProjectId`) USING BTREE,
  KEY `IX_SubProjectId` (`SubProjectId`) USING BTREE,
  KEY `IX_TaxCodeId` (`TaxCodeId`) USING BTREE,
  KEY `ItemId` (`ItemId`) USING BTREE,
  KEY `FK_PendingApprovalHistory_AccVariable1` (`AccountingVariable1`) USING BTREE,
  KEY `FK_PendingApprovalHistory_AccVariable2` (`AccountingVariable2`) USING BTREE,
  KEY `FK_PendingApprovalHistory_AccVariable3` (`AccountingVariable3`) USING BTREE,
  KEY `FK_PendingApprovalHistory_AccVariable4` (`AccountingVariable4`) USING BTREE,
  KEY `VendorId` (`VendorId`) USING BTREE,
  KEY `OrgId` (`OrgId`) USING BTREE,
  KEY `FK_PendingApprovalHistory_Category1` (`Category1`) USING BTREE,
  KEY `FK_PendingApprovalHistory_Category2` (`Category2`) USING BTREE,
  KEY `FK_PendingApprovalHistory_SubCategory1` (`SubCategory1`) USING BTREE,
  KEY `FK_PendingApprovalHistory_SubCategory2` (`SubCategory2`) USING BTREE,
  KEY `IX_InvoiceId` (`InvoiceId`) USING BTREE,
  CONSTRAINT `PendingApprovalHistory_ibfk_1` FOREIGN KEY (`AccountingVariable1`) REFERENCES `AccountingVariable` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PendingApprovalHistory_ibfk_10` FOREIGN KEY (`GLCodeId`) REFERENCES `GLCode` (`GLCodeId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `PendingApprovalHistory_ibfk_11` FOREIGN KEY (`ItemId`) REFERENCES `Item` (`ItemId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PendingApprovalHistory_ibfk_12` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PendingApprovalHistory_ibfk_13` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PendingApprovalHistory_ibfk_14` FOREIGN KEY (`ProjectId`) REFERENCES `ProjectType` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PendingApprovalHistory_ibfk_15` FOREIGN KEY (`SubCategory1`) REFERENCES `SubCategrory` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PendingApprovalHistory_ibfk_16` FOREIGN KEY (`SubCategory2`) REFERENCES `SubCategrory` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PendingApprovalHistory_ibfk_17` FOREIGN KEY (`SubProjectId`) REFERENCES `SubProjectType` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PendingApprovalHistory_ibfk_18` FOREIGN KEY (`TaxCodeId`) REFERENCES `Tax` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PendingApprovalHistory_ibfk_19` FOREIGN KEY (`OrgId`) REFERENCES `OrgData` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PendingApprovalHistory_ibfk_2` FOREIGN KEY (`AccountingVariable2`) REFERENCES `AccountingVariable` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PendingApprovalHistory_ibfk_3` FOREIGN KEY (`AccountingVariable3`) REFERENCES `AccountingVariable` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PendingApprovalHistory_ibfk_4` FOREIGN KEY (`AccountingVariable4`) REFERENCES `AccountingVariable` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PendingApprovalHistory_ibfk_5` FOREIGN KEY (`Category1`) REFERENCES `Category` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PendingApprovalHistory_ibfk_6` FOREIGN KEY (`Category2`) REFERENCES `Category` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PendingApprovalHistory_ibfk_7` FOREIGN KEY (`CategoryId`) REFERENCES `Category` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PendingApprovalHistory_ibfk_8` FOREIGN KEY (`CustomerId`) REFERENCES `Customer` (`CustomerId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `PendingApprovalHistory_ibfk_9` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=989692 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Performance`
--

DROP TABLE IF EXISTS `Performance`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Performance` (
  `PerformanceId` int NOT NULL AUTO_INCREMENT,
  `ClientId` int NOT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `InvoiceId` int NOT NULL,
  `ActionDate` date NOT NULL,
  `ActionType` int NOT NULL,
  PRIMARY KEY (`PerformanceId`),
  KEY `IX_ActionDate` (`ActionDate`) USING BTREE,
  KEY `ClientId` (`ClientId`) USING BTREE,
  KEY `UserId` (`UserId`) USING BTREE,
  KEY `InvoiceId` (`InvoiceId`) USING BTREE,
  CONSTRAINT `Performance_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Performance_ibfk_2` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Performance_ibfk_3` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=12610230 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `PlaceHolder`
--

DROP TABLE IF EXISTS `PlaceHolder`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `PlaceHolder` (
  `InvoiceID` int NOT NULL,
  PRIMARY KEY (`InvoiceID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `PlantToProfitCenter`
--

DROP TABLE IF EXISTS `PlantToProfitCenter`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `PlantToProfitCenter` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Location` int DEFAULT NULL,
  `ProfitCenter` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CompCode` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ProjectType`
--

DROP TABLE IF EXISTS `ProjectType`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ProjectType` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ProjectName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Description` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsActive` tinyint(1) DEFAULT NULL,
  `ClientId` int NOT NULL DEFAULT '22',
  `DepartmentId` int DEFAULT NULL,
  `CustomerId` int DEFAULT NULL,
  `ClientCompanyId` int DEFAULT NULL,
  `ParentProjectTypeId` int DEFAULT NULL,
  `ExternalId` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `ClientId` (`ClientId`) USING BTREE,
  KEY `DepartmentId` (`DepartmentId`) USING BTREE,
  KEY `CustomerId` (`CustomerId`) USING BTREE,
  KEY `ClientCompanyId` (`ClientCompanyId`) USING BTREE,
  KEY `ParentProjectTypeId` (`ParentProjectTypeId`) USING BTREE,
  CONSTRAINT `ProjectType_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ProjectType_ibfk_2` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ProjectType_ibfk_3` FOREIGN KEY (`CustomerId`) REFERENCES `Customer` (`CustomerId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ProjectType_ibfk_4` FOREIGN KEY (`ClientCompanyId`) REFERENCES `ClientCompany` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `ProjectType_ibfk_5` FOREIGN KEY (`ParentProjectTypeId`) REFERENCES `ProjectType` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=163998 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ProjectTypeGLCode`
--

DROP TABLE IF EXISTS `ProjectTypeGLCode`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ProjectTypeGLCode` (
  `ProjectTypeId` int NOT NULL,
  `GLCodeId` int NOT NULL,
  PRIMARY KEY (`ProjectTypeId`,`GLCodeId`),
  KEY `ProjectTypeId` (`ProjectTypeId`) USING BTREE,
  KEY `GLCodeId` (`GLCodeId`) USING BTREE,
  CONSTRAINT `ProjectTypeGLCode_ibfk_1` FOREIGN KEY (`GLCodeId`) REFERENCES `GLCode` (`GLCodeId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `ProjectTypeGLCode_ibfk_2` FOREIGN KEY (`ProjectTypeId`) REFERENCES `ProjectType` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `QCGuidelines`
--

DROP TABLE IF EXISTS `QCGuidelines`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `QCGuidelines` (
  `QCGuidelineId` int NOT NULL AUTO_INCREMENT,
  `ClientId` int NOT NULL,
  `InvoiceType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Description` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`QCGuidelineId`),
  KEY `FK_QCGuidelines_ClientId` (`ClientId`) USING BTREE,
  CONSTRAINT `QCGuidelines_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=63 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `QueryLog`
--

DROP TABLE IF EXISTS `QueryLog`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `QueryLog` (
  `id` int NOT NULL AUTO_INCREMENT,
  `query` varchar(5000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `user` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `time` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `foreign_key` int DEFAULT NULL,
  `executed` tinyint(1) DEFAULT NULL,
  `execution_date` datetime DEFAULT NULL,
  `execution_result` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `invoiceid` int DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user` (`user`,`foreign_key`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=3080 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `RO`
--

DROP TABLE IF EXISTS `RO`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `RO` (
  `ROId` int NOT NULL AUTO_INCREMENT,
  `ExternalROId` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `RONumber` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `VendorId` int NOT NULL,
  `Amount` double(18,8) NOT NULL,
  `PropertyId` int NOT NULL,
  `ServiceDate` date NOT NULL,
  `IsDaat` tinyint(1) NOT NULL,
  `ClientId` int NOT NULL,
  PRIMARY KEY (`ROId`),
  KEY `VendorId` (`VendorId`) USING BTREE,
  KEY `RO_ibfk_2` (`PropertyId`) USING BTREE,
  KEY `ClientId` (`ClientId`) USING BTREE,
  CONSTRAINT `RO_ibfk_1` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `RO_ibfk_2` FOREIGN KEY (`PropertyId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `RO_ibfk_3` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=47824 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ReassignUser`
--

DROP TABLE IF EXISTS `ReassignUser`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ReassignUser` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `SourceUserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TargetUserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `DateFrom` datetime DEFAULT NULL,
  `DateTo` datetime DEFAULT NULL,
  `IsPermanent` tinyint(1) DEFAULT NULL,
  `status` tinyint(1) DEFAULT NULL,
  `WorkflowType` tinyint NOT NULL DEFAULT '0',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=113 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Report`
--

DROP TABLE IF EXISTS `Report`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Report` (
  `ReportKey` varchar(20) COLLATE utf8mb4_general_ci NOT NULL,
  `ReportName` varchar(50) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ReportGrouping` varchar(50) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `StoredProc` varchar(100) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SortOrderGrouping` int NOT NULL DEFAULT '0',
  `SortOrderName` int NOT NULL DEFAULT '0',
  `isActive` bit(1) NOT NULL DEFAULT (0),
  `isInternal` bit(1) DEFAULT NULL,
  PRIMARY KEY (`ReportKey`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ReportClient`
--

DROP TABLE IF EXISTS `ReportClient`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ReportClient` (
  `ReportKey` varchar(20) COLLATE utf8mb4_general_ci NOT NULL,
  `ClientId` int NOT NULL,
  `isActive` bit(1) NOT NULL DEFAULT (0),
  PRIMARY KEY (`ReportKey`,`ClientId`),
  KEY `ReportClient_ClientId` (`ClientId`),
  CONSTRAINT `ReportClient_ClientId` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`),
  CONSTRAINT `ReportClient_Report` FOREIGN KEY (`ReportKey`) REFERENCES `Report` (`ReportKey`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ReportClientRestrictions`
--

DROP TABLE IF EXISTS `ReportClientRestrictions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ReportClientRestrictions` (
  `ReportKey` varchar(20) COLLATE utf8mb4_general_ci NOT NULL,
  `ClientId` int NOT NULL,
  `RoleId` int NOT NULL,
  PRIMARY KEY (`ReportKey`,`ClientId`,`RoleId`),
  KEY `ReportClientRestrictions_ClientId` (`ClientId`),
  KEY `ReportClientRestrictions_RoleId` (`RoleId`),
  CONSTRAINT `ReportClientRestrictions_ClientId` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`),
  CONSTRAINT `ReportClientRestrictions_Report` FOREIGN KEY (`ReportKey`) REFERENCES `Report` (`ReportKey`),
  CONSTRAINT `ReportClientRestrictions_RoleId` FOREIGN KEY (`RoleId`) REFERENCES `ClientRoles` (`RoleId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ReportClientSchedule`
--

DROP TABLE IF EXISTS `ReportClientSchedule`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ReportClientSchedule` (
  `ReportScheduleId` int NOT NULL AUTO_INCREMENT,
  `ReportKey` varchar(20) COLLATE utf8mb4_general_ci NOT NULL,
  `ClientId` int NOT NULL,
  `UserId` char(36) COLLATE utf8mb4_general_ci NOT NULL,
  `ReportName` varchar(50) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `isScheduled` bit(1) NOT NULL,
  `isActive` bit(1) NOT NULL DEFAULT (0),
  `MailSubject` varchar(100) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `MailBody` mediumtext COLLATE utf8mb4_general_ci,
  `isHideRecipients` bit(1) DEFAULT NULL,
  `Frequency` varchar(10) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FrequencyWeekly` int DEFAULT NULL,
  `TimeOfTheDay` int DEFAULT NULL,
  `ScheduleStartDate` varchar(10) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `OutputFormat` int DEFAULT NULL,
  PRIMARY KEY (`ReportScheduleId`),
  KEY `ReportClientSchedule_User` (`UserId`),
  KEY `ReportClientSchedule_ReportClient` (`ReportKey`,`ClientId`),
  CONSTRAINT `ReportClientSchedule_ReportClient` FOREIGN KEY (`ReportKey`, `ClientId`) REFERENCES `ReportClient` (`ReportKey`, `ClientId`),
  CONSTRAINT `ReportClientSchedule_User` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ReportClientScheduleFieldOutput`
--

DROP TABLE IF EXISTS `ReportClientScheduleFieldOutput`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ReportClientScheduleFieldOutput` (
  `ReportScheduleId` int NOT NULL,
  `ReportKey` varchar(20) COLLATE utf8mb4_general_ci NOT NULL,
  `Field` varchar(50) COLLATE utf8mb4_general_ci NOT NULL,
  `Label` varchar(50) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FieldOrder` int DEFAULT NULL,
  `SortOrder` int DEFAULT NULL,
  PRIMARY KEY (`ReportScheduleId`,`ReportKey`,`Field`),
  KEY `ReportClientScheduleFieldOutput_ReportKeyField` (`ReportKey`,`Field`),
  CONSTRAINT `ReportClientScheduleFieldOutput_ReportKeyField` FOREIGN KEY (`ReportKey`, `Field`) REFERENCES `ReportFields` (`ReportKey`, `Field`),
  CONSTRAINT `ReportClientScheduleFieldOutput_ReportScheduleId` FOREIGN KEY (`ReportScheduleId`) REFERENCES `ReportClientSchedule` (`ReportScheduleId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ReportClientScheduleFieldValues`
--

DROP TABLE IF EXISTS `ReportClientScheduleFieldValues`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ReportClientScheduleFieldValues` (
  `ReportScheduleId` int NOT NULL,
  `ReportKey` varchar(20) COLLATE utf8mb4_general_ci NOT NULL,
  `Field` varchar(20) COLLATE utf8mb4_general_ci NOT NULL,
  `Value` mediumtext COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`ReportScheduleId`,`ReportKey`,`Field`),
  KEY `ReportClientScheduleFieldValues_ReportKeyField` (`ReportKey`,`Field`),
  CONSTRAINT `ReportClientScheduleFieldValues_ReportKeyField` FOREIGN KEY (`ReportKey`, `Field`) REFERENCES `ReportFields` (`ReportKey`, `Field`),
  CONSTRAINT `ReportClientScheduleFieldValues_ReportScheduleId` FOREIGN KEY (`ReportScheduleId`) REFERENCES `ReportClientSchedule` (`ReportScheduleId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ReportClientScheduleRecipients`
--

DROP TABLE IF EXISTS `ReportClientScheduleRecipients`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ReportClientScheduleRecipients` (
  `ReportScheduleId` int NOT NULL,
  `UserId` char(36) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `RoleId` int DEFAULT NULL,
  KEY `ReportClientScheduleRecipients_ReportScheduleId` (`ReportScheduleId`),
  KEY `ReportClientScheduleRecipients_UserId` (`UserId`),
  KEY `ReportClientScheduleRecipients_RoleId` (`RoleId`),
  CONSTRAINT `ReportClientScheduleRecipients_ReportScheduleId` FOREIGN KEY (`ReportScheduleId`) REFERENCES `ReportClientSchedule` (`ReportScheduleId`),
  CONSTRAINT `ReportClientScheduleRecipients_RoleId` FOREIGN KEY (`RoleId`) REFERENCES `ClientRoles` (`RoleId`),
  CONSTRAINT `ReportClientScheduleRecipients_UserId` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ReportFieldOutput`
--

DROP TABLE IF EXISTS `ReportFieldOutput`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ReportFieldOutput` (
  `ReportKey` varchar(20) COLLATE utf8mb4_general_ci NOT NULL,
  `Field` varchar(50) COLLATE utf8mb4_general_ci NOT NULL,
  `Label` varchar(50) COLLATE utf8mb4_general_ci NOT NULL,
  `Type` varchar(20) COLLATE utf8mb4_general_ci NOT NULL,
  `Width` int NOT NULL,
  `FieldOrder` int NOT NULL,
  `SortOrder` int DEFAULT NULL,
  `LinkPage` varchar(50) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `LinkPageValue` varchar(50) COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`ReportKey`,`Field`),
  CONSTRAINT `ReportFieldOutput_ReportKey` FOREIGN KEY (`ReportKey`) REFERENCES `Report` (`ReportKey`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ReportFields`
--

DROP TABLE IF EXISTS `ReportFields`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ReportFields` (
  `ReportKey` varchar(20) COLLATE utf8mb4_general_ci NOT NULL,
  `Field` varchar(20) COLLATE utf8mb4_general_ci NOT NULL,
  `Label` varchar(50) COLLATE utf8mb4_general_ci NOT NULL,
  `DataType` varchar(20) COLLATE utf8mb4_general_ci NOT NULL,
  `FieldOrder` int NOT NULL,
  `DependencyField` varchar(20) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ShowOn` tinyint NOT NULL,
  PRIMARY KEY (`ReportKey`,`Field`,`ShowOn`),
  CONSTRAINT `ReportFields_ReportKey` FOREIGN KEY (`ReportKey`) REFERENCES `Report` (`ReportKey`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ReportOutPut`
--

DROP TABLE IF EXISTS `ReportOutPut`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ReportOutPut` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `OutFileName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `DateCreated` datetime NOT NULL,
  `ClientId` int DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=142 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ReportRun`
--

DROP TABLE IF EXISTS `ReportRun`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ReportRun` (
  `ReportRunId` int NOT NULL AUTO_INCREMENT,
  `ReportKey` varchar(20) COLLATE utf8mb4_general_ci NOT NULL,
  `ClientId` int NOT NULL,
  `RunDateTime` datetime NOT NULL DEFAULT (utc_timestamp()),
  `isScheduled` bit(1) NOT NULL,
  `Criteria` mediumtext COLLATE utf8mb4_general_ci,
  `FieldOutput` mediumtext COLLATE utf8mb4_general_ci,
  `TotalRecords` int NOT NULL,
  `RunSeconds` int NOT NULL,
  PRIMARY KEY (`ReportRunId`),
  KEY `ReportRun_ReportKey` (`ReportKey`),
  KEY `ReportRun_ClientId` (`ClientId`),
  CONSTRAINT `ReportRun_ClientId` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`),
  CONSTRAINT `ReportRun_ReportKey` FOREIGN KEY (`ReportKey`) REFERENCES `Report` (`ReportKey`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ReportRunRecipients`
--

DROP TABLE IF EXISTS `ReportRunRecipients`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ReportRunRecipients` (
  `ReportRunId` int DEFAULT NULL,
  `UserID` char(36) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Email` varchar(100) COLLATE utf8mb4_general_ci DEFAULT NULL,
  KEY `ReportRunRecipients_ReportRunId` (`ReportRunId`),
  KEY `ReportRunRecipients_UserId` (`UserID`),
  CONSTRAINT `ReportRunRecipients_ReportRunId` FOREIGN KEY (`ReportRunId`) REFERENCES `ReportRun` (`ReportRunId`),
  CONSTRAINT `ReportRunRecipients_UserId` FOREIGN KEY (`UserID`) REFERENCES `User` (`UserId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Reports`
--

DROP TABLE IF EXISTS `Reports`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Reports` (
  `ReportID` int NOT NULL AUTO_INCREMENT,
  `ReportName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ReportQuery` varchar(750) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ClientID` int NOT NULL,
  PRIMARY KEY (`ReportID`)
) ENGINE=InnoDB AUTO_INCREMENT=152 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `RobLumb`
--

DROP TABLE IF EXISTS `RobLumb`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `RobLumb` (
  `GLCode` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `GLDesc` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `GLID` int DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Role`
--

DROP TABLE IF EXISTS `Role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Role` (
  `RoleId` int NOT NULL,
  `RoleName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `IsActive` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`RoleId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `RunActionConsole`
--

DROP TABLE IF EXISTS `RunActionConsole`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `RunActionConsole` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ExecuitableFile` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Status` int DEFAULT NULL,
  `RunTime` datetime DEFAULT NULL,
  `ClientId` int DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `RunAction_Client` (`ClientId`) USING BTREE,
  CONSTRAINT `RunActionConsole_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `SRApprovalWorkflow`
--

DROP TABLE IF EXISTS `SRApprovalWorkflow`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `SRApprovalWorkflow` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `CanAccess` int NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `UserId` (`UserId`) USING BTREE,
  CONSTRAINT `SRApprovalWorkflow_ibfk_1` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `SRApprovalWorkflowDetail`
--

DROP TABLE IF EXISTS `SRApprovalWorkflowDetail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `SRApprovalWorkflowDetail` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ManagerId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `SRApprovalWorkflowId` int NOT NULL,
  `MaximumAmount` decimal(18,2) NOT NULL,
  `DepartmentId` int DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `ManagerId` (`ManagerId`) USING BTREE,
  KEY `SRApprovalWorkflowId` (`SRApprovalWorkflowId`) USING BTREE,
  KEY `DepartmentId` (`DepartmentId`) USING BTREE,
  CONSTRAINT `SRApprovalWorkflowDetail_ibfk_1` FOREIGN KEY (`ManagerId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `SRApprovalWorkflowDetail_ibfk_2` FOREIGN KEY (`SRApprovalWorkflowId`) REFERENCES `SRApprovalWorkflow` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `SRApprovalWorkflowDetail_ibfk_3` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `SRAttachment`
--

DROP TABLE IF EXISTS `SRAttachment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `SRAttachment` (
  `SRAttachmentId` int NOT NULL AUTO_INCREMENT,
  `StockRequestId` int NOT NULL,
  `FileName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `UniqueFileName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`SRAttachmentId`),
  KEY `StockRequestId` (`StockRequestId`) USING BTREE,
  CONSTRAINT `SRAttachment_ibfk_1` FOREIGN KEY (`StockRequestId`) REFERENCES `StockRequest` (`StockRequestId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=747 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `SRHistory`
--

DROP TABLE IF EXISTS `SRHistory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `SRHistory` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `StockRequestID` int NOT NULL,
  `Actor` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Action` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ActionDate` datetime DEFAULT NULL,
  `PreviousData` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `NewData` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `Field` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `InitialStatus` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CurrentStatus` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ActorId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `OldID` int DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_ActorId` (`ActorId`) USING BTREE,
  KEY `FK_SRHistory_StockRequest_StockRequestId` (`StockRequestID`) USING BTREE,
  CONSTRAINT `SRHistory_ibfk_1` FOREIGN KEY (`StockRequestID`) REFERENCES `StockRequest` (`StockRequestId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `SRHistory_ibfk_2` FOREIGN KEY (`ActorId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=14304 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `SalesforceAccountingVariable`
--

DROP TABLE IF EXISTS `SalesforceAccountingVariable`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `SalesforceAccountingVariable` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `SalesforceId` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Status` tinyint(1) DEFAULT NULL,
  `Type` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsVendorAccount` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `SalseforceMapField`
--

DROP TABLE IF EXISTS `SalseforceMapField`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `SalseforceMapField` (
  `SalseforceMapFieldID` int NOT NULL AUTO_INCREMENT,
  `SalseforceMapTableID` int NOT NULL,
  `APSmartColumnName` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `SalesForceAPIFieldName` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`SalseforceMapFieldID`),
  KEY `IX_SalseforceMapTableID` (`SalseforceMapTableID`) USING BTREE,
  CONSTRAINT `SalseforceMapField_ibfk_1` FOREIGN KEY (`SalseforceMapTableID`) REFERENCES `SalseforceMapTable` (`SalseforceMapTableID`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `SalseforceMapTable`
--

DROP TABLE IF EXISTS `SalseforceMapTable`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `SalseforceMapTable` (
  `SalseforceMapTableID` int NOT NULL AUTO_INCREMENT,
  `APSmartTableName` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `SalesForceAPICustomObjectName` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`SalseforceMapTableID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `SavedReportFilter`
--

DROP TABLE IF EXISTS `SavedReportFilter`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `SavedReportFilter` (
  `SavedReportFilterId` int NOT NULL AUTO_INCREMENT,
  `Name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `Task` tinyint unsigned NOT NULL,
  `FilterQueryString` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`SavedReportFilterId`)
) ENGINE=InnoDB AUTO_INCREMENT=216 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ShippingTerms`
--

DROP TABLE IF EXISTS `ShippingTerms`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ShippingTerms` (
  `ShippingTermId` int NOT NULL AUTO_INCREMENT,
  `Code` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Description` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ClientId` int NOT NULL,
  `IsActive` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`ShippingTermId`),
  KEY `FK_ShippingTerms_ibfk_1` (`ClientId`) USING BTREE,
  CONSTRAINT `ShippingTerms_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=88 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `SiteName`
--

DROP TABLE IF EXISTS `SiteName`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `SiteName` (
  `Id` int NOT NULL,
  `VendorId` int DEFAULT NULL,
  `OrgId` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SiteName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `InternalId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SourceSiteId` int DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_VendorId` (`VendorId`) USING BTREE,
  CONSTRAINT `SiteName_ibfk_1` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `SiteNameGLCode`
--

DROP TABLE IF EXISTS `SiteNameGLCode`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `SiteNameGLCode` (
  `GLCodeId` int NOT NULL,
  `SiteId` int NOT NULL,
  PRIMARY KEY (`GLCodeId`,`SiteId`),
  KEY `IX_GLCodeId` (`GLCodeId`) USING BTREE,
  KEY `IX_SiteId` (`SiteId`) USING BTREE,
  CONSTRAINT `SiteNameGLCode_ibfk_1` FOREIGN KEY (`GLCodeId`) REFERENCES `GLCode` (`GLCodeId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `SiteNameGLCode_ibfk_2` FOREIGN KEY (`SiteId`) REFERENCES `SiteName` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `SsoTest`
--

DROP TABLE IF EXISTS `SsoTest`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `SsoTest` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `SamlText` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=92283 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `State`
--

DROP TABLE IF EXISTS `State`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `State` (
  `StateId` int NOT NULL AUTO_INCREMENT,
  `StateName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `StateNameShort` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`StateId`)
) ENGINE=InnoDB AUTO_INCREMENT=360 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `StockRequest`
--

DROP TABLE IF EXISTS `StockRequest`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `StockRequest` (
  `StockRequestId` int NOT NULL AUTO_INCREMENT,
  `ClientId` int NOT NULL,
  `ItemId` int DEFAULT NULL,
  `VendorId` int DEFAULT NULL,
  `CompanyId` int DEFAULT NULL,
  `SRNumber` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorItemDescription` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `SRStatus` int DEFAULT NULL,
  `MinMaxRevision` tinyint(1) NOT NULL DEFAULT '0',
  `DescriptionRevision` tinyint(1) NOT NULL DEFAULT '0',
  `ObsoletionRevision` tinyint(1) NOT NULL DEFAULT '0',
  `OtherRevision` tinyint(1) NOT NULL DEFAULT '0',
  `ReferenceNumber` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DepartmentId` int DEFAULT NULL,
  `RequestType` int DEFAULT NULL,
  `ReasonForRevisionType` int DEFAULT NULL,
  `SupplierType` int DEFAULT NULL,
  `ReasonForRevision` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FullDescription` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SupplierPart` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Manufacturer` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `OEMPartNo` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsInternational` tinyint(1) NOT NULL DEFAULT '0',
  `IsSoleSource` tinyint(1) NOT NULL DEFAULT '0',
  `DrawingNo` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AdditionalDescription` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SDS` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsCertOfAnl` tinyint(1) NOT NULL DEFAULT '0',
  `IsHazMat` tinyint(1) NOT NULL DEFAULT '0',
  `EquipName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `EquipID` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `BinLoc` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsOneYearService` tinyint(1) DEFAULT NULL,
  `EstUse` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Min` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Max` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CostofItem` decimal(18,6) DEFAULT NULL,
  `CostofInv` decimal(18,6) DEFAULT NULL,
  `RepStockNum` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `OnHandQty` decimal(18,6) DEFAULT NULL,
  `GradChgOver` tinyint(1) DEFAULT NULL,
  `BuyerCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ProdTaxCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsCritical` tinyint(1) NOT NULL DEFAULT '0',
  `OrderPlacedOn` date DEFAULT NULL,
  `OrderPlacedByUserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Currency` tinyint DEFAULT NULL,
  `Price` decimal(18,6) DEFAULT NULL,
  `PurchaseUOM` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `InvendtoryUOM` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ProductClass` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ProductGroup` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ProductType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FreightClass` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PurchaseLeadTime` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `HTS` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `MinOrderReq` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PurchasedForUserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ApproverId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `BuyerId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `LockedById` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsLocked` tinyint(1) NOT NULL DEFAULT '0',
  `LockedAt` datetime DEFAULT NULL,
  `IsDeleted` tinyint(1) NOT NULL DEFAULT '0',
  `UserField1` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField2` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField3` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField4` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField5` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField6` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `LastSavedOn` datetime DEFAULT NULL,
  `FooterComments` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CreatedDate` datetime DEFAULT NULL,
  `CreatorEmail` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ApprovalDate` datetime DEFAULT NULL,
  `ComputedSRNumber` int GENERATED ALWAYS AS (cast(`SRNumber` as unsigned)) STORED,
  PRIMARY KEY (`StockRequestId`),
  KEY `FK_StockRequest_Client_ClientId` (`ClientId`) USING BTREE,
  KEY `FK_StockRequest_ClintCompany_CompanyId` (`CompanyId`) USING BTREE,
  KEY `FK_StockRequest_User_UserId` (`UserId`) USING BTREE,
  KEY `FK_StockRequest_Department_DepartmentId` (`DepartmentId`) USING BTREE,
  KEY `FK_StockRequest_User_ApproverId` (`ApproverId`) USING BTREE,
  KEY `FK_StockRequest_PurchasedForUserId_User_UserId` (`PurchasedForUserId`) USING BTREE,
  KEY `FK_StockRequest_LockedByID_User_UserId` (`LockedById`) USING BTREE,
  KEY `FK_StockRequest_BuyerId_User_UserId` (`BuyerId`) USING BTREE,
  KEY `FK_StockRequest_Item_ItemId` (`ItemId`) USING BTREE,
  KEY `FK_StockRequest_Vendor_VendorId` (`VendorId`) USING BTREE,
  KEY `FK_StockRequest_User_OrderPlacedByUserId` (`OrderPlacedByUserId`) USING BTREE,
  CONSTRAINT `StockRequest_ibfk_1` FOREIGN KEY (`BuyerId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `StockRequest_ibfk_10` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `StockRequest_ibfk_11` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `StockRequest_ibfk_2` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `StockRequest_ibfk_3` FOREIGN KEY (`CompanyId`) REFERENCES `ClientCompany` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `StockRequest_ibfk_4` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `StockRequest_ibfk_5` FOREIGN KEY (`ItemId`) REFERENCES `Item` (`ItemId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `StockRequest_ibfk_6` FOREIGN KEY (`LockedById`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `StockRequest_ibfk_7` FOREIGN KEY (`PurchasedForUserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `StockRequest_ibfk_8` FOREIGN KEY (`ApproverId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `StockRequest_ibfk_9` FOREIGN KEY (`OrderPlacedByUserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=1115 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `SubCategrory`
--

DROP TABLE IF EXISTS `SubCategrory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `SubCategrory` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `CategoryId` int DEFAULT NULL,
  `Code` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_SubCategrory_CategoryId` (`CategoryId`) USING BTREE,
  CONSTRAINT `SubCategrory_ibfk_1` FOREIGN KEY (`CategoryId`) REFERENCES `Category` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=2873 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `SubProjectType`
--

DROP TABLE IF EXISTS `SubProjectType`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `SubProjectType` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `SubProjectName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SubProjectDescription` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsActive` tinyint(1) DEFAULT NULL,
  `ClientId` int NOT NULL DEFAULT '22',
  `ProjectTypeId` int DEFAULT NULL,
  `ExternalId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=92580 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `SupportedCulture`
--

DROP TABLE IF EXISTS `SupportedCulture`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `SupportedCulture` (
  `SupportedCultureID` int NOT NULL AUTO_INCREMENT,
  `CultureName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `LanguageCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `CountryOrRegionCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `IsDefault` tinyint(1) NOT NULL,
  PRIMARY KEY (`SupportedCultureID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `SystemAdvanceSearchFields`
--

DROP TABLE IF EXISTS `SystemAdvanceSearchFields`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `SystemAdvanceSearchFields` (
  `SearchType` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Field` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Label` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `DataType` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `FieldOrder` int NOT NULL,
  `DependencyField` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`SearchType`,`Field`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `SystemAdvanceSearchFieldsClient`
--

DROP TABLE IF EXISTS `SystemAdvanceSearchFieldsClient`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `SystemAdvanceSearchFieldsClient` (
  `SearchType` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Field` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ClientId` int NOT NULL,
  `ClientFieldOrder` int DEFAULT NULL,
  `ClientHidden` bit(1) DEFAULT NULL,
  PRIMARY KEY (`SearchType`,`Field`,`ClientId`),
  KEY `SystemAdvanceSearchFieldsClient_ClientId` (`ClientId`) USING BTREE,
  CONSTRAINT `SystemAdvanceSearchFieldsClient_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `SystemAdvanceSearchFieldsClient_ibfk_2` FOREIGN KEY (`SearchType`, `Field`) REFERENCES `SystemAdvanceSearchFields` (`SearchType`, `Field`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `SystemAdvanceSearchFieldsHiddenUser`
--

DROP TABLE IF EXISTS `SystemAdvanceSearchFieldsHiddenUser`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `SystemAdvanceSearchFieldsHiddenUser` (
  `SearchType` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Field` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `UserId` varchar(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`SearchType`,`Field`,`UserId`),
  KEY `SystemAdvanceSearchFieldsHiddenUser_UserId` (`UserId`) USING BTREE,
  CONSTRAINT `SystemAdvanceSearchFieldsHiddenUser_ibfk_1` FOREIGN KEY (`SearchType`, `Field`) REFERENCES `SystemAdvanceSearchFields` (`SearchType`, `Field`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `SystemAdvanceSearchFieldsHiddenUser_ibfk_2` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `SystemAdvanceSearchFieldsUserStats`
--

DROP TABLE IF EXISTS `SystemAdvanceSearchFieldsUserStats`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `SystemAdvanceSearchFieldsUserStats` (
  `SearchType` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Field` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `UserId` varchar(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `TotalUsed` int NOT NULL,
  PRIMARY KEY (`SearchType`,`Field`,`UserId`),
  KEY `SystemAdvanceSearchFieldsUserStats_UserId` (`UserId`) USING BTREE,
  CONSTRAINT `SystemAdvanceSearchFieldsUserStats_ibfk_1` FOREIGN KEY (`SearchType`, `Field`) REFERENCES `SystemAdvanceSearchFields` (`SearchType`, `Field`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `SystemAdvanceSearchFieldsUserStats_ibfk_2` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `SystemFunctions`
--

DROP TABLE IF EXISTS `SystemFunctions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `SystemFunctions` (
  `FunctionKey` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `FunctionName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FunctionOptions` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FunctionGrouping` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SortOrderGrouping` int DEFAULT '0',
  `SortOrderName` int DEFAULT '0',
  `isInternal` smallint DEFAULT '0',
  `Migrate` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`FunctionKey`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `SystemReleases`
--

DROP TABLE IF EXISTS `SystemReleases`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `SystemReleases` (
  `ReleaseID` int NOT NULL AUTO_INCREMENT,
  `ReleaseNotes` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `InternalNotes` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `JiraReference` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CompletedDate` datetime DEFAULT NULL,
  `ReviewedDate` datetime DEFAULT NULL,
  `ReleaseDate` date DEFAULT NULL,
  `SentDate` datetime DEFAULT NULL,
  `UpdatedDate` datetime DEFAULT NULL,
  `Status` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`ReleaseID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `SystemReleasesClient`
--

DROP TABLE IF EXISTS `SystemReleasesClient`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `SystemReleasesClient` (
  `ReleaseID` int DEFAULT NULL,
  `ClientId` int DEFAULT NULL,
  KEY `SystemReleasesClient_ClientId` (`ClientId`) USING BTREE,
  CONSTRAINT `SystemReleasesClient_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `T_GLCode`
--

DROP TABLE IF EXISTS `T_GLCode`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `T_GLCode` (
  `ClientId` int NOT NULL,
  `GLCodeId` int NOT NULL AUTO_INCREMENT,
  `GLCodeName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Desccription` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SiteId` int DEFAULT NULL,
  PRIMARY KEY (`GLCodeId`)
) ENGINE=InnoDB AUTO_INCREMENT=7444 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Tax`
--

DROP TABLE IF EXISTS `Tax`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Tax` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `TaxCode` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DepartmentId` int DEFAULT NULL,
  `TaxRate` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `OrgId` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ClientId` int DEFAULT NULL,
  `SourceTaxId` int DEFAULT NULL,
  `GLCodeId` int DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_ClientId` (`ClientId`) USING BTREE,
  KEY `IX_DepartmentId` (`DepartmentId`) USING BTREE,
  CONSTRAINT `Tax_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Tax_ibfk_2` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=117633 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `TempApprovalHistory`
--

DROP TABLE IF EXISTS `TempApprovalHistory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `TempApprovalHistory` (
  `ApprovalHistoryID` int NOT NULL,
  `InvoiceId` int NOT NULL,
  `ApproverId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `GLCodeId` int NOT NULL,
  `AmountApproved` decimal(18,4) NOT NULL,
  `StateChangedDate` datetime NOT NULL,
  `CustomerId` int DEFAULT NULL,
  `Recoverabletax` int DEFAULT NULL,
  `SpecialNote` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `WithholdingTaxId` int DEFAULT NULL,
  `PurchaseNum` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ImportDoc` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `RecoverableTaxAmout` decimal(18,4) DEFAULT NULL,
  `TaxAmount` decimal(18,4) DEFAULT NULL,
  `TaxCodeId` int DEFAULT NULL,
  `ItemId` int DEFAULT NULL,
  `AccountingVariable1` int DEFAULT NULL,
  `AccountingVariable2` int DEFAULT NULL,
  `AccountingVariable3` int DEFAULT NULL,
  `AccountingVariable4` int DEFAULT NULL,
  `VendorId` int DEFAULT NULL,
  `OrgId` int DEFAULT NULL,
  `AmountInPercent` decimal(18,2) DEFAULT NULL,
  `IsDistributedLine` tinyint(1) DEFAULT NULL,
  `ExternalRef` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ServiceDateGl` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Quantity` decimal(18,2) DEFAULT NULL,
  `UserField1` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField2` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField3` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField4` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField5` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField6` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField7` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField8` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserField9` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`ApprovalHistoryID`),
  KEY `IX_ApproverId` (`ApproverId`) USING BTREE,
  KEY `IX_GLCodeId` (`GLCodeId`) USING BTREE,
  KEY `IX_InvoiceId` (`InvoiceId`) USING BTREE,
  KEY `IX_TaxCodeId` (`TaxCodeId`) USING BTREE,
  KEY `IX_WithholdingTaxId` (`WithholdingTaxId`) USING BTREE,
  KEY `ItemId` (`ItemId`) USING BTREE,
  KEY `VendorId` (`VendorId`) USING BTREE,
  KEY `OrgId` (`OrgId`) USING BTREE,
  CONSTRAINT `TempApprovalHistory_ibfk_1` FOREIGN KEY (`ItemId`) REFERENCES `Item` (`ItemId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `TempApprovalHistory_ibfk_2` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `TempApprovalHistory_ibfk_3` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `TempApprovalHistory_ibfk_4` FOREIGN KEY (`GLCodeId`) REFERENCES `T_GLCode` (`GLCodeId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `TempApprovalHistory_ibfk_5` FOREIGN KEY (`TaxCodeId`) REFERENCES `Tax` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `TempApprovalHistory_ibfk_6` FOREIGN KEY (`ApproverId`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `TempApprovalHistory_ibfk_7` FOREIGN KEY (`WithholdingTaxId`) REFERENCES `WithHoldingTax` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `TempApprovalHistory_ibfk_8` FOREIGN KEY (`OrgId`) REFERENCES `OrgData` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `TempDWRVendor`
--

DROP TABLE IF EXISTS `TempDWRVendor`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `TempDWRVendor` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `LineNo` int DEFAULT NULL,
  `VendorName` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorId` int DEFAULT NULL,
  `OldUserFullName` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `OldUserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `TempDWRVendorcol` varchar(45) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ApproverName` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ManagerName` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Comment` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=8390 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `TempLewaPO`
--

DROP TABLE IF EXISTS `TempLewaPO`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `TempLewaPO` (
  `PONumber` int DEFAULT NULL,
  `Amount` decimal(10,2) DEFAULT NULL,
  `POType` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `POStatus` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ItemNumber` varchar(43) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorCatNumber` varchar(7) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UnitOfPurchase` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `OrderQty` decimal(6,2) DEFAULT NULL,
  `UnitCost` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ExtCost` decimal(10,2) DEFAULT NULL,
  `RcvdQty` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `LineNo` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Description` varchar(101) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `POHeaderId` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `POLineId` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `POLineLocationId` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `RecievedTransactionId` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `GLCode` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsExpense` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Container` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorId` int NOT NULL,
  `ClientCompanyId` int DEFAULT '1696',
  `ClientId` int DEFAULT '167'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `TempSplitAcc`
--

DROP TABLE IF EXISTS `TempSplitAcc`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `TempSplitAcc` (
  `Split Key` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SplitC` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Description` varchar(28) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Account` varchar(6) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Pct` decimal(4,1) DEFAULT NULL,
  `Amount` varchar(4) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Control` varchar(8) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SourceId` int DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `TempSplitAcc2`
--

DROP TABLE IF EXISTS `TempSplitAcc2`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `TempSplitAcc2` (
  `Split Key` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Description` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Account` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Pct` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Amount` varchar(13) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Control` varchar(11) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CID` varchar(6) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SourceId` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `TempSplitAcc3`
--

DROP TABLE IF EXISTS `TempSplitAcc3`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `TempSplitAcc3` (
  `Split Key` varchar(23) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Description` varchar(28) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Account` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Pct` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Amount` varchar(18) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Control` varchar(8) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SourceId` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `TempSplitAccount2`
--

DROP TABLE IF EXISTS `TempSplitAccount2`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `TempSplitAccount2` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `SplitKey` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Description` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Account` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Pct` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Amount` decimal(10,0) DEFAULT NULL,
  `Control` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SourceId` int DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=7719 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `TempSplitAccountPederson`
--

DROP TABLE IF EXISTS `TempSplitAccountPederson`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `TempSplitAccountPederson` (
  `Id` int NOT NULL,
  `SplitKey` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Description` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Account` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Pct` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Amount` decimal(10,2) DEFAULT NULL,
  `Control` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SourceId` int DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `TempSplitAccountSe`
--

DROP TABLE IF EXISTS `TempSplitAccountSe`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `TempSplitAccountSe` (
  `Id` int NOT NULL,
  `SplitKey` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Description` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Account` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Pct` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Amount` decimal(10,2) DEFAULT NULL,
  `Control` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SourceId` int DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `TemporaryNestleData`
--

DROP TABLE IF EXISTS `TemporaryNestleData`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `TemporaryNestleData` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FileName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CloudXItemID` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CloudXCustomerLocID` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CloudXVendorID` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorName` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorNumber` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `RemitAddress1` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Address2` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `RemitCity` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `RemitState` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `RemitZip` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `RemitCountry` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `RemitPhone` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `RemitEmail` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `RemitAttnTo` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendCommunMethod` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PaymtType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PCardNum` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CustomerName` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `GroupCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SBTType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PODReq` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `RMSNum` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DBCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CustomerAddress1` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CustomerAddress2` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CustomerCity` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CustomerState` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CustomerZip` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CustomerCountry` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CustomerAttnTo` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CustomerPhone` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CustomerEmail` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ProductNumber` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorProductNumber` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ProductDescription` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `Qty` int DEFAULT NULL,
  `VendorPrice` decimal(18,2) DEFAULT NULL,
  `CustomerPrice` decimal(18,2) DEFAULT NULL,
  `NestleQty` int DEFAULT NULL,
  `InventoryCount` int DEFAULT NULL,
  `NestleProductDescription` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `TemporarySAP`
--

DROP TABLE IF EXISTS `TemporarySAP`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `TemporarySAP` (
  `Id` int NOT NULL,
  `PostingDate` datetime DEFAULT NULL,
  `CompanyCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Account` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Reference` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DocumentNumber` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ReferenceKey2` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `TemporarySAPAugust`
--

DROP TABLE IF EXISTS `TemporarySAPAugust`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `TemporarySAPAugust` (
  `Id` int NOT NULL,
  `PostingDate` datetime DEFAULT NULL,
  `CompanyCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Account` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Reference` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DocumentNumber` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ReferenceKey2` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `TemporarySAPSeptember`
--

DROP TABLE IF EXISTS `TemporarySAPSeptember`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `TemporarySAPSeptember` (
  `Id` int NOT NULL,
  `PostingDate` datetime DEFAULT NULL,
  `CompanyCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Account` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Reference` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DocumentNumber` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ReferenceKey2` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `TermAndCondition`
--

DROP TABLE IF EXISTS `TermAndCondition`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `TermAndCondition` (
  `TermAndConditionId` int NOT NULL AUTO_INCREMENT,
  `Code` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Description` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ClientId` int NOT NULL,
  `IsActive` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`TermAndConditionId`),
  KEY `FK_TermAndCondition_ibfk_1` (`ClientId`) USING BTREE,
  CONSTRAINT `TermAndCondition_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `TimerSetting`
--

DROP TABLE IF EXISTS `TimerSetting`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `TimerSetting` (
  `ClientId` int NOT NULL,
  `Hour` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`ClientId`),
  KEY `IX_ClientId` (`ClientId`) USING BTREE,
  CONSTRAINT `TimerSetting_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `TransactionType`
--

DROP TABLE IF EXISTS `TransactionType`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `TransactionType` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Code` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Description` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UsedIn` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `UOM`
--

DROP TABLE IF EXISTS `UOM`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `UOM` (
  `UOMId` int NOT NULL AUTO_INCREMENT,
  `Abbreviation` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Description` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`UOMId`)
) ENGINE=InnoDB AUTO_INCREMENT=102 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `User`
--

DROP TABLE IF EXISTS `User`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `User` (
  `ClientId` int NOT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `RoleId` int DEFAULT NULL,
  `UserName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Password` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FirstName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `LastName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Email` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `LoggedIn` tinyint(1) DEFAULT NULL,
  `IsActive` tinyint(1) DEFAULT '1',
  `AddressId` int DEFAULT NULL,
  `Telephone` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserIdCard` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `OrgId` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Type` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `EnableEscalation` tinyint(1) DEFAULT NULL,
  `Duration` int DEFAULT NULL,
  `LimitMailPerDay` int DEFAULT NULL,
  `DefaultUI` int DEFAULT NULL,
  `ShowApprovedForHandler` tinyint(1) DEFAULT NULL,
  `ClientCompanyId` int DEFAULT NULL,
  `LastPasswordChangeDate` datetime DEFAULT NULL,
  `CanViewConfidentialInvoice` tinyint(1) DEFAULT '0',
  `IsTelephoneConfirmed` tinyint(1) NOT NULL DEFAULT '0',
  `TelephoneNotification` tinyint(1) NOT NULL DEFAULT '0',
  `LastActionDate` datetime DEFAULT NULL,
  `LastActionBy` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `NotifyOnUrgentPOApproval` tinyint(1) NOT NULL DEFAULT '0',
  `IsDelegateOnlyUser` tinyint(1) NOT NULL DEFAULT '0',
  `EscalateToUserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DisableCPayNotification` tinyint(1) NOT NULL DEFAULT '0',
  `DisableApprovedFundNotification` tinyint(1) DEFAULT '0',
  `IsCloudxUser` tinyint(1) NOT NULL DEFAULT '0',
  `ViewCapEx` tinyint(1) NOT NULL DEFAULT '0',
  `TwoFACode` varchar(6) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `TwoFACodeValidUntil` datetime DEFAULT NULL,
  `TwoFAEnabled` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`UserId`),
  KEY `IX_AddressId` (`AddressId`) USING BTREE,
  KEY `IX_ClientCompanyId` (`ClientCompanyId`) USING BTREE,
  KEY `IX_ClientId` (`ClientId`) USING BTREE,
  CONSTRAINT `User_ibfk_1` FOREIGN KEY (`AddressId`) REFERENCES `Address` (`AddressId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `User_ibfk_2` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `User_ibfk_3` FOREIGN KEY (`ClientCompanyId`) REFERENCES `ClientCompany` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `UserActivity`
--

DROP TABLE IF EXISTS `UserActivity`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `UserActivity` (
  `ActivityID` int NOT NULL AUTO_INCREMENT,
  `UserId` varchar(36) COLLATE utf8mb4_general_ci NOT NULL,
  `Activity` varchar(50) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Info` mediumtext COLLATE utf8mb4_general_ci,
  `ActivityDate` datetime NOT NULL DEFAULT (utc_timestamp()),
  PRIMARY KEY (`ActivityID`),
  KEY `UserActivity_User` (`UserId`),
  CONSTRAINT `UserActivity_User` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`)
) ENGINE=InnoDB AUTO_INCREMENT=2123 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `UserAuthenticatedLocation`
--

DROP TABLE IF EXISTS `UserAuthenticatedLocation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `UserAuthenticatedLocation` (
  `UserId` char(36) COLLATE utf8mb4_general_ci NOT NULL,
  `DateAdded` datetime NOT NULL DEFAULT (utc_timestamp()),
  `IPAddress` varchar(15) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Location` varchar(500) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserAgent` varchar(500) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ValidUntil` datetime DEFAULT NULL,
  `LocationOnetimeKey` char(36) COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`UserId`,`DateAdded`),
  CONSTRAINT `UserAuthenticatedLocation_UserId` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `UserClientCompanies`
--

DROP TABLE IF EXISTS `UserClientCompanies`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `UserClientCompanies` (
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ClientCompanyId` int NOT NULL,
  `AllowPaymentApproval` tinyint(1) DEFAULT '1',
  PRIMARY KEY (`UserId`,`ClientCompanyId`),
  KEY `ClientCompanyId` (`ClientCompanyId`) USING BTREE,
  CONSTRAINT `UserClientCompanies_ibfk_1` FOREIGN KEY (`ClientCompanyId`) REFERENCES `ClientCompany` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `UserClientCompanies_ibfk_2` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `UserDepartment`
--

DROP TABLE IF EXISTS `UserDepartment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `UserDepartment` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DepartmentId` int DEFAULT NULL,
  `IsHomeDepartment` tinyint(1) DEFAULT NULL,
  `SetDefaultDepartmnt` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`Id`),
  KEY `IX_DepartmentId` (`DepartmentId`) USING BTREE,
  KEY `IX_UserId` (`UserId`) USING BTREE,
  CONSTRAINT `UserDepartment_ibfk_1` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `UserDepartment_ibfk_2` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=19795 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `UserInvoiceAssignment`
--

DROP TABLE IF EXISTS `UserInvoiceAssignment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `UserInvoiceAssignment` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `InvoiceId` int NOT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `Type` tinyint unsigned NOT NULL,
  `State` tinyint unsigned NOT NULL,
  `ApprovalSubStepId` int DEFAULT NULL,
  `HoldStartDate` date DEFAULT NULL,
  `HoldEndDate` date DEFAULT NULL,
  `DateCreated` datetime NOT NULL,
  `AssignBackToUserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Comments` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`),
  UNIQUE KEY `IX_InvoiceId_UserId` (`UserId`,`InvoiceId`) USING BTREE,
  KEY `IX_InvoiceId` (`InvoiceId`) USING BTREE,
  KEY `IX_UserId` (`UserId`) USING BTREE,
  KEY `FK_UserInvoiceAssignment_User_UserId` (`AssignBackToUserId`) USING BTREE,
  CONSTRAINT `UserInvoiceAssignment_ibfk_1` FOREIGN KEY (`AssignBackToUserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `UserInvoiceAssignment_ibfk_2` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `UserInvoiceAssignment_ibfk_3` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=19928297 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `UserInvoiceAssignmentHistory`
--

DROP TABLE IF EXISTS `UserInvoiceAssignmentHistory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `UserInvoiceAssignmentHistory` (
  `UserInvoiceAssignmentHistoryId` int NOT NULL AUTO_INCREMENT,
  `InvoiceId` int NOT NULL,
  `FromApprovalSubStepId` int DEFAULT NULL,
  `FromApprovalSubStepUserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ToApprovalSubStepId` int NOT NULL,
  `ToApprovalSubStepUserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `ApprovedOn` datetime NOT NULL,
  `AmountApproved` decimal(18,2) DEFAULT NULL,
  PRIMARY KEY (`UserInvoiceAssignmentHistoryId`),
  KEY `IX_FromApprovalSubStepId` (`FromApprovalSubStepId`) USING BTREE,
  KEY `IX_FromApprovalSubStepUserId` (`FromApprovalSubStepUserId`) USING BTREE,
  KEY `IX_InvoiceId` (`InvoiceId`) USING BTREE,
  KEY `IX_ToApprovalSubStepId` (`ToApprovalSubStepId`) USING BTREE,
  KEY `IX_ToApprovalSubStepUserId` (`ToApprovalSubStepUserId`) USING BTREE,
  CONSTRAINT `UserInvoiceAssignmentHistory_ibfk_1` FOREIGN KEY (`ToApprovalSubStepId`) REFERENCES `ApprovalSubStep` (`ApprovalSubStepId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `UserInvoiceAssignmentHistory_ibfk_2` FOREIGN KEY (`FromApprovalSubStepId`) REFERENCES `ApprovalSubStep` (`ApprovalSubStepId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `UserInvoiceAssignmentHistory_ibfk_3` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `UserInvoiceAssignmentHistory_ibfk_4` FOREIGN KEY (`FromApprovalSubStepUserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `UserInvoiceAssignmentHistory_ibfk_5` FOREIGN KEY (`ToApprovalSubStepUserId`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=19415645 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `UserInvoiceAssignmentTriggerExcludedClients`
--

DROP TABLE IF EXISTS `UserInvoiceAssignmentTriggerExcludedClients`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `UserInvoiceAssignmentTriggerExcludedClients` (
  `ClientId` int NOT NULL,
  PRIMARY KEY (`ClientId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `UserNotification`
--

DROP TABLE IF EXISTS `UserNotification`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `UserNotification` (
  `NotificationID` int NOT NULL AUTO_INCREMENT,
  `UserId` varchar(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Source` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Message` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `LinkPage` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `LinkValue` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ReceivedDate` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `ReadDate` datetime DEFAULT NULL,
  `ReadStatus` smallint NOT NULL DEFAULT '0',
  PRIMARY KEY (`NotificationID`),
  KEY `UserNotification_idx` (`UserId`,`NotificationID`) USING BTREE,
  CONSTRAINT `UserNotification_ibfk_1` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=813 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `UserPOAssignment`
--

DROP TABLE IF EXISTS `UserPOAssignment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `UserPOAssignment` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `POHeaderId` int NOT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `Type` tinyint unsigned NOT NULL,
  `State` tinyint unsigned NOT NULL,
  `ApprovalSubStepId` int DEFAULT NULL,
  `HoldStartDate` date DEFAULT NULL,
  `HoldEndDate` date DEFAULT NULL,
  `DateCreated` datetime NOT NULL,
  `DelegationFromDate` datetime DEFAULT NULL,
  `DelegationToDate` datetime DEFAULT NULL,
  `DelegateUntil` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  UNIQUE KEY `IX_POHeaderId_UserId` (`UserId`,`POHeaderId`) USING BTREE,
  KEY `IX_POHeaderId` (`POHeaderId`) USING BTREE,
  KEY `IX_UserId` (`UserId`) USING BTREE,
  KEY `ApprovalSubStepId` (`ApprovalSubStepId`) USING BTREE,
  CONSTRAINT `UserPOAssignment_ibfk_1` FOREIGN KEY (`ApprovalSubStepId`) REFERENCES `ApprovalSubStep` (`ApprovalSubStepId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `UserPOAssignment_ibfk_2` FOREIGN KEY (`POHeaderId`) REFERENCES `POHeader` (`POHeaderId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `UserPOAssignment_ibfk_3` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=297026 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `UserPOAssignmentHistory`
--

DROP TABLE IF EXISTS `UserPOAssignmentHistory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `UserPOAssignmentHistory` (
  `UserPOAssignmentHistoryId` int NOT NULL AUTO_INCREMENT,
  `POHeaderId` int NOT NULL,
  `FromApprovalSubStepId` int DEFAULT NULL,
  `FromApprovalSubStepUserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ToApprovalSubStepId` int NOT NULL,
  `ToApprovalSubStepUserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `ApprovedOn` datetime NOT NULL,
  `AmountApproved` decimal(18,2) DEFAULT NULL,
  `DelegationFromDate` datetime DEFAULT NULL,
  `DelegationToDate` datetime DEFAULT NULL,
  `DelegateUntil` datetime DEFAULT NULL,
  PRIMARY KEY (`UserPOAssignmentHistoryId`),
  KEY `IX_FromApprovalSubStepId` (`FromApprovalSubStepId`) USING BTREE,
  KEY `IX_FromApprovalSubStepUserId` (`FromApprovalSubStepUserId`) USING BTREE,
  KEY `IX_POHeaderId` (`POHeaderId`) USING BTREE,
  KEY `IX_ToApprovalSubStepId` (`ToApprovalSubStepId`) USING BTREE,
  KEY `IX_ToApprovalSubStepUserId` (`ToApprovalSubStepUserId`) USING BTREE,
  CONSTRAINT `UserPOAssignmentHistory_ibfk_1` FOREIGN KEY (`ToApprovalSubStepId`) REFERENCES `ApprovalSubStep` (`ApprovalSubStepId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `UserPOAssignmentHistory_ibfk_2` FOREIGN KEY (`FromApprovalSubStepId`) REFERENCES `ApprovalSubStep` (`ApprovalSubStepId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `UserPOAssignmentHistory_ibfk_3` FOREIGN KEY (`POHeaderId`) REFERENCES `POHeader` (`POHeaderId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `UserPOAssignmentHistory_ibfk_4` FOREIGN KEY (`FromApprovalSubStepUserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `UserPOAssignmentHistory_ibfk_5` FOREIGN KEY (`ToApprovalSubStepUserId`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=266977 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `UserPasswordHistory`
--

DROP TABLE IF EXISTS `UserPasswordHistory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `UserPasswordHistory` (
  `UserId` char(36) COLLATE utf8mb4_general_ci NOT NULL,
  `DateAdded` datetime NOT NULL,
  `Password` varchar(50) COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`UserId`,`DateAdded`),
  CONSTRAINT `UserPasswordHistory_UserId` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `UserReassignmentHistory`
--

DROP TABLE IF EXISTS `UserReassignmentHistory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `UserReassignmentHistory` (
  `ReassignUserHistoryId` int NOT NULL AUTO_INCREMENT,
  `SourceUserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `TargetUserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `DateFrom` datetime DEFAULT NULL,
  `DateTo` datetime DEFAULT NULL,
  `IsPermanent` tinyint(1) NOT NULL,
  `WorkflowType` tinyint DEFAULT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `CreatedDate` datetime NOT NULL,
  `IsActive` tinyint(1) DEFAULT '1',
  PRIMARY KEY (`ReassignUserHistoryId`),
  KEY `TargetUserId` (`TargetUserId`) USING BTREE,
  KEY `UserId` (`UserId`) USING BTREE,
  KEY `SourceUserId` (`SourceUserId`) USING BTREE,
  CONSTRAINT `UserReassignmentHistory_ibfk_1` FOREIGN KEY (`SourceUserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `UserReassignmentHistory_ibfk_2` FOREIGN KEY (`TargetUserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `UserReassignmentHistory_ibfk_3` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=803 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `UserRoleHistory`
--

DROP TABLE IF EXISTS `UserRoleHistory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `UserRoleHistory` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ActorId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Action` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ActionDate` datetime DEFAULT NULL,
  `PreviousData` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `NewData` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  PRIMARY KEY (`Id`),
  KEY `FK_UserRoleHistory_User_UserId` (`UserId`) USING BTREE,
  KEY `FK_UserRoleHistory_User_ActorId` (`ActorId`) USING BTREE,
  CONSTRAINT `UserRoleHistory_ibfk_1` FOREIGN KEY (`ActorId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `UserRoleHistory_ibfk_2` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=312 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `UserRoles`
--

DROP TABLE IF EXISTS `UserRoles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `UserRoles` (
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `RoleId` int NOT NULL,
  PRIMARY KEY (`UserId`,`RoleId`),
  KEY `IX_RoleId` (`RoleId`) USING BTREE,
  KEY `IX_UserId` (`UserId`) USING BTREE,
  CONSTRAINT `UserRoles_ibfk_1` FOREIGN KEY (`RoleId`) REFERENCES `Role` (`RoleId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `UserRoles_ibfk_2` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `UserSRAssignment`
--

DROP TABLE IF EXISTS `UserSRAssignment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `UserSRAssignment` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `StockRequestID` int NOT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `Type` tinyint unsigned NOT NULL,
  `State` tinyint unsigned NOT NULL,
  `ApprovalSubStepId` int DEFAULT NULL,
  `HoldStartDate` date DEFAULT NULL,
  `HoldEndDate` date DEFAULT NULL,
  `DateCreated` datetime NOT NULL,
  `DelegationFromDate` datetime DEFAULT NULL,
  `DelegationToDate` datetime DEFAULT NULL,
  `DelegateUntil` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_UserId` (`UserId`) USING BTREE,
  KEY `ApprovalSubStepId` (`ApprovalSubStepId`) USING BTREE,
  KEY `FK_UserSRAssignment_StockRequest_StockRequestId` (`StockRequestID`) USING BTREE,
  CONSTRAINT `UserSRAssignment_ibfk_1` FOREIGN KEY (`ApprovalSubStepId`) REFERENCES `ApprovalSubStep` (`ApprovalSubStepId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `UserSRAssignment_ibfk_2` FOREIGN KEY (`StockRequestID`) REFERENCES `StockRequest` (`StockRequestId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `UserSRAssignment_ibfk_3` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=174567 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `UserSRAssignmentHistory`
--

DROP TABLE IF EXISTS `UserSRAssignmentHistory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `UserSRAssignmentHistory` (
  `UserSRAssignmentHistoryId` int NOT NULL AUTO_INCREMENT,
  `StockRequestID` int NOT NULL,
  `FromApprovalSubStepId` int DEFAULT NULL,
  `FromApprovalSubStepUserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ToApprovalSubStepId` int NOT NULL,
  `ToApprovalSubStepUserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `ApprovedOn` datetime NOT NULL,
  `AmountApproved` decimal(18,2) DEFAULT NULL,
  `DelegationFromDate` datetime DEFAULT NULL,
  `DelegationToDate` datetime DEFAULT NULL,
  `DelegateUntil` datetime DEFAULT NULL,
  PRIMARY KEY (`UserSRAssignmentHistoryId`),
  KEY `IX_FromApprovalSubStepId` (`FromApprovalSubStepId`) USING BTREE,
  KEY `IX_FromApprovalSubStepUserId` (`FromApprovalSubStepUserId`) USING BTREE,
  KEY `IX_ToApprovalSubStepId` (`ToApprovalSubStepId`) USING BTREE,
  KEY `IX_ToApprovalSubStepUserId` (`ToApprovalSubStepUserId`) USING BTREE,
  KEY `FK_UserSRAssignmentHistory_StockRequest_StockRequestId` (`StockRequestID`) USING BTREE,
  CONSTRAINT `UserSRAssignmentHistory_ibfk_1` FOREIGN KEY (`ToApprovalSubStepId`) REFERENCES `ApprovalSubStep` (`ApprovalSubStepId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `UserSRAssignmentHistory_ibfk_2` FOREIGN KEY (`FromApprovalSubStepId`) REFERENCES `ApprovalSubStep` (`ApprovalSubStepId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `UserSRAssignmentHistory_ibfk_3` FOREIGN KEY (`StockRequestID`) REFERENCES `StockRequest` (`StockRequestId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `UserSRAssignmentHistory_ibfk_4` FOREIGN KEY (`FromApprovalSubStepUserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `UserSRAssignmentHistory_ibfk_5` FOREIGN KEY (`ToApprovalSubStepUserId`) REFERENCES `User` (`UserId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=154504 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `UserWarehouse`
--

DROP TABLE IF EXISTS `UserWarehouse`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `UserWarehouse` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '',
  `WarehouseId` int NOT NULL,
  `SetDefaultWarehouse` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`Id`),
  KEY `WarehouseId` (`WarehouseId`) USING BTREE,
  KEY `UserId` (`UserId`) USING BTREE,
  CONSTRAINT `UserWarehouse_ibfk_1` FOREIGN KEY (`WarehouseId`) REFERENCES `Warehouse` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `UserWarehouse_ibfk_2` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=261 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `VN301000222`
--

DROP TABLE IF EXISTS `VN301000222`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `VN301000222` (
  `Invoice Number` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Vendor Name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Vendor No` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Invoice Date` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Scan Date` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Invoice Total` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Last Action Date` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `VendTOass`
--

DROP TABLE IF EXISTS `VendTOass`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `VendTOass` (
  `VendorNo` int DEFAULT NULL,
  `VendorName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Name` varchar(14) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `User Name` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Roles` varchar(13) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorId` int NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `VenderAddressTempTable`
--

DROP TABLE IF EXISTS `VenderAddressTempTable`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `VenderAddressTempTable` (
  `VendorNumber` varchar(9) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Name` varchar(28) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Address1` varchar(44) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `City` varchar(24) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `State` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ZipCode` varchar(35) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Phone` varchar(13) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `E` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `TaxID` varchar(13) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Contact` varchar(25) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CreditLimit` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `StateId` varchar(11) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AddressIDT` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Vendor`
--

DROP TABLE IF EXISTS `Vendor`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Vendor` (
  `ClientId` int NOT NULL,
  `VendorId` int NOT NULL AUTO_INCREMENT,
  `VendorName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ContactPerson` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AddressId` int DEFAULT NULL,
  `Telephone` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Fax` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Email` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorNo` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DefaultGlCodeId` int DEFAULT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `TaxCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FreightGLCodeId` int DEFAULT NULL,
  `TaxGLCodeId` int DEFAULT NULL,
  `Currency` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `orgDataId` int DEFAULT NULL,
  `AuthCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ActivityRequired` tinyint(1) NOT NULL,
  `DefaultAuthCode` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AccountStatus` tinyint unsigned DEFAULT NULL,
  `First_Net_Days` int DEFAULT NULL,
  `Day_Of_Month` int DEFAULT NULL,
  `Discount_Day_01` int DEFAULT NULL,
  `NetDisPer` double DEFAULT NULL,
  `TaxLevel` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DefaultTaxCodeId` int DEFAULT NULL,
  `IsPoVendor` tinyint(1) DEFAULT NULL,
  `ClientVendorID` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AccountCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsActive` tinyint(1) NOT NULL,
  `CompanyCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `SearchName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ClientCompanyId` int DEFAULT NULL,
  `VendorType` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `PaymentType` tinyint unsigned DEFAULT NULL,
  `CommunicationMethod` tinyint unsigned DEFAULT NULL,
  `PCardNumber` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IgnoreValidation` tinyint(1) NOT NULL,
  `SourceVendorId` int DEFAULT NULL,
  `OneInvoicePerCard` tinyint(1) NOT NULL,
  `AutoApproveFromHistory` tinyint(1) DEFAULT NULL,
  `GroupByCustomer` tinyint(1) DEFAULT NULL,
  `DisableAutoApproval` tinyint(1) DEFAULT '1',
  `VendorTerm` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `LastActionDate` datetime DEFAULT NULL,
  `LastActionBy` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsConfidential` tinyint(1) NOT NULL DEFAULT '0',
  `PaymentMethod` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ExternalId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `RequireAccountNumber` tinyint(1) NOT NULL DEFAULT '0',
  `IsEligibleInAccounting` tinyint(1) DEFAULT NULL,
  `IsCSIVendor` tinyint(1) DEFAULT NULL,
  `AccountOwner` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `BillingDueDate` date DEFAULT NULL,
  `ContractAmount` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorSiteId` int DEFAULT NULL,
  `ProjectTypeId` int DEFAULT NULL,
  `ShippingTermId` int DEFAULT NULL,
  `FreightCodeId` int DEFAULT NULL,
  `Is1099Vendor` tinyint(1) DEFAULT '0',
  `PaymentSpec` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendBankId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Subsidiary` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsArchiveVendor` tinyint(1) DEFAULT NULL,
  `NSDepartmentId` int DEFAULT NULL,
  `ClassId` int DEFAULT NULL,
  `IsOneTimeVendor` tinyint(1) DEFAULT '0',
  `UserField1` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `IsFactoryVendor` tinyint(1) DEFAULT '0',
  `Created_by` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Created_date` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `LastUpdated_by` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `LastUpdated_date` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `SkipNextSubStepInApprovalWorkflow` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`VendorId`),
  KEY `IX_AddressId` (`AddressId`) USING BTREE,
  KEY `IX_ClientCompanyId` (`ClientCompanyId`) USING BTREE,
  KEY `IX_ClientId` (`ClientId`) USING BTREE,
  KEY `IX_DefaultTaxCodeId` (`DefaultTaxCodeId`) USING BTREE,
  KEY `IX_FreightGLCodeId` (`FreightGLCodeId`) USING BTREE,
  KEY `IX_orgDataId` (`orgDataId`) USING BTREE,
  KEY `IX_TaxGLCodeId` (`TaxGLCodeId`) USING BTREE,
  KEY `IX_UserId` (`UserId`) USING BTREE,
  KEY `FK_Vendor_ibfk_10` (`FreightCodeId`) USING BTREE,
  KEY `FK_Vendor_ibfk_9` (`ShippingTermId`) USING BTREE,
  KEY `VendorSiteId` (`VendorSiteId`) USING BTREE,
  KEY `NSDepartmentId` (`NSDepartmentId`) USING BTREE,
  KEY `ClassId` (`ClassId`) USING BTREE,
  KEY `IDX_PMT_Vendor` (`ClientId`,`VendorNo`,`CompanyCode`) USING BTREE,
  KEY `vendor_userId` (`UserId`) USING BTREE,
  CONSTRAINT `Vendor_ibfk_1` FOREIGN KEY (`AddressId`) REFERENCES `Address` (`AddressId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Vendor_ibfk_10` FOREIGN KEY (`orgDataId`) REFERENCES `OrgData` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Vendor_ibfk_11` FOREIGN KEY (`DefaultTaxCodeId`) REFERENCES `Tax` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Vendor_ibfk_12` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Vendor_ibfk_13` FOREIGN KEY (`VendorSiteId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Vendor_ibfk_2` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `Vendor_ibfk_3` FOREIGN KEY (`ClientCompanyId`) REFERENCES `ClientCompany` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Vendor_ibfk_4` FOREIGN KEY (`FreightGLCodeId`) REFERENCES `GLCode` (`GLCodeId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Vendor_ibfk_5` FOREIGN KEY (`TaxGLCodeId`) REFERENCES `GLCode` (`GLCodeId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Vendor_ibfk_6` FOREIGN KEY (`FreightCodeId`) REFERENCES `FreightCodes` (`FreightCodeId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Vendor_ibfk_7` FOREIGN KEY (`ShippingTermId`) REFERENCES `ShippingTerms` (`ShippingTermId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Vendor_ibfk_8` FOREIGN KEY (`ClassId`) REFERENCES `NSClass` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Vendor_ibfk_9` FOREIGN KEY (`NSDepartmentId`) REFERENCES `NSDepartment` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=1555836074 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `VendorContracts`
--

DROP TABLE IF EXISTS `VendorContracts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `VendorContracts` (
  `VendorContractId` int NOT NULL AUTO_INCREMENT,
  `VendorId` int NOT NULL,
  `ExpirationDate` date NOT NULL,
  `ContractFileName` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ContractNewFileName` varchar(40) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`VendorContractId`),
  UNIQUE KEY `VendorId` (`VendorId`,`ExpirationDate`) USING BTREE,
  CONSTRAINT `VendorContracts_ibfk_1` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=41 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `VendorDepartment`
--

DROP TABLE IF EXISTS `VendorDepartment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `VendorDepartment` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `VendorId` int NOT NULL,
  `DepartmentId` int NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_DepartmentId` (`DepartmentId`) USING BTREE,
  KEY `IX_VendorId` (`VendorId`) USING BTREE,
  CONSTRAINT `VendorDepartment_ibfk_1` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `VendorDepartment_ibfk_2` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=49356 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `VendorGlDefault`
--

DROP TABLE IF EXISTS `VendorGlDefault`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `VendorGlDefault` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `AuthCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DepartmentId` int DEFAULT NULL,
  `GlCodeId` int DEFAULT NULL,
  `Amount` decimal(18,2) DEFAULT NULL,
  `ClientId` int DEFAULT NULL,
  `SpecialNote` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `CustomerId` int DEFAULT NULL,
  `AmountPercent` decimal(18,10) DEFAULT NULL,
  `VendorId` int DEFAULT NULL,
  `ProjectTypeId` int DEFAULT NULL,
  `SubProjectTypeId` int DEFAULT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AccountNumber` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AccountingVariable1` int DEFAULT NULL,
  `AccountingVariable2` int DEFAULT NULL,
  `AccountingVariable3` int DEFAULT NULL,
  `AccountingVariable4` int DEFAULT NULL,
  `ClientCompanyId` int DEFAULT NULL,
  `VendorSiteId` int DEFAULT NULL,
  `IsDistributedLine` tinyint(1) DEFAULT NULL,
  `OrgId` int DEFAULT NULL,
  `ImportDoc` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ExternalRef` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ServiceDateGl` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_ClientId` (`ClientId`) USING BTREE,
  KEY `IX_CustomerId` (`CustomerId`) USING BTREE,
  KEY `IX_DepartmentId` (`DepartmentId`) USING BTREE,
  KEY `IX_GlCodeId` (`GlCodeId`) USING BTREE,
  KEY `ProjectTypeId` (`ProjectTypeId`) USING BTREE,
  KEY `UserId` (`UserId`) USING BTREE,
  KEY `FK_VendorGlDefault_AccVariable1` (`AccountingVariable1`) USING BTREE,
  KEY `FK_VendorGlDefault_AccVariable2` (`AccountingVariable2`) USING BTREE,
  KEY `FK_VendorGlDefault_AccVariable3` (`AccountingVariable3`) USING BTREE,
  KEY `FK_VendorGlDefault_AccVariable4` (`AccountingVariable4`) USING BTREE,
  KEY `VendorSiteId` (`VendorSiteId`) USING BTREE,
  KEY `VendorGlDefault_ibfk_OrgData_OrgId` (`OrgId`) USING BTREE,
  CONSTRAINT `VendorGlDefault_ibfk_1` FOREIGN KEY (`AccountingVariable1`) REFERENCES `AccountingVariable` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `VendorGlDefault_ibfk_10` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `VendorGlDefault_ibfk_11` FOREIGN KEY (`VendorSiteId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `VendorGlDefault_ibfk_12` FOREIGN KEY (`OrgId`) REFERENCES `OrgData` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `VendorGlDefault_ibfk_2` FOREIGN KEY (`AccountingVariable2`) REFERENCES `AccountingVariable` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `VendorGlDefault_ibfk_3` FOREIGN KEY (`AccountingVariable3`) REFERENCES `AccountingVariable` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `VendorGlDefault_ibfk_4` FOREIGN KEY (`AccountingVariable4`) REFERENCES `AccountingVariable` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `VendorGlDefault_ibfk_5` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `VendorGlDefault_ibfk_6` FOREIGN KEY (`CustomerId`) REFERENCES `Customer` (`CustomerId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `VendorGlDefault_ibfk_7` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `VendorGlDefault_ibfk_8` FOREIGN KEY (`GlCodeId`) REFERENCES `GLCode` (`GLCodeId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `VendorGlDefault_ibfk_9` FOREIGN KEY (`ProjectTypeId`) REFERENCES `ProjectType` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=124301 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `VendorHistory`
--

DROP TABLE IF EXISTS `VendorHistory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `VendorHistory` (
  `VendorHistoryId` int NOT NULL AUTO_INCREMENT,
  `VendorId` int DEFAULT NULL,
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Action` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ActionDate` datetime DEFAULT NULL,
  `PreviousData` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `NewData` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  PRIMARY KEY (`VendorHistoryId`),
  KEY `FK_VendorHistory_Vendor_VendorId` (`VendorId`) USING BTREE,
  KEY `FK_VendorHistory_User_UserId` (`UserId`) USING BTREE,
  CONSTRAINT `VendorHistory_ibfk_1` FOREIGN KEY (`UserId`) REFERENCES `User` (`UserId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `VendorHistory_ibfk_2` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=360 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `VendorItemContract`
--

DROP TABLE IF EXISTS `VendorItemContract`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `VendorItemContract` (
  `VendorItemContractId` int NOT NULL AUTO_INCREMENT,
  `VendorId` int NOT NULL,
  `ItemId` int NOT NULL,
  `CustomerLocationId` int DEFAULT NULL,
  `VendorItemDescription` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `VendorPrice` double NOT NULL,
  `PriceChangeDate` date DEFAULT NULL,
  PRIMARY KEY (`VendorItemContractId`),
  KEY `IX_CustomerLocationId` (`CustomerLocationId`) USING BTREE,
  KEY `IX_ItemId` (`ItemId`) USING BTREE,
  KEY `IX_VendorId` (`VendorId`) USING BTREE,
  CONSTRAINT `VendorItemContract_ibfk_1` FOREIGN KEY (`CustomerLocationId`) REFERENCES `CustomerLocation` (`CustomerLocationId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `VendorItemContract_ibfk_2` FOREIGN KEY (`ItemId`) REFERENCES `Item` (`ItemId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `VendorItemContract_ibfk_3` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=33745 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `VendorLocation`
--

DROP TABLE IF EXISTS `VendorLocation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `VendorLocation` (
  `VendorLocationId` int NOT NULL AUTO_INCREMENT,
  `LocationNumber` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `LocationName` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `VendorId` int NOT NULL,
  `AddressId` int NOT NULL,
  `IsActive` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`VendorLocationId`),
  KEY `IX_AddressId` (`AddressId`) USING BTREE,
  KEY `IX_VendorId` (`VendorId`) USING BTREE,
  CONSTRAINT `VendorLocation_ibfk_1` FOREIGN KEY (`AddressId`) REFERENCES `Address` (`AddressId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `VendorLocation_ibfk_2` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=123872 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `VendorLocationAccountAssociation`
--

DROP TABLE IF EXISTS `VendorLocationAccountAssociation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `VendorLocationAccountAssociation` (
  `VendorLocationAccountAssociationId` int NOT NULL AUTO_INCREMENT,
  `VendorId` int DEFAULT NULL,
  `VendorLocationId` int DEFAULT NULL,
  `VendorLocationAccountId` int DEFAULT NULL,
  PRIMARY KEY (`VendorLocationAccountAssociationId`),
  KEY `VendorId` (`VendorId`) USING BTREE,
  KEY `VendorLocationId` (`VendorLocationId`) USING BTREE,
  KEY `VendorLocationAccountId` (`VendorLocationAccountId`) USING BTREE,
  CONSTRAINT `VendorLocationAccountAssociation_ibfk_1` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `VendorLocationAccountAssociation_ibfk_2` FOREIGN KEY (`VendorLocationId`) REFERENCES `VendorLocation` (`VendorLocationId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `VendorLocationAccountAssociation_ibfk_3` FOREIGN KEY (`VendorLocationAccountId`) REFERENCES `VendorLocationAccountNumber` (`VendorLocationAccountID`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=5241 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `VendorLocationAccountNumber`
--

DROP TABLE IF EXISTS `VendorLocationAccountNumber`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `VendorLocationAccountNumber` (
  `VendorLocationAccountID` int NOT NULL AUTO_INCREMENT,
  `VendorLocationID` int NOT NULL,
  `AccountNumber` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`VendorLocationAccountID`),
  KEY `VendorLocationIDFK_idx` (`VendorLocationID`) USING BTREE,
  CONSTRAINT `VendorLocationAccountNumber_ibfk_1` FOREIGN KEY (`VendorLocationID`) REFERENCES `VendorLocation` (`VendorLocationId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=5379 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `VendorTaxCode`
--

DROP TABLE IF EXISTS `VendorTaxCode`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `VendorTaxCode` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `VendorId` int DEFAULT NULL,
  `OrgId` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `TaxCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `WithHoldingTaxGroup` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `IX_VendorId` (`VendorId`) USING BTREE,
  CONSTRAINT `VendorTaxCode_ibfk_1` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=24605 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `VendorTerm`
--

DROP TABLE IF EXISTS `VendorTerm`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `VendorTerm` (
  `VendorTermId` int NOT NULL AUTO_INCREMENT,
  `VendorTermName` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ClientId` int NOT NULL,
  PRIMARY KEY (`VendorTermId`),
  UNIQUE KEY `VendorTermName` (`VendorTermName`,`ClientId`) USING BTREE,
  KEY `ClientId` (`ClientId`) USING BTREE,
  CONSTRAINT `VendorTerm_ibfk_1` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Vendor_Department_GL`
--

DROP TABLE IF EXISTS `Vendor_Department_GL`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Vendor_Department_GL` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `VendorId` int NOT NULL,
  `DepartmentId` int NOT NULL,
  `GLCodeId` int NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `IX_DepartmentId` (`DepartmentId`) USING BTREE,
  KEY `IX_GLCodeId` (`GLCodeId`) USING BTREE,
  KEY `IX_VendorId` (`VendorId`) USING BTREE,
  CONSTRAINT `Vendor_Department_GL_ibfk_1` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `Vendor_Department_GL_ibfk_2` FOREIGN KEY (`GLCodeId`) REFERENCES `GLCode` (`GLCodeId`) ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT `Vendor_Department_GL_ibfk_3` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=220725 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `WO`
--

DROP TABLE IF EXISTS `WO`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `WO` (
  `WOId` int NOT NULL AUTO_INCREMENT,
  `ExternalWOId` varchar(1500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `WONumber` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ServiceDescription` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `EquipmentName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ServiceArea` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorId` int NOT NULL,
  `PropertyId` int NOT NULL,
  `ServiceDate` datetime DEFAULT NULL,
  `ServiceEndDate` datetime DEFAULT NULL,
  `Quantity` decimal(18,10) NOT NULL,
  `UnitCost` decimal(18,10) DEFAULT NULL,
  `HaulRate` decimal(18,10) DEFAULT NULL,
  `ClientId` int NOT NULL,
  `Frequency` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FrequencyCount` decimal(18,10) DEFAULT NULL,
  `WOType` int NOT NULL,
  `AccountNumber` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `GLCodeId` int DEFAULT NULL,
  `PropertyEquipmentAssignmentId` int DEFAULT NULL,
  `PricingAssignmentId` int DEFAULT NULL,
  `EventSpecialItemId` int DEFAULT NULL,
  `StartDate` datetime DEFAULT NULL,
  `PropertyExternalId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorInternalId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`WOId`),
  KEY `PropertyId` (`PropertyId`) USING BTREE,
  KEY `VendorId` (`VendorId`) USING BTREE,
  KEY `ClientId` (`ClientId`) USING BTREE,
  KEY `wo_ibfk_4` (`GLCodeId`) USING BTREE,
  CONSTRAINT `WO_ibfk_1` FOREIGN KEY (`PropertyId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `WO_ibfk_2` FOREIGN KEY (`VendorId`) REFERENCES `Vendor` (`VendorId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `WO_ibfk_3` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `WO_ibfk_4` FOREIGN KEY (`GLCodeId`) REFERENCES `GLCode` (`GLCodeId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=11379901 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `WODetails`
--

DROP TABLE IF EXISTS `WODetails`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `WODetails` (
  `WODetailId` int NOT NULL AUTO_INCREMENT,
  `InvoiceId` int NOT NULL,
  `Description` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Quantity` decimal(18,10) DEFAULT NULL,
  `UnitCost` decimal(18,10) DEFAULT NULL,
  `AccountNumber` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PageNo` int NOT NULL,
  `HasError` tinyint(1) NOT NULL,
  `WOId` int DEFAULT NULL,
  `GLCodeId` int DEFAULT NULL,
  `ServiceDate` date DEFAULT NULL,
  `WONumber` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ComputedExternalWOId` varchar(1500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `eTracServiceDate` date DEFAULT NULL,
  `PropertyEquipmentAssignmentId` int DEFAULT NULL,
  `PricingAssignmentId` int DEFAULT NULL,
  `EventSpecialItemId` int DEFAULT NULL,
  `StartDate` datetime DEFAULT NULL,
  `WOType` int DEFAULT NULL,
  `ExternalWOId` int DEFAULT NULL,
  `PropertyExternalId` int DEFAULT NULL,
  `VendorInternalId` int DEFAULT NULL,
  `FrequencyCount` decimal(18,10) DEFAULT NULL,
  `ResolvedReason` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ResolvedDate` datetime DEFAULT NULL,
  PRIMARY KEY (`WODetailId`),
  KEY `InvoiceId` (`InvoiceId`) USING BTREE,
  KEY `GLCodeId` (`GLCodeId`) USING BTREE,
  KEY `WODetails_ExternalWOId` (`ComputedExternalWOId`(768)) USING BTREE,
  KEY `WODetails_ibfk_1` (`WOId`) USING BTREE,
  CONSTRAINT `WODetails_ibfk_1` FOREIGN KEY (`WOId`) REFERENCES `WO` (`WOId`) ON DELETE SET NULL ON UPDATE RESTRICT,
  CONSTRAINT `WODetails_ibfk_2` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `WODetails_ibfk_3` FOREIGN KEY (`GLCodeId`) REFERENCES `GLCode` (`GLCodeId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=769246 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `WODetailsLog`
--

DROP TABLE IF EXISTS `WODetailsLog`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `WODetailsLog` (
  `WODetailId` int NOT NULL,
  `InvoiceId` int NOT NULL,
  `WODetail` varchar(10000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Matched` bit(1) NOT NULL,
  PRIMARY KEY (`WODetailId`,`InvoiceId`),
  KEY `InvoiceId` (`InvoiceId`) USING BTREE,
  CONSTRAINT `WODetailsLog_ibfk_1` FOREIGN KEY (`InvoiceId`) REFERENCES `Invoice` (`InvoiceId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `WOTemp`
--

DROP TABLE IF EXISTS `WOTemp`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `WOTemp` (
  `WOId` int NOT NULL AUTO_INCREMENT,
  `ExternalWOId` varchar(1500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `WONumber` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ServiceDescription` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `EquipmentName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ServiceArea` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorId` int NOT NULL,
  `PropertyId` int NOT NULL,
  `ServiceDate` datetime DEFAULT NULL,
  `ServiceEndDate` datetime DEFAULT NULL,
  `Quantity` decimal(18,10) NOT NULL,
  `UnitCost` decimal(18,10) DEFAULT NULL,
  `HaulRate` decimal(18,10) DEFAULT NULL,
  `ClientId` int NOT NULL,
  `Frequency` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FrequencyCount` decimal(18,10) DEFAULT NULL,
  `WOType` int NOT NULL,
  `AccountNumber` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `GLCodeId` int DEFAULT NULL,
  `PropertyEquipmentAssignmentId` int DEFAULT NULL,
  `PricingAssignmentId` int DEFAULT NULL,
  `EventSpecialItemId` int DEFAULT NULL,
  `StartDate` datetime DEFAULT NULL,
  `PropertyExternalId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorInternalId` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`WOId`),
  KEY `PropertyId` (`PropertyId`) USING BTREE,
  KEY `VendorId` (`VendorId`) USING BTREE,
  KEY `ClientId` (`ClientId`) USING BTREE,
  KEY `wo_ibfk_4` (`GLCodeId`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=64843 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `WOToWODetailMatch`
--

DROP TABLE IF EXISTS `WOToWODetailMatch`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `WOToWODetailMatch` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `WODetailId` int DEFAULT NULL,
  `WOId` int DEFAULT NULL,
  `WOSummary` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `MatchedDate` datetime DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`ID`),
  KEY `WOToWODetailMatch_WODetailId_IDX` (`WODetailId`) USING BTREE,
  KEY `WOToWODetailMatch_WOId_IDX` (`WOId`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=139621 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `Warehouse`
--

DROP TABLE IF EXISTS `Warehouse`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `Warehouse` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `ClientId` int NOT NULL,
  `ClientCompanyId` int DEFAULT NULL,
  `Code` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UseAsLocation` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`Id`),
  KEY `FK_Warehouse_ClientId` (`ClientId`) USING BTREE,
  KEY `FK_Warehouse_ClientCompanyId` (`ClientCompanyId`) USING BTREE,
  CONSTRAINT `Warehouse_ibfk_1` FOREIGN KEY (`ClientCompanyId`) REFERENCES `ClientCompany` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `Warehouse_ibfk_2` FOREIGN KEY (`ClientId`) REFERENCES `Client` (`ClientId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=36 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `WarehouseClass`
--

DROP TABLE IF EXISTS `WarehouseClass`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `WarehouseClass` (
  `WarehouseId` int NOT NULL,
  `ClassId` int NOT NULL,
  PRIMARY KEY (`WarehouseId`,`ClassId`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `WarehouseDepartment`
--

DROP TABLE IF EXISTS `WarehouseDepartment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `WarehouseDepartment` (
  `Id` int NOT NULL,
  `WarehouseId` int DEFAULT NULL,
  `DepartmentId` int DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `WarehouseId` (`WarehouseId`) USING BTREE,
  KEY `DepartmentId` (`DepartmentId`) USING BTREE,
  CONSTRAINT `WarehouseDepartment_ibfk_1` FOREIGN KEY (`WarehouseId`) REFERENCES `Warehouse` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `WarehouseDepartment_ibfk_2` FOREIGN KEY (`DepartmentId`) REFERENCES `Department` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `WarehouseItem`
--

DROP TABLE IF EXISTS `WarehouseItem`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `WarehouseItem` (
  `WarehouseId` int NOT NULL,
  `ItemId` int NOT NULL,
  PRIMARY KEY (`WarehouseId`,`ItemId`),
  KEY `ItemId` (`ItemId`) USING BTREE,
  CONSTRAINT `WarehouseItem_ibfk_1` FOREIGN KEY (`WarehouseId`) REFERENCES `Warehouse` (`Id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `WarehouseItem_ibfk_2` FOREIGN KEY (`ItemId`) REFERENCES `Item` (`ItemId`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `WithHoldingTax`
--

DROP TABLE IF EXISTS `WithHoldingTax`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `WithHoldingTax` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `OrgId` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `WithHoldingTax` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=72 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `__MigrationHistory`
--

DROP TABLE IF EXISTS `__MigrationHistory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `__MigrationHistory` (
  `MigrationId` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `ContextKey` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Model` longblob NOT NULL,
  `ProductVersion` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`MigrationId`,`ContextKey`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `_x_Client`
--

DROP TABLE IF EXISTS `_x_Client`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `_x_Client` (
  `ClientId` int NOT NULL,
  `Security_Password_MinLength` int NOT NULL DEFAULT (8),
  `Security_Password_RequireNumbers` bit(1) NOT NULL DEFAULT (1),
  `Security_Password_RequireUppercase` bit(1) NOT NULL DEFAULT (1),
  `Security_Password_RequireLowercase` bit(1) NOT NULL DEFAULT (1),
  `Security_Password_RequireSpecialChar` bit(1) NOT NULL DEFAULT (1),
  `Security_Password_RestrictRepeatingChar` bit(1) NOT NULL DEFAULT (0),
  `Security_Password_Attempts` tinyint NOT NULL DEFAULT (7),
  `Security_Password_ExpirationDays` int NOT NULL DEFAULT (60),
  `Security_Password_History` tinyint NOT NULL DEFAULT (-(1)),
  `Security_Authentication_Locations` tinyint NOT NULL DEFAULT (3),
  `Security_Authentication_Check` tinyint NOT NULL DEFAULT (3),
  `Security_Deactivate_InactiveUsersDays` int NOT NULL DEFAULT (60),
  `Security_Deactivate_NotifyAdminsDays` tinyint NOT NULL DEFAULT (3),
  PRIMARY KEY (`ClientId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `_x_ClientCompany`
--

DROP TABLE IF EXISTS `_x_ClientCompany`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `_x_ClientCompany` (
  `Id` int NOT NULL,
  `PaymentEnabled` tinyint DEFAULT NULL,
  `PaymentProvider` varchar(20) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PaymentCustomerCode` varchar(50) COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`),
  CONSTRAINT `_x_ClientCompany_ClientCompany_ID` FOREIGN KEY (`Id`) REFERENCES `ClientCompany` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `_x_ClientParameters`
--

DROP TABLE IF EXISTS `_x_ClientParameters`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `_x_ClientParameters` (
  `ClientId` int NOT NULL,
  `ParamKey` varchar(100) COLLATE utf8mb4_general_ci NOT NULL,
  `ParamValue` text COLLATE utf8mb4_general_ci,
  PRIMARY KEY (`ClientId`,`ParamKey`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci AVG_ROW_LENGTH=16384 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `_x_Email`
--

DROP TABLE IF EXISTS `_x_Email`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `_x_Email` (
  `Id` char(36) COLLATE utf8mb4_general_ci NOT NULL,
  `RetryDate` datetime DEFAULT NULL,
  `RetryCount` int DEFAULT NULL,
  `ErrorMessage` varchar(250) COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `_x_PaymentStatus`
--

DROP TABLE IF EXISTS `_x_PaymentStatus`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `_x_PaymentStatus` (
  `Id` int NOT NULL,
  `PaymentDate` date DEFAULT NULL,
  `PaymentAmount` decimal(18,2) NOT NULL,
  `PaymentProvider` varchar(20) COLLATE utf8mb4_general_ci NOT NULL,
  `PaymentMethod` varchar(50) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PaymentReference` varchar(50) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PaymentNumber` varchar(50) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PaymentExternalId` varchar(100) COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci AVG_ROW_LENGTH=3276 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `_x_UserParameters`
--

DROP TABLE IF EXISTS `_x_UserParameters`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `_x_UserParameters` (
  `UserId` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `LaunchPage` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT 'Home',
  `UseSmartSearch` int DEFAULT '0',
  `DisableNotifications` tinyint DEFAULT '0',
  `IsExceptionHandler` tinyint DEFAULT '0',
  `AccessCode` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AccessTail` char(2) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `AccessDate` datetime DEFAULT NULL,
  `FailCount` tinyint DEFAULT '0',
  `EmployeeTypeId` int DEFAULT NULL,
  `EmployeeVendorId` int DEFAULT NULL,
  `EmployeeDevice` varchar(100) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ExpenseSMARTVersion` varchar(50) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `ExpenseSMARTLastAccess` datetime DEFAULT NULL,
  `NewEmployeeDevice` varchar(100) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `OTP` varchar(10) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DisableSourceNotifications` varchar(1000) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DefaultGridSize` int DEFAULT (10),
  PRIMARY KEY (`UserId`),
  KEY `_x_UserParameters_EmployeeTypeId` (`EmployeeTypeId`),
  KEY `_x_UserParameters_EmployeeVendorId` (`EmployeeVendorId`),
  CONSTRAINT `_x_UserParameters_EmployeeTypeId` FOREIGN KEY (`EmployeeTypeId`) REFERENCES `ClientEmployeeType` (`EmployeeTypeId`),
  CONSTRAINT `_x_UserParameters_EmployeeVendorId` FOREIGN KEY (`EmployeeVendorId`) REFERENCES `Vendor` (`VendorId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `closedpot`
--

DROP TABLE IF EXISTS `closedpot`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `closedpot` (
  `PONumber` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorNumber` varchar(7) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `RcvdQty` decimal(12,6) DEFAULT NULL,
  `UnitCost` decimal(10,5) DEFAULT NULL,
  `LineNo` int DEFAULT NULL,
  `Description` varchar(51) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Amount` decimal(8,2) DEFAULT NULL,
  `GLCode` varchar(11) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `RecievedTransactionId` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `A` varchar(6) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `coinstar_emails`
--

DROP TABLE IF EXISTS `coinstar_emails`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `coinstar_emails` (
  `date_time_utc` datetime DEFAULT NULL,
  `connector_id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `recipient_address` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `recipient_status` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
  `total_bytes` int DEFAULT NULL,
  `recipient_count` int DEFAULT NULL,
  `related_recipient_address` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `message_subject` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `sender_address` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `return_path` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `dec3`
--

DROP TABLE IF EXISTS `dec3`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `dec3` (
  `6937` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `invoiceDocsSeq`
--

DROP TABLE IF EXISTS `invoiceDocsSeq`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `invoiceDocsSeq` (
  `Id` int DEFAULT NULL,
  `InvoiceId` int DEFAULT NULL,
  `Url` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `invoiceList_2016-05-30Final`
--

DROP TABLE IF EXISTS `invoiceList_2016-05-30Final`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `invoiceList_2016-05-30Final` (
  `invoiceId` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `invoiceNumber` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `grossAmount` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Temporary view structure for view `keterPageCount`
--

DROP TABLE IF EXISTS `keterPageCount`;
/*!50001 DROP VIEW IF EXISTS `keterPageCount`*/;
SET @saved_cs_client     = @@character_set_client;
/*!50503 SET character_set_client = utf8mb4 */;
/*!50001 CREATE VIEW `keterPageCount` AS SELECT 
 1 AS `PageCount`*/;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `new_card`
--

DROP TABLE IF EXISTS `new_card`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `new_card` (
  `lastFour` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `nov1`
--

DROP TABLE IF EXISTS `nov1`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `nov1` (
  `lastFour` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `nov22`
--

DROP TABLE IF EXISTS `nov22`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `nov22` (
  `lastFour` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `oct20`
--

DROP TABLE IF EXISTS `oct20`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `oct20` (
  `lastFour` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `table 24`
--

DROP TABLE IF EXISTS `table 24`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `table 24` (
  `STORE` varchar(2) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `STORE NAME` varchar(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Department` varchar(7) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Approver First Name` varchar(6) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Approver Last Name` varchar(7) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Approver Email` varchar(24) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  ` Maximum Amount Limit` varchar(8) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Approver First NameA` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Approver Last NameA` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Approver EmailA` varchar(49) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `table 9`
--

DROP TABLE IF EXISTS `table 9`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `table 9` (
  `VendorName` varchar(44) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorNo` varchar(9) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FN1` varchar(7) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `LN1` varchar(7) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `FN2` varchar(9) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `LN2` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `COMPL` varchar(11) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorId` int NOT NULL,
  `User1` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `User2` varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `Comp` int NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `tabletmpapp`
--

DROP TABLE IF EXISTS `tabletmpapp`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tabletmpapp` (
  `Vendor Name` varchar(147) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Department` varchar(42) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Approver First Name1` varchar(69) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Approver Last Name1` varchar(42) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Approver Email1` varchar(135) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Approver First Name2` varchar(51) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Approver Last Name2` varchar(51) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Approver Email2` varchar(153) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Maximum Amount Limit` varchar(33) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Approver First Name3` varchar(69) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Approver Last Name3` varchar(42) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Approver Email3` varchar(135) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorId` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `DepartmentId` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserId1` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserId2` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `UserId3` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorId2` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `VendorId3` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `xxList`
--

DROP TABLE IF EXISTS `xxList`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `xxList` (
  `id` int NOT NULL AUTO_INCREMENT,
  `date_time_utc` datetime DEFAULT NULL,
  `connector_id` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `recipient_address` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `recipient_status` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `total_bytes` int DEFAULT NULL,
  `recipient_count` int DEFAULT NULL,
  `related_recipient_address` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `message_subject` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `sender_address` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `return_path` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=14313 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `zz_Approvers`
--

DROP TABLE IF EXISTS `zz_Approvers`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `zz_Approvers` (
  `CId` bigint DEFAULT NULL,
  `UserId` char(36) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Level` int DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `zz_InvoicesInLimbo_Steven`
--

DROP TABLE IF EXISTS `zz_InvoicesInLimbo_Steven`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `zz_InvoicesInLimbo_Steven` (
  `ClientId` int DEFAULT NULL,
  `InvoiceId` int DEFAULT NULL,
  `ApprovalStepId_Calc` int DEFAULT NULL,
  `UserId` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,
  `_DateLoaded` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping routines for database 'dbQA'
--
/*!50003 DROP FUNCTION IF EXISTS `AddDays` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `AddDays`(dateToadd datetime, numberOfDays int) RETURNS datetime
BEGIN
  DECLARE dt datetime;
  SET dt = DATE_ADD(dateToadd, INTERVAL numberOfDays DAY);
  RETURN dt;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `BusinessDays` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `BusinessDays`(startDate DATE, endDate DATE) RETURNS int
    DETERMINISTIC
BEGIN
    DECLARE totalDays INT;
    DECLARE weekendDays INT;
    
    -- Get total days between the two dates
    SET totalDays = DATEDIFF(endDate, startDate) + 1;
    
    -- Calculate weekends (Saturday, Sunday)
    SET weekendDays = 
        (WEEKDAY(endDate) - WEEKDAY(startDate) + totalDays) DIV 7 * 2 +
        (CASE
            WHEN WEEKDAY(startDate) = 5 THEN 1
            WHEN WEEKDAY(startDate) = 6 AND WEEKDAY(endDate) <> 6 THEN 1
            ELSE 0
        END) +
        (CASE
            WHEN WEEKDAY(endDate) = 5 THEN 1
            ELSE 0
        END);
    
    RETURN totalDays - weekendDays;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `ConvertToDecimal` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `ConvertToDecimal`(stringValue varchar(256)) RETURNS decimal(18,2)
BEGIN
  DECLARE decimalValue decimal(18, 2);
  SET decimalValue = CAST(stringValue AS decimal(18, 2));
  RETURN decimalValue;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `CountWeekDays` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `CountWeekDays`(date1 datetime, date2 datetime) RETURNS int
BEGIN
  DECLARE result int;
  SET result =
  ((date2 - date1) - 2 * FLOOR((date2 - date1) / 7) - (SIGN((date2, 'D') -
  (date1, 'D')), -1, 2, 0) + ((date1, 'D'), 7, 1, 0) -
  ((date2, 'D'), 7, 1, 0));
  RETURN result;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `DiffDays` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `DiffDays`(dateFrom datetime, dateTo datetime) RETURNS int
BEGIN
  DECLARE dif int;
  SELECT
    DATEDIFF(dateTo, dateFrom) INTO dif;
  RETURN dif;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `dvrt_GetBuyerName` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `dvrt_GetBuyerName`(invoiceId int) RETURNS varchar(255) CHARSET utf8mb3
BEGIN
  RETURN (SELECT
      CONCAT(u.FirstName, ' ', u.LastName)
    FROM `PO` AS p
      INNER JOIN Invoice i
        ON i.PONumber = p.PONumber
      INNER JOIN `User` AS u
        ON u.UserId = p.PurchaserId
    WHERE i.InvoiceId = invoiceId LIMIT 1);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `ExistsInApprovalHistory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `ExistsInApprovalHistory`(paramInvoiceId int, paramFieldName char(17), paramSearchValue varchar(100), likeStartParam char(1)) RETURNS tinyint(1)
BEGIN

  IF (paramFieldName = 'GLCode') THEN
    RETURN (
    EXISTS (SELECT
        *
      FROM ApprovalHistory ah
      USE INDEX (IX_InvoiceId, IX_GLCodeId)
        INNER JOIN GLCode gl
          ON ah.GLCodeId = gl.GLCodeId
      WHERE ah.InvoiceId = paramInvoiceId
      AND (gl.GLCodeName LIKE CONCAT(likeStartParam, paramSearchValue, '%')
      OR gl.Desccription LIKE CONCAT(likeStartParam, paramSearchValue, '%'))) OR
    EXISTS (SELECT
        *
      FROM PendingApprovalHistory pah
      USE INDEX (IX_InvoiceId, IX_GLCodeId)
        INNER JOIN GLCode gl
          ON pah.GLCodeId = gl.GLCodeId
      WHERE pah.InvoiceId = paramInvoiceId
      AND (gl.GLCodeName LIKE CONCAT(likeStartParam, paramSearchValue, '%')
      OR gl.Desccription LIKE CONCAT(likeStartParam, paramSearchValue, '%'))));

  ELSEIF (paramFieldName = 'ProjectType') THEN
    RETURN (
    EXISTS (SELECT
        *
      FROM ApprovalHistory ah
      USE INDEX (IX_InvoiceId, IX_ProjectId)
        INNER JOIN ProjectType p
          ON ah.ProjectId = p.Id
      WHERE ah.InvoiceId = paramInvoiceId
      AND (p.ProjectName LIKE CONCAT(likeStartParam, paramSearchValue, '%')
      OR p.Description LIKE CONCAT(likeStartParam, paramSearchValue, '%'))) OR
    EXISTS (SELECT
        *
      FROM PendingApprovalHistory pah
      USE INDEX (IX_InvoiceId, IX_ProjectId)
        INNER JOIN ProjectType p
          ON pah.ProjectId = p.Id
      WHERE pah.InvoiceId = paramInvoiceId
      AND (p.ProjectName LIKE CONCAT(likeStartParam, paramSearchValue, '%')
      OR p.Description LIKE CONCAT(likeStartParam, paramSearchValue, '%'))));

  ELSEIF (paramFieldName = 'GLDescription') THEN
    RETURN (
    EXISTS (SELECT
        *
      FROM ApprovalHistory ah
        INNER JOIN Invoice i
          ON i.InvoiceId = ah.InvoiceId
      WHERE i.InvoiceId = paramInvoiceId
      AND ah.InvoiceId = paramInvoiceId
      AND i.Description LIKE CONCAT(likeStartParam, paramSearchValue, '%')));

  ELSEIF (paramFieldName = 'CompanyCode') THEN
    RETURN (
    EXISTS (SELECT
        *
      FROM ApprovalHistory ah
        INNER JOIN Invoice i
          ON ah.InvoiceId = i.InvoiceId
      WHERE i.InvoiceId = paramInvoiceId
      AND ah.InvoiceId = paramInvoiceId
      AND (ah.CompanyCode LIKE CONCAT(likeStartParam, paramSearchValue, '%')
      OR i.CompanyCode LIKE CONCAT(likeStartParam, paramSearchValue, '%'))));

  ELSEIF (paramFieldName = 'Department') THEN
    RETURN (
    EXISTS (SELECT
        *
      FROM ApprovalHistory ah
      USE INDEX (IX_InvoiceId, IX_DepartmentId)
        INNER JOIN Department d
          ON ah.DepartmentId = d.Id
      WHERE ah.InvoiceId = paramInvoiceId
      AND (d.DepartmentName LIKE CONCAT(likeStartParam, paramSearchValue, '%')
      OR d.Description LIKE CONCAT(likeStartParam, paramSearchValue, '%'))));
  ELSE
    RETURN FALSE;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetActiveTemporaryAssignorForAssignee` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetActiveTemporaryAssignorForAssignee`(paramUserId char(36), paramCurrentDate datetime, paramWorkflowType int) RETURNS char(36) CHARSET latin1
BEGIN
  RETURN (SELECT
      UserReassignmentHistory.SourceUserId
    FROM `UserReassignmentHistory`
    WHERE UserReassignmentHistory.TargetUserId = paramUserId
    AND UserReassignmentHistory.IsPermanent = FALSE
    AND (paramWorkflowType = 2
    OR UserReassignmentHistory.WorkflowType = 2
    OR UserReassignmentHistory.WorkflowType = paramWorkflowType)
    AND (UserReassignmentHistory.DateFrom <= paramCurrentDate
    AND (UserReassignmentHistory.DateTo IS NULL
    OR UserReassignmentHistory.DateTo > paramCurrentDate)) LIMIT 1);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetActiveTemporaryAssignorForAssigneeList` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetActiveTemporaryAssignorForAssigneeList`(paramUserId char(36), paramCurrentDate datetime, paramWorkflowType int) RETURNS char(36) CHARSET latin1
BEGIN
  RETURN (SELECT
      UserReassignmentHistory.SourceUserId
    FROM `UserReassignmentHistory`
    WHERE UserReassignmentHistory.TargetUserId = paramUserId
    AND UserReassignmentHistory.IsPermanent = FALSE
    AND (paramWorkflowType = 2
    OR UserReassignmentHistory.WorkflowType = 2
    OR UserReassignmentHistory.WorkflowType = paramWorkflowType)
    AND (UserReassignmentHistory.DateFrom <= paramCurrentDate
    AND (UserReassignmentHistory.DateTo IS NULL
    OR UserReassignmentHistory.DateTo > paramCurrentDate)));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetAssignedTosString` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetAssignedTosString`(invoiceId int) RETURNS varchar(255) CHARSET utf8mb3
BEGIN

  RETURN (SELECT
      GROUP_CONCAT(DISTINCT CONCAT(LastName, ', ', FirstName) SEPARATOR '; ')
    FROM (SELECT
        u.`FirstName`,
        u.`LastName`
      FROM UserInvoiceAssignment uia
        INNER JOIN `User` u
          ON uia.UserId = u.UserId
      WHERE uia.InvoiceId = invoiceId
      UNION
      SELECT
        tu.`FirstName`,
        tu.`LastName`
      FROM UserInvoiceAssignment uia2
        INNER JOIN UserReassignmentHistory urh
          ON uia2.UserId = urh.SourceUserId
        INNER JOIN `User` tu
          ON urh.TargetUserId = tu.UserId
      WHERE uia2.InvoiceId = invoiceId
      AND urh.IsPermanent <> TRUE
      AND (urh.WorkflowType = 3
      OR urh.WorkflowType = 0)
      AND urh.DateFrom <= NOW()
      AND (urh.DateTo IS NULL
      OR urh.DateTo > NOW())) AS InvoiceAssignment2
    GROUP BY NULL);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetBuyerName` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetBuyerName`(invoiceId int) RETURNS varchar(255) CHARSET utf8mb3
BEGIN
  RETURN (SELECT
      CONCAT(u.FirstName, ' ', u.LastName)
    FROM `PO` AS p
      INNER JOIN `LineItemDetail` AS l
        ON l.POId = p.Id
      INNER JOIN `User` AS u
        ON u.UserId = p.PurchaserId
    WHERE l.InvoiceId = invoiceId
    GROUP BY l.InvoiceId);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetBuyerNameNew` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetBuyerNameNew`(invoiceId int) RETURNS varchar(255) CHARSET utf8mb3
BEGIN
  RETURN (SELECT
      CONCAT(u.FirstName, ' ', u.LastName)
    FROM `PO` AS p
      INNER JOIN `LineItemDetail` AS l
        ON l.POId = p.Id
      INNER JOIN `User` AS u
        ON u.UserId = p.PurchaserId
    WHERE l.InvoiceId = invoiceId
    GROUP BY l.InvoiceId);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetDaysFromInvoiceHisory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetDaysFromInvoiceHisory`(invoiceId int, approvalStatusId int, daysAction varchar(250)) RETURNS int
BEGIN
  DECLARE retval int;
  IF (daysAction = 'DaysInCaptured') THEN
    IF EXISTS (SELECT
          *
        FROM InvoiceHistory ih
        WHERE ih.InvoiceId = invoiceId
        AND (ih.Field = "Invoice Status"
        OR ih.Field = "ApprovalStatusId")
        AND ih.InitialStatus <> NULL
        AND ih.InitialStatus = 1
        AND approvalStatusId <> 1) THEN
      RETURN (1);
    ELSE
      RETURN (9);
    END IF;

  ELSEIF (daysAction = 'DaysInException') THEN
    RETURN (1);
  ELSEIF (daysAction = 'DaysInInApproval') THEN
    RETURN (1);
  ELSEIF (daysAction = 'DaysToAccepted') THEN
    RETURN (1);
  ELSE
    RETURN 1;
  END IF;

  RETURN 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetGLDescriptionsFromApprovalHistory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetGLDescriptionsFromApprovalHistory`(invoiceId int) RETURNS varchar(255) CHARSET utf8mb3
BEGIN
  CASE
    WHEN EXISTS (SELECT
          *
        FROM ApprovalHistory ah
        WHERE ah.InvoiceId = invoiceId) THEN RETURN (SELECT
            GROUP_CONCAT(DISTINCT ah.SpecialNote SEPARATOR ';') AS GLDescription
          FROM ApprovalHistory ah
          WHERE ah.InvoiceId = invoiceId
          GROUP BY NULL);
    WHEN EXISTS (SELECT
          *
        FROM PendingApprovalHistory pah
        WHERE pah.InvoiceId = invoiceId) THEN RETURN (SELECT
            GROUP_CONCAT(DISTINCT ah.SpecialNote SEPARATOR ';') AS GLDescription
          FROM PendingApprovalHistory ah
          WHERE ah.InvoiceId = invoiceId
          GROUP BY NULL);
    ELSE RETURN "";
  END CASE;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetGLNumbersFromApprovalHistory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetGLNumbersFromApprovalHistory`(invoiceId int) RETURNS varchar(255) CHARSET utf8mb3
BEGIN
  CASE
    WHEN EXISTS (SELECT
          *
        FROM ApprovalHistory ah
        WHERE ah.InvoiceId = invoiceId) THEN RETURN (SELECT
            GROUP_CONCAT(DISTINCT gl.GLCodeName SEPARATOR ';') AS GLCodeName
          FROM ApprovalHistory ah
          USE INDEX (IX_InvoiceId, IX_GLCodeId)
            INNER JOIN GLCode gl
              ON ah.GLCodeId = gl.GLCodeId
          WHERE ah.InvoiceId = invoiceId
          GROUP BY NULL);
    WHEN EXISTS (SELECT
          *
        FROM PendingApprovalHistory pah
        WHERE pah.InvoiceId = invoiceId) THEN RETURN (SELECT
            GROUP_CONCAT(DISTINCT gl.GLCodeName SEPARATOR ';') AS GLCodeName
          FROM PendingApprovalHistory ah
          USE INDEX (IX_InvoiceId, IX_GLCodeId)
            INNER JOIN GLCode gl
              ON ah.GLCodeId = gl.GLCodeId
          WHERE ah.InvoiceId = invoiceId
          GROUP BY NULL);
    ELSE RETURN "";
  END CASE;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetGLNumbersFromLineItemDetail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetGLNumbersFromLineItemDetail`(invoiceId INT) RETURNS varchar(255) CHARSET utf8mb3
BEGIN  
CASE
    WHEN EXISTS (SELECT
          *
        FROM LineItemDetail lid
        WHERE lid.InvoiceId = invoiceId) THEN RETURN (SELECT
            GROUP_CONCAT(DISTINCT lid.GLCode SEPARATOR ';') AS GLCodeName
          FROM LineItemDetail lid
          WHERE lid.InvoiceId = invoiceId);
    ELSE RETURN "";
  END CASE;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetInvoiceComment` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetInvoiceComment`(invoiceId int, isPaused bit) RETURNS varchar(2048) CHARSET utf8mb3
BEGIN
  DECLARE COMMENT varchar(2048);
  IF (isPaused = TRUE) THEN
    SET COMMENT = (SELECT
        CONCAT(CONVERT(i.Comment USING utf8mb4),
        ', ',
        CONVERT(p.Comment USING utf8mb4))
      FROM Invoice i
        LEFT OUTER JOIN PausedInvoice p
          ON i.InvoiceId = p.InvoiceId
      WHERE i.InvoiceId = invoiceId);
  ELSE
    SET COMMENT = (SELECT
        CONVERT(i.Comment USING utf8mb4)
      FROM Invoice i
      WHERE i.InvoiceId = invoiceId);
  END IF;
  RETURN COMMENT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetNextLevelManager` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetNextLevelManager`(deptId int, userId char(36), fieldName varchar(50)) RETURNS varchar(255) CHARSET utf8mb3
BEGIN
  IF (fieldName = 'Email') THEN
    RETURN (SELECT
        u.Email
      FROM ApproverByAmount aba
        INNER JOIN User u
          ON u.UserId = aba.SecondApproverId
      WHERE aba.UserId = userId
      AND deptId IN (aba.CostCenters) LIMIT 1);

  ELSEIF (fieldName = 'Amount') THEN

    RETURN (SELECT
        aba.MaximumAllowedAmount
      FROM ApproverByAmount aba
        INNER JOIN User u
          ON u.UserId = aba.SecondApproverId
      WHERE aba.UserId = userId
      AND deptId IN (aba.CostCenters) LIMIT 1);

  ELSEIF (fieldName = 'UserId') THEN

    RETURN (SELECT
        u.UserId
      FROM ApproverByAmount aba
        INNER JOIN User u
          ON u.UserId = aba.SecondApproverId
      WHERE aba.UserId = userId
      AND deptId IN (aba.CostCenters) LIMIT 1);

  ELSEIF (fieldName = 'Name') THEN

    RETURN (SELECT
        CONCAT(u.FirstName, ' ', u.LastName) AS FullName
      FROM ApproverByAmount aba
        INNER JOIN User u
          ON u.UserId = aba.SecondApproverId
      WHERE aba.UserId = userId
      AND deptId IN (aba.CostCenters) LIMIT 1);

  ELSE
    RETURN '';
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetNextLevelManagerByUserOnly` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetNextLevelManagerByUserOnly`(userId char(36), fieldName varchar(50)) RETURNS varchar(255) CHARSET utf8mb3
BEGIN
  IF (fieldName = 'Email') THEN
    RETURN (SELECT
        u.Email
      FROM ApproverByAmount aba
        INNER JOIN User u
          ON u.UserId = aba.SecondApproverId
      WHERE aba.UserId = userId LIMIT 1);
  ELSEIF (fieldName = 'Amount') THEN
    RETURN (SELECT
        aba.MaximumAllowedAmount
      FROM ApproverByAmount aba
        INNER JOIN User u
          ON u.UserId = aba.SecondApproverId
      WHERE aba.UserId = userId LIMIT 1);
  ELSEIF (fieldName = 'UserId') THEN
    RETURN (SELECT
        u.UserId
      FROM ApproverByAmount aba
        INNER JOIN User u
          ON u.UserId = aba.SecondApproverId
      WHERE aba.UserId = userId LIMIT 1);
  ELSEIF (fieldName = 'Name') THEN
    RETURN (SELECT
        CONCAT(u.FirstName, ' ', u.LastName) AS FullName
      FROM ApproverByAmount aba
        INNER JOIN User u
          ON u.UserId = aba.SecondApproverId
      WHERE aba.UserId = userId LIMIT 1);
  ELSE
    RETURN '';
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetNextLevelManagerEmail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetNextLevelManagerEmail`(deptId int, userId char(36)) RETURNS varchar(255) CHARSET utf8mb3
BEGIN
  RETURN (SELECT
      u.Email
    FROM ApproverByAmount aba
      INNER JOIN User u
        ON u.UserId = aba.SecondApproverId
    WHERE aba.UserId = userId
    AND deptId IN (aba.CostCenters) LIMIT 1);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetNextLevelManagerLimit` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetNextLevelManagerLimit`(deptId int, userId char(36)) RETURNS varchar(255) CHARSET utf8mb3
BEGIN
  RETURN (SELECT
      aba.MaximumAllowedAmount
    FROM ApproverByAmount aba
      INNER JOIN User u
        ON u.UserId = aba.SecondApproverId
    WHERE aba.UserId = userId
    AND deptId IN (aba.CostCenters) LIMIT 1);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetProjectNamesFromApprovalHistory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetProjectNamesFromApprovalHistory`(invoiceId int, isPOInvoice bit) RETURNS varchar(255) CHARSET utf8mb3
BEGIN
  IF isPOInvoice = FALSE THEN
    RETURN (SELECT
        GROUP_CONCAT(DISTINCT p.ProjectName SEPARATOR ';') AS ProjectName
      FROM ApprovalHistory ah
      USE INDEX (IX_InvoiceId, IX_ProjectId)
        INNER JOIN ProjectType p
          ON ah.ProjectId = p.Id
      WHERE ah.InvoiceId = invoiceId
      GROUP BY NULL);
  ELSE

    RETURN (SELECT
        GROUP_CONCAT(DISTINCT p.ProjectName SEPARATOR ';') AS ProjectName
      FROM PendingApprovalHistory ah
      USE INDEX (IX_InvoiceId, IX_ProjectId)
        INNER JOIN ProjectType p
          ON ah.ProjectId = p.Id
      WHERE ah.InvoiceId = invoiceId
      GROUP BY NULL);
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `InvoiceExistsInUserCompanies` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `InvoiceExistsInUserCompanies`(clientId int, userId char(36), invoiceCompanyCode varchar(255)) RETURNS tinyint(1)
BEGIN
  RETURN (
  EXISTS (SELECT
      cc.CompanyCode
    FROM User u
      INNER JOIN UserClientCompanies ucc
        ON ucc.UserId = u.UserId
      INNER JOIN ClientCompany cc
        ON cc.Id = ucc.ClientCompanyId
    WHERE u.ClientId = clientId
    AND u.userId = userId
    AND cc.CompanyCode = invoiceCompanyCode));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `IsInvoiceAndUserCompanyMatch` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `IsInvoiceAndUserCompanyMatch`(paramUserId char(36), paramInvoiceId int) RETURNS tinyint(1)
BEGIN
  IF ((SELECT
        `User`.ClientCompanyId
      FROM `User`
      WHERE `User`.`UserId` = paramUserId) IS NULL
    AND (SELECT
        COUNT(*)
      FROM UserClientCompanies
      WHERE UserClientCompanies.UserId = paramUserId) = 0) THEN
    RETURN TRUE;
  ELSEIF ((SELECT
        ClientCompany.CompanyCode
      FROM `User`
        INNER JOIN ClientCompany
          ON ClientCompany.`Id` = `User`.`ClientCompanyId`
      WHERE `User`.`UserId` = paramUserId) = (SELECT
        CompanyCode
      FROM Invoice
      WHERE Invoice.`InvoiceId` = paramInvoiceId)) THEN
    RETURN TRUE;
  ELSEIF ((SELECT
        Invoice.`CompanyCode`
      FROM Invoice
      WHERE Invoice.`InvoiceId` = paramInvoiceId) IN (SELECT
        ClientCompany.`CompanyCode`
      FROM UserClientCompanies
        INNER JOIN ClientCompany
          ON UserClientCompanies.`UserId` = paramUserId
          AND UserClientCompanies.`ClientCompanyId` = ClientCompany.`Id`)) THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
  RETURN TRUE;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `IsInvoiceDepartmentInUserDepartments` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `IsInvoiceDepartmentInUserDepartments`(paramUserId char(36), paramInvoiceId int) RETURNS tinyint(1)
BEGIN
  RETURN (EXISTS (SELECT
      *
    FROM Invoice
    WHERE Invoice.`InvoiceId` = paramInvoiceId
    AND EXISTS (SELECT
        *
      FROM UserDepartment
      USE INDEX (IX_DepartmentId, IX_UserId)
      WHERE UserDepartment.UserId = paramUserId
      AND UserDepartment.`DepartmentId` = Invoice.`VendorSiteId`)));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `IsInvoiceTypeStatement` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `IsInvoiceTypeStatement`(paramInvoiceId int) RETURNS tinyint(1)
BEGIN
  RETURN (EXISTS (SELECT
      *
    FROM Invoice
    WHERE Invoice.`InvoiceId` = paramInvoiceId
    AND Invoice.`InvoiceType` = 'Statement'));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `IsPOHeaderDepartmentInUserDepartments` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `IsPOHeaderDepartmentInUserDepartments`(paramUserId char(36), paramPOHeaderId int) RETURNS tinyint(1)
BEGIN
  RETURN (EXISTS (SELECT
      *
    FROM POHeader
    WHERE POHeader.`POHeaderId` = paramPOHeaderId
    AND ((EXISTS (SELECT
        *
      FROM UserDepartment
      WHERE UserDepartment.UserId = paramUserId
      AND UserDepartment.`DepartmentId` = POHeader.`DepartmentId`))

    OR EXISTS (SELECT
        *
      FROM ApprovalStep
        INNER JOIN ApprovalSubStep
          ON ApprovalStep.`ApprovalStepId` = ApprovalSubStep.`ApprovalStepId`
        INNER JOIN ApprovalSubStepUser
          ON ApprovalSubStepUser.`ApprovalSubStepId` = `ApprovalSubStep`.`ApprovalSubStepId`
          AND ApprovalSubStepUser.`UserId` = paramUserId
        INNER JOIN ApprovalSubStepUserDepartment
          ON ApprovalSubStepUserDepartment.`ApprovalSubStepId` = ApprovalSubStep.`ApprovalSubStepId`
          AND ApprovalSubStepUserDepartment.`UserId` = ApprovalSubStepUser.`UserId`
        INNER JOIN POHeader
          ON `ApprovalSubStepUserDepartment`.`DepartmentId` = POHeader.`DepartmentId`
          AND POHeader.`POHeaderId` = paramPOHeaderId
      WHERE ApprovalStep.`ClientId` = POHeader.`ClientId`
      AND ApprovalStep.`WorkflowType` = 1))));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `PatIndex` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `PatIndex`(stringPattern varchar(250), target varchar(250)) RETURNS int
BEGIN
  RETURN POSITION(stringPattern IN target);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `SPLIT_STRING` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `SPLIT_STRING`(
	str VARCHAR(255) ,
	delim VARCHAR(12) ,
	pos INT
) RETURNS varchar(255) CHARSET utf8mb3
RETURN REPLACE(
	SUBSTRING(
		SUBSTRING_INDEX(str , delim , pos) ,
		CHAR_LENGTH(
			SUBSTRING_INDEX(str , delim , pos - 1)
		) + 1
	) ,
	delim ,
	''
) ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `TCASE` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `TCASE`(str text) RETURNS text CHARSET utf8mb3
    DETERMINISTIC
BEGIN
  DECLARE _result text DEFAULT '';
  DECLARE _space int DEFAULT 0;
  DECLARE last_space int DEFAULT 0;
  # handle NULL
  IF (str IS NULL) THEN
    RETURN NULL;
  END IF;
  # if 0 length string given
  IF (CHAR_LENGTH(str) = 0) THEN
    RETURN '';
  END IF;
  # upper case the first letter
  SET _result = UPPER(LEFT(str, 1));
  SET _space = LOCATE(' ', str);
  # loop through remaining spaces
  WHILE _space > 0 DO
    # add everything up to that space
    SET _result = CONCAT(_result, SUBSTRING(str, last_space + 2, _space - last_space - 1));
    # upper case the letter after the found space
    SET _result = CONCAT(_result, UPPER(SUBSTRING(str, _space + 1, 1)));
    # find next space
    SET last_space = _space;
    SET _space = LOCATE(' ', str, _space + 2);
  END WHILE;
  # add final section
  SET _result = CONCAT(_result, SUBSTRING(str, last_space + 2));
  RETURN _result;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `TruncateTime` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `TruncateTime`(dateValue datetime) RETURNS date
BEGIN
  RETURN DATE(dateValue);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `_x_AdvancedSearchFieldValuesDependency` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `_x_AdvancedSearchFieldValuesDependency`(
		Dependency 				MEDIUMTEXT,
		DependencyKeyValue 		varchar(100)
		) RETURNS varchar(1000) CHARSET utf8mb4 COLLATE utf8mb4_general_ci
BEGIN
	set Dependency = concat('■', Dependency, '■');
	set DependencyKeyValue = concat('■', DependencyKeyValue, '■');
	Set @DependencyKeyValueLocation = instr(Dependency, DependencyKeyValue);
	set @DependencyValue = null;
	if @DependencyKeyValueLocation > 0 THEN
		set Dependency 			= substring(Dependency, @DependencyKeyValueLocation + char_length(DependencyKeyValue), 9999);
		set @DependencyValue 	= substring_index(Dependency, '■', 1);
	end if;


	RETURN @DependencyValue;
	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `_x_DaysDiff` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `_x_DaysDiff`(
-- noformat
	pStartDate 			datetime,
	pEndDate 			datetime
	) RETURNS int
BEGIN

	set @Days = ifnull(datediff(ifnull(pEndDate, now()), pStartDate), 0);
	if @Days > 0 then 
		if time_to_sec(pEndDate) < TIME_TO_SEC(pStartDate) then 
			set @Days = @Days - 1;
		end if;
	end if;

	return @Days;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `_x_GetFormatedValue` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `_x_GetFormatedValue`(
-- noformat
	pCode 			mediumtext,
	pDescription 	mediumtext,
	pCodePosition	int
	) RETURNS mediumtext CHARSET utf8mb4 COLLATE utf8mb4_general_ci
BEGIN

	set @ReturnValue = '';
	if	pCodePosition = 1 THEN
		set @ReturnValue = concat('[', IFNULL(pCode, ''), '] ', IFNULL(pDescription, ''));
	elseif pCodePosition = 2 THEN
		set @ReturnValue = concat(IFNULL(pDescription, ''), ' [', IFNULL(pCode, ''), ']');
	else
		set @ReturnValue = IFNULL(pDescription, IFNULL(pCode, ''));
	end if;

	RETURN @ReturnValue;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `_x_GetInvoiceStatusName` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `_x_GetInvoiceStatusName`(ApprovalStatusId int) RETURNS varchar(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci
BEGIN

	IF ApprovalStatusId = 1 THEN
		RETURN 'Captured';
	END IF;
	IF ApprovalStatusId = 2 THEN
		RETURN 'Verified';
	END IF;
	IF ApprovalStatusId = 3 THEN
		RETURN 'InApproval';
	END IF;
	IF ApprovalStatusId = 4 THEN
		RETURN 'Approved';
	END IF;
	IF ApprovalStatusId = 5 THEN
		RETURN 'Accepted';
	END IF;
	IF ApprovalStatusId = 6 THEN
		RETURN 'Exception';
	END IF;
	IF ApprovalStatusId = 7 THEN
		RETURN 'Paid';
	END IF;
	IF ApprovalStatusId = 8 THEN
		RETURN 'Rejected';
	END IF;
	IF ApprovalStatusId = 9 THEN
		RETURN 'Failed';
	END IF;
	IF ApprovalStatusId = 10 THEN
		RETURN 'PaymentInitiated';
	END IF;
	IF ApprovalStatusId = 11 THEN
		RETURN 'FundRecieved';
	END IF;
	IF ApprovalStatusId = 12 THEN
		RETURN 'PaymentApproved';
	END IF;
	IF ApprovalStatusId = 13 THEN
		RETURN 'EFTSynced';
	END IF;
	IF ApprovalStatusId = 99 THEN
		RETURN 'POException';
	END IF;

	RETURN '';


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `_x_ReturnHHMMFromMin` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `_x_ReturnHHMMFromMin`(
-- noformat
	pTime 			int
	) RETURNS varchar(50) CHARSET utf8mb4 COLLATE utf8mb4_general_ci
BEGIN

	return date_format(date_add('2000-01-01', interval pTime minute), '%l:%i %p');

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `_x_ReturnReportDateKeyword` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `_x_ReturnReportDateKeyword`(
-- noformat
	pKeyWord 			varchar(100)
	) RETURNS date
BEGIN

	set @Today = date(convert_tz(UTC_timestamp(), 'GMT', @@session.time_zone));

	if pKeyWord = 'StartLastYear' THEN
		return date_sub(DATE_FORMAT(@Today ,'%Y-01-01'), interval 1 year);
	elseif pKeyWord = 'StartThisYear' THEN
		return DATE_FORMAT(@Today ,'%Y-01-01');
	elseif pKeyWord = 'StartLastMonth' THEN
		return date_sub(DATE_FORMAT(@Today ,'%Y-%m-01'), interval 1 month);
	elseif pKeyWord = 'StartThisMonth' THEN
		return DATE_FORMAT(@Today ,'%Y-%m-01');
	elseif pKeyWord = 'StartLastWeek' THEN
		return date_sub(date_sub(DATE(@Today + INTERVAL (7 - DAYOFWEEK(@Today)) DAY), interval 6 day), interval 7 day);
	elseif pKeyWord = 'StartThisWeek' THEN
		return date_sub(DATE(@Today + INTERVAL (7 - DAYOFWEEK(@Today)) DAY), interval 6 day);
	elseif pKeyWord = 'EndLastYear' THEN
		return date_sub(DATE_FORMAT(@Today ,'%Y-01-01'), interval 1 day);
	elseif pKeyWord = 'EndThisYear' THEN
		return DATE_FORMAT(@Today ,'%Y-12-31');
	elseif pKeyWord = 'EndLastMonth' THEN
		return date_sub(DATE_FORMAT(@Today ,'%Y-%m-01'), interval 1 day);
	elseif pKeyWord = 'EndThisMonth' THEN
		return last_day(@Today);
	elseif pKeyWord = 'EndLastWeek' THEN
		return date_sub(DATE(@Today + INTERVAL (7 - DAYOFWEEK(@Today)) DAY), interval 7 day);
	elseif pKeyWord = 'EndThisWeek' THEN
		return DATE(@Today + INTERVAL (7 - DAYOFWEEK(@Today)) DAY);


	elseif pKeyWord = 'ThisYear' THEN
		return DATE_FORMAT(@Today ,'%Y-12-31');
	elseif pKeyWord = 'ThisMonth' THEN
		return last_day(@Today);
	elseif pKeyWord = 'LastYear' THEN
		return date_sub(DATE_FORMAT(@Today ,'%Y-01-01'), interval 1 day);
	elseif pKeyWord = 'LastMonth' THEN
		return date_sub(DATE_FORMAT(@Today ,'%Y-%m-01'), interval 1 day);


	elseif pKeyWord = 'Yesterday' THEN
		return date_sub(@Today, interval 1 day);
	elseif pKeyWord = 'Today' THEN
		return @Today;
	else
		return null;
	end if;
	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `_x_SPLIT_STRING` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `_x_SPLIT_STRING`(str varchar(60000),
delim varchar(12),
pos int) RETURNS mediumtext CHARSET utf8mb4 COLLATE utf8mb4_general_ci
RETURN REPLACE(
	SUBSTRING(
	SUBSTRING_INDEX (str, delim, pos),
	CHAR_LENGTH(
	SUBSTRING_INDEX (str, delim, pos - 1)
	) + 1
	),
	delim,
	''
	) ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AddSplitAccounts` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `AddSplitAccounts`(IN sourceGL nvarchar(240), IN curGL nvarchar(240), IN perc double)
BEGIN
  IF EXISTS (SELECT
        *
      FROM GLCode
      WHERE ClientId = 72
      AND SourceGLCodeId IS NOT NULL
      AND Percentage IS NOT NULL
      AND (GLCodeName = curGL
      OR GLCodeName = CONCAT('*', curGL)
      OR GLCodeName = CONCAT('0', curGL)
      OR GLCodeName = CONCAT('*0', curGL))) THEN
    INSERT INTO GLCode (`ClientId`, `GLCodeId`, `GLCodeName`, `Desccription`, `ActivityRequired`, `SubAccount`, `IsProjectTypeRequred`, `IsSubProjectTypeRequired`, `ProjectType`, `SubProjectType`, `ClientCompanyId`, `IsActive`, `SourceGLCodeId`, `GLShortCode`, `LastActionDate`, `LastActionBy`, `ExternalId`, `GLCodeType`, `Percentage`)
      SELECT
        `ClientId`,
        (SELECT
            GLCodeId + 1
          FROM GLCode
          ORDER BY GLCodeId DESC LIMIT 1),
        `GLCodeName`,
        `Desccription`,
        `ActivityRequired`,
        `SubAccount`,
        `IsProjectTypeRequred`,
        `IsSubProjectTypeRequired`,
        `ProjectType`,
        `SubProjectType`,
        `ClientCompanyId`,
        `IsActive`,
        (SELECT
            GLCodeId
          FROM (SELECT
              GLCodeId
            FROM GLCode
            WHERE ClientId = 72
            AND GLCodeName = sourceGL
            GROUP BY GLCodeName) AS myTbl),
        `GLShortCode`,
        `LastActionDate`,
        `LastActionBy`,
        `ExternalId`,
        `GLCodeType`,
        perc
      FROM GLCode
      WHERE ClientId = 72
      AND SourceGLCodeId IS NOT NULL
      AND Percentage IS NOT NULL
      AND (GLCodeName = curGL
      OR GLCodeName = CONCAT('*', curGL)
      OR GLCodeName = CONCAT('0', curGL)
      OR GLCodeName = CONCAT('*0', curGL))
      ORDER BY GLCodeId DESC LIMIT 1;
  ELSE
    UPDATE GLCode
    SET GLCode.SourceGLCodeId = (SELECT
            GLCodeId
          FROM (SELECT
              GLCodeId
            FROM GLCode
            WHERE ClientId = 72
            AND GLCodeName = sourceGL
            GROUP BY GLCodeName) AS myTbl),
        Percentage = perc
    WHERE ClientId = 72
    AND (SourceGLCodeId IS NULL
    OR Percentage IS NULL)
    AND (GLCodeName = curGL
    OR GLCodeName = CONCAT('*', curGL)
    OR GLCodeName = CONCAT('0', curGL)
    OR GLCodeName = CONCAT('*0', curGL));
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AddUserReassignmentHistory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `AddUserReassignmentHistory`(IN newUserReassignmentHistoryId int, IN supportedWorkflowType int, IN clientId int)
BEGIN
  DECLARE AssignorUserId char(36) CHARSET utf8mb4 COLLATE utf8mb4_general_ci;
  DECLARE AssigneeUserId char(36) CHARSET utf8mb4 COLLATE utf8mb4_general_ci;
  DECLARE ReassignmentHistoryDate datetime;
  DECLARE CreatedByUserId char(36) CHARSET utf8mb4 COLLATE utf8mb4_general_ci;
  DECLARE AssignmentWorkflowType tinyint(4);
  DECLARE CreatedByFullName varchar(250) CHARSET utf8mb4 COLLATE utf8mb4_general_ci;
  DECLARE AssignorUserFullName varchar(250) CHARSET utf8mb4 COLLATE utf8mb4_general_ci;
  DECLARE AssigneeUserFullName varchar(250) CHARSET utf8mb4 COLLATE utf8mb4_general_ci;


  SELECT
    URAH.SourceUserId,
    URAH.TargetUserId,
    URAH.WorkflowType,
    URAH.CreatedDate,
    URAH.UserId,
    CONCAT(CBUser.LastName, ', ', CBUser.FirstName),
    CONCAT(ARUser.LastName, ', ', ARUser.FirstName),
    CONCAT(AEUser.LastName, ', ', AEUser.FirstName) INTO AssignorUserId, AssigneeUserId, AssignmentWorkflowType, ReassignmentHistoryDate, CreatedByUserId, CreatedByFullName, AssignorUserFullName, AssigneeUserFullName
  FROM UserReassignmentHistory URAH
    INNER JOIN `User` ARUser
      ON ARUser.UserId = URAH.SourceUserId
    INNER JOIN `User` AEUser
      ON AEUser.UserId = URAH.TargetUserId
    INNER JOIN `User` CBUser
      ON CBUser.UserId = URAH.UserId
  WHERE URAH.`ReassignUserHistoryId` = newUserReassignmentHistoryId;

  -- SET AssignorUserId = (SELECT URAH.SourceUserId FROM UserReassignmentHistory URAH WHERE URAH.`ReassignUserHistoryId` = newUserReassignmentHistoryId);
  -- SET AssigneeUserId = (SELECT URAH.TargetUserId FROM UserReassignmentHistory URAH WHERE URAH.`ReassignUserHistoryId` = newUserReassignmentHistoryId);
  -- SET AssignmentWorkflowType = (SELECT URAH.WorkflowType FROM UserReassignmentHistory URAH WHERE URAH.`ReassignUserHistoryId` = newUserReassignmentHistoryId);
  -- SET ReassignmentHistoryDate = (SELECT URAH.CreatedDate FROM UserReassignmentHistory URAH WHERE URAH.`ReassignUserHistoryId` = newUserReassignmentHistoryId);
  -- SET CreatedByUserId = (SELECT URAH.UserId FROM UserReassignmentHistory URAH WHERE URAH.`ReassignUserHistoryId` = newUserReassignmentHistoryId);





  DROP TEMPORARY TABLE IF EXISTS UserReassignmentHistoryWorkflowApprovalSubStepIds;
  CREATE TEMPORARY TABLE UserReassignmentHistoryWorkflowApprovalSubStepIds
  SELECT
    ApprovalSubStep.`ApprovalSubStepId`
  FROM ApprovalStep
    INNER JOIN ApprovalSubStep
      ON ApprovalStep.`ApprovalStepId` = ApprovalSubStep.`ApprovalStepId`
  WHERE ApprovalStep.`ClientId` = ClientId
  AND (AssignmentWorkflowType = 2
  OR ApprovalStep.`WorkflowType` = AssignmentWorkflowType);

  -- MOVE USER ROLES TO NEW USER
  INSERT INTO UserRoles (UserId, RoleId)
    SELECT
      AssigneeUserId,
      RoleId
    FROM UserRoles t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        RoleId,
        UserId
      FROM UserRoles t2
      WHERE t2.RoleId = t1.RoleId
      AND t2.UserId = AssigneeUserId);

  IF (AssignmentWorkflowType = supportedWorkflowType) THEN
    DELETE
      FROM UserRoles
    WHERE UserId = AssignorUserId;
  END IF;
  -- END OF MOVE USER ROLES

  -- MOVE APPROVER GLCODE
  INSERT INTO ApproverGLCode (UserId, GLCodeId)
    SELECT
      AssigneeUserId,
      GLCodeId
    FROM ApproverGLCode t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        GLCodeId,
        UserId
      FROM ApproverGLCode t2
      WHERE t2.GLCodeId = t1.GLCodeId
      AND t2.UserId = AssigneeUserId);

  IF (AssignmentWorkflowType = supportedWorkflowType) THEN
    DELETE
      FROM ApproverGLCode
    WHERE UserId = AssignorUserId;
  END IF;
  -- END OF MOVE APPROVER GLCODES

  -- MOVE USER DEPARTMENT
  INSERT INTO UserDepartment (UserId, DepartmentId, IsHomeDepartment)
    SELECT
      AssigneeUserId,
      DepartmentId,
      IsHomeDepartment
    FROM UserDepartment t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        DepartmentId
      FROM UserDepartment t2
      WHERE t2.DepartmentId = t1.DepartmentId
      AND t2.UserId = AssigneeUserId);

  IF (AssignmentWorkflowType = supportedWorkflowType) THEN
    DELETE
      FROM UserDepartment
    WHERE UserId = AssignorUserId;
  END IF;
  -- END OF MOVE USER DEPARTMENT	


  -- MOVE USER CLIENT COMPANIES
  INSERT INTO UserClientCompanies (UserId, ClientCompanyId)
    SELECT
      AssigneeUserId,
      ClientCompanyId
    FROM UserClientCompanies t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        ClientCompanyId
      FROM UserClientCompanies t2
      WHERE t2.ClientCompanyId = t1.ClientCompanyId
      AND t2.UserId = AssigneeUserId);

  IF (AssignmentWorkflowType = supportedWorkflowType) THEN
    DELETE
      FROM UserClientCompanies
    WHERE UserId = AssignorUserId;
  END IF;
  -- END OF MOVE USER CLIENT COMPANIES

  -- Select 'Top';
  -- MOVE CATCHALL SUB STEPS
  INSERT INTO ApprovalSubStepCatchAllUsers (UserId, ApprovalSubStepId, Alphabets, PickupFolderName)
    SELECT
      AssigneeUserId,
      ApprovalSubStepId,
      Alphabets,
      PickupFolderName
    FROM ApprovalSubStepCatchAllUsers t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        ApprovalSubStepCatchAllUserId,
        ApprovalSubStepId
      FROM ApprovalSubStepCatchAllUsers t2
      WHERE t2.ApprovalSubStepCatchAllUserId = t1.ApprovalSubStepCatchAllUserId
      AND t2.ApprovalSubStepId = t1.ApprovalSubStepId
      AND t2.UserId = AssigneeUserId)
    AND t1.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);

  DELETE
    FROM ApprovalSubStepCatchAllUsers
  WHERE UserId = AssignorUserId
    AND `ApprovalSubStepCatchAllUsers`.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);
  -- END OF MOVE CATCHALL SUB STEPS

  -- MOVE SUBSTEPUSER
  INSERT INTO ApprovalSubStepUser (UserId, ApprovalSubStepId, ManualAssignmentOnly, CompareByFilterIntersection)
    SELECT
      AssigneeUserId,
      ApprovalSubStepId,
      ManualAssignmentOnly,
      CompareByFilterIntersection
    FROM ApprovalSubStepUser t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        ApprovalSubStepId
      FROM ApprovalSubStepUser t2
      WHERE t2.ApprovalSubStepId = t1.ApprovalSubStepId
      AND t2.UserId = AssigneeUserId)
    AND t1.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);
  -- END MOVE SUBSTEPUSER

  -- MOVE APPROVALSUBSTEPUSERDEPARTMENT
  INSERT INTO ApprovalSubStepUserDepartment (UserId, ApprovalSubStepId, DepartmentId)
    SELECT
      AssigneeUserId,
      ApprovalSubStepId,
      DepartmentId
    FROM ApprovalSubStepUserDepartment t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        ApprovalSubStepId,
        DepartmentId
      FROM ApprovalSubStepUserDepartment t2
      WHERE t2.ApprovalSubStepId = t1.ApprovalSubStepId
      AND t2.DepartmentId = t1.DepartmentId
      AND t2.UserId = AssigneeUserId)
    AND t1.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);

  DELETE
    FROM ApprovalSubStepUserDepartment
  WHERE UserId = AssignorUserId
    AND `ApprovalSubStepUserDepartment`.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);
  -- END MOVE APPROVALSUBSTEPUSERDEPARTMENT


  -- MOVE APPROVALSUBSTEPUSERGL
  INSERT INTO ApprovalSubStepUserGL (UserId, ApprovalSubStepId, GLCodeId)
    SELECT
      AssigneeUserId,
      ApprovalSubStepId,
      GLCodeId
    FROM ApprovalSubStepUserGL t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        ApprovalSubStepId,
        GLCodeId
      FROM ApprovalSubStepUserGL t2
      WHERE t2.ApprovalSubStepId = t1.ApprovalSubStepId
      AND t2.GLCodeId = t1.GLCodeId
      AND t2.UserId = AssigneeUserId)
    AND t1.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);

  DELETE
    FROM ApprovalSubStepUserGL
  WHERE UserId = AssignorUserId
    AND ApprovalSubStepUserGL.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);
  -- END OF MOVE APPROVALSUBSTEPUSERGL

  -- MOVE APPROVALSUBSTEPUSERORGDATA
  INSERT INTO `ApprovalSubStepUserOrgData` (UserId, ApprovalSubStepId, OrgId)
    SELECT
      AssigneeUserId,
      ApprovalSubStepId,
      OrgId
    FROM ApprovalSubStepUserOrgData t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        ApprovalSubStepId,
        OrgId
      FROM ApprovalSubStepUserOrgData t2
      WHERE t2.ApprovalSubStepId = t1.ApprovalSubStepId
      AND t2.OrgId = t1.OrgId
      AND t2.UserId = AssigneeUserId)
    AND t1.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);

  DELETE
    FROM ApprovalSubStepUserOrgData
  WHERE UserId = AssignorUserId
    AND ApprovalSubStepUserOrgData.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);
  -- END OF MOVE APPROVALSUBSTEPUSERORGDATA

  -- MOVE APPROVALSUBSTEPUSERPROJECT
  INSERT INTO ApprovalSubStepUserProject (UserId, ApprovalSubStepId, ProjectTypeId)
    SELECT
      AssigneeUserId,
      ApprovalSubStepId,
      ProjectTypeId
    FROM ApprovalSubStepUserProject t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        ApprovalSubStepId,
        ProjectTypeId
      FROM ApprovalSubStepUserProject t2
      WHERE t2.ApprovalSubStepId = t1.ApprovalSubStepId
      AND t2.ProjectTypeId = t1.ProjectTypeId
      AND t2.UserId = AssigneeUserId)
    AND t1.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);

  DELETE
    FROM ApprovalSubStepUserProject
  WHERE UserId = AssignorUserId
    AND ApprovalSubStepUserProject.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);
  -- END OF MOVE APPROVALSUBSTEPUSERPROJECT


  -- MOVE APPROVALSUBSTEPUSERVENDOR
  INSERT INTO ApprovalSubStepUserVendor (UserId, VendorId, ApprovalSubStepId, FirstEscalationManagerId, SecondEscalationManagerId, ThirdEscalationManagerId, Duration)
    SELECT
      AssigneeUserId,
      VendorId,
      ApprovalSubStepId,
      FirstEscalationManagerId,
      SecondEscalationManagerId,
      ThirdEscalationManagerId,
      Duration
    FROM ApprovalSubStepUserVendor t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        VendorId,
        ApprovalSubStepId
      FROM ApprovalSubStepUserVendor t2
      WHERE t2.VendorId = t1.VendorId
      AND t2.ApprovalSubStepId = t1.ApprovalSubStepId
      AND t2.UserId = AssigneeUserId)
    AND t1.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);


  DELETE
    FROM ApprovalSubStepUserVendor
  WHERE UserId = AssignorUserId
    AND ApprovalSubStepUserVendor.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);

  -- END OF MOVE APPROVALSUBSTEPUSERVENDOR	

  -- MOVE APPROVALSUBSTEPUSERVENDORACCOUNTNUMBER
  INSERT INTO `ApprovalSubStepUserVendorAccountNumber` (UserId, VendorId, AccountNumber, ApprovalSubStepId, FirstEscalationManagerId, SecondEscalationManagerId, ThirdEscalationManagerId, Duration)
    SELECT
      AssigneeUserId,
      VendorId,
      AccountNumber,
      ApprovalSubStepId,
      FirstEscalationManagerId,
      SecondEscalationManagerId,
      ThirdEscalationManagerId,
      Duration
    FROM `ApprovalSubStepUserVendorAccountNumber` t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        VendorId,
        AccountNumber,
        ApprovalSubStepId
      FROM `ApprovalSubStepUserVendorAccountNumber` t2
      WHERE t2.VendorId = t1.VendorId
      AND t2.ApprovalSubStepId = t1.ApprovalSubStepId
      AND t2.AccountNumber = t1.AccountNumber
      AND t2.UserId = AssigneeUserId)
    AND t1.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);

  DELETE
    FROM ApprovalSubStepUserVendorAccountNumber
  WHERE UserId = AssignorUserId
    AND ApprovalSubStepUserVendorAccountNumber.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);
  -- END OF MOVE APPROVALSUBSTEPUSERVENDORACCOUNTNUMBER

  -- MOVE APPROVALSUBSTEPUSERVENDORALPHABET
  INSERT INTO `ApprovalSubStepUserVendorAlphabet` (UserId, ApprovalSubStepId, Alphabets)
    SELECT
      AssigneeUserId,
      ApprovalSubStepId,
      Alphabets
    FROM `ApprovalSubStepUserVendorAlphabet` t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        ApprovalSubStepId
      FROM `ApprovalSubStepUserVendorAlphabet` t2
      WHERE t2.ApprovalSubStepId = t1.ApprovalSubStepId
      AND t2.UserId = AssigneeUserId)
    AND t1.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);

  DELETE
    FROM ApprovalSubStepUserVendorAlphabet
  WHERE UserId = AssignorUserId
    AND ApprovalSubStepUserVendorAlphabet.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);
  -- END OF MOVE APPROVALSUBSTEPUSERVENDORALPHABET

  -- MOVE APPROVALSUBSTEPUSERVENDORDEPARTMENT
  INSERT INTO `ApprovalSubStepUserVendorDepartment` (UserId, VendorId, DepartmentId, ApprovalSubStepId, FirstEscalationManagerId, SecondEscalationManagerId, ThirdEscalationManagerId, Duration)
    SELECT
      AssigneeUserId,
      VendorId,
      DepartmentId,
      ApprovalSubStepId,
      FirstEscalationManagerId,
      SecondEscalationManagerId,
      ThirdEscalationManagerId,
      Duration
    FROM `ApprovalSubStepUserVendorDepartment` t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        VendorId,
        DepartmentId,
        ApprovalSubStepId
      FROM `ApprovalSubStepUserVendorDepartment` t2
      WHERE t2.VendorId = t1.VendorId
      AND t2.ApprovalSubStepId = t1.ApprovalSubStepId
      AND t2.DepartmentId = t1.DepartmentId
      AND t2.UserId = AssigneeUserId)
    AND t1.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);

  DELETE
    FROM ApprovalSubStepUserVendorDepartment
  WHERE UserId = AssignorUserId
    AND ApprovalSubStepUserVendorDepartment.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);
  -- END MOVE APPROVALSUBSTEPUSERVENDORDEPARTMENT

  -- MOVE APPROVALSUBSTEPUSERVENDORGL
  INSERT INTO `ApprovalSubStepUserVendorGL` (UserId, VendorId, GLCodeId, ApprovalSubStepId, FirstEscalationManagerId, SecondEscalationManagerId, ThirdEscalationManagerId, Duration)
    SELECT
      AssigneeUserId,
      VendorId,
      GLCodeId,
      ApprovalSubStepId,
      FirstEscalationManagerId,
      SecondEscalationManagerId,
      ThirdEscalationManagerId,
      Duration
    FROM `ApprovalSubStepUserVendorGL` t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        VendorId,
        GLCodeId,
        ApprovalSubStepId
      FROM `ApprovalSubStepUserVendorGL` t2
      WHERE t2.VendorId = t1.VendorId
      AND t2.ApprovalSubStepId = t1.ApprovalSubStepId
      AND t2.GLCodeId = t1.GLCodeId
      AND t2.UserId = AssigneeUserId)
    AND t1.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);

  DELETE
    FROM ApprovalSubStepUserVendorGL
  WHERE UserId = AssignorUserId
    AND ApprovalSubStepUserVendorGL.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);
  -- END OF MOVE APPROVALSUBSTEPUSERVENDORGL	

  -- MOVE APPROVALSUBSTEPUSERVENDORORGDATA
  INSERT INTO `ApprovalSubStepUserVendorOrgData` (UserId, VendorId, OrgId, ApprovalSubStepId)
    SELECT
      AssigneeUserId,
      VendorId,
      OrgId,
      ApprovalSubStepId
    FROM `ApprovalSubStepUserVendorOrgData` t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        VendorId,
        OrgId,
        ApprovalSubStepId
      FROM `ApprovalSubStepUserVendorOrgData` t2
      WHERE t2.VendorId = t1.VendorId
      AND t2.ApprovalSubStepId = t1.ApprovalSubStepId
      AND t2.OrgId = t1.OrgId
      AND t2.UserId = AssigneeUserId)
    AND t1.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);

  DELETE
    FROM ApprovalSubStepUserVendorOrgData
  WHERE UserId = AssignorUserId
    AND ApprovalSubStepUserVendorOrgData.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);
  -- END OF MOVE APPROVALSUBSTEPUSERVENDORORGDATA	


  -- START OF REMOVE APPROVALSUBSTEPUSER

  DELETE
    FROM ApprovalSubStepUser
  WHERE UserId = AssignorUserId
    AND `ApprovalSubStepUser`.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);

  -- END OF REMOVE

  -- MOVE APPROVALWORKFLOW
  INSERT INTO `ApprovalWorkFlow` (UserId, VendorId, Title, ExceptionHandlerId, CurrentLevelUserId, FirstEscalationManagerId, SeondEscalationManagerId, ThirdEscalationManagerId, Duration, `Type`)
    SELECT
      AssigneeUserId,
      VendorId,
      Title,
      ExceptionHandlerId,
      CurrentLevelUserId,
      FirstEscalationManagerId,
      SeondEscalationManagerId,
      ThirdEscalationManagerId,
      Duration,
      `Type`
    FROM `ApprovalWorkFlow` t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        VendorId
      FROM `ApprovalWorkFlow` t2
      WHERE t2.VendorId = t1.VendorId
      AND t2.UserId = AssigneeUserId);

  IF (AssignmentWorkflowType = 0
    OR AssignmentWorkflowType = 2) THEN
    DELETE
      FROM ApprovalWorkFlow
    WHERE UserId = AssignorUserId;
  END IF;
  -- END OF MOVE APPROVALWORKFLOW


  -- MOVE APPROVER BY AMOUNT
  -- delete any existing approver by amount from the assignee before reassigning
  -- DELETE FROM `ApproverByAmount` WHERE UserId = AssigneeUserId;

  -- FIRST APPROVER
  INSERT INTO `ApproverByAmount` (UserId, VendorId, MaximumAllowedAmount, SecondApproverId, AuthCode, IsPOIsNoPOIsBoth, WorkflowType, CostCenters)
    SELECT
      AssigneeUserId,
      VendorId,
      MaximumAllowedAmount,
      SecondApproverId,
      AuthCode,
      IsPOIsNoPOIsBoth,
      WorkflowType,
      CostCenters
    FROM `ApproverByAmount` t1
    WHERE UserId = AssignorUserId
    AND (AssignmentWorkflowType = 2
    OR t1.WorkflowType = AssignmentWorkflowType)
    AND NOT EXISTS (SELECT
        UserId,
        VendorId
      FROM `ApproverByAmount` t2
      WHERE t2.VendorId = t1.VendorId
      AND t2.CostCenters = t1.CostCenters
      AND t2.UserId = AssigneeUserId
      AND t2.WorkflowType = t1.WorkflowType);

  -- SECOND APPROVER
  INSERT INTO `ApproverByAmount` (UserId, VendorId, MaximumAllowedAmount, SecondApproverId, AuthCode, IsPOIsNoPOIsBoth, WorkflowType, CostCenters)
    SELECT
      UserId,
      VendorId,
      MaximumAllowedAmount,
      AssigneeUserId,
      AuthCode,
      IsPOIsNoPOIsBoth,
      WorkflowType,
      CostCenters
    FROM `ApproverByAmount` t1
    WHERE SecondApproverId = AssignorUserId
    AND (AssignmentWorkflowType = 2
    OR t1.WorkflowType = AssignmentWorkflowType)
    AND NOT EXISTS (SELECT
        UserId,
        VendorId
      FROM `ApproverByAmount` t2
      WHERE t2.VendorId = t1.VendorId
      AND t2.CostCenters = t1.CostCenters
      AND t2.SecondApproverId = AssigneeUserId
      AND t2.WorkflowType = t1.WorkflowType);

  DELETE
    FROM ApproverByAmount
  WHERE (UserId = AssignorUserId
    OR SecondApproverId = AssignorUserId)
    AND (AssignmentWorkflowType = 2
    OR ApproverByAmount.WorkflowType = AssignmentWorkflowType);
  -- END OF MOVE APPROVER BY AMOUNT


  IF (AssignmentWorkflowType = 0
    OR AssignmentWorkflowType = 2) THEN
    -- ADD Reassignment History

    INSERT INTO InvoiceHistory (InvoiceId, Actor, `Action`, ActionDate, PreviousData, NewData, `Field`, ActorId)
      SELECT
        t1.InvoiceId,
        CreatedByFullName,
        'Premanent Reassignment',
        ReassignmentHistoryDate,
        AssignorUserFullName,
        AssigneeUserFullName,
        'Approver',
        CreatedByUserId
      FROM `UserInvoiceAssignment` t1
        INNER JOIN Invoice
          ON t1.`InvoiceId` = Invoice.`InvoiceId`
      WHERE t1.UserId = AssignorUserId
      AND NOT EXISTS (SELECT
          UserId,
          InvoiceId
        FROM `UserInvoiceAssignment` t2
        WHERE t2.InvoiceId = t1.InvoiceId
        AND t2.UserId = AssigneeUserId)
      AND Invoice.`ApprovalStatusId` IN (3, 6);

    -- END OF ADD REASSIGNMENT HISTORY

    -- MOVE USERINVOICEASSIGNMENT
    INSERT INTO `UserInvoiceAssignment` (UserId, InvoiceId, `Type`, State, ApprovalSubStepId, HoldStartDate, HoldEndDate, DateCreated, AssignBackToUserId)
      SELECT
        AssigneeUserId,
        t1.InvoiceId,
        `Type`,
        State,
        ApprovalSubStepId,
        HoldStartDate,
        HoldEndDate,
        DateCreated,
        AssignBackToUserId
      FROM `UserInvoiceAssignment` t1
        INNER JOIN Invoice
          ON t1.`InvoiceId` = Invoice.`InvoiceId`
      WHERE t1.UserId = AssignorUserId
      AND NOT EXISTS (SELECT
          UserId,
          InvoiceId
        FROM `UserInvoiceAssignment` t2
        WHERE t2.InvoiceId = t1.InvoiceId
        AND t2.UserId = AssigneeUserId)
      AND Invoice.`ApprovalStatusId` IN (3, 6);

    UPDATE `UserInvoiceAssignment`
    SET AssignBackTouserId = AssigneeUserId
    WHERE AssignBackToUserId = AssignorUserId;

    DELETE
      FROM UserInvoiceAssignment
    WHERE UserId = AssignorUserId;
  -- END OF MOVE USERINVOICEASSIGNMENT
  END IF;

  IF (AssignmentWorkflowType = 1
    OR AssignmentWorkflowType = 2) THEN

    -- ADD Reassignment History

    INSERT INTO POHeaderHistory (POHeaderId, Actor, `Action`, ActionDate, PreviousData, NewData, `Field`, ActorId)
      SELECT
        t1.POHeaderId,
        CreatedByFullName,
        'Premanent Reassignment',
        ReassignmentHistoryDate,
        AssignorUserFullName,
        AssigneeUserFullName,
        'Approver',
        CreatedByUserId
      FROM `UserPOAssignment` t1
        INNER JOIN POHeader
          ON t1.POHeaderId = POHeader.`POHeaderId`
      WHERE t1.UserId = AssignorUserId
      AND NOT EXISTS (SELECT
          UserId,
          POHeaderId
        FROM `UserPOAssignment` t2
        WHERE t2.POHeaderId = t1.POHeaderId
        AND t2.UserId = AssigneeUserId)
      AND POHeader.`POStatus` IN (2, 9);

    -- END OF ADD REASSIGNMENT HISTORY

    -- MOVE USERPOASSIGNMENT
    INSERT INTO `UserPOAssignment` (UserId, POHeaderId, `Type`, State, ApprovalSubStepId, HoldStartDate, HoldEndDate, DateCreated, DelegationFromDate, DelegationToDate, DelegateUntil)
      SELECT
        AssigneeUserId,
        t1.POHeaderId,
        `Type`,
        State,
        ApprovalSubStepId,
        HoldStartDate,
        HoldEndDate,
        DateCreated,
        DelegationFromDate,
        DelegationToDate,
        DelegateUntil
      FROM `UserPOAssignment` t1
        INNER JOIN POHeader
          ON t1.POHeaderId = POHeader.`POHeaderId`
      WHERE t1.UserId = AssignorUserId
      AND NOT EXISTS (SELECT
          UserId,
          `POHeaderId`
        FROM `UserPOAssignment` t2
        WHERE t2.POHeaderId = t1.POHeaderId
        AND t2.UserId = AssigneeUserId)
      AND POHeader.`POStatus` IN (2, 9);

    DELETE
      FROM UserPOAssignment
    WHERE UserId = AssignorUserId;
    -- END OF MOVE USERINVOICEASSIGNMENT


    -- ADD Reassignment History (Change Created By)

    INSERT INTO POHeaderHistory (POHeaderId, Actor, `Action`, ActionDate, PreviousData, NewData, `Field`, ActorId)
      SELECT
        POHeader.POHeaderId,
        CreatedByFullName,
        'Premanent Reassignment',
        ReassignmentHistoryDate,
        AssignorUserFullName,
        AssigneeUserFullName,
        'Created By',
        CreatedByUserId
      FROM POHeader
      WHERE POHeader.`UserId` = AssignorUserId
      AND POHeader.`POStatus` IN (2, 4);

    -- END OF ADD REASSIGNMENT HISTORY (Change Created By)

    UPDATE POHeader
    SET POHeader.`UserId` = AssigneeUserId
    WHERE POHeader.`UserId` = AssignorUserId
    AND POHeader.`POStatus` IN (2, 4);

  END IF;

  DROP TEMPORARY TABLE UserReassignmentHistoryWorkflowApprovalSubStepIds;

  SELECT
    TRUE;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AdvancedSearchHoldInvoice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `AdvancedSearchHoldInvoice`(IN clientId INT,
IN userId CHAR(36),
IN assignorUserId CHAR(36),
IN isPausedFiltered BIT,
IN invoiceId INT,
IN scannedDateFrom DATE,
IN scannedDateTo DATE,
IN invoiceDateFrom DATE,
IN invoiceDateTo DATE,
IN paymentDueDateFrom DATE,
IN paymentDueDateTo DATE,
IN approvedDateFrom DATE,
IN approvedDateTo DATE,
IN rejectedDateFrom DATE,
IN rejectedDateTo DATE,
IN lastActionDateFrom DATE,
IN lastActionDateTo DATE,
IN invoiceNo VARCHAR(255),
IN voucherNumber VARCHAR(255),
IN accountCode VARCHAR(255),
IN FilterByApprover BIT,
IN searchMyInvoice BIT,
IN approverIds CHAR(255),
IN vendor VARCHAR(255),
IN currency VARCHAR(255),
IN currencies VARCHAR(255),
IN invoiceTotalFrom DECIMAL(18, 2),
IN invoiceTotalTo DECIMAL(18, 2),
IN taxFrom DECIMAL(18, 2),
IN taxTo DECIMAL(18, 2),
IN project VARCHAR(255),
IN projects VARCHAR(255),
IN companies CHAR(255),
IN department VARCHAR(255),
IN departments VARCHAR(255),
IN poNo VARCHAR(255),
IN checkNo VARCHAR(255),
IN paymentmethod VARCHAR(255),
IN paymentspec VARCHAR(255),
IN vendbank VARCHAR(255),
IN filterbyGLContent BIT,
IN glCode VARCHAR(255),
IN glprojectType VARCHAR(255),
IN gldescription VARCHAR(255),
IN companyCode VARCHAR(255),
IN isPOInvoice BIT,
IN isFactoryVendor BIT,
IN customerName VARCHAR(255),
IN TransactionIdentifer VARCHAR(255),
IN CheckDate DATE,
IN customerAddress VARCHAR(255),
IN capitalProjectNo VARCHAR(255),
IN paymentTypes VARCHAR(255),
IN groupCode VARCHAR(255),
IN coilNo VARCHAR(255),
IN isAutoApproved BIT,
IN tranIdentifier VARCHAR(255), -- transactionIdentifier
IN isExpiredPayment BIT,
IN paymentDateFrom DATE,
IN paymentDateTo DATE,
IN netTermDateFrom DATE,
IN netTermDateTo DATE,
IN invoiceStatuses VARCHAR(255),
IN assignedTos VARCHAR(255),
IN restrictToUser BIT,
IN locations VARCHAR(255),
IN isHoldInvoice BIT,
IN isFilterViewForSupervisorByDepartmentEnabled BIT,
IN invoiceTypes VARCHAR(255),
IN userClientCompanyCodes VARCHAR(255),
IN isUserAdministrator BIT,
IN isFilterByDepartmentEnabled BIT,
IN isConfidential BIT,
IN searchInvoiceArgument1FieldasWhole BIT,
IN userField1 VARCHAR(255),
IN userField2 VARCHAR(255),
IN userField3 VARCHAR(255),
IN userField4 VARCHAR(255),
IN userField5 VARCHAR(255),
IN userField6 VARCHAR(255),
IN userField7 VARCHAR(255),
IN userField8 VARCHAR(255),
IN userField9 VARCHAR(255),
IN userField10 VARCHAR(255),
IN wholeArgs VARCHAR(255),
IN lineItemDescription VARCHAR(255),
IN vendorSite VARCHAR(255),
IN deliveryNumber VARCHAR(255),
IN checkDateFrom DATE,
IN checkDateTo DATE,
IN invoiceSources VARCHAR(255),
IN invoiceSender VARCHAR(255),
IN jpyToUSD DOUBLE,
IN cadToUSD DOUBLE,
IN rmbToUSD DOUBLE,
IN filterOneTimeVendor VARCHAR(255),
IN showGLDesciriptionForExportEnabled BIT,
IN isUrgentInvoice BIT,
IN orgIdentifier VARCHAR(255),
IN descriptions VARCHAR(255))
BEGIN
  SET @negativeCurrency = "-1";
  SET @usdEquivalent = 0;
  SET @emptyUUID = '00000000-0000-0000-0000-000000000000';
  SET @likeStartParamForGL = (CASE WHEN filterbyGLContent = FALSE THEN '' ELSE '%' END);
  SELECT
    i.InvoiceId,
    v.PaymentMethod,
    v.PaymentSpec,
    v.VendBankId,
    i.InvoiceNo,
    i.VoucherNumber,
    v.VendorId,
    v.VendorName,
    v.VendorNo,
    v.IsConfidential AS IsConfidential_v,
    i.IsConfidential AS IsConfidential_i,
    i.PONumber,
    i.CompanyCode,
    i.ScannedDate,
    i.InvoiceDate,
    i.PaymentDueDate,
    i.RejectedDate,
    i.NetTermDate,
    i.InvoiceTotal,
    i.ApprovalStatusId,
    ist.StateName AS InvoiceStatusName,
    i.InvoiceType,
    UserField3,
    UserField4,
    od.OrgName AS Division,
    i.LastActionBy,
    i.LastActionDate,
    i.CheckNumber,
    i.Description,
    CONCAT(approver.LastName, ', ', approver.FirstName) AS ApprovedBy,
    i.AprovedDate,
    i.ApproverId,
    -- TransactionIdentifier FROM PaymentStatus -- QUESTION OUT??
    i.DeliveryNumber,
    b.Source AS InvoiceSource,
    GetAssignedTosString(i.InvoiceId) AS AssignedTo,
    (SELECT
        uia.DateCreated
      FROM UserInvoiceAssignment uia
      WHERE uia.InvoiceId = i.InvoiceId LIMIT 1) AS AssignedDate,
    GetInvoiceComment(i.InvoiceId, i.IsPaused) AS `Comment`,
    (SELECT
        lid.POType
      FROM LineItemDetail lid
      WHERE lid.InvoiceId = i.InvoiceId LIMIT 1) AS POType,
    i.Currency,
    @usdEquivalent AS USDEquvalent,
    -- USDEquvalent = calculated on Code internal
    d.DepartmentName AS Department,
    GetGLNumbersFromApprovalHistory(i.InvoiceId) AS GLNumber,
    -- " " as GLDescription,
    (CASE WHEN showGLDesciriptionForExportEnabled = FALSE THEN " " ELSE GetGLDescriptionsFromApprovalHistory(i.InvoiceId) END) AS GLDescription,
    (SELECT
        GROUP_CONCAT(DISTINCT org.OrgId SEPARATOR ',') AS OrgId
      FROM ApprovalHistory ah
      USE INDEX (IX_InvoiceId, OrgId)
        INNER JOIN OrgData org
          ON ah.OrgId = org.Id
      WHERE ah.InvoiceId = invoiceId
      GROUP BY NULL) AS Location,
    b.Sender AS InvoiceSender, -- This needs to be verified
    i.TransactionIdentifer, -- check with the above txn identifier - related with payment status
    i.ArchiveReason,
    i.CheckDate,
    i.AccountCode,
    i.SubCategoryType,
    GetProjectNamesFromApprovalHistory(i.InvoiceId, i.IsPOInvoice) AS ProjectType,
    i.VoucherNumber,
    i.UserField6,
    GetBuyerNameNew(i.InvoiceId) AS BuyerName,
    v.UserField1 AS IsUrgentInvoice,
    CASE WHEN ih.Action = 'hold' THEN ih.Actor ELSE '' END AS InvoiceHolder,
    CASE WHEN ih.Action = 'hold' THEN ih.ActionDate ELSE NULL END AS ActionDate,
    CASE WHEN ih.Action = 'hold' THEN ih.NewData ELSE '' END AS HoldDate
  FROM Invoice i
    LEFT OUTER JOIN InvoiceHistory ih
      ON i.InvoiceId = ih.InvoiceId
    LEFT OUTER JOIN InvoiceStatus ist
      ON i.ApprovalStatusId = ist.StateId
    LEFT OUTER JOIN Batch b
      ON i.BatchID = b.ID
    LEFT OUTER JOIN Vendor v
      ON i.VendorId = v.VendorId
    LEFT OUTER JOIN Department d
      ON i.VendorSiteId = d.Id
    LEFT OUTER JOIN ProjectType p
      ON i.ProjectTypeId = p.Id
    LEFT OUTER JOIN CustomerLocation cl
      ON i.CustomerLocationId = cl.CustomerLocationId
    LEFT OUTER JOIN Customer c
      ON cl.CustomerId = c.CustomerId
    LEFT OUTER JOIN Address ca
      ON cl.AddressId = ca.AddressId
    LEFT OUTER JOIN OrgData od
      ON i.OrgId = od.Id
    LEFT OUTER JOIN `User` AS approver
      ON i.ApproverId = approver.UserId

  WHERE i.ClientId = clientId
  AND i.IsDeleted = 0
  AND (isHoldInvoice IS NULL
  OR (isHoldInvoice = TRUE
  AND ih.Action = 'hold')
  OR isHoldInvoice = FALSE)
  AND (isPausedFiltered IS NULL
  OR i.IsPaused = isPausedFiltered)
  AND (orgIdentifier IS NULL
  OR orgIdentifier = ''
  OR i.OrgId = orgIdentifier)
  AND (invoiceId IS NULL
  OR i.InvoiceId = invoiceId)
  AND (scannedDateFrom IS NULL
  OR i.ScannedDate >= scannedDateFrom)
  AND (scannedDateTo IS NULL
  OR i.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
  AND (invoiceDateFrom IS NULL
  OR i.InvoiceDate >= invoiceDateFrom)
  AND (invoiceDateTo IS NULL
  OR i.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))
  AND (paymentDueDateFrom IS NULL
  OR i.PaymentDueDate >= paymentDueDateFrom)
  AND (paymentDueDateTo IS NULL
  OR i.PaymentDueDate < DATE_ADD(paymentDueDateTo, INTERVAL 1 DAY))
  AND (approvedDateFrom IS NULL
  OR i.AprovedDate >= approvedDateFrom)
  AND (approvedDateTo IS NULL
  OR i.AprovedDate < DATE_ADD(approvedDateTo, INTERVAL 1 DAY))
  AND (rejectedDateFrom IS NULL
  OR i.RejectedDate >= rejectedDateFrom)
  AND (rejectedDateTo IS NULL
  OR i.RejectedDate < DATE_ADD(rejectedDateTo, INTERVAL 1 DAY))
  AND (lastActionDateFrom IS NULL
  OR i.LastActionDate >= lastActionDateFrom)
  AND (lastActionDateTo IS NULL
  OR i.LastActionDate < DATE_ADD(lastActionDateTo, INTERVAL 1 DAY))
  AND (invoiceNo IS NULL
  OR invoiceNo = ''
  OR i.InvoiceNo LIKE CONCAT('', invoiceNo, '%'))
  AND (descriptions IS NULL
  OR descriptions = ''
  OR i.Description LIKE CONCAT('', descriptions, '%'))
  AND (voucherNumber IS NULL
  OR voucherNumber = ''
  OR i.VoucherNumber LIKE CONCAT('', voucherNumber, '%'))
  AND (accountCode IS NULL
  OR accountCode = ''
  OR i.AccountCode LIKE CONCAT('', accountCode, '%'))
  AND (FilterByApprover = FALSE
  OR (i.ApproverId = userId
  OR i.ApproverId = assignorUserId))
  AND (searchMyInvoice = FALSE
  OR i.ApproverId = userId)
  AND (isUrgentInvoice = FALSE
  OR (isUrgentInvoice = TRUE
  AND v.UserField1 = 'True'))
  AND ((approverIds IS NULL
  OR approverIds = '')
  OR (i.ApproverId IS NOT NULL
  AND FIND_IN_SET(i.ApproverId, approverIds))
  OR EXISTS (SELECT
      *
    FROM UserInvoiceAssignment uia
    WHERE uia.InvoiceId = i.InvoiceId
    AND FIND_IN_SET(uia.UserId, approverIds))
  OR EXISTS (SELECT
      *
    FROM UserInvoiceAssignmentHistory uiah
    WHERE uiah.InvoiceId = i.InvoiceId
    AND uiah.FromApprovalSubStepUserId IS NOT NULL
    AND FIND_IN_SET(uiah.FromApprovalSubStepUserId, approverIds))
  OR EXISTS (SELECT
      *
    FROM UserInvoiceAssignmentHistory uiah
    WHERE uiah.InvoiceId = i.InvoiceId
    AND uiah.ToApprovalSubStepUserId IS NOT NULL
    AND FIND_IN_SET(uiah.ToApprovalSubStepUserId, approverIds)))
  AND (vendor IS NULL
  OR vendor = ''
  OR v.VendorName LIKE CONCAT('', vendor, '%')
  OR v.VendorNo LIKE CONCAT('', vendor, '%'))
  AND ((currencies IS NULL
  OR currencies = '')
  OR (i.Currency IS NOT NULL
  AND FIND_IN_SET(i.Currency, currencies))
  OR (!FIND_IN_SET(@negativeCurrency, currencies)))
  AND (invoiceTotalFrom IS NULL
  OR (!FIND_IN_SET(@negativeCurrency, currencies)
  AND i.InvoiceTotal >= invoiceTotalFrom)
  OR (FIND_IN_SET(@negativeCurrency, currencies)
  AND (CASE WHEN i.Currency = 'JPY' THEN i.InvoiceTotal * jpyToUSD >= invoiceTotalFrom WHEN i.Currency = 'CAD' THEN i.InvoiceTotal * cadToUSD >= invoiceTotalFrom WHEN i.Currency = 'RMB' THEN i.InvoiceTotal * rmbToUSD >= invoiceTotalFrom ELSE i.InvoiceTotal >= invoiceTotalFrom END)
  ))
  AND (invoiceTotalTo IS NULL
  OR (!FIND_IN_SET(@negativeCurrency, currencies)
  AND i.InvoiceTotal <= invoiceTotalTo)
  OR (FIND_IN_SET(@negativeCurrency, currencies)
  AND (CASE WHEN i.Currency = 'JPY' THEN i.InvoiceTotal * jpyToUSD <= invoiceTotalTo WHEN i.Currency = 'CAD' THEN i.InvoiceTotal * cadToUSD <= invoiceTotalTo WHEN i.Currency = 'RMB' THEN i.InvoiceTotal * rmbToUSD >= invoiceTotalTo ELSE i.InvoiceTotal >= invoiceTotalTo END)
  ))
  AND (taxFrom IS NULL
  OR taxFrom = ''
  OR ConvertToDecimal(i.UserField7) >= taxFrom)
  AND (taxTo IS NULL
  OR taxTo = ''
  OR ConvertToDecimal(i.UserField7) >= taxTo)
  AND ((project IS NULL
  OR project = '')
  AND (projects IS NULL
  OR projects = '')
  OR (project IS NOT NULL
  AND project <> ''
  AND (p.ProjectName LIKE CONCAT('', project, '%')
  OR p.Description LIKE CONCAT('', project, '%')))
  OR (projects IS NOT NULL
  AND projects <> ''
  AND FIND_IN_SET(p.Id, projects))
  )
  AND (companies IS NULL
  OR companies = ''
  OR FIND_IN_SET(i.CompanyCode, companies)
  OR FIND_IN_SET(i.Description, companies))
  AND ((department IS NULL
  OR department = '')
  AND (departments IS NULL
  OR departments = '')
  OR (department IS NOT NULL
  AND department <> ''
  AND (d.DepartmentName LIKE CONCAT('', DepartmentName, '%')
  OR d.Description LIKE CONCAT('', department, '%')))
  OR (departments IS NOT NULL
  AND departments <> ''
  AND (FIND_IN_SET(d.Id, departments)
  OR (i.IsPOInvoice = FALSE
  AND (SELECT
      COUNT(*)
    FROM ApprovalHistory ah
    WHERE ah.InvoiceId = i.InvoiceId
    AND FIND_IN_SET(ah.DepartmentId, departments)) > 0)
  ))
  )
  AND (poNo IS NULL
  OR poNo = ''
  OR i.PONumber LIKE CONCAT('%', poNo, '%'))
  AND (checkNo IS NULL
  OR checkNo = ''
  OR i.CheckNumber LIKE CONCAT('', checkNo, '%'))
  AND (paymentmethod IS NULL
  OR paymentmethod = ''
  OR v.PaymentMethod LIKE CONCAT('', paymentmethod, '%'))
  AND (paymentspec IS NULL
  OR paymentspec = ''
  OR v.PaymentSpec LIKE CONCAT('', paymentspec, '%'))
  AND (vendbank IS NULL
  OR vendbank = ''
  OR v.VendBankId LIKE CONCAT('', vendbank, '%'))
  AND (glCode IS NULL
  OR glCode = ''
  OR ExistsInApprovalHistory(i.InvoiceId, 'GLCode', glCode, @likeStartParamForGL) = TRUE)
  AND (glprojectType IS NULL
  OR glprojectType = ''
  OR ExistsInApprovalHistory(i.InvoiceId, 'ProjectType', glprojectType, '') = TRUE)
  -- AND (gldescription IS NULL OR gldescription = '' OR ExistsInApprovalHistory(i.InvoiceId, 'GLDescription', gldescription, '') = TRUE)
  AND (gldescription IS NULL
  OR gldescription = ''
  OR EXISTS (SELECT
      *
    FROM ApprovalHistory ah
    WHERE ah.InvoiceId = i.InvoiceId
    AND ah.SpecialNote LIKE CONCAT('', gldescription, '%')))
  AND (companyCode IS NULL
  OR companyCode = ''
  OR ExistsInApprovalHistory(i.InvoiceId, 'CompanyCode', companyCode, '') = TRUE
  OR i.CompanyCode LIKE CONCAT('', companyCode, '%'))
  AND (isPOInvoice IS NULL
  OR i.IsPOInvoice = isPOInvoice)
  AND (isFactoryVendor IS NULL OR v.IsFactoryVendor = isFactoryVendor)
  AND (customerName IS NULL
  OR customerName = ''
  OR c.CustomerName LIKE CONCAT('%', customerName, '%'))
  AND (TransactionIdentifer IS NULL
  OR TransactionIdentifer = ''
  OR i.TransactionIdentifer LIKE CONCAT('%', TransactionIdentifer, '%'))
  AND (CheckDate IS NULL
  -- OR CheckDate = ''
  OR i.UserField4 LIKE CONCAT('%', CheckDate, '%'))
  AND (customerAddress IS NULL
  OR customerAddress = ''
  OR ca.StreetName LIKE CONCAT('%', customerAddress, '%')
  OR ca.Address1 LIKE CONCAT('%', customerAddress, '%'))
  AND (capitalProjectNo IS NULL
  OR capitalProjectNo = ''
  OR (i.IsPOInvoice = TRUE
  AND (SELECT
      COUNT(*)
    FROM LineItemDetail lid
    WHERE lid.InvoiceId = i.InvoiceId
    AND lid.CapitalProjectNo = capitalProjectNo) > 0))
  AND (paymentTypes IS NULL
  OR paymentTypes = ''
  OR (i.VendorId IS NOT NULL
  AND FIND_IN_SET(v.PaymentType, paymentTypes)))
  AND (groupCode IS NULL
  OR groupCode = ''
  OR (i.CustomerLocationId IS NOT NULL
  AND c.CustomerNo LIKE CONCAT('', groupCode, '%')))
  AND (coilNo IS NULL
  OR coilNo = ''
  OR (SELECT
      COUNT(*)
    FROM LineItemDetail lid
    WHERE lid.InvoiceId = i.InvoiceId
    AND lid.ProductId LIKE CONCAT('', coilNo, '%')) > 0
  )
  -- AUTO APPROVE START
  AND (isAutoApproved IS NULL
  OR isAutoApproved = ''
  OR (isAutoApproved = TRUE
  AND (
  (i.ApprovalStatusId = 3
  AND EXISTS (SELECT
      *
    FROM AutoApproveReport ar
    WHERE ar.InvoiceId = i.InvoiceId))
  OR EXISTS (SELECT
      *
    FROM InvoiceHistory ih
    WHERE ih.InvoiceId = i.InvoiceId
    AND ih.ActorId = @emptyUUID
    AND ih.Field = 'Invoice Status'
    AND ih.InitialStatus = 'In Approval'
    AND ih.CurrentStatus = 'Approved'))
  )
  OR (isAutoApproved = FALSE
  AND NOT EXISTS (SELECT
      *
    FROM AutoApproveReport ar
    WHERE ar.InvoiceId = i.InvoiceId)
  AND NOT EXISTS (SELECT
      *
    FROM InvoiceHistory ih
    WHERE ih.InvoiceId = i.InvoiceId
    AND ih.ActorId = @emptyUUID
    AND ih.Field = 'Invoice Status'
    AND ih.InitialStatus = 'In Approval'
    AND ih.CurrentStatus = 'Approved'))
  )
  -- AUTO APPROVE END
  AND (tranIdentifier IS NULL
  OR tranIdentifier = ''
  OR (SELECT
      COUNT(*)
    FROM PaymentStatus ps
    WHERE ps.InvoiceId = i.InvoiceId
    AND ps.TransactionIdentifier = tranIdentifier) > 0
  )
  AND (isExpiredPayment IS NULL
  OR isExpiredPayment = ''
  OR (isExpiredPayment = TRUE
  AND (i.Reissued = TRUE
  OR (SELECT
      COUNT(*)
    FROM PaymentStatus ps
    WHERE ps.InvoiceId = i.InvoiceId
    AND ps.TransactionIdentifier = "EXPIRED") > 0))
  OR (isExpiredPayment = FALSE
  AND (i.Reissued = FALSE
  OR (SELECT
      COUNT(*)
    FROM PaymentStatus ps
    WHERE ps.InvoiceId = i.InvoiceId
    AND ps.TransactionIdentifier = "EXPIRED") = 0))
  )
  AND (paymentDateFrom IS NULL
  -- OR paymentDateFrom = ''
  OR (SELECT
      COUNT(*)
    FROM PaymentStatus ps
    WHERE ps.InvoiceId = i.InvoiceId
    AND ps.ReceivedDate >= paymentDateFrom) > 0)
  AND (paymentDateTo IS NULL
  -- OR paymentDateTo = ''
  OR (SELECT
      COUNT(*)
    FROM PaymentStatus ps
    WHERE ps.InvoiceId = i.InvoiceId
    AND ps.ReceivedDate < DATE_ADD(paymentDateTo, INTERVAL 1 DAY)) > 0)
  AND (netTermDateFrom IS NULL
  -- OR netTermDateFrom = ''
  OR i.NetTermDate >= netTermDateFrom)
  AND (netTermDateTo IS NULL
  -- OR netTermDateTo = ''
  OR i.NetTermDate < DATE_ADD(netTermDateTo, INTERVAL 1 DAY))
  AND (invoiceStatuses IS NULL
  OR invoiceStatuses = ''
  OR (i.ApprovalStatusId IS NOT NULL
  AND FIND_IN_SET(i.ApprovalStatusId, invoiceStatuses)))
  AND (assignedTos IS NULL
  OR assignedTos = ''
  OR ((restrictToUser IS NULL
  OR restrictToUser <> TRUE)
  AND (SELECT
      COUNT(*)
    FROM UserInvoiceAssignment uia
    WHERE uia.InvoiceId = i.InvoiceId
    AND FIND_IN_SET(uia.UserId, assignedTos)) > 0)
  OR (restrictToUser = TRUE
  AND (SELECT
      COUNT(*)
    FROM UserInvoiceAssignment uia
    WHERE uia.InvoiceId = i.InvoiceId
    AND FIND_IN_SET(uia.UserId, assignedTos)) > 0
  AND (SELECT
      COUNT(*)
    FROM UserInvoiceAssignment uia
    WHERE uia.InvoiceId = i.InvoiceId
    AND FIND_IN_SET(uia.UserId, assignedTos)) = 0)
  )
  AND (locations IS NULL
  OR locations = ''
  OR i.OrgId IS NULL
  OR FIND_IN_SET(i.OrgId, locations)
  OR (SELECT
      COUNT(*)
    FROM ApprovalHistory ah
    WHERE ah.InvoiceId = i.InvoiceId
    AND FIND_IN_SET(ah.OrgId, locations)))
  AND (isHoldInvoice IS NULL
  OR (isHoldInvoice = TRUE
  AND (SELECT
      COUNT(*)
    FROM UserInvoiceAssignment uia
    WHERE uia.InvoiceId = i.InvoiceId
    AND uia.HoldEndDate IS NOT NULL
    AND uia.HoldEndDate > CURDATE()) > 0)
  OR (isHoldInvoice = FALSE
  AND (SELECT
      COUNT(*)
    FROM UserInvoiceAssignment uia
    WHERE uia.InvoiceId = i.InvoiceId
    AND uia.HoldEndDate IS NOT NULL
    AND uia.HoldEndDate > CURDATE()) = 0)
  )
  AND (isFilterViewForSupervisorByDepartmentEnabled = FALSE
  OR IsInvoiceDepartmentInUserDepartments(userId, i.InvoiceId)
  OR IsInvoiceDepartmentInUserDepartments(assignorUserId, i.InvoiceId))
  AND (invoiceTypes IS NULL
  OR invoiceTypes = ''
  OR FIND_IN_SET(i.InvoiceType, invoiceTypes)
  OR (i.Reissued = TRUE
  AND FIND_IN_SET("expired", invoiceTypes)))
  -- AND (userClientCompanyCodes IS NULL OR userClientCompanyCodes = '' OR i.CompanyCode IN("'" + userClientCompanyCodes + "'"))
  -- AND (userClientCompanyCodes IS NULL OR userClientCompanyCodes = '' OR FIND_IN_SET(REPLACE(i.CompanyCode, ',',''), userClientCompanyCodes))
  AND (userClientCompanyCodes IS NULL
  OR userClientCompanyCodes = ''
  OR InvoiceExistsInUserCompanies(clientId, userId, i.CompanyCode) = 1)
  AND (isUserAdministrator = TRUE
  OR isFilterByDepartmentEnabled = FALSE
  OR IsInvoiceDepartmentInUserDepartments(userId, i.InvoiceId))
  AND (department IS NULL
  OR department = ''
  OR ExistsInApprovalHistory(i.InvoiceId, 'Department', department, '') = TRUE)
  AND (isConfidential IS NULL
  OR isConfidential = ''
  OR (CASE WHEN i.VendorId IS NOT NULL AND
      v.IsConfidential THEN v.IsConfidential = isConfidential WHEN i.IsConfidential IS NULL THEN isConfidential = FALSE ELSE i.IsConfidential = isConfidential END)
  )
  AND (userField1 IS NULL
  OR userField1 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField1", wholeArgs) THEN i.UserField1 = UserField1 ELSE i.UserField1 LIKE CONCAT('', userField1, '%') END))
  AND (userField2 IS NULL
  OR userField2 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField2", wholeArgs) THEN i.UserField2 = UserField2 ELSE i.UserField2 LIKE CONCAT('', userField2, '%') END))
  AND (userField3 IS NULL
  OR userField3 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField3", wholeArgs) THEN i.UserField3 = UserField3 ELSE i.UserField3 LIKE CONCAT('', userField3, '%') END))
  AND (userField4 IS NULL
  OR userField4 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField4", wholeArgs) THEN i.UserField4 = UserField4 ELSE i.UserField4 LIKE CONCAT('', userField4, '%') END))
  AND (userField5 IS NULL
  OR userField5 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField5", wholeArgs) THEN i.UserField5 = UserField5 ELSE i.UserField5 LIKE CONCAT('', userField5, '%') END))
  AND (userField6 IS NULL
  OR userField6 = ''
  OR i.UserField6 = userField6)
  AND (filterOneTimeVendor IS NULL
  OR filterOneTimeVendor = ''
  OR i.UserField6 LIKE CONCAT('%', filterOneTimeVendor, '%'))
  AND (userField7 IS NULL
  OR userField7 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField7", wholeArgs) THEN i.UserField7 = UserField7 ELSE i.UserField7 LIKE CONCAT('', userField7, '%') END))
  AND (userField8 IS NULL
  OR userField8 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField8", wholeArgs) THEN i.UserField8 = UserField8 ELSE i.UserField8 LIKE CONCAT('', userField8, '%') END))
  AND (userField9 IS NULL
  OR userField9 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField9", wholeArgs) THEN i.UserField9 = UserField9 ELSE i.UserField9 LIKE CONCAT('', userField9, '%') END))
  AND (userField10 IS NULL
  OR userField10 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField10", wholeArgs) THEN i.UserField10 = UserField10 ELSE i.UserField10 LIKE CONCAT('', userField10, '%') END))
  AND (currency IS NULL
  OR currency = ''
  OR i.Currency LIKE CONCAT('', currency, '%'))
  AND (lineItemDescription IS NULL
  OR lineItemDescription = ''
  OR (SELECT
      COUNT(*)
    FROM LineItemDetail lid
    WHERE lid.InvoiceId = i.InvoiceId
    AND (lid.Description LIKE CONCAT('', lineItemDescription, '%')
    OR lid.ProductDescription LIKE CONCAT('', lineItemDescription, '%'))) > 0)
  AND (vendorSite IS NULL
  OR vendorSite = ''
  OR d.DepartmentName LIKE CONCAT('', vendorSite, '%')
  OR d.Description LIKE CONCAT('', vendorSite, '%'))
  AND (deliveryNumber IS NULL
  OR deliveryNumber = ''
  OR i.DeliveryNumber LIKE CONCAT('', deliveryNumber, '%'))
  AND (checkDateFrom IS NULL
  -- OR checkDateFrom = ''
  OR i.CheckDate >= checkDateFrom)
  AND (checkDateTo IS NULL
  -- OR checkDateTo = ''
  OR i.CheckDate < DATE_ADD(checkDateTo, INTERVAL 1 DAY))
  AND (invoiceSources IS NULL
  OR invoiceSources = ''
  OR (i.BatchId IS NOT NULL
  AND FIND_IN_SET(b.Source, invoiceSources)))
  AND (invoiceSender IS NULL
  OR invoiceSender = ''
  OR (i.BatchId IS NOT NULL
  AND (SELECT
      COUNT(*)
    FROM `User` ut
    WHERE ut.ClientId = clientId
    AND FIND_IN_SET(ut.UserId, invoiceSender)
    AND b.Sender IS NOT NULL
    AND CONCAT(ut.LastName, '', ut.FirstName) = b.Sender) > 0
  ))
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AdvancedSearchInvoice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `AdvancedSearchInvoice`(IN clientId INT,
IN userId CHAR(36) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN assignorUserId CHAR(36) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN isPausedFiltered BIT,
IN invoiceId INT,
IN scannedDateFrom DATE,
IN scannedDateTo DATE,
IN invoiceDateFrom DATE,
IN invoiceDateTo DATE,
IN paymentDueDateFrom DATE,
IN paymentDueDateTo DATE,
IN approvedDateFrom DATE,
IN approvedDateTo DATE,
IN rejectedDateFrom DATE,
IN rejectedDateTo DATE,
IN lastActionDateFrom DATE,
IN lastActionDateTo DATE,
IN invoiceNo VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN voucherNumber VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN accountCode VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN FilterByApprover BIT,
IN searchMyInvoice BIT,
IN approverIds CHAR(255),
IN vendor VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN currency VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN currencies VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN invoiceTotalFrom DECIMAL(18, 2),
IN invoiceTotalTo DECIMAL(18, 2),
IN taxFrom DECIMAL(18, 2),
IN taxTo DECIMAL(18, 2),
IN project VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN projects VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN companies CHAR(255),
IN department VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN departments VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN poNo VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN checkNo VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN paymentmethod VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN paymentspec VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN vendbank VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN filterbyGLContent BIT,
IN glCode VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN glprojectType VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN gldescription VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN companyCode VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN isPOInvoice BIT,
IN isFactoryVendor BIT,
IN customerName VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN TransactionIdentifer VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN CheckDate DATE,
IN customerAddress VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN capitalProjectNo VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN paymentTypes VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN groupCode VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN coilNo VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN isAutoApproved BIT,
IN tranIdentifier VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci, -- transactionIdentifier
IN isExpiredPayment BIT,
IN paymentDateFrom DATE,
IN paymentDateTo DATE,
IN netTermDateFrom DATE,
IN netTermDateTo DATE,
IN invoiceStatuses VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN assignedTos VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN restrictToUser BIT,
IN locations VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN isHoldInvoice BIT,
IN isFilterViewForSupervisorByDepartmentEnabled BIT,
IN invoiceTypes VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN userClientCompanyCodes VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN isUserAdministrator BIT,
IN isFilterByDepartmentEnabled BIT,
IN isConfidential BIT,
IN searchInvoiceArgument1FieldasWhole BIT,
IN userField1 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN userField2 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN userField3 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN userField4 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN userField5 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN userField6 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN userField7 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN userField8 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN userField9 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN userField10 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN wholeArgs VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN lineItemDescription VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN vendorSite VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN deliveryNumber VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN checkDateFrom DATE,
IN checkDateTo DATE,
IN invoiceSources VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN invoiceSender VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN jpyToUSD DOUBLE,
IN cadToUSD DOUBLE,
IN rmbToUSD DOUBLE,
IN filterOneTimeVendor VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN showGLDesciriptionForExportEnabled BIT,
IN isUrgentInvoice BIT,
IN isDeletedInvoice BIT,
IN orgIdentifier VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN allowDeletedInvoiceSearch BIT,
IN batchName VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN descriptions VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci)
BEGIN
  SET @negativeCurrency = "-1";
  SET @usdEquivalent = 0;
  SET @emptyUUID = '00000000-0000-0000-0000-000000000000';
  SET @likeStartParamForGL = (CASE WHEN filterbyGLContent = FALSE THEN '' ELSE '%' END);
  SELECT
    i.InvoiceId,
    v.PaymentMethod,
    v.PaymentSpec,
    v.VendBankId,
    i.InvoiceNo,
    i.VoucherNumber,
    v.VendorId,
    v.VendorName,
    v.VendorNo,
    v.IsConfidential AS IsConfidential_v,
    i.IsConfidential AS IsConfidential_i,
    i.PONumber,
    i.CompanyCode,
    i.ScannedDate,
    i.IsPaused,
    i.InvoiceDate,
    i.PaymentDueDate,
    i.RejectedDate,
    i.NetTermDate,
    i.InvoiceTotal,
    i.Description,
    i.ApprovalStatusId,
    ist.StateName AS InvoiceStatusName,
    i.InvoiceType,
    UserField3,
    UserField4,
    od.OrgName AS Division,
    i.LastActionBy,
    i.LastActionDate,
    i.CheckNumber,
    CONCAT(approver.LastName, ', ', approver.FirstName) AS ApprovedBy,
    i.AprovedDate,
    i.ApproverId,
    -- TransactionIdentifier FROM PaymentStatus -- QUESTION OUT??
    i.DeliveryNumber,
    b.Source AS InvoiceSource,
    GetAssignedTosString(i.InvoiceId) AS AssignedTo,
    (SELECT
        uia.DateCreated
      FROM UserInvoiceAssignment uia
      WHERE uia.InvoiceId = i.InvoiceId LIMIT 1) AS AssignedDate,
    GetInvoiceComment(i.InvoiceId, i.IsPaused) AS `Comment`,
    (SELECT
        lid.POType
      FROM LineItemDetail lid
      WHERE lid.InvoiceId = i.InvoiceId LIMIT 1) AS POType,
    i.Currency,
    @usdEquivalent AS USDEquvalent,
    -- USDEquvalent = calculated on Code internal
    d.DepartmentName AS Department,
    (CASE WHEN i.IsPOInvoice = FALSE THEN GetGLNumbersFromApprovalHistory(i.InvoiceId) ELSE GetGLNumbersFromLineItemDetail(i.InvoiceId) END) AS GLNumber,
    -- " " as GLDescription,
    (CASE WHEN showGLDesciriptionForExportEnabled = FALSE THEN " " ELSE GetGLDescriptionsFromApprovalHistory(i.InvoiceId) END) AS GLDescription,
    (SELECT
        GROUP_CONCAT(DISTINCT org.OrgId SEPARATOR ',') AS OrgId
      FROM ApprovalHistory ah
      USE INDEX (IX_InvoiceId, OrgId)
        INNER JOIN OrgData org
          ON ah.OrgId = org.Id
      WHERE ah.InvoiceId = invoiceId
      GROUP BY NULL) AS Location,
    b.Sender AS InvoiceSender, -- This needs to be verified    
    b.Receiver AS InvoiceReceiver,
    i.TransactionIdentifer, -- check with the above txn identifier - related with payment status
    i.ArchiveReason,
    i.CheckDate,
    i.AccountCode,
    i.SubCategoryType,
    GetProjectNamesFromApprovalHistory(i.InvoiceId, i.IsPOInvoice) AS ProjectType,
    i.VoucherNumber,
    i.UserField6,
    GetBuyerNameNew(i.InvoiceId) AS BuyerName,
    v.UserField1 AS IsUrgentInvoice,
    i.UserField1 AS UserField1,
    i.IsDeleted AS isDeletedInvoice,
    i.Tax
  FROM Invoice i
    LEFT OUTER JOIN InvoiceStatus ist
      ON i.ApprovalStatusId = ist.StateId
    LEFT OUTER JOIN Batch b
      ON i.BatchID = b.ID
    LEFT OUTER JOIN Vendor v
      ON i.VendorId = v.VendorId
    LEFT OUTER JOIN Department d
      ON i.VendorSiteId = d.Id
    LEFT OUTER JOIN ProjectType p
      ON i.ProjectTypeId = p.Id
    LEFT OUTER JOIN CustomerLocation cl
      ON i.CustomerLocationId = cl.CustomerLocationId
    LEFT OUTER JOIN Customer c
      ON cl.CustomerId = c.CustomerId
    LEFT OUTER JOIN Address ca
      ON cl.AddressId = ca.AddressId
    LEFT OUTER JOIN OrgData od
      ON i.OrgId = od.Id
    LEFT OUTER JOIN `User` AS approver
      ON i.ApproverId = approver.UserId
  WHERE i.ClientId = clientId
  AND ((isDeletedInvoice = FALSE
  AND i.IsDeleted = 0)
  OR (isDeletedInvoice = TRUE
  AND i.IsDeleted = 1)
  OR allowDeletedInvoiceSearch = TRUE)
  AND (isPausedFiltered IS NULL
  OR i.IsPaused = isPausedFiltered)
  AND (orgIdentifier IS NULL
  OR orgIdentifier = ''
  OR i.OrgId = orgIdentifier)
  AND (invoiceId IS NULL
  OR i.InvoiceId = invoiceId)
  AND (scannedDateFrom IS NULL
  OR i.ScannedDate >= scannedDateFrom)
  AND (scannedDateTo IS NULL
  OR i.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
  AND (invoiceDateFrom IS NULL
  OR i.InvoiceDate >= invoiceDateFrom)
  AND (invoiceDateTo IS NULL
  OR i.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))
  AND (paymentDueDateFrom IS NULL
  OR i.PaymentDueDate >= paymentDueDateFrom)
  AND (paymentDueDateTo IS NULL
  OR i.PaymentDueDate < DATE_ADD(paymentDueDateTo, INTERVAL 1 DAY))
  AND (approvedDateFrom IS NULL
  OR i.AprovedDate >= approvedDateFrom)
  AND (approvedDateTo IS NULL
  OR i.AprovedDate < DATE_ADD(approvedDateTo, INTERVAL 1 DAY))
  AND (rejectedDateFrom IS NULL
  OR i.RejectedDate >= rejectedDateFrom)
  AND (rejectedDateTo IS NULL
  OR i.RejectedDate < DATE_ADD(rejectedDateTo, INTERVAL 1 DAY))
  AND (lastActionDateFrom IS NULL
  OR i.LastActionDate >= lastActionDateFrom)
  AND (lastActionDateTo IS NULL
  OR i.LastActionDate < DATE_ADD(lastActionDateTo, INTERVAL 1 DAY))
  AND (invoiceNo IS NULL
  OR invoiceNo = ''
  OR i.InvoiceNo LIKE CONCAT('', invoiceNo, '%'))
  AND (descriptions IS NULL
  OR descriptions = ''
  OR i.Description LIKE CONCAT('', descriptions, '%'))
  AND (voucherNumber IS NULL
  OR voucherNumber = ''
  OR i.VoucherNumber LIKE CONCAT('', voucherNumber, '%'))
  AND (accountCode IS NULL
  OR accountCode = ''
  OR i.AccountCode LIKE CONCAT('', accountCode, '%'))
  AND (FilterByApprover = FALSE
  OR (i.ApproverId = userId
  OR i.ApproverId = assignorUserId))
  AND (searchMyInvoice = FALSE
  OR i.ApproverId = userId)
  AND (isUrgentInvoice = FALSE
  OR (isUrgentInvoice = TRUE
  AND v.UserField1 = 'True'))
  AND ((approverIds IS NULL
  OR approverIds = '')
  OR (i.ApproverId IS NOT NULL
  AND FIND_IN_SET(i.ApproverId, approverIds))
  OR EXISTS (SELECT
      *
    FROM UserInvoiceAssignment uia
    WHERE uia.InvoiceId = i.InvoiceId
    AND FIND_IN_SET(uia.UserId, approverIds))
  OR EXISTS (SELECT
      *
    FROM UserInvoiceAssignmentHistory uiah
    WHERE uiah.InvoiceId = i.InvoiceId
    AND uiah.FromApprovalSubStepUserId IS NOT NULL
    AND FIND_IN_SET(uiah.FromApprovalSubStepUserId, approverIds))
  OR EXISTS (SELECT
      *
    FROM UserInvoiceAssignmentHistory uiah
    WHERE uiah.InvoiceId = i.InvoiceId
    AND uiah.ToApprovalSubStepUserId IS NOT NULL
    AND FIND_IN_SET(uiah.ToApprovalSubStepUserId, approverIds)))
  AND (vendor IS NULL
  OR vendor = ''
  OR v.VendorName LIKE CONCAT('', vendor, '%')
  OR v.VendorNo LIKE CONCAT('', vendor, '%'))
  AND ((currencies IS NULL
  OR currencies = '')
  OR (i.Currency IS NOT NULL
  AND FIND_IN_SET(i.Currency, currencies))
  OR (!FIND_IN_SET(@negativeCurrency, currencies)))
  AND (invoiceTotalFrom IS NULL
  OR (!FIND_IN_SET(@negativeCurrency, currencies)
  AND i.InvoiceTotal >= invoiceTotalFrom)
  OR (FIND_IN_SET(@negativeCurrency, currencies)
  AND (CASE WHEN i.Currency = 'JPY' THEN i.InvoiceTotal * jpyToUSD >= invoiceTotalFrom WHEN i.Currency = 'CAD' THEN i.InvoiceTotal * cadToUSD >= invoiceTotalFrom WHEN i.Currency = 'RMB' THEN i.InvoiceTotal * rmbToUSD >= invoiceTotalFrom ELSE i.InvoiceTotal >= invoiceTotalFrom END)
  ))
  AND (invoiceTotalTo IS NULL
  OR (!FIND_IN_SET(@negativeCurrency, currencies)
  AND i.InvoiceTotal <= invoiceTotalTo)
  OR (FIND_IN_SET(@negativeCurrency, currencies)
  AND (CASE WHEN i.Currency = 'JPY' THEN i.InvoiceTotal * jpyToUSD <= invoiceTotalTo WHEN i.Currency = 'CAD' THEN i.InvoiceTotal * cadToUSD <= invoiceTotalTo WHEN i.Currency = 'RMB' THEN i.InvoiceTotal * rmbToUSD >= invoiceTotalTo ELSE i.InvoiceTotal >= invoiceTotalTo END)
  ))
  AND (taxFrom IS NULL
  OR taxFrom = ''
  OR ConvertToDecimal(i.UserField7) >= taxFrom)
  AND (taxTo IS NULL
  OR taxTo = ''
  OR ConvertToDecimal(i.UserField7) >= taxTo)
  AND ((project IS NULL
  OR project = '')
  AND (projects IS NULL
  OR projects = '')
  OR (project IS NOT NULL
  AND project <> ''
  AND (p.ProjectName LIKE CONCAT('', project, '%')
  OR p.Description LIKE CONCAT('', project, '%')))
  OR (projects IS NOT NULL
  AND projects <> ''
  AND FIND_IN_SET(p.Id, projects))
  )
  AND (companies IS NULL
  OR companies = ''
  OR FIND_IN_SET(i.CompanyCode, companies)
  OR FIND_IN_SET(i.Description, companies))
  AND ((department IS NULL
  OR department = '')
  AND (departments IS NULL
  OR departments = '')
  OR (department IS NOT NULL
  AND department <> ''
  AND (d.DepartmentName LIKE CONCAT('', DepartmentName, '%')
  OR d.Description LIKE CONCAT('', department, '%')))
  OR (departments IS NOT NULL
  AND departments <> ''
  AND (FIND_IN_SET(d.Id, departments)
  OR (i.IsPOInvoice = FALSE
  AND (SELECT
      COUNT(*)
    FROM ApprovalHistory ah
    WHERE ah.InvoiceId = i.InvoiceId
    AND FIND_IN_SET(ah.DepartmentId, departments)) > 0)
  ))
  )
  AND (userField1 IS NULL
  OR userField1 = ''
  OR i.UserField1 LIKE CONCAT('%', userField1, '%'))
  AND (poNo IS NULL
  OR poNo = ''
  OR i.PONumber LIKE CONCAT('%', poNo, '%'))
  AND (checkNo IS NULL
  OR checkNo = ''
  OR i.CheckNumber LIKE CONCAT('', checkNo, '%'))
  AND (paymentmethod IS NULL
  OR paymentmethod = ''
  OR v.PaymentMethod LIKE CONCAT('', paymentmethod, '%'))
  AND (paymentspec IS NULL
  OR paymentspec = ''
  OR v.PaymentSpec LIKE CONCAT('', paymentspec, '%'))
  AND (vendbank IS NULL
  OR vendbank = ''
  OR v.VendBankId LIKE CONCAT('', vendbank, '%'))
  AND (glCode IS NULL
  OR glCode = ''
  OR ExistsInApprovalHistory(i.InvoiceId, 'GLCode', glCode, @likeStartParamForGL) = TRUE)
  AND (glprojectType IS NULL
  OR glprojectType = ''
  OR ExistsInApprovalHistory(i.InvoiceId, 'ProjectType', glprojectType, '') = TRUE)
  -- AND (gldescription IS NULL OR gldescription = '' OR ExistsInApprovalHistory(i.InvoiceId, 'GLDescription', gldescription, '') = TRUE)
  AND (gldescription IS NULL
  OR gldescription = ''
  OR EXISTS (SELECT
      *
    FROM ApprovalHistory ah
    WHERE ah.InvoiceId = i.InvoiceId
    AND ah.SpecialNote LIKE CONCAT('', gldescription, '%')))
  AND (companyCode IS NULL
  OR companyCode = ''
  OR ExistsInApprovalHistory(i.InvoiceId, 'CompanyCode', companyCode, '') = TRUE
  OR i.CompanyCode LIKE CONCAT('', companyCode, '%'))
  AND (isPOInvoice IS NULL
  OR i.IsPOInvoice = isPOInvoice)
  AND (isFactoryVendor IS NULL OR v.IsFactoryVendor = isFactoryVendor)
  AND (customerName IS NULL
  OR customerName = ''
  OR c.CustomerName LIKE CONCAT('%', customerName, '%'))
  AND (TransactionIdentifer IS NULL
  OR TransactionIdentifer = ''
  OR i.TransactionIdentifer LIKE CONCAT('%', TransactionIdentifer, '%'))
  AND (CheckDate IS NULL
  -- OR CheckDate = ''
  OR i.UserField4 LIKE CONCAT('%', CheckDate, '%'))
  AND (customerAddress IS NULL
  OR customerAddress = ''
  OR ca.StreetName LIKE CONCAT('%', customerAddress, '%')
  OR ca.Address1 LIKE CONCAT('%', customerAddress, '%'))
  AND (capitalProjectNo IS NULL
  OR capitalProjectNo = ''
  OR (i.IsPOInvoice = TRUE
  AND (SELECT
      COUNT(*)
    FROM LineItemDetail lid
    WHERE lid.InvoiceId = i.InvoiceId
    AND lid.CapitalProjectNo = capitalProjectNo) > 0))
  AND (paymentTypes IS NULL
  OR paymentTypes = ''
  OR (i.VendorId IS NOT NULL
  AND FIND_IN_SET(v.PaymentType, paymentTypes)))
  AND (groupCode IS NULL
  OR groupCode = ''
  OR (i.CustomerLocationId IS NOT NULL
  AND c.CustomerNo LIKE CONCAT('', groupCode, '%')))
  AND (coilNo IS NULL
  OR coilNo = ''
  OR (SELECT
      COUNT(*)
    FROM LineItemDetail lid
    WHERE lid.InvoiceId = i.InvoiceId
    AND lid.ProductId LIKE CONCAT('', coilNo, '%')) > 0
  )
  -- AUTO APPROVE START
  AND (isAutoApproved IS NULL
  OR isAutoApproved = ''
  OR (isAutoApproved = TRUE
  AND (
  (i.ApprovalStatusId = 3
  AND EXISTS (SELECT
      *
    FROM AutoApproveReport ar
    WHERE ar.InvoiceId = i.InvoiceId))
  OR EXISTS (SELECT
      *
    FROM InvoiceHistory ih
    WHERE ih.InvoiceId = i.InvoiceId
    AND ih.ActorId = @emptyUUID
    AND ih.Field = 'Invoice Status'
    AND ih.InitialStatus = 'In Approval'
    AND ih.CurrentStatus = 'Approved'))
  )
  OR (isAutoApproved = FALSE
  AND NOT EXISTS (SELECT
      *
    FROM AutoApproveReport ar
    WHERE ar.InvoiceId = i.InvoiceId)
  AND NOT EXISTS (SELECT
      *
    FROM InvoiceHistory ih
    WHERE ih.InvoiceId = i.InvoiceId
    AND ih.ActorId = @emptyUUID
    AND ih.Field = 'Invoice Status'
    AND ih.InitialStatus = 'In Approval'
    AND ih.CurrentStatus = 'Approved'))
  )
  -- AUTO APPROVE END
  AND (tranIdentifier IS NULL
  OR tranIdentifier = ''
  OR (SELECT
      COUNT(*)
    FROM PaymentStatus ps
    WHERE ps.InvoiceId = i.InvoiceId
    AND ps.TransactionIdentifier = tranIdentifier) > 0
  )
  AND (isExpiredPayment IS NULL
  OR isExpiredPayment = ''
  OR (isExpiredPayment = TRUE
  AND (i.Reissued = TRUE
  OR (SELECT
      COUNT(*)
    FROM PaymentStatus ps
    WHERE ps.InvoiceId = i.InvoiceId
    AND ps.TransactionIdentifier = "EXPIRED") > 0))
  OR (isExpiredPayment = FALSE
  AND (i.Reissued = FALSE
  OR (SELECT
      COUNT(*)
    FROM PaymentStatus ps
    WHERE ps.InvoiceId = i.InvoiceId
    AND ps.TransactionIdentifier = "EXPIRED") = 0))
  )
  AND (paymentDateFrom IS NULL
  -- OR paymentDateFrom = ''
  OR (SELECT
      COUNT(*)
    FROM PaymentStatus ps
    WHERE ps.InvoiceId = i.InvoiceId
    AND ps.ReceivedDate >= paymentDateFrom) > 0)
  AND (paymentDateTo IS NULL
  -- OR paymentDateTo = ''
  OR (SELECT
      COUNT(*)
    FROM PaymentStatus ps
    WHERE ps.InvoiceId = i.InvoiceId
    AND ps.ReceivedDate < DATE_ADD(paymentDateTo, INTERVAL 1 DAY)) > 0)
  AND (netTermDateFrom IS NULL
  -- OR netTermDateFrom = ''
  OR i.NetTermDate >= netTermDateFrom)
  AND (netTermDateTo IS NULL
  -- OR netTermDateTo = ''
  OR i.NetTermDate < DATE_ADD(netTermDateTo, INTERVAL 1 DAY))
  AND (invoiceStatuses IS NULL
  OR invoiceStatuses = ''
  OR (i.ApprovalStatusId IS NOT NULL
  AND FIND_IN_SET(i.ApprovalStatusId, invoiceStatuses)))
  AND (assignedTos IS NULL
  OR assignedTos = ''
  OR ((restrictToUser IS NULL
  OR restrictToUser <> TRUE)
  AND (SELECT
      COUNT(*)
    FROM UserInvoiceAssignment uia
    WHERE uia.InvoiceId = i.InvoiceId
    AND FIND_IN_SET(uia.UserId, assignedTos)) > 0)
  OR (restrictToUser = TRUE
  AND (SELECT
      COUNT(*)
    FROM UserInvoiceAssignment uia
    WHERE uia.InvoiceId = i.InvoiceId
    AND FIND_IN_SET(uia.UserId, assignedTos)) > 0
  AND (SELECT
      COUNT(*)
    FROM UserInvoiceAssignment uia
    WHERE uia.InvoiceId = i.InvoiceId
    AND FIND_IN_SET(uia.UserId, assignedTos)) = 0)
  )
  AND (locations IS NULL
  OR locations = ''
  OR FIND_IN_SET(i.OrgId, locations)
  OR (SELECT
      COUNT(*)
    FROM ApprovalHistory ah
    WHERE ah.InvoiceId = i.InvoiceId
    AND FIND_IN_SET(ah.OrgId, locations)))
  AND (isHoldInvoice IS NULL
  OR (isHoldInvoice = TRUE
  AND (SELECT
      COUNT(*)
    FROM UserInvoiceAssignment uia
    WHERE uia.InvoiceId = i.InvoiceId
    AND uia.HoldEndDate IS NOT NULL
    AND uia.HoldEndDate > CURDATE()) > 0)
  OR (isHoldInvoice = FALSE
  AND (SELECT
      COUNT(*)
    FROM UserInvoiceAssignment uia
    WHERE uia.InvoiceId = i.InvoiceId
    AND uia.HoldEndDate IS NOT NULL
    AND uia.HoldEndDate > CURDATE()) = 0)
  )
  AND (isFilterViewForSupervisorByDepartmentEnabled = FALSE
  OR IsInvoiceDepartmentInUserDepartments(userId, i.InvoiceId)
  OR IsInvoiceDepartmentInUserDepartments(assignorUserId, i.InvoiceId))
  AND (invoiceTypes IS NULL
  OR invoiceTypes = ''
  OR FIND_IN_SET(i.InvoiceType, invoiceTypes)
  OR (i.Reissued = TRUE
  AND FIND_IN_SET("expired", invoiceTypes)))
  -- AND (userClientCompanyCodes IS NULL OR userClientCompanyCodes = '' OR i.CompanyCode IN("'" + userClientCompanyCodes + "'"))
  -- AND (userClientCompanyCodes IS NULL OR userClientCompanyCodes = '' OR FIND_IN_SET(REPLACE(i.CompanyCode, ',',''), userClientCompanyCodes))
  AND (userClientCompanyCodes IS NULL
  OR userClientCompanyCodes = ''
  OR InvoiceExistsInUserCompanies(clientId, userId, i.CompanyCode) = 1)
  AND (isUserAdministrator = TRUE
  OR isFilterByDepartmentEnabled = FALSE
  OR IsInvoiceDepartmentInUserDepartments(userId, i.InvoiceId))
  AND (department IS NULL
  OR department = ''
  OR ExistsInApprovalHistory(i.InvoiceId, 'Department', department, '') = TRUE)
  AND (isConfidential IS NULL
  OR isConfidential = ''
  OR (CASE WHEN i.VendorId IS NOT NULL AND
      v.IsConfidential THEN v.IsConfidential = isConfidential WHEN i.IsConfidential IS NULL THEN isConfidential = FALSE ELSE i.IsConfidential = isConfidential END)
  )
  AND (userField1 IS NULL
  OR userField1 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField1", wholeArgs) THEN i.UserField1 = UserField1 ELSE i.UserField1 LIKE CONCAT('', userField1, '%') END))
  AND (userField2 IS NULL
  OR userField2 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField2", wholeArgs) THEN i.UserField2 = UserField2 ELSE i.UserField2 LIKE CONCAT('', userField2, '%') END))
  AND (userField3 IS NULL
  OR userField3 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField3", wholeArgs) THEN i.UserField3 = UserField3 ELSE i.UserField3 LIKE CONCAT('', userField3, '%') END))
  AND (userField4 IS NULL
  OR userField4 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField4", wholeArgs) THEN i.UserField4 = UserField4 ELSE i.UserField4 LIKE CONCAT('', userField4, '%') END))
  AND (userField5 IS NULL
  OR userField5 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField5", wholeArgs) THEN i.UserField5 = UserField5 ELSE i.UserField5 LIKE CONCAT('', userField5, '%') END))
  AND (userField6 IS NULL
  OR userField6 = ''
  OR i.UserField6 = userField6)
  AND (filterOneTimeVendor IS NULL
  OR filterOneTimeVendor = ''
  OR i.UserField6 LIKE CONCAT('%', filterOneTimeVendor, '%'))
  AND (userField7 IS NULL
  OR userField7 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField7", wholeArgs) THEN i.UserField7 = UserField7 ELSE i.UserField7 LIKE CONCAT('', userField7, '%') END))
  AND (userField8 IS NULL
  OR userField8 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField8", wholeArgs) THEN i.UserField8 = UserField8 ELSE i.UserField8 LIKE CONCAT('', userField8, '%') END))
  AND (userField9 IS NULL
  OR userField9 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField9", wholeArgs) THEN i.UserField9 = UserField9 ELSE i.UserField9 LIKE CONCAT('', userField9, '%') END))
  AND (userField10 IS NULL
  OR userField10 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField10", wholeArgs) THEN i.UserField10 = UserField10 ELSE i.UserField10 LIKE CONCAT('', userField10, '%') END))
  AND (currency IS NULL
  OR currency = ''
  OR i.Currency LIKE CONCAT('', currency, '%'))
  AND (lineItemDescription IS NULL
  OR lineItemDescription = ''
  OR (SELECT
      COUNT(*)
    FROM LineItemDetail lid
    WHERE lid.InvoiceId = i.InvoiceId
    AND (lid.Description LIKE CONCAT('', lineItemDescription, '%')
    OR lid.ProductDescription LIKE CONCAT('', lineItemDescription, '%'))) > 0)
  AND (vendorSite IS NULL
  OR vendorSite = ''
  OR d.DepartmentName LIKE CONCAT('', vendorSite, '%')
  OR d.Description LIKE CONCAT('', vendorSite, '%'))
  AND (deliveryNumber IS NULL
  OR deliveryNumber = ''
  OR i.DeliveryNumber LIKE CONCAT('', deliveryNumber, '%'))
  AND (checkDateFrom IS NULL
  -- OR checkDateFrom = ''
  OR i.CheckDate >= checkDateFrom)
  AND (checkDateTo IS NULL
  -- OR checkDateTo = ''
  OR i.CheckDate < DATE_ADD(checkDateTo, INTERVAL 1 DAY))
  AND (invoiceSources IS NULL
  OR invoiceSources = ''
  OR (i.BatchId IS NOT NULL
  AND FIND_IN_SET(b.Source, invoiceSources)))
  AND (invoiceSender IS NULL
  OR invoiceSender = ''
  OR (i.BatchId IS NOT NULL
  AND (SELECT
      COUNT(*)
    FROM `User` ut
    WHERE ut.ClientId = clientId
    AND FIND_IN_SET(ut.UserId, invoiceSender)
    AND b.Sender IS NOT NULL
    AND CONCAT(ut.LastName, '', ut.FirstName) = b.Sender) > 0
  ))
  AND (batchName IS NULL
  OR batchName = ''
  OR (i.BatchId IS NOT NULL
  AND b.BatchName LIKE CONCAT('%', batchName, '%')))
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AlreadyCapturedInvoice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `AlreadyCapturedInvoice`(IN emailSender varchar(250),
IN emailReceiver varchar(250),
IN emailDate date,
IN emailSubject varchar(250),
IN emailAttachments text)
BEGIN
  SELECT
    COUNT(*)
  FROM EmailCaptureLog
  WHERE Sender = emailSender
  AND Receiver = emailReceiver
  AND Subject = emailSubject
  AND DATE(date) = DATE(emailDate)
  AND Attachments = emailAttachments
  AND emailSubject IN (SELECT
      ecce.EmailSubject
    FROM EmailCaptureClientEmails ecce
      INNER JOIN EmailCaptureAttachments eca
        ON eca.EmailCaptureClientEmailId = ecce.EmailCaptureClientEmailId
    WHERE ecce.EmailSource = emailSender
    AND DATE(ecce.ReceivedDateTime) = DATE(emailDate)
    AND emailAttachments LIKE CONCAT('%', eca.EmailAttachmentName, '%'));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ApprovalUserInvoiceAssignmentCount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ApprovalUserInvoiceAssignmentCount`(IN userIdP char(36),
IN vendorIdP int, IN lockedBeforeP datetime)
BEGIN
  SELECT
    COUNT(*)
  FROM UserInvoiceAssignment uia
  WHERE uia.UserId = userIdP
  AND uia.`Type` = 0
  AND (uia.HoldEndDate IS NULL
  OR uia.HoldEndDate < CURDATE())
  AND uia.InvoiceId IN (SELECT
      inv.InvoiceId
    FROM Invoice inv
    WHERE inv.VendorId = vendorIdP
    AND inv.IsPaused = 0
    AND (inv.ApprovalStatusId = 3
    OR inv.ApprovalStatusId = 4)
    AND inv.IsDeleted = 0
    AND (inv.IsLocked = 0
    OR inv.LockedAt < lockedBeforeP
    OR inv.LockedBy = userIdP));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ApproverPerformance` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ApproverPerformance`(startDate datetime, endDate datetime)
BEGIN
  DROP TABLE IF EXISTS T1;
  DROP TABLE IF EXISTS T2;
  DROP TABLE IF EXISTS T3;
  DROP TABLE IF EXISTS T4;
  DROP TABLE IF EXISTS T5;
  DROP TABLE IF EXISTS T6;
  DROP TABLE IF EXISTS T7;
  DROP TABLE IF EXISTS T8;

  CREATE TEMPORARY TABLE T1 (
    InvoiceId int NULL,
    `Actor` nvarchar(250) NULL,
    ActionDate datetime NULL,
    PreviousData nvarchar(500) NULL,
    NewData nvarchar(500) NULL,
    Field nvarchar(250) NULL,
    InitialStatus nvarchar(50) NULL,
    CurrentStatus nvarchar(50) NULL,
    ActorId char(36) NULL
  );

  CREATE TEMPORARY TABLE T2 (
    InvoiceId int NULL,
    Actor nvarchar(250) NULL,
    ActionDate datetime NULL,
    PreviousData nvarchar(500) NULL,
    NewData nvarchar(500) NULL,
    Field nvarchar(250) NULL,
    InitialStatus nvarchar(50) NULL,
    CurrentStatus nvarchar(50) NULL,
    ActorId char(36) NULL
  );

  CREATE TEMPORARY TABLE T5 (
    InvoiceId int NULL,
    `Actor` nvarchar(250) NULL,
    ActionDate datetime NULL,
    PreviousData nvarchar(500) NULL,
    NewData nvarchar(500) NULL,
    Field nvarchar(250) NULL,
    InitialStatus nvarchar(50) NULL,
    CurrentStatus nvarchar(50) NULL,
    ActorId char(36) NULL
  );

  CREATE TEMPORARY TABLE T6 (
    InvoiceId int NULL,
    Actor nvarchar(250) NULL,
    ActionDate datetime NULL,
    PreviousData nvarchar(500) NULL,
    NewData nvarchar(500) NULL,
    Field nvarchar(250) NULL,
    InitialStatus nvarchar(50) NULL,
    CurrentStatus nvarchar(50) NULL,
    ActorId char(36) NULL
  );

  INSERT INTO T1
    SELECT
      invoiceid,
      actor,
      actiondate,
      previousdata,
      newdata,
      field,
      initialstatus,
      currentstatus,
      actorid
    FROM InvoiceHistory
    WHERE actorid IN (SELECT
        userid
      FROM `User`
      WHERE clientid = 1)
    AND initialstatus = 'captured'
    AND currentstatus = 'in approval'
    AND actiondate >= startDate
    AND actiondate < endDate;

  -- select * from T1;

  INSERT INTO T2
    SELECT
      invoiceid,
      actor,
      actiondate,
      previousdata,
      newdata,
      field,
      initialstatus,
      currentstatus,
      actorid
    FROM InvoiceHistory
    WHERE actorid IN (SELECT
        userid
      FROM `User`
      WHERE clientid = 1)
    AND initialstatus = 'in approval'
    AND currentstatus = 'approved'
    AND actiondate >= startDate
    AND actiondate < endDate;

  INSERT INTO T5
    SELECT
      invoiceid,
      actor,
      actiondate,
      previousdata,
      newdata,
      field,
      initialstatus,
      currentstatus,
      actorid
    FROM InvoiceHistory
    WHERE actorid IN (SELECT
        userid
      FROM `User`
      WHERE clientid = 1)
    AND initialstatus = 'captured'
    AND currentstatus = 'in approval'
    AND actiondate >= DATE_FORMAT(NOW(), '%Y-01-01')
    AND actiondate < endDate;

  -- select * from T1;'2016-01-01'

  INSERT INTO T6
    SELECT
      invoiceid,
      actor,
      actiondate,
      previousdata,
      newdata,
      field,
      initialstatus,
      currentstatus,
      actorid
    FROM InvoiceHistory
    WHERE actorid IN (SELECT
        userid
      FROM `User`
      WHERE clientid = 1)
    AND initialstatus = 'in approval'
    AND currentstatus = 'approved'
    AND actiondate >= DATE_FORMAT(NOW(), '%Y-01-01')
    AND actiondate < endDate;


  CREATE TEMPORARY TABLE T3 (
    assignedOn datetime,
    approveddate datetime,
    invoiceid int,
    actor nvarchar(250),
    datedif float
  );

  CREATE TEMPORARY TABLE T4 (
    assignedOn datetime,
    approveddate datetime,
    invoiceid int,
    actor nvarchar(250),
    datedif float
  );

  CREATE TEMPORARY TABLE T7 (
    assignedOn datetime,
    approveddate datetime,
    invoiceid int,
    actor nvarchar(250),
    datedif float
  );

  CREATE TEMPORARY TABLE T8 (
    assignedOn datetime,
    approveddate datetime,
    invoiceid int,
    actor nvarchar(250),
    datedif float
  );

  INSERT INTO T3
    SELECT
      o.actiondate AS assignedOn,
      t.actiondate AS approvedDate,
      o.invoiceid,
      t.actor,
      DATEDIFF(t.actiondate, o.actiondate)
    FROM T1 o
      LEFT JOIN T2 t
        ON o.invoiceid = t.invoiceid;

  INSERT INTO T4
    SELECT
      o.actiondate AS assignedOn,
      t.actiondate AS approvedDate,
      o.invoiceid,
      t.actor,
      DATEDIFF(t.actiondate, o.actiondate)
    FROM T1 o
      LEFT JOIN T2 t
        ON o.invoiceid = t.invoiceid;

  INSERT INTO T7
    SELECT
      o.actiondate AS assignedOn,
      t.actiondate AS approvedDate,
      o.invoiceid,
      t.actor,
      DATEDIFF(t.actiondate, o.actiondate)
    FROM T5 o
      LEFT JOIN T6 t
        ON o.invoiceid = t.invoiceid;

  INSERT INTO T8
    SELECT
      o.actiondate AS assignedOn,
      t.actiondate AS approvedDate,
      o.invoiceid,
      t.actor,
      DATEDIFF(t.actiondate, o.actiondate)
    FROM T5 o
      LEFT JOIN T6 t
        ON o.invoiceid = t.invoiceid;

  -- select * from T3;

  SELECT
    T3.actor,
    ROUND(AVG(T3.datedif), 5) AS `Average`,
    MAX(T3.datedif) AS `Maximum`,
    ROUND(AVG(T7.datedif), 5) AS `YearlyAverage`,
    (SELECT
        COUNT(a.invoiceid)
      FROM T4 a
      WHERE a.actor = T3.actor) AS `Total`,
    (SELECT
        COUNT(b.invoiceid)
      FROM T8 b
      WHERE b.actor = T3.actor) AS `YearlyTotal`
  -- , avg(T13.datedif) as`YearlyAverage`
  FROM T3
    INNER JOIN T7
      ON T3.actor = T7.actor
  WHERE T3.actor IS NOT NULL
  GROUP BY T3.actor;

  DROP TABLE IF EXISTS T1;
  DROP TABLE IF EXISTS T2;
  DROP TABLE IF EXISTS T3;
  DROP TABLE IF EXISTS T4;
  DROP TABLE IF EXISTS T5;
  DROP TABLE IF EXISTS T6;
  DROP TABLE IF EXISTS T7;
  DROP TABLE IF EXISTS T8;

/*Select concat(u.LastName, ' ',  u.FiirstName) Actor , Average, Maximum, Total, YearlyAverage, YearlyTotal 
From ApproverPerformanceReport apr 
Inner Join User u on u.UserId = apr.ActorId
where WeekOf = startDate;*/
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CalculateAverages` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `CalculateAverages`(IN startdate date,
IN enddate date)
BEGIN
  -- YearlyAverage
  SELECT
    ToApprovalSubStepUserId,
    AVG(DATEDIFF(ApprovedDate, AssignDate)) AS YearlyAverage
  FROM (SELECT
      a.InvoiceId,
      a.ToApprovalSubStepUserId,
      a.AssignDate,
      b.InvoiceId AS ApprovedInvoiceId,
      b.FromApprovalSubStepUserId,
      b.ApprovedDate
    FROM (SELECT
        uih1.InvoiceId,
        uih1.ToApprovalSubStepUserId,
        uih1.ApprovedOn AS AssignDate,
        @row_number1 := IF(@prev1 = CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId), @row_number1 + 1, 1) AS RowNum,
        @prev1 := CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId)
      FROM UserInvoiceAssignmentHistory uih1
        CROSS JOIN (SELECT
            @row_number1 := 0,
            @prev1 := '') AS vars
      WHERE uih1.ToApprovalSubStepUserId IS NOT NULL
      AND uih1.ApprovedOn >= startdate
      AND uih1.ApprovedOn <= enddate
      ORDER BY uih1.InvoiceId, uih1.ToApprovalSubStepUserId, uih1.ApprovedOn) a
      JOIN (SELECT
          uih2.InvoiceId,
          uih2.FromApprovalSubStepUserId,
          uih2.ApprovedOn AS ApprovedDate,
          @row_number2 := IF(@prev2 = CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId), @row_number2 + 1, 1) AS RowNum,
          @prev2 := CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId)
        FROM UserInvoiceAssignmentHistory uih2
          CROSS JOIN (SELECT
              @row_number2 := 0,
              @prev2 := '') AS vars
        WHERE uih2.FromApprovalSubStepUserId IS NOT NULL
        AND uih2.ApprovedOn >= startdate
        AND uih2.ApprovedOn <= enddate
        ORDER BY uih2.InvoiceId, uih2.FromApprovalSubStepUserId, uih2.ApprovedOn) b
        ON a.InvoiceId = b.InvoiceId
        AND a.ToApprovalSubStepUserId = b.FromApprovalSubStepUserId
        AND a.RowNum = b.RowNum
    ORDER BY a.InvoiceId, a.AssignDate) AS UserApprovalData
  WHERE AssignDate >= startdate
  AND AssignDate <= enddate
  GROUP BY ToApprovalSubStepUserId;

  -- MonthlyAverage
  SELECT
    ToApprovalSubStepUserId,
    AVG(DATEDIFF(ApprovedDate, AssignDate)) AS MonthlyAverage
  FROM (SELECT
      a.InvoiceId,
      a.ToApprovalSubStepUserId,
      a.AssignDate,
      b.InvoiceId AS ApprovedInvoiceId,
      b.FromApprovalSubStepUserId,
      b.ApprovedDate
    FROM (SELECT
        uih1.InvoiceId,
        uih1.ToApprovalSubStepUserId,
        uih1.ApprovedOn AS AssignDate,
        @row_number1 := IF(@prev1 = CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId), @row_number1 + 1, 1) AS RowNum,
        @prev1 := CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId)
      FROM UserInvoiceAssignmentHistory uih1
        CROSS JOIN (SELECT
            @row_number1 := 0,
            @prev1 := '') AS vars
      WHERE uih1.ToApprovalSubStepUserId IS NOT NULL
      AND uih1.ApprovedOn >= startdate
      AND uih1.ApprovedOn <= enddate
      ORDER BY uih1.InvoiceId, uih1.ToApprovalSubStepUserId, uih1.ApprovedOn) a
      JOIN (SELECT
          uih2.InvoiceId,
          uih2.FromApprovalSubStepUserId,
          uih2.ApprovedOn AS ApprovedDate,
          @row_number2 := IF(@prev2 = CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId), @row_number2 + 1, 1) AS RowNum,
          @prev2 := CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId)
        FROM UserInvoiceAssignmentHistory uih2
          CROSS JOIN (SELECT
              @row_number2 := 0,
              @prev2 := '') AS vars
        WHERE uih2.FromApprovalSubStepUserId IS NOT NULL
        AND uih2.ApprovedOn >= startdate
        AND uih2.ApprovedOn <= enddate
        ORDER BY uih2.InvoiceId, uih2.FromApprovalSubStepUserId, uih2.ApprovedOn) b
        ON a.InvoiceId = b.InvoiceId
        AND a.ToApprovalSubStepUserId = b.FromApprovalSubStepUserId
        AND a.RowNum = b.RowNum
    ORDER BY a.InvoiceId, a.AssignDate) AS UserApprovalData
  WHERE AssignDate >= startdate
  AND AssignDate <= enddate
  GROUP BY ToApprovalSubStepUserId;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CalculateAverages1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `CalculateAverages1`(IN p_ClientId int,
IN p_YearDateFrom datetime,
IN p_DateTo datetime,
IN p_ApplicableInvoiceStatuses varchar(1000))
BEGIN
  SET @StartDateOfMonth = DATE_FORMAT(p_DateTo, '%Y-%m-01');
  SET @TotalMonths = TIMESTAMPDIFF(MONTH, p_YearDateFrom, p_DateTo);
  -- YearlyAverage and MonthlyAverage
  SELECT

    u.FromApprovalSubStepUserId AS ActorId,
    SUM(CASE WHEN MONTH(u.AssignDate) = MONTH(p_DateTo) AND
        YEAR(u.AssignDate) = YEAR(p_DateTo) THEN DATEDIFF(u.ApprovedDate, u.AssignDate) ELSE 0 END) AS test,
    COUNT(CASE WHEN MONTH(u.AssignDate) = MONTH(p_DateTo) AND
        YEAR(u.AssignDate) = YEAR(p_DateTo) THEN u.InvoiceId END) AS noofInvoices,
    (SUM(CASE WHEN MONTH(u.AssignDate) = MONTH(p_DateTo) AND
        YEAR(u.AssignDate) = YEAR(p_DateTo) THEN DATEDIFF(u.ApprovedDate, u.AssignDate) ELSE 0 END)) / (COUNT(DISTINCT CASE WHEN MONTH(u.AssignDate) = MONTH(p_DateTo) AND
        YEAR(u.AssignDate) = YEAR(p_DateTo) THEN u.InvoiceId ELSE 0 END)) AS PreviesMonthAverage,
    MAX(CASE WHEN MONTH(u.AssignDate) = MONTH(p_DateTo) AND
        YEAR(u.AssignDate) = YEAR(p_DateTo) THEN DATEDIFF(u.ApprovedDate, u.AssignDate) ELSE 0 END) AS MaximumDays,
    COUNT(DISTINCT u.InvoiceId) AS MonthlyTotal,
    SUM(DATEDIFF(u.ApprovedDate, u.AssignDate)) / COUNT(DISTINCT u.InvoiceId) / @TotalMonths AS MonthlyAverage,
    MAX(DATEDIFF(u.ApprovedDate, u.AssignDate)) AS MonthlyMaximumDays

  FROM (SELECT
      a.InvoiceId,
      a.ToApprovalSubStepUserId,
      a.AssignDate,
      b.FromApprovalSubStepUserId,
      b.ApprovedDate
    FROM (SELECT
        uih1.InvoiceId,
        uih1.ToApprovalSubStepUserId,
        uih1.ApprovedOn AS AssignDate,
        @row_number1 := IF(@prev1 = CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId), @row_number1 + 1, 1) AS RowNum,
        @prev1 := CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId)
      FROM UserInvoiceAssignmentHistory uih1
        CROSS JOIN (SELECT
            @row_number1 := 0,
            @prev1 := '') AS vars
      WHERE uih1.ToApprovalSubStepUserId IS NOT NULL
      AND uih1.ApprovedOn >= p_YearDateFrom
      AND uih1.ApprovedOn <= p_DateTo
      ORDER BY uih1.InvoiceId, uih1.ToApprovalSubStepUserId, uih1.ApprovedOn) a
      JOIN (SELECT
          uih2.InvoiceId,
          uih2.FromApprovalSubStepUserId,
          uih2.ApprovedOn AS ApprovedDate,
          @row_number2 := IF(@prev2 = CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId), @row_number2 + 1, 1) AS RowNum,
          @prev2 := CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId)
        FROM UserInvoiceAssignmentHistory uih2
          CROSS JOIN (SELECT
              @row_number2 := 0,
              @prev2 := '') AS vars
        WHERE uih2.FromApprovalSubStepUserId IS NOT NULL
        AND uih2.ApprovedOn >= p_YearDateFrom
        AND uih2.ApprovedOn <= p_DateTo
        ORDER BY uih2.InvoiceId, uih2.FromApprovalSubStepUserId, uih2.ApprovedOn) b
        ON a.InvoiceId = b.InvoiceId
        AND a.ToApprovalSubStepUserId = b.FromApprovalSubStepUserId
        AND a.RowNum = b.RowNum
    ORDER BY a.InvoiceId, a.AssignDate) AS u
    INNER JOIN Invoice i
      ON u.InvoiceId = i.InvoiceId
  WHERE u.AssignDate >= p_YearDateFrom
  AND u.AssignDate <= p_DateTo
  AND i.ClientId = p_ClientId
  AND FIND_IN_SET(i.ApprovalStatusId, p_ApplicableInvoiceStatuses) > 0
  GROUP BY u.FromApprovalSubStepUserId;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CalculateAverages4` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `CalculateAverages4`(IN startdate date,
IN enddate date)
BEGIN
  SET @StartDateOfMonth = DATE_FORMAT(enddate, '%Y-%m-01');

  -- Yearly Average Calculation
  SELECT
    ToApprovalSubStepUserId,
    AVG(DATEDIFF(ApprovedDate, AssignDate)) AS YearlyAverage,
    COUNT(DISTINCT UserApprovalData.InvoiceId) AS YearlyInvoiceCount
  FROM (SELECT
      a.InvoiceId,
      a.ToApprovalSubStepUserId,
      a.AssignDate,
      b.InvoiceId AS ApprovedInvoiceId,
      b.FromApprovalSubStepUserId,
      b.ApprovedDate
    FROM (SELECT
        uih1.InvoiceId,
        uih1.ToApprovalSubStepUserId,
        uih1.ApprovedOn AS AssignDate,
        @row_number1 := IF(@prev1 = CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId), @row_number1 + 1, 1) AS RowNum,
        @prev1 := CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId)
      FROM UserInvoiceAssignmentHistory uih1
        CROSS JOIN (SELECT
            @row_number1 := 0,
            @prev1 := '') AS vars
      WHERE uih1.ToApprovalSubStepUserId IS NOT NULL
      AND uih1.ApprovedOn >= startdate
      AND uih1.ApprovedOn <= enddate
      ORDER BY uih1.InvoiceId, uih1.ToApprovalSubStepUserId, uih1.ApprovedOn) a
      JOIN (SELECT
          uih2.InvoiceId,
          uih2.FromApprovalSubStepUserId,
          uih2.ApprovedOn AS ApprovedDate,
          @row_number2 := IF(@prev2 = CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId), @row_number2 + 1, 1) AS RowNum,
          @prev2 := CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId)
        FROM UserInvoiceAssignmentHistory uih2
          CROSS JOIN (SELECT
              @row_number2 := 0,
              @prev2 := '') AS vars
        WHERE uih2.FromApprovalSubStepUserId IS NOT NULL
        AND uih2.ApprovedOn >= startdate
        ORDER BY uih2.InvoiceId, uih2.FromApprovalSubStepUserId, uih2.ApprovedOn) b
        ON a.InvoiceId = b.InvoiceId
        AND a.ToApprovalSubStepUserId = b.FromApprovalSubStepUserId
        AND a.RowNum = b.RowNum
    ORDER BY a.InvoiceId, a.AssignDate) AS UserApprovalData
    INNER JOIN Invoice i
      ON UserApprovalData.InvoiceId = i.InvoiceId
  WHERE UserApprovalData.AssignDate >= startdate
  AND UserApprovalData.AssignDate <= enddate
  AND ClientId = 98
  GROUP BY ToApprovalSubStepUserId;

  -- Monthly Average Calculation
  SELECT
    ToApprovalSubStepUserId,
    AVG(DATEDIFF(ApprovedDate, AssignDate)) AS MonthlyAverage,
    COUNT(DISTINCT UserApprovalData.InvoiceId) AS MonthlyInvoiceCount
  FROM (SELECT
      a.InvoiceId,
      a.ToApprovalSubStepUserId,
      a.AssignDate,
      b.InvoiceId AS ApprovedInvoiceId,
      b.FromApprovalSubStepUserId,
      b.ApprovedDate
    FROM (SELECT
        uih1.InvoiceId,
        uih1.ToApprovalSubStepUserId,
        uih1.ApprovedOn AS AssignDate,
        @row_number1 := IF(@prev1 = CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId), @row_number1 + 1, 1) AS RowNum,
        @prev1 := CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId)
      FROM UserInvoiceAssignmentHistory uih1
        CROSS JOIN (SELECT
            @row_number1 := 0,
            @prev1 := '') AS vars
      WHERE uih1.ToApprovalSubStepUserId IS NOT NULL
      AND uih1.ApprovedOn >= startdate
      AND uih1.ApprovedOn <= enddate
      ORDER BY uih1.InvoiceId, uih1.ToApprovalSubStepUserId, uih1.ApprovedOn) a
      JOIN (SELECT
          uih2.InvoiceId,
          uih2.FromApprovalSubStepUserId,
          uih2.ApprovedOn AS ApprovedDate,
          @row_number2 := IF(@prev2 = CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId), @row_number2 + 1, 1) AS RowNum,
          @prev2 := CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId)
        FROM UserInvoiceAssignmentHistory uih2
          CROSS JOIN (SELECT
              @row_number2 := 0,
              @prev2 := '') AS vars
        WHERE uih2.FromApprovalSubStepUserId IS NOT NULL
        AND uih2.ApprovedOn >= startdate
        ORDER BY uih2.InvoiceId, uih2.FromApprovalSubStepUserId, uih2.ApprovedOn) b
        ON a.InvoiceId = b.InvoiceId
        AND a.ToApprovalSubStepUserId = b.FromApprovalSubStepUserId
        AND a.RowNum = b.RowNum
    ORDER BY a.InvoiceId, a.AssignDate) AS UserApprovalData
    INNER JOIN Invoice i
      ON UserApprovalData.InvoiceId = i.InvoiceId
  WHERE UserApprovalData.AssignDate >= @StartDateOfMonth
  AND UserApprovalData.AssignDate <= enddate
  AND i.ClientId = 98
  GROUP BY ToApprovalSubStepUserId;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CalculateAveragesWithInvoice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `CalculateAveragesWithInvoice`(IN startdate date,
IN enddate date)
BEGIN
  -- YearlyAverage and MonthlyAverage
  SELECT
    i.InvoiceId,
    u.ToApprovalSubStepUserId,
    AVG(DATEDIFF(u.ApprovedDate, u.AssignDate)) AS YearlyAverage,
    AVG(CASE WHEN MONTH(u.ApprovedDate) = MONTH(enddate) THEN DATEDIFF(u.ApprovedDate, u.AssignDate) END) AS MonthlyAverage
  FROM (SELECT
      a.InvoiceId,
      a.ToApprovalSubStepUserId,
      a.AssignDate,
      b.FromApprovalSubStepUserId,
      b.ApprovedDate
    FROM (SELECT
        uih1.InvoiceId,
        uih1.ToApprovalSubStepUserId,
        uih1.ApprovedOn AS AssignDate,
        @row_number1 := IF(@prev1 = CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId), @row_number1 + 1, 1) AS RowNum,
        @prev1 := CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId)
      FROM UserInvoiceAssignmentHistory uih1
        CROSS JOIN (SELECT
            @row_number1 := 0,
            @prev1 := '') AS vars
      WHERE uih1.ToApprovalSubStepUserId IS NOT NULL
      AND uih1.ApprovedOn >= startdate
      AND uih1.ApprovedOn <= enddate
      ORDER BY uih1.InvoiceId, uih1.ToApprovalSubStepUserId, uih1.ApprovedOn) a
      JOIN (SELECT
          uih2.InvoiceId,
          uih2.FromApprovalSubStepUserId,
          uih2.ApprovedOn AS ApprovedDate,
          @row_number2 := IF(@prev2 = CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId), @row_number2 + 1, 1) AS RowNum,
          @prev2 := CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId)
        FROM UserInvoiceAssignmentHistory uih2
          CROSS JOIN (SELECT
              @row_number2 := 0,
              @prev2 := '') AS vars
        WHERE uih2.FromApprovalSubStepUserId IS NOT NULL
        AND uih2.ApprovedOn >= startdate
        AND uih2.ApprovedOn <= enddate
        ORDER BY uih2.InvoiceId, uih2.FromApprovalSubStepUserId, uih2.ApprovedOn) b
        ON a.InvoiceId = b.InvoiceId
        AND a.ToApprovalSubStepUserId = b.FromApprovalSubStepUserId
        AND a.RowNum = b.RowNum
    ORDER BY a.InvoiceId, a.AssignDate) AS u
    INNER JOIN Invoice i
      ON u.InvoiceId = i.InvoiceId
  WHERE u.AssignDate >= startdate
  AND u.AssignDate <= enddate
  GROUP BY i.InvoiceId,
           u.ToApprovalSubStepUserId;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CheckUserHasAccessToGlAndDepartment` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `CheckUserHasAccessToGlAndDepartment`(IN theUser nvarchar(50),
IN theGLID int,
IN theDepartmentId int)
BEGIN
  IF NOT EXISTS (SELECT
        *
      FROM ApproverGLCode
      WHERE UserId = theUser
      AND GLCodeId = theGLID) THEN
    SELECT
      FALSE;
  ELSEIF NOT EXISTS (SELECT
        *
      FROM UserDepartment
      WHERE UserId = theUser
      AND DepartmentId = theDepartmentId) THEN
    SELECT
      FALSE;
  ELSE
    SELECT
      TRUE;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CleanBatch` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `CleanBatch`(IN myBatchID int)
BEGIN
  DELETE
    FROM Exception
  WHERE InvoiceId IN (SELECT
        InvoiceID
      FROM Invoice
      WHERE ApprovalStatusId <> 5
      AND ApprovalStatusId <> 4
      AND BatchID = myBatchID);

  DELETE
    FROM InvoiceHistory
  WHERE InvoiceId IN (SELECT
        InvoiceID
      FROM Invoice
      WHERE ApprovalStatusId <> 5
      AND ApprovalStatusId <> 4
      AND BatchID = myBatchID);

  DELETE
    FROM InvoiceDocs
  WHERE InvoiceId IN (SELECT
        InvoiceID
      FROM Invoice
      WHERE ApprovalStatusId <> 5
      AND ApprovalStatusId <> 4
      AND BatchID = myBatchID);

  DELETE
    FROM ExceptionHistory
  WHERE InvoiceId IN (SELECT
        InvoiceID
      FROM Invoice
      WHERE ApprovalStatusId <> 5
      AND ApprovalStatusId <> 4
      AND BatchID = myBatchID);

  DELETE
    FROM ApproverSetting
  WHERE InvoiceId IN (SELECT
        InvoiceID
      FROM Invoice
      WHERE ApprovalStatusId <> 5
      AND ApprovalStatusId <> 4
      AND BatchID = myBatchID);

  DELETE
    FROM ApprovalHistory
  WHERE InvoiceId IN (SELECT
        InvoiceID
      FROM Invoice
      WHERE ApprovalStatusId <> 5
      AND ApprovalStatusId <> 4
      AND BatchID = myBatchID);

  DELETE
    FROM Notification
  WHERE InvoiceId IN (SELECT
        InvoiceID
      FROM Invoice
      WHERE ApprovalStatusId <> 5
      AND ApprovalStatusId <> 4
      AND BatchID = myBatchID);

  DELETE
    FROM DelegationHistory
  WHERE InvoiceId IN (SELECT
        InvoiceID
      FROM Invoice
      WHERE ApprovalStatusId <> 5
      AND ApprovalStatusId <> 4
      AND BatchID = myBatchID);

  DELETE
    FROM UserInvoiceAssignment
  WHERE InvoiceId IN (SELECT
        InvoiceID
      FROM Invoice
      WHERE ApprovalStatusId <> 5
      AND ApprovalStatusId <> 4
      AND BatchID = myBatchID);

  DELETE
    FROM ExportList
  WHERE InvoiceId IN (SELECT
        InvoiceID
      FROM Invoice
      WHERE ApprovalStatusId <> 5
      AND ApprovalStatusId <> 4
      AND BatchID = myBatchID);

  DELETE
    FROM Invoice
  WHERE ApprovalStatusId <> 5
    AND ApprovalStatusId <> 4
    AND BatchID = myBatchID;

  DELETE
    FROM Batch
  WHERE ID = myBatchID;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CleanPOData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `CleanPOData`(IN POClientId int)
BEGIN
  DELETE
    FROM PO
  WHERE PO.ClientId = POClientId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ColemanGetUserLimitHierarchy` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ColemanGetUserLimitHierarchy`()
BEGIN

  SELECT
    CONCAT(d.`DepartmentName`, ' - ', d.`Description`) AS Department,
    FirstUser.Email AS FirstApprover,
    limit1.`MaximumAllowedAmount`,
    SecondUser.Email AS SecondApprover,
    GetNextLevelManager(d.Id, SecondUser.UserId, 'Amount') AS Amount,
    GetNextLevelManager(d.Id, SecondUser.UserId, 'Email') AS ThirdApprover,
    GetNextLevelManager(d.Id, GetNextLevelManager(d.Id, SecondUser.UserId, 'UserId'), 'Amount') AS Amount,
    GetNextLevelManager(d.Id, GetNextLevelManager(d.Id, SecondUser.UserId, 'UserId'), 'Email') AS FourthApprover,

    (SELECT
        t.Email
      FROM ApprovalSubStepUserDepartment asd
        INNER JOIN ApprovalSubStep ast
          ON ast.ApprovalSubStepId = asd.ApprovalSubStepId
        INNER JOIN User t
          ON t.UserId = asd.UserId
        INNER JOIN ApprovalStep st
          ON st.ApprovalStepId = ast.ApprovalStepId
      WHERE asd.DepartmentId = d.Id
      AND st.ClientCompanyId = 414
      AND st.OrderNo = 1 LIMIT 1) AS BusinessAdvisor

  FROM Department d

    LEFT OUTER JOIN ApproverByAmount limit1
      ON d.Id IN (limit1.CostCenters)
    LEFT OUTER JOIN User FirstUser
      ON FirstUser.UserId = limit1.UserId
    LEFT OUTER JOIN User SecondUser
      ON SecondUser.UserId = limit1.SecondApproverId

  WHERE d.ClientId = 89;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DataEntryPerformanceReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `DataEntryPerformanceReport`(IN startDate datetime,
IN endDate datetime)
BEGIN
  DROP TEMPORARY TABLE IF EXISTS DataEntryPerformanceTableResults;
  CREATE TEMPORARY TABLE DataEntryPerformanceTableResults (
    `Client` varchar(1000),
    `FullName` varchar(1000),
    `SubmitCount` int,
    `ValidationCount` int,
    `ExceptionUpdateCount` int
  );
  INSERT INTO DataEntryPerformanceTableResults
    SELECT
      UCASE(Client.`CustomerName`) `Client`,
      UCASE(CONCAT(FirstName, ' ', LastName)) `FullName`,
      (SELECT
          COUNT(DISTINCT Performance.InvoiceId)
        FROM Performance
        WHERE Performance.`UserId` = `User`.`UserId`
        AND Performance.`ActionDate` >= startDate
        AND Performance.`ActionDate` <= endDate
        AND Performance.`ActionType` = 0) `SubmitCount`,
      (SELECT
          COUNT(DISTINCT Performance.InvoiceId)
        FROM Performance
        WHERE Performance.`UserId` = `User`.`UserId`
        AND Performance.`ActionDate` >= startDate
        AND Performance.`ActionDate` <= endDate
        AND Performance.`ActionType` = 1) `ValidationCount`,
      (SELECT
          COUNT(DISTINCT Performance.InvoiceId)
        FROM Performance
        WHERE Performance.`UserId` = `User`.`UserId`
        AND Performance.`ActionDate` >= startDate
        AND Performance.`ActionDate` <= endDate
        AND Performance.`ActionType` = 2) `ExceptionUpdateCount`
    FROM `User`
      INNER JOIN `Client`
        ON User.`ClientId` = Client.`ClientId`
    WHERE (RoleId = 4
    OR EXISTS (SELECT
        *
      FROM UserRoles
      WHERE UserRoles.RoleId = 4
      AND `User`.`UserId` = UserRoles.`UserId`))
    AND `User`.IsActive = 1
    AND ((SELECT
        COUNT(DISTINCT Performance.InvoiceId)
      FROM Performance
      WHERE Performance.`UserId` = `User`.`UserId`
      AND Performance.`ActionDate` >= startDate
      AND Performance.`ActionDate` <= endDate
      AND Performance.`ActionType` = 0) > 0
    OR (SELECT
        COUNT(DISTINCT Performance.InvoiceId)
      FROM Performance
      WHERE Performance.`UserId` = `User`.`UserId`
      AND Performance.`ActionDate` >= startDate
      AND Performance.`ActionDate` <= endDate
      AND Performance.`ActionType` = 1) > 0
    OR (SELECT
        COUNT(DISTINCT Performance.InvoiceId)
      FROM Performance
      WHERE Performance.`UserId` = `User`.`UserId`
      AND Performance.`ActionDate` >= startDate
      AND Performance.`ActionDate` <= endDate
      AND Performance.`ActionType` = 2) > 0);
  SELECT
    `FullName`,
    GROUP_CONCAT(CONCAT(`Client`, ' Submit Count: ', `SubmitCount`, ', Validation Count: ', `ValidationCount`, ', Exception Update Count: ', `ExceptionUpdateCount`, '; ') SEPARATOR '') `Client`,
    SUM(`SubmitCount`) `SubmitCount`,
    SUM(`ValidationCount`) `ValidationCount`,
    SUM(`ExceptionUpdateCount`) `ExceptionUpdateCount`,
    (SUM(`SubmitCount`) + SUM(`ValidationCount`) + SUM(`ExceptionUpdateCount`)) AS TotalInvoioceProccessed
  FROM DataEntryPerformanceTableResults PerformanceR
  GROUP BY `FullName`
  ORDER BY `FullName` DESC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DiscountEarned` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `DiscountEarned`(startDate datetime, endDate datetime)
BEGIN
  -- DECLARE InvoiceTotal DECIMAL;
  -- DECLARE DiscountInvoiceTotal DECIMAL;
  -- DECLARE DiscountTotal DECIMAL;

  SET @InvoiceTotal = (SELECT
      SUM(InvoiceTotal)
    FROM Invoice
    WHERE ClientId = 1
    AND NetTermDate < endDate
    AND NetTermDate >= startDate
    AND (InvoiceType = 'Invoice')
    AND isdeleted = 0);

  SET @DiscountInvoiceTotal = (SELECT
      SUM(InvoiceTotal)
    FROM Invoice
    WHERE ClientId = 1
    AND NetTermDate < endDate
    AND NetTermDate >= startDate
    AND NetTermDiscount > 0
    AND (InvoiceType = 'Invoice'
    OR InvoiceType = 'Credit')
    AND isdeleted = 0);

  SET @DiscountTotal = (SELECT
      SUM(NetTermDiscount)
    FROM Invoice
    WHERE ClientId = 1
    AND NetTermDate < endDate
    AND NetTermDate >= startDate
    AND (InvoiceType = 'Invoice')
    AND isdeleted = 0);

  SELECT
    (CASE WHEN @DiscountInvoiceTotal IS NULL THEN 0 ELSE @DiscountInvoiceTotal END) AS
    AggrigateDiscountInvoiceTotal,
    (CASE WHEN @InvoiceTotal IS NULL THEN 0 ELSE @InvoiceTotal END) AS InvoiceTotal,
    (CASE WHEN @DiscountTotal IS NULL THEN 0 ELSE @DiscountTotal END) AS DiscountAvaliable,
    (SUM(CASE WHEN NetTermDiscount IS NULL THEN 0 ELSE NetTermDiscount END)) AS PaidOnTimeCount
  FROM Invoice
  WHERE ClientId = 1
  AND NetTermDate <= endDate
  AND NetTermDate >= startDate
  AND ApprovalStatusId = 7
  AND LastActionDate <= NetTermDate
  AND (InvoiceType = 'Invoice')
  AND isdeleted = 0;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `EmailCaptureStatus` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `EmailCaptureStatus`(IN clientId int,
IN logSubject varchar(255), IN logSender varchar(255), IN logDate date)
BEGIN
  SELECT
    COUNT(i.InvoiceId)
  FROM EmailCaptureClientEmails ecce
    INNER JOIN EmailCaptureClients ecc
      ON ecc.EmailCaptureClientId = ecce.EmailCaptureClientId
    INNER JOIN EmailCaptureAttachments eca
      ON eca.EmailCaptureClientEmailId = ecce.EmailCaptureClientEmailId
    INNER JOIN Batch b
      ON b.BatchName LIKE CONCAT('%', eca.NewAttachmentName, '%')
    INNER JOIN Invoice i
      ON i.BatchID = b.ID
  WHERE b.ClientID = clientId
  AND ecc.ClientId = clientId
  AND EmailSource = logSender
  AND DATE(ReceivedDateTime) = DATE(logDate)
  AND ecce.EmailSubject = logSubject;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `EmailCaptureStatusCaptured` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `EmailCaptureStatusCaptured`(IN clientId int, IN dateFrom date, IN dateTo date,
IN subject varchar(255), IN sender varchar(255))
BEGIN
  SELECT
    ecce.*
  FROM EmailCaptureClientEmails ecce
    INNER JOIN EmailCaptureAttachments eca
      ON eca.EmailCaptureClientEmailId = ecce.EmailCaptureClientEmailId
    INNER JOIN Batch b
      ON b.BatchName LIKE CONCAT('%', eca.NewAttachmentName, '%')

  WHERE DATE(ecce.ReceivedDateTime) >= dateFrom
  AND DATE(ecce.ReceivedDateTime) <= dateTo
  AND b.ClientID = clientId
  AND (sender IS NULL
  OR ecce.EmailSource LIKE CONCAT('%', sender, '%'))
  AND (subject IS NULL
  OR ecce.EmailSubject LIKE CONCAT('%', subject, '%'));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ExceptionUserInvoiceAssignmentCount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ExceptionUserInvoiceAssignmentCount`(IN userIdP char(36), IN typeP int, IN clientIdP int, IN lockedBeforeP datetime)
BEGIN
  SELECT
    COUNT(*)
  FROM UserInvoiceAssignment uia
  WHERE (uia.UserId = userIdP
  OR uia.UserId = '00000000-0000-0000-0000-000000000000')
  AND uia.`Type` = typeP
  AND uia.State = 1
  AND (uia.HoldEndDate IS NULL
  OR uia.HoldEndDate < CURDATE())
  AND uia.InvoiceId IN (SELECT
      inv.InvoiceId
    FROM Invoice inv
    WHERE inv.ClientId = clientIdP
    AND inv.IsPaused = 0
    AND inv.ApprovalStatusId = 6
    AND inv.IsDeleted = 0
    AND (inv.IsLocked = 0
    OR inv.LockedAt < lockedBeforeP
    OR inv.LockedBy = userIdP));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetActiveTemporaryAssignorListForAssignee` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetActiveTemporaryAssignorListForAssignee`(IN paramUserId char(36),
IN paramCurrentDate datetime,
IN paramWorkflowType int)
BEGIN
  SELECT
    UserReassignmentHistory.SourceUserId
  FROM `UserReassignmentHistory`
  WHERE UserReassignmentHistory.TargetUserId = paramUserId
  AND UserReassignmentHistory.IsPermanent = FALSE
  AND (paramWorkflowType = 2
  OR UserReassignmentHistory.WorkflowType = 2
  OR UserReassignmentHistory.WorkflowType = paramWorkflowType)
  AND (UserReassignmentHistory.DateFrom <= paramCurrentDate
  AND (UserReassignmentHistory.DateTo IS NULL
  OR UserReassignmentHistory.DateTo > paramCurrentDate));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetActiveTemporaryAssignorsForAssigneeList` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetActiveTemporaryAssignorsForAssigneeList`(IN paramUserId char(36),
IN paramCurrentDate datetime,
IN paramWorkflowType int)
BEGIN
  SELECT
    UserReassignmentHistory.SourceUserId
  FROM `UserReassignmentHistory`
  WHERE UserReassignmentHistory.TargetUserId = paramUserId
  AND UserReassignmentHistory.IsPermanent = FALSE
  AND (paramWorkflowType = 2
  OR UserReassignmentHistory.WorkflowType = 2
  OR UserReassignmentHistory.WorkflowType = paramWorkflowType)
  AND (UserReassignmentHistory.DateFrom <= paramCurrentDate
  AND (UserReassignmentHistory.DateTo IS NULL
  OR UserReassignmentHistory.DateTo > paramCurrentDate));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetAdminInvoiceCount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetAdminInvoiceCount`(IN clientId int,
IN CountFor varchar(29))
BEGIN
  IF CountFor = 'Paused' THEN
    SELECT
      COUNT(*)
    FROM Invoice
    WHERE Invoice.clientId = clientId
    AND ispaused = 1
    AND isdeleted = 0;
  ELSEIF CountFor = 'Captured' THEN
    SELECT
      COUNT(*)
    FROM Invoice
    WHERE Invoice.clientId = clientId
    AND ApprovalStatusId = 1
    AND isdeleted = 0
    AND isPaused = 0;
  ELSEIF CountFor = 'Exception' THEN
    SELECT
      COUNT(*)
    FROM Invoice
    WHERE Invoice.clientId = clientId
    AND ApprovalStatusId = 6
    AND isdeleted = 0
    AND isPaused = 0;
  ELSEIF CountFor = 'PoApproval' THEN
    SELECT
      COUNT(*)
    FROM Invoice
    WHERE Invoice.clientId = clientId
    AND ApprovalStatusId = 3
    AND isdeleted = 0
    AND isPaused = 0
    AND isPOInvoice = 1
    AND Invoice.InvoiceId IN (SELECT
        invoiceid
      FROM UserInvoiceAssignment uia
      WHERE uia.InvoiceId = Invoice.InvoiceId
      AND (uia.HoldEndDate IS NULL
      OR uia.HoldEndDate < NOW()));
  ELSEIF CountFor = 'NoPoApproval' THEN
    SELECT
      COUNT(*)
    FROM Invoice
    WHERE Invoice.clientId = clientId
    AND ApprovalStatusId = 3
    AND isdeleted = 0
    AND isPaused = 0
    AND isPOInvoice = 0
    AND Invoice.InvoiceId IN (SELECT
        invoiceid
      FROM UserInvoiceAssignment uia
      WHERE uia.InvoiceId = Invoice.InvoiceId
      AND (uia.HoldEndDate IS NULL
      OR uia.HoldEndDate < NOW()));
  ELSEIF CountFor = 'HoldInvoices30Days' THEN
    SELECT
      COUNT(*)
    FROM Invoice
    WHERE Invoice.clientId = clientId
    AND ApprovalStatusId = 3
    AND isdeleted = 0
    AND isPaused = 0
    AND (Invoice.ScannedDate - NOW()) > 30
    AND Invoice.InvoiceId IN (SELECT
        invoiceid
      FROM UserInvoiceAssignment uia
      WHERE uia.InvoiceId = Invoice.InvoiceId
      AND uia.HoldStartDate <= NOW()
      AND uia.HoldEndDate >= NOW());
  ELSEIF CountFor = 'HoldInvoices15Days' THEN
    SELECT
      COUNT(*)
    FROM Invoice
    WHERE Invoice.clientId = clientId
    AND ApprovalStatusId = 3
    AND isdeleted = 0
    AND isPaused = 0
    AND (Invoice.ScannedDate - NOW()) <= 30
    AND (Invoice.ScannedDate - NOW()) > 15
    AND Invoice.InvoiceId IN (SELECT
        invoiceid
      FROM UserInvoiceAssignment uia
      WHERE uia.InvoiceId = Invoice.InvoiceId
      AND uia.HoldStartDate <= NOW()
      AND uia.HoldEndDate >= NOW());
  ELSEIF CountFor = 'HoldInvoices7Days' THEN
    SELECT
      COUNT(*)
    FROM Invoice
    WHERE Invoice.clientId = clientId
    AND ApprovalStatusId = 3
    AND isdeleted = 0
    AND isPaused = 0
    AND (Invoice.ScannedDate - NOW()) <= 15
    AND (Invoice.ScannedDate - NOW()) > 7
    AND Invoice.InvoiceId IN (SELECT
        invoiceid
      FROM UserInvoiceAssignment uia
      WHERE uia.InvoiceId = Invoice.InvoiceId
      AND uia.HoldStartDate <= NOW()
      AND uia.HoldEndDate >= NOW());
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetAllPaidInvoiceReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetAllPaidInvoiceReport`(IN clientId int, IN FromDate date, IN ToDate date)
BEGIN
  SELECT
    i.CompanyCode,
    v.VendorName AS Vendor,
    v.VendorNo,
    v.VendorType,
    i.InvoiceTotal AS Amount
  FROM Invoice i
    -- INNER JOIN InvoiceHistory ih ON ih.InvoiceId = i.InvoiceId
    INNER JOIN Vendor v
      ON v.VendorId = i.VendorId
  WHERE i.ClientId = clientId
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId IN (7, 11, 13)
  AND DATE(i.InvoiceDate) BETWEEN DATE(FromDate) AND DATE(ToDate)
  ORDER BY i.CompanyCode;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetApprovalInvoicesByCompanyandVendorFilterInQueue` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetApprovalInvoicesByCompanyandVendorFilterInQueue`(IN clientId int,
IN userId char(36),
IN sortOption int,
IN invoiceIndex int,
IN invoiceIdToBeUnlocked int,

IN companyCode nvarchar(50),
IN departmentId int,
IN vendorId int,
IN invoicePOType int,
IN approvalLevel int,
IN isNoPOOnly tinyint(1),
IN filterConfidential tinyint(1),
IN sortDirAsc tinyint(1),
IN sortField nvarchar(50),
IN lockedBefore datetime,
IN userIsAdministrator tinyint(1),
IN sortApproverQueueByIsPOInvoice tinyint(1),
IN sortApproverQueueByCompanyCode tinyint(1))
BEGIN
  SET @assignorUserId = GetActiveTemporaryAssignorForAssignee(userId, NOW(), 0);
  SET @isPOInvoicetype = (SELECT
      CASE WHEN (invoicePOType = -1 OR
          invoicePOType IS NULL) THEN NULL ELSE (CASE WHEN invoicePOType = 0 THEN FALSE ELSE TRUE END) END);

  -- UNLOCK ALL INVOICES (INVOICE WITH A SPECIFIC ID)
  UPDATE Invoice
  SET Invoice.`IsLocked` = 0
  WHERE Invoice.`ClientId` = clientId
  AND Invoice.`IsLocked` = TRUE
  AND Invoice.`IsDeleted` = FALSE
  AND ((invoiceIdToBeUnlocked <> 0
  AND Invoice.`InvoiceId` = invoiceIdToBeUnlocked)
  OR (invoiceIdToBeUnlocked = 0
  AND Invoice.`LockedBy` = userId
  AND (Invoice.`IsPOInvoice` = FALSE
  OR Invoice.`IsPOInvoice` = isNoPOOnly)));
  -- SELECT COUNT(*) FROM UserInvoiceAssignment UIA USE INDEX(IX_UserId) INNER JOIN Invoice ON (UIA.UserId = userId OR UIA.UserId = @assignorUserId) AND
  -- UIA.Type = 0 AND (@isPOInvoicetype IS NULL OR Invoice.`IsPOInvoice` = @isPOInvoicetype) AND UIA.InvoiceId = Invoice.`InvoiceId` AND Invoice.`IsPaused` = FALSE
  -- AND Invoice.`ApprovalStatusId` = 3 AND Invoice.`IsDeleted` = FALSE AND (Invoice.`IsLocked` = FALSE OR Invoice.`LockedAt` < lockedBefore OR Invoice.`LockedBy` = userId) AND
  -- (UIA.HoldEndDate IS NULL OR UIA.HoldEndDate < NOW()) AND
  -- (vendorId IS NULL OR vendorId = 0 OR Invoice.`VendorId` = vendorId) AND
  -- ((approvalLevel = 0 OR approvalLevel IS NULL OR EXISTS (SELECT * FROM ApprovalSubStep ASS WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId AND ASS.OrderNo = approvalLevel))) AND
  -- (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE)) INNER JOIN
  -- `Client` ON Invoice.`ClientId` = Client.`ClientId` INNER JOIN
  -- `User` ON UIA.UserId = `User`.`UserId` LEFT OUTER JOIN Vendor ON Vendor.`VendorId` = Invoice.`VendorId`
  -- WHERE filterConfidential = false OR (userIsAdministrator = TRUE or (CASE WHEN Invoice.VendorId IS NOT NULL AND Vendor.`IsConfidential` = TRUE then TRUE ELSE IFNULL(Invoice.`IsConfidential`, false) END) = FALSE);
  IF (sortApproverQueueByIsPOInvoice = TRUE) THEN
    SELECT
      UIA.*
    FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
      INNER JOIN Invoice
        ON (UIA.UserId = userId
        OR UIA.UserId = @assignorUserId)
        AND (UIA.Type = 0
        OR UIA.Type = 2)
        AND (@isPOInvoicetype IS NULL
        OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
        AND UIA.InvoiceId = Invoice.`InvoiceId`
        AND Invoice.`IsPaused` = FALSE
        AND Invoice.`ApprovalStatusId` = 3
        AND Invoice.`IsDeleted` = FALSE
        AND (Invoice.`IsLocked` = FALSE
        OR Invoice.`LockedAt` < lockedBefore
        OR Invoice.`LockedBy` = userId)
        AND (UIA.HoldEndDate IS NULL
        OR UIA.HoldEndDate < NOW())
        AND (vendorId IS NULL
        OR vendorId = 0
        OR Invoice.`VendorId` = vendorId)
        AND (companyCode IS NULL
        OR companyCode = ''
        OR Invoice.`CompanyCode` = companyCode)
        AND (departmentId IS NULL
        OR departmentId = 0
        OR Invoice.`VendorSiteId` = departmentId)
        AND ((approvalLevel = 0
        OR approvalLevel IS NULL
        OR EXISTS (SELECT
            *
          FROM ApprovalSubStep ASS
          WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId
          AND ASS.OrderNo = approvalLevel)))
        AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
        OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
      INNER JOIN `Client`
        ON Invoice.`ClientId` = Client.`ClientId`
      INNER JOIN `User`
        ON UIA.UserId = `User`.`UserId`
      LEFT OUTER JOIN Vendor
        ON Vendor.`VendorId` = Invoice.`VendorId`
    WHERE filterConfidential = FALSE
    OR (userIsAdministrator = TRUE
    OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
        Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE)

    ORDER BY UIA.State <> sortOption, UIA.State, Invoice.InvoiceDate
    LIMIT 1 OFFSET invoiceIndex;
  ELSEIF (sortApproverQueueByCompanyCode = TRUE) THEN
    SELECT
      UIA.*
    FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
      INNER JOIN Invoice
        ON (UIA.UserId = userId
        OR UIA.UserId = @assignorUserId)
        AND (UIA.Type = 0
        OR UIA.Type = 2)
        AND (@isPOInvoicetype IS NULL
        OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
        AND UIA.InvoiceId = Invoice.`InvoiceId`
        AND Invoice.`IsPaused` = FALSE
        AND Invoice.`ApprovalStatusId` = 3
        AND Invoice.`IsDeleted` = FALSE
        AND (Invoice.`IsLocked` = FALSE
        OR Invoice.`LockedAt` < lockedBefore
        OR Invoice.`LockedBy` = userId)
        AND (UIA.HoldEndDate IS NULL
        OR UIA.HoldEndDate < NOW())
        AND (vendorId IS NULL
        OR vendorId = 0
        OR Invoice.`VendorId` = vendorId)
        AND (companyCode IS NULL
        OR companyCode = ''
        OR Invoice.`CompanyCode` = companyCode)
        AND (departmentId IS NULL
        OR departmentId = 0
        OR Invoice.`VendorSiteId` = departmentId)
        AND ((approvalLevel = 0
        OR approvalLevel IS NULL
        OR EXISTS (SELECT
            *
          FROM ApprovalSubStep ASS
          WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId
          AND ASS.OrderNo = approvalLevel)))
        AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
        OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
      INNER JOIN `Client`
        ON Invoice.`ClientId` = Client.`ClientId`
      INNER JOIN `User`
        ON UIA.UserId = `User`.`UserId`
      LEFT OUTER JOIN Vendor
        ON Vendor.`VendorId` = Invoice.`VendorId`
    WHERE filterConfidential = FALSE
    OR (userIsAdministrator = TRUE
    OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
        Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE)

    ORDER BY Invoice.`CompanyCode`, UIA.State <> sortOption, UIA.State, Invoice.InvoiceDate
    LIMIT 1 OFFSET invoiceIndex;
  ELSE
    IF (sortOption = 1000) THEN
      SELECT
        UIA.*
      FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
        INNER JOIN Invoice
          ON (UIA.UserId = userId
          OR UIA.UserId = @assignorUserId)
          AND (UIA.Type = 0
          OR UIA.Type = 2)
          AND (@isPOInvoicetype IS NULL
          OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
          AND UIA.InvoiceId = Invoice.`InvoiceId`
          AND Invoice.`IsPaused` = FALSE
          AND Invoice.`ApprovalStatusId` = 3
          AND Invoice.`IsDeleted` = FALSE
          AND (Invoice.`IsLocked` = FALSE
          OR Invoice.`LockedAt` < lockedBefore
          OR Invoice.`LockedBy` = userId)
          AND (UIA.HoldEndDate IS NULL
          OR UIA.HoldEndDate < NOW())
          AND (vendorId IS NULL
          OR vendorId = 0
          OR Invoice.`VendorId` = vendorId)
          AND (companyCode IS NULL
          OR companyCode = ''
          OR Invoice.`CompanyCode` = companyCode)
          AND (departmentId IS NULL
          OR departmentId = 0
          OR Invoice.`VendorSiteId` = departmentId)
          AND ((approvalLevel = 0
          OR approvalLevel IS NULL
          OR EXISTS (SELECT
              *
            FROM ApprovalSubStep ASS
            WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId
            AND ASS.OrderNo = approvalLevel)))
          AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
          OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
        INNER JOIN `Client`
          ON Invoice.`ClientId` = Client.`ClientId`
        INNER JOIN `User`
          ON UIA.UserId = `User`.`UserId`
        LEFT OUTER JOIN Vendor
          ON Vendor.`VendorId` = Invoice.`VendorId`
      WHERE filterConfidential = FALSE
      OR (userIsAdministrator = TRUE
      OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
          Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE)

      ORDER BY Invoice.`ScannedDate`, Invoice.`InvoiceDate`
      LIMIT 1 OFFSET invoiceIndex;
    ELSE
      SELECT
        UIA.*
      FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
        INNER JOIN Invoice
          ON (UIA.UserId = userId
          OR UIA.UserId = @assignorUserId)
          AND (UIA.Type = 0
          OR UIA.Type = 2)
          AND (@isPOInvoicetype IS NULL
          OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
          AND UIA.InvoiceId = Invoice.`InvoiceId`
          AND Invoice.`IsPaused` = FALSE
          AND Invoice.`ApprovalStatusId` = 3
          AND Invoice.`IsDeleted` = FALSE
          AND (Invoice.`IsLocked` = FALSE
          OR Invoice.`LockedAt` < lockedBefore
          OR Invoice.`LockedBy` = userId)
          AND (UIA.HoldEndDate IS NULL
          OR UIA.HoldEndDate < NOW())
          AND (vendorId IS NULL
          OR vendorId = 0
          OR Invoice.`VendorId` = vendorId)
          AND (companyCode IS NULL
          OR companyCode = ''
          OR Invoice.`CompanyCode` = companyCode)
          AND (departmentId IS NULL
          OR departmentId = 0
          OR Invoice.`VendorSiteId` = departmentId)
          AND ((approvalLevel = 0
          OR approvalLevel IS NULL
          OR EXISTS (SELECT
              *
            FROM ApprovalSubStep ASS
            WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId
            AND ASS.OrderNo = approvalLevel)))
          AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
          OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
        INNER JOIN `Client`
          ON Invoice.`ClientId` = Client.`ClientId`
        INNER JOIN `User`
          ON UIA.UserId = `User`.`UserId`
        LEFT OUTER JOIN Vendor
          ON Vendor.`VendorId` = Invoice.`VendorId`
      WHERE filterConfidential = FALSE
      OR (userIsAdministrator = TRUE
      OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
          Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE)

      ORDER BY Invoice.`IsPOInvoice`, UIA.State <> sortOption, UIA.State, Invoice.InvoiceDate
      LIMIT 1 OFFSET invoiceIndex;
    END IF;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetApprovalInvoicesByCompanyandVendorFilterInQueueCount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetApprovalInvoicesByCompanyandVendorFilterInQueueCount`(IN clientId int,
IN userId char(36),
IN sortOption int,
IN invoiceIndex int,
IN invoiceIdToBeUnlocked int,
IN companyCode nvarchar(50),
IN departmentId int,
IN vendorId int,


IN invoicePOType int,
IN approvalLevel int,
IN isNoPOOnly tinyint(1),
IN filterConfidential tinyint(1),
IN sortDirAsc tinyint(1),
IN sortField nvarchar(50),
IN lockedBefore datetime,
IN userIsAdministrator tinyint(1),
IN sortApproverQueueByIsPOInvoice tinyint(1),
IN sortApproverQueueByCompanyCode tinyint(1))
BEGIN
  SET @assignorUserId = GetActiveTemporaryAssignorForAssignee(userId, NOW(), 0);
  SET @isPOInvoicetype = (SELECT
      CASE WHEN (invoicePOType = -1 OR
          invoicePOType IS NULL) THEN NULL ELSE (CASE WHEN invoicePOType = 0 THEN FALSE ELSE TRUE END) END);
  SELECT
    COUNT(*)
  FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
    INNER JOIN Invoice
      ON (UIA.UserId = userId
      OR UIA.UserId = @assignorUserId)
      AND (UIA.Type = 0
      OR UIA.Type = 2)
      AND (@isPOInvoicetype IS NULL
      OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
      AND UIA.InvoiceId = Invoice.`InvoiceId`
      AND Invoice.`IsPaused` = FALSE
      AND Invoice.`ApprovalStatusId` = 3
      AND Invoice.`IsDeleted` = FALSE
      AND (Invoice.`IsLocked` = FALSE
      OR Invoice.`LockedAt` < lockedBefore
      OR Invoice.`LockedBy` = userId)
      AND (UIA.HoldEndDate IS NULL
      OR UIA.HoldEndDate < NOW())
      AND (vendorId IS NULL
      OR vendorId = 0
      OR Invoice.`VendorId` = vendorId)
      AND (companyCode IS NULL
      OR companyCode = ''
      OR Invoice.`CompanyCode` = companyCode)
      AND (departmentId IS NULL
      OR departmentId = 0
      OR Invoice.`VendorSiteId` = departmentId)
      AND ((approvalLevel = 0
      OR approvalLevel IS NULL
      OR EXISTS (SELECT
          *
        FROM ApprovalSubStep ASS
        WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId
        AND ASS.OrderNo = approvalLevel)))
      AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
      OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
    INNER JOIN `Client`
      ON Invoice.`ClientId` = Client.`ClientId`
    INNER JOIN `User`
      ON UIA.UserId = `User`.`UserId`
    LEFT OUTER JOIN Vendor
      ON Vendor.`VendorId` = Invoice.`VendorId`
  WHERE filterConfidential = FALSE
  OR (userIsAdministrator = TRUE
  OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
      Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetApprovalInvoicesInQueue` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetApprovalInvoicesInQueue`(IN clientId int,
IN userId char(36),
IN sortOption int,
IN invoiceIndex int,
IN invoiceIdToBeUnlocked int,
IN vendorId int,
IN invoicePOType int,
IN approvalLevel int,
IN isNoPOOnly tinyint(1),
IN filterConfidential tinyint(1),
IN sortDirAsc tinyint(1),
IN sortField nvarchar(50),
IN lockedBefore datetime,
IN userIsAdministrator tinyint(1),
IN sortApproverQueueByIsPOInvoice tinyint(1),
IN sortApproverQueueByCompanyCode tinyint(1))
BEGIN
  SET @assignorUserId = GetActiveTemporaryAssignorForAssignee(userId, NOW(), 0);
  SET @isPOInvoicetype = (SELECT
      CASE WHEN (invoicePOType = -1 OR
          invoicePOType IS NULL) THEN NULL ELSE (CASE WHEN invoicePOType = 0 THEN FALSE ELSE TRUE END) END);

  -- UNLOCK ALL INVOICES (INVOICE WITH A SPECIFIC ID)
  UPDATE Invoice
  SET Invoice.`IsLocked` = 0
  WHERE Invoice.`ClientId` = clientId
  AND Invoice.`IsLocked` = TRUE
  AND Invoice.`IsDeleted` = FALSE
  AND ((invoiceIdToBeUnlocked <> 0
  AND Invoice.`InvoiceId` = invoiceIdToBeUnlocked)
  OR (invoiceIdToBeUnlocked = 0
  AND Invoice.`LockedBy` = userId
  AND (Invoice.`IsPOInvoice` = FALSE
  OR Invoice.`IsPOInvoice` = isNoPOOnly)));


  -- SELECT COUNT(*) FROM UserInvoiceAssignment UIA USE INDEX(IX_UserId) INNER JOIN Invoice ON (UIA.UserId = userId OR UIA.UserId = @assignorUserId) AND
  -- UIA.Type = 0 AND (@isPOInvoicetype IS NULL OR Invoice.`IsPOInvoice` = @isPOInvoicetype) AND UIA.InvoiceId = Invoice.`InvoiceId` AND Invoice.`IsPaused` = FALSE
  -- AND Invoice.`ApprovalStatusId` = 3 AND Invoice.`IsDeleted` = FALSE AND (Invoice.`IsLocked` = FALSE OR Invoice.`LockedAt` < lockedBefore OR Invoice.`LockedBy` = userId) AND
  -- (UIA.HoldEndDate IS NULL OR UIA.HoldEndDate < NOW()) AND
  -- (vendorId IS NULL OR vendorId = 0 OR Invoice.`VendorId` = vendorId) AND
  -- ((approvalLevel = 0 OR approvalLevel IS NULL OR EXISTS (SELECT * FROM ApprovalSubStep ASS WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId AND ASS.OrderNo = approvalLevel))) AND
  -- (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE)) INNER JOIN
  -- `Client` ON Invoice.`ClientId` = Client.`ClientId` INNER JOIN
  -- `User` ON UIA.UserId = `User`.`UserId` LEFT OUTER JOIN Vendor ON Vendor.`VendorId` = Invoice.`VendorId`
  -- WHERE filterConfidential = false OR (userIsAdministrator = TRUE or (CASE WHEN Invoice.VendorId IS NOT NULL AND Vendor.`IsConfidential` = TRUE then TRUE ELSE IFNULL(Invoice.`IsConfidential`, false) END) = FALSE);


  IF (sortApproverQueueByIsPOInvoice = TRUE) THEN
    SELECT
      UIA.*
    FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
      INNER JOIN Invoice
        ON (UIA.UserId = userId
        OR UIA.UserId = @assignorUserId)
        AND (UIA.Type = 0
        OR UIA.Type = 2)
        AND (@isPOInvoicetype IS NULL
        OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
        AND UIA.InvoiceId = Invoice.`InvoiceId`
        AND Invoice.`IsPaused` = FALSE
        AND Invoice.`ApprovalStatusId` = 3
        AND Invoice.`IsDeleted` = FALSE
        AND (Invoice.`IsLocked` = FALSE
        OR Invoice.`LockedAt` < lockedBefore
        OR Invoice.`LockedBy` = userId)
        AND (UIA.HoldEndDate IS NULL
        OR UIA.HoldEndDate < NOW())
        AND (vendorId IS NULL
        OR vendorId = 0
        OR Invoice.`VendorId` = vendorId)
        AND ((approvalLevel = 0
        OR approvalLevel IS NULL
        OR EXISTS (SELECT
            *
          FROM ApprovalSubStep ASS
          WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId
          AND ASS.OrderNo = approvalLevel)))
        AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
        OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
      INNER JOIN `Client`
        ON Invoice.`ClientId` = Client.`ClientId`
      INNER JOIN `User`
        ON UIA.UserId = `User`.`UserId`
      LEFT OUTER JOIN Vendor
        ON Vendor.`VendorId` = Invoice.`VendorId`
    WHERE filterConfidential = FALSE
    OR (userIsAdministrator = TRUE
    OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
        Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE)

    ORDER BY UIA.State <> sortOption, UIA.State, Invoice.InvoiceDate
    LIMIT 1 OFFSET invoiceIndex;
  ELSEIF (sortApproverQueueByCompanyCode = TRUE) THEN
    SELECT
      UIA.*
    FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
      INNER JOIN Invoice
        ON (UIA.UserId = userId
        OR UIA.UserId = @assignorUserId)
        AND (UIA.Type = 0
        OR UIA.Type = 2)
        AND (@isPOInvoicetype IS NULL
        OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
        AND UIA.InvoiceId = Invoice.`InvoiceId`
        AND Invoice.`IsPaused` = FALSE
        AND Invoice.`ApprovalStatusId` = 3
        AND Invoice.`IsDeleted` = FALSE
        AND (Invoice.`IsLocked` = FALSE
        OR Invoice.`LockedAt` < lockedBefore
        OR Invoice.`LockedBy` = userId)
        AND (UIA.HoldEndDate IS NULL
        OR UIA.HoldEndDate < NOW())
        AND (vendorId IS NULL
        OR vendorId = 0
        OR Invoice.`VendorId` = vendorId)
        AND ((approvalLevel = 0
        OR approvalLevel IS NULL
        OR EXISTS (SELECT
            *
          FROM ApprovalSubStep ASS
          WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId
          AND ASS.OrderNo = approvalLevel)))
        AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
        OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
      INNER JOIN `Client`
        ON Invoice.`ClientId` = Client.`ClientId`
      INNER JOIN `User`
        ON UIA.UserId = `User`.`UserId`
      LEFT OUTER JOIN Vendor
        ON Vendor.`VendorId` = Invoice.`VendorId`
    WHERE filterConfidential = FALSE
    OR (userIsAdministrator = TRUE
    OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
        Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE)

    ORDER BY Invoice.`CompanyCode`, UIA.State <> sortOption, UIA.State, Invoice.InvoiceDate
    LIMIT 1 OFFSET invoiceIndex;
  ELSE
    IF (sortOption = 1000) THEN
      SELECT
        UIA.*
      FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
        INNER JOIN Invoice
          ON (UIA.UserId = userId
          OR UIA.UserId = @assignorUserId)
          AND (UIA.Type = 0
          OR UIA.Type = 2)
          AND (@isPOInvoicetype IS NULL
          OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
          AND UIA.InvoiceId = Invoice.`InvoiceId`
          AND Invoice.`IsPaused` = FALSE
          AND Invoice.`ApprovalStatusId` = 3
          AND Invoice.`IsDeleted` = FALSE
          AND (Invoice.`IsLocked` = FALSE
          OR Invoice.`LockedAt` < lockedBefore
          OR Invoice.`LockedBy` = userId)
          AND (UIA.HoldEndDate IS NULL
          OR UIA.HoldEndDate < NOW())
          AND (vendorId IS NULL
          OR vendorId = 0
          OR Invoice.`VendorId` = vendorId)
          AND ((approvalLevel = 0
          OR approvalLevel IS NULL
          OR EXISTS (SELECT
              *
            FROM ApprovalSubStep ASS
            WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId
            AND ASS.OrderNo = approvalLevel)))
          AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
          OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
        INNER JOIN `Client`
          ON Invoice.`ClientId` = Client.`ClientId`
        INNER JOIN `User`
          ON UIA.UserId = `User`.`UserId`
        LEFT OUTER JOIN Vendor
          ON Vendor.`VendorId` = Invoice.`VendorId`
      WHERE filterConfidential = FALSE
      OR (userIsAdministrator = TRUE
      OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
          Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE)

      ORDER BY Invoice.`ScannedDate`, Invoice.`InvoiceDate`
      LIMIT 1 OFFSET invoiceIndex;
    ELSE
      SELECT
        UIA.*
      FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
        INNER JOIN Invoice
          ON (UIA.UserId = userId
          OR UIA.UserId = @assignorUserId)
          AND (UIA.Type = 0
          OR UIA.Type = 2)
          AND (@isPOInvoicetype IS NULL
          OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
          AND UIA.InvoiceId = Invoice.`InvoiceId`
          AND Invoice.`IsPaused` = FALSE
          AND Invoice.`ApprovalStatusId` = 3
          AND Invoice.`IsDeleted` = FALSE
          AND (Invoice.`IsLocked` = FALSE
          OR Invoice.`LockedAt` < lockedBefore
          OR Invoice.`LockedBy` = userId)
          AND (UIA.HoldEndDate IS NULL
          OR UIA.HoldEndDate < NOW())
          AND (vendorId IS NULL
          OR vendorId = 0
          OR Invoice.`VendorId` = vendorId)
          AND ((approvalLevel = 0
          OR approvalLevel IS NULL
          OR EXISTS (SELECT
              *
            FROM ApprovalSubStep ASS
            WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId
            AND ASS.OrderNo = approvalLevel)))
          AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
          OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
        INNER JOIN `Client`
          ON Invoice.`ClientId` = Client.`ClientId`
        INNER JOIN `User`
          ON UIA.UserId = `User`.`UserId`
        LEFT OUTER JOIN Vendor
          ON Vendor.`VendorId` = Invoice.`VendorId`
      WHERE filterConfidential = FALSE
      OR (userIsAdministrator = TRUE
      OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
          Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE)

      ORDER BY Invoice.`IsPOInvoice`, UIA.State <> sortOption, UIA.State, Invoice.InvoiceDate
      LIMIT 1 OFFSET invoiceIndex;
    END IF;
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetApprovalInvoicesInQueueCount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetApprovalInvoicesInQueueCount`(IN clientId INT,
IN userId CHAR(36),
IN sortOption INT,
IN invoiceIndex INT,
IN invoiceIdToBeUnlocked INT,
IN vendorId INT,
IN invoicePOType INT,
IN approvalLevel INT,
IN isNoPOOnly TINYINT(1),
IN filterConfidential TINYINT(1),
IN sortDirAsc TINYINT(1),
IN sortField NVARCHAR(50),
IN lockedBefore DATETIME,
IN userIsAdministrator TINYINT(1),
IN sortApproverQueueByIsPOInvoice TINYINT(1),
IN sortApproverQueueByCompanyCode TINYINT(1))
BEGIN
  SET @assignorUserId = GetActiveTemporaryAssignorForAssignee(userId, NOW(), 0);
  SET @isPOInvoicetype = (SELECT
      CASE WHEN (invoicePOType = -1 OR
          invoicePOType IS NULL) THEN NULL ELSE (CASE WHEN invoicePOType = 0 THEN FALSE ELSE TRUE END) END);
  SELECT
    COUNT(*)
  FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
    INNER JOIN Invoice
      ON (UIA.UserId = userId
      OR UIA.UserId = @assignorUserId)
      AND (UIA.Type = 0
      OR UIA.Type = 2)
      AND (@isPOInvoicetype IS NULL
      OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
      AND UIA.InvoiceId = Invoice.`InvoiceId`
      AND Invoice.`IsPaused` = FALSE
      AND Invoice.`ApprovalStatusId` = 3
      AND Invoice.`IsDeleted` = FALSE
      AND (Invoice.`IsLocked` = FALSE
      OR Invoice.`LockedAt` < lockedBefore
      OR Invoice.`LockedBy` = userId)
      AND (UIA.HoldEndDate IS NULL
      OR UIA.HoldEndDate < NOW())
      AND (vendorId IS NULL
      OR vendorId = 0
      OR Invoice.`VendorId` = vendorId)
      AND ((approvalLevel = 0
      OR approvalLevel IS NULL
      OR EXISTS (SELECT
          *
        FROM ApprovalSubStep ASS
        WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId
        AND ASS.OrderNo = approvalLevel)))
      AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
      OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
    INNER JOIN `Client`
      ON Invoice.`ClientId` = Client.`ClientId`
    INNER JOIN `User`
      ON UIA.UserId = `User`.`UserId`
    LEFT OUTER JOIN Vendor
      ON Vendor.`VendorId` = Invoice.`VendorId`
  WHERE filterConfidential = FALSE
  OR (userIsAdministrator = TRUE
  OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
      Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetApprovalPOHeadersInQueue` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetApprovalPOHeadersInQueue`(IN clientId int,
IN userId char(36),
IN sortOption int,
IN pOHeaderIndex int,
IN pOHeaderIdToBeUnlocked int,
IN vendorId int,
IN lockedBefore datetime)
BEGIN
  SET @assignorUserId = GetActiveTemporaryAssignorForAssignee(userId, NOW(), 1);
  -- UNLOCK ALL POs (POHeader WITH A SPECIFIC ID)
  UPDATE POHeader
  SET POHeader.`IsLocked` = 0
  WHERE POHeader.`ClientId` = clientId
  AND POHeader.`IsLocked` = TRUE
  AND POHeader.`IsDeleted` = FALSE
  AND ((pOHeaderIdToBeUnlocked <> 0
  AND POHeader.`POHeaderId` = pOHeaderIdToBeUnlocked)
  OR (pOHeaderIdToBeUnlocked = 0
  AND POHeader.`LockedById` = userId));
  SELECT
    UPA.*
  FROM `UserPOAssignment` UPA USE INDEX (IX_UserId)
    INNER JOIN POHeader
      ON (UPA.UserId = userId
      OR UPA.UserId = @assignorUserId)
      AND UPA.Type = 0
      AND UPA.POHeaderId = POHeader.`POHeaderId`
      AND POHeader.`POStatus` IN (2, 9)
      AND POHeader.`IsDeleted` = FALSE
      AND (POHeader.`IsLocked` = FALSE
      OR POHeader.`LockedAt` < lockedBefore
      OR POHeader.`LockedById` = userId)
      AND (UPA.HoldEndDate IS NULL
      OR UPA.HoldEndDate < NOW())
      AND (vendorId IS NULL
      OR vendorId = 0
      OR POHeader.`VendorId` = vendorId)
    INNER JOIN `Client`
      ON POHeader.`ClientId` = Client.`ClientId`
    INNER JOIN `User`
      ON UPA.UserId = `User`.`UserId`
    LEFT OUTER JOIN Vendor
      ON Vendor.`VendorId` = POHeader.`VendorId`
  ORDER BY CreatedDate DESC
  LIMIT 1 OFFSET pOHeaderIndex;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetApprovalPOHeadersInQueueCount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetApprovalPOHeadersInQueueCount`(IN clientId int,
IN userId char(36),
IN sortOption int,
IN pOHeaderIndex int,
IN pOHeaderIdToBeUnlocked int,
IN vendorId int,
IN lockedBefore datetime)
BEGIN
  SET @assignorUserId = GetActiveTemporaryAssignorForAssignee(userId, NOW(), 1);
  SELECT
    COUNT(*)
  FROM `UserPOAssignment` UPA USE INDEX (IX_UserId)
    INNER JOIN POHeader
      ON (UPA.UserId = userId
      OR UPA.UserId = @assignorUserId)
      AND UPA.Type = 0
      AND UPA.POHeaderId = POHeader.`POHeaderId`
      AND POHeader.`POStatus` IN (2, 9)
      AND POHeader.`IsDeleted` = FALSE
      AND (POHeader.`IsLocked` = FALSE
      OR POHeader.`LockedAt` < lockedBefore
      OR POHeader.`LockedById` = userId)
      AND (UPA.HoldEndDate IS NULL
      OR UPA.HoldEndDate < NOW())
      AND (vendorId IS NULL
      OR vendorId = 0
      OR POHeader.`VendorId` = vendorId)
    INNER JOIN `Client`
      ON POHeader.`ClientId` = Client.`ClientId`
    INNER JOIN `User`
      ON UPA.UserId = `User`.`UserId`
    LEFT OUTER JOIN Vendor
      ON Vendor.`VendorId` = POHeader.`VendorId`;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetApprovalWorkFlowReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetApprovalWorkFlowReport`(IN ClientId int)
BEGIN
  SELECT DISTINCT
    apres.CompanyCode,
    apres.VendorNo,
    apres.VendorName,
    abares.VendorType,
    apres.FullName,
    apres.Email,
    abares.MaximumAllowedAmount,
    abares.Manager,
    abares.`IsPOIsNoPOIsBoth`
  FROM (SELECT
      cc.`CompanyCode`,
      v.VendorNo,
      v.VendorName,
      CONCAT(u.FirstName, ' ', u.LastName) AS FullName,
      u.Email AS Email,
      asu.`SubStepName`,
      asv.`VendorId`,
      u.`UserId`,
      u.`ClientId`
    FROM ApprovalSubStepUserVendor asv
      INNER JOIN User u
        ON u.UserId = asv.UserId
      INNER JOIN Vendor v
        ON v.VendorId = asv.VendorId
      INNER JOIN ApprovalSubStep AS asu
        ON asu.`ApprovalSubStepId` = asv.`ApprovalSubStepId`
      INNER JOIN ApprovalStep st
        ON st.`ApprovalStepId` = asu.`ApprovalStepId`
      INNER JOIN ClientCompany cc
        ON cc.Id = st.`ClientCompanyId`
    WHERE u.ClientId = ClientId) AS apres
    LEFT OUTER JOIN (SELECT
        CONCAT(fa.FirstName, ' ', fa.LastName) AS FirstApprover,
        aba.`MaximumAllowedAmount`,
        v.`VendorName`,
        v.`VendorType`,
        CONCAT(sa.FirstName, ' ', sa.LastName) AS Manager,
        fa.UserId,
        v.VendorId,
        fa.ClientId,
        aba.`IsPOIsNoPOIsBoth`
      FROM ApproverByAmount AS aba
        INNER JOIN User AS fa
          ON aba.`UserId` = fa.`UserId`
        INNER JOIN User AS sa
          ON sa.`UserId` = aba.`SecondApproverId`
        INNER JOIN Vendor AS v
          ON v.`VendorId` = aba.`VendorId`
      WHERE fa.`ClientId` = ClientId) AS abares
      ON apres.UserId = abares.UserId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetBatchEmailSourceAndToAddressByNewAttachmentName` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetBatchEmailSourceAndToAddressByNewAttachmentName`(IN paramNewBatchName nvarchar(40))
BEGIN
  SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
  SELECT
    `EmailCaptureClientEmails`.EmailSource,
    `EmailCaptureClientEmails`.ToAddress
  FROM `EmailCaptureAttachments` USE INDEX (EmailCaptureAttachments_EmailAttachmentName)
    INNER JOIN `EmailCaptureClientEmails`
      ON `EmailCaptureAttachments`.`EmailCaptureClientEmailId` = `EmailCaptureClientEmails`.`EmailCaptureClientEmailId`
  WHERE EmailCaptureAttachments.`NewAttachmentName` = paramNewBatchName LIMIT 1;
  SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCatchAllDepartment` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetCatchAllDepartment`(IN DepartmentName nvarchar(50), IN ClientId int, IN ClientCompanyId int)
BEGIN
  IF EXISTS (SELECT
        *
      FROM `ApprovalSubStepCatchAllUsers`,
           `User`,
           UserDepartment,
           Department
      WHERE Department.`ClientId` = ClientId
      AND User.`ClientId` = ClientId
      AND Department.`DepartmentName` = DepartmentName
      AND Department.`Id` = UserDepartment.`DepartmentId`
      AND UserDepartment.`UserId` = User.`UserId`
      AND Department.`ClientCompanyId` = ClientCompanyId
      AND ApprovalSubStepCatchAllUsers.`UserId` = User.`UserId`
      AND User.`IsActive` = TRUE
      AND Department.`IsActive` = TRUE) THEN
    SELECT DISTINCT
      ApprovalSubStepCatchAllUsers.*
    FROM `ApprovalSubStepCatchAllUsers`,
         `User`,
         UserDepartment,
         Department
    WHERE Department.`ClientId` = ClientId
    AND User.`ClientId` = ClientId
    AND Department.`DepartmentName` = DepartmentName
    AND Department.`Id` = UserDepartment.`DepartmentId`
    AND UserDepartment.`UserId` = User.`UserId`
    AND Department.`ClientCompanyId` = ClientCompanyId
    AND ApprovalSubStepCatchAllUsers.`UserId` = User.`UserId`
    AND User.`IsActive` = TRUE
    AND Department.`IsActive` = TRUE;
  ELSE
    SELECT DISTINCT
      ApprovalSubStepCatchAllUsers.*
    FROM ApprovalSubStepCatchAllUsers,
         `User`
    WHERE ApprovalSubStepCatchAllUsers.`UserId` = User.`UserId`
    AND User.`IsActive` = TRUE
    AND User.`ClientId` = ClientId
    AND User.`UserId` NOT IN (SELECT
        UserDepartment.UserId
      FROM USER,
           UserDepartment
      WHERE User.`ClientId` = ClientId
      AND User.`UserId` = UserDepartment.`UserId`
      AND User.`IsActive` = TRUE);
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetClientCompanyById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetClientCompanyById`(IN id int)
BEGIN
  SELECT
    *
  FROM ClientCompany cc
  WHERE cc.Id = id LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompanyApprovalInvoicesInQueue` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetCompanyApprovalInvoicesInQueue`(IN clientId int,
IN userId char(36),
IN sortOption int,
IN invoiceIndex int,
IN invoiceIdToBeUnlocked int,

IN companyCode nvarchar(50),
IN invoicePOType int,
IN approvalLevel int,
IN isNoPOOnly tinyint(1),
IN filterConfidential tinyint(1),
IN sortDirAsc tinyint(1),
IN sortField nvarchar(50),
IN lockedBefore datetime,
IN userIsAdministrator tinyint(1),
IN sortApproverQueueByIsPOInvoice tinyint(1),
IN sortApproverQueueByCompanyCode tinyint(1))
BEGIN
  SET @assignorUserId = GetActiveTemporaryAssignorForAssignee(userId, NOW(), 0);
  SET @isPOInvoicetype = (SELECT
      CASE WHEN (invoicePOType = -1 OR
          invoicePOType IS NULL) THEN NULL ELSE (CASE WHEN invoicePOType = 0 THEN FALSE ELSE TRUE END) END);

  -- UNLOCK ALL INVOICES (INVOICE WITH A SPECIFIC ID)
  UPDATE Invoice
  SET Invoice.`IsLocked` = 0
  WHERE Invoice.`ClientId` = clientId
  AND Invoice.`IsLocked` = TRUE
  AND Invoice.`IsDeleted` = FALSE
  AND ((invoiceIdToBeUnlocked <> 0
  AND Invoice.`InvoiceId` = invoiceIdToBeUnlocked)
  OR (invoiceIdToBeUnlocked = 0
  AND Invoice.`LockedBy` = userId
  AND (Invoice.`IsPOInvoice` = FALSE
  OR Invoice.`IsPOInvoice` = isNoPOOnly)));


  -- SELECT COUNT(*) FROM UserInvoiceAssignment UIA USE INDEX(IX_UserId) INNER JOIN Invoice ON (UIA.UserId = userId OR UIA.UserId = @assignorUserId) AND
  -- UIA.Type = 0 AND (@isPOInvoicetype IS NULL OR Invoice.`IsPOInvoice` = @isPOInvoicetype) AND UIA.InvoiceId = Invoice.`InvoiceId` AND Invoice.`IsPaused` = FALSE
  -- AND Invoice.`ApprovalStatusId` = 3 AND Invoice.`IsDeleted` = FALSE AND (Invoice.`IsLocked` = FALSE OR Invoice.`LockedAt` < lockedBefore OR Invoice.`LockedBy` = userId) AND
  -- (UIA.HoldEndDate IS NULL OR UIA.HoldEndDate < NOW()) AND
  -- (vendorId IS NULL OR vendorId = 0 OR Invoice.`VendorId` = vendorId) AND
  -- ((approvalLevel = 0 OR approvalLevel IS NULL OR EXISTS (SELECT * FROM ApprovalSubStep ASS WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId AND ASS.OrderNo = approvalLevel))) AND
  -- (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE)) INNER JOIN
  -- `Client` ON Invoice.`ClientId` = Client.`ClientId` INNER JOIN
  -- `User` ON UIA.UserId = `User`.`UserId` LEFT OUTER JOIN Vendor ON Vendor.`VendorId` = Invoice.`VendorId`
  -- WHERE filterConfidential = false OR (userIsAdministrator = TRUE or (CASE WHEN Invoice.VendorId IS NOT NULL AND Vendor.`IsConfidential` = TRUE then TRUE ELSE IFNULL(Invoice.`IsConfidential`, false) END) = FALSE);


  IF (sortApproverQueueByIsPOInvoice = TRUE) THEN
    SELECT
      UIA.*
    FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
      INNER JOIN Invoice
        ON (UIA.UserId = userId
        OR UIA.UserId = @assignorUserId)
        AND (UIA.Type = 0
        OR UIA.Type = 2)
        AND (@isPOInvoicetype IS NULL
        OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
        AND UIA.InvoiceId = Invoice.`InvoiceId`
        AND Invoice.`IsPaused` = FALSE
        AND Invoice.`ApprovalStatusId` = 3
        AND Invoice.`IsDeleted` = FALSE
        AND (Invoice.`IsLocked` = FALSE
        OR Invoice.`LockedAt` < lockedBefore
        OR Invoice.`LockedBy` = userId)
        AND (UIA.HoldEndDate IS NULL
        OR UIA.HoldEndDate < NOW())
        AND (companyCode IS NULL
        OR Invoice.`CompanyCode` = companyCode)
        AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
        OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
      INNER JOIN `Client`
        ON Invoice.`ClientId` = Client.`ClientId`
      INNER JOIN `User`
        ON UIA.UserId = `User`.`UserId`
      LEFT OUTER JOIN Vendor
        ON Vendor.`VendorId` = Invoice.`VendorId`
    WHERE filterConfidential = FALSE
    OR (userIsAdministrator = TRUE
    OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
        Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE)

    ORDER BY UIA.State <> sortOption, UIA.State, Invoice.InvoiceDate
    LIMIT 1 OFFSET invoiceIndex;
  ELSEIF (sortApproverQueueByCompanyCode = TRUE) THEN
    SELECT
      UIA.*
    FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
      INNER JOIN Invoice
        ON (UIA.UserId = userId
        OR UIA.UserId = @assignorUserId)
        AND (UIA.Type = 0
        OR UIA.Type = 2)
        AND (@isPOInvoicetype IS NULL
        OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
        AND UIA.InvoiceId = Invoice.`InvoiceId`
        AND Invoice.`IsPaused` = FALSE
        AND Invoice.`ApprovalStatusId` = 3
        AND Invoice.`IsDeleted` = FALSE
        AND (Invoice.`IsLocked` = FALSE
        OR Invoice.`LockedAt` < lockedBefore
        OR Invoice.`LockedBy` = userId)
        AND (UIA.HoldEndDate IS NULL
        OR UIA.HoldEndDate < NOW())
        AND (companyCode IS NULL
        OR Invoice.`CompanyCode` = companyCode)
        AND ((approvalLevel = 0
        OR approvalLevel IS NULL
        OR EXISTS (SELECT
            *
          FROM ApprovalSubStep ASS
          WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId
          AND ASS.OrderNo = approvalLevel)))
        AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
        OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
      INNER JOIN `Client`
        ON Invoice.`ClientId` = Client.`ClientId`
      INNER JOIN `User`
        ON UIA.UserId = `User`.`UserId`
      LEFT OUTER JOIN Vendor
        ON Vendor.`VendorId` = Invoice.`VendorId`
    WHERE filterConfidential = FALSE
    OR (userIsAdministrator = TRUE
    OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
        Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE)

    ORDER BY Invoice.`CompanyCode`, UIA.State <> sortOption, UIA.State, Invoice.InvoiceDate
    LIMIT 1 OFFSET invoiceIndex;
  ELSE
    IF (sortOption = 1000) THEN
      SELECT
        UIA.*
      FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
        INNER JOIN Invoice
          ON (UIA.UserId = userId
          OR UIA.UserId = @assignorUserId)
          AND (UIA.Type = 0
          OR UIA.Type = 2)
          AND (@isPOInvoicetype IS NULL
          OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
          AND UIA.InvoiceId = Invoice.`InvoiceId`
          AND Invoice.`IsPaused` = FALSE
          AND Invoice.`ApprovalStatusId` = 3
          AND Invoice.`IsDeleted` = FALSE
          AND (Invoice.`IsLocked` = FALSE
          OR Invoice.`LockedAt` < lockedBefore
          OR Invoice.`LockedBy` = userId)
          AND (UIA.HoldEndDate IS NULL
          OR UIA.HoldEndDate < NOW())
          AND (companyCode IS NULL
          OR Invoice.`CompanyCode` = companyCode)
          AND ((approvalLevel = 0
          OR approvalLevel IS NULL
          OR EXISTS (SELECT
              *
            FROM ApprovalSubStep ASS
            WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId
            AND ASS.OrderNo = approvalLevel)))
          AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
          OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
        INNER JOIN `Client`
          ON Invoice.`ClientId` = Client.`ClientId`
        INNER JOIN `User`
          ON UIA.UserId = `User`.`UserId`
        LEFT OUTER JOIN Vendor
          ON Vendor.`VendorId` = Invoice.`VendorId`
      WHERE filterConfidential = FALSE
      OR (userIsAdministrator = TRUE
      OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
          Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE)

      ORDER BY Invoice.`ScannedDate`, Invoice.`InvoiceDate`
      LIMIT 1 OFFSET invoiceIndex;
    ELSE
      SELECT
        UIA.*
      FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
        INNER JOIN Invoice
          ON (UIA.UserId = userId
          OR UIA.UserId = @assignorUserId)
          AND (UIA.Type = 0
          OR UIA.Type = 2)
          AND (@isPOInvoicetype IS NULL
          OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
          AND UIA.InvoiceId = Invoice.`InvoiceId`
          AND Invoice.`IsPaused` = FALSE
          AND Invoice.`ApprovalStatusId` = 3
          AND Invoice.`IsDeleted` = FALSE
          AND (Invoice.`IsLocked` = FALSE
          OR Invoice.`LockedAt` < lockedBefore
          OR Invoice.`LockedBy` = userId)
          AND (UIA.HoldEndDate IS NULL
          OR UIA.HoldEndDate < NOW())
          AND (companyCode IS NULL
          OR Invoice.`CompanyCode` = companyCode)
          AND ((approvalLevel = 0
          OR approvalLevel IS NULL
          OR EXISTS (SELECT
              *
            FROM ApprovalSubStep ASS
            WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId
            AND ASS.OrderNo = approvalLevel)))
          AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
          OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
        INNER JOIN `Client`
          ON Invoice.`ClientId` = Client.`ClientId`
        INNER JOIN `User`
          ON UIA.UserId = `User`.`UserId`
        LEFT OUTER JOIN Vendor
          ON Vendor.`VendorId` = Invoice.`VendorId`
      WHERE filterConfidential = FALSE
      OR (userIsAdministrator = TRUE
      OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
          Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE)

      ORDER BY Invoice.`IsPOInvoice`, UIA.State <> sortOption, UIA.State, Invoice.InvoiceDate
      LIMIT 1 OFFSET invoiceIndex;
    END IF;
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompliantRateSummary` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetCompliantRateSummary`(
    IN client_id INT,
    IN scannedDateFrom DATE,
    IN scannedDateTo DATE
)
BEGIN
    WITH InvoiceDates AS (
        SELECT
            i.InvoiceId,
            i.ClientId,
            MIN(CASE WHEN ih1.CurrentStatus = 'Captured' THEN DATE(ih1.ActionDate) ELSE NULL END) AS CapturedDate,
            MAX(CASE 
                WHEN ih2.Action = 'Validation' AND ih2.Field = 'Validated' THEN DATE(ih2.ActionDate)
                WHEN ih3.Action = 'QC' AND ih3.InitialStatus = '' AND ih3.CurrentStatus = '' THEN DATE(ih3.ActionDate)
                WHEN ih4.Action = 'Approve' THEN DATE(ih4.ActionDate)
                ELSE NULL 
            END) AS LatestActionDate
        FROM
            Invoice i
            LEFT JOIN InvoiceHistory ih1 ON i.InvoiceId = ih1.InvoiceId AND ih1.CurrentStatus = 'Captured'
            LEFT JOIN InvoiceHistory ih2 ON i.InvoiceId = ih2.InvoiceId AND ih2.Action = 'Validation' AND ih2.Field = 'Validated'
            LEFT JOIN InvoiceHistory ih3 ON i.InvoiceId = ih3.InvoiceId AND ih3.Action = 'QC' AND ih3.InitialStatus = '' AND ih3.CurrentStatus = ''
            LEFT JOIN InvoiceHistory ih4 ON i.InvoiceId = ih4.InvoiceId AND ih4.Action = 'Approve'
        WHERE
            !i.IsDeleted AND (client_id IS NULL OR i.ClientId = client_id) 
            AND STR_TO_DATE(i.ScannedDate, '%Y-%m-%d') BETWEEN scannedDateFrom AND scannedDateTo
        GROUP BY i.InvoiceId, i.ClientId
    ),
    WorkingDaysDiff AS (
        SELECT
            InvoiceId,
            ClientId,
            CapturedDate,
            LatestActionDate,
            CASE
                WHEN LatestActionDate IS NOT NULL AND CapturedDate = LatestActionDate THEN 0
                WHEN LatestActionDate IS NOT NULL THEN (
                    SELECT COUNT(*)
                    FROM (
                        SELECT DATE_ADD(CapturedDate, INTERVAL seq.seq DAY) AS DATE
                        FROM (
                            SELECT 0 seq UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6
                        ) seq
                        WHERE DATE_ADD(CapturedDate, INTERVAL seq.seq DAY) < LatestActionDate
                    ) AS Dates
                    WHERE DAYOFWEEK(DATE) NOT IN (1, 7)
                )
                ELSE NULL
            END AS WorkingDaysDiff
        FROM
            InvoiceDates
    )
    SELECT
        cl.ClientId,
        cl.CustomerName,
        SUM(CASE 
            WHEN LatestActionDate IS NOT NULL AND (
                (CapturedDate = LatestActionDate AND DAYOFWEEK(CapturedDate) NOT IN (1, 7)) -- Same working day
                OR (CapturedDate = LatestActionDate AND DAYOFWEEK(CapturedDate) IN (1, 7)) -- Same weekend day
                OR (WorkingDaysDiff = 0 AND DAYOFWEEK(CapturedDate) IN (1, 7) AND DAYOFWEEK(LatestActionDate) IN (1, 7)) -- No working days in between, both dates are weekends
                OR (WorkingDaysDiff = 0 AND CapturedDate = LatestActionDate AND DAYOFWEEK(CapturedDate) NOT IN (1, 7)) -- Same weekday with 0 working days
            ) 
            THEN 1 
            ELSE 0 
        END) AS ZeroDays,
        SUM(CASE WHEN LatestActionDate IS NOT NULL AND WorkingDaysDiff = 1 THEN 1 ELSE 0 END) AS OneDay,
        SUM(CASE WHEN LatestActionDate IS NOT NULL AND WorkingDaysDiff = 2 THEN 1 ELSE 0 END) AS TwoDays,
        SUM(CASE WHEN LatestActionDate IS NOT NULL AND WorkingDaysDiff > 2 THEN 1 ELSE 0 END) AS ThreePlusDays,
        COUNT(CASE WHEN LatestActionDate IS NOT NULL THEN d.InvoiceId END) AS TotalInvoices,
        ROUND(IFNULL(SUM(CASE WHEN LatestActionDate IS NOT NULL AND WorkingDaysDiff <= 1 THEN 1 ELSE 0 END) / COUNT(CASE WHEN LatestActionDate IS NOT NULL THEN d.InvoiceId END) * 100, 0), 2) AS ComplianceRate
    FROM
        WorkingDaysDiff d
        LEFT JOIN Client cl ON d.ClientId = cl.ClientId
    WHERE
        cl.IsActive
    GROUP BY
        cl.ClientId;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCreditPOOutputKeenanFarms` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetCreditPOOutputKeenanFarms`(IN clientId int,
IN userId char(36),
IN invoiceType char(50))
BEGIN
  SELECT
    i.InvoiceId,
    i.InvoiceNo,
    v.VendorNo,
    v.VendorName,
    i.InvoiceTotal,
    DATE_FORMAT(i.GLDate, '%Y%m%d') AS ExpenseDate,
    DATE_FORMAT(i.InvoiceDate, '%Y%m%d') AS InvoiceDate,
    i.CompanyCode,
    DATE_FORMAT(i.ScannedDate, '%Y%m%d') AS ScannedDate,
    DATE_FORMAT(i.AprovedDate, '%Y%m%d') AS ApprovedDate,
    DATE_FORMAT(i.`PaymentDueDate`, '%Y%m%d') AS PaymentDueDate,
    DATE_FORMAT(lid.`DeliveryDate`, '%Y%m%d') AS POReceiptDate,
    i.PONumber,
    lid.`LineNo`,
    lid.ItemNo,
    lid.Quantity,
    lid.UnitPrice,
    lid.UnitOfPurchase AS UOM,
    lid.GLCode,
    lid.Description,
    d.`DepartmentName`,
    p.`ProjectName`,
    lid.RecievedTransactionId AS GRN
  FROM Invoice i
    LEFT OUTER JOIN Vendor v
      ON v.VendorId = i.VendorId
    LEFT OUTER JOIN LineItemDetail lid
      ON lid.InvoiceId = i.InvoiceId
    LEFT OUTER JOIN Department d
      ON d.Id = lid.DepartmentId
    LEFT OUTER JOIN ProjectType p
      ON p.Id = lid.`ProjectTypeId`
  WHERE i.ClientId = 159
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId = 4
  AND i.IsPoInvoice = 1
  AND lid.UserField8 = 'credit'
  ORDER BY i.InvoiceId, i.ScannedDate;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCreditPOOutputTheragenics` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetCreditPOOutputTheragenics`(IN clientId int,
IN userId char(36),
IN invoiceType char(50))
BEGIN

  SELECT
    i.InvoiceId,
    i.InvoiceNo,
    v.VendorNo,
    v.VendorName,
    i.InvoiceTotal,
    DATE_FORMAT(i.GLDate, '%Y%m%d') AS ExpenseDate,
    DATE_FORMAT(i.InvoiceDate, '%Y%m%d') AS InvoiceDate,
    i.CompanyCode,
    DATE_FORMAT(i.ScannedDate, '%Y%m%d') AS ScannedDate,
    DATE_FORMAT(i.AprovedDate, '%Y%m%d') AS ApprovedDate,
    DATE_FORMAT(i.`PaymentDueDate`, '%Y%m%d') AS PaymentDueDate,
    DATE_FORMAT(lid.`DeliveryDate`, '%Y%m%d') AS POReceiptDate,
    i.PONumber,
    lid.LineNo AS VendorCatNumber,
    lid.`LineNo`,
    lid.ItemNo,
    lid.Quantity,
    lid.UnitPrice,
    lid.UnitOfPurchase AS UOM,
    lid.GLCode,
    lid.Description,
    d.`DepartmentName`,
    p.`ProjectName`,
    lid.RecievedTransactionId AS GRN
  FROM Invoice i
    LEFT OUTER JOIN Vendor v
      ON v.VendorId = i.VendorId
    LEFT OUTER JOIN LineItemDetail lid
      ON lid.InvoiceId = i.InvoiceId
    LEFT OUTER JOIN Department d
      ON d.Id = lid.DepartmentId
    LEFT OUTER JOIN ProjectType p
      ON p.Id = lid.`ProjectTypeId`
  WHERE i.ClientId = 139
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId = 4
  AND i.IsPoInvoice = 1
  AND lid.UserField8 = 'credit'
  ORDER BY i.InvoiceId, i.ScannedDate;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getDashBoard` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `getDashBoard`(IN clientId int)
BEGIN
  SELECT
    *
  FROM UserInvoiceAssignment
  WHERE `type` = 0
  AND invoiceid IN (SELECT
      invoiceid
    FROM Invoice inv
    WHERE inv.ClientId = clientId
    AND inv.ApprovalStatusId != 5
    AND inv.ApprovalStatusId != 7
    AND inv.ApprovalStatusId != 4
    AND inv.IsDeleted = 0
    AND inv.IsPaused = 0);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getDashBoardAggrigate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `getDashBoardAggrigate`(IN userIdPar char(36),
IN clientId int,
OUT inQueueAmount decimal(20),
OUT pausedAmount decimal(20),
OUT approverName varchar(50),
OUT inQueueInvoiceCount int,
OUT pausedInvoiceCount int,
OUT nonApprovedAmount decimal(20))
BEGIN
  -- Get INQueueAmount
  SELECT
    SUM(inv.InvoiceTotal) INTO inQueueAmount
  FROM Invoice inv
  WHERE inv.ClientId = clientId
  AND inv.ApprovalStatusId != 5
  AND inv.ApprovalStatusId != 7
  AND inv.ApprovalStatusId != 4
  AND inv.IsDeleted = 0
  AND inv.IsPaused = 0
  AND inv.InvoiceId IN (SELECT
      InvoiceId
    FROM UserInvoiceAssignment
    WHERE `type` = 0
    AND UserInvoiceAssignment.UserId = userIdPar);

  -- Get PausedAmount
  SELECT
    SUM(inv.InvoiceTotal) INTO pausedAmount
  FROM Invoice inv
  WHERE inv.ClientId = clientId
  AND inv.ApprovalStatusId != 5
  AND inv.ApprovalStatusId != 7
  AND inv.ApprovalStatusId != 4
  AND inv.IsDeleted = 0
  AND inv.IsPaused = 1
  AND inv.InvoiceId IN (SELECT
      InvoiceId
    FROM UserInvoiceAssignment
    WHERE `type` = 0
    AND UserInvoiceAssignment.UserId = userIdPar);

  -- Get Approver FullName
  SELECT
    CONCAT(usr.LastName, ' ', usr.FirstName) INTO approverName
  FROM User usr
  WHERE usr.UserId = userIdPar;

  -- Get InQueueInvoiceCount
  SELECT
    COUNT(*) INTO inQueueInvoiceCount
  FROM Invoice inv
  WHERE inv.ClientId = clientId
  AND inv.ApprovalStatusId != 5
  AND inv.ApprovalStatusId != 7
  AND inv.ApprovalStatusId != 4
  AND inv.IsDeleted = 0
  AND inv.IsPaused = 0
  AND inv.InvoiceId IN (SELECT
      InvoiceId
    FROM UserInvoiceAssignment
    WHERE `type` = 0
    AND UserInvoiceAssignment.UserId = userIdPar);

  -- Get PausedInvoiceCount
  SELECT
    COUNT(*) INTO pausedInvoiceCount
  FROM Invoice inv
  WHERE inv.ClientId = clientId
  AND inv.ApprovalStatusId != 5
  AND inv.ApprovalStatusId != 7
  AND inv.ApprovalStatusId != 4
  AND inv.IsDeleted = 0
  AND inv.IsPaused = 1
  AND inv.InvoiceId IN (SELECT
      InvoiceId
    FROM UserInvoiceAssignment
    WHERE `type` = 0
    AND UserInvoiceAssignment.UserId = userIdPar);

  -- Get NonApprovedAmount
  SELECT
    SUM(inv.InvoiceTotal) INTO nonApprovedAmount
  FROM Invoice inv
  WHERE inv.ClientId = clientId
  AND inv.ApprovalStatusId != 5
  AND inv.ApprovalStatusId != 7
  AND inv.ApprovalStatusId != 4
  AND inv.IsDeleted = 0
  AND inv.InvoiceId IN (SELECT
      InvoiceId
    FROM UserInvoiceAssignment
    WHERE `type` = 0
    AND UserInvoiceAssignment.UserId = userIdPar);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDepartmentGLCodesReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetDepartmentGLCodesReport`(IN ClientId int)
BEGIN
  SELECT
    cc.`CompanyCode`,
    d.`DepartmentName`,
    d.`Description` AS DepDescription,
    gl.`GLCodeName`,
    gl.`Desccription` AS GLDescription,
    gl.IsActive AS GLCodeStatus,
    d.IsActive AS DepStatus
  FROM GLCode AS gl
    INNER JOIN DepartmentGLCode AS dg
      ON gl.`GLCodeId` = dg.`GLCodeId`
    INNER JOIN Department AS d
      ON d.`Id` = dg.`DepartmentId`
    INNER JOIN ClientCompany AS cc
      ON d.`ClientCompanyId` = cc.`Id`
  WHERE cc.`ClientId` = ClientId
  AND gl.`ClientId` = ClientId
  AND d.`ClientId` = ClientId
  AND gl.`ClientCompanyId` = cc.`Id`;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDPOs` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetDPOs`(IN clientId INT)
BEGIN

  DROP TEMPORARY TABLE IF EXISTS DupPOs1;
  CREATE TEMPORARY TABLE IF NOT EXISTS DupPOs1 as (
  SELECT PONumber, LineNo, VendorId ,Description, RecievedTransactionId  FROM PO p WHERE p.ClientID=clientId 
  GROUP BY PONumber, LineNo, VendorId , RecievedTransactionId, Description HAVING COUNT(*) > 1);
  
  DROP TEMPORARY TABLE IF EXISTS DupPOs;
  CREATE TEMPORARY TABLE DupPOs (
    PONumber varchar(100),
    LineNo varchar(100),
    VendorId int,
    Description varchar(500),
    RecievedTransactionId varchar(100)
  );

  Insert Into DupPOs
  SELECT p.PONumber, p.LineNo, p.VendorId ,p.Description, p.RecievedTransactionId FROM PO p WHERE p.ClientID=clientId 
  GROUP BY PONumber, LineNo, VendorId , RecievedTransactionId, Description HAVING COUNT(*) > 1;

  select  min(p.Id), max(p.id)
  from PO p where p.ClientId = clientId 
  and p.VendorId in (select p.VendorId from DupPOs1)
  and p.PONumber in (select PONumber from DupPOs);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDWRInvoiceData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetDWRInvoiceData`()
BEGIN
  SELECT
    Invoice.InvoiceId AS InvoiceID,
    Invoice.InvoiceNo AS InvoiceNo,
    Invoice.InvoiceDate AS InvoiceDate,
    Invoice.InvoiceTotal AS Total,
    Invoice.LastActionDate AS AccountDate,
    Vendor.VendorNo AS VendorNo,
    Vendor.VendorName AS VendorName,
    GLCode.GLCodeName AS GLCode,
    GLCode.Desccription AS GLDescription,
    ApprovalHistory.AmountAppoved AS GLAmount,
    ProjectType.ProjectName AS ProjectName,
    SubProjectType.SubProjectName AS SubProjectName,
    Department.DepartmentName AS Unit,
    ApprovalHistory.SpecialNote AS SpecialNote
  FROM Invoice
    INNER JOIN ApprovalHistory
      ON Invoice.InvoiceId = ApprovalHistory.InvoiceId
    INNER JOIN GLCode
      ON ApprovalHistory.GLCodeId = GLCode.GLCodeId
    INNER JOIN Vendor
      ON Invoice.VendorId = Vendor.VendorId
    -- INNER JOIN Department On Department.VendorId = Vendor.VendorId
    LEFT OUTER JOIN Department
      ON ApprovalHistory.DepartmentId = Department.Id
    LEFT OUTER JOIN SubProjectType
      ON ApprovalHistory.SubProjectId = SubProjectType.Id
    LEFT OUTER JOIN ProjectType
      ON ApprovalHistory.ProjectId = ProjectType.Id
  WHERE (Invoice.InvoiceType = 'Invoice')
  AND (Invoice.ApprovalStatusId = 4)
  AND (Invoice.ClientId = 22)
  AND (Invoice.IsDeleted = 0)
  AND (Invoice.IsPaused = 0)
  ORDER BY Invoice.InvoiceId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetErrorReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetErrorReport`(IN FromDate date, IN ToDate date,
IN Actor nvarchar(50), IN Client nvarchar(50))
BEGIN
  CREATE TEMPORARY TABLE TempInvoiceHistory (
    InvoiceId int,
    Actor nvarchar(50),
    ActionDate date
  );
  INSERT INTO TempInvoiceHistory
    SELECT
      Invoice.InvoiceId,
      Actor,
      ActionDate
    FROM InvoiceHistory
      INNER JOIN Invoice
        ON InvoiceHistory.InvoiceId = Invoice.InvoiceId
    WHERE ScannedDate > FromDate
    AND ScannedDate < ToDate;

  SELECT
    CustomerName,
    (SELECT
        Actor
      FROM TempInvoiceHistory a
      WHERE i.InvoiceId = a.invoiceid
      AND a.Actor <> 'System'
      ORDER BY ActionDate ASC LIMIT 1) Operator,
    ih.*,
    i.InvoiceNo,
    ScannedDate,
    b.Source,
    i.IsPOInvoice
  FROM InvoiceHistory ih,
       Invoice i,
       Batch b,
       Client c
  WHERE (Actor IS NULL
  OR (SELECT
      Actor
    FROM TempInvoiceHistory a
    WHERE i.InvoiceId = a.invoiceid
    AND a.Actor <> 'System'
    ORDER BY ActionDate ASC LIMIT 1) = Actor)
  AND (Client IS NULL
  OR c.CustomerName = Client)
  AND (Field = 'Invoice Total'
  OR Field = 'Invoice No')
  AND c.ClientId = i.ClientId
  AND (PreviousData <> ''
  OR (PreviousData = ''
  AND NewData <> ''
  AND CurrentStatus <> 'Captured'
  AND InitialStatus <> 'Captured'))
  AND ScannedDate > FromDate
  AND ScannedDate < ToDate
  AND ih.InvoiceId IN (SELECT
      InvoiceId
    FROM Invoice
    WHERE ClientId IN (SELECT
        ClientId
      FROM Client
      WHERE CustomerName IN (SELECT
          ClientName
        FROM DashboardActiveClients)))
  AND i.InvoiceId = ih.InvoiceId
  AND i.BatchID = b.ID
  AND (SELECT
      Actor
    FROM TempInvoiceHistory AS a
    WHERE i.InvoiceId = a.invoiceid
    AND a.Actor <> 'System'
    ORDER BY ActionDate ASC LIMIT 1) IN (SELECT
      ActorName
    FROM DashboardActiveActors
    WHERE Actor IS NULL
    OR ActorName = Actor)
  AND ih.Actor NOT IN (SELECT
      ActorName
    FROM DashboardActiveActors);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetFilteredInvoices` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetFilteredInvoices`(
    IN invoiceId INT,
    IN userId CHAR(36),
    IN invoiceClientId INT,
    IN invoiceCompanyCode VARCHAR(50),
    IN invoiceNo VARCHAR(50),
    IN invoiceVendorId INT,
    IN invoicePONumber VARCHAR(2000),
    IN showPaidInvoicesInSupDoc BIT,
    IN supportDocsByInvoiceNoOnly BIT
)
BEGIN
    DECLARE canViewConfidential BIT;
    DECLARE isAdmin BIT;
    
    -- Fetch user's permissions
    SELECT 
        IFNULL(CanViewConfidentialInvoice, 0),
        EXISTS (
            SELECT 1
            FROM UserRoles
            WHERE UserId = userId AND RoleId = 8 -- Assuming 8 represents RoleEnum.Administrator
        )
    INTO 
        canViewConfidential,
        isAdmin
    FROM 
        Users
    WHERE 
        UserId = userId;

    IF showPaidInvoicesInSupDoc = 1 AND invoiceType = 'STATEMENT' THEN
        -- Filtered invoices for showPaidInvoicesInSupDoc scenario
        SELECT 
            inv.InvoiceId,
            inv.InvoiceNo,
            v.VendorName,
            inv.InvoiceType,
            CASE 
                WHEN inv.ApprovalStatusId = 3 THEN 'InApproval'
                WHEN inv.ApprovalStatusId = 4 THEN 'Approved'
                ELSE ''
            END AS InvoiceStatusName
        FROM 
            Invoices inv
        LEFT JOIN 
            Vendor v ON inv.VendorId = v.VendorId
        WHERE 
            inv.ClientId = invoiceClientId 
            AND inv.ParentInvoiceId != invoiceId 
            AND NOT inv.IsDeleted 
            AND (inv.CompanyCode = invoiceCompanyCode OR invoiceCompanyCode IS NULL OR invoiceCompanyCode = '')
            AND inv.ApprovalStatusId >= 10;

    ELSEIF supportDocsByInvoiceNoOnly = 0 THEN
        -- Filtered invoices for !supportDocsByInvoiceNoOnly scenario
        SELECT 
            inv.InvoiceId,
            inv.InvoiceNo,
            v.VendorName,
            inv.InvoiceType,
            CASE 
                WHEN inv.ApprovalStatusId = 3 THEN 'InApproval'
                WHEN inv.ApprovalStatusId = 4 THEN 'Approved'
                ELSE ''
            END AS InvoiceStatusName
        FROM 
            Invoices inv
        LEFT JOIN 
            Vendor v ON inv.VendorId = v.VendorId
        WHERE 
            NOT inv.IsDeleted 
            AND (inv.CompanyCode = invoiceCompanyCode OR invoiceCompanyCode IS NULL OR invoiceCompanyCode = '')
            AND inv.ClientId = invoiceClientId
            AND (
                (inv.InvoiceNo = invoiceNo AND invoiceNo IS NOT NULL AND inv.VendorId = invoiceVendorId)
                OR
                (inv.IsPOInvoice 
                    AND inv.PONumber IS NOT NULL 
                    AND (
                        inv.PONumber = invoicePONumber 
                        OR inv.PONumber LIKE CONCAT(invoicePONumber, '|%') 
                        OR inv.PONumber LIKE CONCAT('%|', invoicePONumber) 
                        OR inv.PONumber LIKE CONCAT('%|', invoicePONumber, '|%')
                    ) 
                    AND (inv.VendorId = invoiceVendorId 
                        OR (invoiceVendorId IS NOT NULL 
                            AND inv.Vendor.VendorNo = (
                                SELECT 
                                    VendorNo 
                                FROM 
                                    Vendor 
                                WHERE 
                                    VendorId = invoiceVendorId
                            )
                        )
                    )
                )
            )
            AND inv.InvoiceId != invoiceId;
        
    ELSE
        -- Filtered invoices for supportDocsByInvoiceNoOnly scenario
        SELECT 
            inv.InvoiceId,
            inv.InvoiceNo,
            v.VendorName,
            inv.InvoiceType,
            CASE 
                WHEN inv.ApprovalStatusId = 3 THEN 'InApproval'
                WHEN inv.ApprovalStatusId = 4 THEN 'Approved'
                ELSE ''
            END AS InvoiceStatusName
        FROM 
            Invoices inv
        LEFT JOIN 
            Vendor v ON inv.VendorId = v.VendorId
        WHERE 
            inv.ClientId = invoiceClientId 
            AND inv.InvoiceId != invoiceId 
            AND NOT inv.IsDeleted 
            AND (inv.CompanyCode = invoiceCompanyCode OR invoiceCompanyCode IS NULL OR invoiceCompanyCode = '')
            AND (
                (inv.InvoiceNo = invoiceNo AND invoiceNo IS NOT NULL) 
                AND inv.VendorId = invoiceVendorId
            );
        
    END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetGLCodesByDeptId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetGLCodesByDeptId`(IN clientId int, IN userId char(36), IN deptId int,
IN gLCodeByGLCodeNameOrShortCode bit, IN term varchar(100))
BEGIN

  SELECT
    g.*,
    cc.CompanyCode
  FROM GLCode g
    INNER JOIN DepartmentGLCode dg
      ON dg.`GLCodeId` = g.`GLCodeId`
    INNER JOIN Department d
      ON d.Id = dg.`DepartmentId`
    LEFT OUTER JOIN ClientCompany cc
      ON cc.Id = g.ClientCompanyId
  WHERE g.ClientId = clientId
  AND d.Id = deptId
  AND g.IsActive = 1
  AND (term IS NULL
  OR term = ''
  OR (!gLCodeByGLCodeNameOrShortCode
  AND g.GLCodeName LIKE CONCAT('%', term, '%'))
  OR (gLCodeByGLCodeNameOrShortCode
  AND (g.GLCodeName LIKE CONCAT('', term, '%')
  OR g.GLCodeName LIKE CONCAT('%~|~', term, '%'))
  )
  OR !gLCodeByGLCodeNameOrShortCode
  AND g.Desccription LIKE CONCAT('%', term, '%')
  )
  ;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetGLsForExpService` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetGLsForExpService`(
IN clientId int, 
IN glCodeName varchar (255),
IN externalId varchar (255),
IN considerCompanyCode BIT, 
IN clientCompanyId int)
BEGIN

select * from GLCode g where g.ClientId = clientId and 
case when externalId is null 
then 
  (g.GLCodeName = glCodeName and (clientCompanyId is null or g.ClientCompanyId = clientCompanyId)) 
else 
 (case when considerCompanyCode = TRUE then g.ClientCompanyId = clientCompanyId else true END) END
 and (externalId is null or g.ExternalId = externalId);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetIndexOf` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetIndexOf`(IN stringPattern varchar(250),
IN target varchar(250))
BEGIN
  SELECT
    POSITION(stringPattern IN target);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getInvoiceByClient` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `getInvoiceByClient`(IN clientId int)
BEGIN
  SELECT
    *
  FROM Invoice inv
  WHERE inv.ClientId = clientId LIMIT 5;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInvoiceData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetInvoiceData`(
    IN p_ClientId INT,
    IN scannedDateFrom DATE,
    IN scannedDateTo DATE
)
BEGIN
    SELECT
	i.InvoiceId,
	v.VendorId,
	i.ClientId,
        i.InvoiceNo,
        i.ScannedDate,
        v.VendorName,
        i.IsPaused,
         i.IsPOInvoice,
        
        MIN(CASE
            WHEN ih1.CurrentStatus = 'Captured' THEN DATE(ih1.ActionDate)
            ELSE NULL
        END) AS CapturedDate,
        
        MAX(CASE
            WHEN ih2.Action = 'Validation' AND ih2.Field = 'Validated' THEN DATE(ih2.ActionDate)
            WHEN ih3.Action = 'QC' AND ih3.InitialStatus = '' AND ih3.CurrentStatus = '' THEN DATE(ih3.ActionDate)
            WHEN ih4.Action = 'Approve' THEN DATE(ih4.ActionDate)
            ELSE NULL
        END) AS CapturedPendingValidationDate,
        
        DATEDIFF(
            MAX(CASE 
                WHEN ih2.Action = 'Validation' AND ih2.Field = 'Validated' THEN DATE(ih2.ActionDate)
                WHEN ih3.Action = 'QC' AND ih3.InitialStatus = '' AND ih3.CurrentStatus = '' THEN DATE(ih3.ActionDate)
                WHEN ih4.Action = 'Approve' THEN DATE(ih4.ActionDate)
                ELSE NULL 
            END),
            MIN(CASE WHEN ih1.CurrentStatus = 'Captured' THEN DATE(ih1.ActionDate) ELSE NULL END)
        ) AS SLA,
        
        CASE
            WHEN DATEDIFF(
                MAX(CASE 
                    WHEN ih2.Action = 'Validation' AND ih2.Field = 'Validated' THEN DATE(ih2.ActionDate)
                    WHEN ih3.Action = 'QC' AND ih3.InitialStatus = '' AND ih3.CurrentStatus = '' THEN DATE(ih3.ActionDate)
                    WHEN ih4.Action = 'Approve' THEN DATE(ih4.ActionDate)
                    ELSE NULL 
                END),
                MIN(CASE WHEN ih1.CurrentStatus = 'Captured' THEN DATE(ih1.ActionDate) ELSE NULL END)
            ) > 1 THEN 'NonCompliant'
            ELSE 'Compliant'
        END AS Complaint
    FROM
        Invoice i
    LEFT JOIN
        Vendor v ON i.VendorId = v.VendorId
    LEFT JOIN
        InvoiceHistory ih1 ON i.InvoiceId = ih1.InvoiceId AND ih1.CurrentStatus = 'Captured'
    LEFT JOIN
        InvoiceHistory ih2 ON i.InvoiceId = ih2.InvoiceId AND ih2.Action = 'Validation' AND ih2.Field = 'Validated'
    LEFT JOIN
        InvoiceHistory ih3 ON i.InvoiceId = ih3.InvoiceId AND ih3.Action = 'QC' AND ih3.InitialStatus = '' AND ih3.CurrentStatus = ''
    LEFT JOIN
        InvoiceHistory ih4 ON i.InvoiceId = ih4.InvoiceId AND ih4.Action = 'Approve'
    WHERE
        i.ClientId = p_ClientId AND !i.IsDeleted
        AND STR_TO_DATE(`i`.`ScannedDate`, '%Y-%m-%d') BETWEEN scannedDateFrom AND scannedDateTo
    GROUP BY i.InvoiceId;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInvoiceGLsAndDepartments` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetInvoiceGLsAndDepartments`(IN theInvoiceId int)
BEGIN
  SELECT
    GLCodeId,
    DepartmentId
  FROM ApprovalHistory
  WHERE InvoiceId = theInvoiceId
  AND AmountAppoved <> 0.00;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInvoiceHistoriesByClient` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetInvoiceHistoriesByClient`(IN p_ClientId int,
IN p_YearDateFrom datetime,
IN p_DateTo datetime,
IN p_ApplicableInvoiceStatuses varchar(1000))
BEGIN

  SELECT
    ih.*
  FROM Invoice AS invoice
    INNER JOIN InvoiceHistory AS ih
      ON invoice.InvoiceId = ih.InvoiceId
  WHERE invoice.ClientId = p_ClientId
  AND (invoice.InvoiceType = 'Invoice'
  OR invoice.InvoiceType = 'Credit')
  AND FIND_IN_SET(invoice.ApprovalStatusId, p_ApplicableInvoiceStatuses) > 0
  AND invoice.IsDeleted = 0
  AND ih.ActionDate >= p_YearDateFrom
  AND ih.ActionDate < p_DateTo
  AND (
  (ih.Action IN ('Assignment', 'Notification', 'Escalation'))
  OR (ih.CurrentStatus = 'Approved'
  AND ih.InitialStatus = 'In Approval'
  AND ih.Field = 'Invoice Status')
  OR (ih.CurrentStatus = 'In Approval'
  AND ih.InitialStatus = 'Captured'
  AND ih.Field = 'Invoice Status')
  OR (ih.CurrentStatus = 'In Approval'
  AND ih.InitialStatus = 'Exception'
  AND ih.Field = 'Invoice Status')
  )
  AND (
  ih.ActorId IS NOT NULL
  AND ih.ActorId != '00000000-0000-0000-0000-000000000000' -- Exclude default GUID value
  )
  AND (
  (ih.CurrentStatus = 'Approved'
  AND ih.InitialStatus = 'In Approval'
  AND (ih.Field IN ('Invoice Status', 'Status')))
  OR (ih.Action IN ('Delegation', 'Notification', 'Escalation'))
  OR (ih.CurrentStatus = 'In Approval'
  AND ih.InitialStatus = 'Captured'
  AND (ih.Field IN ('Invoice Status', 'Status')))
  OR (ih.CurrentStatus = 'In Approval'
  AND ih.InitialStatus = 'Exception'
  AND (ih.Field IN ('Invoice Status', 'Status')))
  OR (ih.Action IN ('Pause', 'Unpause'))
  )
  GROUP BY ih.InvoiceId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInvoiceHistoriesByClienttest` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetInvoiceHistoriesByClienttest`(IN p_ClientId int,
IN p_YearDateFrom datetime,
IN p_DateTo datetime,
IN p_ApplicableInvoiceStatuses varchar(1000))
BEGIN
  -- Calculate the count, total approval days, and maximum approval day for each approver
  SELECT
    COUNT(ih.InvoiceId) AS ApprovedInvoicesCount,
    SUM(CASE WHEN ih.Action = 'Assignment' AND
        ih.ActionDate < (SELECT
            MIN(ActionDate)
          FROM InvoiceHistory
          WHERE InvoiceId = ih.InvoiceId
          AND Action = 'Assignment'
          AND ActionDate > ih.ActionDate) THEN DATEDIFF(ih.ActionDate, (SELECT
              MIN(ActionDate)
            FROM InvoiceHistory
            WHERE InvoiceId = ih.InvoiceId
            AND Action = 'Assignment'
            AND ActionDate > ih.ActionDate)) ELSE DATEDIFF(ih.ActionDate, (SELECT
            MIN(ActionDate)
          FROM InvoiceHistory
          WHERE InvoiceId = ih.InvoiceId
          AND Action != 'Assignment'
          AND ActionDate > ih.ActionDate)) END) AS TotalApproveDays,
    MAX(DATEDIFF(ih.ActionDate, i.InvoiceDate)) AS MaximumApproveDay,
    CASE WHEN DATEDIFF(p_DateTo, p_YearDateFrom) > 30 THEN (SUM(CASE WHEN ih.Action = 'Assignment' AND
              ih.ActionDate < (SELECT
                  MIN(ActionDate)
                FROM InvoiceHistory
                WHERE InvoiceId = ih.InvoiceId
                AND Action = 'Assignment'
                AND ActionDate > ih.ActionDate) THEN DATEDIFF(ih.ActionDate, (SELECT
                    MIN(ActionDate)
                  FROM InvoiceHistory
                  WHERE InvoiceId = ih.InvoiceId
                  AND Action = 'Assignment'
                  AND ActionDate > ih.ActionDate)) ELSE DATEDIFF(ih.ActionDate, (SELECT
                  MIN(ActionDate)
                FROM InvoiceHistory
                WHERE InvoiceId = ih.InvoiceId
                AND Action != 'Assignment'
                AND ActionDate > ih.ActionDate)) END) / MONTHS_BETWEEN(p_DateTo, p_YearDateFrom)) ELSE AVG(CASE WHEN ih.Action = 'Assignment' AND
            ih.ActionDate < (SELECT
                MIN(ActionDate)
              FROM InvoiceHistory
              WHERE InvoiceId = ih.InvoiceId
              AND Action = 'Assignment'
              AND ActionDate > ih.ActionDate) THEN DATEDIFF(ih.ActionDate, (SELECT
                  MIN(ActionDate)
                FROM InvoiceHistory
                WHERE InvoiceId = ih.InvoiceId
                AND Action = 'Assignment'
                AND ActionDate > ih.ActionDate)) ELSE DATEDIFF(ih.ActionDate, (SELECT
                MIN(ActionDate)
              FROM InvoiceHistory
              WHERE InvoiceId = ih.InvoiceId
              AND Action != 'Assignment'
              AND ActionDate > ih.ActionDate)) END) END AS MonthlyAverageApproveDays
  FROM Invoice AS i
    INNER JOIN InvoiceHistory AS ih
      ON i.InvoiceId = ih.InvoiceId
  WHERE i.ClientId = p_ClientId
  AND (i.InvoiceType = 'Invoice'
  OR i.InvoiceType = 'Credit')
  AND FIND_IN_SET(i.ApprovalStatusId, p_ApplicableInvoiceStatuses) > 0
  AND i.IsDeleted = 0
  AND ih.ActionDate >= p_YearDateFrom
  AND ih.ActionDate < p_DateTo
  AND (
  (ih.Action IN ('Assignment', 'Notification', 'Escalation'))
  OR (ih.CurrentStatus = 'Approved'
  AND ih.InitialStatus = 'In Approval'
  AND ih.Field = 'Invoice Status')
  OR (ih.CurrentStatus = 'In Approval'
  AND ih.InitialStatus = 'Captured'
  AND ih.Field = 'Invoice Status')
  OR (ih.CurrentStatus = 'In Approval'
  AND ih.InitialStatus = 'Exception'
  AND ih.Field = 'Invoice Status')
  )
  AND ih.ActorId IS NOT NULL
  AND ih.ActorId != '00000000-0000-0000-0000-000000000000';
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInvoiceProcessReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetInvoiceProcessReport`(IN clientId int,
IN scannedDateFrom date,
IN scannedDateTo date,
IN invoiceDateFrom date,
IN invoiceDateTo date,
IN lastActionDateFrom date,
IN lastActionDateTo date,
IN paymentDueDateFrom date,
IN paymentDueDateTo date,
IN invoiceStatuses varchar(255),
IN documentTypes varchar(255),
IN billingMonth varchar(255),
IN billingYear int,
IN approvers varchar(255),
IN step int,
IN vendorSiteIds varchar(255),
IN userField3 varchar(255),
IN userField4 varchar(255),
IN invoiceno varchar(255),
IN isBilling int)
BEGIN
  SELECT
    i.InvoiceId,
    i.InvoiceNo,
    i.InvoiceTotal,
    i.ScannedDate,
    i.InvoiceDate,
    v.VendorName,
    i.IsPaused,
    i.InvoiceType,
    si.StateName
  FROM Invoice i
    LEFT OUTER JOIN Vendor v
      ON i.VendorId = v.VendorId
    LEFT OUTER JOIN InvoiceStatus si
      ON i.ApprovalStatusId = si.StateId

  WHERE i.ClientId = clientId
  AND i.IsDeleted = FALSE
  AND (scannedDateFrom IS NULL
  OR i.ScannedDate >= scannedDateFrom)
  AND (scannedDateTo IS NULL
  OR i.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
  AND (invoiceDateFrom IS NULL
  OR i.InvoiceDate >= invoiceDateFrom)
  AND (invoiceDateTo IS NULL
  OR i.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))
  AND (lastActionDateFrom IS NULL
  OR i.LastActionDate >= lastActionDateFrom)
  AND (lastActionDateTo IS NULL
  OR i.LastActionDate < DATE_ADD(lastActionDateTo, INTERVAL 1 DAY))
  AND (paymentDueDateFrom IS NULL
  OR i.PaymentDueDate >= paymentDueDateFrom)
  AND (paymentDueDateTo IS NULL
  OR i.PaymentDueDate < DATE_ADD(paymentDueDateTo, INTERVAL 1 DAY))
  AND (invoiceStatuses IS NULL
  OR invoiceStatuses = ''
  OR (i.ApprovalStatusId IS NOT NULL
  AND FIND_IN_SET(i.ApprovalStatusId, invoiceStatuses)))
  AND (documentTypes IS NULL
  OR documentTypes = ''
  OR (i.ApprovalStatusId IS NOT NULL
  AND FIND_IN_SET(i.InvoiceType, documentTypes)))
  AND (billingMonth IS NULL
  OR billingMonth = ''
  OR (i.ScannedDate BETWEEN DATE_ADD(DATE_ADD(LAST_DAY(billingMonth), INTERVAL 1 DAY), INTERVAL -1 MONTH) AND LAST_DAY(billingMonth)))
  AND (billingYear IS NULL
  OR billingYear = ''
  OR (i.ScannedDate BETWEEN DATE_ADD(DATE_ADD(LAST_DAY(billingYear), INTERVAL 1 DAY), INTERVAL -1 MONTH) AND LAST_DAY(billingYear)))
  AND (approvers IS NULL
  OR approvers = ''
  OR (i.ApproverId IS NOT NULL
  AND FIND_IN_SET(i.ApproverId, approvers)))
  AND (invoiceNo IS NULL
  OR invoiceNo = ''
  OR i.InvoiceNo LIKE CONCAT('', invoiceNo, '%'))
  AND (vendorSiteIds IS NULL
  OR vendorSiteIds = ''
  OR (i.VendorSiteId IS NOT NULL
  AND FIND_IN_SET(i.VendorSiteId, vendorSiteIds)))
  AND (userField3 IS NULL
  OR userField3 = ''
  OR i.UserField3 LIKE CONCAT('', userField3, '%'))
  AND (userField4 IS NULL
  OR userField4 = ''
  OR i.UserField4 LIKE CONCAT('', userField4, '%'))

  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInvoiceRejectionReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetInvoiceRejectionReport`(IN clientId int,
IN userId char(36),
IN actionDateFrom varchar(50),
IN actionDateTo varchar(50),
IN invoiceNo varchar(50))
BEGIN
  SELECT
    "AutoApprove" AS Action,
    i.InvoiceId,
    i.InvoiceNo,
    i.InvoiceDate,
    i.InvoiceTotal,
    i.ScannedDate,
    v.VendorNo,
    aa.FailReason,
    aa.LastAttemptDate,
    aa.ItemLineItemDetailId,
    CONCAT(it.ItemNo, ' - ', cli.Description) AS CustItemNo,
    ilid.Quantity,
    ilid.UnitPrice,
    ilid.CustomerPrice,
    ilid.VendorItemNumber,
    ilid.VendorItemDescription,
    ilid.ExtPrice
  FROM AutoApproveReport aa USE INDEX (IX_AutoApproveReport_Filter),
       Invoice i,
       Vendor v,
       ItemLineItemDetail ilid,
       CustomerLocationItem cli,
       Item it
  WHERE i.ClientId = clientId
  AND i.Isdeleted = 0
  AND aa.InvoiceId = i.InvoiceId
  AND v.VendorId = i.VendorId
  AND aa.ItemLineItemDetailId = ilid.ItemLineItemDetailId
  AND cli.CustomerLocationItemId = ilid.CustomerLocationItemId
  AND it.ItemId = cli.ItemId
  AND (actionDateFrom IS NULL
  OR aa.ActionDate >= actionDateFrom)
  AND (actionDateTo IS NULL
  OR aa.ActionDate <= actionDateTo)
  AND (invoiceNo IS NULL
  OR invoiceNo = ''
  OR i.InvoiceNo LIKE CONCAT('', invoiceNo, '%'))
  AND aa.IsValid = FALSE;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInvoiceReviewReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetInvoiceReviewReport`(IN clientId int,
IN invoiceStatus int,
IN scannedDateFrom varchar(50),
IN scannedDateTo varchar(50))
BEGIN

  SELECT
    c.CustomerName,
    i.InvoiceId,
    i.InvoiceNo,
    i.InvoiceTotal,
    i.IsPoInvoice,
    i.PONumber,
    v.VendorNo,
    v.VendorName,
    i.ScannedDate,
    (SELECT
        MIN(ih.ActionDate)
      FROM InvoiceHistory ih
      WHERE ih.InvoiceId = i.InvoiceId
      AND ih.Action = 'QC') AS QCStart,
    (SELECT
        MAX(ih.ActionDate)
      FROM InvoiceHistory ih
      WHERE i.InvoiceId = ih.InvoiceId
      AND ih.Action = 'QC') AS QCEnd,
    (SELECT
        MIN(ih.ActionDate)
      FROM InvoiceHistory ih
      WHERE ih.InvoiceId = i.InvoiceId
      AND ih.Action = 'Validation') AS ValidationStart,
    (SELECT
        MAX(ih.ActionDate)
      FROM InvoiceHistory ih
      WHERE i.InvoiceId = ih.InvoiceId
      AND ih.Action = 'Validation') AS ValidationEnd
  FROM Invoice i
    INNER JOIN Client c
      ON i.ClientId = c.ClientId
    LEFT OUTER JOIN Vendor v
      ON i.VendorId = v.VendorId
  WHERE (clientId IS NULL
  OR clientId = 6
  OR i.ClientId = clientId)
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId IN (1, 3, 4)
  AND i.ValidationCompleted = 1
  AND (invoiceStatus IS NULL
  OR invoiceStatus = 0
  OR invoiceStatus = i.ApprovalStatusId)
  AND (scannedDateFrom IS NULL
  OR scannedDateFrom = ''
  OR i.ScannedDate >= scannedDateFrom)
  AND (scannedDateTo IS NULL
  OR scannedDateTo = ''
  OR i.ScannedDate <= scannedDateTo);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInvoiceStatusDashboard` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetInvoiceStatusDashboard`(IN filterClientId int,
IN filterDataType varchar(50), IN filterUserId char(36),
IN filterIsFilterViewForSupervisorByDepartmentEnabled bit,
IN filterShowPurchaserCityOnGrid bit,
IN filterUserIsAdministrator bit,
IN filterIsStatementActive bit)
BEGIN
  SET @isStatementActive = (SELECT
      COUNT(*)
    FROM `ClientSpecificConfig`
    WHERE `ClientId` = filterClientId) > 0;
  SET @filterCompanyCode = (SELECT
      ClientCompany.CompanyCode
    FROM `User`
      LEFT OUTER JOIN ClientCompany
        ON User.`ClientCompanyId` = ClientCompany.`Id`
    WHERE `User`.`UserId` = filterUserId);
  SET @filterUserCanViewConfidentialInvoice = (SELECT
      CASE WHEN User.`CanViewConfidentialInvoice` IS NOT NULL THEN User.`CanViewConfidentialInvoice` ELSE TRUE END
    FROM `User`
    WHERE `User`.`UserId` = filterUserId) OR filterUserIsAdministrator;
  SET @filterCanViewConfidentialInvoice = (SELECT
      (User.`CanViewConfidentialInvoice` = TRUE OR filterUserIsAdministrator = TRUE)
    FROM `User`
    WHERE `User`.`UserId` = filterUserId);

  SET @companyCodesExists = (SELECT
      COUNT(*)
    FROM `UserClientCompanies`
    WHERE `UserClientCompanies`.`UserId` = filterUserId);

  IF (filterDataType = 'CapturedInvoices'
    OR filterDataType = 'All') THEN
    SELECT
      Invoice.`InvoiceId`,
      Invoice.`InvoiceNo`,
      Vendor.`VendorNo`,
      Vendor.`VendorName`,
      DATE_FORMAT(Invoice.`InvoiceDate`, "%m/%d/%Y") AS InvoiceDate,
      DATE_FORMAT(Invoice.`LastActionDate`, "%m/%d/%Y") AS LastActionDate,
      Invoice.`InvoiceTotal`,
      Invoice.`InvoiceType`,
      InvoiceStatus.`StateName` AS InvoiceStatus,
      Invoice.`LastActionBy`,
      -- IsHold,
      Invoice.`IsPaused`,
      (SELECT
          GROUP_CONCAT(CONCAT(User.`LastName`, ', ', `User`.`FirstName`) SEPARATOR '; ')
        FROM `UserInvoiceAssignment`
          INNER JOIN `User`
            ON UserInvoiceAssignment.`UserId` = `User`.`UserId`
        WHERE UserInvoiceAssignment.`InvoiceId` = Invoice.`InvoiceId`) AS AssignedTo,
      '' ExceptionComments,
      Invoice.`Comment`,
      '' PauseComment,
      DATE_FORMAT(Invoice.`ScannedDate`, "%m/%d/%Y") AS ScannedDate,
      Invoice.`IsPOInvoice`,
      Batch.BatchName,
      Invoice.`ValidationCompleted`,
      Invoice.`PONumber`,
      -- POType
      Invoice.`DeliveryNumber`,
      -- FreightCenter,
      Invoice.`Tax`,
      (CASE WHEN filterShowPurchaserCityOnGrid = FALSE THEN '' ELSE (SELECT
              Department.`Description`
            FROM Department
            WHERE Department.`Id` = Invoice.`VendorSiteId`) END) AS BuyerCity,
      Invoice.`CompanyCode`,
      Batch.Sender InvoiceSender,
      IFNULL(Batch.Receiver, Batch.Source) InvoiceReceiver,
      Invoice.`AdjustmentAmount`,
      Department.`DepartmentName` AS 'Department',
      Invoice.`Currency`
    FROM Invoice
    USE INDEX (Invoice_InvoiceStatusDashboard, IX_BatchID, IX_VendorId)
      INNER JOIN Batch
        ON Invoice.`BatchID` = Batch.`ID`
      INNER JOIN InvoiceStatus
        ON Invoice.`ApprovalStatusId` = `InvoiceStatus`.`StateId`
      LEFT OUTER JOIN `Vendor`
        ON filterDataType <> 'All'
        AND Invoice.`VendorId` = Vendor.`VendorId`
      LEFT OUTER JOIN `Department`
        ON Invoice.`VendorSiteId` = Department.`Id`
    WHERE Invoice.`ClientId` = filterClientId
    AND `Invoice`.`IsDeleted` = FALSE
    AND `Invoice`.`IsPaused` = FALSE
    AND Invoice.`ApprovalStatusId` = 1
    AND (filterIsStatementActive = FALSE
    OR (filterIsStatementActive = TRUE
    AND Invoice.`InvoiceType` <> 'STATEMENT'))
    AND (filterUserIsAdministrator = TRUE
    OR filterIsFilterViewForSupervisorByDepartmentEnabled = FALSE
    OR (filterIsFilterViewForSupervisorByDepartmentEnabled = TRUE
    AND `IsInvoiceDepartmentInUserDepartments`(filterUserId, Invoice.`InvoiceId`) = TRUE))
    AND (filterUserIsAdministrator = TRUE
    OR @filterCompanyCode = ''
    OR @filterCompanyCode IS NULL
    OR Invoice.`CompanyCode` = @filterCompanyCode)
    AND (@companyCodesExists = 0
    OR Invoice.`CompanyCode` IN (SELECT
        ClientCompany.`CompanyCode`
      FROM UserClientCompanies,
           ClientCompany
      WHERE ClientCompany.`ClientId` = filterClientId
      AND ClientCompany.`Id` = UserClientCompanies.`ClientCompanyId`
      AND UserID = filterUserId))
    AND (@filterUserCanViewConfidentialInvoice = TRUE
    OR (CASE WHEN Vendor.`IsConfidential` IS NULL THEN (CASE WHEN Invoice.`IsConfidential` IS NULL THEN FALSE ELSE Invoice.`IsConfidential` END) ELSE Vendor.`IsConfidential` END) = FALSE);
  END IF;

  IF (filterDataType = 'CapturedStatements'
    OR filterDataType = 'All') THEN
    SELECT
      Invoice.`InvoiceId`,
      Invoice.`InvoiceNo`,
      Vendor.`VendorNo`,
      Vendor.`VendorName`,
      DATE_FORMAT(Invoice.`InvoiceDate`, "%m/%d/%Y") AS InvoiceDate,
      DATE_FORMAT(Invoice.`LastActionDate`, "%m/%d/%Y") AS LastActionDate,
      Invoice.`InvoiceTotal`,
      Invoice.`InvoiceType`,
      InvoiceStatus.`StateName` AS InvoiceStatus,
      Invoice.`LastActionBy`,
      -- IsHold,
      Invoice.`IsPaused`,
      (SELECT
          GROUP_CONCAT(CONCAT(User.`LastName`, ', ', `User`.`FirstName`) SEPARATOR '; ')
        FROM `UserInvoiceAssignment`
          INNER JOIN `User`
            ON UserInvoiceAssignment.`UserId` = `User`.`UserId`
        WHERE UserInvoiceAssignment.`InvoiceId` = Invoice.`InvoiceId`) AS AssignedTo,
      '' ExceptionComments,
      Invoice.`Comment`,
      '' PauseComment,
      DATE_FORMAT(Invoice.`ScannedDate`, "%m/%d/%Y") AS ScannedDate,
      Invoice.`IsPOInvoice`,
      Batch.BatchName,
      Invoice.`ValidationCompleted`,
      Invoice.`PONumber`,
      -- POType
      Invoice.`DeliveryNumber`,
      -- FreightCenter,
      Invoice.`Tax`,
      (CASE WHEN filterShowPurchaserCityOnGrid = FALSE THEN '' ELSE (SELECT
              Department.`Description`
            FROM Department
            WHERE Department.`Id` = Invoice.`VendorSiteId`) END) AS BuyerCity,
      Invoice.`CompanyCode`,
      Batch.Sender InvoiceSender,
      IFNULL(Batch.Receiver, Batch.Source) InvoiceReceiver,
      Invoice.`AdjustmentAmount`,
      Department.`DepartmentName` AS 'Department'
    FROM Invoice
    USE INDEX (Invoice_InvoiceStatusDashboard, IX_BatchID, IX_VendorId)
      INNER JOIN Batch
        ON Invoice.`BatchID` = Batch.`ID`
      INNER JOIN InvoiceStatus
        ON Invoice.`ApprovalStatusId` = `InvoiceStatus`.`StateId`
      LEFT OUTER JOIN `Vendor`
        ON filterDataType <> 'All'
        AND Invoice.`VendorId` = Vendor.`VendorId`
      LEFT OUTER JOIN `Department`
        ON Invoice.`VendorSiteId` = Department.`Id`
    WHERE Invoice.`ClientId` = filterClientId
    AND `Invoice`.`IsDeleted` = FALSE
    AND `Invoice`.`IsPaused` = FALSE
    AND Invoice.`ApprovalStatusId` = 1
    AND filterIsStatementActive = TRUE
    AND Invoice.`InvoiceType` = 'STATEMENT'
    AND (filterUserIsAdministrator = TRUE
    OR filterIsFilterViewForSupervisorByDepartmentEnabled = FALSE
    OR (filterIsFilterViewForSupervisorByDepartmentEnabled = TRUE
    AND `IsInvoiceDepartmentInUserDepartments`(filterUserId, Invoice.`InvoiceId`) = TRUE))
    AND (filterUserIsAdministrator = TRUE
    OR @filterCompanyCode = ''
    OR @filterCompanyCode IS NULL
    OR Invoice.`CompanyCode` = @filterCompanyCode)
    AND (@companyCodesExists = 0
    OR Invoice.`CompanyCode` IN (SELECT
        ClientCompany.`CompanyCode`
      FROM UserClientCompanies,
           ClientCompany
      WHERE ClientCompany.`ClientId` = filterClientId
      AND ClientCompany.`Id` = UserClientCompanies.`ClientCompanyId`
      AND UserID = filterUserId))
    AND (@filterUserCanViewConfidentialInvoice = TRUE
    OR (CASE WHEN Vendor.`IsConfidential` IS NULL THEN (CASE WHEN Invoice.`IsConfidential` IS NULL THEN FALSE ELSE Invoice.`IsConfidential` END) ELSE Vendor.`IsConfidential` END) = FALSE);
  END IF;

  IF (filterDataType = 'PausedInvoices'
    OR filterDataType = 'All') THEN
    SELECT
      Invoice.`InvoiceId`,
      Invoice.`InvoiceNo`,
      Vendor.`VendorNo`,
      Vendor.`VendorName`,
      DATE_FORMAT(Invoice.`InvoiceDate`, "%m/%d/%Y") AS InvoiceDate,
      DATE_FORMAT(Invoice.`LastActionDate`, "%m/%d/%Y") AS LastActionDate,
      DATE_FORMAT(Invoice.`PaymentDueDate`, "%m/%d/%Y") AS PaymentDueDate,
      Invoice.`InvoiceTotal`,
      Invoice.`InvoiceType`,
      InvoiceStatus.`StateName` AS InvoiceStatus,
      Invoice.`LastActionBy`,
      -- IsHold,
      Invoice.`IsPaused`,
      (SELECT
          GROUP_CONCAT(CONCAT(User.`LastName`, ', ', `User`.`FirstName`) SEPARATOR '; ')
        FROM `UserInvoiceAssignment`
          INNER JOIN `User`
            ON UserInvoiceAssignment.`UserId` = `User`.`UserId`
        WHERE UserInvoiceAssignment.`InvoiceId` = Invoice.`InvoiceId`) AS AssignedTo,
      '' ExceptionComments,
      Invoice.`Comment`,
      PausedInvoice.`Comment` AS PauseComment,
      DATE_FORMAT(Invoice.`ScannedDate`, "%m/%d/%Y") AS ScannedDate,
      Invoice.`IsPOInvoice`,
      Batch.BatchName,
      Invoice.`ValidationCompleted`,
      Invoice.`PONumber`,
      -- POType
      Invoice.`DeliveryNumber`,
      -- FreightCenter,
      Invoice.`Tax`,
      (CASE WHEN filterShowPurchaserCityOnGrid = FALSE THEN '' ELSE (SELECT
              Department.`Description`
            FROM Department
            WHERE Department.`Id` = Invoice.`VendorSiteId`) END) AS BuyerCity,
      Invoice.`CompanyCode`,
      Batch.Sender InvoiceSender,
      IFNULL(Batch.Receiver, Batch.Source) InvoiceReceiver,
      Invoice.`AdjustmentAmount`,
      Department.`DepartmentName` AS 'Department',
      Invoice.`Currency`
    FROM Invoice
    USE INDEX (Invoice_InvoiceStatusDashboard, IX_BatchID, IX_VendorId)
      INNER JOIN Batch
        ON Invoice.`BatchID` = Batch.`ID`
      INNER JOIN InvoiceStatus
        ON Invoice.`ApprovalStatusId` = `InvoiceStatus`.`StateId`
      LEFT OUTER JOIN `Vendor`
        ON filterDataType <> 'All'
        AND Invoice.`VendorId` = Vendor.`VendorId`
      LEFT OUTER JOIN `PausedInvoice`
        ON filterDataType <> 'All'
        AND Invoice.`InvoiceId` = PausedInvoice.`InvoiceId`
      LEFT OUTER JOIN `Department`
        ON Invoice.`VendorSiteId` = Department.`Id`
    WHERE Invoice.`ClientId` = filterClientId
    AND `Invoice`.`IsDeleted` = FALSE
    AND `Invoice`.`IsPaused` = TRUE
    AND (filterUserIsAdministrator = TRUE
    OR filterIsFilterViewForSupervisorByDepartmentEnabled = FALSE
    OR (filterIsFilterViewForSupervisorByDepartmentEnabled = TRUE
    AND `IsInvoiceDepartmentInUserDepartments`(filterUserId, Invoice.`InvoiceId`) = TRUE))
    AND (filterUserIsAdministrator = TRUE
    OR @filterCompanyCode = ''
    OR @filterCompanyCode IS NULL
    OR Invoice.`CompanyCode` = @filterCompanyCode)
    AND (@companyCodesExists = 0
    OR Invoice.`CompanyCode` IN (SELECT
        ClientCompany.`CompanyCode`
      FROM UserClientCompanies,
           ClientCompany
      WHERE ClientCompany.`ClientId` = filterClientId
      AND ClientCompany.`Id` = UserClientCompanies.`ClientCompanyId`
      AND UserID = filterUserId))
    AND (@filterUserCanViewConfidentialInvoice = TRUE
    OR (CASE WHEN Vendor.`IsConfidential` IS NULL THEN (CASE WHEN Invoice.`IsConfidential` IS NULL THEN FALSE ELSE Invoice.`IsConfidential` END) ELSE Vendor.`IsConfidential` END) = FALSE);
  END IF;

  IF (filterDataType = 'ExceptionInvoices'
    OR filterDataType = 'All') THEN
    SELECT
      Invoice.`InvoiceId`,
      Invoice.`InvoiceNo`,
      Vendor.`VendorNo`,
      Vendor.`VendorName`,
      DATE_FORMAT(Invoice.`InvoiceDate`, "%m/%d/%Y") AS InvoiceDate,
      DATE_FORMAT(Invoice.`LastActionDate`, "%m/%d/%Y") AS LastActionDate,
      DATE_FORMAT(Invoice.`PaymentDueDate`, "%m/%d/%Y") AS PaymentDueDate,
      Invoice.`InvoiceTotal`,
      Invoice.`InvoiceType`,
      InvoiceStatus.`StateName` AS InvoiceStatus,
      Invoice.`LastActionBy`,
      -- IsHold,
      Invoice.`IsPaused`,
      (SELECT
          GROUP_CONCAT(CONCAT(User.`LastName`, ', ', `User`.`FirstName`) SEPARATOR '; ')
        FROM `UserInvoiceAssignment`
          INNER JOIN `User`
            ON UserInvoiceAssignment.`UserId` = `User`.`UserId`
        WHERE UserInvoiceAssignment.`InvoiceId` = Invoice.`InvoiceId`) AS AssignedTo,
      (SELECT
          GROUP_CONCAT(`Exception`.`Comment` SEPARATOR ' | ')
        FROM `Exception`
        WHERE `Exception`.`InvoiceId` = Invoice.`InvoiceId`) AS ExceptionComments,
      Invoice.`Comment`,
      '' PauseComment,
      DATE_FORMAT(Invoice.`ScannedDate`, "%m/%d/%Y") AS ScannedDate,
      Invoice.`IsPOInvoice`,
      Batch.BatchName,
      Invoice.`ValidationCompleted`,
      Invoice.`PONumber`,
      -- POType
      Invoice.`DeliveryNumber`,
      -- FreightCenter,
      Invoice.`Tax`,
      (CASE WHEN filterShowPurchaserCityOnGrid = FALSE THEN '' ELSE (SELECT
              Department.`Description`
            FROM Department
            WHERE Department.`Id` = Invoice.`VendorSiteId`) END) AS BuyerCity,
      Invoice.`CompanyCode`,
      Batch.Sender InvoiceSender,
      IFNULL(Batch.Receiver, Batch.Source) InvoiceReceiver,
      Invoice.`AdjustmentAmount`,
      Department.`DepartmentName` AS 'Department'
    FROM Invoice
    USE INDEX (Invoice_InvoiceStatusDashboard, IX_BatchID, IX_VendorId)
      INNER JOIN Batch
        ON Invoice.`BatchID` = Batch.`ID`
      INNER JOIN InvoiceStatus
        ON Invoice.`ApprovalStatusId` = `InvoiceStatus`.`StateId`
      LEFT OUTER JOIN `Vendor`
        ON filterDataType <> 'All'
        AND Invoice.`VendorId` = Vendor.`VendorId`
      LEFT OUTER JOIN `Department`
        ON Invoice.`VendorSiteId` = Department.`Id`
    WHERE Invoice.`ClientId` = filterClientId
    AND `Invoice`.`IsDeleted` = FALSE
    AND `Invoice`.`IsPaused` = FALSE
    AND Invoice.`ApprovalStatusId` = 6
    AND (filterIsStatementActive = FALSE
    OR (filterIsStatementActive = TRUE
    AND Invoice.`InvoiceType` <> 'STATEMENT'))
    AND (filterUserIsAdministrator = TRUE
    OR filterIsFilterViewForSupervisorByDepartmentEnabled = FALSE
    OR (filterIsFilterViewForSupervisorByDepartmentEnabled = TRUE
    AND `IsInvoiceDepartmentInUserDepartments`(filterUserId, Invoice.`InvoiceId`) = TRUE))
    AND (filterUserIsAdministrator = TRUE
    OR @filterCompanyCode = ''
    OR @filterCompanyCode IS NULL
    OR Invoice.`CompanyCode` = @filterCompanyCode)
    AND (@companyCodesExists = 0
    OR Invoice.`CompanyCode` IN (SELECT
        ClientCompany.`CompanyCode`
      FROM UserClientCompanies,
           ClientCompany
      WHERE ClientCompany.`ClientId` = filterClientId
      AND ClientCompany.`Id` = UserClientCompanies.`ClientCompanyId`
      AND UserID = filterUserId))
    AND (@filterUserCanViewConfidentialInvoice = TRUE
    OR (CASE WHEN Vendor.`IsConfidential` IS NULL THEN (CASE WHEN Invoice.`IsConfidential` IS NULL THEN FALSE ELSE Invoice.`IsConfidential` END) ELSE Vendor.`IsConfidential` END) = FALSE);
  END IF;

  IF (filterDataType = 'ExceptionStatements'
    OR filterDataType = 'All') THEN
    SELECT
      Invoice.`InvoiceId`,
      Invoice.`InvoiceNo`,
      Vendor.`VendorNo`,
      Vendor.`VendorName`,
      DATE_FORMAT(Invoice.`InvoiceDate`, "%m/%d/%Y") AS InvoiceDate,
      DATE_FORMAT(Invoice.`LastActionDate`, "%m/%d/%Y") AS LastActionDate,
      Invoice.`InvoiceTotal`,
      Invoice.`InvoiceType`,
      InvoiceStatus.`StateName` AS InvoiceStatus,
      Invoice.`LastActionBy`,
      -- IsHold,
      Invoice.`IsPaused`,
      (SELECT
          GROUP_CONCAT(CONCAT(User.`LastName`, ', ', `User`.`FirstName`) SEPARATOR '; ')
        FROM `UserInvoiceAssignment`
          INNER JOIN `User`
            ON UserInvoiceAssignment.`UserId` = `User`.`UserId`
        WHERE UserInvoiceAssignment.`InvoiceId` = Invoice.`InvoiceId`) AS AssignedTo,
      '' ExceptionComments,
      Invoice.`Comment`,
      '' PauseComment,
      DATE_FORMAT(Invoice.`ScannedDate`, "%m/%d/%Y") AS ScannedDate,
      Invoice.`IsPOInvoice`,
      Batch.BatchName,
      Invoice.`ValidationCompleted`,
      Invoice.`PONumber`,
      -- POType
      Invoice.`DeliveryNumber`,
      -- FreightCenter,
      Invoice.`Tax`,
      (CASE WHEN filterShowPurchaserCityOnGrid = FALSE THEN '' ELSE (SELECT
              Department.`Description`
            FROM Department
            WHERE Department.`Id` = Invoice.`VendorSiteId`) END) AS BuyerCity,
      Invoice.`CompanyCode`,
      Batch.Sender InvoiceSender,
      IFNULL(Batch.Receiver, Batch.Source) InvoiceReceiver,
      Invoice.`AdjustmentAmount`,
      Department.`DepartmentName` AS 'Department'
    FROM Invoice
    USE INDEX (Invoice_InvoiceStatusDashboard, IX_BatchID, IX_VendorId)
      INNER JOIN Batch
        ON Invoice.`BatchID` = Batch.`ID`
      INNER JOIN InvoiceStatus
        ON Invoice.`ApprovalStatusId` = `InvoiceStatus`.`StateId`
      LEFT OUTER JOIN `Vendor`
        ON filterDataType <> 'All'
        AND Invoice.`VendorId` = Vendor.`VendorId`
      LEFT OUTER JOIN `Department`
        ON Invoice.`VendorSiteId` = Department.`Id`
    WHERE Invoice.`ClientId` = filterClientId
    AND `Invoice`.`IsDeleted` = FALSE
    AND `Invoice`.`IsPaused` = FALSE
    AND Invoice.`ApprovalStatusId` = 6
    AND filterIsStatementActive = TRUE
    AND Invoice.`InvoiceType` = 'STATEMENT'
    AND (filterUserIsAdministrator = TRUE
    OR filterIsFilterViewForSupervisorByDepartmentEnabled = FALSE
    OR (filterIsFilterViewForSupervisorByDepartmentEnabled = TRUE
    AND `IsInvoiceDepartmentInUserDepartments`(filterUserId, Invoice.`InvoiceId`) = TRUE))
    AND (filterUserIsAdministrator = TRUE
    OR @filterCompanyCode = ''
    OR @filterCompanyCode IS NULL
    OR Invoice.`CompanyCode` = @filterCompanyCode)
    AND (@companyCodesExists = 0
    OR Invoice.`CompanyCode` IN (SELECT
        ClientCompany.`CompanyCode`
      FROM UserClientCompanies,
           ClientCompany
      WHERE ClientCompany.`ClientId` = filterClientId
      AND ClientCompany.`Id` = UserClientCompanies.`ClientCompanyId`
      AND UserID = filterUserId))
    AND (@filterUserCanViewConfidentialInvoice = TRUE
    OR (CASE WHEN Vendor.`IsConfidential` IS NULL THEN (CASE WHEN Invoice.`IsConfidential` IS NULL THEN FALSE ELSE Invoice.`IsConfidential` END) ELSE Vendor.`IsConfidential` END) = FALSE);
  END IF;

  IF (filterDataType = 'POApprovalInvoices'
    OR filterDataType = 'All') THEN
    SELECT
      Invoice.`InvoiceId`,
      Invoice.`InvoiceNo`,
      Vendor.`VendorNo`,
      Vendor.`VendorName`,
      DATE_FORMAT(Invoice.`InvoiceDate`, "%m/%d/%Y") AS InvoiceDate,
      DATE_FORMAT(Invoice.`LastActionDate`, "%m/%d/%Y") AS LastActionDate,
      DATE_FORMAT(Invoice.`PaymentDueDate`, "%m/%d/%Y") AS PaymentDueDate,
      Invoice.`InvoiceTotal`,
      Invoice.`InvoiceType`,
      InvoiceStatus.`StateName` AS InvoiceStatus,
      Invoice.`LastActionBy`,
      -- IsHold,
      Invoice.`IsPaused`,
      (SELECT
          GROUP_CONCAT(CONCAT(User.`LastName`, ', ', `User`.`FirstName`) SEPARATOR '; ')
        FROM `UserInvoiceAssignment`
          INNER JOIN `User`
            ON UserInvoiceAssignment.`UserId` = `User`.`UserId`
        WHERE UserInvoiceAssignment.`InvoiceId` = Invoice.`InvoiceId`) AS AssignedTo,
      '' ExceptionComments,
      Invoice.`Comment`,
      '' PauseComment,
      DATE_FORMAT(Invoice.`ScannedDate`, "%m/%d/%Y") AS ScannedDate,
      Invoice.`IsPOInvoice`,
      Batch.BatchName,
      Invoice.`ValidationCompleted`,
      Invoice.`PONumber`,
      -- POType
      Invoice.`DeliveryNumber`,
      -- FreightCenter,
      Invoice.`Tax`,
      (CASE WHEN filterShowPurchaserCityOnGrid = FALSE THEN '' ELSE (SELECT
              Department.`Description`
            FROM Department
            WHERE Department.`Id` = Invoice.`VendorSiteId`) END) AS BuyerCity,
      Invoice.`CompanyCode`,
      Batch.Sender InvoiceSender,
      IFNULL(Batch.Receiver, Batch.Source) InvoiceReceiver,
      Invoice.`AdjustmentAmount`,
      Department.`DepartmentName` AS 'Department',
      Invoice.`UserField1`,
      Invoice.`Currency`
    FROM Invoice
    USE INDEX (Invoice_InvoiceStatusDashboard, IX_BatchID, IX_VendorId)
      INNER JOIN Batch
        ON Invoice.`BatchID` = Batch.`ID`
      INNER JOIN InvoiceStatus
        ON Invoice.`ApprovalStatusId` = `InvoiceStatus`.`StateId`
      LEFT OUTER JOIN `Vendor`
        ON filterDataType <> 'All'
        AND Invoice.`VendorId` = Vendor.`VendorId`
      LEFT OUTER JOIN `Department`
        ON Invoice.`VendorSiteId` = Department.`Id`
    WHERE Invoice.`ClientId` = filterClientId
    AND `Invoice`.`IsDeleted` = FALSE
    AND `Invoice`.`IsPaused` = FALSE
    AND Invoice.`ApprovalStatusId` = 3
    AND `Invoice`.`IsPOInvoice` = TRUE
    AND (filterUserIsAdministrator = TRUE
    OR filterIsFilterViewForSupervisorByDepartmentEnabled = FALSE
    OR (filterIsFilterViewForSupervisorByDepartmentEnabled = TRUE
    AND `IsInvoiceDepartmentInUserDepartments`(filterUserId, Invoice.`InvoiceId`) = TRUE))
    AND (filterUserIsAdministrator = TRUE
    OR @filterCompanyCode = ''
    OR @filterCompanyCode IS NULL
    OR Invoice.`CompanyCode` = @filterCompanyCode)
    AND (@companyCodesExists = 0
    OR Invoice.`CompanyCode` IN (SELECT
        ClientCompany.`CompanyCode`
      FROM UserClientCompanies,
           ClientCompany
      WHERE ClientCompany.`ClientId` = filterClientId
      AND ClientCompany.`Id` = UserClientCompanies.`ClientCompanyId`
      AND UserID = filterUserId))
    AND (@filterUserCanViewConfidentialInvoice = TRUE
    OR (CASE WHEN Vendor.`IsConfidential` IS NULL THEN (CASE WHEN Invoice.`IsConfidential` IS NULL THEN FALSE ELSE Invoice.`IsConfidential` END) ELSE Vendor.`IsConfidential` END) = FALSE)
    AND NOT EXISTS (SELECT
        *
      FROM UserInvoiceAssignment
      WHERE `UserInvoiceAssignment`.`InvoiceId` = Invoice.`InvoiceId`
      AND `UserInvoiceAssignment`.`HoldEndDate` IS NOT NULL
      AND `UserInvoiceAssignment`.`HoldEndDate` > NOW());
  END IF;

  IF (filterDataType = 'NoPOApprovalInvoices'
    OR filterDataType = 'All') THEN
    SELECT
      Invoice.`InvoiceId`,
      Invoice.`InvoiceNo`,
      Vendor.`VendorNo`,
      Vendor.`VendorName`,
      DATE_FORMAT(Invoice.`InvoiceDate`, "%m/%d/%Y") AS InvoiceDate,
      DATE_FORMAT(Invoice.`LastActionDate`, "%m/%d/%Y") AS LastActionDate,
      DATE_FORMAT(Invoice.`PaymentDueDate`, "%m/%d/%Y") AS PaymentDueDate,
      Invoice.`InvoiceTotal`,
      Invoice.`InvoiceType`,
      InvoiceStatus.`StateName` AS InvoiceStatus,
      Invoice.`LastActionBy`,
      -- IsHold,
      Invoice.`IsPaused`,
      (SELECT
          GROUP_CONCAT(CONCAT(User.`LastName`, ', ', `User`.`FirstName`) SEPARATOR '; ')
        FROM `UserInvoiceAssignment`
          INNER JOIN `User`
            ON UserInvoiceAssignment.`UserId` = `User`.`UserId`
        WHERE UserInvoiceAssignment.`InvoiceId` = Invoice.`InvoiceId`) AS AssignedTo,
      '' ExceptionComments,
      Invoice.`Comment`,
      '' PauseComment,
      DATE_FORMAT(Invoice.`ScannedDate`, "%m/%d/%Y") AS ScannedDate,
      Invoice.`IsPOInvoice`,
      Batch.BatchName,
      Invoice.`ValidationCompleted`,
      Invoice.`PONumber`,
      Invoice.`CheckNumber`,
      -- POType
      Invoice.`DeliveryNumber`,
      -- FreightCenter,
      Invoice.`Tax`,
      (CASE WHEN filterShowPurchaserCityOnGrid = FALSE THEN '' ELSE (SELECT
              Department.`Description`
            FROM Department
            WHERE Department.`Id` = Invoice.`VendorSiteId`) END) AS BuyerCity,
      Invoice.`CompanyCode`,
      Invoice.`UserField6`,
      Batch.Sender InvoiceSender,
      IFNULL(Batch.Receiver, Batch.Source) InvoiceReceiver,
      Invoice.`AdjustmentAmount`,
      Department.`DepartmentName` AS 'Department',
      Invoice.`Currency`,
      Invoice.`Description`
    FROM Invoice
    USE INDEX (Invoice_InvoiceStatusDashboard, IX_BatchID, IX_VendorId)
      INNER JOIN Batch
        ON Invoice.`BatchID` = Batch.`ID`
      INNER JOIN InvoiceStatus
        ON Invoice.`ApprovalStatusId` = `InvoiceStatus`.`StateId`
      LEFT OUTER JOIN `Vendor`
        ON filterDataType <> 'All'
        AND Invoice.`VendorId` = Vendor.`VendorId`
      LEFT OUTER JOIN `Department`
        ON Invoice.`VendorSiteId` = Department.`Id`
    WHERE Invoice.`ClientId` = filterClientId
    AND `Invoice`.`IsDeleted` = FALSE
    AND `Invoice`.`IsPaused` = FALSE
    AND `Invoice`.`ApprovalStatusId` = 3
    AND `Invoice`.`IsPOInvoice` = FALSE
    AND (filterUserIsAdministrator = TRUE
    OR filterIsFilterViewForSupervisorByDepartmentEnabled = FALSE
    OR (filterIsFilterViewForSupervisorByDepartmentEnabled = TRUE
    AND `IsInvoiceDepartmentInUserDepartments`(filterUserId, Invoice.`InvoiceId`) = TRUE))
    AND (filterUserIsAdministrator = TRUE
    OR @filterCompanyCode = ''
    OR @filterCompanyCode IS NULL
    OR Invoice.`CompanyCode` = @filterCompanyCode)
    AND (@companyCodesExists = 0
    OR Invoice.`CompanyCode` IN (SELECT
        ClientCompany.`CompanyCode`
      FROM UserClientCompanies,
           ClientCompany
      WHERE ClientCompany.`ClientId` = filterClientId
      AND ClientCompany.`Id` = UserClientCompanies.`ClientCompanyId`
      AND UserID = filterUserId))
    AND (@filterUserCanViewConfidentialInvoice = TRUE
    OR (CASE WHEN Vendor.`IsConfidential` IS NULL THEN (CASE WHEN Invoice.`IsConfidential` IS NULL THEN FALSE ELSE Invoice.`IsConfidential` END) ELSE Vendor.`IsConfidential` END) = FALSE);
  END IF;

  IF (filterDataType = 'HoldInvoices30Days'
    OR filterDataType = 'All') THEN
    SELECT
      Invoice.`InvoiceId`,
      Invoice.`InvoiceNo`,
      Vendor.`VendorNo`,
      Vendor.`VendorName`,
      DATE_FORMAT(Invoice.`InvoiceDate`, "%m/%d/%Y") AS InvoiceDate,
      DATE_FORMAT(Invoice.`LastActionDate`, "%m/%d/%Y") AS LastActionDate,
      Invoice.`InvoiceTotal`,
      Invoice.`InvoiceType`,
      InvoiceStatus.`StateName` AS InvoiceStatus,
      Invoice.`LastActionBy`,
      -- IsHold,
      Invoice.`IsPaused`,
      (SELECT
          GROUP_CONCAT(CONCAT(User.`LastName`, ', ', `User`.`FirstName`) SEPARATOR '; ')
        FROM `UserInvoiceAssignment`
          INNER JOIN `User`
            ON UserInvoiceAssignment.`UserId` = `User`.`UserId`
        WHERE UserInvoiceAssignment.`InvoiceId` = Invoice.`InvoiceId`) AS AssignedTo,
      '' ExceptionComments,
      Invoice.`Comment`,
      '' PauseComment,
      DATE_FORMAT(Invoice.`ScannedDate`, "%m/%d/%Y") AS ScannedDate,
      Invoice.`IsPOInvoice`,
      Batch.BatchName,
      Invoice.`ValidationCompleted`,
      Invoice.`PONumber`,
      -- POType
      Invoice.`DeliveryNumber`,
      -- FreightCenter,
      Invoice.`Tax`,
      (CASE WHEN filterShowPurchaserCityOnGrid = FALSE THEN '' ELSE (SELECT
              Department.`Description`
            FROM Department
            WHERE Department.`Id` = Invoice.`VendorSiteId`) END) AS BuyerCity,
      Invoice.`CompanyCode`,
      Batch.Sender InvoiceSender,
      IFNULL(Batch.Receiver, Batch.Source) InvoiceReceiver,
      Invoice.`AdjustmentAmount`,
      Department.`DepartmentName` AS 'Department'
    FROM Invoice
    USE INDEX (Invoice_InvoiceStatusDashboard, IX_BatchID, IX_VendorId)
      INNER JOIN Batch
        ON Invoice.`BatchID` = Batch.`ID`
      INNER JOIN InvoiceStatus
        ON Invoice.`ApprovalStatusId` = `InvoiceStatus`.`StateId`
      LEFT OUTER JOIN `Vendor`
        ON filterDataType <> 'All'
        AND Invoice.`VendorId` = Vendor.`VendorId`
      LEFT OUTER JOIN `Department`
        ON Invoice.`VendorSiteId` = Department.`Id`
    WHERE Invoice.`ClientId` = filterClientId
    AND `Invoice`.`IsDeleted` = FALSE
    AND `Invoice`.`IsPaused` = FALSE
    AND `Invoice`.`ApprovalStatusId` = 3
    AND `Invoice`.`IsPOInvoice` = TRUE
    AND (filterUserIsAdministrator = TRUE
    OR filterIsFilterViewForSupervisorByDepartmentEnabled = FALSE
    OR (filterIsFilterViewForSupervisorByDepartmentEnabled = TRUE
    AND `IsInvoiceDepartmentInUserDepartments`(filterUserId, Invoice.`InvoiceId`) = TRUE))
    AND (filterUserIsAdministrator = TRUE
    OR @filterCompanyCode = ''
    OR @filterCompanyCode IS NULL
    OR Invoice.`CompanyCode` = @filterCompanyCode)
    AND (@companyCodesExists = 0
    OR Invoice.`CompanyCode` IN (SELECT
        ClientCompany.`CompanyCode`
      FROM UserClientCompanies,
           ClientCompany
      WHERE ClientCompany.`ClientId` = filterClientId
      AND ClientCompany.`Id` = UserClientCompanies.`ClientCompanyId`
      AND UserID = filterUserId))
    AND (@filterUserCanViewConfidentialInvoice = TRUE
    OR (CASE WHEN Vendor.`IsConfidential` IS NULL THEN (CASE WHEN Invoice.`IsConfidential` IS NULL THEN FALSE ELSE Invoice.`IsConfidential` END) ELSE Vendor.`IsConfidential` END) = FALSE)
    AND EXISTS (SELECT
        *
      FROM UserInvoiceAssignment
      WHERE `UserInvoiceAssignment`.`InvoiceId` = Invoice.`InvoiceId`
      AND `UserInvoiceAssignment`.`HoldStartDate` IS NOT NULL
      AND `UserInvoiceAssignment`.`HoldEndDate` IS NOT NULL
      AND `UserInvoiceAssignment`.`HoldStartDate` <= NOW()
      AND `UserInvoiceAssignment`.`HoldEndDate` > NOW()
      AND DIFFDays(Invoice.`ScannedDate`, NOW()) > 30);
  END IF;

  IF (filterDataType = 'HoldInvoices15Days'
    OR filterDataType = 'All') THEN
    SELECT
      Invoice.`InvoiceId`,
      Invoice.`InvoiceNo`,
      Vendor.`VendorNo`,
      Vendor.`VendorName`,
      DATE_FORMAT(Invoice.`InvoiceDate`, "%m/%d/%Y") AS InvoiceDate,
      DATE_FORMAT(Invoice.`LastActionDate`, "%m/%d/%Y") AS LastActionDate,
      Invoice.`InvoiceTotal`,
      Invoice.`InvoiceType`,
      InvoiceStatus.`StateName` AS InvoiceStatus,
      Invoice.`LastActionBy`,
      -- IsHold,
      Invoice.`IsPaused`,
      (SELECT
          GROUP_CONCAT(CONCAT(User.`LastName`, ', ', `User`.`FirstName`) SEPARATOR '; ')
        FROM `UserInvoiceAssignment`
          INNER JOIN `User`
            ON UserInvoiceAssignment.`UserId` = `User`.`UserId`
        WHERE UserInvoiceAssignment.`InvoiceId` = Invoice.`InvoiceId`) AS AssignedTo,
      '' ExceptionComments,
      Invoice.`Comment`,
      '' PauseComment,
      DATE_FORMAT(Invoice.`ScannedDate`, "%m/%d/%Y") AS ScannedDate,
      Invoice.`IsPOInvoice`,
      Batch.BatchName,
      Invoice.`ValidationCompleted`,
      Invoice.`PONumber`,
      -- POType
      Invoice.`DeliveryNumber`,
      -- FreightCenter,
      Invoice.`Tax`,
      (CASE WHEN filterShowPurchaserCityOnGrid = FALSE THEN '' ELSE (SELECT
              Department.`Description`
            FROM Department
            WHERE Department.`Id` = Invoice.`VendorSiteId`) END) AS BuyerCity,
      Invoice.`CompanyCode`,
      Batch.Sender InvoiceSender,
      IFNULL(Batch.Receiver, Batch.Source) InvoiceReceiver,
      Invoice.`AdjustmentAmount`,
      Department.`DepartmentName` AS 'Department'
    FROM Invoice
    USE INDEX (Invoice_InvoiceStatusDashboard, IX_BatchID, IX_VendorId)
      INNER JOIN Batch
        ON Invoice.`BatchID` = Batch.`ID`
      INNER JOIN InvoiceStatus
        ON Invoice.`ApprovalStatusId` = `InvoiceStatus`.`StateId`
      LEFT OUTER JOIN `Vendor`
        ON filterDataType <> 'All'
        AND Invoice.`VendorId` = Vendor.`VendorId`
      LEFT OUTER JOIN `Department`
        ON Invoice.`VendorSiteId` = Department.`Id`
    WHERE Invoice.`ClientId` = filterClientId
    AND `Invoice`.`IsDeleted` = FALSE
    AND `Invoice`.`IsPaused` = FALSE
    AND `Invoice`.`ApprovalStatusId` = 3
    AND `Invoice`.`IsPOInvoice` = TRUE
    AND (filterUserIsAdministrator = TRUE
    OR filterIsFilterViewForSupervisorByDepartmentEnabled = FALSE
    OR (filterIsFilterViewForSupervisorByDepartmentEnabled = TRUE
    AND `IsInvoiceDepartmentInUserDepartments`(filterUserId, Invoice.`InvoiceId`) = TRUE))
    AND (filterUserIsAdministrator = TRUE
    OR @filterCompanyCode = ''
    OR @filterCompanyCode IS NULL
    OR Invoice.`CompanyCode` = @filterCompanyCode)
    AND (@companyCodesExists = 0
    OR Invoice.`CompanyCode` IN (SELECT
        ClientCompany.`CompanyCode`
      FROM UserClientCompanies,
           ClientCompany
      WHERE ClientCompany.`ClientId` = filterClientId
      AND ClientCompany.`Id` = UserClientCompanies.`ClientCompanyId`
      AND UserID = filterUserId))
    AND (@filterUserCanViewConfidentialInvoice = TRUE
    OR (CASE WHEN Vendor.`IsConfidential` IS NULL THEN (CASE WHEN Invoice.`IsConfidential` IS NULL THEN FALSE ELSE Invoice.`IsConfidential` END) ELSE Vendor.`IsConfidential` END) = FALSE)
    AND EXISTS (SELECT
        *
      FROM UserInvoiceAssignment
      WHERE `UserInvoiceAssignment`.`InvoiceId` = Invoice.`InvoiceId`
      AND `UserInvoiceAssignment`.`HoldStartDate` IS NOT NULL
      AND `UserInvoiceAssignment`.`HoldEndDate` IS NOT NULL
      AND `UserInvoiceAssignment`.`HoldStartDate` <= NOW()
      AND `UserInvoiceAssignment`.`HoldEndDate` > NOW()
      AND DIFFDays(Invoice.`ScannedDate`, NOW()) <= 30
      AND DIFFDays(Invoice.`ScannedDate`, NOW()) > 15);
  END IF;

  IF (filterDataType = 'HoldInvoices7Days'
    OR filterDataType = 'All') THEN
    SELECT
      Invoice.`InvoiceId`,
      Invoice.`InvoiceNo`,
      Vendor.`VendorNo`,
      Vendor.`VendorName`,
      DATE_FORMAT(Invoice.`InvoiceDate`, "%m/%d/%Y") AS InvoiceDate,
      DATE_FORMAT(Invoice.`LastActionDate`, "%m/%d/%Y") AS LastActionDate,
      Invoice.`InvoiceTotal`,
      Invoice.`InvoiceType`,
      InvoiceStatus.`StateName` AS InvoiceStatus,
      Invoice.`LastActionBy`,
      -- IsHold,
      Invoice.`IsPaused`,
      (SELECT
          GROUP_CONCAT(CONCAT(User.`LastName`, ', ', `User`.`FirstName`) SEPARATOR '; ')
        FROM `UserInvoiceAssignment`
          INNER JOIN `User`
            ON UserInvoiceAssignment.`UserId` = `User`.`UserId`
        WHERE UserInvoiceAssignment.`InvoiceId` = Invoice.`InvoiceId`) AS AssignedTo,
      '' ExceptionComments,
      Invoice.`Comment`,
      '' PauseComment,
      DATE_FORMAT(Invoice.`ScannedDate`, "%m/%d/%Y") AS ScannedDate,
      Invoice.`IsPOInvoice`,
      Batch.BatchName,
      Invoice.`ValidationCompleted`,
      Invoice.`PONumber`,
      -- POType
      Invoice.`DeliveryNumber`,
      -- FreightCenter,
      Invoice.`Tax`,
      (CASE WHEN filterShowPurchaserCityOnGrid = FALSE THEN '' ELSE (SELECT
              Department.`Description`
            FROM Department
            WHERE Department.`Id` = Invoice.`VendorSiteId`) END) AS BuyerCity,
      Invoice.`CompanyCode`,
      Batch.Sender InvoiceSender,
      IFNULL(Batch.Receiver, Batch.Source) InvoiceReceiver,
      Invoice.`AdjustmentAmount`,
      Department.`DepartmentName` AS 'Department'
    FROM Invoice
    USE INDEX (Invoice_InvoiceStatusDashboard, IX_BatchID, IX_VendorId)
      INNER JOIN Batch
        ON Invoice.`BatchID` = Batch.`ID`
      INNER JOIN InvoiceStatus
        ON Invoice.`ApprovalStatusId` = `InvoiceStatus`.`StateId`
      LEFT OUTER JOIN `Vendor`
        ON filterDataType <> 'All'
        AND Invoice.`VendorId` = Vendor.`VendorId`
      LEFT OUTER JOIN `Department`
        ON Invoice.`VendorSiteId` = Department.`Id`
    WHERE Invoice.`ClientId` = filterClientId
    AND `Invoice`.`IsDeleted` = FALSE
    AND `Invoice`.`IsPaused` = FALSE
    AND `Invoice`.`ApprovalStatusId` = 3
    AND `Invoice`.`IsPOInvoice` = TRUE
    AND (filterUserIsAdministrator = TRUE
    OR filterIsFilterViewForSupervisorByDepartmentEnabled = FALSE
    OR (filterIsFilterViewForSupervisorByDepartmentEnabled = TRUE
    AND `IsInvoiceDepartmentInUserDepartments`(filterUserId, Invoice.`InvoiceId`) = TRUE))
    AND (filterUserIsAdministrator = TRUE
    OR @filterCompanyCode = ''
    OR @filterCompanyCode IS NULL
    OR Invoice.`CompanyCode` = @filterCompanyCode)
    AND (@companyCodesExists = 0
    OR Invoice.`CompanyCode` IN (SELECT
        ClientCompany.`CompanyCode`
      FROM UserClientCompanies,
           ClientCompany
      WHERE ClientCompany.`ClientId` = filterClientId
      AND ClientCompany.`Id` = UserClientCompanies.`ClientCompanyId`
      AND UserID = filterUserId))
    AND (@filterUserCanViewConfidentialInvoice = TRUE
    OR (CASE WHEN Vendor.`IsConfidential` IS NULL THEN (CASE WHEN Invoice.`IsConfidential` IS NULL THEN FALSE ELSE Invoice.`IsConfidential` END) ELSE Vendor.`IsConfidential` END) = FALSE)
    AND EXISTS (SELECT
        *
      FROM UserInvoiceAssignment
      WHERE `UserInvoiceAssignment`.`InvoiceId` = Invoice.`InvoiceId`
      AND `UserInvoiceAssignment`.`HoldStartDate` IS NOT NULL
      AND `UserInvoiceAssignment`.`HoldEndDate` IS NOT NULL
      AND `UserInvoiceAssignment`.`HoldStartDate` <= NOW()
      AND `UserInvoiceAssignment`.`HoldEndDate` > NOW()
      AND DIFFDays(Invoice.`ScannedDate`, NOW()) <= 15
      AND DIFFDays(Invoice.`ScannedDate`, NOW()) > 7);
  END IF;

  IF (filterDataType = 'HoldInvoices0_7Days'
    OR filterDataType = 'All') THEN
    SELECT
      Invoice.`InvoiceId`,
      Invoice.`InvoiceNo`,
      Vendor.`VendorNo`,
      Vendor.`VendorName`,
      DATE_FORMAT(Invoice.`InvoiceDate`, "%m/%d/%Y") AS InvoiceDate,
      DATE_FORMAT(Invoice.`LastActionDate`, "%m/%d/%Y") AS LastActionDate,
      Invoice.`InvoiceTotal`,
      Invoice.`InvoiceType`,
      InvoiceStatus.`StateName` AS InvoiceStatus,
      Invoice.`LastActionBy`,
      -- IsHold,
      Invoice.`IsPaused`,
      (SELECT
          GROUP_CONCAT(CONCAT(User.`LastName`, ', ', `User`.`FirstName`) SEPARATOR '; ')
        FROM `UserInvoiceAssignment`
          INNER JOIN `User`
            ON UserInvoiceAssignment.`UserId` = `User`.`UserId`
        WHERE UserInvoiceAssignment.`InvoiceId` = Invoice.`InvoiceId`) AS AssignedTo,
      '' ExceptionComments,
      Invoice.`Comment`,
      '' PauseComment,
      DATE_FORMAT(Invoice.`ScannedDate`, "%m/%d/%Y") AS ScannedDate,
      Invoice.`IsPOInvoice`,
      Batch.BatchName,
      Invoice.`ValidationCompleted`,
      Invoice.`PONumber`,
      -- POType
      Invoice.`DeliveryNumber`,
      -- FreightCenter,
      Invoice.`Tax`,
      (CASE WHEN filterShowPurchaserCityOnGrid = FALSE THEN '' ELSE (SELECT
              Department.`Description`
            FROM Department
            WHERE Department.`Id` = Invoice.`VendorSiteId`) END) AS BuyerCity,
      Invoice.`CompanyCode`,
      Batch.Sender InvoiceSender,
      IFNULL(Batch.Receiver, Batch.Source) InvoiceReceiver,
      Invoice.`AdjustmentAmount`,
      Department.`DepartmentName` AS 'Department'
    FROM Invoice
    USE INDEX (Invoice_InvoiceStatusDashboard, IX_BatchID, IX_VendorId)
      INNER JOIN Batch
        ON Invoice.`BatchID` = Batch.`ID`
      INNER JOIN InvoiceStatus
        ON Invoice.`ApprovalStatusId` = `InvoiceStatus`.`StateId`
      LEFT OUTER JOIN `Vendor`
        ON filterDataType <> 'All'
        AND Invoice.`VendorId` = Vendor.`VendorId`
      LEFT OUTER JOIN `Department`
        ON Invoice.`VendorSiteId` = Department.`Id`
    WHERE Invoice.`ClientId` = filterClientId
    AND `Invoice`.`IsDeleted` = FALSE
    AND `Invoice`.`IsPaused` = FALSE
    AND `Invoice`.`ApprovalStatusId` = 3
    AND `Invoice`.`IsPOInvoice` = TRUE
    AND (filterUserIsAdministrator = TRUE
    OR filterIsFilterViewForSupervisorByDepartmentEnabled = FALSE
    OR (filterIsFilterViewForSupervisorByDepartmentEnabled = TRUE
    AND `IsInvoiceDepartmentInUserDepartments`(filterUserId, Invoice.`InvoiceId`) = TRUE))
    AND (filterUserIsAdministrator = TRUE
    OR @filterCompanyCode = ''
    OR @filterCompanyCode IS NULL
    OR Invoice.`CompanyCode` = @filterCompanyCode)
    AND (@companyCodesExists = 0
    OR Invoice.`CompanyCode` IN (SELECT
        ClientCompany.`CompanyCode`
      FROM UserClientCompanies,
           ClientCompany
      WHERE ClientCompany.`ClientId` = filterClientId
      AND ClientCompany.`Id` = UserClientCompanies.`ClientCompanyId`
      AND UserID = filterUserId))
    AND (@filterUserCanViewConfidentialInvoice = TRUE
    OR (CASE WHEN Vendor.`IsConfidential` IS NULL THEN (CASE WHEN Invoice.`IsConfidential` IS NULL THEN FALSE ELSE Invoice.`IsConfidential` END) ELSE Vendor.`IsConfidential` END) = FALSE)
    AND EXISTS (SELECT
        *
      FROM UserInvoiceAssignment
      WHERE `UserInvoiceAssignment`.`InvoiceId` = Invoice.`InvoiceId`
      AND `UserInvoiceAssignment`.`HoldStartDate` IS NOT NULL
      AND `UserInvoiceAssignment`.`HoldEndDate` IS NOT NULL
      AND `UserInvoiceAssignment`.`HoldStartDate` <= NOW()
      AND `UserInvoiceAssignment`.`HoldEndDate` > NOW()
      AND DIFFDays(Invoice.`ScannedDate`, NOW()) <= 7
      AND DIFFDays(Invoice.`ScannedDate`, NOW()) >= 0);
  END IF;

  IF (filterDataType = 'ApprovedInvoices'
    OR filterDataType = 'All') THEN
    SELECT
      Invoice.`InvoiceId`,
      Invoice.`InvoiceNo`,
      Vendor.`VendorNo`,
      Vendor.`VendorName`,
      DATE_FORMAT(Invoice.`InvoiceDate`, "%m/%d/%Y") AS InvoiceDate,
      DATE_FORMAT(Invoice.`LastActionDate`, "%m/%d/%Y") AS LastActionDate,
      Invoice.`InvoiceTotal`,
      Invoice.`InvoiceType`,
      InvoiceStatus.`StateName` AS InvoiceStatus,
      Invoice.`LastActionBy`,
      -- IsHold,
      Invoice.`IsPaused`,
      (SELECT
          GROUP_CONCAT(CONCAT(User.`LastName`, ', ', `User`.`FirstName`) SEPARATOR ';')
        FROM `UserInvoiceAssignment`
          INNER JOIN `User`
            ON UserInvoiceAssignment.`UserId` = `User`.`UserId`
        WHERE UserInvoiceAssignment.`InvoiceId` = Invoice.`InvoiceId`) AS AssignedTo,
      '' ExceptionComments,
      Invoice.`Comment`,
      '' PauseComment,
      DATE_FORMAT(Invoice.`ScannedDate`, "%m/%d/%Y") AS ScannedDate,
      Invoice.`IsPOInvoice`,
      Batch.BatchName,
      Invoice.`ValidationCompleted`,
      Invoice.`PONumber`,
      -- POType
      Invoice.`DeliveryNumber`,
      -- FreightCenter,
      Invoice.`Tax`,
      (CASE WHEN filterShowPurchaserCityOnGrid = FALSE THEN '' ELSE (SELECT
              Department.`Description`
            FROM Department
            WHERE Department.`Id` = Invoice.`VendorSiteId`) END) AS BuyerCity,
      Invoice.`CompanyCode`,
      Batch.Sender InvoiceSender,
      IFNULL(Batch.Receiver, Batch.Source) InvoiceReceiver,
      Invoice.`AdjustmentAmount`,
      Department.`DepartmentName` AS 'Department'
    FROM Invoice
    USE INDEX (Invoice_InvoiceStatusDashboard, IX_BatchID, IX_VendorId)
      INNER JOIN Batch
        ON Invoice.`BatchID` = Batch.`ID`
      INNER JOIN InvoiceStatus
        ON Invoice.`ApprovalStatusId` = `InvoiceStatus`.`StateId`
      LEFT OUTER JOIN `Vendor`
        ON filterDataType <> 'All'
        AND Invoice.`VendorId` = Vendor.`VendorId`
      LEFT OUTER JOIN `Department`
        ON Invoice.`VendorSiteId` = Department.`Id`
    WHERE Invoice.`ClientId` = filterClientId
    AND `Invoice`.`IsDeleted` = FALSE
    AND `Invoice`.`IsPaused` = FALSE
    AND `Invoice`.`ApprovalStatusId` = 4
    AND (filterUserIsAdministrator = TRUE
    OR filterIsFilterViewForSupervisorByDepartmentEnabled = FALSE
    OR (filterIsFilterViewForSupervisorByDepartmentEnabled = TRUE
    AND `IsInvoiceDepartmentInUserDepartments`(filterUserId, Invoice.`InvoiceId`) = TRUE))
    AND (filterUserIsAdministrator = TRUE
    OR @filterCompanyCode = ''
    OR @filterCompanyCode IS NULL
    OR Invoice.`CompanyCode` = @filterCompanyCode)
    AND (@companyCodesExists = 0
    OR Invoice.`CompanyCode` IN (SELECT
        ClientCompany.`CompanyCode`
      FROM UserClientCompanies,
           ClientCompany
      WHERE ClientCompany.`ClientId` = filterClientId
      AND ClientCompany.`Id` = UserClientCompanies.`ClientCompanyId`
      AND UserID = filterUserId))
    AND (@filterUserCanViewConfidentialInvoice = TRUE
    OR (CASE WHEN Vendor.`IsConfidential` IS NULL THEN (CASE WHEN Invoice.`IsConfidential` IS NULL THEN FALSE ELSE Invoice.`IsConfidential` END) ELSE Vendor.`IsConfidential` END) = FALSE);
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInvoiceStatusVendorPortal` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetInvoiceStatusVendorPortal`(IN clientId int,
IN userId char(36),
IN searchTerm varchar(100),
IN invoiceStatus int,
IN invoiceDateFrom date,
IN invoiceDateTo date,
IN scannedDateFrom date,
IN scannedDateTo date,
IN invoiceTotalFrom decimal(18, 2),
IN invoiceTotalTo decimal(18, 2))
BEGIN

  SELECT
    i.InvoiceId,
    i.InvoiceDate,
    i.InvoiceNo,
    i.PONumber,
    i.InvoiceTotal,
    ist.StateName AS InvoiceStatu,
    (SELECT
        cc.Description
      FROM ClientCompany cc
      WHERE cc.ClientId = clientId
      AND cc.CompanyCode = i.CompanyCode) AS CompanyCode,
    i.CheckNumber,
    i.ScannedDate,
    i.ArchiveReason,
    i.Comment,
    i.CheckDate,
    b.Source
  FROM Invoice i

    LEFT OUTER JOIN InvoiceStatus ist
      ON i.ApprovalStatusId = ist.StateId
    LEFT OUTER JOIN Vendor v
      ON i.VendorId = v.VendorId
    LEFT OUTER JOIN Batch b
      ON i.BatchID = b.ID

  WHERE i.ClientId = clientId
  AND i.IsDeleted = 0
  AND (v.UserId = userId)
  AND (searchTerm IS NULL
  OR searchTerm = ''
  OR i.InvoiceNo LIKE CONCAT('', searchTerm, '%'))
  AND (invoiceDateFrom IS NULL
  OR i.InvoiceDate >= invoiceDateFrom)
  AND (invoiceDateTo IS NULL
  OR i.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))
  AND (scannedDateFrom IS NULL
  OR i.ScannedDate >= scannedDateFrom)
  AND (scannedDateTo IS NULL
  OR i.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
  AND (invoiceTotalFrom IS NULL
  OR i.InvoiceTotal >= invoiceTotalFrom)
  AND (invoiceTotalTo IS NULL
  OR i.InvoiceTotal <= invoiceTotalTo)
  AND (invoiceStatus IS NULL
  OR i.ApprovalStatusId = invoiceStatus);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetLineItemSumQuantity` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetLineItemSumQuantity`(
    IN p_invoiceId INT,
    IN p_vendorId INT,
    IN p_clientId INT,
    IN p_itemNumber VARCHAR(255),
    IN p_poNumber VARCHAR(255),
    IN p_poId INT,
    IN p_recievedTransactionId INT,
    IN p_lineNo INT,
    IN p_poLineId INT,
    IN p_matchItemNumberAndPONumber BOOLEAN,
    IN p_matchRecievedTransactionIdAndPONumber BOOLEAN,
    IN p_matchPOLine_GRN_LineNo BOOLEAN,
    IN p_matchLineNo BOOLEAN,
    IN p_considerUpdatedOnPOLines BOOLEAN
)
BEGIN
    SELECT SUM(lid.Quantity) AS SumQuantity
    FROM `LineItemDetail` lid
    JOIN Invoice inv ON lid.InvoiceId = inv.InvoiceId
    WHERE lid.InvoiceId != p_invoiceId
      AND inv.IsPOInvoice = 1
      AND inv.IsDeleted = 0
      AND lid.VendorId = p_vendorId
      AND inv.ApprovalStatusId NOT IN (CAST(6 AS UNSIGNED), CAST(3 AS UNSIGNED), CAST(1 AS UNSIGNED))
      AND inv.InvoiceType = 'Invoice'
      AND inv.ClientId = p_clientId
      AND (
          (p_matchItemNumberAndPONumber AND lid.ProductId = p_itemNumber AND lid.PONumber = p_poNumber) OR
          (!p_matchItemNumberAndPONumber AND lid.POId = p_poId)
      )
      AND (
          (p_matchRecievedTransactionIdAndPONumber AND lid.RecievedTransactionId = p_recievedTransactionId AND lid.PONumber = p_poNumber) OR
          (!p_matchRecievedTransactionIdAndPONumber)
      )
      AND (
          (p_matchPOLine_GRN_LineNo AND lid.RecievedTransactionId = p_recievedTransactionId AND lid.PONumber = p_poNumber AND lid.LineNo = p_lineNo AND lid.POLineId = p_poLineId) OR
          (!p_matchPOLine_GRN_LineNo)
      )
      AND (
          (p_matchLineNo AND lid.PONumber = p_poNumber AND lid.LineNo = p_lineNo) OR
          (!p_matchLineNo)
      )
      AND (
          (p_considerUpdatedOnPOLines AND (lid.UserField7 IS NOT NULL OR lid.UserField6 IS NOT NULL)) OR
          (!p_considerUpdatedOnPOLines)
      );
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetLineItemSumQuantity3` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetLineItemSumQuantity3`(
    IN p_invoiceId INT,
    IN p_vendorId INT,
    IN p_clientId INT,
    IN p_itemNumber VARCHAR(255),
    IN p_poNumber VARCHAR(255),
    IN p_poId INT,
    IN p_recievedTransactionId INT,
    IN p_lineNo INT,
    IN p_poLineId INT,
    IN p_matchItemNumberAndPONumber BOOLEAN,
    IN p_matchRecievedTransactionIdAndPONumber BOOLEAN,
    IN p_matchPOLine_GRN_LineNo BOOLEAN,
    IN p_matchLineNo BOOLEAN,
    IN p_considerUpdatedOnPOLines BOOLEAN
)
BEGIN
    SELECT SUM(lid.Quantity) AS SumQuantity
    FROM `LineItemDetail` lid
    JOIN Invoice inv ON lid.InvoiceId = inv.InvoiceId
    WHERE lid.InvoiceId != p_invoiceId
      AND inv.IsPOInvoice = 1
      AND inv.IsDeleted = 0
      AND lid.VendorId = p_vendorId
      AND inv.ApprovalStatusId NOT IN (1,3,6)
      AND inv.InvoiceType = 'Invoice'
      AND inv.ClientId = p_clientId
      AND (
          (p_matchItemNumberAndPONumber AND lid.ProductId = p_itemNumber AND lid.PONumber = p_poNumber) OR
          (!p_matchItemNumberAndPONumber AND lid.POId = p_poId)
      )
      AND (
          (p_matchRecievedTransactionIdAndPONumber AND lid.RecievedTransactionId = p_recievedTransactionId AND lid.PONumber = p_poNumber) OR
          (!p_matchRecievedTransactionIdAndPONumber)
      )
      AND (
          (p_matchPOLine_GRN_LineNo AND lid.RecievedTransactionId = p_recievedTransactionId AND lid.PONumber = p_poNumber AND lid.LineNo = p_lineNo AND lid.POLineId = p_poLineId) OR
          (!p_matchPOLine_GRN_LineNo)
      )
      AND (
          (p_matchLineNo AND lid.PONumber = p_poNumber AND lid.LineNo = p_lineNo) OR
          (!p_matchLineNo)
      )
      AND (
          (p_considerUpdatedOnPOLines AND (lid.UserField7 IS NOT NULL OR lid.UserField6 IS NOT NULL)) OR
          (!p_considerUpdatedOnPOLines)
      );
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetNewGLCodeId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetNewGLCodeId`()
BEGIN
  SET @ClientId = 5;
  SELECT
    APSHTMLGLCode.SourceGLCodeId AS SourceGLCodeId,
    APSHTMLGLCode.GLCodeId AS NewGLCodeId
  FROM APSMART.`ApprovalHistory` APSmartApprovalHistory
    INNER JOIN GLCode APSHTMLGLCode
      ON APSHTMLGLCode.SourceGLCodeId = APSmartApprovalHistory.GLCodeId
  WHERE APSHTMLGLCode.ClientId = @clientId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetNewInvoiceId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetNewInvoiceId`()
BEGIN
  SET @ClientId = 5;

  SELECT
    APSHTMLInvoice.SourceInvoiceId AS SourceInvoiceId,
    APSHTMLInvoice.InvoiceId AS NewInvoiceId
  FROM APSMART.`ApprovalHistory` APSmartApprovalHistory
    INNER JOIN Invoice APSHTMLInvoice
      ON APSHTMLInvoice.SourceInvoiceId = APSmartApprovalHistory.InvoiceId
  WHERE APSHTMLInvoice.ClientId = @clientId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetNextLevelManagerSP` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetNextLevelManagerSP`(IN deptId int, IN userId char(36))
BEGIN
  SELECT
    aba.*
  FROM ApproverByAmount aba
  WHERE aba.UserId = userId
  AND deptId IN (aba.CostCenters) LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetNoPOOutputDealerBuilt` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetNoPOOutputDealerBuilt`(IN clientId int,
IN userId char(36),
IN invoiceType char(50))
BEGIN
  SELECT
    i.InvoiceId,
    i.InvoiceNo,
    v.VendorNo,
    v.VendorName,
    i.InvoiceTotal,
    i.Comment AS Note,
    DATE_FORMAT(i.ShippingDate, '%Y%m%d') AS ShippingDate,
    DATE_FORMAT(i.InvoiceDate, '%Y/%m/%d') AS InvoiceDate,
    d.`DepartmentName`,
    DATE_FORMAT(i.ScannedDate, '%Y/%m/%d') AS ScannedDate,
    DATE_FORMAT(i.AprovedDate, '%Y/%m/%d') AS ApprovedDate,
    DATE_FORMAT(i.`PaymentDueDate`, '%Y/%m/%d') AS PaymentDueDate,
    i.CompanyCode,
    ah.`ImportDoc` AS Control2,
    gl.GLCodeName AS GLCode,
    gl.Desccription AS Description,
    ah.AmountAppoved AS Amount,
    vl.LocationName
  FROM Invoice i
    LEFT OUTER JOIN Vendor v
      ON v.VendorId = i.VendorId
    LEFT OUTER JOIN `VendorLocation` vl
      ON vl.VendorId = v.VendorId
    LEFT OUTER JOIN ApprovalHistory ah
      ON ah.InvoiceId = i.InvoiceId
    LEFT OUTER JOIN GLCode gl
      ON gl.GLCodeId = ah.GLCodeId
    LEFT OUTER JOIN Department d
      ON d.Id = ah.`DepartmentId`
  WHERE i.ClientId = clientId
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId = 4
  AND i.IsPoInvoice = 0
  ORDER BY i.InvoiceId, i.ScannedDate;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetNoPOOutputHandHAuto` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetNoPOOutputHandHAuto`(IN clientId int,
IN userId char(36),
IN invoiceType char(50),
IN companyCode varchar(50))
BEGIN

  SELECT
    i.InvoiceId,
    i.InvoiceNo,
    v.VendorNo,
    v.VendorName,
    i.InvoiceTotal,
    DATE_FORMAT(i.GLDate, '%Y%m%d') AS ExpenseDate,
    DATE_FORMAT(i.InvoiceDate, '%Y-%m-%d') AS InvoiceDate,
    i.CompanyCode,
    DATE_FORMAT(i.ScannedDate, '%Y-%m-%d') AS ScannedDate,
    DATE_FORMAT(i.AprovedDate, '%Y-%m-%d') AS ApprovedDate,
    DATE_FORMAT(i.`PaymentDueDate`, '%Y-%m-%d') AS PaymentDueDate,
    gl.GLCodeName,
    gl.Desccription AS Description,
    ah.SpecialNote,
    ah.AmountAppoved AS AmountApproved
  FROM Invoice i
    LEFT OUTER JOIN Vendor v
      ON v.VendorId = i.VendorId
    LEFT OUTER JOIN ApprovalHistory ah
      ON ah.InvoiceId = i.InvoiceId
    LEFT OUTER JOIN GLCode gl
      ON gl.GLCodeId = ah.GLCodeId
    LEFT OUTER JOIN Department d
      ON d.Id = ah.`DepartmentId`
    LEFT OUTER JOIN ProjectType p
      ON p.`Id` = ah.`ProjectId`
  WHERE i.ClientId = clientId
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId = 4
  AND i.IsPoInvoice = 0
  AND (companyCode IS NULL
  OR companyCode = ''
  OR i.CompanyCode = companyCode)
  ORDER BY i.InvoiceId, i.ScannedDate;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetNoPOOutputKeenanFarms` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetNoPOOutputKeenanFarms`(IN clientId int,
IN userId char(36),
IN invoiceType char(50))
BEGIN
  SELECT
    i.InvoiceId,
    i.InvoiceNo,
    v.VendorNo,
    v.VendorName,
    i.InvoiceTotal,
    DATE_FORMAT(i.GLDate, '%Y%m%d') AS ExpenseDate,
    DATE_FORMAT(i.InvoiceDate, '%Y/%m/%d') AS InvoiceDate,
    i.CompanyCode,
    d.`DepartmentName`,
    DATE_FORMAT(i.ScannedDate, '%Y/%m/%d') AS ScannedDate,
    DATE_FORMAT(i.AprovedDate, '%Y/%m/%d') AS ApprovedDate,
    DATE_FORMAT(i.`PaymentDueDate`, '%Y/%m/%d') AS PaymentDueDate,
    gl.GLCodeName,
    gl.Desccription AS Description,
    ah.AmountAppoved AS AmountApproved,
    p.ProjectName
  FROM Invoice i
    LEFT OUTER JOIN Vendor v
      ON v.VendorId = i.VendorId
    LEFT OUTER JOIN ApprovalHistory ah
      ON ah.InvoiceId = i.InvoiceId
    LEFT OUTER JOIN GLCode gl
      ON gl.GLCodeId = ah.GLCodeId
    LEFT OUTER JOIN Department d
      ON d.Id = ah.`DepartmentId`
    LEFT OUTER JOIN ProjectType p
      ON p.`Id` = ah.`ProjectId`
  WHERE i.ClientId = clientId
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId = 4
  AND i.IsPoInvoice = 0
  ORDER BY i.InvoiceId, i.ScannedDate;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetNoPOOutputTheragenics` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetNoPOOutputTheragenics`(IN clientId int,
IN userId char(36),
IN invoiceType char(50))
BEGIN

  SELECT
    i.InvoiceId,
    i.InvoiceNo,
    v.VendorNo,
    v.VendorName,
    i.InvoiceTotal,
    DATE_FORMAT(i.GLDate, '%Y%m%d') AS ExpenseDate,
    DATE_FORMAT(i.InvoiceDate, '%Y%m%d') AS InvoiceDate,
    i.CompanyCode,
    d.`DepartmentName`,
    DATE_FORMAT(i.ScannedDate, '%Y%m%d') AS ScannedDate,
    DATE_FORMAT(i.AprovedDate, '%Y%m%d') AS ApprovedDate,
    DATE_FORMAT(i.`PaymentDueDate`, '%Y%m%d') AS PaymentDueDate,
    gl.GLCodeName,
    gl.Desccription AS Description,
    ah.AmountAppoved AS AmountApproved,
    p.ProjectName
  FROM Invoice i
    LEFT OUTER JOIN Vendor v
      ON v.VendorId = i.VendorId
    LEFT OUTER JOIN ApprovalHistory ah
      ON ah.InvoiceId = i.InvoiceId
    LEFT OUTER JOIN GLCode gl
      ON gl.GLCodeId = ah.GLCodeId
    LEFT OUTER JOIN Department d
      ON d.Id = ah.`DepartmentId`
    LEFT OUTER JOIN ProjectType p
      ON p.`Id` = ah.`ProjectId`
  WHERE i.ClientId = clientId
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId = 4
  AND i.IsPoInvoice = 0
  ORDER BY i.InvoiceId, i.ScannedDate;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetPaidInvoiceReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetPaidInvoiceReport`(IN clientId int, IN FromDate date, IN ToDate date)
BEGIN
  SELECT
    i.CompanyCode,
    v.VendorName AS Vendor,
    v.VendorNo,
    v.VendorType,
    i.InvoiceTotal AS Amount
  FROM Invoice i
    INNER JOIN InvoiceHistory ih
      ON ih.InvoiceId = i.InvoiceId
    INNER JOIN Vendor v
      ON v.VendorId = i.VendorId
  WHERE i.ClientId = clientId
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId IN (7, 11, 13)
  AND ih.Action = 'Payment Second Approval'
  AND DATE(ih.ActionDate) BETWEEN DATE(FromDate) AND DATE(ToDate)
  ORDER BY i.CompanyCode;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetPaymentOutputKeenanFarms` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetPaymentOutputKeenanFarms`(IN clientId int,
IN userId char(36),
IN invoiceType char(50))
BEGIN
  SELECT
    i.InvoiceId,
    i.InvoiceNo,
    i.PONumber,
    v.VendorNo,
    v.VendorName,
    i.InvoiceTotal,
    DATE_FORMAT(i.InvoiceDate, '%Y%m%d') AS InvoiceDate,
    i.CompanyCode,
    CONCAT('CHECK', i.InvoiceId) AS CheckNumber,
    DATE_FORMAT(ps.ReceivedDate, '%Y%m%d') AS PaymentDate,
    'CHECK' AS PaymentType
  FROM Invoice i
    LEFT OUTER JOIN Vendor v
      ON v.VendorId = i.VendorId
    LEFT OUTER JOIN ApprovalHistory ah
      ON ah.InvoiceId = i.InvoiceId
    LEFT OUTER JOIN GLCode gl
      ON gl.GLCodeId = ah.GLCodeId
    LEFT OUTER JOIN Department d
      ON d.Id = ah.`DepartmentId`
    LEFT OUTER JOIN ProjectType p
      ON p.`Id` = ah.`ProjectId`
    LEFT OUTER JOIN PaymentStatus ps
      ON ps.InvoiceId = i.InvoiceId
  WHERE i.ClientId = 159
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId = 12
  GROUP BY i.InvoiceId
  ORDER BY ps.ReceivedDate;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetPaymentOutputTheragenics` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetPaymentOutputTheragenics`(IN clientId int,
IN userId char(36),
IN invoiceType char(50))
BEGIN

  SELECT
    i.InvoiceId,
    i.InvoiceNo,
    i.PONumber,
    v.VendorNo,
    v.VendorName,
    i.InvoiceTotal,
    DATE_FORMAT(i.InvoiceDate, '%Y%m%d') AS InvoiceDate,
    i.CompanyCode,
    CONCAT('CHECK', i.InvoiceId) AS CheckNumber,
    DATE_FORMAT(ps.ReceivedDate, '%Y%m%d') AS PaymentDate,
    'CHECK' AS PaymentType
  FROM Invoice i
    LEFT OUTER JOIN Vendor v
      ON v.VendorId = i.VendorId
    LEFT OUTER JOIN ApprovalHistory ah
      ON ah.InvoiceId = i.InvoiceId
    LEFT OUTER JOIN GLCode gl
      ON gl.GLCodeId = ah.GLCodeId
    LEFT OUTER JOIN Department d
      ON d.Id = ah.`DepartmentId`
    LEFT OUTER JOIN ProjectType p
      ON p.`Id` = ah.`ProjectId`
    LEFT OUTER JOIN PaymentStatus ps
      ON ps.InvoiceId = i.InvoiceId
  WHERE i.ClientId = 139
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId = 12
  GROUP BY i.InvoiceId
  ORDER BY ps.ReceivedDate;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetPOForExpService` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetPOForExpService`(IN clientId int, IN externalId varchar (255),
IN importByVendorConfig BIT, 
IN vendorId int, IN poNumber varchar (255), 
IN lineNo varchar (255), IN clientCompanyId int,
IN container varchar (255), IN poType varchar(255))
BEGIN
    select * from PO p where p.ClientId = clientId and p.PODetailId is NULL
    and case when externalId is null
    THEN 
      (
      (case when importByVendorConfig = TRUE and vendorId is not null then p.VendorId = vendorId else true END)
      and p.PONumber = poNumber
      and p.LineNo = lineNo
      and (clientCompanyId is null OR p.ClientCompanyId is null or  p.ClientCompanyId = clientCompanyId )
      and ((container is null and p.Container is null) or (container is not null and p.Container is not null and container = p.Container)) 
      and ((poType is null and p.POType is null) or (poType is not null and p.POType is not null and poType = p.POType)))
    ELSE
      p.ExternalId = externalId end;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetPONumbersByFilterCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetPONumbersByFilterCriteria`(IN ClientId int,
IN CommaSeparatedPoNumbersToMatch nvarchar(65535),
IN POLookupTerm nvarchar(50),
IN POReverseLookupTerm nvarchar(50),
IN POReverseLookupVariance int,
IN POLineItemsQuantityFilterVariance int,
IN InvoiceId int)
BEGIN
  DECLARE myCompanyCode int;
  DECLARE myCompanyCodeGroup int;
  DECLARE OrderQtyFrom int;
  DECLARE OrderQtyTo int;
  DECLARE str nvarchar(65535);
  DECLARE str1 nvarchar(65535);
  DECLARE varStr nvarchar(65535);
  DECLARE DocumentType nvarchar(50);

  SET str = CommaSeparatedPoNumbersToMatch;
  SET myCompanyCode = 0;
  SET myCompanyCodeGroup = NULL;
  DROP TABLE IF EXISTS PoNumbersToMatch;
  CREATE TEMPORARY TABLE PoNumbersToMatch (
    val varchar(50)
  );

  DROP TABLE IF EXISTS CompanyCodesToMatch;
  CREATE TEMPORARY TABLE CompanyCodesToMatch (
    val varchar(250)
  );


  WHILE CHAR_LENGTH(str) > 0
    AND str IS NOT NULL
    AND str <> '' DO
    SET varStr = SUBSTRING_INDEX (str, ',', 1);
    SET str = SUBSTRING(str, LENGTH(varStr) + 2);
    IF varStr <> ''
      AND varStr <> ' '
      AND varStr IS NOT NULL THEN
      INSERT INTO PoNumbersToMatch
        SELECT
          varStr;
    END IF;
  -- select varStr;
  END WHILE;

  IF InvoiceId IS NOT NULL
    OR InvoiceId <> 0 THEN
    SELECT
      Id,
      `Group` INTO myCompanyCode, myCompanyCodeGroup
    FROM ClientCompany cc
    WHERE cc.ClientId = ClientId
    AND cc.CompanyCode = (SELECT
        inv.CompanyCode
      FROM Invoice inv
      WHERE inv.InvoiceId = InvoiceId
      AND inv.ClientId = ClientId) LIMIT 1;

    SELECT
      UserField7
    FROM Invoice
    WHERE Invoice.InvoiceId = InvoiceId INTO DocumentType;
  END IF;

  IF myCompanyCode IS NULL
    OR myCompanyCode = 0 THEN
    SET myCompanyCode = 0;
  END IF;

  IF myCompanyCode <> 0
    AND myCompanyCodeGroup IS NOT NULL THEN

    INSERT INTO CompanyCodesToMatch
      (SELECT
          Id
        FROM ClientCompany
        WHERE ClientCompany.`ClientId` = ClientId
        AND `Group` IS NOT NULL
        AND `Group` = myCompanyCodeGroup);

  END IF;


  SET OrderQtyFrom = 0;
  SET OrderQtyTo = 0;

  IF pOReverseLookupTerm REGEXP '^[0-9]+$' THEN -- IF(ISNUMERIC(@pOReverseLookupTerm) = 1)
    IF POReverseLookupVariance IS NULL THEN
      SET POReverseLookupVariance = 5;
    END IF;
    IF POReverseLookupTerm IS NOT NULL
      AND POLineItemsQuantityFilterVariance IS NOT NULL THEN
      SET POReverseLookupVariance = POLineItemsQuantityFilterVariance;
    END IF;
    SET sql_mode = 'NO_UNSIGNED_SUBTRACTION';
    SET OrderQtyFrom = CAST(pOReverseLookupTerm AS UNSIGNED) - POReverseLookupVariance;
    SET OrderQtyTo = CAST(pOReverseLookupTerm AS UNSIGNED) + POReverseLookupVariance;
  END IF;

  DROP TEMPORARY TABLE IF EXISTS GetPONumbersByFilterCriteriaTempTable;
  CREATE TEMPORARY TABLE IF NOT EXISTS GetPONumbersByFilterCriteriaTempTable AS (SELECT
      *
    FROM PO
    WHERE PO.ClientId = ClientId
    AND (myCompanyCode = 0
    OR (ClientCompanyId = myCompanyCode
    OR ClientCompanyId IN (SELECT
        val
      FROM CompanyCodesToMatch))
    OR PO.`ClientCompanyId` IS NULL)
    AND (UserField1 IS NULL 
    OR UserField1 = '' OR UserField1 = '0'
    OR DocumentType IS NULL
    OR DocumentType = UserField1
    OR DocumentType LIKE CONCAT(UserField1, '|%')
    OR DocumentType LIKE CONCAT('%|', UserField1)
    OR DocumentType LIKE CONCAT('%|', UserField1, '|%'))
    AND (CommaSeparatedPoNumbersToMatch = ''
    OR CommaSeparatedPoNumbersToMatch IS NULL
    OR PONumber IN (SELECT
        *
      FROM PoNumbersToMatch))
    AND (POLookupTerm IS NULL
    OR POLookupTerm = ''
    OR ItemNumber LIKE CONCAT(POLookupTerm, '%')
    OR LineNo LIKE CONCAT(POLookupTerm, '%'))
    AND (POReverseLookupTerm IS NULL
    OR (
    ((POReverseLookupTerm IS NOT NULL
    AND POReverseLookupTerm != ''
    AND (VendorCatNumber LIKE CONCAT(POReverseLookupTerm, '%'))
    OR (GLCode LIKE CONCAT(POReverseLookupTerm, '%')))
    OR (pOReverseLookupTerm IS NOT NULL
    AND pOReverseLookupTerm != ''
    AND pOReverseLookupTerm REGEXP '^[0-9]+$')
    AND CAST(OrderQty AS decimal) >= OrderQtyFrom
    AND CAST(OrderQty AS decimal) <= OrderQtyTo))));


  IF EXISTS (SELECT
        *
      FROM `Client`
        INNER JOIN ClientSpecificConfig
          ON Client.`ClientId` = ClientSpecificConfig.`ClientId`
          AND ClientSpecificConfig.`ClientSpecificConfigType` = 107
      WHERE `Client`.`ClientId` = ClientId) THEN
    UPDATE GetPONumbersByFilterCriteriaTempTable
    SET DepartmentId = (SELECT
        POHeader.`DepartmentId`
      FROM `POHeader`
      WHERE `POHeader`.`ClientId` = ClientId
      AND `POHeader`.`ExternalPONumber` = GetPONumbersByFilterCriteriaTempTable.PONumber LIMIT 1)
    WHERE DepartmentId IS NULL;

  -- SET DepartmentId = (SELECT CASE WHEN PODetail.`DepartmentId` IS NOT NULL THEN PODetail.`DepartmentId` ELSE POHeader.`DepartmentId` END FROM `POHeader` INNER JOIN 
  -- PODetail ON PODetail.`POHeaderId` = POHeader.`POHeaderId`
  -- WHERE `POHeader`.`ClientId` = ClientId AND `POHeader`.`ExternalPONumber` = GetPONumbersByFilterCriteriaTempTable.PONumber AND GetPONumbersByFilterCriteriaTempTable.`LineNo` = PODetail.`LineId`)
  -- WHERE DepartmentId IS NULL;
  END IF;

  SELECT
    *
  FROM GetPONumbersByFilterCriteriaTempTable;

  DROP TABLE IF EXISTS CompanyCodesToMatch;
  DROP TEMPORARY TABLE IF EXISTS GetPONumbersByFilterCriteriaTempTable;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetPONumbersByFilterCriteria_Original` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetPONumbersByFilterCriteria_Original`(IN ClientId int,
IN CommaSeparatedPoNumbersToMatch nvarchar(65535),
IN POLookupTerm nvarchar(50),
IN POReverseLookupTerm nvarchar(50),
IN POReverseLookupVariance int,
IN POLineItemsQuantityFilterVariance int,
IN InvoiceId int,
IN isNextGen int)
BEGIN
  DECLARE myCompanyCode int;
  DECLARE myCompanyCodeGroup int;
  DECLARE OrderQtyFrom int;
  DECLARE OrderQtyTo int;
  DECLARE str nvarchar(65535);
  DECLARE str1 nvarchar(65535);
  DECLARE varStr nvarchar(65535);
  DECLARE DocumentType nvarchar(50);

  SET str = CommaSeparatedPoNumbersToMatch;
  SET myCompanyCode = 0;
  SET myCompanyCodeGroup = NULL;
  -- DROP TABLE IF EXISTS PoNumbersToMatch;
  CREATE TEMPORARY TABLE IF NOT EXISTS PoNumbersToMatch (
    val varchar(50)
  );

  -- DROP TABLE IF EXISTS CompanyCodesToMatch;
  CREATE TEMPORARY TABLE IF NOT EXISTS CompanyCodesToMatch (
    val varchar(250)
  );

  WHILE CHAR_LENGTH(str) > 0
    AND str IS NOT NULL
    AND str <> '' DO
    SET varStr = SUBSTRING_INDEX (str, ',', 1);
    SET str = SUBSTRING(str, LENGTH(varStr) + 2);
    IF varStr <> ''
      AND varStr <> ' '
      AND varStr IS NOT NULL THEN
      INSERT INTO PoNumbersToMatch
        SELECT
          varStr;
    END IF;
  -- select varStr;
  END WHILE;

  IF InvoiceId IS NOT NULL
    OR InvoiceId <> 0 THEN
    SELECT
      Id,
      `Group` INTO myCompanyCode, myCompanyCodeGroup
    FROM ClientCompany cc
    WHERE cc.ClientId = ClientId
    AND cc.CompanyCode = (SELECT
        inv.CompanyCode
      FROM Invoice inv
      WHERE inv.InvoiceId = InvoiceId
      AND inv.ClientId = ClientId) LIMIT 1;

    SELECT
      UserField7
    FROM Invoice
    WHERE Invoice.InvoiceId = InvoiceId INTO DocumentType;
  END IF;

  IF myCompanyCode IS NULL
    OR myCompanyCode = 0 THEN
    SET myCompanyCode = 0;
  END IF;

  IF myCompanyCode <> 0
    AND myCompanyCodeGroup IS NOT NULL THEN

    INSERT INTO CompanyCodesToMatch
      (SELECT
          Id
        FROM ClientCompany
        WHERE ClientCompany.`ClientId` = ClientId
        AND `Group` IS NOT NULL
        AND `Group` = myCompanyCodeGroup);

  END IF;


  SET OrderQtyFrom = 0;
  SET OrderQtyTo = 0;

  IF pOReverseLookupTerm REGEXP '^[0-9]+$' THEN -- IF(ISNUMERIC(@pOReverseLookupTerm) = 1)
    IF POReverseLookupVariance IS NULL THEN
      SET POReverseLookupVariance = 5;
    END IF;
    IF POReverseLookupTerm IS NOT NULL
      AND POLineItemsQuantityFilterVariance IS NOT NULL THEN
      SET POReverseLookupVariance = POLineItemsQuantityFilterVariance;
    END IF;
    SET sql_mode = 'NO_UNSIGNED_SUBTRACTION';
    SET OrderQtyFrom = CAST(pOReverseLookupTerm AS UNSIGNED) - POReverseLookupVariance;
    SET OrderQtyTo = CAST(pOReverseLookupTerm AS UNSIGNED) + POReverseLookupVariance;
  END IF;

  -- DROP TEMPORARY TABLE IF EXISTS GetPONumbersByFilterCriteriaTempTable;
  CREATE TEMPORARY TABLE IF NOT EXISTS GetPONumbersByFilterCriteriaTempTable AS (SELECT
      *
    FROM PO
    WHERE PO.ClientId = ClientId
    AND (myCompanyCode = 0
    OR (ClientCompanyId = myCompanyCode
    OR ClientCompanyId IN (SELECT
        val
      FROM CompanyCodesToMatch))
    OR PO.`ClientCompanyId` IS NULL)
    AND (UserField1 IS NULL
    OR UserField1 = ''
    OR DocumentType IS NULL
    OR DocumentType = UserField1
    OR DocumentType LIKE CONCAT(UserField1, '|%')
    OR DocumentType LIKE CONCAT('%|', UserField1)
    OR DocumentType LIKE CONCAT('%|', UserField1, '|%'))
    AND (CommaSeparatedPoNumbersToMatch = ''
    OR CommaSeparatedPoNumbersToMatch IS NULL
    OR PONumber IN (SELECT
        *
      FROM PoNumbersToMatch))
    AND (POLookupTerm IS NULL
    OR POLookupTerm = ''
    OR ItemNumber LIKE CONCAT(POLookupTerm, '%')
    OR LineNo LIKE CONCAT(POLookupTerm, '%'))
    AND (POReverseLookupTerm IS NULL
    OR (
    ((POReverseLookupTerm IS NOT NULL
    AND POReverseLookupTerm != ''
    AND (VendorCatNumber LIKE CONCAT(POReverseLookupTerm, '%'))
    OR (GLCode LIKE CONCAT(POReverseLookupTerm, '%')))
    OR (pOReverseLookupTerm IS NOT NULL
    AND pOReverseLookupTerm != ''
    AND pOReverseLookupTerm REGEXP '^[0-9]+$')
    AND CAST(OrderQty AS decimal) >= OrderQtyFrom
    AND CAST(OrderQty AS decimal) <= OrderQtyTo))));

  IF EXISTS (SELECT
        *
      FROM `Client`
        INNER JOIN ClientSpecificConfig
          ON Client.`ClientId` = ClientSpecificConfig.`ClientId`
          AND ClientSpecificConfig.`ClientSpecificConfigType` = 107
      WHERE `Client`.`ClientId` = ClientId) THEN
    UPDATE GetPONumbersByFilterCriteriaTempTable
    SET DepartmentId = (SELECT
        POHeader.`DepartmentId`
      FROM `POHeader`
      WHERE `POHeader`.`ClientId` = ClientId
      AND `POHeader`.`ExternalPONumber` = GetPONumbersByFilterCriteriaTempTable.PONumber LIMIT 1)
    WHERE DepartmentId IS NULL;

  -- SET DepartmentId = (SELECT CASE WHEN PODetail.`DepartmentId` IS NOT NULL THEN PODetail.`DepartmentId` ELSE POHeader.`DepartmentId` END FROM `POHeader` INNER JOIN 
  -- PODetail ON PODetail.`POHeaderId` = POHeader.`POHeaderId`
  -- WHERE `POHeader`.`ClientId` = ClientId AND `POHeader`.`ExternalPONumber` = GetPONumbersByFilterCriteriaTempTable.PONumber AND GetPONumbersByFilterCriteriaTempTable.`LineNo` = PODetail.`LineId`)
  -- WHERE DepartmentId IS NULL;
  END IF;


  IF isNextGen = 0 THEN
    SELECT
      *
    FROM GetPONumbersByFilterCriteriaTempTable;

  -- DROP TEMPORARY TABLE IF EXISTS CompanyCodesToMatch;
  -- DROP TEMPORARY TABLE IF EXISTS GetPONumbersByFilterCriteriaTempTable;
  -- 	ELSE
  -- 		DROP TEMPORARY TABLE IF EXISTS CompanyCodesToMatch;
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetPOOutputDealerBuilt` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetPOOutputDealerBuilt`(IN clientId int,
IN userId char(36),
IN invoiceType char(50))
BEGIN
  
SELECT
    i.InvoiceId,
    i.InvoiceNo,
    v.VendorNo,
    v.VendorName,
    v.DefaultGlCodeId AS GLCode,
    i.InvoiceTotal,
    i.Comment AS Note,
    DATE_FORMAT(i.ShippingDate, '%Y/%m/%d') AS ShippingDate,
    DATE_FORMAT(i.InvoiceDate, '%Y/%m/%d') AS InvoiceDate,
    DATE_FORMAT(i.ScannedDate, '%Y/%m/%d') AS ScannedDate,
    DATE_FORMAT(i.AprovedDate, '%Y/%m/%d') AS ApprovedDate,
    DATE_FORMAT(i.`PaymentDueDate`, '%Y/%m/%d') AS PaymentDueDate,
    lid.UserField10 AS Location,
    lid.PONumber,
    lid.`LineNo`,
    lid.ItemNo,
    lid.Quantity,
    lid.UnitPrice,
    lid.UnitOfPurchase AS UOM,
    lid.TotalAmount AS Amount,
    lid.GLCode AS Account,
    lid.Description AS LineDescription,
    lid.UserField9 AS Control,
    lid.UserField8 AS Control2
  FROM Invoice i
    LEFT OUTER JOIN Vendor v
      ON v.VendorId = i.VendorId
    LEFT OUTER JOIN LineItemDetail lid
      ON lid.InvoiceId = i.InvoiceId
  WHERE i.ClientId = 172
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId = 4
  AND i.IsPoInvoice = 1
  AND (lid.UserField8 IS NULL
  OR lid.UserField8 <> 'credit')
  ORDER BY i.InvoiceId, i.ScannedDate;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetPOOutputKeenanFarms` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetPOOutputKeenanFarms`(IN clientId int,
IN userId char(36),
IN invoiceType char(50))
BEGIN
  SELECT
    i.InvoiceId,
    i.InvoiceNo,
    v.VendorNo,
    v.VendorName,
    i.InvoiceTotal,
    DATE_FORMAT(i.GLDate, '%Y%m%d') AS ExpenseDate,
    DATE_FORMAT(i.InvoiceDate, '%Y%m%d') AS InvoiceDate,
    i.CompanyCode,
    DATE_FORMAT(i.ScannedDate, '%Y%m%d') AS ScannedDate,
    DATE_FORMAT(i.AprovedDate, '%Y%m%d') AS ApprovedDate,
    DATE_FORMAT(i.`PaymentDueDate`, '%Y%m%d') AS PaymentDueDate,
    DATE_FORMAT(lid.`DeliveryDate`, '%Y%m%d') AS POReceiptDate,
    lid.PONumber,
    lid.`LineNo`,
    lid.ItemNo,
    lid.Quantity,
    lid.UnitPrice,
    lid.UnitOfPurchase AS UOM,
    lid.GLCode,
    lid.Description,
    d.`DepartmentName`,
    p.`ProjectName`,
    lid.RecievedTransactionId AS GRN
  FROM Invoice i
    LEFT OUTER JOIN Vendor v
      ON v.VendorId = i.VendorId
    LEFT OUTER JOIN LineItemDetail lid
      ON lid.InvoiceId = i.InvoiceId
    LEFT OUTER JOIN Department d
      ON d.Id = lid.DepartmentId
    LEFT OUTER JOIN ProjectType p
      ON p.Id = lid.`ProjectTypeId`
  WHERE i.ClientId = clientId
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId = 4
  AND i.IsPoInvoice = 1
  AND (lid.UserField8 IS NULL
  OR lid.UserField8 <> 'credit')
  ORDER BY i.InvoiceId, i.ScannedDate;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetPOOutputTheragenics` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetPOOutputTheragenics`(IN clientId int,
IN userId char(36),
IN invoiceType char(50))
BEGIN

  SELECT
    i.InvoiceId,
    i.InvoiceNo,
    v.VendorNo,
    v.VendorName,
    i.InvoiceTotal,
    DATE_FORMAT(i.GLDate, '%Y%m%d') AS ExpenseDate,
    DATE_FORMAT(i.InvoiceDate, '%Y%m%d') AS InvoiceDate,
    i.CompanyCode,
    DATE_FORMAT(i.ScannedDate, '%Y%m%d') AS ScannedDate,
    DATE_FORMAT(i.AprovedDate, '%Y%m%d') AS ApprovedDate,
    DATE_FORMAT(i.`PaymentDueDate`, '%Y%m%d') AS PaymentDueDate,
    DATE_FORMAT(lid.`DeliveryDate`, '%Y%m%d') AS POReceiptDate,
    lid.PONumber,
    lid.LineNo AS VendorCatNumber,
    lid.LineNo,
    lid.ItemNo,
    lid.Quantity,
    lid.UnitPrice,
    lid.UnitOfPurchase AS UOM,
    lid.GLCode,
    lid.Description,
    d.`DepartmentName`,
    p.`ProjectName`,
    lid.RecievedTransactionId AS GRN
  FROM Invoice i
    LEFT OUTER JOIN Vendor v
      ON v.VendorId = i.VendorId
    LEFT OUTER JOIN LineItemDetail lid
      ON lid.InvoiceId = i.InvoiceId
    LEFT OUTER JOIN Department d
      ON d.Id = lid.DepartmentId
    LEFT OUTER JOIN ProjectType p
      ON p.Id = lid.`ProjectTypeId`
  WHERE i.ClientId = clientId
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId = 4
  AND i.IsPoInvoice = 1
  AND (lid.UserField8 IS NULL
  OR lid.UserField8 <> 'credit')
  ORDER BY i.InvoiceId, i.ScannedDate;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetPRCycleReportForSEHA` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetPRCycleReportForSEHA`(IN pONo nvarchar(50),
IN fromDate datetime,
IN toDate datetime)
BEGIN
  SELECT
    `POHeader`.`POHeaderId`,
    `POHeader`.`PONumber`,
    IFNULL(`POHeader`.`ExternalPONumber`, '') 'ExternalPONumber',
    IFNULL(`Vendor`.`VendorNo`, '') 'VendorNo',
    IFNULL(`Vendor`.`VendorName`, '') 'VendorName',
    IFNULL(`POHeader`.`Title`, '') 'Title',
    CONCAT(User.`FirstName`, ' ', User.`LastName`) 'Requestor',
    IFNULL(`POHeader`.`CapitalProjectNo`, '') 'CapitalProjectNo',
    IFNULL(`Department`.`DepartmentName`, '') 'DepartmentName',
    IFNULL(`POHeader`.`Remark`, '') 'Remark',
    IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.FromApprovalSubStepId = 961
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.ToApprovalSubStepId = 961
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'SupervisorCycleTime',
    IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.FromApprovalSubStepId = 962
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.ToApprovalSubStepId = 962
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'ManagerCycleTime',
    IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.FromApprovalSubStepId = 969
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.ToApprovalSubStepId = 969
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) +
    IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.FromApprovalSubStepId = 970
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.ToApprovalSubStepId = 970
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'ProjectApprovalCycleTime',
    IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.FromApprovalSubStepId = 963
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.ToApprovalSubStepId = 963
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'VPApprovalCycleTime',
    IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.FromApprovalSubStepId = 964
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.ToApprovalSubStepId = 964
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'TreasurerCycleTime',
    IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.FromApprovalSubStepId = 965
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.ToApprovalSubStepId = 965
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'AccountingCycleTime',
    IFNULL(DATEDIFF(POHeader.`ApprovalDate`, (SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.ToApprovalSubStepId = 966
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'BuyerCycleTime'
  FROM `POHeader`
    LEFT OUTER JOIN Vendor
      ON `POHeader`.`VendorId` = `Vendor`.`VendorId`
    LEFT OUTER JOIN `User`
      ON `User`.`UserId` = `POHeader`.`PurchasedForUserId`
    LEFT OUTER JOIN `Department`
      ON `Department`.`Id` = `POHeader`.`DepartmentId`
  WHERE `POHeader`.ClientId = 65
  AND `POHeader`.`POStatus` IN (5, 7, 8, 9)
  AND `IsDeleted` = FALSE
  AND (fromDate IS NULL
  OR `POHeader`.`CreatedDate` >= fromDate)
  AND (toDate IS NULL
  OR `POHeader`.`CreatedDate` <= toDate)
  AND (pONo IS NULL
  OR pONo = ''
  OR `POHeader`.`PONumber` = pONo)
  ORDER BY `CreatedDate` DESC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSRCycleReportForSEHA` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetSRCycleReportForSEHA`(IN sRNo nvarchar(50),
IN fromDate datetime,
IN toDate datetime)
BEGIN
  SELECT
    StockRequest.StockRequestId,
    StockRequest.SRNumber,
    IFNULL(Item.ItemNo, '') 'ItemNo',
    IFNULL(Item.ItemDescription, '') 'ItemDescription',
    IFNULL(Vendor.VendorNo, '') 'VendorNo',
    IFNULL(Vendor.VendorName, '') 'VendorName',
    CONCAT(User.FirstName, ' ', User.LastName) 'Requestor',
    IFNULL(Department.DepartmentName, '') 'DepartmentName',
    IFNULL(StockRequest.VendorItemDescription, '') 'VendorItemDescription',
    IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM UserSRAssignmentHistory AS UIA
      WHERE UIA.StockRequestId = StockRequest.`StockRequestId`
      AND UIA.FromApprovalSubStepId = 2890
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM UserSRAssignmentHistory AS UIA
      WHERE UIA.StockRequestId = StockRequest.`StockRequestId`
      AND UIA.ToApprovalSubStepId = 2890
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'SupervisorCycleTime',
    IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM UserSRAssignmentHistory AS UIA
      WHERE UIA.StockRequestId = StockRequest.`StockRequestId`
      AND UIA.FromApprovalSubStepId = 2891
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM UserSRAssignmentHistory AS UIA
      WHERE UIA.StockRequestId = StockRequest.`StockRequestId`
      AND UIA.ToApprovalSubStepId = 2891
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'ManagerCycleTime',
    IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM `UserSRAssignmentHistory` AS UIA
      WHERE UIA.StockRequestId = StockRequest.`StockRequestId`
      AND UIA.FromApprovalSubStepId = 2892
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM UserSRAssignmentHistory AS UIA
      WHERE UIA.StockRequestId = StockRequest.StockRequestId
      AND UIA.ToApprovalSubStepId = 2892
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'VPApprovalCycleTime',
    IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM UserSRAssignmentHistory AS UIA
      WHERE UIA.StockRequestId = StockRequest.StockRequestId
      AND UIA.FromApprovalSubStepId = 2893
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM `UserSRAssignmentHistory` AS UIA
      WHERE UIA.StockRequestId = StockRequest.StockRequestId
      AND UIA.ToApprovalSubStepId = 2893
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'TreasurerCycleTime',
    IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM `UserSRAssignmentHistory` AS UIA
      WHERE UIA.StockRequestId = StockRequest.StockRequestId
      AND UIA.FromApprovalSubStepId = 2894
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM UserSRAssignmentHistory AS UIA
      WHERE UIA.StockRequestId = StockRequest.StockRequestId
      AND UIA.ToApprovalSubStepId = 2894
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'AccountingCycleTime',
    IFNULL(DATEDIFF(StockRequest.ApprovalDate, (SELECT
        ApprovedOn
      FROM `UserSRAssignmentHistory` AS UIA
      WHERE UIA.StockRequestId = StockRequest.`StockRequestId`
      AND UIA.ToApprovalSubStepId = 2896
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'BuyerCycleTime',
    IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM `UserSRAssignmentHistory` AS UIA
      WHERE UIA.StockRequestId = StockRequest.StockRequestId
      AND UIA.FromApprovalSubStepId = 2897
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM UserSRAssignmentHistory AS UIA
      WHERE UIA.StockRequestId = StockRequest.StockRequestId
      AND UIA.ToApprovalSubStepId = 2897
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'StoresCompletion',
          IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM `UserSRAssignmentHistory` AS UIA
      WHERE UIA.StockRequestId = StockRequest.StockRequestId
      AND UIA.FromApprovalSubStepId = 2898
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM UserSRAssignmentHistory AS UIA
      WHERE UIA.StockRequestId = StockRequest.StockRequestId
      AND UIA.ToApprovalSubStepId = 2898
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'PurchasingFinalApproval'
  FROM StockRequest
    LEFT OUTER JOIN Item
      ON StockRequest.`ItemId` = Item.`ItemId`
     LEFT OUTER JOIN Vendor
      ON `StockRequest`.`VendorId` = `Vendor`.`VendorId`
    LEFT OUTER JOIN `User`
      ON `User`.`UserId` = `StockRequest`.`PurchasedForUserId`
    LEFT OUTER JOIN `Department`
      ON `Department`.`Id` = `StockRequest`.`DepartmentId`
  WHERE `StockRequest`.ClientId = 65
  AND `StockRequest`.`SRStatus` IN (5, 7, 8, 9)
  AND `IsDeleted` = FALSE
  AND (fromDate IS NULL
  OR `StockRequest`.`CreatedDate` >= fromDate)
  AND (toDate IS NULL
  OR `StockRequest`.`CreatedDate` <= toDate)
  AND (sRNo IS NULL
  OR sRNo = ''
  OR `StockRequest`.`SRNumber` = sRNo)
  ORDER BY `CreatedDate` DESC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetTurnAroundTimeReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetTurnAroundTimeReport`(IN clientId int,
IN reportMonth int,
IN reportYear int,
IN reportAutoApproved bool)
BEGIN

  DECLARE fromDate date;
  DECLARE toDate date;

  SET fromDate = CONCAT(reportYear, '-', reportMonth, '-01');
  SET toDate = DATE_ADD(fromDate, INTERVAL 1 MONTH);

  CREATE TEMPORARY TABLE TurnAroundReport
  SELECT
    DATE(Invoice.`ScannedDate`) ReportDate,
    COUNT(*) ScannedCount,
    COUNT(IF(DATEDIFF(CASE WHEN (Invoice.`AcceptedDate` IS NOT NULL AND
        Invoice.`AcceptedDate` < (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1)) OR
        (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1) IS NULL THEN Invoice.`AcceptedDate` ELSE (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1) END, `Invoice`.`ScannedDate`) < 30, 1, NULL)) CountLessThan30,

    -- GROUP_CONCAT(IF(DATEDIFF((SELECT InvoiceHistory.`ActionDate` FROM InvoiceHistory WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId` AND 

    COUNT(IF(DATEDIFF(CASE WHEN (Invoice.`AcceptedDate` IS NOT NULL AND
        Invoice.`AcceptedDate` < (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1)) OR
        (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1) IS NULL THEN Invoice.`AcceptedDate` ELSE (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1) END, `Invoice`.`ScannedDate`) BETWEEN 30 AND 45, 1, NULL)) CountLessThan45,

    GROUP_CONCAT(IF(DATEDIFF(CASE WHEN (Invoice.`AcceptedDate` IS NOT NULL AND
        Invoice.`AcceptedDate` < (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1)) OR
        (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1) IS NULL THEN Invoice.`AcceptedDate` ELSE (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1) END, `Invoice`.`ScannedDate`) BETWEEN 30 AND 45, Invoice.`InvoiceNo`, NULL) SEPARATOR ';') InvoiceNosLessThan45,

    COUNT(IF(DATEDIFF(CASE WHEN (Invoice.`AcceptedDate` IS NOT NULL AND
        Invoice.`AcceptedDate` < (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1)) OR
        (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1) IS NULL THEN Invoice.`AcceptedDate` ELSE (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1) END, `Invoice`.`ScannedDate`) > 45, 1, NULL)) CountGreaterThan45,

    GROUP_CONCAT(IF(DATEDIFF(CASE WHEN (Invoice.`AcceptedDate` IS NOT NULL AND
        Invoice.`AcceptedDate` < (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1)) OR
        (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1) IS NULL THEN Invoice.`AcceptedDate` ELSE (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1) END, `Invoice`.`ScannedDate`) > 45, `Invoice`.`InvoiceNo`, NULL) SEPARATOR ';') InvoiceNosGreaterThan45


  FROM Invoice
  WHERE Invoice.`ClientId` = clientId
  AND Invoice.`ScannedDate` >= fromDate
  AND Invoice.`ScannedDate` < toDate
  AND Invoice.IsDeleted = 0
  GROUP BY DATE(Invoice.`ScannedDate`);

  SELECT
    *
  FROM TurnAroundReport;
  DROP TEMPORARY TABLE TurnAroundReport;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUnprocessedInnvoice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetUnprocessedInnvoice`(
  IN client_id INT,
  IN date_from DATE,
  IN date_to DATE
)
BEGIN
  SELECT 
    c.CustomerName,
    i.ClientId,
    i.IsPaused,
    i.IsPOInvoice,
    i.InvoiceId,
    i.ScannedDate
  FROM 
    Invoice i
  INNER JOIN 
    Client c ON i.ClientId = c.ClientId
  WHERE 
    (client_id IS NULL OR i.ClientId = client_id)
    AND (date_from IS NULL OR i.ScannedDate >= date_from)
    AND (date_to IS NULL OR i.ScannedDate <= date_to)
    AND i.ApprovalStatusId = 1
    AND !i.IsDeleted
    AND !i.IsPaused;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUserByUserId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetUserByUserId`(IN userId char(36))
BEGIN
  SELECT
    *
  FROM User u
  WHERE u.UserId = userId LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUserCompanies` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetUserCompanies`(IN clientId int, IN userId char(36), IN companyCode nvarchar(500))
BEGIN
  SELECT
    u.UserId,
    ucc.ClientCompanyId,
    cc.CompanyCode,
    cc.Description,
    CASE WHEN ucc.AllowPaymentApproval IS NULL THEN 1 ELSE ucc.AllowPaymentApproval END AS APA,
    cc.UserField1,
    u.Email
  FROM User u
    INNER JOIN UserClientCompanies ucc
      ON ucc.UserId = u.UserId
    INNER JOIN ClientCompany cc
      ON cc.Id = ucc.ClientCompanyId
  WHERE u.ClientId = clientId
  AND u.userId = userId
  AND (companyCode = ''
  OR companyCode IS NULL
  OR companyCode = 'null'
  OR cc.CompanyCode = companyCode);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUserInvoiceHistoriesByClient` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetUserInvoiceHistoriesByClient`(IN p_ClientId int,
IN p_YearDateFrom datetime,
IN p_DateTo datetime,
IN p_ApplicableInvoiceStatuses varchar(1000))
BEGIN
  SET @StartDateOfMonth = DATE_FORMAT(p_DateTo, '%Y-%m-01');
  SET @TotalMonths = TIMESTAMPDIFF(MONTH, p_YearDateFrom, p_DateTo);
  SELECT
    q1.ApproverUserId AS ActorId,
    q1.NumberOfInvoicesApproved AS noofInvoices,
    q1.AverageApprovalTimeInSeconds AS Average,
    q1.YearlyMaximumDays AS MaximumDays,
    q2.NumberOfInvoicesApproved AS MonthlyTotal,
    q2.AverageApprovalTimeInSeconds AS MonthlyAverage,
    q2.YearlyMaximumDays AS MonthlyMaximumDays
  FROM (SELECT DISTINCT
      uih.FromApprovalSubStepUserId AS ApproverUserId,
      COUNT(DISTINCT uih.InvoiceId) AS NumberOfInvoicesApproved,
      MAX(DATEDIFF(uih.ApprovedOn, uih2.ApprovedOn)) AS YearlyMaximumDays,
      SUM(DATEDIFF(uih.ApprovedOn, uih2.ApprovedOn)) / COUNT(DISTINCT uih.InvoiceId) AS AverageApprovalTimeInSeconds
    FROM UserInvoiceAssignmentHistory AS uih
      INNER JOIN UserInvoiceAssignmentHistory AS uih2
        ON uih.InvoiceId = uih2.InvoiceId
      INNER JOIN Invoice AS i
        ON uih.InvoiceId = i.InvoiceId
    WHERE uih2.ApprovedOn >= @StartDateOfMonth
    AND uih2.ApprovedOn <= p_DateTo
    AND FIND_IN_SET(i.ApprovalStatusId, p_ApplicableInvoiceStatuses) > 0
    AND uih.ToApprovalSubStepUserId IS NOT NULL
    AND uih.FromApprovalSubStepUserId = uih2.ToApprovalSubStepUserId
    AND i.ClientId = p_ClientId
    AND uih.InvoiceId = uih2.InvoiceId
    AND uih.AmountApproved IS NOT NULL
    GROUP BY uih.FromApprovalSubStepUserId) AS q1
    LEFT JOIN (SELECT DISTINCT
        uih.FromApprovalSubStepUserId AS ApproverUserId,
        COUNT(DISTINCT uih.InvoiceId) AS NumberOfInvoicesApproved,
        MAX(DATEDIFF(uih.ApprovedOn, uih2.ApprovedOn)) AS YearlyMaximumDays,
        SUM(DATEDIFF(uih.ApprovedOn, uih2.ApprovedOn)) / COUNT(DISTINCT uih.InvoiceId) / @TotalMonths AS AverageApprovalTimeInSeconds
      FROM UserInvoiceAssignmentHistory AS uih
        INNER JOIN UserInvoiceAssignmentHistory AS uih2
          ON uih.InvoiceId = uih2.InvoiceId
        INNER JOIN Invoice AS i
          ON uih.InvoiceId = i.InvoiceId
      WHERE uih2.ApprovedOn >= p_YearDateFrom
      AND uih2.ApprovedOn <= p_DateTo
      AND FIND_IN_SET(i.ApprovalStatusId, p_ApplicableInvoiceStatuses) > 0
      AND uih.ToApprovalSubStepUserId IS NOT NULL
      AND uih.FromApprovalSubStepUserId = uih2.ToApprovalSubStepUserId
      AND i.ClientId = p_ClientId
      AND uih.InvoiceId = uih2.InvoiceId
      AND uih.AmountApproved IS NOT NULL
      GROUP BY uih.FromApprovalSubStepUserId) AS q2
      ON q1.ApproverUserId = q2.ApproverUserId;



END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUserInvoiceHistoriesByClient1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetUserInvoiceHistoriesByClient1`(IN p_ClientId int,
IN p_YearDateFrom datetime,
IN p_DateTo datetime,
IN p_ApplicableInvoiceStatuses varchar(1000))
BEGIN
  SET @StartDateOfMonth = DATE_FORMAT(p_DateTo, '%Y-%m-01');
  SET @TotalMonths = TIMESTAMPDIFF(MONTH, p_YearDateFrom, p_DateTo);

  -- Monthly Query
  SELECT
    'Monthly' AS DateRangeType,
    UserInvoiceAssignmentHistoryId1,
    toApprovalSubStepUserId,
    noofInvoices,
    MaximumDays,
    Average,
    MonthlyAverage,
    UserInvoiceAssignmentHistoryId2,
    fromApprovalSubStepUserId,
    ApprovedDate
  FROM (SELECT
      d1.UserInvoiceAssignmentHistoryId AS UserInvoiceAssignmentHistoryId1,
      d1.ToApprovalSubStepUserId AS toApprovalSubStepUserId,
      COUNT(DISTINCT a1.InvoiceId) AS noofInvoices,
      MAX(DATEDIFF(a1.ApprovedDate, d1.AssignDate)) AS MaximumDays,
      SUM(DATEDIFF(a1.ApprovedDate, d1.AssignDate)) / COUNT(DISTINCT a1.InvoiceId) AS Average,
      SUM(DATEDIFF(a1.ApprovedDate, d1.AssignDate)) / COUNT(DISTINCT a1.InvoiceId) / @TotalMonths AS MonthlyAverage,
      d1.AssignDate,
      a1.UserInvoiceAssignmentHistoryId AS UserInvoiceAssignmentHistoryId2,
      a1.FromApprovalSubStepUserId AS fromApprovalSubStepUserId,
      a1.ApprovedDate
    FROM (SELECT
             d1.UserInvoiceAssignmentHistoryId,
             d1.InvoiceId,
             d1.ToApprovalSubStepUserId,
             d1.AmountApproved, -- Assuming AmountApproved is the correct field
             d1.ApprovedOn AS AssignDate,
             @rn1 := IF(@prev1 = d1.ToApprovalSubStepUserId, @rn1 + 1, 1) AS rn1,
             @prev1 := d1.ToApprovalSubStepUserId
           FROM UserInvoiceAssignmentHistory AS d1
             INNER JOIN Invoice AS i
               ON d1.InvoiceId = i.InvoiceId
           WHERE d1.ToApprovalSubStepUserId IS NOT NULL
           AND FIND_IN_SET(i.ApprovalStatusId, p_ApplicableInvoiceStatuses) > 0
           AND d1.ApprovedOn >= @StartDateOfMonth
           AND d1.ApprovedOn <= p_DateTo
           AND i.ClientId = 98
           ORDER BY d1.ToApprovalSubStepUserId, d1.ApprovedOn) AS d1,
         (SELECT
             @rn1 := 0,
             @prev1 := NULL) var1
           JOIN (SELECT
               a1.UserInvoiceAssignmentHistoryId,
               a1.InvoiceId,
               a1.FromApprovalSubStepUserId,
               a1.AmountApproved, -- Assuming AmountApproved is the correct field
               a1.ApprovedOn AS ApprovedDate,
               @rn2 := IF(@prev2 = a1.FromApprovalSubStepUserId, @rn2 + 1, 1) AS rn2,
               @prev2 := a1.FromApprovalSubStepUserId
             FROM UserInvoiceAssignmentHistory AS a1
               INNER JOIN Invoice AS i
                 ON a1.InvoiceId = i.InvoiceId
             WHERE a1.FromApprovalSubStepUserId IS NOT NULL
             AND FIND_IN_SET(i.ApprovalStatusId, p_ApplicableInvoiceStatuses) > 0
             AND a1.ApprovedOn >= @StartDateOfMonth
             AND a1.ApprovedOn <= p_DateTo
             AND i.ClientId = 98
             ORDER BY a1.FromApprovalSubStepUserId, a1.ApprovedOn) AS a1,
         (SELECT
             @rn2 := 0,
             @prev2 := NULL) var2
    WHERE d1.AssignDate < a1.ApprovedDate
    GROUP BY a1.FromApprovalSubStepUserId) AS MonthlyData

  UNION

  -- Yearly Query (corrected)
  SELECT
    'Yearly' AS DateRangeType,
    UserInvoiceAssignmentHistoryId1,
    toApprovalSubStepUserId,
    noofInvoices,
    MaximumDays,
    Average,
    MonthlyAverage,
    AssignDate,
    UserInvoiceAssignmentHistoryId2,
    fromApprovalSubStepUserId,
    ApprovedDate
  FROM (SELECT
      d1.UserInvoiceAssignmentHistoryId AS UserInvoiceAssignmentHistoryId1,
      d1.ToApprovalSubStepUserId AS toApprovalSubStepUserId,
      COUNT(DISTINCT a1.InvoiceId) AS noofInvoices,
      MAX(DATEDIFF(a1.ApprovedDate, d1.AssignDate)) AS MaximumDays,
      SUM(DATEDIFF(a1.ApprovedDate, d1.AssignDate)) / COUNT(DISTINCT a1.InvoiceId) AS Average,
      SUM(DATEDIFF(a1.ApprovedDate, d1.AssignDate)) / COUNT(DISTINCT a1.InvoiceId) / @TotalMonths AS MonthlyAverage,
      d1.AssignDate,
      a1.UserInvoiceAssignmentHistoryId AS UserInvoiceAssignmentHistoryId2,
      a1.FromApprovalSubStepUserId AS fromApprovalSubStepUserId,
      a1.ApprovedDate
    FROM (SELECT
             d1.UserInvoiceAssignmentHistoryId,
             d1.InvoiceId,
             d1.ToApprovalSubStepUserId,
             d1.AmountApproved, -- Assuming AmountApproved is the correct field
             d1.ApprovedOn AS AssignDate,
             @rn1 := IF(@prev1 = d1.ToApprovalSubStepUserId, @rn1 + 1, 1) AS rn1,
             @prev1 := d1.ToApprovalSubStepUserId
           FROM UserInvoiceAssignmentHistory AS d1
             INNER JOIN Invoice AS i
               ON d1.InvoiceId = i.InvoiceId
           WHERE d1.ToApprovalSubStepUserId IS NOT NULL
           AND FIND_IN_SET(i.ApprovalStatusId, p_ApplicableInvoiceStatuses) > 0
           AND d1.ApprovedOn >= p_YearDateFrom
           AND d1.ApprovedOn <= p_DateTo
           AND i.ClientId = 98
           ORDER BY d1.ToApprovalSubStepUserId, d1.ApprovedOn) AS d1,
         (SELECT
             @rn1 := 0,
             @prev1 := NULL) var1
           JOIN (SELECT
               a1.UserInvoiceAssignmentHistoryId,
               a1.InvoiceId,
               a1.FromApprovalSubStepUserId,
               a1.AmountApproved, -- Assuming AmountApproved is the correct field
               a1.ApprovedOn AS ApprovedDate,
               @rn2 := IF(@prev2 = a1.FromApprovalSubStepUserId, @rn2 + 1, 1) AS rn2,
               @prev2 := a1.FromApprovalSubStepUserId
             FROM UserInvoiceAssignmentHistory AS a1
               INNER JOIN Invoice AS i
                 ON a1.InvoiceId = i.InvoiceId
             WHERE a1.FromApprovalSubStepUserId IS NOT NULL
             AND FIND_IN_SET(i.ApprovalStatusId, p_ApplicableInvoiceStatuses) > 0
             AND a1.ApprovedOn >= p_YearDateFrom
             AND a1.ApprovedOn <= p_DateTo
             AND i.ClientId = 98
             ORDER BY a1.FromApprovalSubStepUserId, a1.ApprovedOn) AS a1,
         (SELECT
             @rn2 := 0,
             @prev2 := NULL) var2
    WHERE d1.AssignDate < a1.ApprovedDate
    GROUP BY a1.FromApprovalSubStepUserId) AS YearlyData

  ORDER BY toApprovalSubStepUserId,
  DateRangeType,
  AssignDate,
  fromApprovalSubStepUserId,
  ApprovedDate;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUserRolesByUserId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetUserRolesByUserId`(IN userId char(36))
BEGIN
  SELECT
    r.*
  FROM UserRoles ur,
       Role r
  WHERE ur.UserId = userId
  AND ur.RoleId = r.RoleId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVendorByName` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetVendorByName`(IN VendorName nvarchar(50),
IN ClientId int)
BEGIN
  DECLARE VendorCount int;
  SET VendorCount = (SELECT
      COUNT(*)
    FROM Vendor v
    WHERE v.VendorName LIKE (VendorName + '%')
    AND v.ClientID = ClientId);
  IF VendorCount = 1 THEN
    SELECT
      VendorNo AS VendorNumber,
      VendorName
    FROM Vendor
    WHERE VendorName LIKE (VendorName + '%')
    AND ClientID = ClientId;
  ELSE
    SELECT
      '-1',
      'Vendor Not Found or Duplicate';
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVendorForExpService` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetVendorForExpService`(
IN clientId int, 
IN vendorNo varchar (255),
IN externalId varchar (255),
IN disablecompanycheckforVendorimportpoywhenloadingpoexportservice BIT, 
IN clientCompanyId int
)
BEGIN
  select * from Vendor v
  where v.clientId = clientId and
  case WHEN externalId is not null 
    then
      v.ExternalId = externalId
    ELSE
      (v.VendorNo = vendorNo and (disablecompanycheckforVendorimportpoywhenloadingpoexportservice = TRUE 
      or clientCompanyId is null or v.ClientCompanyId = ClientCompanyId))
  END
  and v.IsActive = 1 LIMIT 1;
       
  /*
  
                      Vendor CC = DbContext.Vendors.Where(w => w.ClientId == clientId && (!string.IsNullOrEmpty(po.VendorExternalId) 
                      ? po.VendorExternalId.Equals(w.ExternalId) : (w.VendorNo.ToLower().Trim().Equals(po.VendorNumber.ToLower().Trim()) 
                      && (disablecompanycheckforVendorimportpoywhenloadingpoexportservice || 
                      clientCompanyId == null || w.ClientCompanyId == clientCompanyId))) && w.IsActive == true).FirstOrDefault();
  */
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVendorInvoiceByDateReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetVendorInvoiceByDateReport`(IN clientId int,
IN fromDate date,
IN toDate date,
IN dateRange varchar(255),
IN vendorNameNo varchar(255))
BEGIN
  SELECT
    Invoice.`InvoiceId`,
    ItemLineItemDetail.ItemLineItemDetailId,
    Invoice.InvoiceNo,
    DATE_FORMAT(`Invoice`.`InvoiceDate`, '%m/%d/%Y') InvoiceDate,
    DATE_FORMAT(Invoice.`ScannedDate`, '%m/%d/%Y') InvoiceScannedDate,
    DATE_FORMAT(Invoice.`ShippingDate`, '%m/%d/%Y') InvoiceDeliveryDate,
    Vendor.`VendorName`,
    Vendor.`VendorNo` VendorNumber,
    CustomerLocation.`LocationName` CustomerLocationName,
    CustomerLocation.`LocationNumber` CustomerLocationNumber,
    CustomerLocation.`DBCode`,
    Item.`ItemNo` ItemNumber,
    Item.`ItemDescription` ItemDescription,
    (CASE WHEN ItemLineItemDetail.`CustomerPrice` IS NOT NULL THEN ItemLineItemDetail.`CustomerPrice` ELSE (SELECT
            (CASE WHEN `CustomerItemPrice`.`Price` IS NOT NULL THEN `CustomerItemPrice`.`Price` ELSE 0.0 END)
          FROM `CustomerItemPrice`
          WHERE CustomerItemPrice.`ItemID` = Item.`ItemId`
          AND CustomerItemPrice.`CustomerID` = CustomerLocationItemCustomerLocationCustomer.CustomerId
          AND CustomerLocationItemCustomerLocationCustomer.IsDeleted = FALSE LIMIT 1) END) CustomerPrice,
    (CASE WHEN ItemLineItemDetail.`UnitPrice` IS NOT NULL THEN ItemLineItemDetail.`UnitPrice` ELSE 0 END) VendorPrice,
    (SELECT
        `VendorItemContract`.`VendorPrice`
      FROM `VendorItemContract`
      WHERE VendorItemContract.`ItemId` = CustomerLocationItem.`ItemId`
      AND `VendorItemContract`.`VendorId` = `Vendor`.`VendorId`
      AND (`VendorItemContract`.`CustomerLocationId` IS NULL
      OR VendorItemContract.`CustomerLocationId` = Invoice.`CustomerLocationId`)
      ORDER BY (CASE WHEN VendorItemContract.CustomerLocationId IS NOT NULL THEN `VendorItemContract`.`CustomerLocationId` ELSE 0 END) DESC LIMIT 1) VendorContractedPrice,
    State.`StateNameShort` 'State',
    Address.ZipCode,
    (CASE WHEN `ItemLineItemDetail`.`Quantity` IS NOT NULL THEN `ItemLineItemDetail`.`Quantity` ELSE 0 END) 'VendorQty',
    (CASE WHEN CustomerLocation.`IsActive` IS NULL THEN 'N/K' ELSE (CASE WHEN CustomerLocation.`IsActive` = TRUE THEN 'Active' ELSE 'Disabled' END) END) 'CustomerLocationDisabled',
    CONCAT(Address.`Address1`, ' ', Address.`CityName`, ' ', State.`StateNameShort`, ' ', Address.`ZipCode`) CustomerAddress,
    (CASE WHEN Invoice.`ApproverId` = '00000000-0000-0000-0000-000000000000' THEN 'System' ELSE CONCAT(`User`.`LastName`, ', ', `User`.`FirstName`) END) ApprovedBy,
    InvoiceStatus.`StateName` 'InvoiceStatus',
    Invoice.`DeliveryNumber`,
    DATE_FORMAT(Invoice.`AprovedDate`, '%m/%d/%Y') ApprovedDate,
    Invoice.`Tax`,
    Customer.`CustomerNo` 'CustomerGroupCode'
  FROM Invoice
    INNER JOIN `ItemLineItemDetail`
      ON Invoice.`InvoiceId` = `ItemLineItemDetail`.`InvoiceId`
    LEFT OUTER JOIN `CustomerLocationItem`
      ON ItemLineItemDetail.`CustomerLocationItemId` = CustomerLocationItem.`CustomerLocationItemId`
    LEFT OUTER JOIN `CustomerLocation` CustomerLocationItemCustomerLocation
      ON `CustomerLocationItem`.`CustomerLocationId` = `CustomerLocationItemCustomerLocation`.`CustomerLocationId`
    LEFT OUTER JOIN `Customer` CustomerLocationItemCustomerLocationCustomer
      ON `CustomerLocationItemCustomerLocation`.`CustomerId` = `CustomerLocationItemCustomerLocationCustomer`.`CustomerId`
    LEFT OUTER JOIN `Item`
      ON CustomerLocationItem.`ItemId` = Item.`ItemId`
    LEFT OUTER JOIN `CustomerLocation`
      ON Invoice.CustomerLocationId = CustomerLocation.`CustomerLocationId`
    LEFT OUTER JOIN `Address`
      ON CustomerLocation.`AddressId` = Address.`AddressId`
    LEFT OUTER JOIN `State`
      ON Address.`StateId` = State.`StateId`
    LEFT OUTER JOIN `Vendor`
      ON Invoice.VendorId = Vendor.`VendorId`
    LEFT OUTER JOIN `Customer`
      ON CustomerLocation.`CustomerId` = Customer.`CustomerId`
    LEFT OUTER JOIN `User`
      ON Invoice.`ApproverId` = `User`.`UserId`
    INNER JOIN `InvoiceStatus`
      ON Invoice.`ApprovalStatusId` = InvoiceStatus.`StateId`
  WHERE Invoice.ClientId = clientId
  AND Invoice.ApprovalStatusId IN (5, 7)
  AND Invoice.InvoiceType = 'Invoice'
  AND ((dateRange = 'InvoiceDate'
  AND Invoice.InvoiceDate >= fromDate
  AND Invoice.InvoiceDate < toDate)
  OR (dateRange = 'ScanDate'
  AND Invoice.ScannedDate >= fromDate
  AND Invoice.ScannedDate < toDate)
  OR (dateRange = 'DeliveryDate'
  AND Invoice.ShippingDate >= fromDate
  AND Invoice.ShippingDate < toDate))
  AND Invoice.IsDeleted = FALSE
  AND Invoice.IsPaused = FALSE
  AND (vendorNameNo IS NULL
  OR vendorNameNo = ''
  OR Customer.`CustomerNo` LIKE CONCAT('%', vendorNameNo)
  OR `CustomerLocation`.`LocationName` LIKE CONCAT('%', vendorNameNo)
  OR `CustomerLocation`.`LocationNumber` LIKE CONCAT('%', vendorNameNo)
  OR Vendor.`VendorNo` LIKE CONCAT('%', vendorNameNo)
  OR Vendor.`VendorName` LIKE CONCAT('%', vendorNameNo));

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVendorsForExpService` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetVendorsForExpService`(
IN clientId int, 
IN vendorNo varchar (255),
IN externalId varchar (255),
IN ignoreCompanyCodeWhenImportingVendors BIT, 
IN considerCompanyCode BIT, 
IN clientCompanyId int
)
BEGIN
select * from Vendor v where 
v.clientId = clientId and
case when externalId is null 
then 
  (v.VendorNo = vendorNo and (ignoreCompanyCodeWhenImportingVendors = TRUE or v.ClientCompanyId = clientCompanyId))
else 
  (case when considerCompanyCode = TRUE then (v.ClientCompanyId is null or v.ClientCompanyId = clientCompanyId) else true END) END
and (externalId is null or v.ExternalId = externalId);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVolumeReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetVolumeReport`(IN clientId int,
IN reportYear int,
IN userIds nvarchar(65535))
BEGIN
  DECLARE fromYear varchar(4);
  DECLARE toYear varchar(4);
  DECLARE varStr nvarchar(65535);
  DECLARE nOUsersSelected bool;
  SET nOUsersSelected = (userIds IS NULL OR userIds = '');

  CREATE TEMPORARY TABLE UserIdsToMatch (
    val varchar(36)
  );

  WHILE userIds IS NOT NULL
    AND CHAR_LENGTH(userIds) > 0
    AND userIds <> '' DO
    SET varStr = SUBSTRING_INDEX (userIds, ',', 1);
    SET userIds = SUBSTRING(userIds, LENGTH(varStr) + 2);
    IF varStr <> ''
      AND varStr <> ' '
      AND varStr IS NOT NULL THEN
      INSERT INTO UserIdsToMatch
        SELECT
          varStr;
    END IF;
  -- select varStr;
  END WHILE;

  SET fromYear = reportYear;
  SET toYear = reportYear + 1;

  IF clientId = 27 THEN
    SELECT
      MONTH(Invoice.`AprovedDate`) ApprovalMonth,
      `ApproverId`,
      CASE WHEN CONCAT(`User`.`FirstName`, ' ', `User`.`LastName`) IS NOT NULL THEN CONCAT(`User`.`FirstName`, ' ', `User`.`LastName`) ELSE 'System (Auto Approval)' END FullName,
      COUNT(*) ApprovedCount
    FROM Invoice
      INNER JOIN `User`
        ON Invoice.`ApproverId` = `User`.`UserId`
    WHERE Invoice.`ClientId` = clientId
    AND Invoice.`AprovedDate` >= DATE(CONCAT(fromYear, '-01-01'))
    AND Invoice.`AprovedDate` < DATE(CONCAT(toYear, '-01-01'))
    AND (nOUsersSelected = 1
    OR Invoice.ApproverId IN (SELECT
        *
      FROM UserIdsToMatch))
    GROUP BY MONTH(Invoice.`AprovedDate`),
             `ApproverId`,
             `User`.`FirstName`,
             `User`.`LastName`
    UNION
    SELECT
      MONTH(ScannedDate) ApprovalMonth,
      '00000000-0000-0000-0000-000000000001' ApproverId,
      'Others (Deleted/Not an Invoice)' FullName,
      COUNT(*) ApprovedCount
    FROM Invoice
    WHERE nOUsersSelected = 1
    AND Invoice.`ClientId` = 27
    AND Invoice.`ScannedDate` >= DATE(CONCAT(fromYear, '-01-01'))
    AND Invoice.`ScannedDate` < DATE(CONCAT(toYear, '-01-01'))
    AND (IsDeleted = TRUE
    OR InvoiceType <> 'Invoice'
    OR ApprovalStatusId IN (1, 3, 6))
    AND ApproverId IS NULL
    GROUP BY MONTH(ScannedDate);
  ELSE
    SELECT
      MONTH(`InvoiceHistory`.`ActionDate`) ApprovalMonth,
      User.`UserId` AS `ApproverId`,
      CASE WHEN CONCAT(`User`.`FirstName`, ' ', `User`.`LastName`) IS NOT NULL THEN CONCAT(`User`.`FirstName`, ' ', `User`.`LastName`) ELSE 'System (Auto Approval)' END FullName,
      COUNT(*) ApprovedCount
    FROM Invoice
      INNER JOIN InvoiceHistory
        ON Invoice.`InvoiceId` = InvoiceHistory.`InvoiceId`
        AND `InvoiceHistory`.`Action` = 'Approve'
      INNER JOIN `User`
        ON InvoiceHistory.`ActorId` = `User`.`UserId`
    WHERE Invoice.`ClientId` = clientId
    AND `InvoiceHistory`.`ActionDate` >= DATE(CONCAT(fromYear, '-01-01'))
    AND `InvoiceHistory`.`ActionDate` < DATE(CONCAT(toYear, '-01-01'))
    AND (nOUsersSelected = 1
    OR InvoiceHistory.ActorId IN (SELECT
        *
      FROM UserIdsToMatch))
    GROUP BY MONTH(`InvoiceHistory`.`ActionDate`),
             User.`UserId`,
             `User`.`FirstName`,
             `User`.`LastName`;
  END IF;

  DROP TEMPORARY TABLE UserIdsToMatch;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVolumeReportByScannedDate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetVolumeReportByScannedDate`(IN clientId int,
IN scannedDateFrom date,
IN scannedDateTo date,
IN userIds nvarchar(65535))
BEGIN
  DECLARE fromDate varchar(4);
  DECLARE toDate varchar(4);
  DECLARE varStr nvarchar(65535);
  DECLARE nOUsersSelected bool;
  SET nOUsersSelected = (userIds IS NULL OR userIds = '');

  CREATE TEMPORARY TABLE UserIdsToMatch (
    val varchar(36)
  );

  WHILE userIds IS NOT NULL
    AND CHAR_LENGTH(userIds) > 0
    AND userIds <> '' DO
    SET varStr = SUBSTRING_INDEX (userIds, ',', 1);
    SET userIds = SUBSTRING(userIds, LENGTH(varStr) + 2);
    IF varStr <> ''
      AND varStr <> ' '
      AND varStr IS NOT NULL THEN
      INSERT INTO UserIdsToMatch
        SELECT
          varStr;
    END IF;
  -- select varStr;
  END WHILE;


  SELECT
    MONTH(`InvoiceHistory`.`ActionDate`) ApprovalMonth,
    User.`UserId` AS `ApproverId`,
    CASE WHEN CONCAT(`User`.`FirstName`, ' ', `User`.`LastName`) IS NOT NULL THEN CONCAT(`User`.`FirstName`, ' ', `User`.`LastName`) ELSE 'System (Auto Approval)' END FullName,
    COUNT(*) ApprovedCount
  FROM Invoice
    INNER JOIN InvoiceHistory
      ON Invoice.`InvoiceId` = InvoiceHistory.`InvoiceId`
      AND `InvoiceHistory`.`Action` = 'Approve'
    INNER JOIN `User`
      ON InvoiceHistory.`ActorId` = `User`.`UserId`
  WHERE Invoice.`ClientId` = clientId
  AND STR_TO_DATE(`Invoice`.`ScannedDate`, '%Y-%m-%d') BETWEEN scannedDateFrom AND scannedDateTo
  AND (nOUsersSelected = 1
  OR InvoiceHistory.ActorId IN (SELECT
      *
    FROM UserIdsToMatch))
  GROUP BY MONTH(`Invoice`.`ScannedDate`),
           User.`UserId`,
           `User`.`FirstName`,
           `User`.`LastName`;

  DROP TEMPORARY TABLE UserIdsToMatch;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVolumeReportWithAssistance` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetVolumeReportWithAssistance`(IN clientId int,
IN reportYear int,
IN userId nvarchar(36))
BEGIN
  DECLARE fromYear varchar(4);
  DECLARE toYear varchar(4);

  SET fromYear = reportYear;
  SET toYear = reportYear + 1;

  SELECT
    MONTH(Invoice.`AprovedDate`) ApprovalMonth,
    `ApproverId`,
    CASE WHEN CONCAT(`User`.`FirstName`, ' ', `User`.`LastName`) IS NOT NULL THEN CONCAT(`User`.`FirstName`, ' ', `User`.`LastName`) ELSE 'System (Auto Approval)' END FullName,
    COUNT(*) ApprovedCount,
    (SELECT
        COUNT(*) > 0
      FROM AutoApproveReport
      WHERE AutoApproveReport.InvoiceId = Invoice.InvoiceId
      AND AutoApproveReport.Previous1ItemLineItemDetailId IS NOT NULL
      AND AutoApproveReport.IsValid = 1) Assisted
  FROM Invoice
    INNER JOIN `User`
      ON Invoice.`ApproverId` = `User`.`UserId`
  WHERE Invoice.`ClientId` = clientId
  AND Invoice.`AprovedDate` >= DATE(CONCAT(fromYear, '-01-01'))
  AND Invoice.`AprovedDate` < DATE(CONCAT(toYear, '-01-01'))
  AND (Invoice.ApproverId = '00000000-0000-0000-0000-000000000000'
  OR Invoice.ApproverId = userId)
  GROUP BY MONTH(Invoice.`AprovedDate`),
           `ApproverId`,
           `User`.`FirstName`,
           `User`.`LastName`,
           (SELECT
               COUNT(*) > 0
             FROM AutoApproveReport
             WHERE AutoApproveReport.InvoiceId = Invoice.InvoiceId
             AND AutoApproveReport.Previous1ItemLineItemDetailId IS NOT NULL
             AND AutoApproveReport.IsValid = 1)
  ORDER BY ApprovalMonth, `ApproverId` DESC;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportApproverToGL` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportApproverToGL`(IN ApproverUserID nvarchar(250),
IN ApproverGL int)
BEGIN
  DECLARE maxId int;

  SET maxId = NULL;

  IF (SELECT
        MAX(agl.Id)
      FROM ApproverGLCode agl) IS NOT NULL THEN
    SET maxId = (SELECT
        MAX(agl.Id)
      FROM ApproverGLCode agl) + 1;
  ELSE
    SET maxId = 1;
  END IF;
  IF NOT EXISTS (SELECT
        *
      FROM ApproverGLCode agl
      WHERE agl.UserId = ApproverUserID
      AND agl.GlCodeId = ApproverGL) THEN
    INSERT INTO ApproverGLCode (Id, UserId, GlCodeId)
      VALUES (maxId, ApproverUserID, ApproverGL);
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportAPSmartSLPO` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportAPSmartSLPO`(IN VendorNo nvarchar(65535),
IN PONumber nvarchar(65535),
IN ItemNumber nvarchar(65535),
IN VendorCatNumber nvarchar(65535),
IN UnitOfPurchase nvarchar(65535),
IN OrderQty nvarchar(65535),
IN UnitCost float,
IN ExtCost float,
IN RcvdQty nvarchar(65535),
IN ClientId int,
IN LineNo nvarchar(65535),
IN Description nvarchar(65535))
BEGIN
  DECLARE vendorId int;
  SELECT
    vendorId = VendorId
  FROM Vendor v
  WHERE v.VendorNo = VendorNo
  AND v.ClientId = ClientId;
  IF vendorId IS NOT NULL THEN
    IF LineNo = 1 THEN
      DELETE
        FROM PO
      WHERE v.PONumber = PONumber;
    END IF;
    INSERT INTO PO (vendorId, PONumber, ItemNumber, VendorCatNumber, UnitOfPurchase,
    OrderQty, UnitCost, ExtCost, RcvdQty, ClientId, LineNo, Description)
      VALUES (vendorId, PONumber, ItemNumber, VendorCatNumber, UnitOfPurchase, OrderQty, UnitCost, ExtCost, RcvdQty, ClientId, LineNo, Description);

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportAPSmartSLVendorAddress` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportAPSmartSLVendorAddress`(IN VendorName nvarchar(65535),
IN VendorNo nvarchar(65535),
IN Address1 nvarchar(65535),
IN Address2 nvarchar(65535),
IN City nvarchar(65535),
IN StateID int,
IN ClientID int)
BEGIN
  DECLARE addressId int;
  SELECT
    addressId = addressid
  FROM apshtm.Address adr
  WHERE adr.Address1 = Address1
  AND adr.CityName = City
  AND adr.StateId = StateID;
  IF addressId IS NULL THEN
    INSERT INTO Address (Address1, Address2, CityName, StateId)
      VALUES (Address1, Address2, City, StateID);

    SELECT
      addressId INTO addressid
    FROM Address adr
    WHERE adr.Address1 = Address1
    AND adr.CityName = City
    AND adr.StateId = StateID;
  END IF;
  UPDATE Vendor v
  SET v.AddressId = addressId
  WHERE v.VendorNo = VendorNo
  AND v.ClientId = ClientID;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportBradfordPOFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportBradfordPOFromScript`(IN PONumber nvarchar(250),
IN POLineNum nvarchar(250),
IN VendorNum nvarchar(250),
IN VendorClientId nvarchar(250),
IN POHeaderId nvarchar(250),
IN POLineId nvarchar(250),
IN POLineLocationId nvarchar(250),
IN Col1 nvarchar(250),
IN Col2 nvarchar(250),
IN ItemNo nvarchar(250),
IN VendorCatNum nvarchar(250),
IN ItemDescription nvarchar(250),
IN OrderedQuantity nvarchar(250),
IN UnitOfMeasurement nvarchar(250),
IN UnitPrice nvarchar(250),
IN RecievedTransactionId nvarchar(250),
IN Quantity nvarchar(250),
IN ExtAmount nvarchar(250),
IN GLAccount nvarchar(250),
IN Expense bit)
BEGIN
  DECLARE OutputString nvarchar(250);
  DECLARE c nvarchar(250);
  DECLARE l int;
  DECLARE p int;
  DECLARE vendorId int;
  DECLARE POId int;
  DECLARE ClientId int;

  SET ClientId = 18;
  SET vendorId = -1;
  IF PONumber != 'PO_NUMBER' THEN
    SELECT
      v.VendorId
    FROM Vendor v
    WHERE v.ClientId = ClientId
    AND LTRIM(RTRIM(LOWER(v.VendorNo))) = LTRIM(RTRIM(LOWER(vendorNum))) COLLATE utf8_unicode_ci INTO vendorId;

    IF vendorId != -1 THEN
      IF NOT EXISTS (SELECT
            *
          FROM Tax tx
          WHERE LTRIM(RTRIM(LOWER(tx.TaxCode))) = LTRIM(RTRIM(LOWER(GLAccount))) COLLATE utf8_unicode_ci
          AND tx.ClientId = ClientId
          AND LTRIM(RTRIM(LOWER(tx.OrgId))) = LTRIM(RTRIM(LOWER(PONumber))) COLLATE utf8_unicode_ci) THEN
        INSERT INTO Tax (ClientId, TaxCode, OrgId)
          VALUES (ClientId, LTRIM(RTRIM(GLAccount)), LTRIM(RTRIM(PONumber)));
      END IF;
      IF RecievedTransactionId IS NULL THEN
        SET @RecievedTransactionId = '';
      END IF;

      IF NOT EXISTS (SELECT
            *
          FROM PO p
          WHERE p.ClientId = ClientId
          AND LTRIM(RTRIM(LOWER(p.PONumber))) = LTRIM(RTRIM(LOWER(PONumber))) COLLATE utf8_unicode_ci
          AND p.VendorId = vendorId
          AND LTRIM(RTRIM(LOWER(p.LineNo))) = LTRIM(RTRIM(LOWER(POLineNum))) COLLATE utf8_unicode_ci
          AND LTRIM(RTRIM(LOWER(p.POLineId))) = LTRIM(RTRIM(LOWER(POLineId))) COLLATE utf8_unicode_ci
          AND LTRIM(RTRIM(LOWER(p.RecievedTransactionId))) = LTRIM(RTRIM(LOWER(RecievedTransactionId))) COLLATE utf8_unicode_ci) THEN

        INSERT INTO PO (ClientId,
        VendorId,
        PONumber,
        VendorCatNumber,
        UnitOfPurchase,
        RcvdQty,
        UnitCost,
        ExtCost,
        ItemNumber,
        OrderQty
        , LineNo
        , Description
        , POHeaderId
        , POLineId
        , POLineLocationId
        , RecievedTransactionId, GLCode, POType, IsExpense)

          VALUES (ClientId, vendorId, RTRIM(LTRIM(PONumber)), RTRIM(LTRIM(VendorCatNum)), UnitOfMeasurement, Quantity, UnitPrice, ExtAmount, ItemNo, OrderedQuantity, RTRIM(LTRIM(POLineNum)), RTRIM(LTRIM(ItemDescription)), RTRIM(LTRIM(POHeaderId)), RTRIM(LTRIM(POLineId)), RTRIM(LTRIM(POLineLocationId)), RTRIM(LTRIM(RecievedTransactionId)), LTRIM(RTRIM(GLAccount)), LTRIM(RTRIM(Col1)), Expense);

      END IF;
    END IF;
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportBradfordVendorFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportBradfordVendorFromScript`(IN vendorName nvarchar(1000),
IN vendorNo nvarchar(1000),
IN col1 nvarchar(1000),-- ClientVendorID of Dep
IN vendorSiteCode nvarchar(250),-- DepartmentName
IN col2 nvarchar(1000),-- Description of Dep
IN col3 nvarchar(1000), -- Not used
IN Address1 nvarchar(1000),
IN Address2 nvarchar(1000),
IN Address3 nvarchar(1000),

IN City nvarchar(1000),
IN State nvarchar(1000),
IN ZipCode nvarchar(1000),
IN col4 nvarchar(1000),
IN col5 nvarchar(1090))
BEGIN
  DECLARE maxVendordId int;
  DECLARE VendordSiteId int;
  DECLARE ClientId int;
  DECLARE AddressId int;
  DECLARE StateIdId int;

  SET ClientId = 18;
  SET StateIdId = NULL;
  SET VendordSiteId = NULL;

  IF (SELECT
        MAX(v.VendorId)
      FROM Vendor v) IS NOT NULL THEN
    SET maxVendordId = (SELECT
        MAX(v.VendorId)
      FROM Vendor v) + 1;
  ELSE
    SET maxVendordId = 1;
  END IF;

  IF (SELECT
        MAX(adr.AddressId)
      FROM Address adr) IS NOT NULL THEN
    SET AddressId = (SELECT
        MAX(adr.AddressId)
      FROM Address adr) + 1;
  ELSE
    SET AddressId = 1;
  END IF;

  IF (vendorName != 'VENDOR_NAME') THEN
    IF NOT EXISTS (SELECT
          *
        FROM Vendor v
        WHERE v.ClientId = ClientId
        AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci)
      AND (vendorName IS NOT NULL
      AND vendorNo IS NOT NULL) THEN
      INSERT INTO Vendor (VendorId, ClientId, VendorNo, VendorName, ClientVendorID)
        VALUES (maxVendordId, ClientId, RTRIM(LTRIM(vendorNo)), RTRIM(LTRIM(vendorName)), col1);
    ELSE
      SELECT
        VendorId INTO maxVendordId
      FROM Vendor v
      WHERE v.ClientId = ClientId
      AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci;
      UPDATE Vendor
      SET ClientVendorID = col1,
          VendorName = RTRIM(LTRIM(vendorName)),
          IsActive = 1
      WHERE VendorId = maxVendordId;
    END IF;

    IF NOT EXISTS (SELECT
          *
        FROM Department dep
        WHERE dep.ClientId = ClientId
        AND dep.VendorId = maxVendordId
        AND RTRIM(LTRIM(LOWER(dep.DepartmentName))) = RTRIM(LTRIM(LOWER(vendorSiteCode))) COLLATE utf8_unicode_ci)
      AND (vendorSiteCode IS NOT NULL) THEN
      IF EXISTS (SELECT
            *
          FROM State
          WHERE LOWER(StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
          OR LOWER(StateName) = LOWER(State) COLLATE utf8_unicode_ci)
        AND State IS NOT NULL THEN
        SELECT
          StateId INTO StateIdId
        FROM State
        WHERE LOWER(StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
        OR LOWER(StateName) = LOWER(State) COLLATE utf8_unicode_ci LIMIT 1;
        INSERT INTO Address (StateId, ZipCode, Address1, Address2, Address3, CityName)
          VALUES (StateIdId, ZipCode, Address1, Address2, Address3, City);

        INSERT INTO Department (VendorId, ClientId, Description, DepartmentName, AddressId)
          VALUES (maxVendordId, ClientId, RTRIM(LTRIM(col2)), RTRIM(LTRIM(vendorSiteCode)), AddressId);
      ELSE
        SELECT
          Id INTO VendordSiteId
        FROM Department dep
        WHERE dep.ClientId = ClientId
        AND VendorId = maxVendordId
        AND RTRIM(LTRIM(LOWER(DepartmentName))) = RTRIM(LTRIM(LOWER(vendorSiteCode))) COLLATE utf8_unicode_ci;

        UPDATE Department
        SET Description = RTRIM(LTRIM(col2))
        WHERE Id = VendordSiteId;
      END IF;
    END IF;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportDepartmentFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportDepartmentFromScript`(IN MyDepName nvarchar(240),
IN MyDepDescription nvarchar(500),
IN MyClientId int)
BEGIN
  IF NOT EXISTS (SELECT
        *
      FROM Department dep
      WHERE LTRIM(RTRIM(LOWER(dep.DepartmentName))) = LTRIM(RTRIM(LOWER(MyDepName))) COLLATE utf8_unicode_ci
      AND dep.ClientId = MyClientId)
    AND MyDepName IS NOT NULL THEN
    INSERT INTO Department (ClientId, DepartmentName, Description, IsActive)
      VALUES (MyClientId, LTRIM(RTRIM(MyDepName)), LTRIM(RTRIM(MyDepDescription)), TRUE);
  ELSE
    UPDATE Department
    SET IsActive = TRUE,
        Description = LTRIM(RTRIM(MyDepDescription))
    WHERE MyDepName IS NOT NULL
    AND LTRIM(RTRIM(LOWER(Department.DepartmentName))) = LTRIM(RTRIM(LOWER(MyDepName))) COLLATE utf8_unicode_ci
    AND Department.ClientId = MyClientId;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportDepartmentWithAddress` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportDepartmentWithAddress`(IN MyDepName nvarchar(240),
IN MyDepDescription nvarchar(200),
IN myStreet nvarchar(200),
IN myCity nvarchar(100),
IN myState nvarchar(50),
IN myZip nvarchar(15),
IN myCountry nvarchar(50),
IN myCompCode nvarchar(50),
IN MyClientId int)
BEGIN
  DECLARE myAddressId int;
  DECLARE myStateId int;
  DECLARE newDepDescription nvarchar(200);
  DECLARE isAddressNew bool;
  DECLARE myCompId int;
  DECLARE iStreetFound int;
  SET isAddressNew = FALSE;
  SELECT
    cc.Id
  FROM ClientCompany cc
  WHERE cc.ClientId = myClientId
  AND cc.CompanyCode = myCompCode INTO myCompId;
  -- select 'CompId is ' + myCompId;
  IF NOT EXISTS (SELECT
        *
      FROM Department dep
      WHERE LTRIM(RTRIM(LOWER(dep.DepartmentName))) = LTRIM(RTRIM(LOWER(MyDepName))) COLLATE utf8_unicode_ci
      AND dep.ClientId = MyClientId
      AND dep.ClientCompanyId = myCompId)
    AND MyDepName IS NOT NULL THEN
    -- select 'Dep fouund';              
    SET myAddressId = (SELECT
        MAX(adr.AddressId)
      FROM Address adr) + 1;
    SELECT
      st.StateId
    FROM State st
    WHERE LOWER(st.StateNameShort) = LOWER(myState)
    OR LOWER(st.StateName) = LOWER(myState) INTO myStateId;
    IF myStateId IS NULL THEN
      INSERT INTO Address (ZipCode, CityName, Address1, Country)
        VALUES (myZip, myCity, myStreet, myCountry);
    ELSE
      INSERT INTO Address (StateId, ZipCode, CityName, Address1, Country)
        VALUES (myStateId, myZip, myCity, myStreet, myCountry);
    END IF;


    INSERT INTO Department (ClientId, DepartmentName, Description, AddiressId, ClientCompanyId, IsActive)
      VALUES (MyClientId, LTRIM(RTRIM(MyDepName)), CONCAT(LTRIM(RTRIM(MyDepDescription)), '-', myStreet), AddressId, myCompId, TRUE);
  ELSE -- Existing Department
    -- Get the addressId and if null, create
    -- select 'Getting AddressID';
    SELECT
      d.AddressId
    FROM Department d
    WHERE MyDepName IS NOT NULL
    AND LTRIM(RTRIM(LOWER(d.DepartmentName))) = LTRIM(RTRIM(LOWER(MyDepName))) COLLATE utf8_unicode_ci
    AND d.ClientId = MyClientId
    AND d.ClientCompanyId = myCompId INTO myAddressId;
    -- Select 'AddressId is ' + myAddressId;
    -- If addressID is null, create new
    IF (myAddressId IS NULL) THEN
      SET isAddressNew = TRUE;
      SET myAddressId = (SELECT
          MAX(adr.AddressId)
        FROM Address adr) + 1;
      -- Select 'Address is from max taken ' + myAddressId;
      SELECT
        st.StateId
      FROM State st
      WHERE LOWER(st.StateNameShort) = LOWER(myState)
      OR LOWER(st.StateName) = LOWER(myState) INTO myStateId;
      IF myStateId IS NULL THEN
        INSERT INTO Address (ZipCode, CityName, Address1, Country)
          VALUES (myZip, myCity, myStreet, myCountry);
      -- Set myStateId = 1;
      ELSE
        INSERT INTO Address (StateId, ZipCode, CityName, Address1, Country)
          VALUES (myStateId, myZip, myCity, myStreet, myCountry);
      END IF;
    -- Select 'Address created';
    ELSE
      -- Select 'Address already exists as ' + myAddressId;
      SELECT
        st.StateId
      FROM State st
      WHERE LOWER(st.StateNameShort) = LOWER(myState)
      OR LOWER(st.StateName) = LOWER(myState) INTO myStateId;
      -- Select 'Updating Existing Address';
      IF myStateId IS NULL THEN
        UPDATE Address
        SET ZipCode = myZip,
            CityName = myCity,
            Address1 = myStreet,
            Country = myCountry
        WHERE AddressId = myAddressId;
      ELSE
        UPDATE Address
        SET ZipCode = myZip,
            StateId = myStateId,
            CityName = myCity,
            Address1 = myStreet,
            Country = myCountry
        WHERE AddressId = myAddressId;
      END IF;
    END IF;
    -- If incoming department is empty, don't update. Keep the existing one
    IF (MyDepDescription = ''
      OR MyDepDescription IS NULL) THEN
      SELECT
        d.Description
      FROM Department d
      WHERE MyDepName IS NOT NULL
      AND LTRIM(RTRIM(LOWER(d.DepartmentName))) = LTRIM(RTRIM(LOWER(MyDepName))) COLLATE utf8_unicode_ci
      AND d.ClientId = MyClientId
      AND d.ClientCompanyId = myCompId INTO newDepDescription;
    ELSE
      SET newDepDescription = MyDepDescription;
    END IF;
    -- We want to add address to description if it is missing
    -- Select myStreet;
    SET iStreetFound = LOCATE(myStreet, newDepDescription);
    -- Select iStreetFound;
    IF (iStreetFound < 1) THEN
      -- Select 'Adding';
      SET newDepDescription = CONCAT(LTRIM(RTRIM(newDepDescription)), ' - ', myStreet);
    END IF;
    -- Select newDepDescription;

    IF (isAddressNew = TRUE) THEN
      UPDATE Department
      SET IsActive = TRUE,
          Description = LTRIM(RTRIM(newDepDescription)),
          AddressID = myAddressId
      WHERE MyDepName IS NOT NULL
      AND LTRIM(RTRIM(LOWER(Department.DepartmentName))) = LTRIM(RTRIM(LOWER(MyDepName))) COLLATE utf8_unicode_ci
      AND Department.ClientId = MyClientId
      AND Department.ClientCompanyId = myCompId;
    ELSE
      UPDATE Department
      SET IsActive = TRUE,
          Description = LTRIM(RTRIM(newDepDescription))
      WHERE MyDepName IS NOT NULL
      AND LTRIM(RTRIM(LOWER(Department.DepartmentName))) = LTRIM(RTRIM(LOWER(MyDepName))) COLLATE utf8_unicode_ci
      AND Department.ClientId = MyClientId
      AND Department.ClientCompanyId = myCompId;
    END IF;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportDepartmentWithCompCode` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportDepartmentWithCompCode`(IN MyDepName nvarchar(240),
IN MyDepDescription nvarchar(500),
IN MyCompCode nvarchar(50),
IN MyClientId int)
BEGIN
  DECLARE myCompId int;
  SELECT
    cc.Id
  FROM ClientCompany cc
  WHERE cc.ClientId = myClientId
  AND cc.CompanyCode = myCompCode INTO myCompId;

  IF NOT EXISTS (SELECT
        *
      FROM Department dep
      WHERE LTRIM(RTRIM(LOWER(dep.DepartmentName))) = LTRIM(RTRIM(LOWER(MyDepName))) COLLATE utf8_unicode_ci
      AND dep.ClientId = MyClientId
      AND dep.ClientCompanyId = myCompId)
    AND MyDepName IS NOT NULL THEN
    INSERT INTO Department (ClientId, DepartmentName, Description, ClientCompanyId, IsActive)
      VALUES (MyClientId, LTRIM(RTRIM(MyDepName)), LTRIM(RTRIM(MyDepDescription)), myCompId, TRUE);
  ELSE
    UPDATE Department
    SET IsActive = TRUE,
        Description = LTRIM(RTRIM(MyDepDescription))
    WHERE MyDepName IS NOT NULL
    AND LTRIM(RTRIM(LOWER(Department.DepartmentName))) = LTRIM(RTRIM(LOWER(MyDepName))) COLLATE utf8_unicode_ci
    AND Department.ClientId = MyClientId
    AND Department.ClientCompanyId = myCompId;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportDWRData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportDWRData`(IN VendorNo nvarchar(250),
IN VendorName nvarchar(250),
IN BusinessUnitId nvarchar(250),
IN BusinessUnit nvarchar(250),
IN AccountNo nvarchar(250),
IN AccountDescription nvarchar(250),
IN ProjectType1 nvarchar(250),
IN ProjectId1 nvarchar(250),
IN ProjectType2 nvarchar(250),
IN ProjectId2 nvarchar(250),
IN Reviewer nvarchar(250),
IN ReviewerLast nvarchar(250),
IN ReviewerEmail nvarchar(250),
IN Reviewer2 nvarchar(250),
IN Reviewer2Last nvarchar(250),
IN ReviewerEmail2 nvarchar(250),
IN Reviewer3 nvarchar(250),
IN Reviewer3Last nvarchar(250),
IN ReviewerEmail3 nvarchar(250),
IN Approver nvarchar(250),
IN ApproverLast nvarchar(250),
IN ApproverEmail nvarchar(250),
IN Approver2 nvarchar(250),
IN Approver2Last nvarchar(250),
IN ApproverEmail2 nvarchar(250),
IN Approver3 nvarchar(250),
IN Approver3Last nvarchar(250),
IN ApproverEmail3 nvarchar(250))
BEGIN
  DECLARE ClientId int;
  DECLARE GLId int;
  DECLARE DepId int;
  DECLARE vendorId int;
  DECLARE ReviewerId char(36);
  DECLARE ReviewerId2 char(36);
  DECLARE ReviewerId3 char(36);
  DECLARE ApproverId char(36);
  DECLARE ApproverId2 char(36);
  DECLARE ApproverId3 char(36);
  DECLARE isProject1Required tinyint;
  DECLARE isProject2Required tinyint;

  SET ClientId = 22;
  IF (SELECT
        MAX(v.VendorId)
      FROM Vendor v) IS NOT NULL THEN
    SET vendorId = (SELECT
        MAX(v.VendorId)
      FROM Vendor v) + 1;
  ELSE
    SET vendorId = 1;
  END IF;

  IF (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) IS NOT NULL THEN
    SET GLId = (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) + 1;
  ELSE
    SET GLId = 1;
  END IF;

  IF (VendorNo IS NOT NULL) THEN
    -- INSERT VENDOR
    IF NOT EXISTS (SELECT
          *
        FROM Vendor v
        WHERE v.ClientId = ClientId
        AND LOWER(v.VendorNo) = LOWER(vendorNo))
      AND (v.vendorName IS NOT NULL
      AND v.VendorNo IS NOT NULL
      AND v.VendorNo != '') THEN
      INSERT INTO apsthml.Vendor (ClientId, VendorId, VendorName, VendorNo)
        VALUES (ClientId, vendorId, vendorName, vendorNo);
    ELSE
      SELECT
        v.VendorId INTO vendorId
      FROM Vendor v
      WHERE v.ClientId = ClientId
      AND LOWER(v.VendorNo) = LOWER(vendorNo);
    END IF;

    -- INSERT DEPARTMENT
    IF NOT EXISTS (SELECT
          *
        FROM Department dep
        WHERE dep.ClientId = ClientId
        AND LOWER(dep.DepartmentName) = LOWER(BusinessUnitId))
      AND (BusinessUnitId IS NOT NULL
      AND BusinessUnitId != '') THEN
      INSERT INTO Department (DepartmentName, Description, ClientId)
        VALUES (BusinessUnitId, BusinessUnit, ClientId);
    END IF;

    -- INSERT GL CODE
    IF NOT EXISTS (SELECT
          *
        FROM GLCode glc
        WHERE glc.ClientId = ClientId
        AND LOWER(glc.GLCodeName) =
        LOWER(AccountNo))
      AND (AccountNo IS NOT NULL
      AND AccountNo != '') THEN
      IF (ProjectType1 IS NULL
        OR ProjectType1 = '') THEN
        SET isProject1Required = 0;
      ELSE
        SET isProject1Required = 1;
      END IF;

      IF (ProjectType2 IS NULL
        OR ProjectType2 = '') THEN
        SET isProject2Required = 0;
      ELSE
        SET isProject2Required = 1;
      END IF;

      INSERT INTO GLCode (ClientId, GLCodeId, GLCodeName, Desccription, ProjectType,
      SubProjectType, IsProjectTypeRequred, IsSubProjectTypeRequired)
        VALUES (ClientId, GLId, AccountNo, AccountDescription, ProjectType1, ProjectType2, isProject1Required, isProject2Required);
    END IF; -- GL CODE END

    SELECT
      GLCodeId INTO GLId
    FROM GLCode glc
    WHERE glc.ClientId = ClientId
    AND LOWER(glc.GLCodeName) =
    LOWER(AccountNo)
    AND (AccountNo IS NOT NULL
    AND AccountNo != '');

    SELECT
      Id
    FROM Department dep
    WHERE dep.ClientId = ClientId
    AND LOWER(dep.DepartmentName) = LOWER(BusinessUnitId)
    AND (BusinessUnitId IS NOT NULL
    AND BusinessUnitId != '') INTO DepId;

    IF NOT EXISTS (SELECT
          *
        FROM VendorDepartment vdep
        WHERE vdep.VendorId = vendorId
        AND vdep.DepartmentId = DepId)
      AND (DepId IS NOT NULL
      AND vendorId IS NOT NULL) THEN
      INSERT INTO VendorDepartment (VendorId, DepartmentId)
        VALUES (vendorId, DepId);
    END IF;

    IF NOT EXISTS (SELECT
          *
        FROM DepartmentGLCode depglc
        WHERE depglc.GLCodeId = GLId
        AND depglc.DepartmentId =
        DepId)
      AND (DepId IS NOT NULL
      AND GLId IS NOT NULL) THEN
      INSERT INTO DepartmentGLCode (GLCodeId, DepartmentId)
        VALUES (GLId, DepId);
    END IF;

    IF NOT EXISTS (SELECT
          *
        FROM Vendor_Department_GL vdepglc
        WHERE vdepglc.VendorId = vendorId
        AND vdepglc.GLCodeId = GLId
        AND vdepglc.DepartmentId = DepId)
      AND (DepId IS NOT NULL
      AND GLId IS NOT NULL
      AND vendorId IS NOT NULL) THEN
      INSERT INTO Vendor_Department_GL (VendorId, GLCodeId, DepartmentId)
        VALUES (vendorId, GLId, DepId);
    END IF;

    -- get reviewer if exists
    IF EXISTS (SELECT
          *
        FROM user usr
        WHERE LOWER(usr.UserName) = LOWER(ReviewerEmail)
        AND usr.ClientId = ClientId)
      AND ReviewerEmail IS NOT NULL
      AND ReviewerEmail != '' THEN
      SELECT
        UserId
      FROM user usr
      WHERE LOWER(usr.UserName) = LOWER(ReviewerEmail)
      AND usr.ClientId = ClientId
      AND usr.IsActive = 1 INTO ReviewerId;
    END IF;

    -- insert reviewer if not exists
    IF (ReviewerId IS NULL
      AND ReviewerEmail IS NOT NULL
      AND ReviewerEmail != '') THEN
      SET ReviewerId = UUID();
      INSERT INTO user (ClientId, userid, UserName, Email, FirstName, LastName, `Password`,
      UserIdCard, RoleId, IsActive, LoggedIn)
        VALUES (ClientId, ReviewerId, ReviewerEmail, ReviewerEmail, Reviewer, ReviewerLast, '', ReviewerEmail, 1, 1, 0);
    END IF;

    IF EXISTS (SELECT
          *
        FROM user usr
        WHERE LOWER(usr.UserName) = LOWER(ReviewerEmail2)
        AND usr.ClientId = ClientId)
      AND ReviewerEmail2 IS NOT NULL
      AND ReviewerEmail2 != '' THEN
      SELECT
        UserId
      FROM user usr
      WHERE LOWER(usr.UserName) = LOWER(ReviewerEmail2)
      AND usr.ClientId = ClientId
      AND usr.IsActive = 1 INTO ReviewerId2;
    END IF;

    IF (ReviewerId2 IS NULL
      AND ReviewerEmail2 IS NOT NULL
      AND ReviewerEmail2 != '') THEN
      SET ReviewerId2 = UUID();
      INSERT INTO user (ClientId, userid, UserName, Email, FirstName, LastName, `Password`, UserIdCard, RoleId, IsActive, LoggedIn)
        VALUES (ClientId, ReviewerId2, ReviewerEmail2, ReviewerEmail2, Reviewer2, Reviewer2Last, '', ReviewerEmail2, 1, 1, 0);
    END IF;

    IF EXISTS (SELECT
          *
        FROM user usr
        WHERE LOWER(usr.UserName) = LOWER(ReviewerEmail3)
        AND usr.ClientId =
        ClientId)
      AND ReviewerEmail3 IS NOT NULL
      AND ReviewerEmail3 != '' THEN
      SELECT
        UserId
      FROM user usr
      WHERE LOWER(usr.UserName) = LOWER(ReviewerEmail3)
      AND usr.ClientId = ClientId
      AND usr.IsActive = 1 INTO ReviewerId3;
    END IF;

    IF (ReviewerId3 IS NULL
      AND ReviewerEmail3 IS NOT NULL
      AND ReviewerEmail3 != '') THEN
      SET ReviewerId3 = UUID();
      INSERT INTO user (ClientId, userid, UserName, Email, FirstName, LastName, `Password`,
      UserIdCard, RoleId, IsActive, LoggedIn)
        VALUES (ClientId, ReviewerId3, ReviewerEmail3, ReviewerEmail3, Reviewer3, Reviewer3Last, '', ReviewerEmail3, 1, 1, 0);
    END IF;

    -- get approver if exists
    IF EXISTS (SELECT
          *
        FROM user usr
        WHERE LOWER(usr.UserName) = LOWER(ApproverEmail)
        AND usr.ClientId =
        ClientId)
      AND ApproverEmail IS NOT NULL
      AND ApproverEmail != '' THEN
      SELECT
        UserId
      FROM user usr
      WHERE LOWER(usr.UserName) = LOWER(ApproverEmail)
      AND usr.ClientId = ClientId
      AND usr.IsActive = 1 INTO ApproverId;
    END IF;

    -- insert approver if not exists
    IF (ApproverId IS NULL
      AND ApproverEmail IS NOT NULL
      AND ApproverEmail != '') THEN
      SET ApproverId = UUID();
      INSERT INTO user (ClientId, userid, UserName, Email, FirstName, LastName, `Password`,
      UserIdCard, RoleId, IsActive, LoggedIn)
        VALUES (ClientId, ApproverId, ApproverEmail, ApproverEmail, Approver, ApproverLast, '', ApproverEmail, 1, 1, 0);
    END IF;

    IF EXISTS (SELECT
          *
        FROM user usr
        WHERE LOWER(usr.UserName) = LOWER(ApproverEmail2)
        AND usr.ClientId = ClientId)
      AND ApproverEmail2 IS NOT NULL
      AND ApproverEmail2 != '' THEN
      SELECT
        UserId
      FROM user usr
      WHERE LOWER(usr.UserName) = LOWER(ApproverEmail2)
      AND usr.ClientId = ClientId
      AND usr.IsActive = 1 INTO ApproverId2;
    END IF;

    IF (ApproverId2 IS NULL
      AND ApproverEmail2 IS NOT NULL
      AND ApproverEmail2 != '') THEN
      SET ApproverId2 = UUID();
      INSERT INTO user (ClientId, userid, UserName, Email, FirstName, LastName, `Password`,
      UserIdCard, RoleId, IsActive, LoggedIn)
        VALUES (ClientId, ApproverId2, ApproverEmail2, ApproverEmail2, Approver2, pprover2Last, '', ApproverEmail2, 1, 1, 0);
    END IF;

    IF EXISTS (SELECT
          *
        FROM user usr
        WHERE LOWER(usr.UserName) = LOWER(ApproverEmail3)
        AND usr.ClientId = ClientId)
      AND ApproverEmail3 IS NOT NULL
      AND ApproverEmail3 != '' THEN
      SELECT
        UserId
      FROM user usr
      WHERE LOWER(usr.UserName) = LOWER(ApproverEmail3)
      AND usr.ClientId = ClientId
      AND usr.IsActive = 1 INTO ApproverId3;
    END IF;

    IF (ApproverId3 IS NULL
      AND ApproverEmail3 IS NOT NULL
      AND ApproverEmail3 != '') THEN
      SET ApproverId3 = UUID();
      INSERT INTO user (ClientId, userid, UserName, Email, FirstName, LastName, `Password`,
      UserIdCard, RoleId, IsActive, LoggedIn)
        VALUES (ClientId, ApproverId3, ApproverEmail3, ApproverEmail3, Approver3, Approver3Last, '', ApproverEmail3, 1, 1, 0);
    END IF;

    -- insert awf for reviewer
    IF NOT EXISTS (SELECT
          *
        FROM ApprovalWorkFlow awf
        WHERE awf.VendorId = vendorId
        AND `Type` = 0)
      AND (ReviewerId IS NOT NULL) THEN
      INSERT INTO ApprovalWorkFlow (VendorId, UserId, Title, Duration, FirstEscalationManagerId,
      SeondEscalationManagerId, `Type`, CurrentLevelUserId)
        VALUES (vendorId, ReviewerId, (VendorName), 3, Reviewerid2, Reviewerid3, 0, Reviewerid2);
    END IF;

    -- insert awf for manager
    IF NOT EXISTS (SELECT
          *
        FROM ApprovalWorkFlow awf
        WHERE awf.VendorId = vendorId
        AND `Type` = 1)
      AND (ApproverId IS NOT NULL) THEN
      INSERT INTO ApprovalWorkFlow (VendorId, UserId, Title, Duration,
      FirstEscalationManagerId, SeondEscalationManagerId, `Type`, CurrentLevelUserId)
        VALUES (vendorId, ApproverId, (VendorName + ' - Managers'), 3, ApproverId2, ApproverId3, 1, ApproverId2);
    END IF;

    -- insert manager notification based on vendor No
    IF NOT EXISTS (SELECT
          *
        FROM ApproverByAmount abamount
        WHERE abamount.UserId = ReviewerId
        AND abamount.SecondApproverId = ApproverId
        AND LOWER(abamount.AuthCode) = LOWER(VendorNo))
      AND (ReviewerId IS NOT NULL)
      AND (ApproverId IS NOT NULL) THEN
      INSERT INTO ApproverByAmount (UserId, MaximumAllowedAmount, SecondApproverId, AuthCode)
        VALUES (ReviewerId, 0.01, ApproverId, VendorNo);
    END IF;

    -- insert manager notification based on vendor No
    IF NOT EXISTS (SELECT
          *
        FROM ApproverByAmount abamount
        WHERE abamount.UserId = ReviewerId
        AND abamount.SecondApproverId = ApproverId2
        AND LOWER(abamount.AuthCode) = LOWER(VendorNo))
      AND (ReviewerId IS NOT NULL)
      AND (ApproverId2 IS NOT NULL) THEN
      INSERT INTO ApproverByAmount (UserId, MaximumAllowedAmount, SecondApproverId, AuthCode)
        VALUES (ReviewerId, 0.01, ApproverId2, VendorNo);
    END IF;

    -- insert manager notification based on vendor No
    IF NOT EXISTS (SELECT
          *
        FROM ApproverByAmount abamount
        WHERE abamount.UserId = ReviewerId
        AND abamount.SecondApproverId = ApproverId3
        AND LOWER(abamount.AuthCode) = LOWER(VendorNo))
      AND (ReviewerId IS NOT NULL)
      AND (ApproverId3 IS NOT NULL) THEN
      INSERT INTO ApproverByAmount (UserId, MaximumAllowedAmount, SecondApproverId, AuthCode)
        VALUES (ReviewerId, 0.01, ApproverId3, VendorNo);
    END IF;

    -- insert manager notification based on vendor No
    IF NOT EXISTS (SELECT
          *
        FROM ApproverByAmount abamount
        WHERE abamount.UserId = ReviewerId2
        AND abamount.SecondApproverId = ApproverId
        AND LOWER(abamount.AuthCode) = LOWER(VendorNo))
      AND (ReviewerId2 IS NOT NULL)
      AND (ApproverId IS NOT NULL) THEN
      INSERT INTO ApproverByAmount (UserId, MaximumAllowedAmount, SecondApproverId, AuthCode)
        VALUES (ReviewerId2, 0.01, ApproverId, VendorNo);
    END IF;

    -- insert manager notification based on vendor No
    IF NOT EXISTS (SELECT
          *
        FROM ApproverByAmount abamount
        WHERE abamount.UserId = ReviewerId2
        AND abamount.SecondApproverId = ApproverId2
        AND LOWER(abamount.AuthCode) = LOWER(VendorNo))
      AND (ReviewerId2 IS NOT NULL)
      AND (ApproverId2 IS NOT NULL) THEN
      INSERT INTO ApproverByAmount (UserId, MaximumAllowedAmount, SecondApproverId, AuthCode)
        VALUES (ReviewerId2, 0.01, ApproverId2, VendorNo);
    END IF;

    -- insert manager notification based on vendor No
    IF NOT EXISTS (SELECT
          *
        FROM ApproverByAmount abamount
        WHERE abamount.UserId = ReviewerId2
        AND abamount.SecondApproverId = ApproverId3
        AND LOWER(abamount.AuthCode) = LOWER(VendorNo))
      AND (ReviewerId2 IS NOT NULL)
      AND (ApproverId3 IS NOT NULL) THEN
      INSERT INTO ApproverByAmount (UserId, MaximumAllowedAmount, SecondApproverId, AuthCode)
        VALUES (ReviewerId2, 0.01, ApproverId3, VendorNo);
    END IF;

    -- insert manager notification based on vendor No
    IF NOT EXISTS (SELECT
          *
        FROM ApproverByAmount abamount
        WHERE abamount.UserId = ReviewerId3
        AND abamount.SecondApproverId = ApproverId
        AND LOWER(AuthCode) = LOWER(VendorNo))
      AND (ReviewerId3 IS NOT NULL)
      AND (ApproverId IS NOT NULL) THEN
      INSERT INTO ApproverByAmount (UserId, MaximumAllowedAmount, SecondApproverId, AuthCode)
        VALUES (ReviewerId3, 0.01, ApproverId, VendorNo);
    END IF;

    -- insert manager notification based on vendor No
    IF NOT EXISTS (SELECT
          *
        FROM ApproverByAmount abamount
        WHERE abamount.UserId = ReviewerId3
        AND abamount.SecondApproverId = ApproverId2
        AND LOWER(abamount.AuthCode) = LOWER(VendorNo))
      AND (ReviewerId3 IS NOT NULL)
      AND (ApproverId2 IS NOT NULL) THEN
      INSERT INTO ApproverByAmount (UserId, MaximumAllowedAmount, SecondApproverId, AuthCode)
        VALUES (ReviewerId3, 0.01, ApproverId2, VendorNo);
    END IF;

    -- insert manager notification based on vendor No
    IF NOT EXISTS (SELECT
          *
        FROM ApproverByAmount abamount
        WHERE abamount.UserId = ReviewerId3
        AND abamount.SecondApproverId = ApproverId3
        AND LOWER(abamount.AuthCode) = LOWER(VendorNo))
      AND (ReviewerId3 IS NOT NULL)
      AND (ApproverId3 IS NOT NULL) THEN
      INSERT INTO ApproverByAmount (UserId, MaximumAllowedAmount, SecondApproverId, AuthCode)
        VALUES (ReviewerId3, 0.01, ApproverId3, VendorNo);
    END IF;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportDWRDataGLMapping` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportDWRDataGLMapping`(IN VendorNo nvarchar(250),
IN BusinessUnitId nvarchar(250),
IN AccountNo nvarchar(250))
BEGIN
  DECLARE ClientId int;
  DECLARE GLId int;
  DECLARE DepId int;
  DECLARE vendorId int;

  SET ClientId = 22;
  SET vendorId = NULL;
  SET DepId = NULL;
  SET GLId = NULL;

  IF (VendorNo IS NOT NULL) THEN
    -- get vendorId
    SELECT
      VendorId
    FROM Vendor v
    WHERE v.ClientId = ClientId
    AND LOWER(v.VendorNo) = LOWER(vendorNo) INTO vendorId;

    -- get GL Id
    SELECT
      GLCodeId
    FROM GLCode glc
    WHERE glc.ClientId = ClientId
    AND LOWER(glc.GLCodeName) =
    LOWER(AccountNo)
    AND (AccountNo IS NOT NULL
    AND AccountNo != '') INTO GLId;

    -- get Dep Id
    SELECT
      Id
    FROM Department dep
    WHERE dep.ClientId = ClientId
    AND LOWER(dep.DepartmentName) =
    LOWER(BusinessUnitId)
    AND (BusinessUnitId IS NOT NULL
    AND BusinessUnitId != '') INTO DepId;

    IF NOT EXISTS (SELECT
          *
        FROM VendorDepartment vdep
        WHERE vdep.VendorId = vendorId
        AND vdep.DepartmentId =
        DepId)
      AND (DepId IS NOT NULL
      AND vendorId IS NOT NULL) THEN
      INSERT INTO VendorDepartment (VendorId, DepartmentId)
        VALUES (vendorId, DepId);
    END IF;

    IF NOT EXISTS (SELECT
          *
        FROM DepartmentGLCode depglc
        WHERE depglc.GLCodeId = GLId
        AND depglc.DepartmentId = DepId)
      AND (DepId IS NOT NULL
      AND GLId IS NOT NULL) THEN
      INSERT INTO DepartmentGLCode (GLCodeId, DepartmentId)
        VALUES (GLId, DepId);
    END IF;

    IF NOT EXISTS (SELECT
          *
        FROM Vendor_Department_GL vdepglc
        WHERE vdepglc.VendorId = vendorId
        AND vdepglc.GLCodeId
        = GLId
        AND vdepglc.DepartmentId = DepId)
      AND (DepId IS NOT NULL
      AND GLId IS NOT NULL
      AND vendorId IS NOT NULL) THEN
      INSERT INTO Vendor_Department_GL (VendorId, GLCodeId, DepartmentId)
        VALUES (vendorId, GLId, DepId);
    END IF;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportGLFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportGLFromScript`(IN MyGLName nvarchar(240),
IN MyGLDescription nvarchar(500),
IN MyUserName nvarchar(250),
IN MyClientId int)
BEGIN
  DECLARE GlCodeId int;
  DECLARE glUserID char(36);
  IF (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) IS NOT NULL THEN
    SET GlCodeId = (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) + 1;
  ELSE
    SET GlCodeId = 1;
  END IF;
  IF NOT EXISTS (SELECT
        *
      FROM GLCode glc
      WHERE LTRIM(RTRIM(LOWER(glc.GLCodeName))) = LTRIM(RTRIM(LOWER(MyGLName))) COLLATE utf8_unicode_ci
      AND glc.ClientId = MyClientId)
    AND MyGLName IS NOT NULL THEN
    INSERT INTO GLCode (ClientId, GLCodeId, GLCodeName, Desccription)
      VALUES (MyClientId, GlCodeId, LTRIM(RTRIM(MyGLName)), LTRIM(RTRIM(MyGLDescription)));
    -- If userName exists, assign the GL to the user
    IF EXISTS (SELECT
          *
        FROM User u
        WHERE u.UserName = MyUserName COLLATE utf8_unicode_ci
        AND u.ClientId = MyClientId) THEN
      SET glUserID = (SELECT
          UserID
        FROM User u
        WHERE u.UserName = MyUserName COLLATE utf8_unicode_ci
        AND u.ClientId = MyClientId);
      INSERT INTO ApproverGLCode (GLCodeId, UserId)
        VALUES (GlCodeId, glUserID);
    END IF;
  ELSE
    UPDATE GLCode
    SET IsActive = TRUE,
        GLCode.Desccription = LTRIM(RTRIM(MyGLDescription))
    WHERE MyGLName IS NOT NULL
    AND LTRIM(RTRIM(LOWER(GLCode.GLCodeName))) = LTRIM(RTRIM(LOWER(MyGLName))) COLLATE utf8_unicode_ci
    AND GLCode.ClientId = MyClientId;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportGLFromScript_Backup` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportGLFromScript_Backup`(IN MyGLName nvarchar(240),
IN MyGLDescription nvarchar(500),
IN MyUserName nvarchar(250),
IN MyClientId int)
BEGIN
  DECLARE GlCodeId int;
  DECLARE glUserID char(36);
  IF (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) IS NOT NULL THEN
    SET GlCodeId = (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) + 1;
  ELSE
    SET GlCodeId = 1;
  END IF;
  IF NOT EXISTS (SELECT
        *
      FROM GLCode glc
      WHERE LTRIM(RTRIM(LOWER(glc.GLCodeName))) = LTRIM(RTRIM(LOWER(MyGLName))) COLLATE utf8_unicode_ci
      AND glc.ClientId = MyClientId)
    AND MyGLName IS NOT NULL THEN
    INSERT INTO GLCode (ClientId, GLCodeId, GLCodeName, Desccription)
      VALUES (MyClientId, GlCodeId, LTRIM(RTRIM(MyGLName)), LTRIM(RTRIM(MyGLDescription)));
    -- If userName exists, assign the GL to the user
    IF EXISTS (SELECT
          *
        FROM User u
        WHERE u.UserName = MyUserName COLLATE utf8_unicode_ci
        AND u.ClientId = MyClientId) THEN
      SET glUserID = (SELECT
          UserID
        FROM User u
        WHERE u.UserName = MyUserName COLLATE utf8_unicode_ci
        AND u.ClientId = MyClientId);
      INSERT INTO ApproverGLCode (GLCodeId, UserId)
        VALUES (GlCodeId, glUserID);
    END IF;
  ELSE
    UPDATE GLCode
    SET IsActive = TRUE,
        GLCode.Desccription = LTRIM(RTRIM(MyGLDescription))
    WHERE MyGLName IS NOT NULL
    AND LTRIM(RTRIM(LOWER(GLCode.GLCodeName))) = LTRIM(RTRIM(LOWER(MyGLName))) COLLATE utf8_unicode_ci
    AND GLCode.ClientId = MyClientId;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportKettleCustomerFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportKettleCustomerFromScript`(IN CustomerNo nvarchar(500),
IN CustomerName nvarchar(1000),
IN Col3 nvarchar(1000),
IN Col4 nvarchar(1000),
IN Col5 nvarchar(1000),
IN Col6 nvarchar(1000),
IN Col7 nvarchar(990))
BEGIN
  DECLARE Id int;
  DECLARE ClientId int;

  IF (SELECT
        MAX(cst.CustomerId)
      FROM Customer cst) IS NOT NULL THEN
    SET Id = (SELECT
        MAX(cst.CustomerId)
      FROM Customer cst) + 1;
  ELSE
    SET Id = 1;
  END IF;

  SET ClientId = 1;
  IF NOT EXISTS (SELECT
        *
      FROM Customer cst
      WHERE cst.ClientId = ClientId
      AND RTRIM(LTRIM(LOWER(cst.CustomerName))) = RTRIM(LTRIM(LOWER(CustomerName))) COLLATE utf8_unicode_ci
      AND RTRIM(LTRIM(LOWER(cst.CustomerNo))) = RTRIM(LTRIM(LOWER(CustomerNo))) COLLATE utf8_unicode_ci)
    AND (CustomerName IS NOT NULL) THEN
    INSERT INTO Customer (ClientId, CustomerId, CustomerName, ContactPerson, AddressId, Telephone, Fax, Email, CustomerNo)
      VALUES (ClientId, Id, RTRIM(LTRIM(CustomerName)), NULL, NULL, NULL, NULL, NULL, RTRIM(LTRIM(CustomerNo)));
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportKettlePOFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportKettlePOFromScript`(IN POumber nvarchar(250),
IN vendorNo nvarchar(250),
IN VendorCatNum nvarchar(250),
IN UnitOfM nvarchar(250),
IN QtyRcvd nvarchar(250),
IN UnitCost nvarchar(250),
IN ExtCost nvarchar(250),
IN Description nvarchar(250),
IN RecivedTranID nvarchar(250),
IN MyClientId int)
BEGIN
  DECLARE vendorId int;
  DECLARE ClientId int;
  DECLARE OutputString nvarchar(250);
  DECLARE c nvarchar(250);
  DECLARE l int;
  DECLARE p int;
  DECLARE POId int;

  -- SET ClientId=1;
  SET vendorId = -1;

  SELECT
    v.VendorId
  FROM Vendor v
  WHERE v.ClientId = MyClientId
  AND v.IsActive = 1
  AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci LIMIT 1 INTO vendorId;

  IF (vendorId != -1
    AND POumber <> 'PONUMBER') THEN
    IF NOT EXISTS (SELECT
          *
        FROM PO p
        WHERE p.ClientId = MyClientId
        AND LTRIM(RTRIM(LOWER(p.PONumber))) = LTRIM(RTRIM(LOWER(POumber))) COLLATE utf8_unicode_ci
        AND LTRIM(RTRIM(LOWER(p.VendorCatNumber))) = LTRIM(RTRIM(LOWER(VendorCatNum))) COLLATE utf8_unicode_ci) THEN


      INSERT INTO PO (ClientId, VendorId, PONumber, VendorCatNumber, UnitOfPurchase,
      RcvdQty, UnitCost, ExtCost, Description, IsExpense, RecievedTransactionId)
        VALUES (MyClientId, vendorId, RTRIM(LTRIM(POumber)), RTRIM(LTRIM(VendorCatNum)), RTRIM(LTRIM(UnitOfM)), QtyRcvd, UnitCost, ExtCost, Description, 0, RecivedTranID);
    ELSE
      SELECT
        Id
      FROM PO p
      WHERE p.ClientId = MyClientId
      AND LTRIM(RTRIM(LOWER(p.PONumber))) =
      LTRIM(RTRIM(LOWER(POumber))) COLLATE utf8_unicode_ci
      AND LTRIM(RTRIM(LOWER(p.VendorCatNumber))) =
      LTRIM(RTRIM(LOWER(VendorCatNum))) COLLATE utf8_unicode_ci INTO POId;
      UPDATE PO p
      SET VendorId = vendorId,
          PONumber = RTRIM(LTRIM(POumber)),
          VendorCatNumber = RTRIM(LTRIM(VendorCatNum)),
          UnitOfPurchase = RTRIM(LTRIM(UnitOfM)),
          RcvdQty = QtyRcvd,
          UnitCost = UnitCost,
          ExtCost = ExtCost,
          RecievedTransactionId = RecivedTranID,
          Description = RTRIM(LTRIM(Description))
      WHERE p.Id = POId;
    END IF;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportKettlePOFromScriptNew` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportKettlePOFromScriptNew`(IN POumber nvarchar(250),
IN vendorNo nvarchar(250),
IN VendorCatNum nvarchar(250),
IN UnitOfM nvarchar(250),
IN QtyRcvd nvarchar(250),
IN UnitCost nvarchar(250),
IN ExtCost nvarchar(250),
IN Description nvarchar(250),
IN RecivedTranID nvarchar(250),
IN RecLineNo nvarchar(250),
IN Ord nvarchar(250),
IN ExtDCost nvarchar(250),
IN MyClientId int)
BEGIN
  DECLARE vendorId int;
  DECLARE ClientId int;
  DECLARE OutputString nvarchar(250);
  DECLARE c nvarchar(250);
  DECLARE l int;
  DECLARE p int;
  DECLARE POId int;

  -- SET ClientId=1;
  SET vendorId = -1;

  SELECT
    v.VendorId
  FROM Vendor v
  WHERE v.ClientId = MyClientId
  AND v.IsActive = 1
  AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci LIMIT 1 INTO vendorId;

  IF (vendorId != -1
    AND POumber <> 'PONUMBER') THEN
    IF NOT EXISTS (SELECT
          *
        FROM PO p
        WHERE p.ClientId = MyClientId
        AND LTRIM(RTRIM(LOWER(p.PONumber))) = LTRIM(RTRIM(LOWER(POumber))) COLLATE utf8_unicode_ci
        AND LTRIM(RTRIM(LOWER(p.VendorCatNumber))) = LTRIM(RTRIM(LOWER(VendorCatNum))) COLLATE utf8_unicode_ci
        AND LTRIM(RTRIM(LOWER(p.LineNo))) = LTRIM(RTRIM(LOWER(RecLineNo))) COLLATE utf8_unicode_ci
        AND LTRIM(RTRIM(LOWER(p.POLineId))) = LTRIM(RTRIM(LOWER(Ord))) COLLATE utf8_unicode_ci) THEN


      INSERT INTO PO (ClientId, VendorId, PONumber, VendorCatNumber, UnitOfPurchase,
      RcvdQty, UnitCost, ExtCost, Description, IsExpense, RecievedTransactionId, LineNo, POLineId, UserField10)
        VALUES (MyClientId, vendorId, RTRIM(LTRIM(POumber)), RTRIM(LTRIM(VendorCatNum)), RTRIM(LTRIM(UnitOfM)), QtyRcvd, UnitCost, ExtCost, Description, 0, RecivedTranID, RecLineNo, Ord, ExtDCost);
    ELSE
      SELECT
        Id
      FROM PO p
      WHERE p.ClientId = MyClientId
      AND LTRIM(RTRIM(LOWER(p.PONumber))) =
      LTRIM(RTRIM(LOWER(POumber))) COLLATE utf8_unicode_ci
      AND LTRIM(RTRIM(LOWER(p.VendorCatNumber))) =
      LTRIM(RTRIM(LOWER(VendorCatNum))) COLLATE utf8_unicode_ci
      AND LTRIM(RTRIM(LOWER(p.LineNo))) =
      LTRIM(RTRIM(LOWER(RecLineNo))) COLLATE utf8_unicode_ci
      AND LTRIM(RTRIM(LOWER(p.POLineId))) = LTRIM(RTRIM(LOWER(Ord))) COLLATE utf8_unicode_ci INTO POId;
      UPDATE PO p
      SET VendorId = vendorId,
          PONumber = RTRIM(LTRIM(POumber)),
          VendorCatNumber = RTRIM(LTRIM(VendorCatNum)),
          UnitOfPurchase = RTRIM(LTRIM(UnitOfM)),
          RcvdQty = QtyRcvd,
          UnitCost = UnitCost,
          ExtCost = ExtCost,
          RecievedTransactionId = RecivedTranID,
          LineNo = RecLineNo,
          POLineId = Ord,
          UserField10 = ExtDCost,
          Description = RTRIM(LTRIM(Description))
      WHERE p.Id = POId;
    END IF;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportKettlePOGPFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportKettlePOGPFromScript`(IN POumber nvarchar(250),
IN vendorNo nvarchar(250),
IN VendorCatNum nvarchar(250),
IN UnitOfM nvarchar(250),
IN QtyRcvd nvarchar(250),
IN UnitCost nvarchar(250),
IN ExtCost nvarchar(250),
IN Description nvarchar(250),
IN RecivedTranID nvarchar(250),
IN MyClientId int)
BEGIN
  DECLARE vendorId int;
  DECLARE ClientId int;
  DECLARE OutputString nvarchar(250);
  DECLARE c nvarchar(250);
  DECLARE l int;
  DECLARE p int;
  DECLARE POId int;

  -- SET ClientId=1;
  SET vendorId = -1;

  SELECT
    v.VendorId
  FROM Vendor v
  WHERE v.ClientId = MyClientId
  AND v.IsActive = 1
  AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci LIMIT 1 INTO vendorId;

  IF (vendorId != -1
    AND POumber <> 'PONUMBER') THEN
    IF NOT EXISTS (SELECT
          *
        FROM PO p
        WHERE p.ClientId = MyClientId
        AND LTRIM(RTRIM(LOWER(p.PONumber))) = LTRIM(RTRIM(LOWER(POumber))) COLLATE utf8_unicode_ci
        AND LTRIM(RTRIM(LOWER(p.VendorCatNumber))) = LTRIM(RTRIM(LOWER(VendorCatNum))) COLLATE utf8_unicode_ci) THEN


      INSERT INTO PO (ClientId, VendorId, PONumber, VendorCatNumber, UnitOfPurchase,
      RcvdQty, UnitCost, ExtCost, Description, IsExpense, RecievedTransactionId)
        VALUES (MyClientId, vendorId, RTRIM(LTRIM(POumber)), RTRIM(LTRIM(VendorCatNum)), RTRIM(LTRIM(UnitOfM)), QtyRcvd, UnitCost, ExtCost, Description, 0, RecivedTranID);
    ELSE
      SELECT
        Id
      FROM PO p
      WHERE p.ClientId = MyClientId
      AND LTRIM(RTRIM(LOWER(p.PONumber))) =
      LTRIM(RTRIM(LOWER(POumber))) COLLATE utf8_unicode_ci
      AND LTRIM(RTRIM(LOWER(p.VendorCatNumber))) =
      LTRIM(RTRIM(LOWER(VendorCatNum))) COLLATE utf8_unicode_ci INTO POId;
      UPDATE PO p
      SET VendorId = vendorId,
          PONumber = RTRIM(LTRIM(POumber)),
          VendorCatNumber = RTRIM(LTRIM(VendorCatNum)),
          UnitOfPurchase = RTRIM(LTRIM(UnitOfM)),
          RcvdQty = QtyRcvd,
          UnitCost = UnitCost,
          ExtCost = ExtCost,
          RecievedTransactionId = RecivedTranID,
          Description = RTRIM(LTRIM(Description))
      WHERE p.Id = POId;
    END IF;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportKettleSagePOFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportKettleSagePOFromScript`(IN paramPONumber nvarchar(250),
IN vendorNo nvarchar(250),
IN VendorCatNum nvarchar(250),
IN UnitOfM nvarchar(250),
IN QtyRcvd nvarchar(250),
IN paramUnitCost nvarchar(250),
IN paramExtCost nvarchar(250),
IN Description nvarchar(250),
IN RecivedTranID nvarchar(250),
IN paramPOLineNo int,
IN MyClientId int)
BEGIN
  DECLARE vendorId int;
  DECLARE ClientId int;
  DECLARE OutputString nvarchar(250);
  DECLARE c nvarchar(250);
  DECLARE l int;
  DECLARE p int;
  DECLARE POId int;

  -- SET ClientId=1;
  SET vendorId = -1;

  SELECT
    v.VendorId
  FROM Vendor v
  WHERE v.ClientId = MyClientId
  AND v.IsActive = 1
  AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci LIMIT 1 INTO vendorId;

  IF (vendorId != -1) THEN
    IF NOT EXISTS (SELECT
          *
        FROM PO p
        WHERE p.ClientId = MyClientId
        AND LTRIM(RTRIM(LOWER(p.PONumber))) = LTRIM(RTRIM(LOWER(paramPONumber))) COLLATE utf8_unicode_ci
        AND LTRIM(RTRIM(LOWER(p.VendorCatNumber))) = LTRIM(RTRIM(LOWER(VendorCatNum))) COLLATE utf8_unicode_ci
        AND RTRIM(LTRIM(LOWER(p.POLineId))) = RTRIM(LTRIM(LOWER(paramPOLineNo))) COLLATE utf8_unicode_ci) THEN

      INSERT INTO PO (ClientId, VendorId, PONumber, VendorCatNumber, UnitOfPurchase,
      RcvdQty, UnitCost, ExtCost, Description, IsExpense, RecievedTransactionId, POLineId)
        VALUES (MyClientId, vendorId, RTRIM(LTRIM(paramPONumber)), RTRIM(LTRIM(VendorCatNum)), RTRIM(LTRIM(UnitOfM)), QtyRcvd, paramUnitCost, paramExtCost, Description, 0, RecivedTranID, RTRIM(LTRIM(paramPOLineNo)));
    ELSE
      SELECT
        Id
      FROM PO p
      WHERE p.ClientId = MyClientId
      AND LTRIM(RTRIM(LOWER(p.PONumber))) = LTRIM(RTRIM(LOWER(paramPONumber))) COLLATE utf8_unicode_ci
      AND LTRIM(RTRIM(LOWER(p.VendorCatNumber))) = LTRIM(RTRIM(LOWER(VendorCatNum))) COLLATE utf8_unicode_ci
      AND LTRIM(RTRIM(LOWER(p.POLineId))) = LTRIM(RTRIM(LOWER(paramPOLineNo))) COLLATE utf8_unicode_ci INTO POId;
      UPDATE PO p
      SET VendorId = vendorId,
          PONumber = RTRIM(LTRIM(paramPONumber)),
          VendorCatNumber = RTRIM(LTRIM(VendorCatNum)),
          UnitOfPurchase = RTRIM(LTRIM(UnitOfM)),
          RcvdQty = QtyRcvd,
          UnitCost = paramUnitCost,
          ExtCost = paramExtCost,
          RecievedTransactionId = RecivedTranID,
          Description = RTRIM(LTRIM(Description)),
          POLineId = RTRIM(LTRIM(paramPOLineNo))
      WHERE p.Id = POId;
    END IF;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportMasonicareVendorFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportMasonicareVendorFromScript`(IN vendorName nvarchar(1000),
IN vendorNo nvarchar(1000),
IN address nvarchar(1000),
IN phone nvarchar(1000),
IN email nvarchar(1000),
IN fax nvarchar(900))
BEGIN

  DECLARE vendorId int;
  DECLARE ClientId int;
  SET ClientId = 5;

  IF (SELECT
        MAX(v.VendorId)
      FROM Vendor v) IS NOT NULL THEN
    SET vendorId = (SELECT
        MAX(v.VendorId)
      FROM apshtm.Vendor v) + 1;
  ELSE
    SET vendorId = 1;
  END IF;

  IF NOT EXISTS (SELECT
        *
      FROM Vendor v
      WHERE v.ClientId = ClientId COLLATE utf8_unicode_ci
      AND LOWER(v.VendorNo) = LOWER(vendorNo)) COLLATE utf8_unicode_ci
    AND (vendorName IS NOT NULL) THEN
    INSERT INTO Vendor (ClientId, VendorId, VendorName, ContactPerson, AddressId
    , Telephone, Fax, Email, VendorNo, DefaultGlCodeId, UserId, TaxCode)
      VALUES (ClientId, vendorId, vendorName, NULL, NULL, phone, fax, email, vendorNo, NULL, NULL, NULL);
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportPOFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportPOFromScript`(IN PONumber nvarchar(250),
IN POLineNum nvarchar(250),
IN VendorNum nvarchar(250),
IN POHeaderId nvarchar(250),
IN POLineId nvarchar(250),
IN POLineLocationId nvarchar(250),
IN ItemNo nvarchar(250),
IN VendorCatNum nvarchar(250),
IN ItemDescription nvarchar(250),
IN OrderedQuantity nvarchar(250),
IN UnitOfMeasurement nvarchar(250),
IN UnitPrice nvarchar(250),
IN RecievedTransactionId nvarchar(250),
IN Quantity nvarchar(250),
IN ExtAmount nvarchar(240),
IN ClientID int)
BEGIN
  DECLARE OutputString nvarchar(250);
  DECLARE c nvarchar(250);
  DECLARE l int;
  DECLARE p int;
  DECLARE vendorId int;
  DECLARE POId int;

  SET vendorId = -1;
  IF (PONumber != 'PO_NUMBER') THEN

    SELECT
      v.VendorId
    FROM Vendor v
    WHERE v.ClientId = ClientId COLLATE utf8_unicode_ci
    AND LTRIM(RTRIM(LOWER(v.VendorNo))) = LTRIM(RTRIM(LOWER(vendorNum))) COLLATE utf8_unicode_ci INTO vendorId;

    IF (vendorId != -1) THEN
      INSERT INTO PO (ClientId,
      VendorId,
      PONumber,
      VendorCatNumber,
      UnitOfPurchase,
      RcvdQty,
      UnitCost,
      ExtCost,
      ItemNumber,
      OrderQty
      , LineNo
      , Description
      , POHeaderId
      , POLineId
      , POLineLocationId
      , RecievedTransactionId)
        VALUES (ClientId, vendorId, RTRIM(LTRIM(PONumber)), RTRIM(LTRIM(VendorCatNum)), UnitOfMeasurement, Quantity, UnitPrice, ExtAmount, ItemNo, OrderedQuantity, RTRIM(LTRIM(POLineNum)), RTRIM(LTRIM(ItemDescription)), RTRIM(LTRIM(POHeaderId)), RTRIM(LTRIM(POLineId)), RTRIM(LTRIM(POLineLocationId)), RTRIM(LTRIM(RecievedTransactionId)));
    END IF;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportPOFromScriptSteel` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportPOFromScriptSteel`(IN PONumber nvarchar(250),
IN POLineNum nvarchar(250),
IN VendorNum nvarchar(250),
IN POHeaderId nvarchar(250),
IN POLineId nvarchar(250),
IN POLineLocationId nvarchar(250),
IN ItemNo nvarchar(250),
IN VendorCatNum nvarchar(250),
IN Container nvarchar(250),
IN POType nvarchar(250),
IN ItemDescription nvarchar(250),
IN OrderedQuantity nvarchar(250),
IN UnitOfMeasurement nvarchar(250),
IN UnitPrice nvarchar(250),
IN RecievedTransactionId nvarchar(250),
IN Quantity nvarchar(250),
IN ExtAmount nvarchar(250),
IN Threshold nvarchar(250),
IN DocType nvarchar(240),
IN ClientID int)
BEGIN
  DECLARE vendorId int;
  DECLARE POId int;
  DECLARE CompanyCode nvarchar(16);
  DECLARE vendorCnt int;

  SET CompanyCode = '2100';
  IF LOCATE('001', POLineLocationId) > 0 THEN
    SET CompanyCode = '1000';
  END IF;
  SELECT
    'Company code is ' + CompanyCode;
  SET vendorId = 999999;
  SET vendorCnt = (SELECT
      COUNT(*)
    FROM Vendor v,
         ClientCompany cc
    WHERE v.ClientId = ClientId
    AND cc.CompanyCode = CompanyCode COLLATE utf8_unicode_ci
    AND v.IsActive = 1
    AND LTRIM(RTRIM(LOWER(v.VendorNo))) =
    LTRIM(RTRIM(LOWER(vendorNum))) COLLATE utf8_unicode_ci
    AND v.ClientCompanyId = cc.Id);
  SELECT
    'Vendor count is ' + vendorCnt;
  IF (vendorCnt = 1) THEN
    SELECT
      v.VendorId
    FROM Vendor v,
         ClientCompany cc
    WHERE v.ClientId = ClientId
    AND LTRIM(RTRIM(LOWER(v.VendorNo))) = LTRIM(RTRIM(LOWER(vendorNum))) COLLATE utf8_unicode_ci
    AND v.ClientCompanyId =
    cc.Id
    AND cc.CompanyCode = CompanyCode COLLATE utf8_unicode_ci INTO vendorId;
  END IF;
  SELECT
    'Vendor id is ' + vendorId;
  INSERT INTO PO (ClientId,
  VendorId,
  PONumber,
  VendorCatNumber,
  GLCode,
  POType,
  UnitOfPurchase,
  RcvdQty,
  UnitCost,
  ExtCost,
  ItemNumber,
  OrderQty
  , LineNo
  , Description
  , POHeaderId
  , POLineId
  , POLineLocationId
  , UserField1
  , UserField4
  , RecievedTransactionId)
    VALUES (ClientId, vendorId, RTRIM(LTRIM(PONumber)), RTRIM(LTRIM(VendorCatNum)), RTRIM(LTRIM(Container)), POType, UnitOfMeasurement, Quantity, UnitPrice, ExtAmount, ItemNo, OrderedQuantity, RTRIM(LTRIM(POLineNum)), RTRIM(LTRIM(ItemDescription)), RTRIM(LTRIM(POHeaderId)), RTRIM(LTRIM(POLineId)), RTRIM(LTRIM(POLineLocationId)), RTRIM(LTRIM(DocType)), Threshold, RTRIM(LTRIM(RecievedTransactionId)));


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportRatnerActivityFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportRatnerActivityFromScript`(IN ActivityNo nvarchar(1000),
IN ActivityName nvarchar(1000),
IN CategoryNo nvarchar(900),
IN CategoryName nvarchar(1000),
IN ClientId int)
BEGIN
  DECLARE ActivityId int;
  IF NOT EXISTS (SELECT
        *
      FROM Customer cst
      WHERE LOWER(cst.CustomerName) =
      LOWER(ActivityName) COLLATE utf8_unicode_ci
      AND LOWER(cst.CustomerNo) = LOWER(ActivityNo) COLLATE utf8_unicode_ci
      AND cst.ClientId = ClientId COLLATE utf8_unicode_ci)
    AND ActivityName IS NOT NULL
    AND ActivityNo IS NOT NULL THEN
    INSERT INTO Customer (ClientId, CustomerName, CustomerNo)
      VALUES (ClientId, ActivityName, ActivityNo);
  END IF;

  SELECT
    CustomerId INTO ActivityId
  FROM Customer cst
  WHERE LOWER(cst.CustomerName)
  = LOWER(ActivityName) COLLATE utf8_unicode_ci
  AND LOWER(cst.CustomerNo) = LOWER(ActivityNo) COLLATE utf8_unicode_ci
  AND cst.ClientId = ClientId COLLATE utf8_unicode_ci;

  IF NOT EXISTS (SELECT
        *
      FROM Category cat
      WHERE LOWER(cat.CategoryName) =
      LOWER(CategoryName) COLLATE utf8_unicode_ci
      AND LOWER(cat.CategoryNo) = LOWER(CategoryNo) COLLATE utf8_unicode_ci
      AND cat.ClientId = ClientId COLLATE utf8_unicode_ci
      AND cat.CustomerId = ActivityId COLLATE utf8_unicode_ci)
    AND CategoryName IS NOT NULL
    AND CategoryNo IS NOT NULL THEN
    INSERT INTO Category (ClientId, CustomerId, CategoryNo, CategoryName)
      VALUES (ClientId, ActivityId, CategoryNo, CategoryName);
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportRatnerDefaultGlFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportRatnerDefaultGlFromScript`(IN AuthCode nvarchar(1000),
IN DepartmentName nvarchar(1000),
IN GlCodeName nvarchar(1000),
IN Amount nvarchar(1000),
IN Rate nvarchar(900),
IN ClientId int)
BEGIN
  DECLARE Id int;
  DECLARE GlCodeId int;
  DECLARE DepartmentId int;
  DECLARE OutputString nvarchar(250);
  DECLARE c nvarchar(250);
  DECLARE l int;
  DECLARE p int;

  IF (SELECT
        MAX(vgld.Id)
      FROM VendorGlDefault vgld) IS NOT NULL THEN
    SET Id = (SELECT
        MAX(vgld.Id)
      FROM VendorGlDefault vgld) + 1;
  ELSE
    SET Id = 1;
  END IF;

  IF (DepartmentName IS NOT NULL) THEN
    IF (CHAR_LENGTH(DepartmentName) < 5
      AND DepartmentName
      NOT LIKE '%[A-Za-z]%') THEN
      IF (CHAR_LENGTH(DepartmentName) = 1) THEN
        SET DepartmentName = '0000' + DepartmentName;
      ELSEIF (CHAR_LENGTH(DepartmentName) = 2) THEN
        SET DepartmentName = '000' + DepartmentName;
      ELSEIF (CHAR_LENGTH(DepartmentName) = 3) THEN
        SET DepartmentName = '00' + DepartmentName;
      ELSEIF (CHAR_LENGTH(DepartmentName) = 4) THEN
        SET DepartmentName = '0' + DepartmentName;
      END IF;
    END IF;
  END IF;

  SET OutputString = '';
  SET l = CHAR_LENGTH(GlCodeName);
  SET p = 1;

  WHILE p <= l DO
    SET c = SUBSTRING(GlCodeName, p, 1);
    IF (c != ',') THEN
      SET OutputString = OutputString + c;
    END IF;
    SET p = p + 1;
  END WHILE;

  SET GlCodeName = OutputString;

  IF EXISTS (SELECT
        *
      FROM Department dep
      WHERE dep.ClientId = ClientId
      AND LOWER(dep.DepartmentName) = LOWER(DepartmentName))
    AND DepartmentName IS NOT NULL THEN
    SELECT
      Id INTO DepartmentId
    FROM Department dep
    WHERE dep.ClientId =
    ClientId
    AND LOWER(dep.DepartmentName) = LOWER(DepartmentName);
  END IF;

  IF EXISTS (SELECT
        *
      FROM GLCode glc
      WHERE LOWER(glc.GLCodeName) = LOWER(GlCodeName) COLLATE utf8_unicode_ci
      AND glc.ClientId = ClientId COLLATE utf8_unicode_ci)
    AND GlCodeName IS NOT NULL THEN
    SELECT
      GLCodeId INTO GlCodeId
    FROM GLCode glc
    WHERE LOWER(glc.GLCodeName) =
    LOWER(GlCodeName) COLLATE utf8_unicode_ci
    AND glc.ClientId = ClientId COLLATE utf8_unicode_ci;
  END IF;

  IF (GlCodeId != -1
    AND DepartmentId != -1
    AND AuthCode IS NOT NULL) THEN
    IF NOT EXISTS (SELECT
          *
        FROM VendorGlDefault vgld
        WHERE vgld.ClientId = ClientId COLLATE utf8_unicode_ci
        AND LOWER(vgld.AuthCode) =
        LOWER(AuthCode) COLLATE utf8_unicode_ci
        AND vgld.DepartmentId = DepartmentId COLLATE utf8_unicode_ci
        AND vgld.GlCodeId = GlCodeId COLLATE utf8_unicode_ci) THEN
      INSERT INTO VendorGlDefault (Id, DepartmentId, GlCodeId, AuthCode, Amount, ClientId)
        VALUES (Id, DepartmentId, GlCodeId, AuthCode, Amount, ClientId);
    END IF;
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportRatnerDepartmentFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportRatnerDepartmentFromScript`(IN DepartmentName nvarchar(1000),
IN Description nvarchar(1000),
IN `Status` nvarchar(900),
IN ClientId int)
BEGIN
  DECLARE DepartmentId int;
  SET DepartmentId = -1;
  IF EXISTS (SELECT
        *
      FROM Department dep
      WHERE dep.ClientId = ClientId
      AND LOWER(dep.DepartmentName)
      = LOWER(DepartmentName))
    AND DepartmentName IS NOT NULL THEN
    SELECT
      Id INTO DepartmentId
    FROM Department dep
    WHERE dep.ClientId = ClientId COLLATE utf8_unicode_ci
    AND LOWER(dep.DepartmentName) = LOWER(DepartmentName) COLLATE utf8_unicode_ci;
    IF (DepartmentId != -1
      AND Description IS NOT NULL) THEN
      UPDATE Department dep
      SET dep.Description = Description
      WHERE dep.Id = DepartmentId COLLATE utf8_unicode_ci;
    END IF;
  ELSE
    INSERT INTO Department (DepartmentName, Description, ClientId)
      VALUES (DepartmentName, Description, ClientId);
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportRatnerGLFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportRatnerGLFromScript`(IN GlCodeName nvarchar(1000),
IN SubAccount nvarchar(1000),
IN GlCodeDescription nvarchar(1000),
IN DepartmentName nvarchar(1000),
IN ActivityREQUIRED nvarchar(900),
IN ClientId int)
BEGIN
  DECLARE GlCodeId int;
  DECLARE DepId int;
  DECLARE activityReq tinyint;

  SET activityReq = 0;

  IF (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) IS NOT NULL THEN
    SET GlCodeId = (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) + 1;
  ELSE
    SET GlCodeId = 1;
  END IF;

  IF NOT EXISTS (SELECT
        *
      FROM GLCode glc
      WHERE LOWER(glc.GLCodeName) =
      LOWER(GlCodeName) COLLATE utf8_unicode_ci
      AND glc.ClientId = ClientId COLLATE utf8_unicode_ci) THEN
    IF (LOWER(ActivityREQUIRED) = 'y') THEN
      SET activityReq = 1;
    ELSE
      SET activityReq = 0;
    END IF;
    INSERT INTO GLCode (ClientId, GLCodeId, GLCodeName, Desccription, ActivityRequired, subaccount)
      VALUES (ClientId, GlCodeId, GlCodeName, GlCodeDescription, activityReq, SubAccount);
  ELSE
    SELECT
      GLCodeId INTO GlCodeId
    FROM GLCode glc
    WHERE LOWER(glc.GLCodeName)
    = LOWER(GlCodeName) COLLATE utf8_unicode_ci
    AND glc.ClientId = ClientId COLLATE utf8_unicode_ci;
  END IF;

  IF (DepartmentName IS NOT NULL) THEN
    IF (CHAR_LENGTH(DepartmentName) < 5
      AND DepartmentName NOT LIKE '%A-Za-z%') THEN
      IF (CHAR_LENGTH(DepartmentName) = 1) THEN
        SET DepartmentName = '0000' + DepartmentName;
      ELSEIF (CHAR_LENGTH(DepartmentName) = 2) THEN
        SET DepartmentName = '000' + DepartmentName;
      ELSEIF (CHAR_LENGTH(DepartmentName) = 3) THEN
        SET DepartmentName = '00' + DepartmentName;
      ELSEIF (CHAR_LENGTH(DepartmentName) = 4) THEN
        SET DepartmentName = '0' + DepartmentName;
      END IF;
    END IF;
  END IF;

  IF NOT EXISTS (SELECT
        *
      FROM Department dep
      WHERE dep.ClientId = ClientId COLLATE utf8_unicode_ci
      AND LOWER(dep.DepartmentName) = LOWER(DepartmentName) COLLATE utf8_unicode_ci) THEN
    INSERT INTO Department (DepartmentName, ClientId)
      VALUES (DepartmentName, ClientId);
  END IF;

  SELECT
    dep.Id INTO DepId
  FROM Department dep
  WHERE dep.ClientId = ClientId COLLATE utf8_unicode_ci
  AND LOWER(dep.DepartmentName) = LOWER(DepartmentName) COLLATE utf8_unicode_ci;

  IF NOT EXISTS (SELECT
        *
      FROM DepartmentGLCode
      WHERE DepartmentId = DepId
      AND GLCodeId = GlCodeId) THEN
    INSERT INTO DepartmentGLCode (DepartmentId, GLCodeId)
      VALUES (DepId, GlCodeId);
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportRatnerTaxFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportRatnerTaxFromScript`(IN TaxCode nvarchar(1000),
IN DepartmentName nvarchar(1000),
IN TaxRate nvarchar(900),
IN ClientId int)
BEGIN
  DECLARE DepartmentId int;
  SET DepartmentId = -1;
  IF (DepartmentName IS NOT NULL) THEN
    IF (CHAR_LENGTH(DepartmentName) < 5
      AND DepartmentName NOT LIKE '%[A-Za-z]%') THEN
      IF (CHAR_LENGTH(DepartmentName) = 1) THEN
        SET DepartmentName = '0000' + DepartmentName;
      ELSEIF (CHAR_LENGTH(DepartmentName) = 2) THEN
        SET DepartmentName = '000' + DepartmentName;
      ELSEIF (CHAR_LENGTH(DepartmentName) = 3) THEN
        SET DepartmentName = '00' + DepartmentName;
      ELSEIF (CHAR_LENGTH(DepartmentName) = 4) THEN
        SET DepartmentName = '0' + DepartmentName;
      END IF;
    END IF;
  END IF;

  IF NOT EXISTS (SELECT
        *
      FROM Department dep
      WHERE dep.ClientId = ClientId COLLATE utf8_unicode_ci
      AND LOWER(dep.DepartmentName) = LOWER(DepartmentName) COLLATE utf8_unicode_ci)
    AND DepartmentName IS NOT NULL THEN
    INSERT INTO Department (DepartmentName, ClientId)
      VALUES (DepartmentName, ClientId);
  END IF;

  SELECT
    dep.Id INTO DepartmentId
  FROM Department dep
  WHERE dep.ClientId = ClientId COLLATE utf8_unicode_ci
  AND LOWER(dep.DepartmentName) = LOWER(DepartmentName) COLLATE utf8_unicode_ci;

  IF (DepartmentId != -1
    AND TaxCode IS NOT NULL
    AND TaxRate IS NOT NULL) THEN
    IF NOT EXISTS (SELECT
          *
        FROM Tax tx
        WHERE tx.ClientId = ClientId COLLATE utf8_unicode_ci
        AND LOWER(tx.TaxCode) = LOWER(TaxCode) COLLATE utf8_unicode_ci
        AND tx.DepartmentId = DepartmentId COLLATE utf8_unicode_ci
        AND LOWER(tx.TaxRate) = LOWER(TaxRate) COLLATE utf8_unicode_ci) THEN
      INSERT INTO Tax (DepartmentId, TaxCode, TaxRate, ClientId)
        VALUES (DepartmentId, TaxCode, TaxRate, ClientId);
    END IF;
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportRatnerVendorFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportRatnerVendorFromScript`(IN VendorName nvarchar(1000),
IN VendorNo nvarchar(1000),
IN Add1 nvarchar(1000), IN AddDECLARE nvarchar(1000), IN Add3 nvarchar(1000), IN Add4 nvarchar(1000), IN Add5 nvarchar(1000),
IN State nvarchar(1000), IN Zip nvarchar(1000), IN Class nvarchar(1000), IN Location nvarchar(1000),
IN Remit nvarchar(1000), IN Discount nvarchar(1000), IN Net nvarchar(1000), IN NetDisper nvarchar(1000), IN DefaultGl nvarchar(1000),
IN AuthCode nvarchar(900), IN ClientId int)
BEGIN
  DECLARE OutputString nvarchar(1000);
  DECLARE c nvarchar(1000);
  DECLARE l int;
  DECLARE p int;
  DECLARE AddressId int;
  DECLARE StateIdId int;
  DECLARE LocId int;
  DECLARE NetD int;
  DECLARE DiscountD int;
  DECLARE NetDisperD float;
  DECLARE myVendorId int;


  SET StateIdId = NULL;
  SET NetD = NULL;
  SET DiscountD = NULL;
  SET NetDisperD = NULL;


  IF (Net IS NOT NULL
    AND Net != '') THEN
    SET NetD = Net;
  ELSE
    SET NetD = NULL;
  END IF;

  IF (Discount IS NOT NULL
    AND Discount != '') THEN
    SET DiscountD = Discount;
  ELSE
    SET DiscountD = NULL;
  END IF;

  IF (NetDisper IS NOT NULL
    AND NetDisper != '') THEN
    SET NetDisperD = NetDisper;
  ELSE
    SET NetDisperD = NULL;
  END IF;

  IF (VendorNo IS NOT NULL
    AND vendorName IS NOT NULL
    AND VendorNo NOT LIKE '%A-Za-z%') THEN
    IF NOT EXISTS (SELECT
          *
        FROM Vendor V
        WHERE V.ClientId = ClientId COLLATE utf8_unicode_ci
        AND LOWER(V.VendorNo) = LOWER(vendorNo) COLLATE utf8_unicode_ci) THEN
      IF (SELECT
            MAX(V.VendorId)
          FROM Vendor V) IS NOT NULL THEN
        SET myVendorId = (SELECT
            MAX(V.VendorId)
          FROM Vendor V) + 1;
      ELSE
        SET myVendorId = 1;
      END IF;
      INSERT INTO Vendor (ClientId, VendorId, VendorName, ContactPerson, AddressId
      , Telephone, Fax, Email, VendorNo, DefaultGlCodeId, UserId, TaxCode, AuthCode, DefaultAuthCode, First_Net_Days, Discount_Day_01, NetDisPer, IsActive)
        VALUES (ClientId, myVendorId, vendorName, NULL, NULL, NULL, NULL, NULL, vendorNo, NULL, NULL, NULL, AuthCode, DefaultGl, NetD, DiscountD, NetDisperD, 1);

      IF NOT EXISTS (SELECT
            *
          FROM Location loc
          WHERE loc.VendorId = vendorId COLLATE utf8_unicode_ci
          AND LOWER(loc.LocationCode) = LOWER(Location) COLLATE utf8_unicode_ci)
        AND (Location IS NOT NULL) THEN
        IF EXISTS (SELECT
              *
            FROM State st
            WHERE LOWER(st.StateNameShort) =
            LOWER(State) COLLATE utf8_unicode_ci
            OR LOWER(st.StateName) = LOWER(State) COLLATE utf8_unicode_ci)
          AND State IS NOT NULL THEN
          SELECT
            StateId INTO StateIdId
          FROM State st
          WHERE LOWER(st.StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
          OR LOWER(st.StateName) = LOWER(State) COLLATE utf8_unicode_ci;
        END IF;

        INSERT INTO Address (StateId, ZipCode, CityName, Address1, Address2, Address3, Address4)
          VALUES (StateIdId, Zip, Add5, Add1, AddDECLARE, Add3, Add4);

        INSERT INTO Location (VendorId, LocationCode, AddressId)
          VALUES (myVendorId, Location, AddressId);
      ELSEIF (Location IS NOT NULL) THEN
        SELECT
          Id INTO LocId
        FROM Location loc
        WHERE loc.VendorId = vendorId COLLATE utf8_unicode_ci
        AND LOWER(loc.LocationCode) = LOWER(Location) COLLATE utf8_unicode_ci;
        IF EXISTS (SELECT
              *
            FROM State st
            WHERE LOWER(st.StateNameShort) =
            LOWER(State) COLLATE utf8_unicode_ci
            OR LOWER(st.StateName) = LOWER(State) COLLATE utf8_unicode_ci)
          AND State IS NOT NULL THEN
          SELECT
            StateId INTO StateIdId
          FROM State st
          WHERE LOWER(st.StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
          OR LOWER(st.StateName) = LOWER(State) COLLATE utf8_unicode_ci;
        END IF;

        INSERT INTO Address (StateId, ZipCode, CityName, Address1, Address2, Address3, Address4)
          VALUES (StateIdId, Zip, Add5, Add1, AddDECLARE, Add3, Add4);

        UPDATE Location loc
        SET loc.AddressId = AddressId
        WHERE loc.Id = LocId COLLATE utf8_unicode_ci;
      ELSEIF (Location IS NULL) THEN
        IF EXISTS (SELECT
              *
            FROM State st
            WHERE LOWER(st.StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
            OR LOWER(st.StateName) = LOWER(State) COLLATE utf8_unicode_ci)
          AND State IS NOT NULL THEN
          SELECT
            StateId INTO StateIdId
          FROM State st
          WHERE LOWER(st.StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
          OR LOWER(st.StateName) = LOWER(State) COLLATE utf8_unicode_ci;
        END IF;

        INSERT INTO Address (StateId, ZipCode, CityName, Address1, Address2, Address3, Address4)
          VALUES (StateIdId, Zip, Add5, Add1, AddDECLARE, Add3, Add4);

        UPDATE Vendor v
        SET v.AddressId = AddressId
        WHERE v.VendorId = vendorId COLLATE utf8_unicode_ci;
      END IF;
    ELSE
      SET myVendorId = (SELECT
          VendorId
        FROM Vendor v
        WHERE v.ClientId = ClientId
        AND LOWER(v.VendorNo) = LOWER(VendorNo) COLLATE utf8_unicode_ci
        AND v.IsActive = 1);
      UPDATE Vendor v
      SET v.First_Net_Days = NetD,
          v.Discount_Day_01 = DiscountD,
          v.VendorName = VendorName,
          v.NetDisPer = NetDisperD,
          v.AuthCode = AuthCode,
          v.DefaultAuthCode = DefaultGl
      WHERE v.VendorId = myVendorId;
    END IF;
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportSelfGLFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportSelfGLFromScript`(IN Col1 nvarchar(250),
IN Col2 nvarchar(250),
IN Col3 nvarchar(250),
IN Col4 nvarchar(250),
IN Col5 nvarchar(250),
IN Col6 nvarchar(240),
IN Col7 nvarchar(250),
IN Col8 nvarchar(240))
BEGIN
  DECLARE GlCId int;
  DECLARE DepId int;
  DECLARE activityReq bit;
  DECLARE ClientId int;

  SET ClientId = 15;
  SET activityReq = 0;

  IF (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) IS NOT NULL THEN
    SET GlCId = (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) + 1;
  ELSE
    SET GlCId = 1;
  END IF;

  IF (Col1 != 'ACCT_CODE') THEN
    IF NOT EXISTS (SELECT
          *
        FROM GLCode glc
        WHERE RTRIM(LTRIM(LOWER(glc.GLCodeName)))
        = RTRIM(LTRIM(LOWER(Col1))) COLLATE utf8_unicode_ci
        AND glc.ClientId = ClientId) THEN
      IF (LOWER(Col8) = '1') THEN
        SET activityReq = 1;
      ELSE
        SET activityReq = 0;
      END IF;
      -- select GlCId;
      INSERT INTO GLCode (ClientId, GLCodeId, GLCodeName, Desccription, ActivityRequired)
        VALUES (ClientId, GlCId, RTRIM(LTRIM(Col1)), RTRIM(LTRIM(Col7)), activityReq);
    -- Select 'Inserting';
    ELSE
      -- Select 'Selecting';
      SELECT
        GLCodeId
      FROM GLCode glc
      WHERE RTRIM(LTRIM(LOWER(glc.GLCodeName))) = RTRIM(LTRIM(LOWER(Col1))) COLLATE utf8_unicode_ci
      AND glc.ClientId = ClientId INTO GlCId;

    END IF;

    IF NOT EXISTS (SELECT
          *
        FROM Department dep
        WHERE dep.ClientId = ClientId
        AND LOWER(RTRIM(LTRIM(dep.DepartmentName))) = LOWER(RTRIM(LTRIM((Col4)))) COLLATE utf8_unicode_ci) THEN
      INSERT INTO Department (ClientId, DepartmentName, Description)
        VALUES (ClientId, RTRIM(LTRIM(Col4)), RTRIM(LTRIM(Col5)));
    END IF;
    SELECT
      Id
    FROM Department dep
    WHERE dep.ClientId = ClientId
    AND LOWER(RTRIM(LTRIM(DepartmentName))) =
    LOWER(RTRIM(LTRIM(Col4))) COLLATE utf8_unicode_ci INTO DepId;
    IF NOT EXISTS (SELECT
          *
        FROM DepartmentGLCode dep
        WHERE dep.DepartmentId = DepId
        AND dep.GLCodeId = GlCId) THEN

      INSERT INTO DepartmentGLCode (DepartmentId, GLCodeId)
        VALUES (DepId, GlCId);
    END IF;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportSelfPOFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportSelfPOFromScript`(IN Col1 nvarchar(250),
IN Col2 nvarchar(250),
IN Col3 nvarchar(250),
IN PONumber nvarchar(250),
IN ExtAmount nvarchar(250),
IN Description nvarchar(250),
IN ItemNo nvarchar(250),
IN Col4 nvarchar(250),
IN Col5 nvarchar(250),
IN LineNo nvarchar(250),
IN Col6 nvarchar(250),
IN VendorCatNum nvarchar(250),
IN UnitOfMeasurement nvarchar(250),
IN Quantity nvarchar(250),
IN UnitPrice nvarchar(250),
IN Col7 nvarchar(250),
IN Col8 nvarchar(250),
IN VendorNum nvarchar(240),
IN Col9 nvarchar(250))
BEGIN
  DECLARE OutputString nvarchar(250);
  DECLARE c nvarchar(250);
  DECLARE l int;
  DECLARE p int;
  DECLARE MyVendorId int;
  DECLARE POId int;
  DECLARE ClientId int;

  SET ClientId = 15;
  IF (SELECT
        MAX(v.VendorId)
      FROM Vendor v) IS NOT NULL THEN
    SET MyVendorId = (SELECT
        MAX(v.VendorId)
      FROM Vendor v) + 1;
  ELSE
    SET MyVendorId = 1;
  END IF;

  IF (Col1 IS NOT NULL
    AND Col1 != 'PO_REC_TYPE') THEN


    IF NOT EXISTS (SELECT
          *
        FROM Vendor v
        WHERE v.ClientId = ClientId
        AND LTRIM(RTRIM(LOWER(v.VendorNo))) =
        LTRIM(RTRIM(LOWER(vendorNum))) COLLATE utf8_unicode_ci) THEN
      INSERT INTO Vendor (VendorId, ClientId, VendorName, VendorNo, IsActive)
        VALUES (MyVendorId, ClientId, LTRIM(RTRIM(VendorNum)), LTRIM(RTRIM(VendorNum)), 1);
    END IF;

    SELECT
      v.VendorId
    FROM Vendor v
    WHERE v.ClientId = ClientId
    AND LTRIM(RTRIM(LOWER(v.VendorNo))) = LTRIM(RTRIM(LOWER(vendorNum))) COLLATE utf8_unicode_ci LIMIT 1 INTO MyVendorId;

    IF (MyVendorId != -1) THEN
      IF NOT EXISTS (SELECT
            *
          FROM PO p
          WHERE p.ClientId = ClientId
          AND LTRIM(RTRIM(LOWER(p.PONumber))) =
          LTRIM(RTRIM(LOWER(PONumber)) COLLATE utf8_unicode_ci)
          AND LTRIM(RTRIM(LOWER(p.ItemNumber))) = LTRIM(RTRIM(LOWER(ItemNo))) COLLATE utf8_unicode_ci) THEN
        INSERT INTO PO (ClientId, VendorId, PONumber, VendorCatNumber, UnitOfPurchase,
        RcvdQty, UnitCost, ExtCost, ItemNumber, LineNo, Description)
          VALUES (ClientId, MyVendorId, RTRIM(LTRIM(PONumber)), VendorCatNum, UnitOfMeasurement, Quantity, UnitPrice, ExtAmount, ItemNo, RTRIM(LTRIM(LineNo)), Description);
      ELSE
        SELECT
          Id
        FROM PO p
        WHERE p.ClientId = ClientId
        AND LTRIM(RTRIM(LOWER(p.PONumber))) = LTRIM(RTRIM(LOWER(PONumber))) COLLATE utf8_unicode_ci
        AND LTRIM(RTRIM(LOWER(p.ItemNumber))) = LTRIM(RTRIM(LOWER(ItemNo))) COLLATE utf8_unicode_ci LIMIT 1 INTO POId;
        UPDATE PO p
        SET VendorId = MyVendorId,
            PONumber = RTRIM(LTRIM(PONumber)),
            VendorCatNumber = RTRIM(LTRIM(VendorCatNum)),
            UnitOfPurchase = UnitOfMeasurement,
            RcvdQty = Quantity,
            UnitCost = UnitPrice,
            ExtCost = ExtAmount,
            ItemNumber = ItemNo,
            LineNo = RTRIM(LTRIM(LineNo)),
            Description = RTRIM(LTRIM(Description))
        WHERE p.Id = POId;
      END IF;

      SELECT
        Id
      FROM PO p
      WHERE p.ClientId = ClientId
      AND LTRIM(RTRIM(LOWER(p.PONumber))) = LTRIM(RTRIM(LOWER(PONumber))) COLLATE utf8_unicode_ci
      AND LTRIM(RTRIM(LOWER(p.LineNo))) = LTRIM(RTRIM(LOWER(LineNo))) COLLATE utf8_unicode_ci LIMIT 1 INTO POId;
      UPDATE PO p
      SET p.ExtCost = (UnitCost * RcvdQty)
      WHERE p.Id = POId;
    END IF;
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportSelfstagingfromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportSelfstagingfromScript`(IN Col1 nvarchar(250),
IN Col2 nvarchar(250),
IN Col3 nvarchar(250),
IN PONumber nvarchar(250),
IN ExtAmount nvarchar(250),
IN Description nvarchar(250),
IN ItemNo nvarchar(250),
IN Col4 nvarchar(250),
IN Col5 nvarchar(250),
IN LineNo nvarchar(250),
IN Col6 nvarchar(250),
IN VendorCatNum nvarchar(250),
IN UnitOfMeasurement nvarchar(250),
IN Quantity nvarchar(250),
IN UnitPrice nvarchar(250),
IN Col7 nvarchar(250),
IN Col8 nvarchar(250),
IN VendorNum nvarchar(240),
IN Col9 nvarchar(250))
BEGIN
  DECLARE OutputString nvarchar(250);
  DECLARE c nvarchar(250);
  DECLARE l int;
  DECLARE p int;
  DECLARE MyVendorId int;
  DECLARE POId int;
  DECLARE ClientId int;

  SET ClientId = 166;
  IF (SELECT
        MAX(v.VendorId)
      FROM Vendor v) IS NOT NULL THEN
    SET MyVendorId = (SELECT
        MAX(v.VendorId)
      FROM Vendor v) + 1;
  ELSE
    SET MyVendorId = 1;
  END IF;

  IF (Col1 IS NOT NULL
    AND Col1 != 'PO_REC_TYPE') THEN


    IF NOT EXISTS (SELECT
          *
        FROM Vendor v
        WHERE v.ClientId = ClientId
        AND LTRIM(RTRIM(LOWER(v.VendorNo))) =
        LTRIM(RTRIM(LOWER(vendorNum))) COLLATE utf8_unicode_ci) THEN
      INSERT INTO Vendor (VendorId, ClientId, VendorName, VendorNo, IsActive)
        VALUES (MyVendorId, ClientId, LTRIM(RTRIM(VendorNum)), LTRIM(RTRIM(VendorNum)), 1);
    END IF;

    SELECT
      v.VendorId
    FROM Vendor v
    WHERE v.ClientId = ClientId
    AND LTRIM(RTRIM(LOWER(v.VendorNo))) = LTRIM(RTRIM(LOWER(vendorNum))) COLLATE utf8_unicode_ci LIMIT 1 INTO MyVendorId;

    IF (MyVendorId != -1) THEN
      IF NOT EXISTS (SELECT
            *
          FROM PO p
          WHERE p.ClientId = ClientId
          AND LTRIM(RTRIM(LOWER(p.PONumber))) =
          LTRIM(RTRIM(LOWER(PONumber)) COLLATE utf8_unicode_ci)
          AND LTRIM(RTRIM(LOWER(p.ItemNumber))) = LTRIM(RTRIM(LOWER(ItemNo))) COLLATE utf8_unicode_ci) THEN
        INSERT INTO PO (ClientId, VendorId, PONumber, VendorCatNumber, UnitOfPurchase,
        RcvdQty, UnitCost, ExtCost, ItemNumber, LineNo, Description)
          VALUES (ClientId, MyVendorId, RTRIM(LTRIM(PONumber)), VendorCatNum, UnitOfMeasurement, Quantity, UnitPrice, ExtAmount, ItemNo, RTRIM(LTRIM(LineNo)), Description);
      ELSE
        SELECT
          Id
        FROM PO p
        WHERE p.ClientId = ClientId
        AND LTRIM(RTRIM(LOWER(p.PONumber))) = LTRIM(RTRIM(LOWER(PONumber))) COLLATE utf8_unicode_ci
        AND LTRIM(RTRIM(LOWER(p.ItemNumber))) = LTRIM(RTRIM(LOWER(ItemNo))) COLLATE utf8_unicode_ci LIMIT 1 INTO POId;
        UPDATE PO p
        SET VendorId = MyVendorId,
            PONumber = RTRIM(LTRIM(PONumber)),
            VendorCatNumber = RTRIM(LTRIM(VendorCatNum)),
            UnitOfPurchase = UnitOfMeasurement,
            RcvdQty = Quantity,
            UnitCost = UnitPrice,
            ExtCost = ExtAmount,
            ItemNumber = ItemNo,
            LineNo = RTRIM(LTRIM(LineNo)),
            Description = RTRIM(LTRIM(Description))
        WHERE p.Id = POId;
      END IF;

      SELECT
        Id
      FROM PO p
      WHERE p.ClientId = ClientId
      AND LTRIM(RTRIM(LOWER(p.PONumber))) = LTRIM(RTRIM(LOWER(PONumber))) COLLATE utf8_unicode_ci
      AND LTRIM(RTRIM(LOWER(p.LineNo))) = LTRIM(RTRIM(LOWER(LineNo))) COLLATE utf8_unicode_ci LIMIT 1 INTO POId;
      UPDATE PO p
      SET p.ExtCost = (UnitCost * RcvdQty)
      WHERE p.Id = POId;
    END IF;
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportSelfVendorFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportSelfVendorFromScript`(IN VendorName nvarchar(250),
IN VendorNo nvarchar(250),
IN Discount nvarchar(250), IN Net nvarchar(250), IN NetDisper nvarchar(250),
IN Col nvarchar(250), IN Address1 nvarchar(250), IN Address2 nvarchar(250),
IN Address3 nvarchar(250), IN City nvarchar(250), IN State nvarchar(250),
IN ZCode nvarchar(250))
BEGIN
  DECLARE OutputString nvarchar(250);
  DECLARE c nvarchar(250);
  DECLARE l int;
  DECLARE p int;
  DECLARE MyVendorId int;
  DECLARE MyAddressId int;
  DECLARE MyClientId int;
  DECLARE AddressId int;
  DECLARE StateIdId int;

  SET StateIdId = NULL;
  SET MyClientId = 15;
  -- select VendorName;
  IF (SELECT
        MAX(v.VendorId)
      FROM Vendor v) IS NOT NULL THEN
    SET MyVendorId = (SELECT
        MAX(v.VendorId)
      FROM Vendor v) + 1;
  ELSE
    SET MyVendorId = 1;
  END IF;

  IF (SELECT
        MAX(adr.AddressId)
      FROM Address adr) IS NOT NULL THEN
    SET AddressId = (SELECT
        MAX(adr.AddressId)
      FROM Address adr) + 1;
  ELSE
    SET AddressId = 1;
  END IF;
  -- select VendorName;  
  IF (VendorName != 'NAME') THEN
    IF NOT EXISTS (SELECT
          *
        FROM Vendor v
        WHERE v.ClientId = MyClientId
        AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci)
      AND (vendorName IS NOT NULL
      AND VendorNo IS NOT NULL) THEN
      --  select 'Adding vendor';
      IF EXISTS (SELECT
            *
          FROM State st
          WHERE LOWER(st.StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
          OR LOWER(st.StateName) = LOWER(State) COLLATE utf8_unicode_ci)
        AND State IS NOT NULL THEN
        SELECT
          StateId
        FROM State st
        WHERE LOWER(st.StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
        OR LOWER(st.StateName) = LOWER(State) COLLATE utf8_unicode_ci LIMIT 1 INTO StateIdId;
      END IF;
      -- select StateIdId;            
      INSERT INTO Address (StateId, ZipCode, Address1, Address2, Address3, CityName)
        VALUES (StateIdId, ZCode, Address1, Address2, Address3, City);

      INSERT INTO Vendor (ClientId, VendorId, VendorName, ContactPerson, AddressId
      , Telephone, Fax, Email, VendorNo, DefaultGlCodeId, UserId, TaxCode, AuthCode,
      DefaultAuthCode, First_Net_Days, Discount_Day_01, NetDisPer, AccountCode, IsActive)
        VALUES (MyClientId, MyVendorId, RTRIM(LTRIM(vendorName)), NULL, AddressId, NULL, NULL, NULL, RTRIM(LTRIM(vendorNo)), NULL, NULL, NULL, NULL, NULL, Net, Discount, NetDisper, 'OPER_CK', 1);

    ELSE
      -- select VendorName;
      SELECT
        VendorId,
        AddressId
      FROM Vendor v
      WHERE v.ClientId = MyClientId
      AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci LIMIT 1 INTO MyVendorId, MyAddressId;

      IF EXISTS (SELECT
            *
          FROM State st
          WHERE LOWER(st.StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
          OR LOWER(st.StateName) = LOWER(State) COLLATE utf8_unicode_ci)
        AND State IS NOT NULL THEN
        SELECT
          StateId
        FROM State st
        WHERE LOWER(st.StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
        OR LOWER(st.StateName) = LOWER(State) COLLATE utf8_unicode_ci LIMIT 1 INTO StateIdId;
      END IF;

      IF MyAddressId IS NULL THEN
        INSERT INTO Address (StateId, ZipCode, Address1, Address2, Address3, CityName)
          VALUES (StateIdId, ZCode, Address1, Address2, Address3, City);

        UPDATE Vendor v
        SET v.AddressId = AddressId,
            v.VendorName = RTRIM(LTRIM(VendorName)),
            IsActive = 1
        WHERE v.VendorId = MyVendorId;

      ELSE
        UPDATE Address A
        SET A.StateId = StateIdId,
            A.ZipCode = ZCode,
            A.Address1 = Address1,
            A.Address2 = Address2,
            A.Address3 = Address3,
            A.CityName = City
        WHERE A.AddressId = MyAddressId;

        UPDATE Vendor v
        SET v.VendorName = RTRIM(LTRIM(VendorName)),
            IsActive = 1
        WHERE v.VendorId = MyVendorId;

      END IF;

    END IF;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `importSimpleVendorFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `importSimpleVendorFromScript`(IN vendorNo nvarchar(50),
IN vendorName nvarchar(250),
IN MyClientId int)
BEGIN
  DECLARE maxVendordId int;
  IF (SELECT
        MAX(v.VendorId)
      FROM Vendor v) IS NOT NULL THEN
    SET maxVendordId = (SELECT
        MAX(v.VendorId)
      FROM Vendor v) + 1;
  ELSE
    SET maxVendordId = 1;
  END IF;
  IF NOT EXISTS (SELECT
        *
      FROM Vendor v
      WHERE v.ClientId = MyClientId
      AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci) THEN
    INSERT INTO Vendor (VendorId, ClientId, VendorNo, VendorName, isactive)
      VALUES (maxVendordId, MyClientId, RTRIM(LTRIM(vendorNo)), RTRIM(LTRIM(vendorName)), 1);
  ELSEIF ((vendorName IS NOT NULL
    AND VendorNo IS NOT NULL)) THEN
    SELECT
      VendorId
    FROM Vendor v
    WHERE v.ClientId = MyClientId
    AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci
    LIMIT 1 INTO maxVendordId;
    UPDATE Vendor
    SET `VendorName` = vendorName,
        IsActive = 1
    WHERE VendorID = maxVendordId;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportUser` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportUser`(IN userFirstName nvarchar(240),
IN userLastName nvarchar(240),
IN userEmail nvarchar(240),
IN userID nvarchar(240),
IN userRole int,
IN userClientId int)
BEGIN
  IF NOT EXISTS (SELECT
        *
      FROM `User`
      WHERE ClientId = userClientId
      AND Email = userEmail COLLATE utf8_unicode_ci) THEN
    INSERT INTO `User` (ClientId, UserId, UserName, RoleId, FirstName, LastName, Email, IsActive)
      VALUES (userClientId, userID, userEmail, userRole, userFirstName, userLastName, userEmail, TRUE);
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportVendorFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportVendorFromScript`(IN vendorNo nvarchar(50),
IN vendorName nvarchar(250),
IN col1 nvarchar(50), -- Discount Day
IN col2 nvarchar(50), -- First net day
IN col3 nvarchar(50), -- Net Percentage
IN col4 nvarchar(50), -- Account Code
IN DefaultGL nvarchar(250),
IN MyClientId int)
BEGIN
  DECLARE maxVendordId int;
  DECLARE MyGlCodeId int;
  DECLARE OutputString nvarchar(250);
  DECLARE c nvarchar(250);
  DECLARE l int;
  DECLARE p int;

  IF (SELECT
        MAX(v.VendorId)
      FROM Vendor v) IS NOT NULL THEN
    SET maxVendordId = (SELECT
        MAX(v.VendorId)
      FROM Vendor v) + 1;
  ELSE
    SET maxVendordId = 1;
  END IF;

  IF (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) IS NOT NULL THEN
    SET MyGlCodeId = (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) + 1;
  ELSE
    SET MyGlCodeId = 1;
  END IF;

  -- select maxVendordId,MyClientId,RTRim(LTRIM(vendorNo)),RTRim(LTRIM(vendorName)),RTRim(LTRIM(col2)),RTRim(LTRIM(col1)),RTRim(LTRIM(col3)),MyGlCodeId,1;

  IF NOT EXISTS (SELECT
        *
      FROM Vendor v
      WHERE v.ClientId = MyClientId
      AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci) THEN
    IF NOT EXISTS (SELECT
          *
        FROM GLCode glc
        WHERE glc.ClientId = MyClientId
        AND RTRIM(LTRIM(LOWER(glc.GLCodeName))) = RTRIM(LTRIM(LOWER(DefaultGL))) COLLATE utf8_unicode_ci)
      AND DefaultGL IS NOT NULL THEN
      INSERT INTO GLCode (ClientId, GLCodeId, GLCodeName, Desccription)
        VALUES (MyClientId, MyGlCodeId, RTRIM(LTRIM(DefaultGL)), '');
    ELSEIF (DefaultGL IS NOT NULL) THEN
      SELECT
        GLCodeId
      FROM GLCode glc
      WHERE glc.ClientId = MyClientId
      AND RTRIM(LTRIM(LOWER(glc.GLCodeName))) =
      RTRIM(LTRIM(LOWER(DefaultGL))) COLLATE utf8_unicode_ci LIMIT 1 INTO MyGlCodeId;
      -- update the GL code to active if it is not active
      UPDATE GLCode glc
      SET IsActive = 1
      WHERE glc.GLCodeId = MyGlCodeId
      AND glc.ClientId = MyClientId;
    ELSE
      SET MyGlCodeId = NULL;
    END IF;


    INSERT INTO Vendor (VendorId, ClientId, VendorNo, VendorName, First_Net_Days, Discount_Day_01, NetDisPer, DefaultGlCodeId, isactive, AccountCode)
      VALUES (maxVendordId, MyClientId, RTRIM(LTRIM(vendorNo)), RTRIM(LTRIM(vendorName)), RTRIM(LTRIM(col2)), RTRIM(LTRIM(col1)), RTRIM(LTRIM(col3)), MyGlCodeId, 1, RTRIM(LTRIM(col4)));
  ELSEIF ((vendorName IS NOT NULL
    AND VendorNo IS NOT NULL)) THEN
    SELECT
      'Found vendor';
    SELECT
      VendorId
    FROM Vendor v
    WHERE v.ClientId = MyClientId
    AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci
    -- and RTrim(LTrim(Lower(v.VendorName)))=RTrim(LTrim(Lower(vendorName))) COLLATE utf8_unicode_ci
    LIMIT 1 INTO maxVendordId;
    IF NOT EXISTS (SELECT
          *
        FROM GLCode glc
        WHERE glc.ClientId = MyClientId
        AND RTRIM(LTRIM(LOWER(glc.GLCodeName))) = RTRIM(LTRIM(LOWER(DefaultGL))) COLLATE utf8_unicode_ci)
      AND DefaultGL IS NOT NULL
      AND DefaultGL <> '' THEN
      SELECT
        'Inserting new GL ' + MyGlCodeId;
      INSERT INTO GLCode (ClientId, GLCodeId, GLCodeName, Desccription)
        VALUES (ClientId, MyGlCodeId, RTRIM(LTRIM(DefaultGL)), '');
    ELSEIF (DefaultGL IS NOT NULL
      AND DefaultGL <> '') THEN
      SELECT
        'Found GL Code ' + DefaultGL;
      SELECT
        GLCodeId
      FROM GLCode glc
      WHERE glc.ClientId = MyClientId
      AND RTRIM(LTRIM(LOWER(glc.GLCodeName))) =
      RTRIM(LTRIM(LOWER(DefaultGL))) COLLATE utf8_unicode_ci LIMIT 1 INTO MyGlCodeId;
      SELECT
        'The GLCodeID to be used is ' + MyGlCodeId;
      -- update the GL code to active if it is not active
      UPDATE GLCode glc
      SET IsActive = 1
      WHERE glc.GLCodeId = MyGlCodeId
      AND glc.ClientId = MyClientId;
    -- select 'Found existing GL ' + MyGlCodeId;
    ELSE
      SET MyGlCodeId = NULL;
    END IF;
    -- select 'Updating existing vendor with GL code id ' + MyGlCodeId;
    UPDATE Vendor
    SET First_Net_Days = col2,
        Discount_Day_01 = col1,
        NetDisPer = col3,
        DefaultGlCodeId = MyGlCodeId,
        AccountCode = col4,
        `VendorName` = vendorName,
        IsActive = 1
    WHERE VendorID = maxVendordId;

  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportVendorFromScriptSage` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportVendorFromScriptSage`(IN vendorNo nvarchar(50),
IN vendorName nvarchar(250),
IN col1 nvarchar(50),
IN col2 nvarchar(50),
IN col3 nvarchar(50),
IN col4 nvarchar(50),
IN DefaultGL nvarchar(250),
IN MyClientId int)
BEGIN
  DECLARE maxVendordId int;
  DECLARE MyGlCodeId int;
  DECLARE OutputString nvarchar(250);
  DECLARE c nvarchar(250);
  DECLARE l int;
  DECLARE p int;

  IF (SELECT
        MAX(v.VendorId)
      FROM Vendor v) IS NOT NULL THEN
    SET maxVendordId = (SELECT
        MAX(v.VendorId)
      FROM Vendor v) + 1;
  ELSE
    SET maxVendordId = 1;
  END IF;

  IF (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) IS NOT NULL THEN
    SET MyGlCodeId = (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) + 1;
  ELSE
    SET MyGlCodeId = 1;
  END IF;

  -- select maxVendordId,MyClientId,RTRim(LTRIM(vendorNo)),RTRim(LTRIM(vendorName)),RTRim(LTRIM(col2)),RTRim(LTRIM(col1)),RTRim(LTRIM(col3)),MyGlCodeId,1;

  IF NOT EXISTS (SELECT
        *
      FROM Vendor v
      WHERE v.ClientId = MyClientId
      AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci) THEN
    IF NOT EXISTS (SELECT
          *
        FROM GLCode glc
        WHERE glc.ClientId = MyClientId
        AND RTRIM(LTRIM(LOWER(glc.GLCodeName))) = RTRIM(LTRIM(LOWER(DefaultGL))) COLLATE utf8_unicode_ci)
      AND DefaultGL IS NOT NULL THEN
      INSERT INTO GLCode (ClientId, GLCodeId, GLCodeName, Desccription)
        VALUES (MyClientId, MyGlCodeId, RTRIM(LTRIM(DefaultGL)), '');
    ELSEIF (DefaultGL IS NOT NULL) THEN
      SELECT
        GLCodeId
      FROM GLCode glc
      WHERE glc.ClientId = MyClientId
      AND RTRIM(LTRIM(LOWER(glc.GLCodeName))) =
      RTRIM(LTRIM(LOWER(DefaultGL))) COLLATE utf8_unicode_ci LIMIT 1 INTO MyGlCodeId;
      -- update the GL code to active if it is not active
      UPDATE GLCode glc
      SET IsActive = 1
      WHERE glc.GLCodeId = MyGlCodeId
      AND glc.ClientId = MyClientId;
    ELSE
      SET MyGlCodeId = NULL;
    END IF;


    INSERT INTO Vendor (VendorId, ClientId, VendorNo, VendorName, First_Net_Days, Discount_Day_01, NetDisPer, DefaultGlCodeId, isactive, AccountCode)
      VALUES (maxVendordId, MyClientId, RTRIM(LTRIM(vendorNo)), RTRIM(LTRIM(vendorName)), RTRIM(LTRIM(col2)), RTRIM(LTRIM(col1)), RTRIM(LTRIM(col3)), MyGlCodeId, 1, RTRIM(LTRIM(col4)));
  ELSEIF ((vendorName IS NOT NULL
    AND VendorNo IS NOT NULL)) THEN
    SELECT
      'Found vendor';
    SELECT
      VendorId
    FROM Vendor v
    WHERE v.ClientId = MyClientId
    AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci
    -- and RTrim(LTrim(Lower(v.VendorName)))=RTrim(LTrim(Lower(vendorName))) COLLATE utf8_unicode_ci
    LIMIT 1 INTO maxVendordId;
    IF NOT EXISTS (SELECT
          *
        FROM GLCode glc
        WHERE glc.ClientId = MyClientId
        AND RTRIM(LTRIM(LOWER(glc.GLCodeName))) = RTRIM(LTRIM(LOWER(DefaultGL))) COLLATE utf8_unicode_ci)
      AND DefaultGL IS NOT NULL
      AND DefaultGL <> '' THEN
      SELECT
        'Inserting new GL ' + MyGlCodeId;
      INSERT INTO GLCode (ClientId, GLCodeId, GLCodeName, Desccription)
        VALUES (ClientId, MyGlCodeId, RTRIM(LTRIM(DefaultGL)), '');
    ELSEIF (DefaultGL IS NOT NULL
      AND DefaultGL <> '') THEN
      SELECT
        'Found GL Code ' + DefaultGL;
      SELECT
        GLCodeId
      FROM GLCode glc
      WHERE glc.ClientId = MyClientId
      AND RTRIM(LTRIM(LOWER(glc.GLCodeName))) =
      RTRIM(LTRIM(LOWER(DefaultGL))) COLLATE utf8_unicode_ci LIMIT 1 INTO MyGlCodeId;
      SELECT
        'The GLCodeID to be used is ' + MyGlCodeId;
      -- update the GL code to active if it is not active
      UPDATE GLCode glc
      SET IsActive = 1
      WHERE glc.GLCodeId = MyGlCodeId
      AND glc.ClientId = MyClientId;
    -- select 'Found existing GL ' + MyGlCodeId;
    ELSE
      SET MyGlCodeId = NULL;
    END IF;
    -- select 'Updating existing vendor with GL code id ' + MyGlCodeId;
    UPDATE Vendor
    SET First_Net_Days = col2,
        Discount_Day_01 = col1,
        NetDisPer = col3,
        DefaultGlCodeId = MyGlCodeId,
        AccountCode = col4,
        `VendorName` = vendorName,
        IsActive = 1
    WHERE VendorID = maxVendordId;

  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportVendorWithDepartmentFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportVendorWithDepartmentFromScript`(IN ClientId int,
IN vendorName nvarchar(1000),
IN vendorNo nvarchar(1000),
IN vendorDefaultGL nvarchar(50),
IN clientVendorID nvarchar(1000),-- ClientVendorID of Dep
IN vendorSiteCode nvarchar(250),-- DepartmentName
IN depDescription nvarchar(1000),-- Description of Dep
IN Address1 nvarchar(1000),
IN Address2 nvarchar(1000),
IN Address3 nvarchar(1000),
IN City nvarchar(1000),
IN State nvarchar(1000),
IN ZipCode nvarchar(1000),
IN country nvarchar(1000),
IN DueDays int,
IN DiscDays int,
IN DiscPerc float)
BEGIN
  DECLARE maxVendordId int;
  DECLARE VendordSiteId int;
  DECLARE AddressId int;
  DECLARE StateIdId int;
  DECLARE MyGlCodeId int;

  SET StateIdId = NULL;
  SET VendordSiteId = NULL;
  SET MyGlCodeId = NULL;

  IF (SELECT
        MAX(v.VendorId)
      FROM Vendor v) IS NOT NULL THEN
    SET maxVendordId = (SELECT
        MAX(v.VendorId)
      FROM Vendor v) + 1;
  ELSE
    SET maxVendordId = 1;
  END IF;

  IF (SELECT
        MAX(adr.AddressId)
      FROM Address adr) IS NOT NULL THEN
    SET AddressId = (SELECT
        MAX(adr.AddressId)
      FROM Address adr) + 1;
  ELSE
    SET AddressId = 1;
  END IF;
  SELECT
    AddressId;
  -- Get the default GL Code ID
  IF (vendorDefaultGL <> '') THEN
    SELECT
      GLCodeId
    FROM GLCode glc
    WHERE glc.ClientId = ClientId
    AND RTRIM(LTRIM(LOWER(glc.GLCodeName))) =
    RTRIM(LTRIM(LOWER(vendorDefaultGL))) COLLATE utf8_unicode_ci LIMIT 1 INTO MyGlCodeId;
  END IF;

  IF (vendorName != 'VENDOR_NAME') THEN
    IF NOT EXISTS (SELECT
          *
        FROM Vendor v
        WHERE v.ClientId = ClientId
        AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci)
      AND (vendorName IS NOT NULL
      AND vendorNo IS NOT NULL) THEN
      INSERT INTO Vendor (VendorId, ClientId, VendorNo, VendorName, First_Net_Days, Discount_Day_01, NetDisPer, DefaultGlCodeId, isactive)
        VALUES (maxVendordId, ClientId, RTRIM(LTRIM(vendorNo)), RTRIM(LTRIM(vendorName)), DueDays, DiscDays, DiscPerc, MyGlCodeId, 1);
    ELSE
      SELECT
        VendorId INTO maxVendordId
      FROM Vendor v
      WHERE v.ClientId = ClientId
      AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci;

      UPDATE Vendor
      SET VendorName = RTRIM(LTRIM(vendorName)),
          DefaultGlCodeId = MyGlCodeId,
          IsActive = 1,
          First_Net_Days = DueDays,
          Discount_Day_01 = DiscDays,
          NetDisPer = DiscPerc
      WHERE VendorId = maxVendordId;

    END IF;

    IF (vendorSiteCode != 'null') THEN
      -- select 'About to do location';
      IF NOT EXISTS (SELECT
            *
          FROM Department dep
          WHERE dep.ClientId = ClientId
          AND dep.VendorId = maxVendordId
          AND RTRIM(LTRIM(LOWER(dep.DepartmentName))) = RTRIM(LTRIM(LOWER(vendorSiteCode))) COLLATE utf8_unicode_ci)
        AND (vendorSiteCode IS NOT NULL) THEN
        IF EXISTS (SELECT
              *
            FROM State
            WHERE LOWER(StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
            OR LOWER(StateName) = LOWER(State) COLLATE utf8_unicode_ci)
          AND State IS NOT NULL THEN
          -- select 'checking stat';
          SELECT
            StateId INTO StateIdId
          FROM State
          WHERE LOWER(StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
          OR LOWER(StateName) = LOWER(State) COLLATE utf8_unicode_ci LIMIT 1;
          INSERT INTO Address (StateId, ZipCode, Address1, Address2, Address3, CityName)
            VALUES (StateIdId, ZipCode, Address1, Address2, Address3, City);
        END IF;
        IF (StateIdId IS NOT NULL) THEN
          INSERT INTO Department (VendorId, ClientId, Description, DepartmentName, AddressId, IsActive)
            VALUES (maxVendordId, ClientId, RTRIM(LTRIM(depDescription)), RTRIM(LTRIM(vendorSiteCode)), AddressId, 1);
        END IF;
      ELSE
        SELECT
          Id INTO VendordSiteId
        FROM Department dep
        WHERE dep.ClientId = ClientId
        AND VendorId = maxVendordId
        AND RTRIM(LTRIM(LOWER(DepartmentName))) = RTRIM(LTRIM(LOWER(vendorSiteCode))) COLLATE utf8_unicode_ci;

        UPDATE Department
        SET Description = RTRIM(LTRIM(depDescription)),
            IsActive = 1
        WHERE Id = VendordSiteId;
      END IF;
    END IF;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportVendorWithLocationsFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportVendorWithLocationsFromScript`(IN ClientId int,
IN vendorName nvarchar(100),
IN vendorNo nvarchar(20),
IN vendorDefaultGL nvarchar(50),
IN vendorSiteCode nvarchar(50),
IN vendorSiteName nvarchar(250),
IN Address1 nvarchar(100),
IN Address2 nvarchar(100),
IN Address3 nvarchar(100),
IN City nvarchar(50),
IN State nvarchar(20),
IN ZipCode nvarchar(20),
IN Country nvarchar(50),
IN DueDays int,
IN DiscDays int,
IN DiscPerc float)
BEGIN
  DECLARE maxVendordId int;
  DECLARE VendordSiteId int;
  DECLARE AddressId int;
  DECLARE StateIdId int;
  DECLARE MyGlCodeId int;

  SET StateIdId = NULL;
  SET VendordSiteId = NULL;
  SET MyGlCodeId = NULL;

  IF (SELECT
        MAX(v.VendorId)
      FROM Vendor v) IS NOT NULL THEN
    SET maxVendordId = (SELECT
        MAX(v.VendorId)
      FROM Vendor v) + 1;
  ELSE
    SET maxVendordId = 1;
  END IF;

  IF (SELECT
        MAX(adr.AddressId)
      FROM Address adr) IS NOT NULL THEN
    SET AddressId = (SELECT
        MAX(adr.AddressId)
      FROM Address adr) + 1;
  ELSE
    SET AddressId = 1;
  END IF;

  -- Get the default GL Code ID
  IF (vendorDefaultGL <> '') THEN
    SELECT
      GLCodeId
    FROM GLCode glc
    WHERE glc.ClientId = ClientId
    AND RTRIM(LTRIM(LOWER(glc.GLCodeName))) =
    RTRIM(LTRIM(LOWER(vendorDefaultGL))) COLLATE utf8_unicode_ci LIMIT 1 INTO MyGlCodeId;
  END IF;

  IF (vendorName != 'VENDOR_NAME') THEN
    IF NOT EXISTS (SELECT
          *
        FROM Vendor v
        WHERE v.ClientId = ClientId
        AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci)
      AND (vendorName IS NOT NULL
      AND vendorNo IS NOT NULL) THEN
      INSERT INTO Vendor (VendorId, ClientId, VendorNo, VendorName, First_Net_Days, Discount_Day_01, NetDisPer, DefaultGlCodeId, isactive)
        VALUES (maxVendordId, ClientId, RTRIM(LTRIM(vendorNo)), RTRIM(LTRIM(vendorName)), DueDays, DiscDays, DiscPerc, MyGlCodeId, 1);
    ELSE
      SELECT
        VendorId INTO maxVendordId
      FROM Vendor v
      WHERE v.ClientId = ClientId
      AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci;
      UPDATE Vendor
      SET VendorName = RTRIM(LTRIM(vendorName)),
          DefaultGlCodeId = MyGlCodeId,
          IsActive = 1,
          First_Net_Days = DueDays,
          Discount_Day_01 = DiscDays,
          NetDisPer = DiscPerc
      WHERE VendorId = maxVendordId;
    END IF;

    -- Check if the Vendor Location exists and add or update
    IF NOT EXISTS (SELECT
          *
        FROM VendorLocation vl
        WHERE vl.VendorId = maxVendordId
        AND RTRIM(LTRIM(LOWER(vl.LocationNumber))) = RTRIM(LTRIM(LOWER(vendorSiteCode))) COLLATE utf8_unicode_ci)
      AND (vendorSiteCode IS NOT NULL) THEN
      -- Get the State code and insert the address and vendorLocation
      IF EXISTS (SELECT
            *
          FROM State
          WHERE LOWER(StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
          OR LOWER(StateName) = LOWER(State) COLLATE utf8_unicode_ci)
        AND State IS NOT NULL THEN
        SELECT
          StateId INTO StateIdId
        FROM State
        WHERE LOWER(StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
        OR LOWER(StateName) = LOWER(State) COLLATE utf8_unicode_ci LIMIT 1;
        INSERT INTO Address (StateId, ZipCode, Address1, Address2, Address3, CityName, Country)
          VALUES (StateIdId, ZipCode, Address1, Address2, Address3, City, Country);

        INSERT INTO VendorLocation (VendorId, LocationNumber, LocationName, AddressId)
          VALUES (maxVendordId, vendorSiteCode, vendorSiteName, AddressId);
      END IF;
    ELSE
      SELECT
        VendorLocationId INTO VendordSiteId
      FROM VendorLocation vl
      WHERE vl.VendorId = maxVendordId
      AND RTRIM(LTRIM(LOWER(vl.LocationNumber))) = RTRIM(LTRIM(LOWER(vendorSiteCode))) COLLATE utf8_unicode_ci;

      UPDATE VendorLocation
      SET LocationName = Address1
      WHERE VendorLocationId = VendordSiteId;
    END IF;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InsertBacklogGL` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `InsertBacklogGL`(IN InvoiceID int,
IN ClientID int,
IN GLCode nvarchar(50),
IN GLAmount decimal)
BEGIN
  DECLARE GLID int;
  SELECT
    glc.GLCodeId INTO GLID
  FROM GLCode glc
  WHERE glc.GLCodeName = GLCode
  AND glc.ClientId = ClientID;

  IF GLID IS NULL THEN
    SET GLID = (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) + 1;
    INSERT INTO GLCode (GLCodeId, ClientId, GLCodeName, Desccription)
      VALUES (GLID, ClientID, GLCode, GLCode);
  END IF;

  IF GLID IS NOT NULL THEN
    INSERT INTO InvoiceGLCode (InvoiceId, GLCodeId, GLAmount)
      VALUES (InvoiceID, GLID, GLAmount);
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InsertBatch` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `InsertBatch`(IN BatchName nvarchar(255),
IN ClientID int,
IN BatchType nvarchar(50),
IN CreatedDate datetime,
IN BSource nvarchar(50))
BEGIN
  IF EXISTS (SELECT
        'True'
      FROM Batch btch
      WHERE btch.BatchName = BatchName) THEN
    SELECT
      'This record already exists!';
  ELSE
    INSERT INTO Batch (BatchName, ClientID, BatchType, CreatedDate, `Source`)
      VALUES (BatchName, ClientID, BatchType, CreatedDate, BSource);
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InsertGLByApprover` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `InsertGLByApprover`(IN myClientId int,
IN myEmail nvarchar(250),
IN myGLCode nvarchar(250))
BEGIN
  DECLARE myUId nvarchar(250);
  DECLARE myGLId int;
  DECLARE myCompCode int;

  SELECT
    usr.UserId,
    usr.ClientCompanyId
  FROM `User` usr
  WHERE usr.ClientId = myClientId
  AND (usr.UserName = myEmail COLLATE utf8_unicode_ci)
  AND usr.IsActive = 1
  LIMIT 1 INTO myUId, myCompCode;
  SELECT
    myUId;
  IF myUId IS NOT NULL THEN
    -- Find the GLCodeId
    SELECT
      gl.GLCodeId
    FROM GLCode gl
    WHERE gl.ClientId = myClientId
    AND (gl.GLCodeName = LTRIM(RTRIM(myGLCode)) COLLATE utf8_unicode_ci)
    AND gl.IsActive = 1
    AND gl.ClientCompanyId = myCompCode INTO myGLId;
    SELECT
      myGLId;
    IF myGLId IS NOT NULL
      OR myGLId <> 0 THEN
      -- Insert the GL for the user if it is not already there
      IF NOT EXISTS (SELECT
            *
          FROM ApproverGLCode agl
          WHERE agl.UserId = myUId COLLATE utf8_unicode_ci
          AND agl.GLCodeId = myGLId) THEN
        INSERT INTO ApproverGLCode (UserId, GLCodeId)
          VALUES (myUId, myGLId);
      END IF;
    END IF;

  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InsertGLFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `InsertGLFromScript`(IN CompCode nvarchar(40),
IN GLCodeName nvarchar(50),
IN GLDesc nvarchar(50),
IN UserIDCard nvarchar(50),
IN ClientID int)
BEGIN
  DECLARE ClientCompCodeId int;
  DECLARE GLCID int;
  DECLARE UID char(36);
  SELECT
    Id
  FROM ClientCompany clcomp
  WHERE clcomp.ClientId = ClientID
  AND clcomp.CompanyCode = CompCode COLLATE utf8_unicode_ci INTO ClientCompCodeId;

  IF NOT EXISTS (SELECT
        *
      FROM GLCode glc
      WHERE glc.ClientId = ClientId
      AND ClientCompanyId = ClientCompCodeId
      AND glc.GLCodeName = GLCodeName COLLATE utf8_unicode_ci) THEN
    SET GLCID = (SELECT
        MAX(glc.GLCodeID)
      FROM GLCode glc) + 1;
    INSERT INTO GLCode (ClientId, GLCodeId, GLCodeName, Desccription, ClientCompanyId, IsActive)
      VALUES (ClientID, GLCID, GLCodeName, GLDesc, ClientCompCodeId, 1);
    SET UID = (SELECT
        usr.UserId
      FROM User usr
      WHERE usr.UserIDCard IS NOT NULL
      AND usr.UserIDCard <> ''
      AND usr.ClientId = ClientID
      AND usr.UserIdCard = UserIDCard COLLATE utf8_unicode_ci);
    IF (UID IS NOT NULL) THEN
      INSERT INTO ApproverGLCode (UserId, GLCodeId)
        VALUES (UID, GLCID);
    END IF;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InsertGLFromScript2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `InsertGLFromScript2`(IN CompCode nvarchar(40),
IN GLCodeNameParam nvarchar(50),
IN GLDesc nvarchar(50),
IN UserIDCard nvarchar(50),
IN IsActiveParam int,
IN ClientID int)
BEGIN
  DECLARE ClientCompCodeId int;
  DECLARE GLCID int;
  DECLARE UID char(36);

  IF NOT EXISTS (SELECT
        *
      FROM GLCode glc
      WHERE glc.ClientId = ClientID
      AND glc.GLCodeName = GLCodeNameParam
      AND glc.Desccription = GLDesc COLLATE utf8_unicode_ci) THEN
    -- select 'Tope';
    SELECT
      Id
    FROM ClientCompany clcomp
    WHERE clcomp.ClientId = ClientID
    AND clcomp.CompanyCode = CompCode
    AND IsActive = 1 COLLATE utf8_unicode_ci LIMIT 1 INTO ClientCompCodeId;
    SET GLCID = (SELECT
        MAX(glc.GLCodeID)
      FROM GLCode glc) + 1;
    INSERT INTO GLCode (ClientId, GLCodeId, GLCodeName, Desccription, ClientCompanyId, IsActive)
      VALUES (ClientID, GLCID, GLCodeNameParam, GLDesc, ClientCompCodeId, IsActive);
    SET UID = (SELECT
        usr.UserId
      FROM User usr
      WHERE usr.UserIDCard IS NOT NULL
      AND usr.UserIDCard <> ''
      AND usr.ClientId = ClientID
      AND usr.UserIdCard = UserIDCard
      AND IsActive = 1 COLLATE utf8_unicode_ci LIMIT 1);
    -- select 'next';
    IF (UID IS NOT NULL) THEN
      INSERT INTO ApproverGLCode (UserId, GLCodeId)
        VALUES (UID, GLCID);
    END IF;
  ELSE
    SET SQL_SAFE_UPDATES = 0;
    -- select 'bottom';
    SELECT
      Id
    FROM ClientCompany clcomp
    WHERE clcomp.ClientId = ClientID
    AND clcomp.IsActive = 1
    AND clcomp.CompanyCode = CompCode COLLATE utf8_unicode_ci LIMIT 1 INTO ClientCompCodeId;

    UPDATE GLCode
    SET IsActive = IsActiveParam,
        ClientCompanyId = ClientCompCodeId
    WHERE ClientId = ClientID
    AND GLCodeName = GLCodeNameParam
    AND Desccription = GLDesc;

    -- select ClientCompCodeId, IsActiveParam;

    SET UID = (SELECT
        usr.UserId
      FROM User usr
      WHERE usr.UserIDCard IS NOT NULL
      AND usr.UserIDCard <> ''
      AND usr.ClientId = ClientID
      AND usr.IsActive = 1
      AND usr.UserIdCard = UserIDCard COLLATE utf8_unicode_ci LIMIT 1);
    -- select 'bottom 2';
    IF (UID IS NOT NULL
      AND (
      NOT EXISTS (SELECT
          *
        FROM ApproverGLCode
        WHERE UserId = UID
        && GLCodeId IN (SELECT
            GLCodeId
          FROM GLCode
          WHERE ClientId = ClientID
          AND GLCodeName = GLCodeNameParam)))) THEN
      INSERT INTO ApproverGLCode (UserId, GLCodeId)
        VALUES (UID, (SELECT GLCodeId FROM GLCode WHERE ClientId = ClientID AND GLCodeName = GLCodeNameParam LIMIT 1));
    END IF;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InsertNewVendorByName` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `InsertNewVendorByName`(IN myVendorName nvarchar(250),
IN MyClientId int)
BEGIN
  DECLARE maxVendordId int;
  DECLARE myVendorNo nvarchar(25);

  IF (SELECT
        MAX(v.VendorId)
      FROM Vendor v) IS NOT NULL THEN
    SET maxVendordId = (SELECT
        MAX(v.VendorId)
      FROM Vendor v) + 1;
    SET myVendorNo = maxVendordId;
  END IF;


  INSERT INTO Vendor (VendorId, ClientId, VendorNo, VendorName)
    VALUES (maxVendordId, MyClientId, myVendorNo, RTRIM(LTRIM(myVendorName)));

  SELECT
    myVendorNo;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InsertPOFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `InsertPOFromScript`(IN CompCode nvarchar(50),
IN PONo nvarchar(50),
IN POLineNo nvarchar(50),
IN VendorNo nvarchar(50),
IN PartNo nvarchar(50),
IN UOM nvarchar(50),
IN QTY double,
IN UnitCost double,
IN Descr nvarchar(500),
IN Currency nvarchar(50),
IN Purchaser nvarchar(50),
IN ClientID int,
IN GRNType nvarchar(50),
IN MyGRN nvarchar(50))
BEGIN
  DECLARE ClientCompCodeId int;
  DECLARE VendID int;
  DECLARE PurchID char(36);

  SELECT
    Id
  FROM ClientCompany clcomp
  WHERE clcomp.ClientId = ClientID
  AND clcomp.CompanyCode = CompCode COLLATE utf8_unicode_ci LIMIT 1 INTO ClientCompCodeId;
  SELECT
    VendorId
  FROM Vendor v
  WHERE v.VendorNo = VendorNo COLLATE utf8_unicode_ci
  AND v.ClientId = ClientID
  AND CompanyCode = CompCode LIMIT 1 INTO VendID;
  IF (Purchaser <> '') THEN
    SET PurchID = (SELECT
        UserId
      FROM User usr
      WHERE usr.UserIdCard = Purchaser
      AND usr.ClientId = ClientID COLLATE utf8_unicode_ci LIMIT 1);
  END IF;
  IF (ClientCompCodeId IS NOT NULL
    AND VendID IS NOT NULL) THEN
    IF NOT EXISTS (SELECT
          *
        FROM PO p
        WHERE p.VendorId = VendID
        AND p.PONumber = PONo
        AND p.ItemNumber = POLineNo
        AND p.POLineId = POLineNo
        AND p.VendorCatNumber = PartNo
        AND p.UnitOfPurchase = UOM
        AND p.UnitCost = UnitCost
        AND p.RcvdQty = QTY
        AND p.ClientId = ClientID
        AND p.LineNo = POLineNo
        AND p.Description = Descr
        AND p.ClientCompanyId = ClientCompCodeId
        AND p.PurchaserId = PurchID
        AND p.Currency = Currency
        AND p.POType = GRNType
        AND p.RecievedTransactionId = MyGRN) THEN
      INSERT INTO PO (VendorId, PONumber, ItemNumber, POLineId,
      VendorCatNumber, UnitOfPurchase, UnitCost, RcvdQty, ClientId,
      LineNo, Description, ClientCompanyId, PurchaserId, Currency, POType, RecievedTransactionId)
        VALUES (VendID, PONo, POLineNo, POLineNo, PartNo, UOM, UnitCost, QTY, ClientID, POLineNo, Descr, ClientCompCodeId, PurchID, Currency, GRNType, MyGRN);
    END IF;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InsertSecondaryBacklogInvoice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `InsertSecondaryBacklogInvoice`(IN ClientID int,
IN InvoiceID int,
IN InvoiceNumber nvarchar(50),
IN InvoiceDate datetime,
IN ScanDate datetime,
IN InvoiceTotal float,
IN CheckNumber nvarchar(50))
BEGIN
  DECLARE VendorID int;
  DECLARE URL nvarchar(250);
  DECLARE NewInvoiceID int;
  DECLARE done int DEFAULT 0;

  DECLARE Image_Cursor CURSOR FOR
  SELECT
    Url
  FROM InvoiceDocs invdocs
  WHERE invdocs.InvoiceId = InvoiceID;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
  SET VendorID = (SELECT
      VendorID
    FROM Invoice inv
    WHERE inv.InvoiceId = InvoiceID);


  IF VendorID IS NOT NULL THEN
    SELECT
      'Inserting invoice';
    INSERT INTO Invoice (ClientId, VendorId, InvoiceNo, InvoiceDate, InvoiceTotal, ApprovalRequired, ApprovalStatusId,
    IsPaused, IsPOInvoice, ScannedDate, PONumber, InvoiceType, CheckNumber, IsModified)
      VALUES (ClientID, VendorID, InvoiceNumber, InvoiceDate, InvoiceTotal, 0, 5, 0, 0, ScanDate, '', 'CheckCopy', CheckNumber, 0);

    SET NewInvoiceID = (SELECT
        MAX(inv.InvoiceId)
      FROM Invoice inv);
    OPEN Image_Cursor;
  GET_URL:
    LOOP
      FETCH Image_Cursor INTO URL;
      IF done = 1 THEN
        LEAVE GET_URL;
      END IF;
      INSERT INTO InvoiceDocs (InvoiceId, Url)
        VALUES (NewInvoiceID, URL);
    END LOOP GET_URL;
    CLOSE Image_Cursor;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InsertVendorFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `InsertVendorFromScript`(IN CompCode nvarchar(30),
IN VendorNo nvarchar(50),
IN VendorName nvarchar(50),
IN NetTerm int,
IN GLCodeName nvarchar(50),
IN ClientID int)
BEGIN
  DECLARE ClientCompCodeId int;
  DECLARE MyGLCodeID int;
  DECLARE MyVendorID int;
  SELECT
    Id
  FROM ClientCompany clcomp
  WHERE clcomp.ClientId = ClientID
  AND clcomp.CompanyCode = CompCode COLLATE utf8_unicode_ci INTO ClientCompCodeId;
  SELECT
    GLCodeId
  FROM GLCode glc
  WHERE glc.GLCodeName = GLCodeName COLLATE utf8_unicode_ci
  AND glc.ClientId = ClientID
  AND IsActive = 1 LIMIT 1 INTO MyGLCodeID;
  SELECT
    vendorId
  FROM Vendor v
  WHERE v.VendorNo = VendorNo COLLATE utf8_unicode_ci
  AND v.ClientId = ClientID LIMIT 1 INTO MyVendorID;
  IF (ClientCompCodeId IS NOT NULL
    AND MyGLCodeID IS NOT NULL) THEN
    IF (MyVendorID IS NULL) THEN
      SET MyVendorID = (SELECT
          MAX(v.vendorId)
        FROM Vendor v) + 1;
      INSERT INTO Vendor (ClientId, VendorName, VendorId, VendorNo, DefaultGlCodeId, First_Net_Days, IsPoVendor,
      IsActive, CompanyCode, ClientCompanyId)
        VALUES (ClientID, VendorName, MyVendorID, VendorNo, MyGLCodeID, NetTerm, 1, 1, CompCode, ClientCompCodeId);
    ELSE
      UPDATE Vendor v
      SET v.DefaultGlCodeId = MyGLCodeID,
          CompanyCode = CompCode,
          ClientCompanyId = ClientCompCodeId
      WHERE v.VendorId = MyVendorID
      AND v.ClientId = ClientID;
    END IF;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InsertVendorFromScript2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `InsertVendorFromScript2`(IN CompCode nvarchar(30),
IN VendorNo nvarchar(50),
IN VendorName nvarchar(50),
IN NetTerm int,
IN GLCodeName nvarchar(50),
IN UserEmail nvarchar(100),
IN VendorPOType int,
IN ClientID int)
BEGIN
  DECLARE ClientCompCodeId int;
  DECLARE MyGLCodeID int;
  DECLARE MyVendorID int;

  DECLARE approvalSubStepId int;
  DECLARE done int DEFAULT FALSE;
  DECLARE userId char(36);
  DECLARE userFound int DEFAULT FALSE;
  DECLARE substepPO int DEFAULT 0;
  DECLARE substepNOPO int DEFAULT 0;

  DECLARE ApprovalSubStep_Cursor CURSOR FOR
  SELECT
    assu.ApprovalSubStepId,
    assu.UserId
  FROM ApprovalSubStepUser assu
  WHERE assu.UserId
  IN (SELECT
      usr.UserId
    FROM User usr
    WHERE usr.Email = UserEmail
    AND usr.ClientId = ClientID);

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

  SELECT
    Id
  FROM ClientCompany clcomp
  WHERE clcomp.ClientId = ClientID
  AND clcomp.CompanyCode = CompCode COLLATE utf8_unicode_ci INTO ClientCompCodeId;
  SELECT
    GLCodeId
  FROM GLCode glc
  WHERE glc.GLCodeName = GLCodeName COLLATE utf8_unicode_ci
  AND glc.ClientId = ClientID
  AND IsActive = 1
  AND GLCodeName <> 'Null'
  -- and ClientCompanyID = ClientCompCodeId 
  LIMIT 1 INTO MyGLCodeID;

  SELECT
    ClientCompCodeId,
    MyGLCodeID;

  SELECT
    vendorId
  FROM Vendor v
  WHERE v.VendorNo = VendorNo COLLATE utf8_unicode_ci
  AND v.ClientId = ClientID
  AND CompanyCode = CompCode LIMIT 1 INTO MyVendorID;
  IF (ClientCompCodeId IS NOT NULL
    -- and MyGLCodeID is not null
    ) THEN
    SELECT
      'Found Company ID';
    IF (MyVendorID IS NULL) THEN
      SELECT
        'Not Found Vendor ID';
      SET MyVendorID = (SELECT
          MAX(v.vendorId)
        FROM Vendor v) + 1;
      SELECT
        'VendorID = ' + MyVendorID;
      INSERT INTO Vendor (ClientId, VendorName, VendorId, VendorNo, DefaultGlCodeId, First_Net_Days, IsPoVendor,
      IsActive, CompanyCode, ClientCompanyId)
        VALUES (ClientID, VendorName, MyVendorID, VendorNo, MyGLCodeID, NetTerm, VendorPOType, 1, CompCode, ClientCompCodeId);
    ELSE
      SELECT
        'Found Vendor ID';
      UPDATE Vendor v
      SET v.DefaultGlCodeId = MyGLCodeID,
          CompanyCode = CompCode,
          ClientCompanyId = ClientCompCodeId,
          IsPoVendor = VendorPOType,
          IsActive = 1,
          VendorName = VendorName
      WHERE v.VendorId = MyVendorID;
    END IF;
  END IF;

  /*Add User Sub Steps*/
  IF (ClientID = 28) THEN
    OPEN ApprovalSubStep_Cursor;
    SET done = FALSE;
  GET_APSS_ID:
    LOOP
      FETCH ApprovalSubStep_Cursor INTO approvalSubStepId, userId;
      -- select approvalSubStepId;

      IF done THEN
        LEAVE GET_APSS_ID;
      END IF;

      IF (MyVendorID IS NOT NULL
        AND userId IS NOT NULL) THEN
        IF NOT EXISTS (SELECT
              *
            FROM ApprovalSubStepUserVendor assuv
            WHERE assuv.UserId = userId
            AND assuv.VendorId = MyVendorID
            AND assuv.ApprovalSubStepId = approvalSubStepId) THEN
          INSERT INTO ApprovalSubStepUserVendor (ApprovalSubStepId, UserId, VendorId, FirstEscalationManagerId,
          SecondEscalationManagerId, ThirdEscalationManagerId, Duration)
            VALUES (approvalSubStepId, userId, MyVendorID, NULL, NULL, NULL, 0);
        END IF;
      END IF;
      SELECT
        approvalSubStepId;
    END LOOP GET_APSS_ID;
    CLOSE ApprovalSubStep_Cursor;

    IF EXISTS (SELECT
          *
        FROM ApprovalSubStepUser assu
        WHERE assu.UserId
        IN (SELECT
            usr.UserId
          FROM User usr
          WHERE usr.Email = UserEmail
          AND usr.ClientId = ClientID)) THEN
      SET userFound = TRUE;
    END IF;

    SELECT
      userFound;
    -- if userFound = 1 THEN
    -- A-40, B-41
    -- 15,16 A, 17,18 B
    -- 23, 24 A, 25,26 B
    IF (CompCode = 'A') THEN
      SET substepPO = 23;
      SET substepNOPO = 24;
    ELSEIF (CompCode = 'B') THEN
      SET substepPO = 26;
      SET substepNOPO = 25;
    END IF;

    SELECT
      usr.UserId INTO userId
    FROM User usr
    WHERE usr.Email = userEmail
    AND usr.ClientId = ClientID;
    SELECT
      substepPO,
      substepNOPO,
      userId;
    IF (substepPO <> 0
      AND substepNOPO <> 0
      AND userId IS NOT NULL) THEN
      -- Insert PO sub step user
      IF (NOT EXISTS (SELECT
            *
          FROM ApprovalSubStepUser
          WHERE UserId = userId
          AND ApprovalSubStepId = substepPO))
        AND VendorPOType THEN
        INSERT INTO ApprovalSubStepUser (ApprovalSubStepId, UserId, ManualAssignmentOnly)
          VALUES (substepPO, userId, 0);
      END IF;
      -- Insert NO PO sub step user
      IF (NOT EXISTS (SELECT
            *
          FROM ApprovalSubStepUser
          WHERE UserId = userId
          AND ApprovalSubStepId = substepNOPO))
        AND (NOT VendorPOType) THEN
        INSERT INTO ApprovalSubStepUser (ApprovalSubStepId, UserId, ManualAssignmentOnly)
          VALUES (substepNOPO, userId, 0);
      END IF;
      IF (MyVendorID IS NOT NULL) THEN
        -- Insert PO sub step user vendor
        IF (NOT EXISTS (SELECT
              *
            FROM ApprovalSubStepUserVendor
            WHERE UserId = userId
            AND ApprovalSubStepId = substepPO
            AND VendorId = MyVendorID))
          AND VendorPOType THEN
          INSERT INTO ApprovalSubStepUserVendor (ApprovalSubStepId, UserId, VendorId, FirstEscalationManagerId,
          SecondEscalationManagerId, ThirdEscalationManagerId, Duration)
            VALUES (substepPO, userId, MyVendorID, NULL, NULL, NULL, 0);
        END IF;
        -- Insert NO PO sub step user vendor
        IF (NOT EXISTS (SELECT
              *
            FROM ApprovalSubStepUserVendor
            WHERE UserId = userId
            AND ApprovalSubStepId = substepNOPO
            AND VendorId = MyVendorID))
          AND (NOT VendorPOType) THEN
          INSERT INTO ApprovalSubStepUserVendor (ApprovalSubStepId, UserId, VendorId, FirstEscalationManagerId,
          SecondEscalationManagerId, ThirdEscalationManagerId, Duration)
            VALUES (substepNOPO, userId, MyVendorID, NULL, NULL, NULL, 0);
        END IF;
      END IF;

    END IF; -- if we have sub steps and user

  -- end if; -- if we do not have user sub step
  END IF; -- if client is AVG
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InvoiceAnalysisByState` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `InvoiceAnalysisByState`(IN ClientId int, IN StateCode char(10))
    SQL SECURITY INVOKER
BEGIN
  SELECT
    ilid.ItemLineItemDetailId AS LineItemId,
    InvoiceNo AS InvoiceNo,
    InvoiceDate AS InvoiceDate,
    ScannedDate AS InvoiceScannedDate,
    ShippingDate AS InvoiceDeliveryDate,
    VendorName AS VendorName,
    VendorNo AS VendorNumber,
    cl.LocationName AS CustomerLocationName,
    cl.LocationNumber AS CustomerLocationNumber,
    c.CustomerNo AS CustomerNumber,
    cl.DBCode AS DBCode,
    i.ItemNo AS ItemNumber,
    i.ItemDescription AS ItemDescription,
    CASE WHEN ilid.CustomerPrice IS NOT NULL THEN ilid.CustomerPrice WHEN cli.CustomerPrice IS NOT NULL THEN cli.CustomerPrice ELSE 0 END AS CustomerPrice,
    CASE WHEN cli.VendorPrice IS NOT NULL THEN cli.VendorPrice ELSE 0 END AS VendorPrice,
    vic.VendorPrice AS VendorContractedPrice,
    st.StateNameShort AS State,
    ad.ZipCode AS ZipCode,
    CASE WHEN ilid.UnitPrice IS NOT NULL THEN ilid.UnitPrice ELSE 0 END AS UnitCost,
    CASE WHEN cl.isActive = 1 THEN 'Active' ELSE 'Disabled' END AS CustomerLocationDisabled
  FROM Invoice inv
    INNER JOIN ItemLineItemDetail ilid
      ON ilid.InvoiceId = inv.InvoiceId
    INNER JOIN Vendor v
      ON v.VendorId = inv.VendorId
    INNER JOIN CustomerLocation cl
      ON cl.CustomerLocationId = inv.CustomerLocationId
    INNER JOIN Customer c
      ON c.CustomerId = cl.CustomerId
    INNER JOIN CustomerLocationItem cli
      ON cli.CustomerLocationItemId = ilid.CustomerLocationItemId
    INNER JOIN Item i
      ON i.ItemId = cli.ItemId
    LEFT OUTER JOIN VendorItemContract vic
      ON vic.ItemId = cli.ItemId
      AND vic.VendorId = v.VendorId
      AND (vic.CustomerLocationId IS NULL
      OR vic.CustomerLocationId = inv.CustomerLocationId)
    LEFT OUTER JOIN Address ad
      ON ad.AddressId = cl.AddressId
    LEFT OUTER JOIN State st
      ON st.StateId = ad.StateId
  WHERE inv.ClientId = ClientId
  AND IsPaused = 0
  AND inv.IsDeleted = 0
  AND InvoiceType = 'invoice'
  AND ApprovalStatusId IN (5, 7)
  AND (StateCode = 'ALL'
  OR st.StateNameShort = StateCode);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InvoiceApprovalCycleTimeReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `InvoiceApprovalCycleTimeReport`(startDate datetime, endDate datetime)
BEGIN
  SET @Total := (SELECT
      COUNT(Invoice.InvoiceId)
    FROM Invoice
    WHERE ClientId = 1
    AND (Invoice.ApprovalStatusId = 4
    OR Invoice.ApprovalStatusId = 5
    OR Invoice.ApprovalStatusId = 7)
    AND LastActionDate <= endDate
    AND LastActionDate >= startDate
    AND Invoice.IsPaused = 0
    AND Invoice.InvoiceId NOT IN (SELECT
        InvoiceId
      FROM ApproverSetting
      WHERE IsHold = 1));

  SELECT
    a.DateRange,
    CASE WHEN `Count` IS NULL OR
        `Count` = '' THEN '0' ELSE `Count` END AS `Count`,
    CASE WHEN `Percent` IS NULL OR
        `Percent` = '' THEN '0' ELSE `Percent` END AS `Percent`
  FROM DateRangeForReport a
    LEFT OUTER JOIN (SELECT
        CASE WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
            MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
            WEEKDAY(Invoice.LastActionDate) + 1, 1)) IS NULL THEN '1 Day' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
            MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
            WEEKDAY(Invoice.LastActionDate) + 1, 1)) <= 1 THEN '1 Day' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
            MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
            WEEKDAY(Invoice.LastActionDate) + 1, 1)) <= 2 THEN '2 Days' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
            MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
            WEEKDAY(Invoice.LastActionDate) + 1, 1)) <= 3 THEN '3 Days' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
            MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
            WEEKDAY(Invoice.LastActionDate) + 1, 1)) <= 4 THEN '4 Days' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
            MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
            WEEKDAY(Invoice.LastActionDate) + 1, 1)) <= 5 THEN '5 Days' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
            MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
            WEEKDAY(Invoice.LastActionDate) + 1, 1)) <= 10 THEN '6 - 10 Days' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
            MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
            WEEKDAY(Invoice.LastActionDate) + 1, 1)) >= 11 THEN 'More than 10 Days' END AS `Range`,
        COUNT(Invoice.InvoiceId) AS `Count`,
        (COUNT(Invoice.InvoiceId) / @Total) * 100 AS `Percent`
      FROM Invoice
      WHERE ClientId = 1
      AND (Invoice.ApprovalStatusId = 4
      OR Invoice.ApprovalStatusId = 5
      OR Invoice.ApprovalStatusId = 7)
      AND LastActionDate <= endDate
      AND LastActionDate >= startDate
      GROUP BY CASE WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
          MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
          WEEKDAY(Invoice.LastActionDate) + 1, 1)) IS NULL THEN '1 Day' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
          MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
          WEEKDAY(Invoice.LastActionDate) + 1, 1)) <= 1 THEN '1 Day' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
          MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
          WEEKDAY(Invoice.LastActionDate) + 1, 1)) <= 2 THEN '2 Days' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
          MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
          WEEKDAY(Invoice.LastActionDate) + 1, 1)) <= 3 THEN '3 Days' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
          MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
          WEEKDAY(Invoice.LastActionDate) + 1, 1)) <= 4 THEN '4 Days' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
          MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
          WEEKDAY(Invoice.LastActionDate) + 1, 1)) <= 5 THEN '5 Days' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
          MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
          WEEKDAY(Invoice.LastActionDate) + 1, 1)) <= 10 THEN '6 - 10 Days' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
          MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
          WEEKDAY(Invoice.LastActionDate) + 1, 1)) >= 11 THEN 'More than 10 Days' END) b
      ON a.DateRange = b.`Range`
  ORDER BY `DateRange`;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InvoicePaymentByDays` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `InvoicePaymentByDays`(startDate datetime, endDate datetime)
BEGIN
  DECLARE Total int;
  SET Total = (SELECT
      COUNT(Invoice.InvoiceId)
    FROM Invoice
    WHERE ClientId = 1
    AND Invoice.ApprovalStatusId = 7
    AND LastActionDate <= endDate
    AND LastActionDate >= startDate);

  SELECT
    a.DateRange,
    SUM(CASE WHEN b.`Count` IS NULL THEN 0 ELSE b.`Count` END) AS `Count`,
    SUM(CASE WHEN b.`Percent` IS NULL THEN 0 ELSE `Percent` END) AS `Percent`
  FROM PaymentDateRangeForReport a
    LEFT OUTER JOIN (SELECT
        CASE WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) IS NULL THEN 'On Time' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) = 0 THEN 'On Time' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) <= 1 THEN '1 Day Late' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) <= 2 THEN '2 Days Late' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) <= 3 THEN '3 Days Late' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) <= 4 THEN '4 Days Late' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) <= 5 THEN '5 Days Late' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) <= 10 THEN '6 - 10 Days Late' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) >= 11 THEN 'More than 10 Days Late' END AS `Range`,
        COUNT(Invoice.InvoiceId) AS `Count`,
        (COUNT(Invoice.InvoiceId) / Total) * 100 AS `Percent`
      FROM Invoice
      WHERE ClientId = 1
      AND IsDeleted = 0
      AND Invoice.ApprovalStatusId = 7
      AND LastActionDate <= endDate
      AND LastActionDate >= startDate

      GROUP BY CASE WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) IS NULL THEN 'On Time' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) <= 0 THEN 'On Time' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) <= 1 THEN '1 Day Late' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) <= 2 THEN '2 Days Late' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) <= 3 THEN '3 Days Late' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) <= 4 THEN '4 Days Late' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) <= 5 THEN '5 Days Late' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) <= 10 THEN '6 - 10 Days Late' WHEN DATEDIFF(Invoice.InvoiceDate, Invoice.LastActionDate) >= 11 THEN 'More than 10 Days Late' END,
               CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END,
               Invoice.LastActionDate) b
      ON a.DateRange = b.`Range`
  GROUP BY a.DateRange,
           b.`Range`,
           a.Id
  ORDER BY a.Id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `LoadCustomerData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `LoadCustomerData`(IN CustomerNumber nvarchar(50),
IN CustomerName nvarchar(50),
IN ClientID int)
BEGIN
  IF EXISTS (SELECT
        'False'
      FROM Customer cust
      WHERE cust.CustomerNo = CustomerNumber
      AND cust.ClientId = ClientID) THEN
    INSERT INTO Customer (CustomerName, CustomerNo, ClientId)
      VALUES (CustomerName, CustomerNumber, ClientID);
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `MigrateInsertHistory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `MigrateInsertHistory`(IN OldID int,
IN Actor nvarchar(50),
IN `Action` nvarchar(50),
IN ActionDate nvarchar(50),
IN PreviousData nvarchar(50),
IN NewData nvarchar(50),
IN Field nvarchar(50),
IN InitialStatus nvarchar(50),
IN CurrentStatus nvarchar(50),
IN InvoiceName nvarchar(50),
IN ClientID int)
BEGIN
  DECLARE NewInvoiceID int;
  IF EXISTS (SELECT
        Id
      FROM InvoiceHistory invhist
      WHERE invhist.OldId = OldID) THEN
    DELETE
      FROM InvoiceHistory
    WHERE OldId = OldID;
  END IF;

  SELECT
    NewInvoiceID = InvoiceId
  FROM Invoice inv
  WHERE inv.InvoiceName = InvoiceName;

  IF NewInvoiceID IS NOT NULL THEN
    INSERT INTO InvoiceHistory (InvoiceId, Actor, `Action`, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, OldId)
      VALUES (NewInvoiceID, Actor, `Action`, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, OldID);
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `MonthlyBilling` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `MonthlyBilling`(IN startDate datetime,
IN endDate datetime)
BEGIN

  SELECT
    COUNT(*) AS MasonicareInvoice
  FROM Invoice
  WHERE Clientid = 5
  AND (InvoiceType = 'Invoice'
  OR InvoiceType = 'Credit')
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS MasonicareArchive
  FROM Invoice
  WHERE Clientid = 5
  AND InvoiceType = 'Archive'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;


  SELECT
    COUNT(*) AS AvgInvoice
  FROM Invoice
  WHERE Clientid = 28
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS AVGArchive
  FROM Invoice
  WHERE BatchId IN (SELECT
      ID
    FROM Batch
    WHERE ClientId = 28
    AND CreatedDate > startDate
    AND CreatedDate < endDate
    AND Receiver LIKE '%archive%');

  SELECT
    COUNT(*) AS KettleInvoice
  FROM Invoice
  WHERE Clientid = 1
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'BOL';

  SELECT
    COUNT(*) AS KettleBOL
  FROM Invoice
  WHERE Clientid = 1
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'BOL';

  SELECT
    COUNT(*) AS KettleCAInvoice
  FROM Invoice
  WHERE Clientid = 41
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'BOL';

  SELECT
    COUNT(*) AS KettleCABOL
  FROM Invoice
  WHERE Clientid = 41
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'BOL';

  SELECT
    COUNT(*) AS KettleGreenBayInvoice
  FROM Invoice
  WHERE Clientid = 70
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'BOL';

  SELECT
    COUNT(*) AS KettleGreenBayBOL
  FROM Invoice
  WHERE Clientid = 70
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'BOL';

  SELECT
    COUNT(*) AS KettleUnionCityBOL
  FROM Invoice
  WHERE Clientid = 71
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'BOL';

  SELECT
    COUNT(*) AS KettleUnionCityBOL
  FROM Invoice
  WHERE Clientid = 71
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'BOL';

  SELECT
    COUNT(*) AS Bradford
  FROM Invoice
  WHERE Clientid = 18
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS SelfInvoice
  FROM Invoice
  WHERE Clientid = 15
  AND InvoiceType <> 'Archive'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS SelfArchive
  FROM Invoice
  WHERE Clientid = 15
  AND InvoiceType = 'Archive'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS Twochefs
  FROM Invoice
  WHERE Clientid = 23
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS TwochefsStatement
  FROM Invoice
  WHERE Clientid = 23
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS TwochefsStatementPages
  FROM InvoiceDocs
  WHERE InvoiceId IN (SELECT
      InvoiceId
    FROM Invoice
    WHERE Clientid = 23
    AND InvoiceType = 'Statement'
    AND ScannedDate >= startDate
    AND ScannedDate < endDate);

  SELECT
    COUNT(*) AS TwochefsPR
  FROM POHeader
  WHERE ClientId = 23
  AND CreatedDate >= startDate
  AND CreatedDate < endDate
  AND POStatus > 4
  AND POStatus < 10;


  SELECT
    COUNT(*) AS DriveInvoices
  FROM Invoice
  WHERE Clientid = 20
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;


  SELECT
    COUNT(*) AS DWRInvoices
  FROM Invoice
  WHERE Clientid = 22
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;


  SELECT
    COUNT(*) AS SteelInvoices
  FROM Invoice
  WHERE Clientid = 26
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;


  SELECT
    COUNT(*) AS NestleCloudXScannedInvoices
  FROM Invoice
  WHERE Clientid = 27
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND BatchID IN (SELECT
      ID
    FROM Batch
    WHERE ClientID = 27
    AND BatchName LIKE '%image%');


  SELECT
    COUNT(*) AS NestleTotal
  FROM Invoice
  WHERE Clientid = 27
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceDate > '2015-07-31';

  SELECT
    COUNT(*) AS HandHAutoInvoice
  FROM Invoice
  WHERE Clientid = 35
  AND InvoiceType = 'Invoice'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS HandHAutoStatement
  FROM Invoice
  WHERE Clientid = 35
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS HandHAutoStatementPages
  FROM InvoiceDocs
  WHERE InvoiceId IN (SELECT
      InvoiceId
    FROM Invoice
    WHERE Clientid = 35
    AND InvoiceType = 'Statement'
    AND ScannedDate >= startDate
    AND ScannedDate < endDate);


  -- select COUNT(invoiceID) As Cnt from InvoiceDocs where InvoiceId in
  -- (select InvoiceID from Invoice where Clientid = 14 
  -- and (InvoiceType = 'Invoice' Or InvoiceType = 'Credit')
  -- and ScannedDate >= startDate and ScannedDate < endDate)
  -- group by InvoiceId Having (COUNT(invoiceID) > 4);


  SELECT
    COUNT(*) AS Rosewood
  FROM Invoice
  WHERE Clientid = 34
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;


  SELECT
    COUNT(*) AS RobinsonLumber
  FROM Invoice
  WHERE Clientid = 49
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS `24M`
  FROM Invoice
  WHERE Clientid = 50
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS NelsonAutoTotal
  FROM Invoice
  WHERE Clientid = 61
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement';

  SELECT
    COUNT(*),
    CompanyCode AS NelsonAuto
  FROM Invoice
  WHERE Clientid = 61
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS NelsonAutoStatement
  FROM Invoice
  WHERE Clientid = 61
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode;

  SELECT
    COUNT(*) AS NelsonAutoStatementPages
  FROM InvoiceDocs
  WHERE InvoiceId IN (SELECT
      InvoiceId
    FROM Invoice
    WHERE Clientid = 61
    AND InvoiceType = 'Statement'
    AND ScannedDate >= startDate
    AND ScannedDate < endDate);

  SELECT
    COUNT(*) AS BongardsInvoice
  FROM Invoice
  WHERE Clientid = 88
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Invoice';

  SELECT
    COUNT(*) AS BongardsArchive
  FROM Invoice
  WHERE Clientid = 88
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Archive';


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `MonthlyBilling2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `MonthlyBilling2`(IN startDate datetime,
IN endDate datetime)
BEGIN

  SELECT
    COUNT(*) AS AcaciaInvoice
  FROM Invoice
  WHERE Clientid = 58
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Archive';

  SELECT
    COUNT(*) AS AcaciaArchive
  FROM Invoice
  WHERE Clientid = 58
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Archive';

  SELECT
    COUNT(*) AS VeraceInvoice
  FROM Invoice
  WHERE Clientid = 64
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS ContinentalBattrey
  FROM Invoice
  WHERE Clientid = 77
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS SteelPlex
  FROM Invoice
  WHERE Clientid = 66
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Archive';

  SELECT
    COUNT(*) AS SteelArchive
  FROM Invoice
  WHERE Clientid = 66
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Archive';

  SELECT
    COUNT(*) AS HardyDiag
  FROM Invoice
  WHERE Clientid = 63
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS AmericanMessaging
  FROM Invoice
  WHERE Clientid = 83
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS StrategicSecurityInvoice
  FROM Invoice
  WHERE Clientid = 84
  AND InvoiceType <> 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS StrategicSecurityStatement
  FROM Invoice
  WHERE Clientid = 84
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS StrategicSecurityStatementPages
  FROM InvoiceDocs
  WHERE InvoiceId IN (SELECT
      InvoiceId
    FROM Invoice
    WHERE Clientid = 84
    AND InvoiceType = 'Statement'
    AND ScannedDate >= startDate
    AND ScannedDate < endDate);

  SELECT
    COUNT(*) AS KeterNormal
  FROM Invoice
  WHERE Clientid = 79
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'HaulerInvoice';

  SELECT
    COUNT(*) AS KeterHauling
  FROM Invoice
  WHERE Clientid = 79
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'HaulerInvoice';

  SELECT
    SUM(PageCount) AS KeterBigPageCount
  FROM keterPageCount
  WHERE PageCount > 2; -- Requires keterPageCount to be updated with the date range for the current month
  -- select PageCount, COUNT(*) from keterPageCount where PageCount > 1 group by PageCount;
  -- select InvoiceId, COUNT(*) As KeterHaulingPages from InvoiceDocs where InvoiceId in (select InvoiceId from Invoice where Clientid =79 and InvoiceType = 'HaulerInvoice'
  -- and ScannedDate >= startDate and ScannedDate < endDate) Group By InvoiceId Order By KeterHaulingPages;

  SELECT
    COUNT(*) AS Nova
  FROM Invoice
  WHERE Clientid = 86
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;


  SELECT
    COUNT(*) AS Coffee
  FROM Invoice
  WHERE Clientid = 80
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS Mission
  FROM Invoice
  WHERE Clientid = 68
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceId IN (SELECT
      InvoiceId
    FROM InvoiceDocs);

  SELECT
    COUNT(*) AS RGBarry
  FROM Invoice
  WHERE Clientid = 76
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS SEHAInvoices
  FROM Invoice
  WHERE Clientid = 65
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS SEHAPR
  FROM POHeader
  WHERE ClientId = 65
  AND CreatedDate >= startDate
  AND CreatedDate < endDate
  AND POStatus > 4
  AND POStatus < 10;

  SELECT
    COUNT(*) AS SEHASR
  FROM StockRequest
  WHERE ClientId = 65
  AND CreatedDate >= startDate
  AND CreatedDate < endDate
  AND SRStatus > 4
  AND SRStatus < 10;

  SELECT
    COUNT(*) AS CCareInvoices
  FROM Invoice
  WHERE Clientid = 92
  AND ScannedDate >= startDate
  AND InvoiceType = 'Invoice'
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS CCareArchive
  FROM Invoice
  WHERE Clientid = 92
  AND ScannedDate >= startDate
  AND InvoiceType <> 'Invoice'
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS CCarePaymentSync
  FROM Invoice
  WHERE Clientid = 92
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND ApprovalStatusID = 7;

  SELECT
    COUNT(*) AS AmerProdInvoice
  FROM Invoice
  WHERE Clientid = 91
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Archive';

  SELECT
    COUNT(*) AS AmerProdArchive
  FROM Invoice
  WHERE Clientid = 91
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Archive';

  SELECT
    COUNT(*) AS HarcoInvoice
  FROM Invoice
  WHERE Clientid = 97
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS ColemanInvoice
  FROM Invoice
  WHERE Clientid = 89
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS UNCInvoice
  FROM Invoice
  WHERE Clientid = 98
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS DeerlandInvoice
  FROM Invoice
  WHERE Clientid = 100
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS LouFusz
  FROM Invoice
  WHERE Clientid = 103
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS MichiganTotal
  FROM Invoice
  WHERE Clientid = 114
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*),
    cc.Description
  FROM Invoice i,
       ClientCompany cc
  WHERE i.Clientid = 114
  AND cc.ClientId = 114
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND cc.CompanyCode = i.CompanyCode
  GROUP BY i.CompanyCode;


  SELECT
    COUNT(*) AS ABMFederalNormal
  FROM Invoice
  WHERE Clientid = 113
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND IsDeleted = 0;

  SELECT
    COUNT(*) AS SequoiaInvoice
  FROM Invoice
  WHERE Clientid = 108
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND IsDeleted = 0
  AND InvoiceType = 'Invoice';

  SELECT
    COUNT(*) AS SequoiaArchive
  FROM Invoice
  WHERE Clientid = 108
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND IsDeleted = 0
  AND InvoiceType <> 'Invoice';

  SELECT
    COUNT(*) AS CoinStar
  FROM Invoice
  WHERE Clientid = 102
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS WestSide
  FROM Invoice
  WHERE Clientid = 115
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS BeautyQuest
  FROM Invoice
  WHERE Clientid = 118
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS Andean
  FROM Invoice
  WHERE Clientid = 119
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS Shive
  FROM Invoice
  WHERE Clientid = 123
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND IsDeleted = 0;

  SELECT
    COUNT(*) AS RamarFoods
  FROM Invoice
  WHERE Clientid = 125
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;



END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `MonthlyBilling3` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `MonthlyBilling3`(IN startDate datetime,
IN endDate datetime)
BEGIN

  SELECT
    COUNT(*) AS SummitAuto
  FROM Invoice
  WHERE Clientid = 128
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*),
    CompanyCode AS SummitAuto
  FROM Invoice i
  WHERE Clientid = 128
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY i.CompanyCode
  ORDER BY i.CompanyCode;

  SELECT
    COUNT(*) AS SummitAutoStatementTotal
  FROM Invoice
  WHERE Clientid = 128
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement';

  SELECT
    COUNT(*),
    CompanyCode AS SummitAutoStatement
  FROM Invoice i
  WHERE Clientid = 128
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY i.CompanyCode
  ORDER BY i.CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS SummitStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 128
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY i.CompanyCode
  ORDER BY i.CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS SummitAutoPaymentSync
  FROM Invoice i
  WHERE Clientid = 128
  AND InvoiceType = 'Invoice'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceId IN (SELECT
      InvoiceId
    FROM PaymentStatus)
  GROUP BY i.CompanyCode
  ORDER BY i.CompanyCode;

  SELECT
    COUNT(*) AS Grande
  FROM Invoice
  WHERE Clientid = 129
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS FermanFam
  FROM Invoice
  WHERE Clientid = 164
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS Ferman
  FROM Invoice
  WHERE Clientid = 130
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*),
    CompanyCode AS Ferman
  FROM Invoice i
  WHERE Clientid = 130
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY i.CompanyCode
  ORDER BY i.CompanyCode;


  SELECT
    COUNT(*) AS FermanStatementTotal
  FROM Invoice
  WHERE Clientid = 130
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement';

  SELECT
    COUNT(*),
    CompanyCode AS FermanStatement
  FROM Invoice i
  WHERE Clientid = 130
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY i.CompanyCode
  ORDER BY i.CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS FermanStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 130
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY i.CompanyCode
  ORDER BY i.CompanyCode;

  SELECT
    COUNT(*) AS FermanMotors
  FROM Invoice
  WHERE Clientid = 141
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*),
    CompanyCode AS Ferman
  FROM Invoice i
  WHERE Clientid = 141
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
   GROUP BY i.CompanyCode
  ORDER BY i.CompanyCode;

  SELECT
    COUNT(*) AS FermanMotorsStatementTotal
  FROM Invoice
  WHERE Clientid = 141
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement';

  SELECT
    COUNT(*),
    CompanyCode AS FermanMotorsStatement
  FROM Invoice i
  WHERE Clientid = 141
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY i.CompanyCode
  ORDER BY i.CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS FermanMotorsStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 141
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY i.CompanyCode
  ORDER BY i.CompanyCode;

  SELECT
    COUNT(*),
    i.CompanyCode AS KeyAuto
  FROM Invoice i,
       Batch b
  WHERE i.Clientid = 132
  AND IsDeleted = 0
  AND i.ScannedDate >= startDate
  AND i.ScannedDate < endDate
  AND i.BatchId = b.Id
  AND b.`Source` <> 'QuickBooks'
  GROUP BY i.CompanyCode
  ORDER BY i.CompanyCode;

  SELECT
    COUNT(*),
    i.CompanyCode AS KeyAutoPaymentSync
  FROM Invoice i,
       Batch b
  WHERE i.Clientid = 132
  AND i.ScannedDate >= startDate
  AND i.IsDeleted = 0
  AND i.ScannedDate < endDate
  AND i.BatchId = b.Id
  AND b.`Source` = 'QuickBooks'
  GROUP BY i.CompanyCode
  ORDER BY i.CompanyCode;

  -- select COUNT(*) As KeyAutoStatementTotal from Invoice where Clientid =132
  -- and ScannedDate >= startDate and ScannedDate < endDate and InvoiceType = 'Statement';

  -- select COUNT(*), CompanyCode As KeyAutoStatement from Invoice where Clientid =132 and InvoiceType = 'Statement'
  -- and ScannedDate >= startDate and ScannedDate < endDate
  -- Group by CompanyCode;

  -- select COUNT(*), CompanyCode As KeyAutoStatementPages from InvoiceDocs id, Invoice i 
  -- where id.InvoiceId = i.InvoiceId and i.InvoiceType = 'Statement' and i.ClientId = 132 and ScannedDate >= startDate and ScannedDate < endDate
  -- Group by CompanyCode;


  SELECT
    COUNT(*) AS Archie
  FROM Invoice
  WHERE Clientid = 133
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*),
    CompanyCode AS ArchieStatement
  FROM Invoice
  WHERE Clientid = 133
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS ArchieStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 133
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode;

  SELECT
    COUNT(*) AS HomerSkelton
  FROM Invoice
  WHERE Clientid = 137
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND IsDeleted = 0;

  SELECT
    COUNT(*),
    CompanyCode AS HomerSkelton
  FROM Invoice
  WHERE Clientid = 137
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode
  Order By CompanyCode;

  SELECT
    COUNT(*) AS HomerSkeltonStatementTotal
  FROM Invoice
  WHERE Clientid = 137
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement';

  SELECT
    COUNT(*),
    CompanyCode AS HomerSkeltonStatement
  FROM Invoice
  WHERE Clientid = 137
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  Order By CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS HomerSkeltonStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 137
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  Order By CompanyCode;


  SELECT
    COUNT(*) AS MurphyAuto
  FROM Invoice
  WHERE Clientid = 140
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*),
    CompanyCode AS MurphyAuto
  FROM Invoice
  WHERE Clientid = 140
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode;

  SELECT
    COUNT(*) AS MurphyAutoStatementTotal
  FROM Invoice
  WHERE Clientid = 140
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement';

  SELECT
    COUNT(*),
    CompanyCode AS MurphyAutoStatement
  FROM Invoice
  WHERE Clientid = 140
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS MurphyAutoStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 140
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode;

  -- select COUNT(*) As Theragenics from Invoice where Clientid =139 and ScannedDate >= startDate and ScannedDate < endDate;

  SELECT
    COUNT(*) AS IntrimInvoice
  FROM Invoice
  WHERE Clientid = 142
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;
  
  SELECT
    COUNT(*) AS DigitalDynamicsInvoice
  FROM Invoice
  WHERE Clientid = 147
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = "Invoice";
   SELECT
    COUNT(*) AS DigitalDynamicsBOL
  FROM Invoice
  WHERE Clientid = 147
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> "Invoice";
  
  SELECT
    COUNT(*) AS BillKnightInvoice
  FROM Invoice
  WHERE Clientid = 163
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;
  SELECT
    COUNT(*),
    CompanyCode AS BillKnight
  FROM Invoice
  WHERE Clientid = 163
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode
  Order By CompanyCode;
  SELECT
    COUNT(*) AS BillKnightStatementTotal
  FROM Invoice
  WHERE Clientid = 163
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement';
  SELECT
    COUNT(*),
    CompanyCode AS BillKnightStatement
  FROM Invoice
  WHERE Clientid = 163
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  Order By CompanyCode;
  SELECT
    COUNT(*),
    CompanyCode AS BillKnightStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 163
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  Order By CompanyCode;

  SELECT
    COUNT(*) AS GrotheAutoInvoiceTotal
  FROM Invoice
  WHERE Clientid = 171
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;
  SELECT
    COUNT(*),
    CompanyCode AS GrotheAuto
  FROM Invoice
  WHERE Clientid = 171
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode
  Order By CompanyCode;

  SELECT
    COUNT(*) AS GrotheAutoStatementTotal
  FROM Invoice
  WHERE Clientid = 171
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement';

  SELECT
    COUNT(*),
    CompanyCode AS GrotheAutoStatement
  FROM Invoice
  WHERE Clientid = 171
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  Order By CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS GrotheAutoStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 171
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  Order By CompanyCode;

  --

  SELECT
    COUNT(*) AS MikeBellInvoice
  FROM Invoice
  WHERE Clientid = 174
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS MikeBellStatement
  FROM Invoice
  WHERE Clientid = 174
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement';

  SELECT
    COUNT(*) AS MikeBellStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 174
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `MonthlyBilling4` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `MonthlyBilling4`(IN startDate datetime,
IN endDate datetime)
BEGIN
  SELECT
    COUNT(*)
  FROM Invoice AS BobLoqTotalInvoice
  WHERE ClientId = 176
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement';

  SELECT
    COUNT(*),
    CompanyCode AS BobLoqInvoice
  FROM Invoice
  WHERE Clientid = 176
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode
  order by CompanyCode;

  SELECT
    COUNT(*) AS BobLoqStatementTotal
  FROM Invoice
  WHERE Clientid = 176
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement';

  SELECT
    COUNT(*),
    CompanyCode AS BobLoqStatement
  FROM Invoice
  WHERE Clientid = 176
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  order by CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS BobLoqStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 176
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  order by CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS P4Auto
  FROM Invoice
  WHERE Clientid = 177
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode
  order by CompanyCode;

  SELECT
    COUNT(*) AS P4AutoStatementTotal
  FROM Invoice
  WHERE Clientid = 177
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement';

  SELECT
    COUNT(*),
    CompanyCode AS P4AutoStatement
  FROM Invoice
  WHERE Clientid = 177
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  order by CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS P4AutoStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 177
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  order by CompanyCode;
  -- 
  SELECT
    COUNT(*),
    CompanyCode AS DecaturInvoice
  FROM Invoice
  WHERE Clientid = 182
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode
  order by CompanyCode;

  SELECT
    COUNT(*) AS DecaturStatementTotal
  FROM Invoice
  WHERE Clientid = 182
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement';

  SELECT
    COUNT(*),
    CompanyCode AS DecaturStatement
  FROM Invoice
  WHERE Clientid = 182
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  order by CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS DecaturStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 182
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  order by CompanyCode;

 SELECT
    COUNT(*),
    CompanyCode AS BrandingIronInvoice
  FROM Invoice
  WHERE Clientid = 181
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode
  order by CompanyCode;
  -- 
  SELECT
    COUNT(*),
    i.CompanyCode AS StepOneInvoice, cc.Description
  FROM Invoice i, ClientCompany cc
  WHERE i.Clientid = 183
  AND i.CompanyCode = cc.CompanyCode
  AND cc.ClientId = 183
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY i.CompanyCode
  order by i.CompanyCode;

  SELECT
    COUNT(*) AS StepOneStatementTotal
  FROM Invoice
  WHERE Clientid = 183
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement';

  SELECT
    COUNT(*),
    i.CompanyCode AS StepOneStatement, cc.Description
  FROM Invoice i, ClientCompany cc
  WHERE i.Clientid = 183
  And i.CompanyCode = cc.CompanyCode
  And cc.ClientId = 183
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY i.CompanyCode
  order by i.CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS StepOneStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 183
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  order by CompanyCode;

  -- 
  SELECT
    COUNT(*),
    CompanyCode AS PedersonInvoice
  FROM Invoice
  WHERE Clientid = 187
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode
  order by CompanyCode;

  SELECT
    COUNT(*) AS PedersonStatementTotal
  FROM Invoice
  WHERE Clientid = 187
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement';

  SELECT
    COUNT(*),
    CompanyCode AS PedersonStatement
  FROM Invoice
  WHERE Clientid = 187
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  order by CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS PedersonStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 187
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  order by CompanyCode;

  --
  SELECT
    COUNT(*),
    CompanyCode AS UCALInvoice
  FROM Invoice
  WHERE Clientid = 170
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode
  order by CompanyCode;
  
   SELECT
    COUNT(*),
    CompanyCode AS ChesapeakeInvoice
  FROM Invoice
  WHERE Clientid = 188
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode
  order by CompanyCode;
  
     SELECT
    COUNT(*),
    CompanyCode AS RocketInvoice
  FROM Invoice
  WHERE Clientid = 189
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode
  order by CompanyCode;
  
       SELECT
    COUNT(*) As CountryFoodsInvoice
  FROM Invoice
  WHERE Clientid = 190
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement';

 SELECT
    COUNT(*) AS MontereyBayInvoice
  FROM Invoice
  WHERE Clientid = 191
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

   SELECT
    COUNT(*),
    CompanyCode AS LongLewisInvoice
  FROM Invoice
  WHERE Clientid = 195
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode
  order by CompanyCode;
  
     SELECT
    COUNT(*),
    CompanyCode AS LongLewisStatement
  FROM Invoice
  WHERE Clientid = 195
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement'
  GROUP BY CompanyCode
  order by CompanyCode;
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `new_procedure` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `new_procedure`()
BEGIN
  DROP TABLE IF EXISTS T1;

  CREATE TEMPORARY TABLE T1 (
    GLCodeName nvarchar(500) NULL,
    GLCodeId int NULL
  );

  INSERT INTO T1
    SELECT
      CONCAT(SUBSTRING_INDEX (glcodename, '-', 1),
      ', ',
      c.Description,
      ' | ',
      SUBSTRING_INDEX (glcodename, '-', -1)),
      g.glcodeId
    FROM ClientCompany c
      INNER JOIN GLCode g
        ON g.ClientCompanyId = c.Id
    WHERE g.clientid = 34;

  UPDATE GLCode
  SET GLCodeName = (SELECT
      GLCodeName
    FROM T1
    WHERE GLCode.glcodeId = T1.GLCodeId)
  WHERE clientid = 34;

-- select * from T1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `OCREnabledClientCount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `OCREnabledClientCount`(IN clientIdP int)
BEGIN
  SELECT
    COUNT(*)
  FROM `Client` cl
  WHERE cl.CLientId = clientIdP
  AND cl.IsOCRClient = 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `OutputForRobinson` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `OutputForRobinson`()
BEGIN
  (SELECT
      I.`BatchID` AS BatchNum,
      V.`VendorNo` AS VendorId,
      I.`InvoiceNo` AS DocNmbr,
      CASE WHEN I.InvoiceTotal < 0 THEN 5 ELSE 1 END AS DocType,
      'OPEN AP' AS RefeRan,
      '000-2210-00' AS GLACCT,
      '0' AS CREATEDIST,
      '2' AS DISTTYPE,
      I.InvoiceTotal AS CREDIT,
      '0' AS DEBIT,
      I.InvoiceDate AS DOCDATE,
      I.InvoiceId AS DISTRIBUTIONREF,
      I.PaymentDueDate AS DUEDATE,
      DATE_ADD(I.InvoiceDate, INTERVAL V.Discount_Day_01 DAY) AS DICSDATE,
      I.InvoiceTotal * V.NetDisPer AS DICSAMT
    FROM Invoice I
      INNER JOIN `Vendor` V
        ON V.`VendorId` = I.`VendorId`
    WHERE I.ClientId = 49
    AND I.isdeleted = 0
    AND I.ispaused = 0
    AND I.approvalstatusid = 4)
  UNION
  (SELECT
      I.`BatchID` AS BatchNum,
      V.`VendorNo` AS VendorId,
      I.`InvoiceNo` AS DocNmbr,
      CASE WHEN I.InvoiceTotal < 0 THEN 5 ELSE 1 END AS DocType,
      'OPEN AP' AS RefeRan,
      GL.GLCodeName AS GLACCT,
      '0' AS CREATEDIST,
      '6' AS DISTTYPE,
      '0' AS CREDIT,
      AH.AmountAppoved AS DEBIT,
      I.InvoiceDate AS DOCDATE,
      I.InvoiceId AS DISTRIBUTIONREF,
      I.PaymentDueDate AS DUEDATE,
      DATE_ADD(I.InvoiceDate, INTERVAL V.Discount_Day_01 DAY) AS DICSDATE,
      I.InvoiceTotal * V.NetDisPer AS DICSAMT
    FROM Invoice I
      INNER JOIN `ApprovalHistory` AH
        ON AH.`InvoiceId` = I.`InvoiceId`
      INNER JOIN `GLCode` GL
        ON GL.`GLCodeId` = AH.`GLCodeId`
      INNER JOIN `Vendor` V
        ON V.`VendorId` = I.`VendorId`
    WHERE I.ClientId = 49
    AND I.isdeleted = 0
    AND I.ispaused = 0
    AND I.approvalstatusid = 4)
  ORDER BY DISTRIBUTIONREF, DISTTYPE;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `PauseInvoice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `PauseInvoice`(IN MyInvoiceId int,
IN MyPausedDate nvarchar(250),
IN PausedComment nvarchar(250))
BEGIN
  SELECT
    'About to update';
  UPDATE Invoice
  SET IsPaused = 1,
      LastActionBy = 'System',
      LastActionDate = MyPausedDate
  WHERE InvoiceId = MyInvoiceId;
  SELECT
    'About to insert';
  INSERT INTO PausedInvoice (InvoiceId, PausedDate, `Comment`)
    VALUES (MyInvoiceId, MyPausedDate, PausedComment);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `PerformanceReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `PerformanceReport`(IN startDate datetime,
IN endDate datetime)
BEGIN
  DROP TEMPORARY TABLE IF EXISTS PerformanceTableResults;
  CREATE TEMPORARY TABLE PerformanceTableResults (
    `Client` varchar(1000),
    `Full Name` varchar(1000),
    `Approve Count` int
  );
  INSERT INTO PerformanceTableResults
    SELECT
      UCASE(Client.`CustomerName`) `Client`,
      UCASE(CONCAT(FirstName, ' ', LastName)) `Full Name`,
      (SELECT
          COUNT(DISTINCT Performance.InvoiceId)
        FROM Performance
        WHERE Performance.`UserId` = `User`.`UserId`
        AND Performance.`ActionDate` >= startDate
        AND Performance.`ActionDate` <= endDate
        AND Performance.`ActionType` = 3) `Approve Count`
    FROM `User`
      INNER JOIN `Client`
        ON User.`ClientId` = Client.`ClientId`
    WHERE (RoleId = 1
    OR EXISTS (SELECT
        *
      FROM UserRoles
      WHERE UserRoles.RoleId = 1
      AND `User`.`UserId` = UserRoles.`UserId`))
    AND `User`.IsActive = 1
    AND (SELECT
        COUNT(DISTINCT Performance.InvoiceId)
      FROM Performance
      WHERE Performance.`UserId` = `User`.`UserId`
      AND Performance.`ActionDate` >= startDate
      AND Performance.`ActionDate` <= endDate
      AND Performance.`ActionType` = 3) > 0;
  SELECT
    PerformanceR.`Full Name`,
    `Client`,
    SUM(PerformanceR.`Approve Count`) `Approve Count`
  FROM PerformanceTableResults PerformanceR
  GROUP BY `Full Name`
  ORDER BY `Full Name` DESC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ReassignApprover` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ReassignApprover`(IN OldUserName nvarchar(50),
IN NewUserName nvarchar(50),
IN StartDate nvarchar(50),
IN EndDate nvarchar(50),
IN IsPermanent bool,
IN ForClientId int)
BEGIN
  -- Get the users and save them in variables
  DECLARE OldUID char(36);
  DECLARE NewUID char(36);
  SET OldUID = (SELECT
      UserId
    FROM `User`
    WHERE ClientId = ForClientId
    AND UserName = OldUserName
    AND IsActive = 1 LIMIT 1);

  SET NewUID = (SELECT
      UserId
    FROM `User`
    WHERE ClientId = ForClientId
    AND UserName = NewUserName LIMIT 1);

  -- If permanent, no need to track of time. Just move all settings to new user
  IF (OldUID IS NOT NULL
    AND NewUID IS NOT NULL) THEN
    -- Move roles to the new user
    INSERT INTO UserRoles (UserId, RoleId)
      SELECT
        NewUID,
        RoleId
      FROM UserRoles t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          RoleId,
          UserId
        FROM UserRoles t2
        WHERE t2.RoleId = t1.RoleId
        AND t2.UserId = NewUID);
    -- Move the GLs from old to new, making sure duplicates are not created
    INSERT INTO ApproverGLCode (UserId, GLCodeId)
      SELECT
        NewUID,
        GLCodeId
      FROM ApproverGLCode t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          GLCodeId,
          UserId
        FROM ApproverGLCode t2
        WHERE t2.GLCodeId = t1.GLCodeId
        AND t2.UserId = NewUID);

    -- Move the departments, making sure duplicates are not created
    INSERT INTO UserDepartment (UserId, DepartmentId)
      SELECT
        NewUID,
        DepartmentId
      FROM UserDepartment t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          DepartmentId
        FROM UserDepartment t2
        WHERE t2.DepartmentId = t1.DepartmentId
        AND t2.UserId = NewUID);
    -- Move CompanyCode
    INSERT INTO UserClientCompanies (UserId, ClientCompanyId)
      SELECT
        NewUID,
        ClientCompanyId
      FROM UserClientCompanies t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          ClientCompanyId
        FROM UserClientCompanies t2
        WHERE t2.ClientCompanyId = t1.ClientCompanyId
        AND t2.UserId = NewUID);
    -- Select 'Top';
    -- Move catchall sub steps
    INSERT INTO ApprovalSubStepCatchAllUsers (UserId, ApprovalSubStepId, Alphabets, PickupFolderName)
      SELECT
        NewUID,
        ApprovalSubStepId,
        Alphabets,
        PickupFolderName
      FROM ApprovalSubStepCatchAllUsers t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          ApprovalSubStepCatchAllUserId,
          ApprovalSubStepId
        FROM ApprovalSubStepCatchAllUsers t2
        WHERE t2.ApprovalSubStepCatchAllUserId = t1.ApprovalSubStepCatchAllUserId
        AND t2.ApprovalSubStepId = t1.ApprovalSubStepId
        AND t2.UserId = NewUID);
    -- Move SubStepUser
    INSERT INTO ApprovalSubStepUser (UserId, ApprovalSubStepId, ManualAssignmentOnly)
      SELECT
        NewUID,
        ApprovalSubStepId,
        ManualAssignmentOnly
      FROM ApprovalSubStepUser t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          ApprovalSubStepId
        FROM ApprovalSubStepUser t2
        WHERE t2.ApprovalSubStepId = t1.ApprovalSubStepId
        AND t2.UserId = NewUID);
    -- Select '2';
    -- Move SubStepUserDepartment
    INSERT INTO ApprovalSubStepUserDepartment (UserId, ApprovalSubStepId, DepartmentId)
      SELECT
        NewUID,
        ApprovalSubStepId,
        DepartmentId
      FROM ApprovalSubStepUserDepartment t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          ApprovalSubStepId,
          DepartmentId
        FROM ApprovalSubStepUserDepartment t2
        WHERE t2.ApprovalSubStepId = t1.ApprovalSubStepId
        AND t2.DepartmentId = t1.DepartmentId
        AND t2.UserId = NewUID);
    -- Move SubSteUserGL
    INSERT INTO ApprovalSubStepUserGL (UserId, ApprovalSubStepId, GLCodeId)
      SELECT
        NewUID,
        ApprovalSubStepId,
        GLCodeId
      FROM ApprovalSubStepUserGL t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          ApprovalSubStepId,
          GLCodeId
        FROM ApprovalSubStepUserGL t2
        WHERE t2.ApprovalSubStepId = t1.ApprovalSubStepId
        AND t2.GLCodeId = t1.GLCodeId
        AND t2.UserId = NewUID);
    -- Move substep user vendor
    INSERT INTO ApprovalSubStepUserVendor (UserId, VendorId, ApprovalSubStepId, FirstEscalationManagerId, SecondEscalationManagerId, ThirdEscalationManagerId, Duration)
      SELECT
        NewUID,
        VendorId,
        ApprovalSubStepId,
        FirstEscalationManagerId,
        SecondEscalationManagerId,
        ThirdEscalationManagerId,
        Duration
      FROM ApprovalSubStepUserVendor t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          VendorId,
          ApprovalSubStepId
        FROM ApprovalSubStepUserVendor t2
        WHERE t2.VendorId = t1.VendorId
        AND t2.ApprovalSubStepId = t1.ApprovalSubStepId
        AND t2.UserId = NewUID);
    -- Select '3';
    -- Move substep user account number
    INSERT INTO `ApprovalSubStepUserVendorAccountNumber` (UserId, VendorId, AccountNumber, ApprovalSubStepId, FirstEscalationManagerId, SecondEscalationManagerId, ThirdEscalationManagerId, Duration)
      SELECT
        NewUID,
        VendorId,
        AccountNumber,
        ApprovalSubStepId,
        FirstEscalationManagerId,
        SecondEscalationManagerId,
        ThirdEscalationManagerId,
        Duration
      FROM `ApprovalSubStepUserVendorAccountNumber` t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          VendorId,
          AccountNumber,
          ApprovalSubStepId
        FROM `ApprovalSubStepUserVendorAccountNumber` t2
        WHERE t2.VendorId = t1.VendorId
        AND t2.ApprovalSubStepId = t1.ApprovalSubStepId
        AND t2.AccountNumber = t1.AccountNumber
        AND t2.UserId = NewUID);
    -- Move Vendor Aplphabet
    INSERT INTO `ApprovalSubStepUserVendorAlphabet` (UserId, ApprovalSubStepId, Alphabets)
      SELECT
        NewUID,
        ApprovalSubStepId,
        Alphabets
      FROM `ApprovalSubStepUserVendorAlphabet` t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          ApprovalSubStepId
        FROM `ApprovalSubStepUserVendorAlphabet` t2
        WHERE t2.ApprovalSubStepId = t1.ApprovalSubStepId
        AND t2.UserId = NewUID);
    -- Move substep user vendor department
    INSERT INTO `ApprovalSubStepUserVendorDepartment` (UserId, VendorId, DepartmentId, ApprovalSubStepId, FirstEscalationManagerId, SecondEscalationManagerId, ThirdEscalationManagerId, Duration)
      SELECT
        NewUID,
        VendorId,
        DepartmentId,
        ApprovalSubStepId,
        FirstEscalationManagerId,
        SecondEscalationManagerId,
        ThirdEscalationManagerId,
        Duration
      FROM `ApprovalSubStepUserVendorDepartment` t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          VendorId,
          DepartmentId,
          ApprovalSubStepId
        FROM `ApprovalSubStepUserVendorDepartment` t2
        WHERE t2.VendorId = t1.VendorId
        AND t2.ApprovalSubStepId = t1.ApprovalSubStepId
        AND t2.DepartmentId = t1.DepartmentId
        AND t2.UserId = NewUID);

    -- Move substep user vendor GL
    INSERT INTO `ApprovalSubStepUserVendorGL` (UserId, VendorId, GLCodeId, ApprovalSubStepId, FirstEscalationManagerId, SecondEscalationManagerId, ThirdEscalationManagerId, Duration)
      SELECT
        NewUID,
        VendorId,
        GLCodeId,
        ApprovalSubStepId,
        FirstEscalationManagerId,
        SecondEscalationManagerId,
        ThirdEscalationManagerId,
        Duration
      FROM `ApprovalSubStepUserVendorGL` t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          VendorId,
          GLCodeId,
          ApprovalSubStepId
        FROM `ApprovalSubStepUserVendorGL` t2
        WHERE t2.VendorId = t1.VendorId
        AND t2.ApprovalSubStepId = t1.ApprovalSubStepId
        AND t2.GLCodeId = t1.GLCodeId
        AND t2.UserId = NewUID);
    -- Select '4';
    -- Move Approval Workflow
    INSERT INTO `ApprovalWorkFlow` (UserId, VendorId, Title, ExceptionHandlerId, CurrentLevelUserId, FirstEscalationManagerId, SeondEscalationManagerId, ThirdEscalationManagerId, Duration, `Type`)
      SELECT
        NewUID,
        VendorId,
        Title,
        ExceptionHandlerId,
        CurrentLevelUserId,
        FirstEscalationManagerId,
        SeondEscalationManagerId,
        ThirdEscalationManagerId,
        Duration,
        `Type`
      FROM `ApprovalWorkFlow` t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          VendorId
        FROM `ApprovalWorkFlow` t2
        WHERE t2.VendorId = t1.VendorId
        AND t2.UserId = NewUID);
    -- Move by amount
    -- delete any existing approver by amount from the assignee before reassigning
    DELETE
      FROM `ApproverByAmount`
    WHERE UserId = NewUID;

    INSERT INTO `ApproverByAmount` (UserId, VendorId, MaximumAllowedAmount, SecondApproverId, AuthCode, IsPOIsNoPOIsBoth, WorkflowType)
      SELECT
        NewUID,
        VendorId,
        MaximumAllowedAmount,
        SecondApproverId,
        AuthCode,
        IsPOIsNoPOIsBoth,
        WorkflowType
      FROM `ApproverByAmount` t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          VendorId
        FROM `ApproverByAmount` t2
        WHERE t2.VendorId = t1.VendorId
        AND t2.UserId = NewUID);
    -- Select '5';
    -- Move Approval Settting, which should move active assigments
    INSERT INTO `ApproverSetting` (UserId, InvoiceId, DateIssued, IsDelegated, IsApproved, IsEscalated, OrderNo, IsHold, RecoveryDate)
      SELECT
        NewUID,
        InvoiceId,
        DateIssued,
        IsDelegated,
        IsApproved,
        IsEscalated,
        OrderNo,
        IsHold,
        RecoveryDate
      FROM `ApproverSetting` t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          InvoiceId
        FROM `ApproverSetting` t2
        WHERE t2.InvoiceId = t1.InvoiceId
        AND t2.UserId = NewUID);
    -- Move User invoice assignment, which also should move active assigments
    INSERT INTO `UserInvoiceAssignment` (UserId, InvoiceId, `Type`, State, ApprovalSubStepId, HoldStartDate, HoldEndDate, DateCreated, AssignBackToUserId)
      SELECT
        NewUID,
        InvoiceId,
        `Type`,
        State,
        ApprovalSubStepId,
        HoldStartDate,
        HoldEndDate,
        DateCreated,
        AssignBackToUserId
      FROM `UserInvoiceAssignment` t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          InvoiceId
        FROM `UserInvoiceAssignment` t2
        WHERE t2.InvoiceId = t1.InvoiceId
        AND t2.UserId = NewUID);
    -- Delete if permanent. Otherwise, just disable user   
    IF (IsPermanent = TRUE) THEN
      DELETE
        FROM UserRoles
      WHERE UserId = OldUID;
      DELETE
        FROM ApproverGLCode
      WHERE UserId = OldUID;
      DELETE
        FROM UserDepartment
      WHERE UserId = OldUID;
      DELETE
        FROM UserClientCompanies
      WHERE UserId = OldUID;
      DELETE
        FROM ApprovalSubStepCatchAllUsers
      WHERE UserId = OldUID;
      DELETE
        FROM ApprovalSubStepUserDepartment
      WHERE UserId = OldUID;
      DELETE
        FROM ApprovalSubStepUserGL
      WHERE UserId = OldUID;
      DELETE
        FROM ApprovalSubStepUserVendor
      WHERE UserId = OldUID;
      DELETE
        FROM ApprovalSubStepUserVendorAccountNumber
      WHERE UserId = OldUID;
      DELETE
        FROM ApprovalSubStepUserVendorAlphabet
      WHERE UserId = OldUID;
      DELETE
        FROM ApprovalSubStepUserVendorDepartment
      WHERE UserId = OldUID;
      DELETE
        FROM ApprovalSubStepUserVendorGL
      WHERE UserId = OldUID;
      DELETE
        FROM ApprovalSubStepUser
      WHERE UserId = OldUID;
      DELETE
        FROM ApprovalWorkFlow
      WHERE UserId = OldUID;
      DELETE
        FROM ApproverByAmount
      WHERE UserId = OldUID;
      DELETE
        FROM ApproverSetting
      WHERE UserId = OldUID;
      DELETE
        FROM UserInvoiceAssignment
      WHERE UserId = OldUID;
    END IF;
    -- Update `User` Set IsActive = 0 where UserId = OldUID;

    -- Save reassignment log
    INSERT INTO ReassignUser
      VALUES (NULL, OldUID, NewUID, CURDATE(), CURDATE(), IsPermanent, 1);

    SELECT
      'Done';
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `RemoveGRNPOData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `RemoveGRNPOData`(IN POClientId int,
IN POPONumber varchar(250),
IN POPOLineId varchar(250),
IN PORcvTransactionId varchar(250))
BEGIN

  DELETE LineItemDetail.*
    FROM LineItemDetail
      INNER JOIN Invoice
        ON LineItemDetail.`InvoiceId` = `Invoice`.`InvoiceId`
        AND Invoice.`ClientId` = POClientId
        AND Invoice.`ApprovalStatusId` IN (1, 3, 6)
  WHERE LineItemDetail.`POId` IN (SELECT
        PO.`Id`
      FROM PO
      WHERE PO.ClientId = POClientId
      AND PO.`GRNUse` = 1
      AND PO.`PONumber` = POPONumber
      AND PO.`POLineId` = POPOLineId
      AND PO.`RecievedTransactionId` = PORcvTransactionId);

  DELETE
    FROM PO
  WHERE PO.ClientId = POClientId
    AND PO.`GRNUse` = 1
    AND PO.`PONumber` = POPONumber
    AND PO.`POLineId` = POPOLineId
    AND PO.`RecievedTransactionId` = PORcvTransactionId;

  SELECT
    ROW_COUNT();
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `RemoveNonGRNPOData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `RemoveNonGRNPOData`(IN POClientId int,
IN POPONumber varchar(250),
IN POLineNo varchar(250))
BEGIN

  DELETE LineItemDetail.*
    FROM LineItemDetail
      INNER JOIN Invoice
        ON LineItemDetail.`InvoiceId` = `Invoice`.`InvoiceId`
        AND Invoice.`ClientId` = POClientId
        AND Invoice.`ApprovalStatusId` IN (1, 3, 6)
  WHERE LineItemDetail.`POId` IN (SELECT
        PO.`Id`
      FROM PO
      WHERE PO.ClientId = POClientId
      AND PO.`PONumber` = POPONumber
      AND PO.`LineNo` = POLineNo
      AND PO.`GRNUse` = 0);

  DELETE
    FROM PO
  WHERE PO.ClientId = POClientId
    AND PO.`PONumber` = POPONumber
    AND PO.`LineNo` = POLineNo
    AND PO.`GRNUse` = 0;

  SELECT
    ROW_COUNT();
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `RobinsonSpreedsheetOutput` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `RobinsonSpreedsheetOutput`()
BEGIN
  DECLARE AccountCode int(11);
  DECLARE ClientIdVal int(11);
  SELECT
    Client.`AccountCode`,
    Client.`ClientId` INTO AccountCode, ClientIdVal
  FROM Client
  WHERE ClientId = 64;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SearchWO` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `SearchWO`(
    IN fromDate datetime,
    IN toDate datetime,
    IN woNumber varchar(50),
    IN serviceDescription varchar(250),
    IN woTypeArray varchar(255),
    IN vendorIdArray varchar(255),
    IN propertyIdArray varchar(255),
    IN showMatched varchar(255))
BEGIN
    -- Ensure fromDate and toDate are valid
    SET fromDate = IFNULL(fromDate, '0000-00-00 00:00:00');
    SET toDate = IFNULL(toDate, '9999-12-31 23:59:59');

    IF showMatched = 'all' THEN
        SELECT
            w.*,
            m.WODetailId,
            m.WOSummary,
            m.MatchedDate,
            CONCAT(v.VendorNo, '-', v.VendorName) AS VendorName,
            d.DepartmentName AS PropertyName
        FROM (
            SELECT *
            FROM WO
            WHERE (fromDate = '0000-00-00 00:00:00'
            OR ServiceDate >= fromDate)
            AND (toDate = '9999-12-31 23:59:59'
            OR ServiceDate < DATE_ADD(toDate, INTERVAL 1 DAY))
        ) AS w
        LEFT JOIN WOToWODetailMatch AS m ON w.WOID = m.WOId
        INNER JOIN Vendor v ON v.VendorId = w.VendorId
        INNER JOIN Department d ON d.Id = w.PropertyId
        WHERE (woNumber IS NULL OR woNumber = '' OR WONumber COLLATE utf8mb4_general_ci LIKE CONCAT('%', woNumber COLLATE utf8mb4_general_ci, '%'))
        AND (woTypeArray IS NULL OR woTypeArray = '' OR FIND_IN_SET(w.WOType, woTypeArray) > 0)
        AND (serviceDescription IS NULL OR serviceDescription = '' OR w.ServiceDescription COLLATE utf8mb4_general_ci LIKE CONCAT('%', serviceDescription COLLATE utf8mb4_general_ci, '%'))
        AND (vendorIdArray IS NULL OR vendorIdArray = '' OR FIND_IN_SET(w.VendorId, vendorIdArray) > 0)
        AND (propertyIdArray IS NULL OR propertyIdArray = '' OR FIND_IN_SET(w.PropertyId, propertyIdArray) > 0);
    ELSEIF showMatched = 'yes' THEN
        SELECT
            w.*,
            m.WODetailId,
            m.WOSummary,
            m.MatchedDate,
            CONCAT(v.VendorNo, '-', v.VendorName) AS VendorName,
            d.DepartmentName AS PropertyName
        FROM (
            SELECT *
            FROM WO
            WHERE (fromDate = '0000-00-00 00:00:00'
            OR ServiceDate >= fromDate)
            AND (toDate = '9999-12-31 23:59:59'
            OR ServiceDate < DATE_ADD(toDate, INTERVAL 1 DAY))
        ) AS w
        INNER JOIN WOToWODetailMatch AS m ON w.WOID = m.WOId
        INNER JOIN Vendor v ON v.VendorId = w.VendorId
        INNER JOIN Department d ON d.Id = w.PropertyId
        WHERE (woNumber IS NULL OR woNumber = '' OR WONumber COLLATE utf8mb4_general_ci LIKE CONCAT('%', woNumber COLLATE utf8mb4_general_ci, '%'))
        AND (woTypeArray IS NULL OR woTypeArray = '' OR FIND_IN_SET(w.WOType, woTypeArray) > 0)
        AND (serviceDescription IS NULL OR serviceDescription = '' OR w.ServiceDescription COLLATE utf8mb4_general_ci LIKE CONCAT('%', serviceDescription COLLATE utf8mb4_general_ci, '%'))
        AND (vendorIdArray IS NULL OR vendorIdArray = '' OR FIND_IN_SET(w.VendorId, vendorIdArray) > 0)
        AND (propertyIdArray IS NULL OR propertyIdArray = '' OR FIND_IN_SET(w.PropertyId, propertyIdArray) > 0)
        AND m.WODetailId IS NOT NULL;
    ELSEIF showMatched = 'no' THEN
        SELECT
            w.*,
            m.WODetailId,
            m.WOSummary,
            m.MatchedDate,
            CONCAT(v.VendorNo, '-', v.VendorName) AS VendorName,
            d.DepartmentName AS PropertyName
        FROM (
            SELECT *
            FROM WO
            WHERE (fromDate = '0000-00-00 00:00:00'
            OR ServiceDate >= fromDate)
            AND (toDate = '9999-12-31 23:59:59'
            OR ServiceDate < DATE_ADD(toDate, INTERVAL 1 DAY))
        ) AS w
        LEFT JOIN WOToWODetailMatch AS m ON w.WOID = m.WOId
        INNER JOIN Vendor v ON v.VendorId = w.VendorId
        INNER JOIN Department d ON d.Id = w.PropertyId
        WHERE (woNumber IS NULL OR woNumber = '' OR WONumber COLLATE utf8mb4_general_ci LIKE CONCAT('%', woNumber COLLATE utf8mb4_general_ci, '%'))
        AND (woTypeArray IS NULL OR woTypeArray = '' OR FIND_IN_SET(w.WOType, woTypeArray) > 0)
        AND (serviceDescription IS NULL OR serviceDescription = '' OR w.ServiceDescription COLLATE utf8mb4_general_ci LIKE CONCAT('%', serviceDescription COLLATE utf8mb4_general_ci, '%'))
        AND (vendorIdArray IS NULL OR vendorIdArray = '' OR FIND_IN_SET(w.VendorId, vendorIdArray) > 0)
        AND (propertyIdArray IS NULL OR propertyIdArray = '' OR FIND_IN_SET(w.PropertyId, propertyIdArray) > 0)
        AND m.WOId IS NULL;
    ELSE
        SELECT
            w.*,
            m.WODetailId,
            m.WOSummary,
            m.MatchedDate,
            '' AS VendorName,
            '' AS PropertyName
        FROM WOToWODetailMatch AS m
        LEFT JOIN WO AS w ON w.WOId = m.WOId
        WHERE w.WOId IS NULL;
    END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SICSDEReportAPSHTML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `SICSDEReportAPSHTML`(startDate datetime, endDate datetime)
BEGIN
  -- Day time Non-Validation
  DROP TABLE IF EXISTS SICSDEReportAPSHTMLT1;
  DROP TABLE IF EXISTS SICSDEReportAPSHTMLT2;
  CREATE TEMPORARY TABLE SICSDEReportAPSHTMLT1 (
    Actor nvarchar(500) NULL,
    InvoiceId int NULL
  );

  INSERT INTO SICSDEReportAPSHTMLT1
    SELECT DISTINCT
      Actor,
      InvoiceId
    FROM InvoiceHistory
    WHERE ActionDate < endDate
    AND ActionDate > startDate
    AND `Action` <> 'Validation'
    AND `Field` <> 'Invoice Status'
    -- and actor='Bogale Jigssa'
    AND ActorId IN (SELECT
        u.UserId
      FROM `User` u
        INNER JOIN UserRoles ur
          ON u.UserId = ur.UserId
          AND (ur.RoleId = 4
          OR u.Email LIKE '%@SICSITOutsourcing.com'
          OR u.Email LIKE '%@Cloudxdpo.com')
          AND email <> 'whamed@cloudxdpo.com');
  SELECT
    t.actor,
    COUNT(i.invoiceid),
    c.customername
  FROM SICSDEReportAPSHTMLT1 t
    INNER JOIN Invoice i
      ON i.invoiceid = t.invoiceid
    INNER JOIN `Client` c
      ON c.clientid = i.clientid
  GROUP BY t.actor,
           c.customername
  ORDER BY c.customername, t.actor;
  -- Day time Validation Only
  CREATE TEMPORARY TABLE SICSDEReportAPSHTMLT2 (
    Actor nvarchar(500),
    InvoiceId int
  );
  INSERT INTO SICSDEReportAPSHTMLT2
    SELECT DISTINCT
      actor,
      invoiceid
    FROM InvoiceHistory
    WHERE actiondate < endDate
    AND actiondate > startDate
    AND `action` = 'Validation';
  SELECT
    t.actor,
    COUNT(i.invoiceid),
    c.customername
  FROM SICSDEReportAPSHTMLT2 t
    INNER JOIN Invoice i
      ON i.invoiceid = t.invoiceid
    INNER JOIN `Client` c
      ON c.clientid = i.clientid
  GROUP BY t.actor,
           c.customername
  ORDER BY c.customername, t.actor;
  -- Invoice Total
  SELECT
    c.CustomerName,
    COUNT(*)
  FROM Invoice i,
       Client c
  WHERE ScannedDate >= startDate
  AND ScannedDate < endDate
  AND c.ClientId = i.ClientId
  GROUP BY c.CustomerName;
  DROP TABLE IF EXISTS SICSDEReportAPSHTMLT1;
  DROP TABLE IF EXISTS SICSDEReportAPSHTMLT2;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SICSQCReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `SICSQCReport`(IN startDate datetime,
IN noOfDays int)
BEGIN
  DROP TEMPORARY TABLE IF EXISTS SICSAPSmartQCReportResults;
  CREATE TEMPORARY TABLE SICSAPSmartQCReportResults (
    `Client` varchar(1000),
    `Full Name` varchar(1000),
    `QC Count` int,
    `Validation Count` int
  );
  INSERT INTO SICSAPSmartQCReportResults
    SELECT
      UCASE(Client.`CustomerName`) `Client`,
      UCASE(CONCAT(FirstName, ' ', LastName)) `Full Name`,
      (SELECT
          COUNT(DISTINCT InvoiceHistory.InvoiceId)
        FROM InvoiceHistory
        WHERE InvoiceHistory.`ActorId` = `User`.`UserId`
        AND InvoiceHistory.`ActionDate` >= startDate
        AND InvoiceHistory.`ActionDate` < DATE_ADD(startDate, INTERVAL noOfDays DAY)
        AND InvoiceHistory.`Action` = 'QC'
        AND (((InvoiceHistory.PreviousData IS NULL
        OR InvoiceHistory.PreviousData = '')
        AND InvoiceHistory.NewData IS NOT NULL
        AND InvoiceHistory.NewData <> '')
        OR ((InvoiceHistory.NewData IS NULL
        OR InvoiceHistory.NewData = '')
        AND InvoiceHistory.PreviousData IS NOT NULL
        AND InvoiceHistory.PreviousData <> ''))
        AND (InitialStatus = ''
        OR InitialStatus IS NULL)
        AND (CurrentStatus = ''
        OR CurrentStatus IS NULL)) `QC Count`,
      (SELECT
          COUNT(DISTINCT InvoiceHistory.InvoiceId)
        FROM InvoiceHistory
        WHERE InvoiceHistory.`ActorId` = `User`.`UserId`
        AND InvoiceHistory.`ActionDate` >= startDate
        AND InvoiceHistory.`ActionDate` < DATE_ADD(startDate, INTERVAL noOfDays DAY)
        AND InvoiceHistory.`Action` = 'Validation') `Validation Count`
    FROM `User`
      INNER JOIN `Client`
        ON User.`ClientId` = Client.`ClientId`
    WHERE (RoleId = 4
    OR EXISTS (SELECT
        *
      FROM UserRoles
      WHERE UserRoles.RoleId = 4
      AND `User`.`UserId` = UserRoles.`UserId`))
    AND `User`.IsActive = 1
    AND ((SELECT
        COUNT(DISTINCT InvoiceHistory.InvoiceId)
      FROM InvoiceHistory
      WHERE InvoiceHistory.`ActorId` = `User`.`UserId`
      AND InvoiceHistory.`ActionDate` >= startDate
      AND InvoiceHistory.`ActionDate` < DATE_ADD(startDate, INTERVAL noOfDays DAY)
      AND InvoiceHistory.`Action` = 'QC'
      AND (((InvoiceHistory.PreviousData IS NULL
      OR InvoiceHistory.PreviousData = '')
      AND InvoiceHistory.NewData IS NOT NULL
      AND InvoiceHistory.NewData <> '')
      OR ((InvoiceHistory.NewData IS NULL
      OR InvoiceHistory.NewData = '')
      AND InvoiceHistory.PreviousData IS NOT NULL
      AND InvoiceHistory.PreviousData <> ''))
      AND (InitialStatus = ''
      OR InitialStatus IS NULL)
      AND (CurrentStatus = ''
      OR CurrentStatus IS NULL)) > 0
    OR (SELECT
        COUNT(DISTINCT InvoiceHistory.InvoiceId)
      FROM InvoiceHistory
      WHERE InvoiceHistory.`ActorId` = `User`.`UserId`
      AND InvoiceHistory.`ActionDate` >= startDate
      AND InvoiceHistory.`ActionDate` < DATE_ADD(startDate, INTERVAL noOfDays DAY)
      AND InvoiceHistory.`Action` = 'Validation') > 0);
  INSERT INTO SICSAPSmartQCReportResults
    SELECT
      CONCAT(UCASE(Client.`CustomerName`), ' - AR') `Client`,
      UCASE(CONCAT(FirstName, ' ', LastName)) `Full Name`,
      (SELECT
          COUNT(DISTINCT InvoiceHistory.InvoiceId)
        FROM ARSmart.InvoiceHistory
        WHERE InvoiceHistory.`ActorId` = `User`.`UserId`
        AND InvoiceHistory.`ActionDate` >= startDate
        AND InvoiceHistory.`ActionDate` < DATE_ADD(startDate, INTERVAL noOfDays DAY)
        AND InvoiceHistory.`Action` = 'QC'
        AND (((InvoiceHistory.PreviousData IS NULL
        OR InvoiceHistory.PreviousData = '')
        AND InvoiceHistory.NewData IS NOT NULL
        AND InvoiceHistory.NewData <> '')
        OR ((InvoiceHistory.NewData IS NULL
        OR InvoiceHistory.NewData = '')
        AND InvoiceHistory.PreviousData IS NOT NULL
        AND InvoiceHistory.PreviousData <> ''))
        AND (InitialStatus = ''
        OR InitialStatus IS NULL)
        AND (CurrentStatus = ''
        OR CurrentStatus IS NULL)) `QC Count`,
      (SELECT
          COUNT(DISTINCT InvoiceHistory.InvoiceId)
        FROM ARSmart.InvoiceHistory
        WHERE InvoiceHistory.`ActorId` = `User`.`UserId`
        AND InvoiceHistory.`ActionDate` >= startDate
        AND InvoiceHistory.`ActionDate` < DATE_ADD(startDate, INTERVAL noOfDays DAY)
        AND InvoiceHistory.`Action` = 'Validation') `Validation Count`
    FROM ARSmart.`User`
      INNER JOIN ARSmart.`Client`
        ON User.`ClientId` = Client.`ClientId`
    WHERE (RoleId = 4
    OR EXISTS (SELECT
        *
      FROM ARSmart.UserRoles
      WHERE UserRoles.RoleId = 4
      AND `User`.`UserId` = UserRoles.`UserId`))
    AND `User`.IsActive = 1
    AND ((SELECT
        COUNT(DISTINCT InvoiceHistory.InvoiceId)
      FROM ARSmart.InvoiceHistory
      WHERE InvoiceHistory.`ActorId` = `User`.`UserId`
      AND InvoiceHistory.`ActionDate` >= startDate
      AND InvoiceHistory.`ActionDate` < DATE_ADD(startDate, INTERVAL noOfDays DAY)
      AND InvoiceHistory.`Action` = 'QC'
      AND (((InvoiceHistory.PreviousData IS NULL
      OR InvoiceHistory.PreviousData = '')
      AND InvoiceHistory.NewData IS NOT NULL
      AND InvoiceHistory.NewData <> '')
      OR ((InvoiceHistory.NewData IS NULL
      OR InvoiceHistory.NewData = '')
      AND InvoiceHistory.PreviousData IS NOT NULL
      AND InvoiceHistory.PreviousData <> ''))
      AND (InitialStatus = ''
      OR InitialStatus IS NULL)
      AND (CurrentStatus = ''
      OR CurrentStatus IS NULL)) > 0
    OR (SELECT
        COUNT(DISTINCT InvoiceHistory.InvoiceId)
      FROM ARSmart.InvoiceHistory
      WHERE InvoiceHistory.`ActorId` = `User`.`UserId`
      AND InvoiceHistory.`ActionDate` >= startDate
      AND InvoiceHistory.`ActionDate` < DATE_ADD(startDate, INTERVAL noOfDays DAY)
      AND InvoiceHistory.`Action` = 'Validation') > 0);
  -- SELECT * FROM SICSAPSmartQCReportResults SICSQCRR order by `Client`, `Full Name`;
  -- SELECT SICSQCRR.`Full Name`, SUM(SICSQCRR.`QC Count`) `QC Count`, SUM(SICSQCRR.`Validation Count`) `Validation Count`
  -- FROM SICSAPSmartQCReportResults SICSQCRR GROUP BY `Full Name`
  -- ORDER BY `Full Name`;
  INSERT INTO SICSAPSmartQCReportResults
    SELECT
      UCASE(Client.`CustomerName`) `Client`,
      UCASE(CONCAT(FirstName, ' ', LastName)) `Full Name`,
      (SELECT
          COUNT(DISTINCT PODHistory.PODId)
        FROM PODSmart.PODHistory
        WHERE PODHistory.`ActorId` = `User`.`UserId`
        AND PODHistory.`ActionDate` >= startDate
        AND PODHistory.`ActionDate` < DATE_ADD(startDate, INTERVAL noOfDays DAY)
        AND PODHistory.`Action` = 'Update'
        AND (((PODHistory.PreviousData IS NULL
        OR PODHistory.PreviousData = '')
        AND PODHistory.NewData IS NOT NULL
        AND PODHistory.NewData <> '')
        OR ((PODHistory.NewData IS NULL
        OR PODHistory.NewData = '')
        AND PODHistory.PreviousData IS NOT NULL
        AND PODHistory.PreviousData <> ''))) `QC Count`,
      0 `Validation Count`
    FROM PODSmart.`User`
      INNER JOIN PODSmart.`Client`
        ON User.`ClientId` = Client.`ClientId`
    WHERE (RoleId = 3
    OR EXISTS (SELECT
        *
      FROM PODSmart.UserRoles
      WHERE UserRoles.RoleId = 3
      AND `User`.`UserId` = UserRoles.`UserId`))
    AND `User`.IsActive = 1
    AND ((SELECT
        COUNT(DISTINCT PODHistory.PODId)
      FROM PODSmart.PODHistory
      WHERE PODHistory.`ActorId` = `User`.`UserId`
      AND PODHistory.`ActionDate` >= startDate
      AND PODHistory.`ActionDate` < DATE_ADD(startDate, INTERVAL noOfDays DAY)
      AND PODHistory.`Action` = 'Update'
      AND (((PODHistory.PreviousData IS NULL
      OR PODHistory.PreviousData = '')
      AND PODHistory.NewData IS NOT NULL
      AND PODHistory.NewData <> '')
      OR ((PODHistory.NewData IS NULL
      OR PODHistory.NewData = '')
      AND PODHistory.PreviousData IS NOT NULL
      AND PODHistory.PreviousData <> ''))) > 0)
    ORDER BY `Full Name`;
  -- SELECT `Full Name`, `Client`, `QC Count`, `Validation Count` FROM SICSAPSmartQCReportResults SICSQCRR order by `Full Name`, `Client`;
  SELECT
    SICSQCRR.`Full Name`,
    GROUP_CONCAT(CONCAT(`Client`, ' - QC: ', `QC Count`, ', V: ', `Validation Count`, '; ') SEPARATOR '') `Client`,
    SUM(SICSQCRR.`QC Count`) `QC Count`,
    SUM(SICSQCRR.`Validation Count`) `Validation Count`
  FROM SICSAPSmartQCReportResults SICSQCRR
  GROUP BY `Full Name`
  ORDER BY SUM(`QC Count`) DESC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `spGetApprovalWorkFlow` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `spGetApprovalWorkFlow`(IN ClientId int, IN filterText nvarchar(50))
BEGIN
  SELECT DISTINCT
    CONCAT(u.FirstName, ' ', u.LastName) AS FirstApprover,
    cc.CompanyCode,
    sa.`StepName`,
    ass.SubStepName,
    dd.DepartmentName
  FROM User u
    INNER JOIN ApprovalSubStepUserDepartment assd
      ON u.UserId = assd.UserId
    INNER JOIN ApprovalSubStep ass
      ON ass.ApprovalSubStepId = assd.ApprovalSubStepId
    INNER JOIN Department dd
      ON dd.Id = assd.DepartmentId
    INNER JOIN ApprovalStep sa
      ON sa.ApprovalStepId = ass.ApprovalStepId
    INNER JOIN ClientCompany cc
      ON cc.Id = sa.ClientCompanyId
  WHERE u.ClientId = ClientId
  AND u.IsCloudxUser = FALSE
  AND u.FirstName LIKE CONCAT(filterText, '%')
  ORDER BY FirstApprover, CompanyCode;

-- WHERE v.ClientId = ClientId AND u.FirstName LIKE CONCAT(filterText,'%') ORDER BY FirstApprover;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `spGetApprovalWorkFlowByVendor` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `spGetApprovalWorkFlowByVendor`(IN ClientId int, IN filterText nvarchar(50))
BEGIN
  SET @approvalStepUserFilterType := (SELECT
      u.ApprovalStepUserFilterType
    FROM ApprovalSubStepUserFilter u
      JOIN ApprovalSubStep a
        ON u.ApprovalSubStepId = a.ApprovalSubStepId
      JOIN ApprovalStep b
        ON a.ApprovalStepId = b.ApprovalStepId
      JOIN `Client` c
        ON b.ClientId = ClientId
    LIMIT 1);
  IF @approvalStepUserFilterType = 0 THEN
    SELECT DISTINCT
      CONCAT(u.FirstName, ' ', u.LastName) AS FirstApprover,
      cc.CompanyCode,
      sa.`StepName`,
      ass.SubStepName,
      v.VendorNo,
      v.VendorName
    FROM `User` u
      LEFT JOIN ApprovalSubStepUserVendor assv
        ON u.UserId = assv.UserId
      LEFT JOIN ApprovalSubStep ass
        ON ass.ApprovalSubStepId = assv.ApprovalSubStepId
      LEFT JOIN Vendor v
        ON v.VendorId = assv.VendorId
      LEFT JOIN ApprovalStep sa
        ON sa.ApprovalStepId = ass.ApprovalStepId
      LEFT JOIN ClientCompany cc
        ON cc.Id = sa.ClientCompanyId
    WHERE u.ClientId = ClientId
    AND u.IsCloudxUser = FALSE
    AND u.FirstName LIKE CONCAT(filterText, '%')
    ORDER BY FirstApprover, CompanyCode;
  END IF;
  IF @approvalStepUserFilterType = 5 THEN
    SELECT DISTINCT
      CONCAT(u.FirstName, ' ', u.LastName) AS FirstApprover,
      cc.CompanyCode,
      sa.`StepName`,
      ass.SubStepName,
      v.VendorNo,
      v.VendorName,
      d.`DepartmentName` AS Address
    FROM `User` u
      LEFT JOIN `ApprovalSubStepUserVendorDepartment` assv
        ON u.UserId = assv.UserId
      LEFT JOIN ApprovalSubStep ass
        ON ass.ApprovalSubStepId = assv.ApprovalSubStepId
      LEFT JOIN Vendor v
        ON v.VendorId = assv.VendorId
      LEFT JOIN ApprovalStep sa
        ON sa.ApprovalStepId = ass.ApprovalStepId
      LEFT JOIN ClientCompany cc
        ON cc.Id = sa.ClientCompanyId
      JOIN `Department` AS d
        ON assv.`DepartmentId` = d.`Id`
    WHERE u.ClientId = ClientId
    AND u.IsCloudxUser = FALSE
    AND u.FirstName LIKE CONCAT(filterText, '%')
    ORDER BY FirstApprover, CompanyCode;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `spGetInvoiceProcessReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `spGetInvoiceProcessReport`()
BEGIN

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `spGetUserLimit` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `spGetUserLimit`(IN ClientId int, IN filterText nvarchar(50))
BEGIN
  IF filterText IS NULL THEN
    SELECT DISTINCT
      CONCAT(u.FirstName, ' ', u.LastName) AS FirstApprover,
      u.IsActive,
      (
      CASE WHEN aba.MaximumAllowedAmount IS NULL THEN 'Not Set' ELSE aba.MaximumAllowedAmount END) AS MaximumAmount,
      (CASE WHEN aba.SecondApproverId IS NULL THEN 'Not Set' ELSE (SELECT
              CONCAT(mgr.FirstName, ' ', mgr.LastName)
            FROM User mgr
            WHERE mgr.UserId = aba.SecondApproverId LIMIT 1) END) AS SecondApprover,
      d.DepartmentName,
      ass.SubStepName,
      v.VendorName
    FROM User u
      LEFT OUTER JOIN ApprovalSubStepUser assu
        ON assu.UserId = u.UserId
      LEFT OUTER JOIN ApprovalSubStep ass
        ON ass.ApprovalSubStepId = assu.ApprovalSubStepId
      LEFT OUTER JOIN ApprovalSubStepUserVendor assuv
        ON assuv.UserId = assu.UserId
      LEFT OUTER JOIN Vendor v
        ON v.VendorId = assuv.VendorId
      LEFT OUTER JOIN ApproverByAmount aba
        ON aba.UserId = assuv.UserId
      LEFT OUTER JOIN Department d
        ON d.Id IN (aba.CostCenters)
    WHERE u.ClientId = ClientId
    AND u.IsCloudxUser = FALSE
    ORDER BY FirstApprover;
  ELSE
    SELECT DISTINCT
      CONCAT(u.FirstName, ' ', u.LastName) AS FirstApprover,
      u.IsActive,
      (
      CASE WHEN aba.MaximumAllowedAmount IS NULL THEN 'Not Set' ELSE aba.MaximumAllowedAmount END) AS MaximumAmount,
      (CASE WHEN aba.SecondApproverId IS NULL THEN 'Not Set' ELSE (SELECT
              CONCAT(mgr.FirstName, ' ', mgr.LastName)
            FROM User mgr
            WHERE mgr.UserId = aba.SecondApproverId LIMIT 1) END) AS SecondApprover,
      d.DepartmentName,
      ass.SubStepName,
      v.VendorName
    FROM User u
      LEFT OUTER JOIN ApprovalSubStepUser assu
        ON assu.UserId = u.UserId
      LEFT OUTER JOIN ApprovalSubStep ass
        ON ass.ApprovalSubStepId = assu.ApprovalSubStepId
      LEFT OUTER JOIN ApprovalSubStepUserVendor assuv
        ON assuv.UserId = assu.UserId
      LEFT OUTER JOIN Vendor v
        ON v.VendorId = assuv.VendorId
      LEFT OUTER JOIN ApproverByAmount aba
        ON aba.UserId = u.UserId
      LEFT OUTER JOIN Department d
        ON d.Id IN (aba.CostCenters)
    WHERE u.ClientId = ClientId
    AND u.IsCloudxUser = FALSE
    AND u.FirstName LIKE CONCAT(filterText, '%')
    ORDER BY FirstApprover;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `spGetVendorLimit` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `spGetVendorLimit`(IN ClientId int, IN filterText nvarchar(50))
BEGIN

  IF filterText IS NULL THEN

    SELECT
      v.VendorName,
      v.`VendorNo`,
      (CASE WHEN u.FirstName IS NULL THEN 'Not Set' ELSE CONCAT(u.FirstName, ' ', u.LastName) END) AS FirstApprover,
      (CASE WHEN aba.MaximumAllowedAmount IS NULL THEN 'Not Set' ELSE aba.MaximumAllowedAmount END) AS MaximumAmount,
      (CASE WHEN aba.SecondApproverId IS NULL THEN 'Not Set' ELSE (SELECT
              CONCAT(mgr.FirstName, ' ', mgr.LastName)
            FROM User mgr
            WHERE mgr.UserId = aba.SecondApproverId LIMIT 1) END) AS SecondApprover,
      (CASE WHEN d.DepartmentName IS NULL THEN 'Not Set' ELSE d.DepartmentName END) AS DepartmentName,
      (CASE WHEN ass.SubStepName IS NULL THEN 'Not Set' ELSE ass.SubStepName END) AS SubStepName,
      aba.VendorId
    FROM Vendor v
      LEFT OUTER JOIN ApprovalSubStepUserVendor assuv
        ON v.`VendorId` = assuv.VendorId
      LEFT OUTER JOIN User u
        ON u.`UserId` = assuv.`UserId`
      LEFT OUTER JOIN ApprovalSubStepUser assu
        ON assu.UserId = u.UserId
      LEFT OUTER JOIN ApprovalSubStep ass
        ON ass.ApprovalSubStepId = assu.ApprovalSubStepId
      LEFT OUTER JOIN ApproverByAmount aba
        ON aba.UserId = assuv.UserId
        AND (aba.VendorId IS NULL
        OR aba.VendorId = v.VendorId)
      LEFT OUTER JOIN Department d
        ON d.Id IN (aba.CostCenters)
    WHERE v.ClientId = 108
    AND v.`IsActive` = TRUE
    ORDER BY v.VendorName;

  ELSE

    SELECT
      v.VendorName,
      v.`VendorNo`,
      (CASE WHEN u.FirstName IS NULL THEN 'Not Set' ELSE CONCAT(u.FirstName, ' ', u.LastName) END) AS FirstApprover,
      (CASE WHEN aba.MaximumAllowedAmount IS NULL THEN 'Not Set' ELSE aba.MaximumAllowedAmount END) AS MaximumAmount,
      (CASE WHEN aba.SecondApproverId IS NULL THEN 'Not Set' ELSE (SELECT
              CONCAT(mgr.FirstName, ' ', mgr.LastName)
            FROM User mgr
            WHERE mgr.UserId = aba.SecondApproverId LIMIT 1) END) AS SecondApprover,
      (CASE WHEN d.DepartmentName IS NULL THEN 'Not Set' ELSE d.DepartmentName END) AS DepartmentName,
      (CASE WHEN ass.SubStepName IS NULL THEN 'Not Set' ELSE ass.SubStepName END) AS SubStepName,
      aba.VendorId
    FROM Vendor v
      LEFT OUTER JOIN ApprovalSubStepUserVendor assuv
        ON v.`VendorId` = assuv.VendorId
      LEFT OUTER JOIN User u
        ON u.`UserId` = assuv.`UserId`
      LEFT OUTER JOIN ApprovalSubStepUser assu
        ON assu.UserId = u.UserId
      LEFT OUTER JOIN ApprovalSubStep ass
        ON ass.ApprovalSubStepId = assu.ApprovalSubStepId
      LEFT OUTER JOIN ApproverByAmount aba
        ON aba.UserId = assuv.UserId
        AND (aba.VendorId IS NULL
        OR aba.VendorId = v.VendorId)
      LEFT OUTER JOIN Department d
        ON d.Id IN (aba.CostCenters)
    WHERE v.ClientId = 108
    AND (v.VendorNo LIKE CONCAT(filterText, '%')
    || v.VendorName LIKE CONCAT(filterText, '%'))
    AND v.`IsActive` = TRUE
    ORDER BY v.VendorName;



  END IF;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_ApproverPerformance` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `SP_ApproverPerformance`(IN p_ClientId int,
IN p_YearDateFrom datetime,
IN p_DateTo datetime,
IN p_ApplicableInvoiceStatuses varchar(1000))
BEGIN
  SET @StartDateOfMonth = DATE_FORMAT(p_DateTo, '%Y-%m-01');
  SET @TotalMonths = TIMESTAMPDIFF(MONTH, p_YearDateFrom, p_DateTo) - 1;
  -- YearlyAverage and MonthlyAverage
  SELECT

    u.FromApprovalSubStepUserId AS ActorId,
    COUNT(DISTINCT CASE WHEN MONTH(u.AssignDate) = MONTH(p_DateTo) AND
        YEAR(u.AssignDate) = YEAR(p_DateTo) THEN u.InvoiceId END) AS noofInvoices,
    SUM(
    CASE WHEN MONTH(u.AssignDate) = MONTH(p_DateTo) AND
        YEAR(u.AssignDate) = YEAR(p_DateTo) THEN DATEDIFF(u.ApprovedDate, u.AssignDate) ELSE 0 END
    ) /
    COUNT(DISTINCT
    CASE WHEN MONTH(u.AssignDate) = MONTH(p_DateTo) AND
        YEAR(u.AssignDate) = YEAR(p_DateTo) THEN u.InvoiceId ELSE NULL END
    ) AS Average,

    MAX(CASE WHEN MONTH(u.AssignDate) = MONTH(p_DateTo) AND
        YEAR(u.AssignDate) = YEAR(p_DateTo) THEN DATEDIFF(u.ApprovedDate, u.AssignDate) ELSE 0 END) AS MaximumDays,
    COUNT(DISTINCT CASE WHEN MONTH(u.AssignDate) != MONTH(p_DateTo) THEN u.InvoiceId END) AS MonthlyTotal,
    SUM(
    CASE WHEN MONTH(u.AssignDate) != MONTH(p_DateTo) THEN DATEDIFF(u.ApprovedDate, u.AssignDate) ELSE 0 END
    ) / COALESCE(CASE WHEN COUNT(DISTINCT
        CASE WHEN MONTH(u.AssignDate) != MONTH(p_DateTo) THEN u.InvoiceId ELSE NULL END
        ) = 0 THEN NULL ELSE COUNT(DISTINCT
        CASE WHEN MONTH(u.AssignDate) != MONTH(p_DateTo) THEN u.InvoiceId ELSE NULL END
        ) END, 1) / @TotalMonths AS MonthlyAverage,
    MAX(DATEDIFF(u.ApprovedDate, u.AssignDate)) AS MonthlyMaximumDays

  FROM (SELECT
      a.InvoiceId,
      a.ToApprovalSubStepUserId,
      a.AssignDate,
      b.FromApprovalSubStepUserId,
      b.ApprovedDate
    FROM (SELECT
        uih1.InvoiceId,
        uih1.ToApprovalSubStepUserId,
        uih1.ApprovedOn AS AssignDate,
        @row_number1 := IF(@prev1 = CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId), @row_number1 + 1, 1) AS RowNum,
        @prev1 := CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId)
      FROM UserInvoiceAssignmentHistory uih1
        CROSS JOIN (SELECT
            @row_number1 := 0,
            @prev1 := '') AS vars
      WHERE uih1.ToApprovalSubStepUserId IS NOT NULL
      AND uih1.ApprovedOn >= p_YearDateFrom
      AND uih1.ApprovedOn <= p_DateTo
      ORDER BY uih1.InvoiceId, uih1.ToApprovalSubStepUserId, uih1.ApprovedOn) a
      JOIN (SELECT
          uih2.InvoiceId,
          uih2.FromApprovalSubStepUserId,
          uih2.ApprovedOn AS ApprovedDate,
          @row_number2 := IF(@prev2 = CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId), @row_number2 + 1, 1) AS RowNum,
          @prev2 := CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId)
        FROM UserInvoiceAssignmentHistory uih2
          CROSS JOIN (SELECT
              @row_number2 := 0,
              @prev2 := '') AS vars
        WHERE uih2.FromApprovalSubStepUserId IS NOT NULL
        AND uih2.ApprovedOn >= p_YearDateFrom
        AND uih2.ApprovedOn <= p_DateTo
        ORDER BY uih2.InvoiceId, uih2.FromApprovalSubStepUserId, uih2.ApprovedOn) b
        ON a.InvoiceId = b.InvoiceId
        AND a.ToApprovalSubStepUserId = b.FromApprovalSubStepUserId
        AND a.RowNum = b.RowNum
    ORDER BY a.InvoiceId, a.AssignDate) AS u
    INNER JOIN Invoice i
      ON u.InvoiceId = i.InvoiceId
  WHERE u.AssignDate >= p_YearDateFrom
  AND u.AssignDate <= p_DateTo
  AND i.ClientId = p_ClientId
  AND i.IsDeleted = 0
  AND FIND_IN_SET(i.ApprovalStatusId, p_ApplicableInvoiceStatuses) > 0
  GROUP BY u.FromApprovalSubStepUserId;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetAllUnmatchedWODetails` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetAllUnmatchedWODetails`()
SELECT
    WODetails.*,
    i.VendorId,
    i.`ClientId`,
    i.`VendorSiteId`,
    i.InvoiceNo,
    i.InvoiceDate
  FROM WODetails
    INNER JOIN Invoice as i
      ON WODetails.InvoiceId = i.InvoiceId
  WHERE i.`ClientId` = 79
  AND WODetails.HasError = 1
  AND i.`InvoiceType` = 'HaulerInvoice'
  and i.InvoiceDate >= '2024-05-01'
  AND i.ApprovalStatusId  = 3
  ORDER BY i.InvoiceDate  DESC ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetAllWOes` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetAllWOes`(IN FromDate date, IN ToDate date)
BEGIN
  -- Create a temporary table to store WOIds that have a match in WOToWODetailMatch
  CREATE TEMPORARY TABLE TempWOToWODetailMatch AS
  SELECT DISTINCT
    WOId
  FROM WOToWODetailMatch;

  -- Select the relevant data
  SELECT
    wo.*
  FROM WO wo
  WHERE wo.ClientId = 79
  AND (FromDate IS NULL
  OR wo.`ServiceDate` >= FromDate)
  AND (ToDate IS NULL
  OR wo.`ServiceDate` < DATE_ADD(ToDate, INTERVAL 1 DAY))
  AND wo.WOId NOT IN (SELECT
      WOId
    FROM TempWOToWODetailMatch)
  ORDER BY wo.`ServiceDate` DESC;

  -- Drop the temporary table when done
  DROP TEMPORARY TABLE IF EXISTS TempWOToWODetailMatch;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetAutoMatchedWOLineItems` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetAutoMatchedWOLineItems`(
    IN clientId int,
    IN scannedDateFrom date,
    IN scannedDateTo date,
    IN invoiceDateFrom date,
    IN invoiceDateTo date,
    IN invoiceType varchar(255)
)
BEGIN
    SELECT
        i.InvoiceNo,
        i.InvoiceId,
        i.ScannedDate,
        i.PaymentDueDate,
        w.*,
        Vendor.VendorName,
        Vendor.VendorNo
    FROM Invoice AS i
    INNER JOIN WODetails AS w
        ON i.InvoiceId = w.InvoiceId
    Left JOIN WOToWODetailMatch AS wwm
        ON w.WODetailId = wwm.WODetailId
     LEFT JOIN WODetailsLog   AS wl
        ON w.WODetailId = wl.WODetailId
    LEFT JOIN Vendor
        ON Vendor.VendorId = i.VendorId
    WHERE i.ClientId = clientId
    AND i.IsDeleted = 0
    AND (invoiceType IS NULL
        OR invoiceType = ''
        OR i.InvoiceType COLLATE utf8mb4_general_ci = invoiceType COLLATE utf8mb4_general_ci)
    AND (scannedDateFrom IS NULL
        OR i.ScannedDate >= scannedDateFrom)
    AND (scannedDateTo IS NULL
        OR i.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
    AND (invoiceDateFrom IS NULL
        OR i.InvoiceDate >= invoiceDateFrom)
    AND (invoiceDateTo IS NULL
        OR i.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))
    AND w.HasError = 0 
   AND (wwm.WOSummary COLLATE utf8mb4_general_ci LIKE '1%' 
         OR wwm.WOSummary COLLATE utf8mb4_general_ci LIKE '2%'
         OR wwm.WOSummary COLLATE utf8mb4_general_ci LIKE '3%'
        or wl.Matched = 0
         );
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetChangedInvoices` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetChangedInvoices`(IN clientId int,
IN scannedDateFrom date,
IN scannedDateTo date,
IN invoiceDateFrom date,
IN invoiceDateTo date,
IN invoiceType varchar(255))
BEGIN
  SELECT
  DISTINCT
    (`Invoice`.`InvoiceId`) AS 'InvoiceId',
    `Invoice`.`InvoiceNo`,
    `InvoiceHistory`.`PreviousData`,
    `InvoiceHistory`.`NewData`,
    `InvoiceHistory`.`Field`,
    `InvoiceHistory`.`ActionDate`,
    Invoice.`ScannedDate`,
    Invoice.`PaymentDueDate`,
    `InvoiceHistory`.`Action`,
    `InvoiceHistory`.`Actor`

  FROM (SELECT
      NewData,
      InvoiceId,
      PreviousData,
      `Field`,
      ActionDate,
      `Action`,
      Actor
    FROM `InvoiceHistory`
    WHERE `InvoiceHistory`.`Field` <> '') AS `InvoiceHistory`
    INNER JOIN (SELECT
        `InvoiceNo`,
        InvoiceId,
        ScannedDate,
        PaymentDueDate
      FROM `Invoice`
      WHERE `Invoice`.ClientId = clientId
      AND `Invoice`.IsDeleted = 0
      AND (invoiceType IS NULL
      OR invoiceType = ''
      OR `Invoice`.`InvoiceType` = invoiceType)
      AND `Invoice`.`ApprovalStatusId` <> 1
      AND (scannedDateFrom IS NULL
      OR `Invoice`.ScannedDate >= scannedDateFrom)
      AND (scannedDateTo IS NULL
      OR `Invoice`.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
      AND (invoiceDateFrom IS NULL
      OR `Invoice`.InvoiceDate >= invoiceDateFrom)
      AND (invoiceDateTo IS NULL
      OR `Invoice`.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))) AS `Invoice`
      ON (
      `InvoiceHistory`.`InvoiceId` = `Invoice`.`InvoiceId`
      )




  ORDER BY `Invoice`.`InvoiceNo` ASC, `InvoiceHistory`.`Field` ASC;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_GetChargeType` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `SP_GetChargeType`(
	IN `_ClientId` INT
)
BEGIN	
	SELECT * FROM ChargeType WHERE `ClientId` = _ClientId;
	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetMannuallyMatchedLineItems` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetMannuallyMatchedLineItems`(IN clientId int,
IN scannedDateFrom date,
IN scannedDateTo date,
IN invoiceDateFrom date,
IN invoiceDateTo date,
IN invoiceType varchar(255))
BEGIN

  SELECT
    Invoice.InvoiceId,
    Invoice.InvoiceNo,
    Invoice.ScannedDate,
    WODetails.*,
    Invoice.PaymentDueDate,
    Vendor.VendorName,
    Vendor.VendorNo
  FROM Invoice
    INNER JOIN WODetails
      ON Invoice.InvoiceId = WODetails.InvoiceId
    LEFT JOIN WODetailsLog
      ON WODetailsLog.WODetailId = WODetails.WODetailId
    LEFT JOIN Vendor
      ON Vendor.VendorId = Invoice.VendorId
  WHERE Invoice.ClientId = clientId
  AND Invoice.IsDeleted = 0
  AND (invoiceType IS NULL
  OR invoiceType = ''
  OR Invoice.InvoiceType = invoiceType)
  AND (scannedDateFrom IS NULL
  OR Invoice.ScannedDate >= scannedDateFrom)
  AND (scannedDateTo IS NULL
  OR Invoice.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
  AND (invoiceDateFrom IS NULL
  OR Invoice.InvoiceDate >= invoiceDateFrom)
  AND (invoiceDateTo IS NULL
  OR Invoice.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))
  AND (WODetailsLog.WODetailId IS NULL
  OR WODetailsLog.Matched = 1)
  AND WODetails.HasError = 0;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetMannuallyMatchedWODetails` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetMannuallyMatchedWODetails`(IN clientId int,
IN scannedDateFrom date,
IN scannedDateTo date,
IN invoiceDateFrom date,
IN invoiceDateTo date,
IN invoiceType varchar(255))
BEGIN
  SELECT
    `Invoice`.`InvoiceNo`,
    `InvoiceHistory`.`PreviousData`,
    `InvoiceHistory`.`NewData`,
    `InvoiceHistory`.`Field`,
    `InvoiceHistory`.`Actor`,
    `InvoiceHistory`.`ActionDate`,
    Invoice.`ScannedDate`
  FROM (SELECT
      ClientId,
      InvoiceId,
      InvoiceType,
      ScannedDate,
      IsDeleted,
      InvoiceDate,
      InvoiceNo
    FROM `Invoice`
    WHERE `Invoice`.`ClientId` = clientId
    AND `Invoice`.IsDeleted = 0
    AND (invoiceType IS NULL
    OR invoiceType = ''
    OR `Invoice`.`InvoiceType` = invoiceType)
    AND (scannedDateFrom IS NULL
    OR `Invoice`.ScannedDate >= scannedDateFrom)
    AND (scannedDateTo IS NULL
    OR `Invoice`.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
    AND (invoiceDateFrom IS NULL
    OR `Invoice`.InvoiceDate >= invoiceDateFrom)
    AND (invoiceDateTo IS NULL
    OR `Invoice`.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))) AS `Invoice`

    INNER JOIN (SELECT
        NewData,
        InvoiceId,
        PreviousData,
        `Field`,
        ActionDate,
        Actor
      FROM `InvoiceHistory`
      WHERE InvoiceHistory.Action = 'Match Line Item'
      AND InvoiceHistory.`Field` = 'Work Order Detail') AS `InvoiceHistory`
      ON `InvoiceHistory`.`InvoiceId` = `Invoice`.`InvoiceId`
  ;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetMannualMatchedLineItems` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetMannualMatchedLineItems`(IN clientId int,
IN scannedDateFrom date,
IN scannedDateTo date,
IN invoiceDateFrom date,
IN invoiceDateTo date,
IN invoiceType varchar(255))
BEGIN
  SELECT
    i.InvoiceNo,
    i.InvoiceId,
    i.ScannedDate,
    i.PaymentDueDate,
    w.*,
    Vendor.VendorName,
    Vendor.VendorNo
  FROM Invoice AS i
    INNER JOIN WODetails AS w
      ON i.InvoiceId = w.InvoiceId
    INNER JOIN WODetailsLog AS l
      ON w.WODetailId = l.WODetailId
      inner join WOToWODetailMatch wwm 
      on l.WODetailId =wwm.WODetailId  
    LEFT JOIN Vendor
      ON Vendor.VendorId = i.VendorId
  WHERE i.ClientId = clientId
  AND i.IsDeleted = 0
  AND (invoiceType IS NULL
  OR invoiceType = ''
  OR i.InvoiceType = invoiceType)
  AND (scannedDateFrom IS NULL
  OR i.ScannedDate >= scannedDateFrom)
  AND (scannedDateTo IS NULL
  OR i.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
  AND (invoiceDateFrom IS NULL
  OR i.InvoiceDate >= invoiceDateFrom)
  AND (invoiceDateTo IS NULL
  OR i.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))
  AND wwm.WOSummary  like '0%'
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetNotMatchedLineItems` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetNotMatchedLineItems`(IN clientId int,
IN scannedDateFrom date,
IN scannedDateTo date,
IN invoiceDateFrom date,
IN invoiceDateTo date,
IN invoiceType varchar(255))
BEGIN
  SELECT
    Invoice.InvoiceNo,
    Invoice.InvoiceId,
    Invoice.ScannedDate,
    Invoice.PaymentDueDate,
    WODetails.*,
    Vendor.VendorName,
    Vendor.VendorNo
  FROM Invoice
    INNER JOIN WODetails
      ON Invoice.InvoiceId = WODetails.InvoiceId
    LEFT JOIN Vendor
      ON Vendor.VendorId = Invoice.VendorId
  WHERE Invoice.ClientId = clientId
  AND Invoice.IsDeleted = 0
  AND (invoiceType IS NULL
  OR invoiceType = ''
  OR Invoice.InvoiceType = invoiceType)
  AND (scannedDateFrom IS NULL
  OR Invoice.ScannedDate >= scannedDateFrom)
  AND (scannedDateTo IS NULL
  OR Invoice.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
  AND (invoiceDateFrom IS NULL
  OR Invoice.InvoiceDate >= invoiceDateFrom)
  AND (invoiceDateTo IS NULL
  OR Invoice.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))
  AND WODetails.HasError = 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetProcessedInvoices` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetProcessedInvoices`(IN clientId int,
IN scannedDateFrom date,
IN scannedDateTo date,
IN invoiceDateFrom date,
IN invoiceDateTo date,
IN invoiceType varchar(255))
BEGIN

  SELECT
    InvoiceId,
    InvoiceDate,
    InvoiceNo,
    PaymentDueDate,
    InvoiceTotal,
    InvoiceType
  FROM `Invoice`
  WHERE Invoice.ClientId = clientId
  AND Invoice.IsDeleted = 0
  AND (invoiceType IS NULL
  OR invoiceType = ''
  OR `Invoice`.`InvoiceType` = invoiceType)
  AND (scannedDateFrom IS NULL
  OR `Invoice`.ScannedDate >= scannedDateFrom)
  AND (scannedDateTo IS NULL
  OR `Invoice`.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
  AND (invoiceDateFrom IS NULL
  OR `Invoice`.InvoiceDate >= invoiceDateFrom)
  AND (invoiceDateTo IS NULL
  OR `Invoice`.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY));


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetRerunMatchedWOLineItems` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetRerunMatchedWOLineItems`(IN clientId int,
IN scannedDateFrom date,
IN scannedDateTo date,
IN invoiceDateFrom date,
IN invoiceDateTo date,
IN invoiceType varchar(255))
BEGIN
  SELECT
    i.InvoiceNo,
    i.InvoiceId,
    i.ScannedDate,
    i.PaymentDueDate,
    w.*,
    Vendor.VendorName,
    Vendor.VendorNo
  FROM Invoice AS i
    INNER JOIN WODetails AS w
      ON i.InvoiceId = w.InvoiceId
    INNER JOIN WODetailsLog AS l
      ON w.WODetailId = l.WODetailId
      inner join WOToWODetailMatch wwm 
      on l.WODetailId =wwm.WODetailId  
    LEFT JOIN Vendor
      ON Vendor.VendorId = i.VendorId
  WHERE i.ClientId = clientId
  AND i.IsDeleted = 0
  AND (invoiceType IS NULL
  OR invoiceType = ''
  OR i.InvoiceType = invoiceType)
  AND (scannedDateFrom IS NULL
  OR i.ScannedDate >= scannedDateFrom)
  AND (scannedDateTo IS NULL
  OR i.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
  AND (invoiceDateFrom IS NULL
  OR i.InvoiceDate >= invoiceDateFrom)
  AND (invoiceDateTo IS NULL
  OR i.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))
  AND wwm.WOSummary  like '2%'
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetTotalProcessedWOLineItems` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetTotalProcessedWOLineItems`(IN clientId int,
IN scannedDateFrom date,
IN scannedDateTo date,
IN invoiceDateFrom date,
IN invoiceDateTo date,
IN invoiceType varchar(255))
BEGIN
  SELECT
    `Invoice`.InvoiceNo,
    `Invoice`.InvoiceId,
    `Invoice`.`ScannedDate`,
    `Invoice`.`PaymentDueDate`,
    WODetails.*,
    Vendor.VendorName,
    Vendor.VendorNo

  FROM (SELECT
      ClientId,
      InvoiceId,
      InvoiceType,
      ScannedDate,
      IsDeleted,
      InvoiceDate,
      InvoiceNo,
      VendorId,
      PaymentDueDate
    FROM `Invoice`
    WHERE `Invoice`.`ClientId` = clientId
    AND `Invoice`.IsDeleted = 0
    AND (invoiceType IS NULL
    OR invoiceType = ''
    OR `Invoice`.`InvoiceType` = invoiceType)
    AND (scannedDateFrom IS NULL
    OR `Invoice`.ScannedDate >= scannedDateFrom)
    AND (scannedDateTo IS NULL
    OR `Invoice`.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
    AND (invoiceDateFrom IS NULL
    OR `Invoice`.InvoiceDate >= invoiceDateFrom)
    AND (invoiceDateTo IS NULL
    OR `Invoice`.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))) AS `Invoice`

    LEFT JOIN Vendor
      ON Vendor.VendorId = `Invoice`.VendorId
    INNER JOIN (SELECT
        *
      FROM `WODetails`) AS WODetails
  WHERE `Invoice`.`InvoiceId` = WODetails.`InvoiceId`

  ;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetUnmatchedWODetails` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetUnmatchedWODetails`(IN invoiceId int)
BEGIN


  SELECT
    WODetails.*,
    Invoice.VendorId,
    Invoice.`ClientId`,
    Invoice.`VendorSiteId`,
    Invoice.InvoiceNo
  FROM WODetails
    INNER JOIN Invoice
      ON WODetails.InvoiceId = Invoice.InvoiceId
  WHERE Invoice.`ClientId` = 79
  AND WODetails.HasError = 1
  AND `Invoice`.`InvoiceType` = 'HaulerInvoice'
  AND `Invoice`.`InvoiceId` = `invoiceid`
  ORDER BY WODetails.`ServiceDate` DESC;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetUserInvoiceAssignments` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetUserInvoiceAssignments`(
      IN userId CHAR(36),
    IN approvalLevel INT,
    IN assignorUserId CHAR(36),
    IN lockedBefore DATETIME
)
BEGIN
    DECLARE canViewConfidential BIT;
    DECLARE isAdmin INT;
    DECLARE today DATE;
    
    -- Get current date
    SET today = CURRENT_DATE();
    
    -- Get user's permissions
    SELECT 
        IFNULL(CanViewConfidentialInvoice, 0),
        EXISTS (
            SELECT 1
            FROM UserRoles
            WHERE UserId = userId AND RoleId = 8 -- Assuming 8 represents RoleEnum.Administrator
        )
    INTO 
        canViewConfidential,
        isAdmin
    FROM 
        User
    WHERE 
        UserId = userId LIMIT 1;
        
    -- If user is not allowed to view confidential invoices and is not an administrator
    IF canViewConfidential = 0 AND isAdmin = 0 THEN
        SELECT 
            uia.DateCreated,
            uia.HoldStartDate,
            uia.HoldEndDate,
            DATEDIFF(today, uia.DateCreated) AS NoOfDaysInQueue,
            Invoice.InvoiceDate,
            CASE WHEN Invoice.InvoiceDate IS NULL THEN '' ELSE CAST(Invoice.InvoiceDate AS CHAR) END AS InvoiceDateString,
            CASE WHEN Invoice.VendorId IS NOT NULL THEN 
                JSON_OBJECT('VendorNo', Vendor.VendorNo, 'VendorName', Vendor.VendorName, 'UserField1', Vendor.UserField1)
            ELSE NULL END AS Vendor,
            COALESCE(Invoice.Vendor.VendorName, '') AS VendorName,
            COALESCE(Invoice.Vendor.VendorNo, '') AS VendorNo,
            Invoice.CompanyCode,
            Invoice.InvoiceId,
            Invoice.InvoiceNo,
            Invoice.ScannedDate,
            CASE WHEN Invoice.ScannedDate IS NULL THEN '' ELSE CAST(Invoice.ScannedDate AS CHAR) END AS ScannedDateString,
            Invoice.InvoiceTotal,
            JSON_OBJECT('StateName', InvoiceStatu.StateName) AS InvoiceStatu,
            InvoiceStatus.StateName AS InvoiceStatusName,
            Invoice.InvoiceType,
            Invoice.LastActionBy,
            Invoice.LastActionDate,
            Invoice.CheckNumber,
            Invoice.AprovedDate,
            Invoice.PONumber,
            JSON_OBJECT('Source', Batch.Source, 'Sender', Batch.Sender) AS Batch,
            Invoice.PaymentDueDate,
            CASE WHEN Invoice.PaymentDueDate IS NULL THEN '' ELSE CAST(Invoice.PaymentDueDate AS CHAR) END AS PaymentDueDateString
        FROM 
            UserInvoiceAssignment uia
        INNER JOIN 
            Invoice ON uia.InvoiceId = Invoice.InvoiceId
        LEFT JOIN 
            Vendor ON Invoice.VendorId = Vendor.VendorId
        LEFT JOIN 
            InvoiceStatus ON Invoice.ApprovalStatusId = InvoiceStatus.StateId
        LEFT JOIN 
            Batch ON Invoice.BatchId = Batch.ID 
        WHERE 
            uia.UserId = userId
            AND uia.Type IN (0, 2) -- Assuming 0 represents UserInvoiceAssignmentType.Approval and 2 represents UserInvoiceAssignmentType.PartialApproval
            AND (approvalLevel = 0 OR EXISTS (
                SELECT 1
                FROM ApprovalSubStep
                WHERE ApprovalSubStep.ApprovalSubStepId = uia.ApprovalSubStepId
                    AND ApprovalSubStep.OrderNo = approvalLevel
            ))
            AND Invoice.IsPaused = 0
            AND (Invoice.IsPOInvoice = 0 OR Invoice.ApprovalRequired != Invoice.IsPOInvoice)
            AND Invoice.ApprovalStatusId IN (3, 4) -- Assuming 3 represents InvoiceStatus.InApproval and 4 represents InvoiceStatus.Approved
            AND Invoice.IsDeleted = 0
            AND (IsInvoiceAndUserCompanyMatch(userId, uia.InvoiceId) OR IsInvoiceAndUserCompanyMatch(assignorUserId, uia.InvoiceId))
            AND (COALESCE(Vendor.IsConfidential, Invoice.IsConfidential, 0) != 1)
            AND (NOT Invoice.IsLocked OR Invoice.LockedAt < lockedBefore OR Invoice.LockedBy = userId)
            AND (uia.HoldEndDate IS NULL OR uia.HoldEndDate < today)
        ORDER BY 
            uia.DateCreated;
    ELSE
        -- User is allowed to view confidential invoices or is an administrator
        SELECT 
            uia.DateCreated,
            uia.HoldStartDate,
            uia.HoldEndDate,
            DATEDIFF(today, uia.DateCreated) AS NoOfDaysInQueue,
            Invoice.InvoiceDate,
            CASE WHEN Invoice.InvoiceDate IS NULL THEN '' ELSE CAST(Invoice.InvoiceDate AS CHAR) END AS InvoiceDateString,
            CASE WHEN Invoice.VendorId IS NOT NULL THEN 
                JSON_OBJECT('VendorNo', Vendor.VendorNo, 'VendorName', Vendor.VendorName, 'UserField1', Vendor.UserField1)
            ELSE NULL END AS Vendor,
            COALESCE(Vendor.VendorName, '') AS VendorName,
            COALESCE(Vendor.VendorNo, '') AS VendorNo,
            Invoice.CompanyCode,
            Invoice.InvoiceId,
            Invoice.InvoiceNo,
            Invoice.ScannedDate,
            CASE WHEN Invoice.ScannedDate IS NULL THEN '' ELSE CAST(Invoice.ScannedDate AS CHAR) END AS ScannedDateString,
            Invoice.InvoiceTotal,
            JSON_OBJECT('StateName', InvoiceStatus.StateName) AS InvoiceStatus,
            InvoiceStatus.StateName AS InvoiceStatusName,
            Invoice.InvoiceType,
            Invoice.LastActionBy,
            Invoice.LastActionDate,
            Invoice.CheckNumber,
            Invoice.AprovedDate,
            Invoice.PONumber,
            JSON_OBJECT('Source', Batch.Source, 'Sender', Batch.Sender) AS Batch,
            Invoice.PaymentDueDate,
            CASE WHEN Invoice.PaymentDueDate IS NULL THEN '' ELSE CAST(Invoice.PaymentDueDate AS CHAR) END AS PaymentDueDateString
        FROM 
            UserInvoiceAssignment uia
        INNER JOIN 
            Invoice ON uia.InvoiceId = Invoice.InvoiceId
        LEFT JOIN 
            Vendor ON Invoice.VendorId = Vendor.VendorId
        LEFT JOIN 
            InvoiceStatus ON Invoice.ApprovalStatusId = InvoiceStatus.StateId 
        LEFT JOIN 
            Batch ON Invoice.BatchId = Batch.ID 
        WHERE 
            (uia.UserId = userId OR uia.UserId = assignorUserId)
            AND uia.Type IN (0, 2) -- Assuming 0 represents UserInvoiceAssignmentType.Approval and 2 represents UserInvoiceAssignmentType.PartialApproval
            AND (approvalLevel = 0 OR EXISTS (
                SELECT 1
                FROM ApprovalSubStep
                WHERE ApprovalSubStep.ApprovalSubStepId = uia.ApprovalSubStepId
                    AND ApprovalSubStep.OrderNo = approvalLevel
            ))
            AND Invoice.IsPaused = 0
            AND (Invoice.IsPOInvoice = 0 OR Invoice.ApprovalRequired != Invoice.IsPOInvoice)
            AND Invoice.ApprovalStatusId IN (3, 4) -- Assuming 3 represents InvoiceStatus.InApproval and 4 represents InvoiceStatus.Approved
            AND Invoice.IsDeleted = 0
            AND (IsInvoiceAndUserCompanyMatch(userId, uia.InvoiceId) OR IsInvoiceAndUserCompanyMatch(assignorUserId, uia.InvoiceId))
            AND (COALESCE(Vendor.IsConfidential, Invoice.IsConfidential, 0) != 1)
            AND (NOT Invoice.IsLocked OR Invoice.LockedAt < lockedBefore OR Invoice.LockedBy = userId)
            AND (uia.HoldEndDate IS NULL OR uia.HoldEndDate < today)
        ORDER BY 
            uia.DateCreated;
    END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetUserInvoiceAssignmentsFiltered` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetUserInvoiceAssignmentsFiltered`(
    IN userId CHAR(36),
    IN assignorUserId CHAR(36),
    IN approvalLevel INT,
    IN lockedBefore DATETIME
)
BEGIN
    SELECT uia.*, Invoice.*, Vendor.*, Department.*
    FROM UserInvoiceAssignment  uia
    INNER JOIN Invoice ON uia.InvoiceId = Invoice.InvoiceId
    LEFT JOIN Vendor ON Invoice.VendorId = Vendor.VendorId
    LEFT JOIN Department ON Invoice.VendorSiteId  = Department.Id 
    WHERE (uia.UserId = userId OR uia.UserId = assignorUserId)
        AND (uia.Type IN (0, 2)) -- Assuming 0 represents UserInvoiceAssignmentType.Approval and 2 represents UserInvoiceAssignmentType.PartialApproval
        AND (approvalLevel = 0 OR EXISTS (
            SELECT 1
            FROM ApprovalSubStep
            WHERE ApprovalSubStepId = uia.ApprovalSubStepId
                AND OrderNo = approvalLevel
        ))
        AND Invoice.IsPaused = 0
        AND ( Invoice.IsPOInvoice = 0 OR Invoice.ApprovalRequired != Invoice.IsPOInvoice)
        AND Invoice.ApprovalStatusId IN (3, 4) -- Assuming 3 represents InvoiceStatus.InApproval and 4 represents InvoiceStatus.Approved
        AND Invoice.IsDeleted = 0
        AND (IsInvoiceAndUserCompanyMatch(userId, uia.InvoiceId) OR IsInvoiceAndUserCompanyMatch(assignorUserId, uia.InvoiceId))
        AND (NOT Invoice.IsLocked OR Invoice.LockedAt < lockedBefore OR Invoice.LockedBy = userId)
        AND (uia.HoldEndDate IS NULL OR uia.HoldEndDate < CURDATE());
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetWODetailLineItemActivity` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetWODetailLineItemActivity`(IN clientId int,
IN scannedDateFrom date,
IN scannedDateTo date,
IN invoiceDateFrom date,
IN invoiceDateTo date,
IN invoiceType varchar(255))
BEGIN
  SELECT DISTINCT
    (`Invoice`.`InvoiceId`) AS 'InvoiceId',
    `Invoice`.`InvoiceNo`,
    `InvoiceHistory`.`PreviousData`,
    `InvoiceHistory`.`NewData`,
    `InvoiceHistory`.`Field`,
    `InvoiceHistory`.`Actor`,
    `InvoiceHistory`.`ActionDate`,
    Invoice.`ScannedDate`
  FROM (SELECT
      ClientId,
      InvoiceId,
      InvoiceType,
      ScannedDate,
      IsDeleted,
      InvoiceDate,
      InvoiceNo
    FROM `Invoice`
    WHERE `Invoice`.`ClientId` = clientId
    AND `Invoice`.IsDeleted = 0
    AND (invoiceType IS NULL
    OR invoiceType = ''
    OR `Invoice`.`InvoiceType` = invoiceType)
    AND (scannedDateFrom IS NULL
    OR `Invoice`.ScannedDate >= scannedDateFrom)
    AND (scannedDateTo IS NULL
    OR `Invoice`.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
    AND (invoiceDateFrom IS NULL
    OR `Invoice`.InvoiceDate >= invoiceDateFrom)
    AND (invoiceDateTo IS NULL
    OR `Invoice`.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))) AS `Invoice`
    INNER JOIN  WODetails WODetails
      ON `Invoice`.`InvoiceId` = WODetails.`InvoiceId`
 
    INNER JOIN (SELECT
        NewData,
        InvoiceId,
        PreviousData,
        `Field`,
        ActionDate,
        Actor
      FROM `InvoiceHistory`
      WHERE `InvoiceHistory`.`Field` <> '') AS `InvoiceHistory`
      ON `InvoiceHistory`.`InvoiceId` = `Invoice`.`InvoiceId`
  ;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_InvoiceNoCheck` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `SP_InvoiceNoCheck`(
	IN `_VendorId` INT,
	IN `_InvoiceNo` VARCHAR(50)
)
BEGIN

	SET @VendorFound = 0;
	
	SELECT COUNT(*) INTO @VendorFound FROM Invoice WHERE VendorId = _VendorId LIMIT 1;
	
	IF (@VendorFound > 0) THEN
		SELECT COUNT(*) AS InRange FROM (SELECT LENGTH(InvoiceNo) AS InvoiceNo FROM Invoice WHERE VendorId = _VendorId ORDER BY InvoiceId DESC LIMIT 5) AS `RANK` 
		WHERE InvoiceNo = LENGTH(_InvoiceNo);
	ELSE
		SELECT 1 AS InRange;
	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_InvoiceTotalCheck` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `SP_InvoiceTotalCheck`(
	IN `_VendorId` INT,
	IN `_Total` DECIMAL(18,2)
)
BEGIN

	SET @VendorFound = 0;
	
	SELECT COUNT(*) INTO @VendorFound FROM Invoice WHERE VendorId = _VendorId AND IsPOInvoice = 0 LIMIT 1;
	
	IF (@VendorFound > 0) THEN
		SELECT AVG(InvoiceTotal) INTO @Average FROM (SELECT InvoiceTotal FROM Invoice WHERE VendorId = _VendorId AND IsPOInvoice = 0 ORDER BY InvoiceId DESC LIMIT 5) AS `RANK`;
		
		SET @50PctLess = @Average / 2;
		SET @50PctMore = @Average + @50PctLess;
		
		SELECT (_Total BETWEEN @50PctLess AND @50PctMore) AS InRange;
	ELSE
		SELECT (_Total BETWEEN 1 AND 1000000000) AS InRange;
	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_MatchWODetailWithWO` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_MatchWODetailWithWO`(IN ClientId int,
IN WONumber varchar(50),
IN UnitCost1 decimal(10, 2),
IN UnitCost2 decimal(10, 2),
IN VendorId int,
IN PropertyId int)
BEGIN
  SELECT
    *
  FROM WO
  WHERE ClientId = ClientId
  OR WONumber = WONumber
  OR (UnitCost = UnitCost1
  OR UnitCost = UnitCost2)
  OR VendorId = VendorId
  OR PropertyId = PropertyId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_MatchWODetailWithWOUsingServiceDate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_MatchWODetailWithWOUsingServiceDate`(IN clientId int,
IN fixedDate varchar(10),
IN prevFixedDate varchar(10),
IN nextFixedDate varchar(10),
IN fixedAmt decimal(10, 2),
IN VendorID int,
IN PropertyID int,
IN HeaderAcctNum varchar(255))
BEGIN
  SELECT
    *
  FROM WO
  WHERE ClientId = clientId
  AND (ServiceDate LIKE CONCAT(fixedDate, '%')
  OR ServiceDate LIKE CONCAT(prevFixedDate, '%')
  OR ServiceDate LIKE CONCAT(nextFixedDate, '%'))
  AND GlCodeId IS NOT NULL
  AND (UnitCost = fixedAmt
  OR UnitCost = ROUND(fixedAmt + 0.01, 2))
  AND VendorId = VendorID
  AND PropertyId = PropertyID
  AND (HeaderAcctNum IS NULL
  OR HeaderAcctNum = ''
  OR AccountNumber = HeaderAcctNum);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_UserInvoiceHistoryDetail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `SP_UserInvoiceHistoryDetail`(IN p_ClientId int,
IN p_YearDateFrom datetime,
IN p_DateTo datetime,
IN p_ApplicableInvoiceStatuses varchar(1000))
BEGIN
  SET @StartDateOfMonth = DATE_FORMAT(p_DateTo, '%Y-%m-01');
  SET @TotalMonths = TIMESTAMPDIFF(MONTH, p_YearDateFrom, p_DateTo) - 1;
  -- YearlyAverage and MonthlyAverage
  SELECT

    u.FromApprovalSubStepUserId AS ActorId,
    i.InvoiceId AS InvoiceIds,
    ih.CurrentStatus AS CurrentStat,
    COUNT(DISTINCT CASE WHEN MONTH(u.AssignDate) = MONTH(p_DateTo) AND
        YEAR(u.AssignDate) = YEAR(p_DateTo) THEN u.InvoiceId END) AS noofInvoices,
    SUM(
    CASE WHEN MONTH(u.AssignDate) = MONTH(p_DateTo) AND
        YEAR(u.AssignDate) = YEAR(p_DateTo) THEN DATEDIFF(u.ApprovedDate, u.AssignDate) ELSE 0 END
    ) /
    COUNT(DISTINCT
    CASE WHEN MONTH(u.AssignDate) = MONTH(p_DateTo) AND
        YEAR(u.AssignDate) = YEAR(p_DateTo) THEN u.InvoiceId ELSE NULL END
    ) AS Average,

    MAX(CASE WHEN MONTH(u.AssignDate) = MONTH(p_DateTo) AND
        YEAR(u.AssignDate) = YEAR(p_DateTo) THEN DATEDIFF(u.ApprovedDate, u.AssignDate) ELSE 0 END) AS MaximumDays,
    COUNT(DISTINCT CASE WHEN MONTH(u.AssignDate) != MONTH(p_DateTo) THEN u.InvoiceId END) AS MonthlyTotal,
    SUM(
    CASE WHEN MONTH(u.AssignDate) != MONTH(p_DateTo) THEN DATEDIFF(u.ApprovedDate, u.AssignDate) ELSE 0 END
    ) / COALESCE(CASE WHEN COUNT(DISTINCT
        CASE WHEN MONTH(u.AssignDate) != MONTH(p_DateTo) THEN u.InvoiceId ELSE NULL END
        ) = 0 THEN NULL ELSE COUNT(DISTINCT
        CASE WHEN MONTH(u.AssignDate) != MONTH(p_DateTo) THEN u.InvoiceId ELSE NULL END
        ) END, 1) / @TotalMonths AS MonthlyAverage,
    MAX(DATEDIFF(u.ApprovedDate, u.AssignDate)) AS MonthlyMaximumDays

  FROM (SELECT
      a.InvoiceId,
      a.ToApprovalSubStepUserId,
      a.AssignDate,
      b.FromApprovalSubStepUserId,
      b.ApprovedDate
    FROM (SELECT
        uih1.InvoiceId,
        uih1.ToApprovalSubStepUserId,
        uih1.ApprovedOn AS AssignDate,
        @row_number1 := IF(@prev1 = CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId), @row_number1 + 1, 1) AS RowNum,
        @prev1 := CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId)
      FROM UserInvoiceAssignmentHistory uih1
        CROSS JOIN (SELECT
            @row_number1 := 0,
            @prev1 := '') AS vars
      WHERE uih1.ToApprovalSubStepUserId IS NOT NULL
      AND uih1.ApprovedOn >= p_YearDateFrom
      AND uih1.ApprovedOn <= p_DateTo
      ORDER BY uih1.InvoiceId, uih1.ToApprovalSubStepUserId, uih1.ApprovedOn) a
      JOIN (SELECT
          uih2.InvoiceId,
          uih2.FromApprovalSubStepUserId,
          uih2.ApprovedOn AS ApprovedDate,
          @row_number2 := IF(@prev2 = CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId), @row_number2 + 1, 1) AS RowNum,
          @prev2 := CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId)
        FROM UserInvoiceAssignmentHistory uih2
          CROSS JOIN (SELECT
              @row_number2 := 0,
              @prev2 := '') AS vars
        WHERE uih2.FromApprovalSubStepUserId IS NOT NULL
        AND uih2.ApprovedOn >= p_YearDateFrom
        AND uih2.ApprovedOn <= p_DateTo
        ORDER BY uih2.InvoiceId, uih2.FromApprovalSubStepUserId, uih2.ApprovedOn) b
        ON a.InvoiceId = b.InvoiceId
        AND a.ToApprovalSubStepUserId = b.FromApprovalSubStepUserId
        AND a.RowNum = b.RowNum
    ORDER BY a.InvoiceId, a.AssignDate) AS u
    INNER JOIN Invoice i
      ON u.InvoiceId = i.InvoiceId
    INNER JOIN InvoiceHistory AS ih
      ON u.InvoiceId = ih.InvoiceId
  WHERE u.AssignDate >= p_YearDateFrom
  AND u.AssignDate <= p_DateTo
  AND i.ClientId = p_ClientId
  AND i.IsDeleted = 0
  AND FIND_IN_SET(i.ApprovalStatusId, p_ApplicableInvoiceStatuses) > 0
  AND ih.ActorId = u.FromApprovalSubStepUserId
  AND ih.ActionDate = u.ApprovedDate
  AND i.InvoiceId = 661909261;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SummaryCalculationReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `SummaryCalculationReport`(IN ClientId int,

IN Approvers nvarchar(65535))
BEGIN
  DECLARE str nvarchar(65535);
  DECLARE str1 nvarchar(65535);
  DECLARE varStr nvarchar(65535);
  SET str = Approvers;
  DROP TABLE IF EXISTS ApproverList;
  CREATE TEMPORARY TABLE ApproverList (
    ApproverId varchar(128)
  );
  WHILE CHAR_LENGTH(str) > 0
    AND str IS NOT NULL
    AND str <> '' DO
    SET varStr = SUBSTRING_INDEX (str, ',', 1);
    SET str = SUBSTRING(str, LENGTH(varStr) + 2);
    IF varStr <> ''
      AND varStr <> ' '
      AND varStr IS NOT NULL THEN
      INSERT INTO ApproverList
        SELECT
          varStr;
    END IF;
  -- select varStr;
  END WHILE;
  IF ClientId IS NOT NULL
    OR ClientId <> 0 THEN
    SELECT
      CONCAT(usia.FirstName, " ", usia.LastName) AS AssignedTo,
      SUM(inv.InvoiceTotal) AS TotalAmount,
      AVG(DATEDIFF(CURDATE(), usia.DateCreated)) AS AverageNumberOfDaysInQueue,
      COUNT(inv.InvoiceId) AS TotalNumberOfInvoice

    FROM Invoice AS inv
      INNER JOIN (SELECT
          u.UserId,
          uia.InvoiceId,
          u.FirstName,
          u.LastName,
          uia.DateCreated
        FROM `User` AS u
          INNER JOIN `UserInvoiceAssignment` AS uia
            ON uia.UserId = u.UserId
        WHERE u.ClientId = ClientId
        AND u.UserId IN (SELECT
            ApproverId
          FROM ApproverList)) AS usia
    WHERE inv.InvoiceId = usia.InvoiceId
    AND inv.ClientId = ClientId
    GROUP BY usia.UserId;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `TotalInvoiceCountReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `TotalInvoiceCountReport`(startDate datetime, endDate datetime)
BEGIN
  SELECT
    b.`Source`,
    CASE WHEN i.IsPOInvoice = 1 THEN 'PO' ELSE 'No PO' END AS POType,
    COUNT(i.InvoiceId) AS InvoiceCount
  FROM Batch b
    INNER JOIN Invoice i
      ON b.Id = i.BatchId
  WHERE i.ScannedDate >= startDate
  AND i.ScannedDate <= endDate
  AND i.IsDeleted = 0
  AND i.ClientId = 1
  GROUP BY i.IsPoInvoice,
           b.`Source`
  ORDER BY b.`Source`;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateApproverByAmount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `UpdateApproverByAmount`(IN ClientId int,
IN ApproverFirstName nvarchar(250),
IN ApproverLastName nvarchar(250),
IN ApproverInternalId nvarchar(250),
IN ApproverEmail nvarchar(250),
IN ManagerInternalId nvarchar(250),
IN ManagerEmail nvarchar(250),
IN CompanyCode nvarchar(40),
IN MaximumAmount decimal(30, 2))
HereSP:
  BEGIN
    DECLARE UId nvarchar(250);
    DECLARE ManagerId nvarchar(250);
    DECLARE ApproverByAmountId int;
    DECLARE ExistCnt int;
    DECLARE NoPOApprovalSubStepId int;
    -- SELECT MaximumAmount;
    -- LEAVE HereSP;

    SELECT
      ass.ApprovalSubStepId
    FROM ApprovalSubStep ass
    WHERE ass.ApprovalStepId = (SELECT
        aps.ApprovalStepId
      FROM ApprovalStep aps
      WHERE aps.ClientId = ClientId
      AND aps.IsPO = 0
      AND ClientCompanyId = (SELECT
          `Id`
        FROM ClientCompany cc
        WHERE cc.ClientId = ClientId
        AND cc.CompanyCode = CompanyCode COLLATE utf8_unicode_ci LIMIT 1) LIMIT 1)
    AND ass.OrderNo = 1 INTO NoPOApprovalSubStepId;
    SELECT
      NoPOApprovalSubStepId,
      'First';
    SELECT
      usr.UserId
    FROM `User` usr
    WHERE usr.ClientId = ClientId
    AND (usr.Email = ApproverEmail COLLATE utf8_unicode_ci
    OR ApproverEmail = 'na')
    -- AND usr.IsActive = 1 
    -- AND (usr.ClientCompanyId = (SELECT `Id` FROM ClientCompany cc WHERE 
    -- cc.ClientId = ClientId AND cc.CompanyCode = CompanyCode COLLATE utf8_unicode_ci limit 1)
    -- OR usr.ClientCompanyId IS NULL) 
    LIMIT 1 INTO UId;

    IF UId IS NOT NULL THEN
      UPDATE `User`
      SET ClientCompanyId = (SELECT
          cc.`Id`
        FROM `ClientCompany` cc
        WHERE cc.CompanyCode = CompanyCode)
      WHERE UserId = Uid;
    END IF;
    -- select 'pass 2';
    SELECT
      usr.UserId
    FROM `User` usr
    WHERE usr.ClientId = ClientId
    AND usr.Email = ManagerEmail COLLATE utf8_unicode_ci
    AND usr.IsActive = 1
    AND usr.ClientCompanyId = (SELECT
        `Id`
      FROM ClientCompany cc
      WHERE cc.ClientId = ClientId
      AND cc.CompanyCode = CompanyCode COLLATE utf8_unicode_ci LIMIT 1) INTO ManagerId;
    SELECT
      'pass 3',
      ManagerId,
      UId;
    IF UId IS NULL THEN
      INSERT INTO User (ClientId, UserId, RoleId, UserName, `Password`,
      FirstName, LastName, Email, IsActive, UserIdCard, ClientCompanyId)
        VALUES (clientId, UUID(), 1, ApproverEmail, (SELECT `Password` FROM User usr WHERE usr.UserName = 'kadmin'), ApproverFirstName, ApproverLastName, ApproverEmail, 1, ApproverInternalId, (SELECT cc.Id FROM ClientCompany cc WHERE cc.ClientId = ClientId AND cc.CompanyCode = CompanyCode COLLATE utf8_unicode_ci LIMIT 1));

    END IF;
    SELECT
      usr.UserId
    FROM User usr
    WHERE usr.ClientId = ClientId
    AND usr.UserIdCard = ApproverInternalId COLLATE utf8_unicode_ci
    AND (usr.Email = ApproverEmail COLLATE utf8_unicode_ci
    OR ApproverEmail = 'na')
    AND usr.IsActive = 1
    AND (usr.ClientCompanyId = (SELECT
        cc.Id
      FROM ClientCompany cc
      WHERE cc.ClientId = ClientId
      AND cc.CompanyCode = CompanyCode COLLATE utf8_unicode_ci LIMIT 1)
    OR usr.ClientCompanyId IS NULL) LIMIT 1 INTO UId;
    IF (SELECT
          COUNT(UserId)
        FROM UserRoles
        WHERE UserId = UId) = 0 THEN
      INSERT INTO UserRoles
        VALUES (UId, 1);
    END IF;
    IF UId IS NOT NULL
      AND ManagerId IS NOT NULL THEN
      SELECT
        COUNT(ID)
      FROM ApproverByAmount aba
      WHERE aba.UserId = UId COLLATE utf8_unicode_ci INTO ExistCnt;
      IF ExistCnt > 0 THEN
        SELECT
          COUNT(ID)
        FROM ApproverByAmount aba
        WHERE aba.UserId = UId COLLATE utf8_unicode_ci
        AND aba.SecondApproverId = ManagerId COLLATE utf8_unicode_ci INTO ExistCnt;

        IF ExistCnt > 0 THEN
          SELECT
            COUNT(ID)
          FROM ApproverByAmount aba
          WHERE aba.UserId = UId COLLATE utf8_unicode_ci
          AND aba.SecondApproverId = ManagerId COLLATE utf8_unicode_ci
          AND aba.MaximumAllowedAmount = MaximumAmount INTO ExistCnt;

          IF ExistCnt > 0 THEN
            SELECT
              'Already in DB'
            FROM ApproverByAmount aba
            WHERE aba.UserId = UId COLLATE utf8_unicode_ci
            AND aba.SecondApproverId = ManagerId COLLATE utf8_unicode_ci
            AND aba.MaximumAllowedAmount = MaximumAmount;
          ELSE
            SELECT
              aba.ID
            FROM ApproverByAmount aba
            WHERE aba.UserId = UId COLLATE utf8_unicode_ci
            AND aba.SecondApproverId = ManagerId COLLATE utf8_unicode_ci INTO ExistCnt;
            SELECT
              ExistCnt,
              'ready',
              MaximumAmount;

            UPDATE ApproverByAmount aba
            SET aba.MaximumAllowedAmount = MaximumAmount
            WHERE aba.Id = ExistCnt;
            SELECT
              *
            FROM ApproverByAmount aba
            WHERE aba.Id = ExistCnt;
          END IF;
        ELSE
          SELECT
            aba.ID
          FROM ApproverByAmount aba
          WHERE aba.UserId = UId COLLATE utf8_unicode_ci INTO ExistCnt;
          UPDATE ApproverByAmount aba
          SET aba.MaximumAllowedAmount = MaximumAmount,
              aba.SecondApproverId = ManagerId
          WHERE aba.Id = ExistCnt;
          SELECT
            *
          FROM ApproverByAmount aba
          WHERE aba.Id = ExistCnt;
        END IF;
      ELSE
        -- select UId, MaximumAmount, ManagerId;
        INSERT INTO ApproverByAmount (UserId, MaximumAllowedAmount, SecondApproverId)
          VALUES (UId, MaximumAmount, ManagerId);
        SELECT
          *
        FROM ApproverByAmount aba
        WHERE aba.UserId = UId COLLATE utf8_unicode_ci
        AND aba.SecondApproverId = ManagerId COLLATE utf8_unicode_ci
        AND aba.MaximumAllowedAmount = MaximumAmount;
      END IF;
    ELSE
      SELECT
        'User already exists';
    END IF;
  END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateCard` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `UpdateCard`(IN InvoiceID int,
IN CardNumber nvarchar(50),
IN TransactionNumber nvarchar(50))
BEGIN
  UPDATE Invoice inv
  SET inv.CheckNumber = CardNumber,
      inv.IsPaused = 0,
      inv.TransactionIdentifer = TransactionNumber,
      inv.ApprovalStatusId = 7
  WHERE inv.InvoiceId = InvoiceID;

  UPDATE PaymentStatus ps
  SET ps.CardNumber = CardNumber
  WHERE ps.InvoiceId = InvoiceID;
  DELETE
    FROM PausedInvoice
  WHERE InvoiceId = InvoiceID;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateContractToOrder` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `UpdateContractToOrder`(IN ContractID nvarchar(50),
IN OrderID nvarchar(50),
IN OrderNo nvarchar(50),
IN ServiceDate datetime)
BEGIN
  DECLARE InvoiceCustomerID int;
  DECLARE ContractNo nvarchar(250);

  SET InvoiceCustomerID = (SELECT
      InvoiceCustomerID
    FROM InvoiceCustomerLineItem invcustli
    WHERE invcustli.InternalId = ContractID LIMIT 1);
  IF InvoiceCustomerID IS NOT NULL THEN
    UPDATE InvoiceCustomerLineItem
    SET InternalId = OrderID
    WHERE InternalId = ContractID;
    UPDATE Contract
    SET InternalId = OrderID
    WHERE InternalId = ContractID;
    SET ContractNo = (SELECT
        ContractNo
      FROM InvoiceCustomer
      WHERE ID = InvoiceCustomerID LIMIT 1);
    IF ContractNo IS NOT NULL THEN
      UPDATE InvoiceCustomer
      SET ContractNo = OrderNo
      WHERE ContractNo = ContractNo;
      -- Also update the ContractHeader
      UPDATE ContractHeader
      SET ContractNo = OrderNo
      WHERE ContractNo = ContractNo;
      SELECT
        'CONTRACT FOUND';
    ELSE
      SELECT
        'CONTRACT NOT FOUND';
    END IF;
  ELSE
    SELECT
      'CONTRACTID NOT FOUND';
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateContractWithOrder` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `UpdateContractWithOrder`(IN CustomerSiteCode nvarchar(250),
IN CustomerNo nvarchar(250),
IN OrderID nvarchar(250),
IN OrderNo nvarchar(250),
IN ServiceAmount decimal,
IN ServiceDate datetime)
BEGIN
  DECLARE ID int;
  DECLARE done int DEFAULT 0;
  DECLARE myCount int;

  DECLARE ID_Cursor CURSOR FOR
  SELECT
    ID
  FROM InvoiceCustomer
  WHERE CustomerSiteId = (SELECT
      ID
    FROM CustomerSite custsite
    WHERE custsite.`Code` = CustomerSiteCode
    AND custsite.CustomerId = (SELECT
        CustomerId
      FROM Customer cust
      WHERE cust.CustomerNo = CustomerNo LIMIT 1) LIMIT 1)
  AND InvoiceId IN (SELECT
      InvoiceId
    FROM Invoice inv
    WHERE inv.ApprovalStatusId = 5);
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

  OPEN ID_Cursor;
GET_ID:
  LOOP
    FETCH ID_Cursor INTO ID;
    IF done = 1 THEN
      LEAVE GET_ID;
    END IF;

    SELECT
      ID;
    SET myCount = (SELECT
        COUNT(*)
      FROM InvoiceCustomerLineItem invcustli
      WHERE invcustli.InvoiceCustomerId = ID
      AND MONTH(invcustli.ServiceDate) = MONTH(ServiceDate));
    IF myCount > 0 THEN
      UPDATE InvoiceCustomer invcust
      SET invcust.ContractNo = OrderNo
      WHERE invcust.ID = ID;
      UPDATE InvoiceCustomerLineItem invcustli
      SET invcustli.ServiceDate = ServiceDate,
          invcustli.InternalId = OrderID
      WHERE invcustli.InvoiceCustomerId = ID
      AND invcustli.Amount = ServiceAmount;
      LEAVE GET_ID;
    END IF;
  END LOOP GET_ID;
  CLOSE ID_Cursor;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateCustomerItemPrice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `UpdateCustomerItemPrice`(IN CustomerNo nvarchar(250),
IN ItemNo nvarchar(250),
IN CustomerPrice float)
BEGIN
  DECLARE ItemID int;
  DECLARE ItemDesc nvarchar(50);
  DECLARE ClientId int;
  DECLARE CustomerID int;
  DECLARE CustomerLocationID int;
  DECLARE done int DEFAULT 0;

  DECLARE customerlocation_cursor CURSOR FOR
  SELECT
    CustomerLocationID
  FROM CustomerLocation custloc
  WHERE custloc.CustomerID = CustomerID;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

  SET ClientId = 27;
  SELECT
    CustomerId
  FROM Customer cust
  WHERE cust.CustomerNo = CustomerNo INTO CustomerID;
  SELECT
    ItemId
  FROM Item itm
  WHERE itm.ItemNo = ItemNo INTO ItemID;
  SELECT
    ItemDescription
  FROM Item itm
  WHERE itm.ItemNo = ItemNo INTO ItemDesc;

  IF (CustomerID IS NOT NULL
    AND ItemNo IS NOT NULL) THEN
    IF NOT EXISTS (SELECT
          *
        FROM CustomerItemPrice custitmprc
        WHERE custitmprc.CustomerID = CustomerID
        AND custitmprc.ItemID = ItemID) THEN
      INSERT INTO CustomerItemPrice (CustomerID, ItemID, Price)
        VALUES (CustomerID, ItemID, CustomerPrice);
    END IF;
    OPEN customerlocation_cursor;
  GET_CL:
    LOOP
      FETCH customerlocation_cursor INTO CustomerLocationID;
      IF done = 1 THEN
        LEAVE GET_CL;
      END IF;
      IF NOT EXISTS (SELECT
            itemId
          FROM CustomerLocationItem custlocitm
          WHERE custlocitm.ItemId = ItemID
          AND custlocitm.CustomerLocationId = CustomerLocationID) THEN
        INSERT INTO CustomerLocationItem (CustomerLocationId, ItemId, Description, VendorPrice,
        CustomerPrice, DefaultQuantity, NestleQuantity, IsActive)
          VALUES (CustomerLocationID, ItemID, ItemDesc, 0, CustomerPrice, 1, 1, 1);
      END IF;
    END LOOP GET_CL;
    CLOSE customerlocation_cursor;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateCustomerLocationFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `UpdateCustomerLocationFromScript`(IN RMSCode nvarchar(250),
IN LocationName nvarchar(250),
IN GroupCode nvarchar(50),
IN VendorNo nvarchar(250),
IN Address1 nvarchar(250),
IN Address2 nvarchar(250),
IN City nvarchar(250),
IN State nvarchar(50),
IN Zip nvarchar(50),
IN Phone nvarchar(50),
IN Email nvarchar(50),
IN CustContact nvarchar(50),
IN itemNo nvarchar(50),
IN Description nvarchar(50),
IN VendorPrice float,
IN CustomerPrice float,
IN Qty int,
IN VendorProdNum nvarchar(50),
IN VendorQty int)
BEGIN
  DECLARE ItemID int;
  DECLARE LocationID int;
  DECLARE ClientId int;
  DECLARE CustomerID int;
  DECLARE VendorID int;
  DECLARE AddressId int;
  DECLARE StateId int;
  DECLARE recCount int;

  IF NOT EXISTS (SELECT
        CustomerLocationId
      FROM CustomerLocation custloc
      WHERE custloc.LocationNumber = RMSCode) THEN
    IF NOT EXISTS (SELECT
          AddressId
        FROM Address adr
        WHERE adr.Address1 = Address1
        AND adr.ZipCode = Zip) THEN
      SET AddressId = (SELECT
          MAX(adr.AddressId)
        FROM Address adr) + 1;
      SELECT
        st.StateId
      FROM State st
      WHERE LOWER(st.StateNameShort) = LOWER(State)
      OR LOWER(st.StateName) = LOWER(State) INTO StateId;
      IF StateId IS NULL THEN
        SET StateId = 1;
      END IF;
      INSERT INTO Address (StateId, ZipCode, CityName, Address1, Address2, PhoneNo, Email, ContactPerson)
        VALUES (StateId, Zip, City, Address1, Address2, Phone, Email, CustContact);
    ELSE
      SELECT
        adr.AddressId
      FROM Address adr
      WHERE adr.Address1 = Address1
      AND adr.ZipCode = Zip INTO AddressId;
    END IF;
    SELECT
      cust.CustomerID
    FROM Customer cust
    WHERE cust.CustomerNo = GroupCode INTO CustomerID;
    IF CustomerID IS NULL THEN
      SET CustomerID = (SELECT
          MAX(cust.CustomerId)
        FROM Customer cust) + 1;
      INSERT INTO Customer (ClientId, CustomerName, AddressId, DBCode)
        VALUES (ClientId, LocationName, AddressId, GroupCode);
    END IF;
    SELECT
      vloc.VendorId
    FROM VendorLocation vloc
    WHERE vloc.LocationNumber = VendorNo INTO VendorID;
    IF VendorID IS NOT NULL THEN
      SET LocationID = (SELECT
          MAX(custloc.CustomerLocationId)
        FROM CustomerLocation custloc) + 1;
      INSERT INTO CustomerLocation (CustomerId, LocationNumber, LocationName, AddressId, VendorLocationId)
        VALUES (CustomerID, RMSCode, LocationName, AddressId, VendorID);
    END IF;
  ELSE
    SELECT
      COUNT(*)
    FROM CustomerLocation custloc
    WHERE custloc.LocationNumber = RMSCode INTO recCount;
    IF recCount = 1 THEN
      SELECT
        custloc.CustomerLocationId
      FROM CustomerLocation custloc
      WHERE custloc.LocationNumber = RMSCode INTO LocationID;
      IF NOT EXISTS (SELECT
            *
          FROM CustomerLocationItem custlocitm
          WHERE custlocitm.CustomerLocationId = LocationID
          AND custlocitm.ItemId = (SELECT
              itm.ItemId
            FROM Item itm
            WHERE itm.ItemNo = itemNo)) THEN
        SELECT
          itm.ItemId
        FROM Item itm
        WHERE itm.ItemNo = itemNo INTO ItemID;
        IF ItemID IS NOT NULL THEN
          INSERT INTO CustomerLocationItem (CustomerLocationId, ItemId, Description, VendorPrice, CustomerPrice, DefaultQuantity, VendorProductNumber, VendorQuantity)
            VALUES (LocationID, ItemID, Description, VendorPrice, CustomerPrice, 1, VendorProdNum, VendorQty);
        END IF;
      END IF;
    END IF;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateCustomerLocationItemPrice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `UpdateCustomerLocationItemPrice`(IN CustomerLocationName nvarchar(250),
IN CustomerLocationNo nvarchar(250),
IN DBCode nvarchar(50),
IN ItemNo nvarchar(250),
IN VendorPrice float,
IN CustomerPrice float,
IN VendorQty int,
IN NestleQty int)
BEGIN
  DECLARE ItemID int;
  DECLARE ClientId int;
  DECLARE CustomerLocatoinID int;

  SET ClientId = 27;
  SELECT
    custloc.CustomerLocationId
  FROM CustomerLocation custloc
  WHERE custloc.LocationNumber = CustomerLocationNo INTO CustomerLocatoinID;
  SELECT
    itm.ItemId
  FROM Item itm
  WHERE itm.ItemNo = ItemNo INTO ItemID;

  IF (CustomerLocatoinID IS NOT NULL
    AND CustomerLocationNo <> '') THEN
    UPDATE CustomerLocation custloc
    SET custloc.LocationName = CustomerLocationName,
        custloc.DBCode = DBCode
    WHERE custloc.CustomerLocationId = CustomerLocatoinID;
    IF EXISTS (SELECT
          *
        FROM CustomerLocationItem custlocitm
        WHERE custlocitm.ItemId = ItemID
        AND custlocitm.CustomerLocationId = CustomerLocatoinID) THEN
      UPDATE CustomerLocationItem
      SET VendorPrice = VendorPrice,
          CustomerPrice = CustomerPrice,
          VendorQuantity = VendorQty,
          NestleQuantity = NestleQty
      WHERE ItemId = ItemID
      AND CustomerLocationId = CustomerLocatoinID;
    END IF;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateInvoiceWithCheckPaid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `UpdateInvoiceWithCheckPaid`(IN VendorNum nvarchar(250),
IN InvoiceNum nvarchar(50),
IN CheckNumber nvarchar(50),
IN PaidDate datetime,
IN ClientID int)
BEGIN
  /*update Batch set `Source` = 'CLOUDX' where ID in 
	(select BatchID from Invoice inv where InvoiceName like 'image%' and inv.ClientId = 1);*/

  IF EXISTS (SELECT
        'True'
      FROM Invoice inv
      WHERE InvoiceNo = InvoiceNum COLLATE utf8_unicode_ci
      AND inv.ApprovalStatusId = 5
      AND inv.ClientId = ClientID
      AND inv.VendorId = (SELECT
          v.VendorId
        FROM Vendor v
        WHERE v.VendorNo = VendorNum COLLATE utf8_unicode_ci
        AND v.ClientID = ClientID
        AND v.First_Net_Days IS NOT NULL LIMIT 1)) THEN
    SELECT
      "Found record";
    UPDATE Invoice
    SET ApprovalStatusID = 7,
        CheckNumber = CheckNumber,
        LastActionDate = PaidDate,
        LastActionBy = 'System'
    WHERE InvoiceNo = InvoiceNum COLLATE utf8_unicode_ci
    AND ApprovalStatusId = 5
    AND ClientId = ClientID
    AND VendorId = (SELECT
        v.VendorId
      FROM Vendor v
      WHERE v.VendorNo = VendorNum COLLATE utf8_unicode_ci
      AND v.ClientID = ClientID
      AND v.First_Net_Days IS NOT NULL LIMIT 1);
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateLocationItems` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `UpdateLocationItems`(IN LocationNumber nvarchar(250),
IN Description nvarchar(250),
IN CustomerPrice float,
IN ItemID int)
BEGIN
  DECLARE CustomerLocationId int;
  SELECT
    CustomerLocationId
  FROM CustomerLocation custloc
  WHERE custloc.LocationNumber LIKE CONCAT('%', LocationNumber)
  AND LocationName <> '<blank>' LIMIT 1 INTO CustomerLocationId;

  IF CustomerLocationId IS NOT NULL THEN
    IF EXISTS (SELECT
          *
        FROM CustomerLocationItem custlocitm
        WHERE custlocitm.CustomerLocationId = CustomerLocationId
        AND custlocitm.ItemId = ItemID) THEN
      UPDATE CustomerLocationItem
      SET CustomerPrice = CustomerPrice
      WHERE CustomerLocationId = CustomerLocationId
      AND ItemId = ItemID;
    ELSE
      INSERT INTO CustomerLocationItem (CustomerLocationId, ItemId, Description, CustomerPrice, DefaultQuantity, NestleQuantity, VendorPrice)
        VALUES (CustomerLocationId, ItemID, Description, CustomerPrice, 1, 1, 0);
    END IF;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateUserClientCompany` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `UpdateUserClientCompany`(IN companyId int, IN userId char(36), IN allowPaymentApproval int)
BEGIN
  UPDATE UserClientCompanies ucc
  SET AllowPaymentApproval = allowPaymentApproval
  WHERE ucc.UserId = userId
  AND ucc.ClientCompanyId = companyId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UploadQuery` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `UploadQuery`(IN `query` nvarchar(10240),
IN `time` nvarchar(240),
IN `user` nvarchar(240),
IN `foreignkey` int,
IN `invoiceid` int)
BEGIN
  INSERT INTO `QueryLog` (`query`, `time`, `user`, `foreign_key`, `invoiceid`)
    VALUES (`query`, `time`, `user`, `foreignkey`, `invoiceid`);
  SELECT
    'true' AS 'res';
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `WorkOrderCostVarianceReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `WorkOrderCostVarianceReport`(
    IN scannedDateFrom DATETIME,
    IN scannedDateTo DATETIME,
    IN serviceDescription VARCHAR(255),
    IN invoiceNumber VARCHAR(50),
    IN vendorIdArray VARCHAR(255),
    IN propertyIdArray VARCHAR(255),
    IN showVariance VARCHAR(255)
)
BEGIN
    SELECT 
        w.WODetailId,
        wo.WOId,
        i.InvoiceId,
        i.InvoiceNo,
        i.ScannedDate,
        w.ServiceDate,
        wo.EquipmentName AS 'Equipment',
        w.ResolvedReason,
        w.ResolvedDate,
        wo.WONumber,
        u.UserName AS 'ApprovedBy',
        CONCAT(g.GLCodeName, '-', g.Desccription) AS 'GLAccount',
        w.Description,
        CONCAT(v.VendorNo, '-', v.VendorName) AS VendorName,
        d.DepartmentName AS PropertyName,
        CAST(w.UnitCost AS DECIMAL(10, 2)) AS 'WoDetailUnitCost',
        CASE 
            WHEN wo.UnitCost IS NOT NULL THEN CAST(wo.UnitCost AS DECIMAL(10, 2))
            ELSE (
                SELECT 
                    CASE 
                        WHEN LEFT(wwm.WOSummary, 1) = '1' THEN 
                            CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(wwm.WOSummary, 'unitCost :', -1), ' ', 1) AS DECIMAL(10, 2))
                        ELSE 
                            CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(wwm.WOSummary, 'UnitCost:', -1), CHAR(13), 1) AS DECIMAL(10, 2))
                    END
                FROM WOToWODetailMatch wwm
                WHERE wwm.WODetailId = w.WODetailId
                LIMIT 1
            )
        END AS 'WOUnitCost',
        i.eTracClientCode,
        wwm.WOSummary,
        CASE 
            WHEN wwm.WOSummary LIKE '21%' THEN 'Auto'
            WHEN wwm.WOSummary LIKE '11%' THEN 'Auto'
            WHEN wwm.WOSummary LIKE '1 %' THEN 'Manual'
            WHEN wwm.WOSummary LIKE '2(%' THEN 'Auto'
            WHEN wwm.WOSummary LIKE '1(%' THEN 'Auto'
            WHEN wwm.WOSummary LIKE '0%' THEN 'Manual'
            ELSE ''
        END AS MatchingType
    FROM 
        Invoice AS i
        INNER JOIN WODetails AS w ON i.InvoiceId = w.InvoiceId
        INNER JOIN WOToWODetailMatch wwm ON wwm.WODetailId = w.WODetailId
        LEFT JOIN WO wo ON wo.WOId = wwm.WOId
        INNER JOIN Vendor v ON v.VendorId = i.VendorId
        INNER JOIN Department d ON d.Id = i.VendorSiteId
        INNER JOIN User u ON u.UserId = i.ApproverId
        INNER JOIN GLCode g ON g.GLCodeId = w.GLCodeId
    WHERE 
        (scannedDateFrom IS NULL OR w.ServiceDate >= scannedDateFrom)
        AND (scannedDateTo IS NULL OR w.ServiceDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
        AND (invoiceNumber IS NULL OR invoiceNumber = '' OR i.InvoiceNo COLLATE utf8mb4_general_ci = invoiceNumber COLLATE utf8mb4_general_ci)
        AND (serviceDescription IS NULL OR serviceDescription = '' OR w.Description COLLATE utf8mb4_general_ci LIKE CONCAT('%', serviceDescription COLLATE utf8mb4_general_ci, '%'))
        AND (vendorIdArray IS NULL OR vendorIdArray = '' OR FIND_IN_SET(v.VendorId COLLATE utf8mb4_general_ci, vendorIdArray COLLATE utf8mb4_general_ci) > 0)
        AND (propertyIdArray IS NULL OR propertyIdArray = '' OR FIND_IN_SET(d.Id COLLATE utf8mb4_general_ci, propertyIdArray COLLATE utf8mb4_general_ci) > 0)
        AND i.ClientId = 79
        AND i.ApprovalStatusId = 7
        AND i.InvoiceType = 'HaulerInvoice'
        AND (
            showVariance != 'variance' OR
            (
                w.UnitCost BETWEEN (
                    CASE 
                        WHEN wo.UnitCost IS NOT NULL THEN CAST(wo.UnitCost AS DECIMAL(10, 2)) * 0.9
                        ELSE (
                            SELECT 
                                CASE 
                                    WHEN LEFT(wwm.WOSummary, 1) = '1' THEN 
                                        CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(wwm.WOSummary, 'unitCost :', -1), ' ', 1) AS DECIMAL(10, 2)) * 0.9
                                    ELSE 
                                        CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(wwm.WOSummary, 'UnitCost:', -1), CHAR(13), 1) AS DECIMAL(10, 2)) * 0.9
                                END
                            FROM WOToWODetailMatch wwm
                            WHERE wwm.WODetailId = w.WODetailId
                            LIMIT 1
                        )
                    END
                ) AND (
                    CASE 
                        WHEN wo.UnitCost IS NOT NULL THEN CAST(wo.UnitCost AS DECIMAL(10, 2)) * 1.1
                        ELSE (
                            SELECT 
                                CASE 
                                    WHEN LEFT(wwm.WOSummary, 1) = '1' THEN 
                                        CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(wwm.WOSummary, 'unitCost :', -1), ' ', 1) AS DECIMAL(10, 2)) * 1.1
                                    ELSE 
                                        CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(wwm.WOSummary, 'UnitCost:', -1), CHAR(13), 1) AS DECIMAL(10, 2)) * 1.1
                                END
                            FROM WOToWODetailMatch wwm
                            WHERE wwm.WODetailId = w.WODetailId
                            LIMIT 1
                        )
                    END
                ) and   w.UnitCost <> (
                SELECT 
                    CASE 
                        WHEN LEFT(wwm.WOSummary, 1) = '1' THEN 
                            CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(wwm.WOSummary, 'unitCost :', -1), ' ', 1) AS DECIMAL(10, 2))
                        ELSE 
                            CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(wwm.WOSummary, 'UnitCost:', -1), CHAR(13), 1) AS DECIMAL(10, 2))
                    END
                FROM WOToWODetailMatch wwm
                WHERE wwm.WODetailId = w.WODetailId
                LIMIT 1
            )
                AND (wwm.WOSummary LIKE '11%' OR wwm.WOSummary LIKE '21%'  OR wwm.WOSummary LIKE '2(%' OR wwm.WOSummary LIKE '0%' OR wwm.WOSummary LIKE '1 %'  OR wwm.WOSummary LIKE '1(%')
                AND (wwm.WOSummary <> '1 null' AND wwm.WOSummary <> '1 9999999')
            )
        )
    ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `WorkOrderCostVarianceReport1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `WorkOrderCostVarianceReport1`(
    IN scannedDateFrom DATETIME,
    IN scannedDateTo DATETIME,
    IN serviceDescription VARCHAR(255),
    IN invoiceNumber VARCHAR(50),
    IN vendorIdArray VARCHAR(255),
    IN propertyIdArray VARCHAR(255),
    IN showVariance VARCHAR(255)
)
BEGIN
    SELECT 
        w.WODetailId,
        wo.WOId,
        i.InvoiceId,
        i.InvoiceNo,
        i.ScannedDate,
        w.ServiceDate,
        wo.EquipmentName AS 'Equipment',
        w.ResolvedReason,
        w.ResolvedDate,
        wo.WONumber,
        u.UserName AS 'ApprovedBy',
        CONCAT(g.GLCodeName, '-', g.Description) AS 'GLAccount',
        w.Description,
        CONCAT(v.VendorNo, '-', v.VendorName) AS VendorName,
        d.DepartmentName AS PropertyName,
        CAST(w.UnitCost AS DECIMAL(10, 2)) AS 'WoDetailUnitCost',
        CASE 
            WHEN wo.UnitCost IS NOT NULL THEN CAST(wo.UnitCost AS DECIMAL(10, 2))
            ELSE (
                SELECT CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(wwm.WOSummary, 'unitCost :', -1), ' ', 1) AS DECIMAL(10, 2))
                FROM WOToWODetailMatch wwm
                WHERE wwm.WODetailId = w.WODetailId
                LIMIT 1
            )
        END AS 'WOUnitCost',
        i.eTracClientCode,
        CASE 
            WHEN wwm.WOSummary LIKE '21%' THEN 'Auto'
            WHEN wwm.WOSummary LIKE '11%' THEN 'Auto'
            WHEN wwm.WOSummary LIKE '1 %' THEN 'Manual'
            WHEN wwm.WOSummary LIKE '2(%' THEN 'Auto'
            WHEN wwm.WOSummary LIKE '0%' THEN 'Manual'
            ELSE ''
        END AS MatchingType
    FROM 
        Invoice AS i
        INNER JOIN WODetails AS w ON i.InvoiceId = w.InvoiceId
        LEFT JOIN WOToWODetailMatch wwm ON wwm.WODetailId = w.WODetailId
        LEFT JOIN WO wo ON wo.WOId = wwm.WOId
        INNER JOIN Vendor v ON v.VendorId = i.VendorId
        INNER JOIN Department d ON d.Id = i.VendorSiteId
        INNER JOIN User u ON u.UserId = i.ApproverId
        INNER JOIN GLCode g ON g.GLCodeId = w.GLCodeId
    WHERE 
        (scannedDateFrom IS NULL OR i.ScannedDate >= scannedDateFrom)
        AND (scannedDateTo IS NULL OR i.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
        AND (invoiceNumber IS NULL OR invoiceNumber = '' OR i.InvoiceNo COLLATE utf8mb4_general_ci = invoiceNumber COLLATE utf8mb4_general_ci)
        AND (serviceDescription IS NULL OR serviceDescription = '' OR w.Description COLLATE utf8mb4_general_ci LIKE CONCAT('%', serviceDescription COLLATE utf8mb4_general_ci, '%'))
        AND (vendorIdArray IS NULL OR vendorIdArray = '' OR FIND_IN_SET(v.VendorId COLLATE utf8mb4_general_ci, vendorIdArray COLLATE utf8mb4_general_ci) > 0)
        AND (propertyIdArray IS NULL OR propertyIdArray = '' OR FIND_IN_SET(d.Id COLLATE utf8mb4_general_ci, propertyIdArray COLLATE utf8mb4_general_ci) > 0)
        AND i.ClientId = 79
        AND i.ApprovalStatusId = 7
        AND i.InvoiceType = 'HaulerInvoice'
        AND (
            showVariance != 'variance' OR
            (
                (w.UnitCost <> wo.UnitCost)    
                AND (wwm.WOSummary LIKE '11%' OR wwm.WOSummary LIKE '21%'  OR wwm.WOSummary LIKE '2(%' OR wwm.WOSummary LIKE '0%' OR wwm.WOSummary LIKE '1 %')
                AND (wwm.WOSummary <> '1 null' AND wwm.WOSummary <> '1 9999999')
            )
        )
    ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `zz_InvoicesInLimbo` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `zz_InvoicesInLimbo`(IN pForClientId int)
BEGIN	

	-- drop table zz_InvoicesInLimbo_Steven;
/*
	Create Table if not exists zz_InvoicesInLimbo_Steven (
		ClientId				int,
		InvoiceId				int,
		ApprovalStepId_Calc		int,
		UserId 					varchar(1000),
		_DateLoaded				datetime
		);
*/
	

	Insert into zz_InvoicesInLimbo_Steven (ClientId, InvoiceId)
		SELECT i.ClientId, i.InvoiceId
		FROM Invoice i
			INNER JOIN Client c ON i.ClientId = c.ClientId AND c.IsActive = 1
			INNER JOIN Vendor v ON c.ClientId = v.ClientId AND i.VendorId = v.VendorId
		WHERE i.ScannedDate >= DATE_ADD(NOW(), INTERVAL -180 DAY)
				AND i.AprovedDate IS NULL
				AND i.IsDeleted = 0
				AND (i.ArchiveReason IS NULL OR i.ArchiveReason = '')
				AND i.IsPaused = 0
				AND i.ApprovalStatusId = 3
				AND i.InvoiceType = 'INVOICE'
				AND i.ClientId <> 180
				AND NOT EXISTS (SELECT 1 FROM UserInvoiceAssignment uia  where uia.InvoiceID = i.InvoiceID)
				AND EXISTS (SELECT 1 FROM InvoiceHistory ih  where ih.InvoiceID = i.InvoiceID AND ih.Actor = 'System' AND ih.Action = 'Assignment')
				and c.ClientId = ifnull(pForClientId, c.ClientId)
				;


	Update 	zz_InvoicesInLimbo_Steven Limbo 
		inner join 	(
					Select	LastAction.*, 
							(select uiah.ToApprovalSubStepId
								from 	UserInvoiceAssignmentHistory  uiah
								where 	uiah.InvoiceId = LastAction.InvoiceId
								ORDER 	BY 1 desc
								limit 1)as LastApprovalSubStepId
					from (select distinct NewData, Action, InvoiceHistory.InvoiceId, ActionDate
								from InvoiceHistory 
									inner join 	zz_InvoicesInLimbo_Steven Limbo 	on Limbo.InvoiceId = InvoiceHistory.InvoiceId
																						and Limbo._DateLoaded is null
								where InvoiceHistory.InvoiceId = Limbo.InvoiceId
										and ActionDate = (select Max(ActionDate) 
															from InvoiceHistory 
															where InvoiceHistory.InvoiceId = Limbo.InvoiceId
																	and CurrentStatus = 'In Approval'
																	and Field = 'Approvers')
										and CurrentStatus = 'In Approval'
										and Field = 'Approvers'
										and NewData is not null) LastAction
					) LastInfo on Limbo.InvoiceId = LastInfo.InvoiceId

		set 	Limbo.ApprovalStepId_Calc = 	case 	when LastInfo.Action like '%delega%' or LastInfo.Action in ('Request', 'Notification') then LastApprovalSubStepId
														when LastInfo.Action like '%Assignment%' then 
															 (select s1.ApprovalSubStepId
																	from ApprovalSubStep s1
																		inner join ApprovalSubStep s2 on s1.ApprovalStepId = s2.ApprovalStepId
																											and s2.ApprovalSubStepId = LastApprovalSubStepId
																	order by s1.OrderNo
																	limit 1)
														ELSE (select s1.ApprovalSubStepId
																	from ApprovalSubStep s1
																		inner join ApprovalSubStep s2 on s1.ApprovalStepId = s2.ApprovalStepId
																											and s2.ApprovalSubStepId = LastApprovalSubStepId
																		where s1.OrderNo > s2.OrderNo
																	order by s1.OrderNo
																	limit 1) END,
				Limbo.UserId = (select GROUP_CONCAT(User.UserId SEPARATOR ';')
									from User 
									where User.ClientId = Limbo.ClientId
										and LastInfo.NewData like CONCAT('%', LastName, ', ', FirstName, '%')
										and User.IsActive = 1
										and User.RoleId = 1
									group by User.ClientId
								);
	
	
	insert into UserInvoiceAssignment (InvoiceId, UserId, Type, State, ApprovalSubStepId, DateCreated)			
	select 	Limbo.InvoiceId	as InvoiceId,
			User.UserId,
			0 as Type,
			1 as State,
			Limbo.ApprovalStepId_Calc,
			Now() as DateCreated
	from User
		inner join 	zz_InvoicesInLimbo_Steven Limbo 	on Limbo.ClientId = User.ClientId
															and Limbo.UserId like CONCAT('%', User.UserId, '%')
															and Limbo._DateLoaded is null
	where 	ApprovalStepId_Calc is not null and Limbo._DateLoaded is null
	order by Limbo.InvoiceId;



	Insert into InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId)
	select 	Limbo.InvoiceId	as InvoiceId,
			'System', 'Notification', now(), '', 
			GROUP_CONCAT(concat(User.LastName, ', ', User.FirstName) separator '; '),  
			'Approvers', 'In Approval', 'In Approval', '00000000-0000-0000-0000-000000000000'
	from User
		inner join 	zz_InvoicesInLimbo_Steven Limbo 	on Limbo.ClientId = User.ClientId
															and Limbo.UserId like CONCAT('%', User.UserId, '%')
															and Limbo._DateLoaded is null
	where 	ApprovalStepId_Calc is not null and Limbo._DateLoaded is null
	group by Limbo.InvoiceId
	order by Limbo.InvoiceId;



	SELECT c.CustomerName, v.VendorNo, v.VendorName, i.InvoiceNo, i.InvoiceDate, i.InvoiceTotal, i.ScannedDate, i.InvoiceId, 'Unable to auto assign'
	FROM Invoice i
			inner join zz_InvoicesInLimbo_Steven Limbo 	on Limbo.InvoiceId = i.InvoiceId
															and Limbo._DateLoaded is null
			INNER JOIN Client c 						ON i.ClientId = c.ClientId AND c.IsActive = 1
			INNER JOIN Vendor v 						ON c.ClientId = v.ClientId AND i.VendorId = v.VendorId
	where (Limbo.ApprovalStepId_Calc is null or Limbo.UserId is null) and Limbo._DateLoaded is null
	ORDER BY 1,2,3,4;

	Update zz_InvoicesInLimbo_Steven set _DateLoaded = now() where _DateLoaded is null;

	-- select * from UserInvoiceAssignment where DateCreated = '7/17/2024 3:36:15 PM' desc limit 500;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `zz_TestAllRegexExceptions` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `zz_TestAllRegexExceptions`()
ThisProc:
BEGIN
	declare Counter 	int default 0;
	DECLARE continue HANDLER FOR SQLEXCEPTION set @Error = 1;


	drop temporary table if exists zz_TestAllRegexExceptions;
	
	Create TEMPORARY TABLE zz_TestAllRegexExceptions (
		AsciiValue	int,
		Result 		varchar(100),
		TestChar  	varchar(100),
		Test  		varchar(100)
		);

 	While Counter <= 255 do
		
		set @Char = Char(Counter);
		set @TestStr = concat('Steven ', @Char, ' was here');
		call _x_StringToRegEx(@Char);
		insert into zz_TestAllRegexExceptions values (Counter, 'Failed', @Char, @TestStr);
		if Regexp_Like (@TestStr, @Char, 'mi') then 
			Update zz_TestAllRegexExceptions set Result = 'Passed' where AsciiValue = Counter;
		end if;
			

 		set Counter = Counter + 1;
 	end while;

	if exists (select * from zz_TestAllRegexExceptions where Result <> 'Passed') then 
		select * from zz_TestAllRegexExceptions where Result <> 'Passed';
	else 
		select * from zz_TestAllRegexExceptions ;
	end if;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_r_SystemReleasesCancel` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_r_SystemReleasesCancel`(IN pReleaseID int)
ThisProc:
	BEGIN

		IF EXISTS (SELECT
					1
				FROM SystemReleases
				WHERE ReleaseID = pReleaseID
				AND ReleaseDate IS NOT NULL) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This entry has already been released.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;


		UPDATE	SystemReleases
		SET 	CompletedDate 	= case when ReviewedDate is null then null else CompletedDate end,
				ReviewedDate 		= case when ReleaseDate is null then null else ReviewedDate end
		WHERE ReleaseID = pReleaseID;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_r_SystemReleasesCompleted` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_r_SystemReleasesCompleted`(IN pReleaseID int)
ThisProc:
	BEGIN

		IF EXISTS (SELECT
					1
				FROM SystemReleases
				WHERE ReleaseID = pReleaseID
				AND CompletedDate IS NOT NULL) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This entry has already been completed and is in review.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;


		UPDATE SystemReleases
		SET CompletedDate = NOW()
		WHERE ReleaseID = pReleaseID;

		set @Users = null;

		SET SESSION group_concat_max_len = 1000000;
		SELECT	GROUP_CONCAT(distinct u.UserId separator ';')
		into 	@Users
		FROM	ClientUserRoles cur
				INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
				INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
				INNER JOIN SystemFunctions sf 			ON sf.FunctionKey = crf.FunctionKey
				inner join User u 						on u.UserId = cur.UserId
		WHERE	sf.FunctionKey = 'SystemReleaseReview'
				and u.IsActive 	= 1
				and crf.Access  = 1;

		call _x_Notify(@Users, 'System Release', 'There is a new release awaiting review.', 'SystemRelease', null, null, null);

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_r_SystemReleasesDelete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_r_SystemReleasesDelete`(IN pReleaseID int)
ThisProc:
	BEGIN

		IF EXISTS (SELECT
					1
				FROM SystemReleases
				WHERE ReleaseID = pReleaseID
				AND CompletedDate IS NOT NULL) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This entry can only be deleted when it is open.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;


		DELETE
			FROM SystemReleases
		WHERE ReleaseID = pReleaseID;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_r_SystemReleasesRelease` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_r_SystemReleasesRelease`(IN pReleaseID int, IN pDate date)
ThisProc:
	BEGIN	
-- noformat

		IF EXISTS (	SELECT	1
					FROM	SystemReleases
					WHERE	ReleaseID = pReleaseID
					AND		ReviewedDate IS NULL) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This entry has already not been reviewed.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;

		IF EXISTS (SELECT	1
					FROM 	SystemReleases
					WHERE 	ReleaseID = pReleaseID
					AND 	SentDate IS NOT NULL) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This entry has already been approved and the emails sent.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;


		IF pDate IS NULL OR pDate <= date(NOW())  THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The release date is required and must be in the future.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;

		UPDATE SystemReleases
		SET ReleaseDate = pDate
		WHERE ReleaseID = pReleaseID;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_r_SystemReleasesReviewed` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_r_SystemReleasesReviewed`(IN pReleaseID int)
ThisProc:
	BEGIN

		IF EXISTS (SELECT
					1
				FROM SystemReleases
				WHERE ReleaseID = pReleaseID
				AND ReviewedDate IS NOT NULL) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This entry has already been reviewed.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;


		UPDATE SystemReleases
		SET ReviewedDate = NOW()
		WHERE ReleaseID = pReleaseID;


		SET SESSION group_concat_max_len = 1000000;
		SELECT	GROUP_CONCAT(distinct u.UserId separator ';')
		into 	@Users
		FROM	ClientUserRoles cur
				INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
				INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
				INNER JOIN SystemFunctions sf 			ON sf.FunctionKey = crf.FunctionKey
				inner join User u 						on u.UserId = cur.UserId
		WHERE	sf.FunctionKey = 'SystemReleaseRelease'
				and u.IsActive 	= 1
				and crf.Access  = 1;

		call _x_Notify(@Users, 'System Release', 'There is a new release that has been reviewed.', 'SystemRelease', null, null, null);

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_r_SystemReleasesSearch` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_r_SystemReleasesSearch`(IN pReleaseID int,
IN pOption varchar(20))
ThisProc:
	BEGIN		

-- noformat
		IF pReleaseID IS NOT NULL THEN
			SELECT	sr.*
			FROM	SystemReleases sr
			WHERE 	sr.ReleaseID = pReleaseID;

			SELECT
					c.CustomerName,
					c.ClientId
			FROM Client c
				INNER JOIN SystemReleasesClient src		ON src.ClientId = c.ClientId
			WHERE src.ReleaseID = pReleaseID
			ORDER BY 1;
			LEAVE ThisProc;
		END IF;

		IF pOption = 'ReleaseNotes' THEN
			SELECT	ReleaseID,
					ReleaseDate,
					ReleaseNotes,
					InternalNotes,
					JiraReference
			FROM SystemReleases
			WHERE	ReleaseDate IS NOT NULL
					-- and ReleaseDate <= NOW()
					-- AND SentDate is not NULL
			ORDER 	BY 1 DESC;
			LEAVE ThisProc;
		END IF;

		SELECT	*
		FROM	SystemReleases
		WHERE (pOption = 'Open'				AND CompletedDate IS NULL)
				OR (pOption = 'ToReview'	AND CompletedDate IS NOT NULL	AND ReviewedDate IS NULL)
				OR (pOption = 'ForRelease'	AND ReviewedDate IS NOT NULL	AND ReleaseDate IS NULL)
				OR (pOption = 'History'		AND ReleaseDate IS NOT NULL)
		ORDER BY ReleaseDate desc, ReviewedDate desc;


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_r_SystemReleasesUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_r_SystemReleasesUpdate`(INOUT pReleaseID int,
IN pReleaseNotes mediumtext,
IN pInternalNotes mediumtext,
IN pJiraReference varchar(20))
ThisProc:
	BEGIN

		IF EXISTS (SELECT
					1
				FROM SystemReleases
				WHERE ReleaseID = pReleaseID
				AND SentDate IS NOT NULL) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This entry has already been approved and the emails sent.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;

		IF pReleaseID IS NULL THEN
			INSERT INTO SystemReleases (ReleaseNotes, InternalNotes, JiraReference, UpdatedDate)
				VALUES (pReleaseNotes, pInternalNotes, pJiraReference, NOW());
			SET pReleaseID = LAST_INSERT_ID();
		ELSE
			UPDATE SystemReleases
			SET ReleaseNotes = pReleaseNotes,
				InternalNotes = pInternalNotes,
				JiraReference = pJiraReference,
				UpdatedDate = NOW()
			WHERE ReleaseID = pReleaseID;
		END IF;


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_ConsoleTemplateClientDetails` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_ConsoleTemplateClientDetails`(IN pClientId int)
BEGIN
	SELECT Client.ClientId, Client.CustomerName, Client.IsActive  FROM Client WHERE Client.ClientId = pClientId;
	
	SELECT cc.ClientId, cc.CompanyCode, cc.Id, cc.Description, cc.AllowPOAutoApproval  FROM ClientCompany cc WHERE cc.ClientId = pClientId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_ConsoleTemplateClientList` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_ConsoleTemplateClientList`()
BEGIN
	SELECT Client.ClientId 
	FROM Client WHERE Client.ClientId mod 4 = 1 ORDER BY Client.ClientId DESC ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_ConsoleTemplateFakeUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_ConsoleTemplateFakeUpdate`(
	INOUT pId INT,
	IN pName VARCHAR(55)
)
BEGIN
	DECLARE vModRes INT;
	SET vModRes= pId MOD 2;
	SET pId = pId*(vModRes+1);

	IF(vModRes = 0) THEN -- make it fail on even numbers
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This number is even', MYSQL_ERRNO = 1;
	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_CustomerEmailWeeklyReport_GetEmails` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_CustomerEmailWeeklyReport_GetEmails`(IN pClientId int, IN pReportType varchar(10))
ThisProc:
	BEGIN
		DECLARE eof int DEFAULT 0;
		DECLARE varEmailAddress varchar(100);
		DECLARE curAddresses CURSOR FOR
		SELECT
			ecc.EmailAddress
		FROM APSHTML.EmailCaptureClients ecc
		WHERE ecc.ClientId = pClientId
		AND IFNULL(ecc.EmailAddress, '') <> '';
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET eof = 1;

		SET @Now = CURDATE();
		SET @Sunday = DATE_SUB(@Now, INTERVAL DAYOFWEEK(@Now) - 1 DAY);
		SET @LastMonday = DATE_SUB(@Sunday, INTERVAL 6 DAY);

		SET @WhereClause = NULL;
		OPEN curAddresses;
	BuildWhereClause:
		LOOP
			FETCH curAddresses INTO varEmailAddress;
			IF eof = 1 THEN
				LEAVE BuildWhereClause;
			END IF;
			SET @WhereClause = CONCAT(IFNULL(CONCAT(@WhereClause, ' or ', ''), ''), 'Data.Receiver LIKE ''%', IFNULL(varEmailAddress, ''), '%''');
		END LOOP;
		CLOSE curAddresses;
		IF @WhereClause IS NULL THEN
			SET @WhereClause = '(1=2)';
		END IF;
		SET @WhereClause = CONCAT('(', @WhereClause, ')', CHAR(13), CHAR(10), 'and date(Data.date) BETWEEN ? AND ?');

		DROP TEMPORARY TABLE IF EXISTS Results;
		CREATE TEMPORARY TABLE IF NOT EXISTS Results (
			EmailBox varchar(500),
			EmailFrom varchar(500),
			EmailSubject varchar(500),
			EmailDate datetime,
			EmailAttachments varchar(2000),
			EmailAttachmentCount int
		);
		SET @Sql = 'insert into Results (EmailBox, EmailFrom, EmailSubject, EmailDate, EmailAttachments, EmailAttachmentCount)';
		SET @Sql = CONCAT(@Sql, CHAR(13), CHAR(10), '', 'Select');
		SET @Sql = CONCAT(@Sql, CHAR(13), CHAR(10), '	', 'left(Data.Receiver, Locate(''@'', Data.Receiver)-1),');
		SET @Sql = CONCAT(@Sql, CHAR(13), CHAR(10), '	', 'Data.Sender,');
		SET @Sql = CONCAT(@Sql, CHAR(13), CHAR(10), '	', 'Data.Subject,');
		SET @Sql = CONCAT(@Sql, CHAR(13), CHAR(10), '	', 'Data.Date,');
		SET @Sql = CONCAT(@Sql, CHAR(13), CHAR(10), '	', 'Data.Attachments,');
		SET @Sql = CONCAT(@Sql, CHAR(13), CHAR(10), '	', 'Data.NumberOfAttachments');
		SET @Sql = CONCAT(@Sql, CHAR(13), CHAR(10), '', 'FROM APSHTML.EmailCaptureLog Data');
		SET @Sql = CONCAT(@Sql, CHAR(13), CHAR(10), 'Where ', @WhereClause);

		PREPARE dynamic_statement FROM @Sql;
		EXECUTE dynamic_statement USING @LastMonday, @Sunday;
		DEALLOCATE PREPARE dynamic_statement;
		IF IFNULL(pReportType, 'Detail') = 'Detail' THEN
			SELECT
				r.EmailBox,
				r.EmailDate,
				r.EmailFrom,
				r.EmailSubject,
				EmailAttachments
			FROM Results r
			ORDER BY r.EmailBox, r.EmailDate;

		ELSE
			SELECT
				EmailBox,
				DATE(EmailDate) AS EmailDate,
				COUNT(*) AS EmailsReceived,
				SUM(EmailAttachmentCount) AS EmailAttachments,
				SUM(CHAR_LENGTH(EmailAttachments) - CHAR_LENGTH(REPLACE(EmailAttachments, '.pdf', SPACE(LENGTH('.pdf') - 1)))) AS EmailPDFs
			FROM Results
			GROUP BY EmailBox,
					 DATE(EmailDate)
			ORDER BY 1;
		END IF;
		DROP TEMPORARY TABLE IF EXISTS Results;
	END ThisProc ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_CustomerEmailWeeklyReport_GetSubsubscribers` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_CustomerEmailWeeklyReport_GetSubsubscribers`(IN `pClientId` int,
IN `pReportType` varchar(10))
ThisProc:
	BEGIN
		SELECT
			Data.*,
			CASE WHEN NOT pReportType IS NULL THEN pReportType WHEN config.Argument1 IS NULL THEN 'Detail' WHEN config.Argument1 LIKE 'Summary' THEN 'Summary' ELSE 'Detail' END AS ReportType
		FROM (SELECT
				c.CustomerName,
				c.Email,
				c.ClientId
			FROM APSHTML.Client c
			WHERE (
			c.Email <> ''
			AND NOT (
			c.Email LIKE '%cloudxdpo.com%'
			OR c.Email LIKE '%cloudx.com%'
			OR c.Email LIKE '%apdropbox.com%'
			)
			)) Data
			INNER JOIN (SELECT
					ClientId,
					MAX(InvoiceId) AS InvoiceId
				FROM APSHTML.Invoice i
				GROUP BY ClientId) LatestInvoice
				ON LatestInvoice.ClientId = Data.ClientId
			INNER JOIN APSHTML.Invoice i
				ON i.InvoiceId = LatestInvoice.InvoiceId
			LEFT JOIN APSHTML.ClientSpecificConfig config
				ON config.ClientId = Data.ClientId
				AND config.ClientSpecificConfigType = 990
		WHERE i.ScannedDate >= DATE_SUB(UTC_TIMESTAMP(), INTERVAL 45 DAY)
		AND IFNULL(config.Argument1, '') <> 'NONE'
		AND IFNULL(pClientId, Data.ClientId) = Data.ClientId
		ORDER BY 1;

	END ThisProc ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_EmailGetMessages` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_EmailGetMessages`()
ThisProc:
	BEGIN	
-- noformat


-- 		select count(*)
-- 		-- delete Data
-- 			from EmailAttachments Data
-- 				inner join Email on Email.Id = Data.EmailId  
-- 			where Email.SentDate < date_Sub(UTC_TIMESTAMP(), interval 3 month)
-- 					or (SentDate is null and CreatedDate < date_Sub(UTC_TIMESTAMP(), interval 3 month))
-- 					or Email.SentDate > date_add(UTC_TIMESTAMP(), interval 1 day);
-- 
-- 		select count(*)
-- 		-- delete Data
-- 			from EmailRecipients Data
-- 				inner join Email on Email.Id = Data.EmailId  
-- 			where Email.SentDate < date_Sub(UTC_TIMESTAMP(), interval 3 month)
-- 					or (SentDate is null and CreatedDate < date_Sub(UTC_TIMESTAMP(), interval 3 month))
-- 					or Email.SentDate > date_add(UTC_TIMESTAMP(), interval 1 day);
-- 
-- 		select count(*)
-- 		-- Delete 
-- 			from Email 
-- 			where SentDate < date_Sub(UTC_TIMESTAMP(), interval 3 month)
-- 					or (SentDate is null and CreatedDate < date_Sub(UTC_TIMESTAMP(), interval 3 month))
-- 					or Email.SentDate > date_add(UTC_TIMESTAMP(), interval 1 day);

		delete Data
			from EmailAttachments Data
				inner join Email on Email.Id = Data.EmailId  
			where Email.SentDate < date_Sub(UTC_TIMESTAMP(), interval 3 month);

		delete Data
			from EmailRecipients Data
				inner join Email on Email.Id = Data.EmailId  
			where Email.SentDate < date_Sub(UTC_TIMESTAMP(), interval 3 month);

		delete Data
			from _x_Email Data
				inner join Email on Email.Id = Data.Id  
			where Email.SentDate < date_Sub(UTC_TIMESTAMP(), interval 3 month);

		Delete from Email 
			where SentDate < date_Sub(UTC_TIMESTAMP(), interval 3 month);

		set @Now = UTC_TIMESTAMP();

		select 	c.CustomerName, 
				case when c.IsActive = 1 then
						ifnull((select		GROUP_CONCAT(distinct concat(ifnull(nullif(er.RecipientName, ''), ifnull(CONCAT(rtrim(u.FirstName), ' ', rtrim(u.LastName)), '')), ' <', ifnull(er.EmailAddress, u.Email), '>') SEPARATOR ';')
							from 	EmailRecipients er
									left join User u 	on u.UserId = er.UserId
							where 	er.EmailId	 = e.Id
									and (nullif(er.EmailAddress, '') is not null or nullif(u.Email, '') is not null)
									and er.RecipientType = 1), '**No receipients**') 
						else '**Do not send, client inactive**' end as EmailTo,
				(select		GROUP_CONCAT(distinct concat(ifnull(nullif(er.RecipientName, ''), ifnull(CONCAT(rtrim(u.FirstName), ' ', rtrim(u.LastName)), '')), ' <', ifnull(er.EmailAddress, u.Email), '>') SEPARATOR ';')
					from 	EmailRecipients er
							left join User u 	on u.UserId = er.UserId
					where 	er.EmailId	 = e.Id
							and (nullif(er.EmailAddress, '') is not null or nullif(u.Email, '') is not null)
							and er.RecipientType = 2) as EmailCC,
				(select		GROUP_CONCAT(distinct concat(ifnull(nullif(er.RecipientName, ''), ifnull(CONCAT(rtrim(u.FirstName), ' ', rtrim(u.LastName)), '')), ' <', ifnull(er.EmailAddress, u.Email), '>') SEPARATOR ';')
					from 	EmailRecipients er
							left join User u 	on u.UserId = er.UserId
					where 	er.EmailId	 = e.Id
							and (nullif(er.EmailAddress, '') is not null or nullif(u.Email, '') is not null)
							and er.RecipientType = 3) as EmailBCC,
				e.Subject, 
				e.Body, 
				(select count(*) from EmailAttachments ea where ea.EmailId = e.Id) as TotalAttachments,
				e.Id
		from 	Email e
				inner join 	Client c 		on c.ClientId = e.ClientId				
				left join 	_x_Email xe 		on xe.Id = e.Id
		where 	e.SentDate is NULL
				and (
					ifnull(xe.RetryDate, ifnull(e.SendAfter, @now)) <= @Now	
					and ifnull(xe.RetryCount, 0) <= 3
					)
		order	by c.CustomerName;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_EmailSetMessageResult` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_EmailSetMessageResult`(pEmailId char(36), pResult varchar(250))
ThisProc:
	BEGIN	
-- noformat

	if pResult is null THEN	
		Update	Email set SentDate = UTC_TIMESTAMP()		where Id = pEmailId;
		delete	from _x_Email 								where Id = pEmailId;
		Leave ThisProc;
	end if;

	set @RetryDate = date_add(UTC_TIMESTAMP(), interval 15 MINUTE);

	if not exists (select 1 from _x_Email where Id = pEmailId) then
		insert into _x_Email (Id, RetryDate, RetryCount, ErrorMessage)
			values (pEmailId, @RetryDate, 1, pResult);
		Leave ThisProc;
	end if;

	

	if (select RetryCount from _x_Email where Id = pEmailId) > 3 THEN
		set @Body = concat('EmailId: ', pEmailId);
		set @Body = concat(char(13), char(10), 'Result: ', pResult);
		Call _x_Notify(null, 'Email issue', @Body, 'Emailer', null, null, null);
		Update Email 		set SentDate = UTC_TIMESTAMP() 									where Id = pEmailId;
	else
		Update _x_Email 	Set RetryDate = @RetryDate, RetryCount = RetryCount + 1 		where Id = pEmailId;
	end if;


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_ExportApprovedInvoices_ClientSummary` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_ExportApprovedInvoices_ClientSummary`(in pClientId int)
ThisProc:BEGIN

	SET SESSION group_concat_max_len = 1000000;

	if exists (
				select	1
				from 	_x_ClientParameters 
				where 	ClientId 		= pClientId
						and ParamKey 	= 'ExportApprovedInvoicesAutomatically'		
						and ParamValue 	= 'Yes'
				) THEN
		
		Update ExportList set DateCreated = now() where ClientId = pClientId and DateCreated is null;
		Leave ThisProc;
	end if;

	drop TEMPORARY table if exists myData;
	CREATE TEMPORARY TABLE IF NOT EXISTS myData AS (
		SELECT
				Vendor.VendorNo, 
				Vendor.VendorName,
				IFNULL(Invoice.InvoiceNo, '') 										AS InvoiceNo,
				date(Invoice.InvoiceDate)											AS InvoiceDate,
				InvoiceType,
				ifnull(Invoice.PONUmber, '')										as PONumber,
				Invoice.InvoiceTotal,
				Invoice.InvoiceId
		FROM	Invoice
				inner join ExportList			on ExportList.InvoiceId = Invoice.InvoiceId
													and ExportList.ClientId = pClientId
													and ExportList.DateCreated is null
				LEFT JOIN Vendor				ON Vendor.VendorId = Invoice.VendorId			
		where 	Invoice.ClientId = pClientId
		);

	set @To 		= Null;
	set @CC 		= null;
	set @Subject 	= 'APSmart Export Approved Invoices';
	set @Body 		= null;
	
	select 	User.UserId, User.Email, AdditionalUserIds, isNotifyAll
	into 	@UserId, @To, @AdditionalUserIds, @isNotifyAll
	from 	ExportProcess 	
			inner join User on User.UserId = ExportProcess.UserId 
								and User.ClientId = pClientId
	where 	ExportProcess.ClientId = pClientId 
			and CompletedDate is null;

	select 	Concat('A total of ', count(*), ' invoices for sum of ', sum(InvoiceTotal), ' have been exported and prepared to be picked up and integrated.  See the attached summary file.') 
	into 	@Body
	from 	myData;

	if @isNotifyAll = 1	then
		select	GROUP_CONCAT(distinct u.Email SEPARATOR ';')
		into 	@CC
		from	User u
		where 	ClientId = pClientId
				and u.IsActive = 1
				and u.IsCloudxUser = 0
				and u.UserId <> @UserId
				and u.Email is not null
				and exists (SELECT	cr.*
							FROM	ClientUserRoles cur
									INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
							WHERE	cr.isAdmin	= 1
									and cr.isInternal = 0
									and cr.ClientId = pClientId
									AND cur.UserId	= u.UserId);
	else
		select	GROUP_CONCAT(Distinct u.Email SEPARATOR ';')
		into 	@CC
		from	User u
		where 	ClientId = pClientId
				and u.IsActive = 1
				and u.IsCloudxUser = 0
				and u.Email is not null
				and @AdditionalUserIds like u.UserId;
	end if;	
	

	set @EmailSend = 1;
	if Not exists (select 1 from myData limit 1) THEN
		set @EmailSend = 0;
	end if;
	

	select	@EmailSend as EmailSend, @To as EmailTo, @CC as EmailCC, @Subject as EmailSubject, @Body as EmailBody;


	select 	VendorNo, VendorName, InvoiceNo, InvoiceDate, InvoiceType, PONumber, InvoiceTotal
	from 	myData
	order	by 1,2,3;

 	-- Only update those invoices that were selected
	Update	ExportList 		
			inner join myData 	on myData.InvoiceId = ExportList.InvoiceId
	set		DateCreated 	= now() 
	where	ExportList.ClientId = pClientId 
			and ExportList.DateCreated is null;
	Update ExportProcess 	set CompletedDate	= now() where ClientId = pClientId and CompletedDate is null;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_ExportApprovedInvoices_GetClients` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_ExportApprovedInvoices_GetClients`()
ThisProc:BEGIN

-- noformat
	SELECT	Client.ClientId,
	  		Client.CustomerName,
			count(*)				as InvoiceCount
	from	Invoice 
			inner join Client							on Client.ClientId 			= Invoice.ClientId
			inner join _x_ClientParameters xcp 			on xcp.ClientId 			= Client.ClientId
															and xcp.ParamKey 		= 'ExportApprovedInvoices'
															and xcp.ParamValue 		= 'Yes'
			inner join _x_ClientParameters Automatic 	on Automatic.ClientId 		= Client.ClientId
															and Automatic.ParamKey 	= 'ExportApprovedInvoicesAutomatically'
			left  join ExportProcess					on ExportProcess.ClientId	= Client.ClientId
															and ExportProcess.CompletedDate is null
	WHERE	Invoice.IsDeleted 				= FALSE
			AND Invoice.IsPaused 			= FALSE
			AND Invoice.ApprovalStatusId 	= 4
			and Invoice.InvoiceType 		<> 'Archive'
			and (
					Automatic.ParamValue = 'Yes'
					or (Automatic.ParamValue = 'No' and ExportProcess.ClientId is not null)
				)
	group 	by 
			Client.ClientId,
	  		Client.CustomerName
	having 	count(*) > 0;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_ExportApprovedInvoices_GetInvoice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_ExportApprovedInvoices_GetInvoice`(in pClientId int, in pInvoiceId int)
ThisProc:BEGIN

-- noformat
	set @isPOInvoice = 0;
	select 	IsPOInvoice
	into 	@isPOInvoice
	from	Invoice
	WHERE	Invoice.InvoiceId  				= pInvoiceId
			and Invoice.ClientId  			= pClientId;



	SELECT	VendorNo, Invoice.*
	from	Invoice 
			inner join Vendor					on Vendor.VendorId 		= Invoice.VendorId
													and Vendor.ClientId = Invoice.ClientId
	WHERE	Invoice.InvoiceId  				= pInvoiceId
			and Invoice.ClientId  			= pClientId;

	if @isPOInvoice = 1 THEN
		select	*
		from 	LineItemDetail 
		where 	InvoiceId = pInvoiceId;
	else
		select	ApprovalHistory.*,
				g.GLCodeName,
				c.CustomerNo
		FROM	ApprovalHistory
				inner join GLCode g		on g.GLCodeId = ApprovalHistory.GLCodeId
				left join Customer c 	on c.CustomerId = ApprovalHistory.CustomerId
		where 	InvoiceId = pInvoiceId;
	end if;
	
	/*
	call _xc_ExportApprovedInvoices_GetInvoice(1, 663081276);
	call _xc_ExportApprovedInvoices_GetInvoice(1, 662654944);
	*/

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_ExportApprovedInvoices_GetInvoices` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_ExportApprovedInvoices_GetInvoices`(in pClientId int, in pisPOInvoice tinyint)
ThisProc:BEGIN

-- noformat
	set @Type = null;
	if pisPOInvoice = 0 THEN
		set @Type = 'NonPO';

					select 	'ExportApprovedInvoicesFormat'			as ParamKey,		'XML'							as ParamValue
		union all	select 	'ExportApprovedInvoicesOutputFolder',						(select ClientOutBoundFTP from Client where ClientId = pClientId)
		union all	select 	'ExportApprovedInvoicesOutputFilename',						'NOPO_Output_{0:yyyyMMddHHmmss}_{1}';

	else
		set @Type = 'PO';

					select 	'ExportApprovedInvoicesFormat'			as ParamKey,		'CSV'							as ParamValue
		union all	select 	'ExportApprovedInvoicesOutputFolder',						(select ClientOutBoundFTP from Client where ClientId = pClientId)
		union all	select 	'ExportApprovedInvoicesOutputFilename',						'PO_Output_{0:yyyyMMddHHmmss}_{1}';


	end if;



	SELECT	Invoice.CompanyCode, Vendor.VendorNo, Vendor.VendorName, InvoiceId
	from	Invoice 
			inner join Vendor					on Vendor.VendorId 		= Invoice.VendorId
													and Vendor.ClientId = Invoice.ClientId
	WHERE	Invoice.ClientId  						= pClientId
			and Invoice.IsDeleted 					= FALSE
			AND Invoice.IsPaused 					= FALSE
			AND Invoice.ApprovalStatusId 			= 4
			and Invoice.InvoiceType 				= 'Invoice'
			and ifnull(Invoice.isPOInvoice, 0) 		= pisPOInvoice
	order	by 1, 2, 3;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_ExportApprovedInvoices_InvoiceResult` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_ExportApprovedInvoices_InvoiceResult`(in pClientId int, in pInvoiceId int, in pOutputFileName varchar(250), in pMessage mediumtext)
ThisProc:BEGIN

	set pMessage = nullif(pMessage, '');

	if pMessage is not null THEN
		call _x_InvoicePause(pInvoiceId, pClientId, null, pMessage, 1);
	else
		call _x_InvoiceUpdateDataChanges(pInvoiceId, pClientId, null, 'Before');
		Update Invoice set 
			ApprovalStatusId	= 5,
			AcceptedDate		= UTC_TIMESTAMP(),
			LastActionBy		= 'System',
			LastActionDate		= UTC_TIMESTAMP()
			where InvoiceId		= pInvoiceId
					and ClientId = pClientId;
		call _x_InvoiceUpdateDataChanges(pInvoiceId, pClientId, null, 'After');

		insert into ExportList (ClientId, InvoiceId, OutPutFileName, DateCreated)
			Values (pClientId, pInvoiceId, pOutputFileName, null);

	end if;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_Payment_Completed` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_Payment_Completed`(IN pInvoiceIds text,
IN pPaymentId varchar(100),
IN pPaymentNumber varchar(100),
IN pPaymentError varchar(1000))
ThisProc:
BEGIN
  DROP TABLE IF EXISTS repayTempInvoices;
  CREATE TEMPORARY TABLE repayTempInvoices AS
    SELECT * FROM
    JSON_TABLE(
            CONCAT('[', pInvoiceIds, ']'),
            "$[*]"
            COLUMNS(
                InvoiceId int PATH "$"
                )
        ) as InvIds;

  if(pPaymentError IS not NULL) then
    -- Reset Invoice
    Update Invoice 
    set ApprovalStatusId =5, UserField5 = null, UserField6 = null, UserField7 =null, UserField8 = null, UserField9 = null, UserField10 = null, 
    LastActionBy = 'System', LastActionDate = UTC_TIMESTAMP(), IsPaused =1
    where InvoiceId  in (select InvoiceId from repayTempInvoices);

    -- Delete from payment status
    DELETE from PaymentStatus where InvoiceId in (select InvoiceId from repayTempInvoices);

    INSERT into PausedInvoice (InvoiceId, PauseBy, PausedDate, Comment)
    select InvoiceId, 'System', UTC_TIMESTAMP(), pPaymentError from repayTempInvoices;
  
    INSERT into InvoiceHistory (InvoiceId, Actor, Action, ActionDate, NewData, Field, InitialStatus, CurrentStatus)
    select InvoiceId , 'System', 'Pause', UTC_TIMESTAMP(), CONCAT('Repay- ', pPaymentError), 'IsPaused', 'Payment Approved', 'Accepted' from repayTempInvoices;
    LEAVE ThisProc;

  end if;

  if (pPaymentNumber is not null and pPaymentId is not null) then

    Update Invoice 
    set UserField5 = pPaymentNumber, UserField6 = pPaymentId, LastActionBy = 'System', LastActionDate = UTC_TIMESTAMP()
    where InvoiceId  in (select InvoiceId from repayTempInvoices);

    -- Save Payment Detail in _x_PaymentStatus
    INSERT INTO _x_PaymentStatus (Id, PaymentDate, PaymentAmount, PaymentProvider, PaymentNumber, PaymentExternalId) 
      SELECT Id, UTC_TIMESTAMP(), IFNULL(DiscountAmount, GrossAmount), 'REPAY', i.UserField5, i.UserField6  from PaymentStatus ps
      INNER JOIN Invoice i on i.InvoiceId = ps.InvoiceId
      where ps.InvoiceId  in (select InvoiceId from repayTempInvoices)
    ON DUPLICATE KEY UPDATE    
    PaymentDate=UTC_TIMESTAMP(), PaymentProvider = 'REPAY', PaymentNumber = pPaymentNumber, PaymentExternalId = pPaymentId;

    INSERT into InvoiceHistory (InvoiceId, Actor, Action, ActionDate, Field, InitialStatus, CurrentStatus)
    select InvoiceId , 'System', 'Repay Payment Posting', UTC_TIMESTAMP(),'Invoice Update', 'Payment Approved', 'Payment Approved' from repayTempInvoices;

  end if;
   
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_Payment_FakeError` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_Payment_FakeError`(
-- noformat 
	IN `pInvoiceIds` 	text,
	IN `pFakeError` 	text)
ThisProc:BEGIN

 DROP TABLE IF EXISTS paymentTempInvoices;
  CREATE TEMPORARY TABLE paymentTempInvoices AS
    SELECT * FROM
    JSON_TABLE(
            CONCAT('[', pInvoiceIds, ']'),
            "$[*]"
            COLUMNS(
                InvoiceId int PATH "$"
                )
        ) as InvIds;

	Update Invoice 
  set isPaused = 1
  where InvoiceId  in (select InvoiceId from paymentTempInvoices);


  INSERT into PausedInvoice (InvoiceId, PauseBy, PausedDate, Comment)
  select InvoiceId, 'System', UTC_TIMESTAMP(), pFakeError from paymentTempInvoices;

  INSERT into InvoiceHistory (InvoiceId, Actor, Action, ActionDate, NewData, Field)
  select InvoiceId , 'System', 'Pause', UTC_TIMESTAMP(), CONCAT('Payment Process - ', pFakeError), 'IsPaused' from paymentTempInvoices;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_Payment_GetClients` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_Payment_GetClients`()
BEGIN
  /*Procedure Used in the console app for payment processing.*/
  SELECT
    Client.ClientId,
    Client.CustomerName,
    ClientCompany.CompanyCode,
    Invoice.InvoiceId,
    PaymentStatus.Id,
    PaymentStatus.receivedDate,
    ClientCompany.Id AS CompanyId,
    _x_ClientCompany.PaymentProvider AS Provider, -- ClientCompany.UserField9 as Provider,
    _x_ClientCompany.PaymentCustomerCode AS CustomerCode, -- ClientCompany.UserField9 as Provider,
    NULL AS ProviderField1,
    NULL AS ProviderField2,
    NULL AS ProviderField3,
    NULL AS ProviderField4,
    NULL AS ClientEmail
	  -- case when DATABASE() = 'APSHTML' then 1 else 0 end 	as isProduction
  FROM PaymentStatus
    JOIN Invoice
      ON Invoice.InvoiceId = PaymentStatus.InvoiceId
    JOIN Client
      ON Client.ClientId = Invoice.ClientId
    JOIN ClientCompany
      ON Invoice.CompanyCode = ClientCompany.CompanyCode
	inner join _x_ClientCompany on _x_ClientCompany.Id = ClientCompany.ID 
  WHERE Invoice.IsDeleted = 0
  AND Invoice.IsPaused = 0
  AND Invoice.ApprovalStatusId = 12
  AND ClientCompany.ClientId = Invoice.ClientId
  -- AND (Invoice.UserField5 is NULL or  Invoice.UserField5 = '') -- Get only approved but not posted to Repay 
  AND ClientCompany.UserField1 IS NOT NULL -- This would hold customer id	
  AND Client.ClientId = 137 -- This is for test 
  GROUP BY CompanyId;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_Payment_GetClientsForStatusUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_Payment_GetClientsForStatusUpdate`()
BEGIN
  /*Procedure Used in the console app for payment processing.*/
  SELECT
    Client.ClientId,
    Client.CustomerName,
    ClientCompany.CompanyCode,
    Invoice.InvoiceId,
    PaymentStatus.Id,
    PaymentStatus.receivedDate,
    ClientCompany.Id AS CompanyId,
    'REPAY' AS Provider, -- ClientCompany.UserField9
    ClientCompany.UserField1 AS ProviderField1,
    NULL AS ClientEmail
FROM PaymentStatus
    JOIN Invoice
      ON Invoice.InvoiceId = PaymentStatus.InvoiceId
    JOIN Client
      ON Client.ClientId = Invoice.ClientId
    JOIN ClientCompany
      ON Invoice.CompanyCode = ClientCompany.CompanyCode
  WHERE Invoice.IsDeleted = 0
  AND Invoice.ApprovalStatusId = 12
  AND ClientCompany.ClientId = Invoice.ClientId
  AND Invoice.UserField5 IS NOT NULL -- The payment must already been posted to Repay
  AND Invoice.UserField6 IS NOT NULL -- The payment must already been posted to Repay

  AND (Invoice.UserField7 is null or Invoice.UserField7 <> 'Paid')
  AND Client.ClientId = 137 -- This is for test 
  GROUP BY CompanyId;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_Payment_GetInvoices` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_Payment_GetInvoices`(IN `pClientId` int,
IN pCompanyCode varchar(50))
BEGIN
  /*Procedure Used in the console app for payment processing.*/
  SELECT
    Invoice.InvoiceId,
    Invoice.ClientId,
    Invoice.VendorId,
    Invoice.InvoiceNo,
    Invoice.InvoiceDate,
    Invoice.UserField1,
    Invoice.UserField6 as PaymentId, -- Payment Id
    ClientCompany.CompanyCode,
    ClientCompany.Id AS CompanyId,
    Vendor.VendorNo,
    Vendor.VendorName,
    Vendor.ExternalId AS VendorExternalId,
    PaymentStatus.GrossAmount AS InvoiceTotal,
    PaymentStatus.ReceivedDate,
    PaymentStatus.TransactionIdentifier,
    PaymentStatus.Id AS PaymentStatusId
  FROM PaymentStatus
    JOIN Invoice
      ON PaymentStatus.InvoiceId = Invoice.InvoiceId
    JOIN Vendor
      ON Vendor.VendorId = Invoice.VendorId
    JOIN ClientCompany
      ON Invoice.CompanyCode = ClientCompany.CompanyCode
  WHERE Invoice.IsDeleted = 0
  AND Invoice.IsPaused = 0
  AND Invoice.ApprovalStatusId = 12
  AND (Invoice.UserField5 is NULL or  Invoice.UserField5 = '')  -- Get only approved but not posted to Repay 
  AND ClientCompany.UserField1 IS NOT NULL -- This would hold customer id	
  AND ClientCompany.ClientId = pClientId
  AND Invoice.ClientId = pClientId
  AND Invoice.CompanyCode = pCompanyCode
  AND Invoice.ClientId = 137; -- This is for test 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_Payment_GetStatusFromProvider` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_Payment_GetStatusFromProvider`(IN `pClientId` int,
IN pCompanyCode varchar(50))
BEGIN
  /*Procedure Used in the console app for payment processing.*/
  SELECT
    Invoice.InvoiceId,
    Invoice.ClientId,
    Invoice.VendorId,
    Invoice.InvoiceNo,
    Invoice.InvoiceDate,
    Invoice.UserField1,
    Invoice.UserField6 as PaymentId, -- Payment Id
    ClientCompany.CompanyCode,
    ClientCompany.Id AS CompanyId,
    Vendor.VendorNo,
    Vendor.VendorName,
    Vendor.ExternalId AS VendorExternalId,
    PaymentStatus.GrossAmount AS InvoiceTotal,
    PaymentStatus.ReceivedDate,
    PaymentStatus.TransactionIdentifier,
    PaymentStatus.Id AS PaymentStatusId
  FROM PaymentStatus
    JOIN Invoice
      ON PaymentStatus.InvoiceId = Invoice.InvoiceId
    JOIN Vendor
      ON Vendor.VendorId = Invoice.VendorId
    JOIN ClientCompany
      ON Invoice.CompanyCode = ClientCompany.CompanyCode
  WHERE Invoice.IsDeleted = 0
  AND Invoice.IsPaused = 0
  AND Invoice.ApprovalStatusId = 12
  AND Invoice.UserField5 IS NOT NULL -- The payment must already been posted to Repay
  AND Invoice.UserField6 IS NOT NULL -- The payment must already been posted to Repay
  AND ClientCompany.ClientId = pClientId
  AND Invoice.ClientId = pClientId
  AND Invoice.CompanyCode = pCompanyCode
  AND (Invoice.UserField7 is null or Invoice.UserField7 <> 'Paid');

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_Payment_UpdateInvoiceStatus` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_Payment_UpdateInvoiceStatus`(
-- noformat
	IN pInvoiceIds			text,
	IN pPaymentId			varchar(100),
	IN pPaymentReference	varchar(100),
	IN pPaymentMethod 		varchar(100),
	IN pPaymentStatus	varchar(100)
	)
ThisProc:
BEGIN
  DROP TABLE IF EXISTS repayTempInvoices;
  CREATE TEMPORARY TABLE repayTempInvoices AS
	    SELECT	* 
		FROM	JSON_TABLE(
				            CONCAT('[', pInvoiceIds, ']'),	
				            "$[*]"
				            COLUMNS(InvoiceId int PATH "$")
					        ) as InvIds;

	if (pPaymentReference is not null and pPaymentId is not null) then
		Update	Invoice 		set 
				CheckNumber			= pPaymentReference, 
				UserField8			= pPaymentReference, 
				UserField10			= pPaymentMethod, 
				ApprovalStatusId	= IF(pPaymentStatus = 'Open', 11, 7), 
				UserField7 			= pPaymentStatus,
				LastActionBy		= 'System', 
				LastActionDate 		= UTC_TIMESTAMP()
		where InvoiceId  in (select InvoiceId from repayTempInvoices);
		

		-- Save Payment Detail in _x_PaymentStatus
    INSERT INTO _x_PaymentStatus (Id, PaymentAmount, PaymentProvider, PaymentMethod, PaymentReference, PaymentNumber, PaymentExternalId) 
      SELECT Id, IFNULL(DiscountAmount, GrossAmount), 'REPAY', pPaymentMethod, pPaymentReference, i.UserField5, i.UserField6  from PaymentStatus ps
      INNER JOIN Invoice i on i.InvoiceId = ps.InvoiceId
      where ps.InvoiceId  in (select InvoiceId from repayTempInvoices)
    ON DUPLICATE KEY UPDATE    
    PaymentProvider = 'REPAY', PaymentMethod = pPaymentMethod, PaymentReference = pPaymentReference;

		INSERT into InvoiceHistory (InvoiceId, Actor, Action, ActionDate, Field, InitialStatus, CurrentStatus)
			select InvoiceId , 'System', 'Repay Payment Status Update', UTC_TIMESTAMP(), 'Invoice Update', 'Payment Approved', IF(pPaymentStatus = 'Open', 'Fund Received', 'Paid') 
			from	repayTempInvoices;

	end if;
   
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xs_ExpenseSMART_Approval_GetApprovers_v1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xs_ExpenseSMART_Approval_GetApprovers_v1`(
	IN pDeviceId		VARCHAR(100)
)
ThisProc:BEGIN
	-- noformat
	
	SET @Userid 			= NULL;
	SET @ClientId			= NULL;

	SELECT 	u.Userid, u.ClientId
	INTO 	@UserId, @ClientId
	FROM 	User u
			INNER JOIN _x_UserParameters xup ON xup.UserId = u.UserId
	WHERE 	u.IsActive = 1
			-- AND xup.EmployeeDevice = pDeviceId;
			AND xup.EmployeeDevice=pDeviceId;

	IF @Userid is NULL THEN 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Problem with _xs_ExpenseSMART_Approval_GetApprovers', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;	

	CALL _x_FieldPopulate('approver',  @ClientId, NULL, '**(ExpenseSMART)**', @UserId);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xs_ExpenseSMART_Approval_GetFields_v1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xs_ExpenseSMART_Approval_GetFields_v1`(
	IN pDeviceId 		VARCHAR(100),
	IN pInvoiceId		INT
)
ThisProc:BEGIN
	-- noformat
	
	SET @Userid 			= NULL;
	SET @ClientId			= NULL;

	SELECT 	u.Userid, u.ClientId
	INTO 	@UserId, @ClientId
	FROM 	User u
			INNER JOIN _x_UserParameters xup ON xup.UserId = u.UserId
	WHERE 	u.IsActive = 1
	   	AND xup.EmployeeDevice=pDeviceId;

	select 	InvoiceId 
	into 	@InvoiceId
	from 	Invoice
	where 	InvoiceId = pInvoiceId
			and ClientId = @ClientId;

	IF @ClientId is NULL THEN 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Problem with _xs_ExpenseSMART_Approval_GetFields', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;	

	CALL _x_FieldInvoice(@InvoiceId, @ClientId, @UserId, '**(ExpenseSMART)**');

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xs_ExpenseSMART_Approval_GetGLCoding_v1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xs_ExpenseSMART_Approval_GetGLCoding_v1`(
-- noformat
	IN pDeviceId 		VARCHAR(100),
	IN pInvoiceId		int
)
ThisProc:BEGIN
	DECLARE done int 			DEFAULT FALSE;
	DECLARE DataField 			varchar(100);
	DECLARE curParms 			CURSOR FOR SELECT FieldName FROM myFields;
	DECLARE CONTINUE HANDLER 	FOR NOT FOUND SET done = TRUE;

	SET @Userid 			= NULL;
	SET @ClientId			= NULL;

	SELECT 	u.Userid, u.ClientId
	INTO 	@UserId, @ClientId
	FROM 	User u
			INNER JOIN _x_UserParameters xup ON xup.UserId = u.UserId
	WHERE 	u.IsActive = 1
			-- AND xup.EmployeeDevice = pDeviceId;
			AND xup.EmployeeDevice=pDeviceId;

	select 	InvoiceId 
	into 	@InvoiceId
	from 	Invoice
	where 	InvoiceId = pInvoiceId
			and ClientId = @ClientId;

	IF @ClientId is NULL THEN 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Problem with _xs_ExpenseSMART_Approval_GetGLCoding', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;	

	set @TaskId = 5;

	Call _x_GLDataById(@InvoiceId, '**(ExpenseSMART)**');		-- This will create a temp tabl;e for all GLcodes called myGLData

	drop temporary table if exists myDataChanges;
	create temporary table myDataChanges (
		Id 					int,
		EditorType			int,
		AttributeName		varchar(100),
		DisplayName			varchar(100),
		DisplayFormat 		varchar(250),
		AttributeValue		text
		);

	drop temporary table if exists myFields;
	create temporary table myFields (
		EditorType			int,
		FieldName 			varchar(100),
		FieldLabel 			varchar(100),
		FieldValue			text
		);


	insert into myFields(EditorType, FieldName, FieldLabel)
		SELECT	COALESCE(InvoiceAttribute.EditorType, IF(InvoiceAttribute.InvoiceAttributeName LIKE 'Company%', 2, 0)) 	AS EditorType,
				CASE	WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'Gl%'				THEN 'GLCodeName' 
						WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'Department%'		THEN 'DepartmentName' 
						WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'Project%' 			THEN 'ProjectName' 
						WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'SubProject%'		THEN 'SubProjectName' 
						WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'Vendor%' 			THEN 'VendorName' 
						WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'Company%'			THEN 'CompanyName' 
						WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'Customer%' 		THEN 'CustomerName' 
						WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'Org%' 				THEN 'OrgName' 
						WHEN InvoiceAttribute.InvoiceAttributeName = 'AccountingVariable1' 	THEN 'AccountingV1Name' 
						WHEN InvoiceAttribute.InvoiceAttributeName = 'AccountingVariable2' 	THEN 'AccountingV2Name' 
						WHEN InvoiceAttribute.InvoiceAttributeName = 'AccountingVariable3'	THEN 'AccountingV3Name' 
						WHEN InvoiceAttribute.InvoiceAttributeName = 'AccountingVariable4' 	THEN 'AccountingV4Name' 
						ELSE InvoiceAttribute.InvoiceAttributeName END 													AS AttributeName,
			    COALESCE(ClientInvoiceAttribute.DisplayName, InvoiceAttribute.DefaultDisplayName, InvoiceAttribute.InvoiceAttributeName) AS DisplayName
		FROM	ClientInvoiceAttribute
				INNER JOIN	InvoiceAttribute			ON ClientInvoiceAttribute.InvoiceAttributeID = InvoiceAttribute.InvoiceAttributeID
		WHERE	ClientInvoiceAttribute.ClientID				= @ClientId
				AND ClientInvoiceAttribute.Task				= @TaskId
				AND ClientInvoiceAttribute.IsReadonly		= 0
				and InvoiceAttribute.InvoiceAttributeName	<> 'AmountInPercent'
		ORDER	BY ClientInvoiceAttribute.OrderNo, DisplayName;

	insert into myDataChanges(Id, EditorType, AttributeName, DisplayName)
		select	myGLData.Id, myFields.EditorType, myFields.FieldName, myFields.FieldLabel
		from	myFields
				cross join 	myGLData;

	set @SQL = Concat("Update 	myDataChanges as t
								inner join	myGLData as Data on Data.Id = t.Id
						set 	t.AttributeValue = ifnull(case ");

	OPEN curParms;
readParms:
	LOOP
		FETCH curParms INTO DataField;	
		IF done THEN
			LEAVE readParms;
		END IF;
		set @SQL = concat(@SQL, "when t.AttributeName = '", DataField, "' then Data.", DataField, "
								");
	END LOOP;
	CLOSE curParms;
	set @SQL = concat(@SQL, "else null end, '')");

	prepare stmt from @Sql;
	execute stmt;
	deallocate prepare stmt;

	select 	* 
	from	myDataChanges;

/*

call _xs_ExpenseSMART_Approval_GetGLCoding_v1('', 3949331);

*/

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xs_ExpenseSMART_Approval_GetImages_v1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xs_ExpenseSMART_Approval_GetImages_v1`(
	IN pDeviceId 		VARCHAR(100),
	IN pInvoiceId		INT
)
ThisProc:BEGIN
	-- noformat

	SET @Userid 			= NULL;
	SET @ClientId			= NULL;

	SELECT 	u.Userid, u.ClientId
	INTO 	@UserId, @ClientId
	FROM 	User u
			INNER JOIN _x_UserParameters xup ON xup.UserId = u.UserId
	WHERE 	u.IsActive = 1
			-- AND xup.EmployeeDevice = pDeviceId;
		  AND xup.EmployeeDevice=pDeviceId;

	IF @Userid is NULL THEN 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Problem with _xs_ExpenseSMART_Approval_GetApprovers_v1', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;	

	CALL _x_InvoiceImageGet(pInvoiceId, 'ExpenseSmart');

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xs_ExpenseSMART_Approval_InvoiceAction_Approve_v1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xs_ExpenseSMART_Approval_InvoiceAction_Approve_v1`(
	IN pDeviceId 			varchar(100),
	IN pInvoiceId	 		int
)
ThisProc:BEGIN
	-- noformat
	SET @Userid 			= NULL;
	SET @ClientId			= NULL;

	SELECT 	u.Userid, u.ClientId
	INTO 	@UserId, @ClientId
	FROM 	User u
			INNER JOIN _x_UserParameters xup ON xup.UserId = u.UserId
	WHERE 	u.IsActive = 1
			-- AND xup.EmployeeDevice = pDeviceId;
			AND u.UserName = 'tiffany.anderson@bongards.com';

	IF @Userid is NULL THEN 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Problem with _xs_ExpenseSMART_Approval_InvoiceAction_Approve', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;	

	-- Check if the user has the ability to Approve
	if not exists (
						SELECT	1
						from	ClientUserRoles cur
								INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
								INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
						WHERE	cur.UserId = @UserId
								and crf.FunctionKey = 'InvoiceApprove'
					) then
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Your role does not allow you access to this feature or functionality.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;

	-- Check if still in user's queue
	set @Position	= NULL;
	set @Total = null;
	call _x_InvoiceMyQueue(@UserId, pInvoiceId, 1, 0, 0, null, @Position, @Total);

	if @Position is null then 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The document is no longer in your queue.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;

	-- DO ACTION

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xs_ExpenseSMART_Approval_InvoiceAction_Assign_v1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xs_ExpenseSMART_Approval_InvoiceAction_Assign_v1`(
	-- noformat
	IN pDeviceId 			varchar(100),
	IN pInvoiceId	 		int,
	IN pComment				longtext,
  	IN pUserIds       		TEXT
)
ThisProc:BEGIN
	DECLARE done 			int DEFAULT FALSE;
	DECLARE DataValue 		mediumtext;
	DECLARE curUserIds 		CURSOR FOR
										SELECT	* 
										FROM	JSON_TABLE(
													           pUserIds,	
																"$[*]" 
													            COLUMNS(UserId VARCHAR(36) PATH "$.UserId")
														        ) AS UsrIds;	
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
	SET @Userid 			= NULL;
	SET @ClientId			= NULL;


	SELECT 	u.Userid, u.ClientId
	INTO 	@UserId, @ClientId
	FROM 	User u
			INNER JOIN _x_UserParameters xup ON xup.UserId = u.UserId
	WHERE 	u.IsActive = 1
			-- AND xup.EmployeeDevice = pDeviceId;
			AND xup.EmployeeDevice=pDeviceId;

	IF @Userid is NULL THEN 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Problem with _xs_ExpenseSMART_Approval_InvoiceAction_Assign', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;	


	-- Check if still in user's queue
	set @Position	= null;
	set @Total 		= null;
	call _x_InvoiceMyQueue(@UserId, pInvoiceId, 1, 0, 99, null, @Position, @Total);

	if @Position is null then 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The document is no longer in your queue.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;


	-- Assign the users from the current approver
	OPEN curUserIds;
readParms:
	LOOP
		FETCH curUserIds INTO DataValue;
		IF done THEN
			LEAVE readParms;
		END IF;

		CALL _x_InvoiceUserAssignedAdd(@ClientId, pInvoiceId, DataValue, pComment, @Userid);

	END LOOP;
	CLOSE curUserIds;
/*
  CALL _xs_ExpenseSMART_Approval_InvoiceAction_Assign_v1("iPhone v1.12",663276677,"ExpenseSmart Delegation",'[{"UserId" : "04807db4-6512-4268-9f2a-abf1306c184b"}, {"UserId" : "04807db4-6512-4268-9f2a-abf1306c184C"}]');
*/


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xs_ExpenseSMART_Approval_InvoiceAction_Delete_v1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xs_ExpenseSMART_Approval_InvoiceAction_Delete_v1`(
	IN pDeviceId 			varchar(100),
	IN pInvoiceId	 		int
)
ThisProc:BEGIN
	-- noformat
	SET @Userid 			= NULL;
	SET @ClientId			= NULL;

	SELECT 	u.Userid, u.ClientId
	INTO 	@UserId, @ClientId
	FROM 	User u
	INNER JOIN _x_UserParameters xup ON xup.UserId = u.UserId
	WHERE 	u.IsActive = 1
  AND xup.EmployeeDevice=pDeviceId;

	-- select * from AhmedPleaseMakeSureThisIsEmailed;

	IF @Userid is NULL THEN 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Problem with _xs_ExpenseSMART_Approval_InvoiceAction_Delete', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;	

	-- Check if the user has the ability to delete
	if not exists (
						SELECT	1
						from	ClientUserRoles cur
								INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
								INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
						WHERE	cur.UserId = @UserId
								and crf.FunctionKey = 'InvoiceDelete'
					) then
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Your role does not allow you access to this feature or functionality.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;


	-- Check if still in user's queue
	set @Position	= NULL;
	set @Total = null;
	call _x_InvoiceMyQueue(@UserId, pInvoiceId, 1, 0, 0, null, @Position, @Total);

	if @Position is null then 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The document is no longer in your queue.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;

	CALL _x_InvoiceDelete(@ClientId, pInvoiceId, @Userid);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xs_ExpenseSMART_Approval_InvoiceAction_Pause_v1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xs_ExpenseSMART_Approval_InvoiceAction_Pause_v1`(
	IN pDeviceId 			varchar(100),
	IN pInvoiceId	 		int,
	IN pComment				longtext
)
ThisProc:BEGIN
	-- noformat
	SET @Userid 			= NULL;
	SET @ClientId			= NULL;

	SELECT 	u.Userid, u.ClientId
	INTO 	@UserId, @ClientId
	FROM 	User u
	INNER JOIN _x_UserParameters xup ON xup.UserId = u.UserId
	WHERE 	u.IsActive = 1
	-- AND xup.EmployeeDevice = pDeviceId;
	-- AND u.UserName = 'tiffany.anderson@bongards.com';
  AND xup.EmployeeDevice=pDeviceId;

	IF @Userid is NULL THEN 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Problem with _xs_ExpenseSMART_Approval_InvoiceAction_Pause', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;	

	-- Check if the user has the ability to Pause
	if not exists (
						SELECT	1
						from	ClientUserRoles cur
								INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
								INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
						WHERE	cur.UserId = @UserId
								and crf.FunctionKey = 'InvoicePause'
					) then
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Your role does not allow you access to this feature or functionality.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;


	-- Check if still in user's queue
	set @Position	= NULL;
	set @Total = null;
	call _x_InvoiceMyQueue(@UserId, pInvoiceId, 1, 0, 0, null, @Position, @Total);

	if @Position is null then 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The document is no longer in your queue.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;

	CALL _x_InvoicePause(pInvoiceId, @ClientId, @Userid, pComment, 1);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xs_ExpenseSMART_Approval_InvoiceAction_Reject_v1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xs_ExpenseSMART_Approval_InvoiceAction_Reject_v1`(
	IN pDeviceId 			varchar(100),
	IN pInvoiceId	 		int,
	IN pComment 			longtext
)
ThisProc:BEGIN
	-- noformat
	SET @Userid 			= NULL;
	SET @ClientId			= NULL;

	SELECT 	u.Userid, u.ClientId
	INTO 	@UserId, @ClientId
	FROM 	User u
			INNER JOIN _x_UserParameters xup ON xup.UserId = u.UserId
	WHERE	u.IsActive = 1
		  	AND xup.EmployeeDevice=pDeviceId;


	IF @Userid is NULL THEN 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Problem with _xs_ExpenseSMART_Approval_InvoiceAction_Reject', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;	

	-- Check if the user has the ability to Reject
	if not exists (
						SELECT	1
						from	ClientUserRoles cur
								INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
								INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
						WHERE	cur.UserId = @UserId
								and crf.FunctionKey = 'InvoiceReject'
					) then
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Your role does not allow you access to this feature or functionality.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;

	-- Check if still in user's queue
	set @Position	= NULL;
	set @Total = null;
	call _x_InvoiceMyQueue(@UserId, pInvoiceId, 1, 0, 0, null, @Position, @Total);

	if @Position is null then 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The document is no longer in your queue.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;

	-- Find the list of people and reject to the first person.
	drop TEMPORARY TABLE IF EXISTS myRejectList;
	CREATE TEMPORARY TABLE myRejectList (
		FullName 						varchar(500),
		ApprovedOn						datetime,
		ApproverId 						char(36),
		UserInvoiceAssignmentHistoryId	INT
		);
	CALL _x_InvoiceUserRejectToList(@ClientId, pInvoiceId, @UserId);

	if NOT EXISTS (SELECT 1 FROM myRejectList LIMIT 1) THEN 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Unable to find the previous approver to reject to.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;

	SELECT	ApproverId, UserInvoiceAssignmentHistoryId
	INTO 	@ApproverId, @UserInvoiceAssignmentHistoryId
	FROM 	myRejectList
	ORDER	BY ApprovedOn DESC
	limit 1;

	CALL _x_InvoiceReject(pInvoiceId, @ClientId, @UserId, pComment, @ApproverId, @UserInvoiceAssignmentHistoryId);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xs_ExpenseSMART_Approval_MyQueue_v1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xs_ExpenseSMART_Approval_MyQueue_v1`(
	IN pDeviceId 		VARCHAR(100)
)
ThisProc:BEGIN
	-- noformat


	SET @Userid 			= NULL;
	SET @ClientId			= NULL;

	if (SELECT 	count(*)
		FROM 	User u
				INNER JOIN _x_UserParameters xup ON xup.UserId = u.UserId
		WHERE 	u.IsActive = 1
					 AND xup.EmployeeDevice=pDeviceId) > 1 THEN 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Problem with _xs_ExpenseSMART_Approval_MyQueue_v1.  Error: 2+', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;

	SELECT 	u.Userid, u.ClientId
	INTO 	@UserId, @ClientId
	FROM 	User u
			INNER JOIN _x_UserParameters xup ON xup.UserId = u.UserId
	WHERE 	u.IsActive = 1
				 AND xup.EmployeeDevice=pDeviceId;	


	IF @Userid is NULL THEN 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Problem with _xs_ExpenseSMART_Approval_MyQueue_v1', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;	

	set @Count	= 0;
	set @Total = 0;

	CALL _x_InvoiceMyQueue(@UserId, -1, 0, 0, 9999, '**(ExpenseSMART)**', @Count, @Total);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xs_ExpenseSMART_ChangePassword_v1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xs_ExpenseSMART_ChangePassword_v1`(
-- noformat
	IN pDeviceId			varchar(100),
	IN pCurrentPassword		varchar(50),
	IN pNewPassword			varchar(50)
	)
ThisProc:BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
		@p1 = MESSAGE_TEXT;
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @p1, MYSQL_ERRNO = 1;
		-- SET pMessage = @p1;
	END;



	set @I = FLOOR( 1 + RAND( UTC_TIMESTAMP() ) * 100);
	set @Message = 'Changed';
	if @I < 30 then 
		set @Message = 'The current password does not match.';
	else
		if @I < 60 then 
			set @Message = 'This is another fake error.';
		end if;
	end if;


	SELECT	@Message 		AS Message;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xs_ExpenseSMART_CreateUserExpenseAttachment_v1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xs_ExpenseSMART_CreateUserExpenseAttachment_v1`(
	IN p_ExpenseId INT,
	IN p_ImageUrl VARCHAR(200))
BEGIN
	INSERT INTO `ExpenseSmart_UserExpenseAttachment` (ExpenseId, ImageUrl)
	VALUES (p_ExpenseId, p_ImageUrl);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xs_ExpenseSMART_CreateUserExpenseHeader_v1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xs_ExpenseSMART_CreateUserExpenseHeader_v1`(
	IN `p_UniqueId` VARCHAR(100),
	IN `p_Version` CHAR(50),
	IN `p_DeviceId` CHAR(36),
	IN `p_Description` VARCHAR(100),
	IN `p_PeriodDate1` CHAR(10),
	IN `p_PeriodDate2` CHAR(10),
	IN `p_InvoiceId` INT,
	IN `p_InvoiceTotal` DECIMAL(20,6)
)
ThisProc:BEGIN  
DECLARE  p_ExpenseId INT;
  
  set @p_UserId=null;
        
  SELECT 	usr.Userid
	 INTO 	@p_UserId
	FROM 	`User` usr
   INNER JOIN `_x_UserParameters` xup ON xup.UserId = usr.UserId
	WHERE 	usr.IsActive = 1
	 AND xup.EmployeeDevice=p_DeviceId;	
 
	        
	IF @p_userId IS NULL THEN 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Error Occured ', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;	
        -- Insert into UserExpenseHeader
        INSERT INTO ExpenseSmart_UserExpenseHeader (
            UniqueId, Version, UserId, Description, PeriodDate1, PeriodDate2, CreatedDatetime, InvoiceId, InvoiceTotal
        ) VALUES (
            p_UniqueId, p_Version, @p_UserId, p_Description, p_PeriodDate1, p_PeriodDate2, UTC_TIMESTAMP(), p_InvoiceId, p_InvoiceTotal
        );       
    -- Return the last inserted ID
    SELECT LAST_INSERT_ID() AS ExpenseId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xs_ExpenseSMART_CreateUserExpenseLine_v1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xs_ExpenseSMART_CreateUserExpenseLine_v1`(
	IN `p_ExpenseId` INT,
	IN `p_ExpenseCategoryId` INT,
	IN `p_EntryDate` CHAR(10),
	IN `p_Qty` INT,
	IN `p_Currency` CHAR(3),
	IN `p_CurrencyAmount` DECIMAL(18,2),
	IN `p_EXRRate` DECIMAL(10,5),
	IN `p_CurrencyFinal` CHAR(3),
	IN `p_FinalAmount` DECIMAL(18,2),
	IN `p_LineInfo` VARCHAR(30)
)
BEGIN
        -- Insert into UserExpenseLine
        INSERT INTO ExpenseSmart_UserExpenseLine
            (ExpenseId, ExpenseCategoryId, EntryDate, Qty, Currency, CurrencyAmount, EXRRate, CurrencyFinal, FinalAmount, LineInfo)
        VALUES
            (p_ExpenseId, p_ExpenseCategoryId, p_EntryDate, p_Qty, p_Currency, p_CurrencyAmount, p_EXRRate, p_CurrencyFinal, p_FinalAmount, p_LineInfo);
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xs_ExpenseSMART_GetCurrency_v1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xs_ExpenseSMART_GetCurrency_v1`(IN pDeviceId varchar(100))
ThisProc:BEGIN
	-- noformat
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
		@p1 = MESSAGE_TEXT;
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @p1, MYSQL_ERRNO = 1;
		-- SET pMessage = @p1;
	END;

	set @Userid 			= null;
	set @EmployeeTypeId 	= null;

	SELECT 	u.Userid, EmployeeTypeId, ClientId
    INTO 	@UserId, @EmployeeTypeId, @ClientId
	FROM 	User u
		INNER JOIN  _x_UserParameters xup on xup.UserId = u.UserId
  WHERE u.IsActive = 1
		AND xup.EmployeeTypeId is not NULL
    AND xup.EmployeeDevice=pDeviceId;

	IF @Userid is null then 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Problem with GetCurrency', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;

	SELECT	Currency 
	FROM	ClientExpenseCurrency 
  WHERE 	ClientId = @ClientId
	  AND isActive = 1
	ORDER BY 1;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xs_ExpenseSMART_GetEmployeeExpenseInfo_v1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xs_ExpenseSMART_GetEmployeeExpenseInfo_v1`(
IN pDeviceId VARCHAR(100)
)
ThisProc:BEGIN
	-- noformat
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
		@p1 = MESSAGE_TEXT;
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @p1, MYSQL_ERRNO = 1;
		-- SET pMessage = @p1;
	END;
	
	SET @Userid = NULL;
	SET @EmployeeTypeId = NULL;
	
	SELECT 	u.Userid,xup.EmployeeTypeId, ClientId
	 INTO 	@UserId,@EmployeeTypeId,@ClientId
	FROM 	`User` u
 	 INNER JOIN `ExpenseSmart_OTP` xOtp ON xOtp.UserId = u.UserId
	 INNER JOIN `_x_UserParameters` xup ON xup.UserId = u.UserId
	WHERE 	u.IsActive = 1
 	 AND xup.EmployeeDevice=pDeviceId
	 Limit 1;
			
			
	IF @Userid IS NULL THEN 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Problem with GetEmployeeExpenseInfo', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;
	SELECT	cec.ExpenseCategoryId,
			cec.CategoryName,
			cec.EntryLabel,
			cec.Tooltip,
			cec.AllowQtyOrAmount,
			cec.isReceiptRequired,
			1 AS isCurrencySelectedable,
			cecbet.QtyMin,
			cecbet.QtyMax,
			cecbet.QtyRate,
			cecbet.AmountMin,
			cecbet.AmountMax
	FROM	ClientExpenseCategory cec
			INNER JOIN ClientExpenseCategoryByEmployeeType cecbet	ON cecbet.ExpenseCategoryId = cec.ExpenseCategoryId AND cecbet.EmployeeTypeId = @EmployeeTypeId																	AND cecbet.isActive = 1
			INNER JOIN ClientEmployeeType cet ON cet.EmployeeTypeId = cecbet.EmployeeTypeId	AND cet.isActive = 1
	WHERE 	cec.ClientId = @ClientId
			AND cec.isActive = 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xs_ExpenseSMART_GetExpenseHeaderList_v1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xs_ExpenseSMART_GetExpenseHeaderList_v1`(
IN pDeviceId VARCHAR(100)
)
ThisProc:BEGIN
	-- noformat
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
		@p1 = MESSAGE_TEXT;
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @p1, MYSQL_ERRNO = 1;
		-- SET pMessage = @p1;
	END;
	
	SET @Userid = NULL;
	SET @EmployeeTypeId = NULL;
	set @InvoiceStatus=3;
	
	SELECT 	u.Userid,xup.EmployeeTypeId, ClientId
	 INTO 	@UserId,@EmployeeTypeId,@ClientId
	FROM 	`User` u
	 INNER JOIN `ExpenseSmart_OTP` xOtp ON xOtp.UserId = u.UserId
	 INNER JOIN `_x_UserParameters` xup ON xup.UserId = u.UserId
	WHERE 	u.IsActive = 1
	 AND xup.EmployeeDevice=pDeviceId;	
			
			
	IF @Userid IS NULL THEN 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'User Does not Exist', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;
	
  SELECT	expheader.ExpenseId,expheader.UniqueId, expheader.UserId, expheader.Description, expheader.PeriodDate1, expheader.PeriodDate2, expheader.CreatedDatetime, expheader.InvoiceId, expheader.InvoiceTotal,@InvoiceStatus as "Status"		
	FROM	`ExpenseSmart_UserExpenseHeader` expheader
	WHERE 	 expheader.UserId = @Userid;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xs_ExpenseSMART_GetExpenseLineList_v1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xs_ExpenseSMART_GetExpenseLineList_v1`(
IN pExpenseId VARCHAR(100)
)
ThisProc:BEGIN
	-- noformat
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
		@p1 = MESSAGE_TEXT;
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @p1, MYSQL_ERRNO = 1;
		-- SET pMessage = @p1;
	END;
	
	SET @Userid = NULL;
	
	SELECT 	u.Userid,xup.EmployeeTypeId, ClientId
	 INTO 	@UserId,@EmployeeTypeId,@ClientId
	FROM 	`User` u
	 INNER JOIN `ExpenseSmart_OTP` xOtp ON xOtp.UserId = u.UserId
	 INNER JOIN `_x_UserParameters` xup ON xup.UserId = u.UserId
	WHERE 	u.IsActive = 1
	 AND xup.EmployeeDevice=pDeviceId;	
			
			
	IF @Userid IS NULL THEN 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'User Does not Exist', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;

	SELECT	expLine.ExpenseId, expLine.ExpenseCategoryId, expLine.EntryDate, expLine.Qty, expLine.Currency, expLine.CurrencyAmount, expLine.EXRRate, expLine.CurrencyFinal, expLine.FinalAmount, expLine.LineInfo
	FROM	`ExpenseSmart_UserExpenseLine` expLine
	WHERE 	 expLine.ExpenseId = pExpenseId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xs_ExpenseSMART_GetExpenseList_v1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xs_ExpenseSMART_GetExpenseList_v1`(
IN pDeviceId VARCHAR(100)
)
ThisProc:BEGIN
	-- noformat
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
		@p1 = MESSAGE_TEXT;
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @p1, MYSQL_ERRNO = 1;
		-- SET pMessage = @p1;
	END;
	
	SET @Userid = NULL;
	SET @EmployeeTypeId = NULL;
	set @InvoiceStatus=3;
	
	SELECT 	u.Userid,xup.EmployeeTypeId, ClientId
	 INTO 	@UserId,@EmployeeTypeId,@ClientId
	FROM 	`User` u
	 INNER JOIN `ExpenseSmart_OTP` xOtp ON xOtp.UserId = u.UserId
 	 INNER JOIN `_x_UserParameters` xup ON xup.UserId = u.UserId
	WHERE 	u.IsActive = 1	AND xup.EmployeeDevice=pDeviceId;	
			
			
	IF @Userid IS NULL THEN 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'User Does not Exist', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;
	SELECT	expheader.ExpenseId,expheader.UniqueId,expheader.UniqueId, expheader.UserId, expheader.Description, 
          expheader.PeriodDate1, expheader.PeriodDate2, expheader.CreatedDatetime, expheader.InvoiceId, expheader.InvoiceTotal,@InvoiceStatus as "Status"		
	FROM	`ExpenseSmart_UserExpenseHeader` expheader
	WHERE  expheader.UserId = @Userid;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xs_ExpenseSMART_GetOTP_v1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xs_ExpenseSMART_GetOTP_v1`(
	IN `p_UserName` varchar(50),
	IN `p_NewDeviceId` VARCHAR(100)
)
BEGIN
        -- Get OTP into User
        SELECT `ExpenseSmart_OTP`.`OTP` from `ExpenseSmart_OTP` 
        INNER JOIN `User` ON `ExpenseSmart_OTP`.`UserId` = `User`.`UserId`
         WHERE `User`.`UserName` = p_UserName AND `ExpenseSmart_OTP`.DeviceId=`p_NewDeviceId`;
        
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xs_ExpenseSMART_SetOTP_v1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xs_ExpenseSMART_SetOTP_v1`(
	IN `p_UserName` varchar(50),
	IN `p_DeviceId` VARCHAR(100),
	IN  p_ExpirationTime varchar(50),
	IN `p_OTP` VARCHAR(10)
)
BEGIN
        -- Save OTP into User
    UPDATE `ExpenseSmart_OTP` 
     INNER JOIN `User`ON `ExpenseSmart_OTP`.`UserId` = `User`.`UserId`
     SET `ExpenseSmart_OTP`.IsVerified=FALSE,`ExpenseSmart_OTP`.OtpCode = p_OTP,`ExpenseSmart_OTP`.ExpirationTime =UTC_TIMESTAMP()+INTERVAL 30 MINUTE-- str_to_date(p_ExpirationTime,'%Y/%m/%d %H:%i:%s')
    WHERE `User`.`UserName` = p_UserName     
	   AND User.IsActive = TRUE 
     AND ExpenseSmart_OTP.UserId=User.UserId 
     AND ExpenseSmart_OTP.DeviceId=p_DeviceId;
	       
	  SELECT "OTP Updated";
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xs_ExpenseSMART_SignIn_v1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xs_ExpenseSMART_SignIn_v1`(
-- noformat
	IN pUsername		 VARCHAR(50),
	IN pPassword		 VARCHAR(50),
	IN pVersion		 	 VARCHAR(50),
	IN pDeviceId		 VARCHAR(100),
	IN pOldDeviceId	 VARCHAR(100),	
	IN pOTPCode			 VARCHAR(50),
	IN pSignInMode	 VARCHAR(50)
	)
ThisProc:BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
		@p1 = MESSAGE_TEXT;
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @p1, MYSQL_ERRNO = 1;
		-- SET pMessage = @p1;
	
	END;
	-- *******************     I M P O R T A N T     *******************
	--
	-- Any change to this login should be reverified with _x_SigninCheck
	--
	-- *******************     I M P O R T A N T     *******************
	SET @MaxFails 		= 7;
	SET @UserId 		  = NULL;
	SET @FirstName 		= NULL;
	SET @LastName 		= NULL;
	SET @Password 		= NULL;
	SET @CustomerName = NULL;
	SET @Currency 		= NULL;
	SET @FailCount 		= NULL;
	SET @Message 		  = NULL;
        
	SET @LogInStatus 	= NULL;
	SET @OTP 		    	= NULL;
	SET @IsVerified 	= NULL;
	SET @ExpirationTime = NULL;
	SET @DeviceId 	   = NULL;
	SET @DeviceCount 	 = NULL;	
	SET @EmailAddress  = NULL;	
	
	SELECT	 User.UserId,
	         User.FirstName,
		       User.LastName,
		       PASSWORD,
		       c.CustomerName,
		       IFNULL(cur.Currency, 'USD') AS Currency,
		      _x_UserParameters.FailCount,User.Email
	INTO	 @UserId, @FirstName, @LastName, @Password, @CustomerName, @Currency, @FailCount,@EmailAddress
	FROM	`User` 
		 INNER JOIN `Client` c ON c.ClientId= User.ClientId
		 INNER JOIN _x_UserParameters ON User.UserId = _x_UserParameters.UserId
		 -- INNER JOIN Vendor v ON v.VendorId= _x_UserParameters.EmployeeVendorId
		 LEFT  JOIN ClientExpenseCurrency cur ON cur.ClientId = User.ClientId
		 AND cur.isActive = 1
	WHERE User.UserName = pUsername
	   AND User.Password = pPassword
	   AND User.IsActive = TRUE
	   AND c.IsActive = TRUE
		 -- and v.IsActive = true
	 	 AND IFNULL(_x_UserParameters.FailCount, 0) < @MaxFails LIMIT 1;
	
	-- Credentials Incorrect  
	IF @Userid IS NULL THEN 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Please check your credentials', MYSQL_ERRNO = 1;
		SET @LogInStatus="InCorrectCredentials";
		LEAVE ThisProc;
	END IF;
	
  -- checking if there are more than one of the same device id are registered
  SELECT COUNT(*) AS cnt INTO @DeviceCountTotal
  FROM `ExpenseSmart_OTP`
  WHERE DeviceId = pDeviceId;  
  
    IF @DeviceCount>1 THEN 
    SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Please check your credentials', MYSQL_ERRNO = 1;
		SET @LogInStatus="DeviceIDError";
		LEAVE ThisProc;
    END IF;  


   -- checking the User
	IF @UserId IS NOT NULL THEN
	
  -- checking if it is a new device
  SELECT COUNT(*) AS cnt INTO @DeviceCount
  FROM `ExpenseSmart_OTP`
  WHERE UserId =  @UserId AND DeviceId = pDeviceId;     
        
    IF @DeviceCount=0 THEN 
    SET @LogInStatus="NewDevice";
    INSERT INTO ExpenseSmart_OTP(UserId,DeviceId,DateCreated,IsVerified)VALUE(@UserId,pDeviceId,UTC_TIMESTAMP(),FALSE);
    SELECT 	@LogInStatus AS LogInStatus,@EmailAddress AS EmailAddress;
    LEAVE ThisProc;
    END IF;  

  -- checking if the device is verified 
  SELECT COUNT(*) AS cnt INTO @DeviceCountVerfied
  FROM `ExpenseSmart_OTP`
  WHERE UserId =  @UserId AND DeviceId = pDeviceId AND IsVerified=FALSE AND pSignInMode<>"OTPValidation";     
        
    IF @DeviceCountVerfied>0 THEN 
    SET @LogInStatus="NotVerifiedDevice";
    SELECT 	@LogInStatus AS LogInStatus,@EmailAddress AS EmailAddress;
    LEAVE ThisProc;
    END IF;
  
  -- checking for OTP code      
  IF pSignInMode="OTPValidation" AND pOTPCode IS NOT NULL AND pDeviceId IS NOT NULL THEN 
                 
       SELECT DeviceId,OtpCode,ExpirationTime,IsVerified
       INTO @DeviceId,@OTP,@ExpirationTime,@IsVerified
       FROM ExpenseSmart_OTP
       WHERE UserId = @UserId AND DeviceId = pDeviceId AND IsVerified=FALSE LIMIT 1;   
                       
         -- OTP expired
         IF @ExpirationTime< UTC_TIMESTAMP() THEN
         SET @LogInStatus="Expired"; 
         SELECT 	@LogInStatus AS LogInStatus;
         LEAVE ThisProc;       
         END IF;
         
         -- Incorrect OTP
         IF pOTPCode<> @OTP AND  @ExpirationTime> UTC_TIMESTAMP() THEN
         SET @LogInStatus="IncorrectOTP";
         SELECT 	@LogInStatus AS LogInStatus;
         LEAVE ThisProc;
         END IF;
         
         -- OTP Verified
         IF pOTPCode=@OTP AND  @ExpirationTime> UTC_TIMESTAMP() THEN
         SET @LogInStatus="OTPVerified";
         UPDATE ExpenseSmart_OTP SET `OtpCode`=NULL , `ExpirationTime`=NULL , `IsVerified`=TRUE WHERE UserId=@UserId AND DeviceId=pDeviceId;
         SET @Message = 'WelCome To ExpenseSmart!';
         END IF;         
        
    END IF;
		UPDATE	_x_UserParameters SET 
					ExpenseSMARTVersion 	= pVersion,
					EmployeeDevice 			= pDeviceId,
					FailCount				= 0,
					ExpenseSMARTLastAccess	= UTC_TIMESTAMP()
			WHERE	UserId = @UserId;
			
		/*	IF FLOOR( 1 + RAND( UTC_TIMESTAMP() ) * 100) <= 100 THEN
				SET @Message = 'Important notice';
				SET @Message = CONCAT(@Message, CHAR(13), CHAR(10));
				SET @Message = CONCAT(@Message, CHAR(13), CHAR(10), 'ExpenseSMART will not be accepting submitted reports on Saturday the 18th');
				SET @Message = CONCAT(@Message, CHAR(13), CHAR(10), 'We appologize for this interruption.');
				SET @Message = CONCAT(@Message, CHAR(13), CHAR(10));
				SET @Message = CONCAT(@Message, CHAR(13), CHAR(10), 'If you have any questions please contact us at 1-999-999-9999.');
			END IF;*/
-- 		end if;
	END IF;
	-- Check if this employee is assigned the require config field or norify the Supervisors
	-- LOGIC HERE

	SET @Action_Approve = 0;
	SET @Action_Reject 	= 0;
	SET @Action_Assign 	= 0;
	SET @Action_Pause 	= 0;
	SET @Action_Delete	= 0;

	if exists (
				SELECT	1
				from	ClientUserRoles cur
						INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
						INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
				WHERE	cur.UserId = @UserId
						and crf.FunctionKey = 'InvoiceApprove'
						AND crf.Access = 1) THEN
		SET @Action_Approve = 1;
	end if;
	if exists (
				SELECT	1
				from	ClientUserRoles cur
						INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
						INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
				WHERE	cur.UserId = @UserId
						and crf.FunctionKey = 'InvoiceReject'
						AND crf.Access = 1) THEN
		SET @Action_Reject = 1;
	end if;	
	if exists (
				SELECT	1
				from	ClientUserRoles cur
						INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
						INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
				WHERE	cur.UserId = @UserId
						and crf.FunctionKey = 'InvoiceAssignUser'
						AND crf.Access = 1) THEN
		SET @Action_Assign = 1;
	end if;	
	if exists (
				SELECT	1
				from	ClientUserRoles cur
						INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
						INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
				WHERE	cur.UserId = @UserId
						and crf.FunctionKey = 'InvoicePause'
						AND crf.Access = 1) THEN
		SET @Action_Pause = 1;
	end if;
	if exists (
				SELECT	1
				from	ClientUserRoles cur
						INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
						INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
				WHERE	cur.UserId = @UserId
						and crf.FunctionKey = 'InvoiceDelete'
						AND crf.Access = 1) THEN
		SET @Action_Delete = 1;
	end if;

	SELECT	@FirstName 		AS FirstName,
			@LastName 			  AS LastName,
			@EmailAddress   	AS EmailAddress,
			@CustomerName 		AS CustomerName,
			@Currency 		  	AS Currency,
			@LogInStatus   	 	AS LogInStatus,
			1		AS ApprovalAllAction_Approve,
			1		AS ApprovalAllAction_Reject,
			1		AS ApprovalAllAction_Assign,
			1	  AS ApprovalAllAction_Pause,
			1		AS ApprovalAllAction_Delete;
-- 			@Action_Approve		AS ApprovalAllAction_Approve,
-- 			@Action_Reject		AS ApprovalAllAction_Reject,
-- 			@Action_Assign		AS ApprovalAllAction_Assign,
-- 			@Action_Pause	  	AS ApprovalAllAction_Pause,
-- 			@Action_Delete		AS ApprovalAllAction_Delete;
			
	SELECT	DATE_FORMAT(UTC_TIMESTAMP(), '%Y-%m-%d')  AS MessageDate,
			     @Message   AS Message
	UNION ALL
	SELECT	DATE_FORMAT(DATE_SUB(UTC_TIMESTAMP(), INTERVAL 1 DAY), '%Y-%m-%d') AS MessageDate,
			                       'This is another message' AS Message;
/*
set @P = NULL;
select Password into @P from User u where UserId = '18b61a24-d0a4-11e9-b055-22000a1f9f3d';
call _xs_ExpenseSMART_SignIn_v1('Bongardsadmin', @P, 'v1', 'iPhone v1.12', null);
select * from _x_UserParameters where UserId = '18b61a24-d0a4-11e9-b055-22000a1f9f3d';  -- ClientId = 88 and UserName like '%admin';
select * from UserNotification where UserId = '18b61a24-d0a4-11e9-b055-22000a1f9f3d' order by ReceivedDate desc;
*/
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xs_ExpenseSMART_UpdateEmployeeDevice_v1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xs_ExpenseSMART_UpdateEmployeeDevice_v1`(
	IN `p_UserName` varchar(50),
	IN `p_NewDeviceId` VARCHAR(100)
)
BEGIN
        -- Save OTP into User
        UPDATE `_x_UserParameters` INNER JOIN `User`
        oN `_x_UserParameters`.`UserId` = `User`.`UserId`
        SET 
        `_x_UserParameters`.`EmployeeDevice` = `_x_UserParameters`.`NewEmployeeDevice`,
        `_x_UserParameters`.`OTP` = NULL,
        `_x_UserParameters`.`NewEmployeeDevice` = NULL
        WHERE `User`.`UserName` = p_UserName and `_x_UserParameters`.`NewEmployeeDevice` = p_NewDeviceId;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AdminByStatus` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AdminByStatus`(
-- noformat
	IN 	pClientId 	int,
	IN	pUserId 	char(36),
	IN 	pStatus 	tinyint,
	IN 	pDetails 	tinyint,
	IN 	pOffset 	int,
	IN 	pSize 		int
)
ThisProc:BEGIN


	
	SELECT	IFNULL(IsCloudxUser, 0)
	INTO	@isCloudxUser
	FROM	User
	WHERE	UserId = pUserId;

	call _x_SetClientTimeZone(pClientId);

	drop TEMPORARY TABLE IF EXISTS MyData;

	set @CodePosition = 2;
	Call _x_GetClientParam(pClientId, 'CodePosition', @CodePosition);

	set @GridName = '';

  	IF (pStatus = 0) THEN  /* Paused */
		set @GridName = 'GridPaused';
		CREATE TEMPORARY TABLE IF NOT EXISTS MyData AS (
			SELECT
					Invoice.InvoiceId,
					_x_GetFormatedValue(Vendor.VendorNo, Vendor.VendorName, @CodePosition)									as Vendor,
					IFNULL(Invoice.InvoiceNo, '') 																			AS InvoiceNo,
					Invoice.InvoiceTotal,
					Invoice.ApprovalStatusId,
					Case	when InvoiceType = 'Invoice' then
								case when Invoice.IsPOInvoice = true then concat('PO:', ifnull(Invoice.PONUmber, '')) else 'Non PO' END
							else InvoiceType end 																			as InvoiceType,
					case	when Invoice.ApprovalStatusId <> 3 
									then concat('The invoice is in ', InvoiceStatus.StateName) 
							else 	null end																				as AttentionMsg,
					ifnull(PausedInvoice.Comment, '')																		AS Comment,
					IFNULL(Invoice.LastActionBy, '') 																		AS LastActionBy,
					date(Invoice.InvoiceDate)																				as InvoiceDate,
					convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone)												AS ScannedDate,
					convert_tz(Invoice.LastActionDate, 'GMT', @@session.time_zone)											AS LastActionDate
			
			FROM Invoice
					inner JOIN InvoiceStatus 		ON InvoiceStatus.StateId = Invoice.ApprovalStatusId
					LEFT JOIN Vendor				ON Invoice.VendorId = Vendor.VendorId
					LEFT JOIN PausedInvoice			ON Invoice.InvoiceId = PausedInvoice.InvoiceId
			WHERE Invoice.ClientId = pClientId
					AND Invoice.IsPaused 			= TRUE
					AND Invoice.IsDeleted 			= FALSE
					and Invoice.InvoiceType 		<> 'Archive'
			);


  ELSEIF (pStatus = 1) THEN /* Captured */
		set @GridName = 'GridCaptured';
		if pDetails = 1 THEN
			call _x_InvoiceQueueCaptured (pClientId, pUserId, null, 0, pOffset, pSize, @pCount, @pTotal);
		else
			set @pCount = 0;
			set @pTotal = 0.00; 
			call _x_InvoiceQueueCaptured (pClientId, pUserId, null, 2, 0, 999999, @pCount, @pTotal);
			insert into Results(Grid, Cnt, Total) Values (@GridName, @pCount, @pTotal);
		end if;
		Leave ThisProc;

  ELSEIF (pStatus = 2) THEN /* NonPoApproval */
		set @GridName = 'GridNonPO';

		CREATE TEMPORARY TABLE IF NOT EXISTS MyData AS (
			SELECT
					Invoice.InvoiceId,
					_x_GetFormatedValue(Vendor.VendorNo, Vendor.VendorName, @CodePosition)									as Vendor,
					IFNULL(Invoice.InvoiceNo, '') 																			AS InvoiceNo,
					Invoice.InvoiceTotal,
					Invoice.ApprovalStatusId,
					Case	when InvoiceType = 'Invoice' then
								case 	when Invoice.IsPOInvoice = true then concat('PO:', ifnull(Invoice.PONUmber, '')) 
										else 'Non PO' END
							else InvoiceType end 																			as InvoiceType,
					case	when timestampdiff(day, UTC_TIMESTAMP(), Invoice.NetTermDate) 		between 0 and 2 
							then 'Approaching the discount date.' 
							when timestampdiff(day, UTC_TIMESTAMP(), Invoice.PaymentDueDate) 	between 0 and 2
							then 'Approaching the due date.' 
							else '' end																						as AttentionMsg,
					ifnull(Invoice.Comment, '')																				AS Comment,
					IFNULL(Invoice.LastActionBy, '') 																		AS LastActionBy,
					date(Invoice.InvoiceDate)																				as InvoiceDate,
					convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone)												AS ScannedDate,
					convert_tz(Invoice.LastActionDate, 'GMT', @@session.time_zone)											AS LastActionDate
			FROM Invoice
					LEFT JOIN Vendor					ON Invoice.VendorId = Vendor.VendorId
			WHERE Invoice.ClientId = pClientId
					AND Invoice.IsDeleted 				= FALSE
					AND Invoice.IsPaused 				= FALSE
					AND Invoice.ApprovalStatusId 		= 3
					AND Invoice.IsPOInvoice 			= FALSE
					and Invoice.InvoiceType 			<> 'Archive'
		);



  ELSEIF (pStatus = 3) THEN /* PoApproval */
		set @GridName = 'GridPO';

		CREATE TEMPORARY TABLE IF NOT EXISTS MyData AS (
			SELECT
					Invoice.InvoiceId,
					_x_GetFormatedValue(Vendor.VendorNo, Vendor.VendorName, @CodePosition)									as Vendor,
					IFNULL(Invoice.InvoiceNo, '') 																			AS InvoiceNo,
					Invoice.InvoiceTotal,
					Invoice.ApprovalStatusId,
					Case	when InvoiceType = 'Invoice' then
								case 	when Invoice.IsPOInvoice = true then concat('PO:', ifnull(Invoice.PONUmber, '')) 
										else 'Non PO' END
							else InvoiceType end 																			as InvoiceType,
					case	when timestampdiff(day, UTC_TIMESTAMP(), Invoice.NetTermDate) 		between 0 and 2 
							then 'Approaching the discount date.' 
							when timestampdiff(day, UTC_TIMESTAMP(), Invoice.PaymentDueDate) 	between 0 and 2
							then 'Approaching the due date.' 
							else '' end																						as AttentionMsg,
					ifnull(Invoice.Comment, '')																				AS Comment,
					IFNULL(Invoice.LastActionBy, '') 																		AS LastActionBy,
					date(Invoice.InvoiceDate)																				as InvoiceDate,
					convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone)												AS ScannedDate,
					convert_tz(Invoice.LastActionDate, 'GMT', @@session.time_zone)											AS LastActionDate
			
			FROM Invoice
				LEFT JOIN Vendor						ON Invoice.VendorId = Vendor.VendorId
			WHERE Invoice.ClientId = pClientId
					AND Invoice.IsDeleted				= FALSE
					AND Invoice.IsPaused 				= FALSE
					AND Invoice.ApprovalStatusId 		= 3
					AND Invoice.IsPOInvoice 			= TRUE
					and Invoice.InvoiceType 			<> 'Archive'
					AND not EXISTS (SELECT 1
								FROM UserInvoiceAssignment
								WHERE UserInvoiceAssignment.InvoiceId = Invoice.InvoiceId
										and UserInvoiceAssignment.HoldEndDate is not null
								limit 1
								)
		);

  ELSEIF (pStatus = 4) THEN /* Exception */
		set @GridName = 'GridException';

		if pDetails = 1 THEN
			call _x_InvoiceQueueException (pClientId, pUserId, null, 0, pOffset, pSize, @pCount, @pTotal);
		else
			set @pCount = 0;
			set @pTotal = 0.00; 
			call _x_InvoiceQueueException (pClientId, pUserId, null, 2, 0, 999999, @pCount, @pTotal);
			insert into Results(Grid, Cnt, Total) Values (@GridName, @pCount, @pTotal);
		end if;
		Leave ThisProc;


  ELSEIF (pStatus = 5) THEN /* PO-30 */
		set @GridName = 'GridPO30';

		CREATE TEMPORARY TABLE IF NOT EXISTS MyData AS (
			SELECT
					Invoice.InvoiceId,
					_x_GetFormatedValue(Vendor.VendorNo, Vendor.VendorName, @CodePosition)									as Vendor,
					IFNULL(Invoice.InvoiceNo, '') 																			AS InvoiceNo,
					Invoice.InvoiceTotal,
					Invoice.ApprovalStatusId,
					Case	when InvoiceType = 'Invoice' then
								case 	when Invoice.IsPOInvoice = true then concat('PO:', ifnull(Invoice.PONUmber, '')) 
										else 'Non PO' END
							else InvoiceType end 																			as InvoiceType,
					case	when timestampdiff(day, UTC_TIMESTAMP(), Invoice.NetTermDate) 		between 0 and 2 
							then 'Approaching the discount date.' 
							when timestampdiff(day, UTC_TIMESTAMP(), Invoice.PaymentDueDate) 	between 0 and 2
							then 'Approaching the due date.' 
							else '' end																						as AttentionMsg,
					ifnull(Invoice.Comment, '')																				AS Comment,
					IFNULL(Invoice.LastActionBy, '') 																		AS LastActionBy,
					date(Invoice.InvoiceDate)																				as InvoiceDate,
					convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone)												AS ScannedDate,
					convert_tz(Invoice.LastActionDate, 'GMT', @@session.time_zone)											AS LastActionDate
			
			FROM Invoice
					LEFT JOIN Vendor				ON Invoice.VendorId = Vendor.VendorId
			WHERE Invoice.ClientId = pClientId
					AND Invoice.IsDeleted 			= FALSE
					AND Invoice.IsPaused 			= FALSE
					AND Invoice.ApprovalStatusId 	= 3
					AND Invoice.IsPOInvoice 		= TRUE
					and Invoice.InvoiceType 		<> 'Archive'
					AND EXISTS (SELECT 1
								FROM UserInvoiceAssignment
								WHERE UserInvoiceAssignment.InvoiceId = Invoice.InvoiceId
										and UserInvoiceAssignment.HoldEndDate is not null
										and UserInvoiceAssignment.HoldEndDate > date(UTC_TIMESTAMP())
										AND DIFFDays(date(Invoice.ScannedDate), date(UTC_TIMESTAMP())) > 30
								limit 1
								)
		);



  ELSEIF (pStatus = 6) THEN /* PO-15 */
		set @GridName = 'GridPO15';
		
		CREATE TEMPORARY TABLE IF NOT EXISTS MyData AS (
			SELECT
					Invoice.InvoiceId,
					_x_GetFormatedValue(Vendor.VendorNo, Vendor.VendorName, @CodePosition)									as Vendor,
					IFNULL(Invoice.InvoiceNo, '') 																			AS InvoiceNo,
					Invoice.InvoiceTotal,
					Invoice.ApprovalStatusId,
					Case	when InvoiceType = 'Invoice' then
								case 	when Invoice.IsPOInvoice = true then concat('PO:', ifnull(Invoice.PONUmber, '')) 
										else 'Non PO' END
							else InvoiceType end 																			as InvoiceType,
					case	when timestampdiff(day, UTC_TIMESTAMP(), Invoice.NetTermDate) 		between 0 and 2 
							then 'Approaching the discount date.' 
							when timestampdiff(day, UTC_TIMESTAMP(), Invoice.PaymentDueDate) 	between 0 and 2
							then 'Approaching the due date.' 
							else '' end																						as AttentionMsg,
					ifnull(Invoice.Comment, '')																				AS Comment,
					IFNULL(Invoice.LastActionBy, '') AS LastActionBy,
					date(Invoice.InvoiceDate)																				as InvoiceDate,
					convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone)												AS ScannedDate,
					convert_tz(Invoice.LastActionDate, 'GMT', @@session.time_zone)											AS LastActionDate
	
			FROM Invoice
					LEFT JOIN Vendor				ON Invoice.VendorId = Vendor.VendorId
			WHERE Invoice.ClientId 					= pClientId
					AND Invoice.IsDeleted 			= FALSE
					AND Invoice.IsPaused 			= FALSE
					AND Invoice.ApprovalStatusId 	= 3
					AND Invoice.IsPOInvoice 		= TRUE
					and Invoice.InvoiceType 		<> 'Archive'
					AND EXISTS (SELECT 1
								FROM UserInvoiceAssignment
								WHERE UserInvoiceAssignment.InvoiceId = Invoice.InvoiceId
										and UserInvoiceAssignment.HoldEndDate is not null
										and UserInvoiceAssignment.HoldEndDate > date(UTC_TIMESTAMP())
										AND DIFFDays(date(Invoice.ScannedDate), date(UTC_TIMESTAMP())) between 16 and 30
								limit 1
								)
			);



  ELSEIF (pStatus = 7) THEN /* PO-7 */
		set @GridName = 'GridPO7';

		CREATE TEMPORARY TABLE IF NOT EXISTS MyData AS (
			SELECT
					Invoice.InvoiceId,
					_x_GetFormatedValue(Vendor.VendorNo, Vendor.VendorName, @CodePosition)									as Vendor,
					IFNULL(Invoice.InvoiceNo, '') 																			AS InvoiceNo,
					Invoice.InvoiceTotal,
					Invoice.ApprovalStatusId,
					Case	when InvoiceType = 'Invoice' then
								case 	when Invoice.IsPOInvoice = true then concat('PO:', ifnull(Invoice.PONUmber, '')) 
										else 'Non PO' END
							else InvoiceType end 																			as InvoiceType,
					case	when timestampdiff(day, UTC_TIMESTAMP(), Invoice.NetTermDate) 		between 0 and 2 
							then 'Approaching the discount date.' 
							when timestampdiff(day, UTC_TIMESTAMP(), Invoice.PaymentDueDate) 	between 0 and 2
							then 'Approaching the due date.' 
							else '' end																						as AttentionMsg,
					ifnull(Invoice.Comment, '')																				AS Comment,
					IFNULL(Invoice.LastActionBy, '') 																		AS LastActionBy,
					date(Invoice.InvoiceDate)																				as InvoiceDate,
					convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone)												AS ScannedDate,
					convert_tz(Invoice.LastActionDate, 'GMT', @@session.time_zone)											AS LastActionDate
			FROM Invoice
					LEFT JOIN Vendor				ON Invoice.VendorId = Vendor.VendorId
			WHERE Invoice.ClientId = pClientId
					AND Invoice.IsDeleted 			= FALSE
					AND Invoice.IsPaused 			= FALSE
					AND Invoice.ApprovalStatusId 	= 3
					AND Invoice.IsPOInvoice 		= TRUE
	 				and Invoice.InvoiceType 		<> 'Archive'
					AND EXISTS (SELECT 1
								FROM UserInvoiceAssignment
								WHERE UserInvoiceAssignment.InvoiceId = Invoice.InvoiceId
										and UserInvoiceAssignment.HoldEndDate is not null
										and UserInvoiceAssignment.HoldEndDate > date(UTC_TIMESTAMP())
										AND DIFFDays(date(Invoice.ScannedDate), date(UTC_TIMESTAMP())) between 8 and 15
								limit 1
								)
			);


  ELSEIF (pStatus = 8) THEN /* PO-0 */
		set @GridName = 'GridPO0';

		CREATE TEMPORARY TABLE IF NOT EXISTS MyData AS (
			SELECT
					Invoice.InvoiceId,
					_x_GetFormatedValue(Vendor.VendorNo, Vendor.VendorName, @CodePosition)									as Vendor,
					IFNULL(Invoice.InvoiceNo, '') 																			AS InvoiceNo,
					Invoice.InvoiceTotal,
					Invoice.ApprovalStatusId,
					Case	when InvoiceType = 'Invoice' then
								case 	when Invoice.IsPOInvoice = true then concat('PO:', ifnull(Invoice.PONUmber, '')) 
										else 'Non PO' END
							else InvoiceType end 																			as InvoiceType,
					case	when timestampdiff(day, UTC_TIMESTAMP(), Invoice.NetTermDate) 		between 0 and 2 
							then 'Approaching the discount date.' 
							when timestampdiff(day, UTC_TIMESTAMP(), Invoice.PaymentDueDate) 	between 0 and 2
							then 'Approaching the due date.' 
							else '' end																						as AttentionMsg,
					ifnull(Invoice.Comment, '')																				AS Comment,
					IFNULL(Invoice.LastActionBy, '') 																		AS LastActionBy,
					date(Invoice.InvoiceDate)																				as InvoiceDate,
					convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone)												AS ScannedDate,
					convert_tz(Invoice.LastActionDate, 'GMT', @@session.time_zone)											AS LastActionDate
			
			FROM Invoice
					LEFT JOIN Vendor			ON Invoice.VendorId = Vendor.VendorId
			WHERE Invoice.ClientId = pClientId
				AND Invoice.IsDeleted 			= FALSE
				AND Invoice.IsPaused 			= FALSE
				AND Invoice.ApprovalStatusId 	= 3
				AND Invoice.IsPOInvoice 		= TRUE
				and Invoice.InvoiceType 		<> 'Archive'
				AND EXISTS (SELECT 1
							FROM UserInvoiceAssignment
							WHERE UserInvoiceAssignment.InvoiceId = Invoice.InvoiceId
									and UserInvoiceAssignment.HoldEndDate is not null
									and UserInvoiceAssignment.HoldEndDate > date(UTC_TIMESTAMP())
									AND DIFFDays(date(Invoice.ScannedDate), date(UTC_TIMESTAMP())) between 1 and 7
							limit 1
							)
		);

  ELSEIF (pStatus = 9) THEN /* Approved */
		set @GridName = 'GridApproved';

		set @ApprovedPossibleException = 60;
		Call _x_GetClientParam(pClientId, 'ApprovedPossibleException', @ApprovedPossibleException);

		CREATE TEMPORARY TABLE IF NOT EXISTS MyData AS (
			SELECT
					Invoice.InvoiceId,
					_x_GetFormatedValue(Vendor.VendorNo, Vendor.VendorName, @CodePosition)									as Vendor,
					IFNULL(Invoice.InvoiceNo, '') 																			AS InvoiceNo,
					Invoice.InvoiceTotal,
					Invoice.ApprovalStatusId,
					Case	when InvoiceType = 'Invoice' then
								case 	when Invoice.IsPOInvoice = true then concat('PO:', ifnull(Invoice.PONUmber, '')) 
										else 'Non PO' END
							else InvoiceType end 																			as InvoiceType,
					case	when not timestampdiff(minute, Invoice.AprovedDate, UTC_TIMESTAMP()) 		between 0 and @ApprovedPossibleException 
							then concat('Possible integration issue.  ', timestampdiff(minute, Invoice.AprovedDate, UTC_TIMESTAMP()), ' minutes with this status.')
							else '' end																						as AttentionMsg,
					ifnull(Invoice.Comment, '')																				AS Comment,
					IFNULL(Invoice.LastActionBy, '') 																		AS LastActionBy,
					date(Invoice.InvoiceDate)																				as InvoiceDate,
					convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone)												AS ScannedDate,
					convert_tz(Invoice.LastActionDate, 'GMT', @@session.time_zone)											AS LastActionDate
			
			FROM Invoice
					LEFT JOIN Vendor				ON Invoice.VendorId = Vendor.VendorId
			WHERE Invoice.ClientId 					= pClientId
					AND Invoice.IsDeleted 			= FALSE
					AND Invoice.IsPaused 			= FALSE
					AND Invoice.ApprovalStatusId 	= 4
					and Invoice.InvoiceType 		<> 'Archive'
		);

	end if;

	if pDetails = 1 THEN
		select	* 
		from 	MyData
		order	by ApprovalStatusId, Vendor, InvoiceNo
		LIMIT	pOffset, pSize;

	else
		insert into Results(Grid, Cnt, Total)
			select	@GridName 								as Grid,
					count(*) 								as Cnt,
					ifnull(sum(ifnull(InvoiceTotal, 0)),0) 	as Total
			from 	MyData;

	end if;

	if pOffset = 0 and pSize > 500 then
		call _x_UserActivity(pUserId, Concat('Export all:', @GridName), null);
	end if;


-- call _x_AdminByStatus(88, '6096c35b-6a85-4704-8b74-c05deaa5bae2', 1, 1, 0, 10);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AdminStatusCount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AdminStatusCount`(
-- noformat
	IN pClientId 	int,
	IN pUserId 		char(36)
)
BEGIN
	declare LoopCnt int default 0;

	drop TEMPORARY TABLE IF EXISTS Results;

	CREATE TEMPORARY TABLE IF NOT EXISTS Results (
		Grid 		varchar(20),
		Cnt 		int,
		Total 		decimal(18,2)
		);

	while LoopCnt <= 9 do
		call _x_AdminByStatus(pClientId, pUserId, LoopCnt, 0, 0, 0);
		set LoopCnt = LoopCnt + 1;
		end while;

	select * from Results;

-- call _x_AdminStatusCount(88, '18b61a24-d0a4-11e9-b055-22000a1f9f3d');
-- call _x_AdminStatusCount(88, '6096c35b-6a85-4704-8b74-c05deaa5bae2');
-- call _x_AdminStatusCount(1, 'b172d913-d23e-4263-864d-cf3a413df7a2');

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AdvancedSearchFields` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AdvancedSearchFields`(IN pUserID char(38), IN pSearchType varchar(20))
ThisProc:
	BEGIN

		SELECT
			ClientID INTO @ClientId
		FROM User
		WHERE UserId = pUserId;

		--
		-- Smart search is when the usage of search fields influence the presentation
		--	The more they use the field, the higher up in the list (screen) they appear
		--
		SET @UseSmartSearch = 0;
		SELECT
			UseSmartSearch INTO @UseSmartSearch
		FROM _x_UserParameters xup
		WHERE UserId = pUserId;



		SELECT
			sf.Field,
			sf.Label,
			sf.DataType,
			sf.DependencyField
		FROM SystemAdvanceSearchFields sf
			LEFT JOIN SystemAdvanceSearchFieldsUserStats sfus
				ON sfus.SearchType = sf.SearchType
				AND sfus.Field = sf.Field
				AND sfus.UserId = pUserId
			LEFT JOIN SystemAdvanceSearchFieldsClient Client
				ON Client.SearchType = sf.SearchType
				AND Client.Field = sf.Field
				AND Client.ClientId = @ClientId
			LEFT JOIN SystemAdvanceSearchFieldsHiddenUser User
				ON User.SearchType = sf.SearchType
				AND User.Field = sf.Field
				AND User.UserId = pUserId
		WHERE sf.SearchType = pSearchType
		AND (
		IFNULL(Client.ClientHidden, 0) = 0
		AND User.UserId IS NULL
		)
		ORDER BY CASE WHEN @UseSmartSearch = 1 THEN FLOOR(IFNULL(sfus.TotalUsed, 0) / 5) ELSE 1 END DESC,
		IFNULL(Client.ClientFieldOrder, sf.FieldOrder),
		sf.Label;



	/*	
		OUTPUT
		Field:				The internal value that is passed to the search engine
		Label:				Label that is display to the client
		DataType:			Text,Check,Date,Radio,Currency,Select,MultiSelect
		DependencyField:	This Field that this is on is dependend on the field(s) listed for filtering the result set


		When the search button is pressed from the interface, every field with data will have structrued like this:
		Field char(254) ValueEntered

		for example, for the data entered in the GlobalSearch screen:
		Invoice number:	INV002
		Vendor: John smith
		Invoice Date from: 1/1/2024
		
		the data passed to the Globalsearch 
		InvoiceNo■INV002■Vendor■John smith■InvoiceDate1■2024-01-01
		
		It is also passed to the _x_AdvancedSearchFieldValues in the pDependency parameter for Select and MultiSelect to help filer the results


	*/


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AdvancedSearchFieldValues` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AdvancedSearchFieldValues`(IN pUserId varchar(36), IN pSearchType varchar(20), IN pSearchField varchar(20), IN pDependency mediumtext, IN pSearchString varchar(100))
ThisProc:
	BEGIN

-- noformat
		DECLARE DataLimit	int DEFAULT 20;

		SELECT	ClientID, ifnull(IsCloudxUser, 0)
		INTO	@ClientId, @IsCloudxUser
		FROM	User
		WHERE	UserId = pUserId;
		
		set @CodePosition = 2;
		Call _x_GetClientParam(@ClientId, 'CodePosition', @CodePosition);


		CALL _x_StringToRegEx(pSearchString);

		IF pSearchField = 'InvoiceType' THEN
			select 	InvoiceTypeName 											as Label, 
					InvoiceTypeName 											as Value,
					Case when InvoiceTypeName = 'Invoice' then 1 else 0 end 	as DefValue
			from 	ClientInvoiceType 
			where	ClientId = @ClientId
					AND Regexp_Like(InvoiceTypeName, pSearchString, 'mi')
			order	by 1;
			LEAVE ThisProc;
		ELSEIF pSearchField = 'POorNonPO' THEN
						SELECT	'PO' AS Label,		'1' AS VALUE,		0 AS DefValue
			UNION ALL	SELECT 	'Non PO',			'0',				0;
			LEAVE ThisProc;
		ELSEIF pSearchField = 'OnHold' THEN
						SELECT	'Yes' AS Label,		'1' AS VALUE,		0 AS DefValue
			UNION ALL	SELECT 	'No',				'0',				0;
			LEAVE ThisProc;
		ELSEIF pSearchField = 'DocumentType' THEN
						SELECT	'Invoice' AS Label,		'Invoice' AS VALUE,		0 AS DefValue
			UNION ALL	SELECT 'Statement',				'Statement',			0;
			LEAVE ThisProc;
		ELSEIF pSearchField = 'GLCode' THEN
			SET @DependencyValue = _x_AdvancedSearchFieldValuesDependency(pDependency, 'CompanyCode');
			SELECT
					_x_GetFormatedValue(GLCodeName, Desccription, @CodePosition)						as Label,
					GLCodeId 																			AS Value,
					0 																					AS DefValue
		   	FROM 	GLCode
		      		LEFT JOIN ClientCompany	cc			        ON cc.Id = GLCode.ClientCompanyId
		    WHERE 	GLCode.ClientId = @ClientId
					AND ifnull(cc.CompanyCode, -1) = IFNULL(@DependencyValue, ifnull(cc.CompanyCode, -1))
					AND Regexp_Like(CONCAT(IFNULL(GLCode.Desccription, ''), '■', IFNULL(GLCode.GLCodeName, '')), pSearchString, 'mi')
					AND GLCode.isActive = 1
					AND ifnull(cc.IsActive, 1) = 1			
			LIMIT 0, DataLimit;
			LEAVE ThisProc;
		ELSEIF pSearchField = 'InvoiceStatus' THEN
			SELECT	StateName  	AS Label,
					StateID  	AS VALUE,
					0 			AS DefValue
			FROM 	InvoiceStatus
			WHERE 	StateId IN (1,2,3,4,5,6,7,8,9,10,11,12,99)
			ORDER BY 1;
			LEAVE ThisProc;
		ELSEIF pSearchField = 'CompanyCode' THEN
			SELECT
					_x_GetFormatedValue(CompanyCode, Description, @CodePosition)	as Label,
					CompanyCode 													AS Value,
					0 																AS DefValue
			FROM ClientCompany cc
			WHERE ClientId = @ClientId
					AND isActive = 1
					AND Regexp_Like(CONCAT(IFNULL(cc.Description, ''), '■', IFNULL(cc.CompanyCode, '')), pSearchString, 'mi')
			LIMIT 0, DataLimit;
		ELSEIF pSearchField = 'Vendor' THEN
			SET @DependencyValue = _x_AdvancedSearchFieldValuesDependency(pDependency, 'CompanyCode');
			SELECT
					CONCAT(
								_x_GetFormatedValue(d.VendorNo, d.VendorName, @CodePosition),
								ifnull(CASE WHEN @DependencyValue IS NULL THEN CONCAT(' (', cc.CompanyCode, ')') ELSE '' END, '')
							) 													AS Label,
					d.VendorId 													AS Value,
					0 															AS DefValue
			FROM Vendor d
				left JOIN ClientCompany cc		ON cc.Id = d.ClientCompanyId
			WHERE d.ClientId = @ClientId
					AND ifnull(cc.CompanyCode, -1) = IFNULL(@DependencyValue, ifnull(cc.CompanyCode, -1))
					AND Regexp_Like(CONCAT(IFNULL(d.VendorName, ''), '■', IFNULL(d.VendorNo, '')), pSearchString, 'mi')
					AND d.isActive = 1
					AND ifnull(cc.IsActive, 1) = 1
			ORDER BY cc.CompanyCode, 1
			LIMIT 0, DataLimit;
		ELSEIF pSearchField = 'Department' THEN
			SET @DependencyValue = _x_AdvancedSearchFieldValuesDependency(pDependency, 'CompanyCode');
			SELECT
					CONCAT(
							_x_GetFormatedValue(d.DepartmentName, d.Description, @CodePosition),
							CASE WHEN @DependencyValue IS NULL THEN CONCAT(' (', cc.CompanyCode, ')') ELSE '' END
							) 															AS Label,
					d.Id 																AS Value,
					0 																	AS DefValue
			FROM Department d	
				INNER JOIN ClientCompany cc		ON cc.Id = d.ClientCompanyId
			WHERE d.ClientId = @ClientId
				AND cc.CompanyCode = IFNULL(@DependencyValue, cc.CompanyCode)
				AND d.isActive = 1
				AND ifnull(cc.IsActive, 1) = 1
				AND Regexp_Like(CONCAT(IFNULL(d.Description, ''), '■', IFNULL(d.DepartmentName, '')), pSearchString, 'mi')
			ORDER BY cc.CompanyCode, 1
			LIMIT 0, DataLimit;
		ELSEIF pSearchField = 'ReportKey' THEN
			SELECT
					r.ReportName														as Label,
					r.ReportKey 														AS Value,
					0 																	AS DefValue
		   	FROM 	Report r
					Inner join ReportClient	rc			        ON rc.ReportKey	= r.ReportKey
																	and rc.ClientId = @ClientId
		    WHERE 	Regexp_Like(r.ReportName, pSearchString, 'mi')
					AND r.IsActive = 1
			order	by 1							
			LIMIT	0, DataLimit;
			LEAVE ThisProc;
		ELSEIF pSearchField = 'User' THEN
			SELECT 	CONCAT(if(isActive=1, '', '*'), LastName, ', ', FirstName) 			AS Label,
					CAST(UserId AS char(36))											AS Value,
					0 																	AS DefValue
			FROM	User
			WHERE	ClientId = @ClientId
					and IsCloudxUser in (0, @IsCloudxUser)
					AND Regexp_Like(CONCAT(IFNULL(LastName, ''), '■', IFNULL(FirstName, '')), pSearchString, 'mi')
			order 	by IsActive Desc, Label
			LIMIT 0, DataLimit;
			LEAVE ThisProc;
		ELSEIF pSearchField = 'isScheduled' THEN
						SELECT	'Yes' AS Label,		'1' AS VALUE,		0 AS DefValue
			UNION ALL	SELECT 	'No',				'0',				0;
			LEAVE ThisProc;
		END IF;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AlertActivate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AlertActivate`(IN pAlertKey varchar(20), IN pConfirm varchar(100))
ThisProc:
	BEGIN

-- noformat

	IF IFNULL(pConfirm, 'oops') <> 'Confirm' THEN
		SELECT 'You must ''confirm'' this process';
		LEAVE ThisProc;
	END IF;
		
-- 	if NOT EXISTS (SELECT 1 FROM Alert WHERE Alertkey = pAlertKey AND isActive = 0) THEN
-- 		SELECT 'This alert is already active';
-- 		LEAVE ThisProc;
-- 	END IF;


	INSERT INTO AlertClient (AlertKey, ClientId, LastRunDateTime)
		SELECT 	Alert.AlertKey, Ids.ClientId, null
		FROM 	Alert
				CROSS JOIN (SELECT DISTINCT ClientId FROM ClientRoles) Ids
				LEFT JOIN AlertClient ac 	ON ac.AlertKey = Alert.AlertKey AND ac.ClientId = Ids.ClientId
		WHERE 	ac.AlertKey IS NULL
				AND Alert.AlertKey = pAlertKey
		ORDER BY 1,2;


	INSERT INTO AlertClientInstance (AlertKey, ClientId)
		select 	ac.AlertKey, ac.ClientId
		from	AlertClient ac
		where 	ac.AlertKey = pAlertKey
				and not exists (select 1 from AlertClientInstance chk where chk.AlertKey = ac.AlertKey);

	INSERT INTO AlertClientInstanceFields (AlertId, Field)
		SELECT	aci.AlertId, af.Field
		FROM 	AlertClientInstance aci
				inner JOIN AlertFields af ON af.AlertKey = aci.AlertKey
		WHERE 	aci.AlertKey = pAlertKey
				and not exists (select 1 from AlertClientInstanceFields chk where chk.AlertId = aci.AlertId and chk.Field = af.Field);
		
			
	UPDATE Alert a set a.isActive = 1 WHERE a.AlertKey = pAlertKey;



-- call _x_AlertActivate('DiscountDate', 'CONFIRM');
-- call _x_AlertActivate('DueDate', 'CONFIRM');
-- call _x_AlertActivate('InvoiceFlag', 'CONFIRM');



-- select * from AlertClient;
-- select * from AlertClientInstance aci;
-- select * from AlertClientInstanceFields acif;


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AlertClientHit` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AlertClientHit`(IN pAlertId int, IN pDataValue varchar(100))
ThisProc:
	BEGIN	
-- noformat

	set pDataValue = ifnull(pDataValue, '');

	INSERT INTO AlertClientInstanceHit (AlertId, DataValue)
		VALUES (pAlertId, pDataValue);

	Update 	AlertClient 
			inner join AlertClientInstance	 	on AlertClientInstance.AlertKey	= AlertClient.AlertKey
													and AlertClientInstance.ClientId	= AlertClient.ClientId
	set 	LastRunDateTime = now() 
	Where 	AlertClientInstance.AlertId = pAlertId;


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AlertClientInstanceAdd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AlertClientInstanceAdd`(IN pAlertKey varchar(20), IN pClientId int)
ThisProc:
	BEGIN

-- noformat


	INSERT INTO AlertClientInstance (AlertKey, ClientId) Values (pAlertKey, pClientId);
	SET @InsertedId = LAST_INSERT_ID();

	INSERT INTO AlertClientInstanceFields (AlertId, Field)
		SELECT	 @InsertedId, Field
		FROM 	AlertFields 
		where	AlertKey = pAlertKey;
	
	UPDATE AlertClient set isActive = 0 WHERE AlertKey = pAlertKey and ClientId = pClientId;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AlertClientInstanceDelete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AlertClientInstanceDelete`(IN pAlertId int)
ThisProc:
	BEGIN

-- noformat

	if (	select	count(*)
			from 	AlertClientInstance toDelete
					inner join AlertClientInstance AllInstances 	on AllInstances.AlertKey = toDelete.AlertKey
																		and AllInstances.ClientId = toDelete.ClientId
			where 	toDelete.AlertId = pAlertId) = 1 THEN	-- The Last one, initialize it because all there MUST be 1 instance per alert per client
		Update 	AlertClientInstanceFields set Value = ''
				where AlertId = pAlertId;

		UPDATE AlertClient
				inner join AlertClientInstance 			on AlertClientInstance.AlertKey = AlertClient.AlertKey 
															and AlertClientInstance.ClientId = AlertClient.ClientId
				set isActive = 0 
			WHERE AlertClientInstance.AlertId = pAlertId;
		Leave ThisProc;
	end if;

	delete from AlertClientInstanceHit		where AlertId = pAlertId;
	delete from AlertClientInstanceFields	where AlertId = pAlertId;
	delete from AlertClientInstance 		where AlertId = pAlertId;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AlertClientInstanceUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AlertClientInstanceUpdate`(IN pAlertId int, IN pField varchar(20), IN pValue mediumtext)
ThisProc:
	BEGIN

-- noformat
	UPDATE AlertClientInstanceFields	set Value = pValue
		WHERE	AlertId 		= pAlertId
				AND Field 		= pField;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AlertClientStatus` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AlertClientStatus`(IN pAlertKey varchar(20), IN pClientId int, IN pActive int)
ThisProc:
	BEGIN

-- noformat
	UPDATE AlertClient	set isActive = IFNULL(pActive, 0)
		WHERE 	AlertKey 		= pAlertKey
				AND ClientId 	= pClientId;


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AlertFieldValues` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AlertFieldValues`(IN pUserId varchar(36), IN pClientId int, IN pAlertKey varchar(20), IN pField varchar(20), IN pDependency mediumtext, IN pCurrentValues mediumtext, IN pSearchString varchar(100))
ThisProc:
	BEGIN

-- noformat

		DECLARE DataLimit	int DEFAULT 20;

		SELECT	IFNULL(IsCloudxUser, 0) 
		INTO	@isCloudxUser
		FROM	User
		WHERE	UserId = pUserId;

		Call _x_StringToRows(pCurrentValues, ',');

		set pCurrentValues = NULLIF(pCurrentValues, '');
		CALL _x_StringToRegEx(pSearchString);

		IF pField = 'WarningDays' THEN
						SELECT	'3 days' AS Label,	'3' AS VALUE,	CASE WHEN pCurrentValues = 3 			THEN 1 ELSE 0 END 	AS DefValue
			UNION ALL	SELECT 	'2 days',			'2',			CASE WHEN IFNULL(pCurrentValues, 2) = 2 THEN 1 ELSE 0 end
			UNION ALL	SELECT 	'1 day',			'1',			CASE WHEN pCurrentValues = 1 			THEN 1 ELSE 0 end
			UNION ALL	SELECT 	'Limit',			'0',			CASE WHEN pCurrentValues = 0 			THEN 1 ELSE 0 end;
			LEAVE ThisProc;
		ElseIF pField = 'Days' THEN
						SELECT	'4 days' AS Label,	'4' AS VALUE,	CASE WHEN pCurrentValues = 4 			THEN 1 ELSE 0 END 	AS DefValue
			UNION ALL	SELECT 	'3 days',			'3',			CASE WHEN IFNULL(pCurrentValues, 3) = 3 THEN 1 ELSE 0 end
			UNION ALL	SELECT 	'2 days',			'2',			CASE WHEN pCurrentValues = 2 			THEN 1 ELSE 0 END;
			LEAVE ThisProc;
		ELSEIF pField = 'ClientRole' THEN
			SELECT
				cr.RoleName															AS Label,
				cr.RoleId 															AS VALUE,
				CASE WHEN ids.SearchValue IS NULL THEN 0 ELSE 1 end 				AS DefValue
			FROM ClientRoles cr
					LEFT JOIN tSearchList ids 	ON ids.SearchValue = cr.RoleId
			WHERE ClientId = pClientId
					AND isInternal IN (@isCloudxUser, 0)
					AND Regexp_Like(cr.RoleName, pSearchString, 'mi')
					AND (
							pCurrentValues IS NULL
							OR ids.SearchValue IS not null
						)
			ORDER BY 1
			LIMIT 0, DataLimit;

		ELSEIF pField = 'Employee' THEN
			SELECT
				Concat(u.LastName, ', ', u.FirstName)								AS Label,
				convert(u.UserId, char(36))											AS VALUE,
				CASE WHEN ids.SearchValue IS NULL THEN 0 ELSE 1 end 				AS DefValue
			FROM User u
					LEFT JOIN tSearchList ids 	ON ids.SearchValue = u.UserId
			WHERE ClientId = pClientId
					AND u.IsCloudxUser IN (@isCloudxUser, 0)
					AND Regexp_Like(Concat(u.LastName, ', ', u.FirstName), pSearchString, 'mi')
					and u.IsActive = 1
					AND (
							pCurrentValues IS NULL
							OR ids.SearchValue IS not null
						)
			ORDER BY 1
			LIMIT 0, DataLimit;
		elseIF pField = 'InvoiceType' THEN
						SELECT	'PO' AS Label,				'1' AS VALUE,			CASE WHEN pCurrentValues = 1 			THEN 1 ELSE 0 END 	AS DefValue
			UNION ALL	SELECT 	'Non PO',					'0',					CASE WHEN pCurrentValues = 0 			THEN 1 ELSE 0 END;
			LEAVE ThisProc;
		ELSEIF pField = 'DocumentType' THEN
						SELECT	'Invoice' AS Label,			'Invoice' AS VALUE,		CASE WHEN pCurrentValues = 1 			THEN 1 ELSE 0 END 	AS DefValue
			UNION ALL	SELECT 'Statement',					'Statement',			CASE WHEN pCurrentValues = 0 			THEN 1 ELSE 0 END;
			LEAVE ThisProc;
		ELSEIF pField = 'InvoiceStatus' THEN
			SELECT	StateName  														AS Label,
					StateID  														AS VALUE,
					CASE WHEN ids.SearchValue IS NULL THEN 0 ELSE 1 end 			AS DefValue
			FROM 	InvoiceStatus
					LEFT JOIN tSearchList ids 	ON ids.SearchValue = StateID
			WHERE 	StateId IN (1,2,3,4,5,6,7,8,9,10,11,12,99)
					AND (
							pCurrentValues IS NULL
							OR ids.SearchValue IS not null
						)
			ORDER BY 1;
			LEAVE ThisProc;
		ELSEIF pField = 'CompanyCode' THEN
			SELECT
				CASE	
					WHEN CompanyCode IS NULL AND	Description IS NULL 			THEN 'N/A' 
					WHEN NULLIF(Description, '') IS NULL 							THEN LTRIM(CompanyCode) 
					WHEN NULLIF(CompanyCode, '') IS NULL 							THEN LTRIM(Description) 
					ELSE CONCAT(LTRIM(Description), ' [', LTRIM(CompanyCode), ']') 	END AS Label,
				CompanyCode 															AS Value,
				CASE WHEN ids.SearchValue IS NULL THEN 0 ELSE 1 end 					AS DefValue
			FROM ClientCompany cc
					LEFT JOIN tSearchList ids 	ON ids.SearchValue = CompanyCode
			WHERE ClientId = pClientId
					AND isActive = 1
					AND Regexp_Like(CONCAT(IFNULL(cc.Description, ''), '■', IFNULL(cc.CompanyCode, '')), pSearchString, 'mi')
					AND (
							pCurrentValues IS NULL
							OR ids.SearchValue IS not null
						)
			ORDER BY 1
			LIMIT 0, DataLimit;
		ELSEIF pField = 'Vendor' THEN
			SET @DependencyValue = _x_AdvancedSearchFieldValuesDependency(pDependency, 'CompanyCode');
			SELECT
				CONCAT(
						CASE 
							WHEN d.VendorNo IS NULL AND d.VendorName IS NULL 				THEN 'N/A' 
							WHEN NULLIF(d.VendorNo, '') IS NULL 							THEN LTRIM(d.VendorName) 
							WHEN NULLIF(d.VendorName, '') IS NULL 							THEN LTRIM(d.VendorNo) 
							ELSE CONCAT('[', LTRIM(d.VendorNo), '] ', LTRIM(d.VendorName)) 	END
							,CASE WHEN @DependencyValue IS NULL THEN CONCAT(' (', cc.CompanyCode, ')') ELSE '' END
					) 																			AS Label,
				rtrim(VendorId)																	AS Value,
				CASE WHEN ids.SearchValue IS NULL THEN 0 ELSE 1 end 							AS DefValue
			FROM Vendor d
				INNER JOIN ClientCompany cc		ON cc.Id = d.ClientCompanyId
				LEFT JOIN tSearchList ids 	ON ids.SearchValue = d.VendorId
			WHERE d.ClientId = pClientId
					AND cc.CompanyCode = IFNULL(@DependencyValue, cc.CompanyCode)
					AND Regexp_Like(CONCAT(IFNULL(d.VendorName, ''), '■', IFNULL(d.VendorNo, '')), pSearchString, 'mi')
					AND (
							pCurrentValues IS NULL
							OR ids.SearchValue IS not null
						)
			ORDER BY cc.CompanyCode, 1
			LIMIT 0, DataLimit;
		ELSEIF pField = 'Department' THEN
			SET @DependencyValue = _x_AdvancedSearchFieldValuesDependency(pDependency, 'CompanyCode');
			SELECT
				CONCAT(
						CASE
							WHEN d.Description IS NULL AND d.DepartmentName IS NULL 				THEN 'N/A' 
							WHEN NULLIF(d.Description, '') IS NULL 									THEN LTRIM(d.DepartmentName) 
							WHEN NULLIF(d.DepartmentName, '') IS NULL 								THEN LTRIM(d.Description) 
							ELSE CONCAT(LTRIM(d.Description), ' [', LTRIM(d.DepartmentName), ']') 	END
						, CASE WHEN @DependencyValue IS NULL THEN CONCAT(' (', cc.CompanyCode, ')') ELSE '' END
					) 																			AS Label,
				rtrim(d.Id)																		AS Value,
				CASE WHEN ids.SearchValue IS NULL THEN 0 ELSE 1 end								AS DefValue
			FROM Department d	
				INNER JOIN ClientCompany cc		ON cc.Id = d.ClientCompanyId
				LEFT JOIN tSearchList ids 		ON ids.SearchValue = d.Id
			WHERE d.ClientId = pClientId
					AND cc.CompanyCode = IFNULL(@DependencyValue, cc.CompanyCode)
					AND d.isActive = 1
					AND cc.IsActive = 1
					AND Regexp_Like(CONCAT(IFNULL(d.Description, ''), '■', IFNULL(d.DepartmentName, '')), pSearchString, 'mi')
					AND (
							pCurrentValues IS NULL
							OR ids.SearchValue IS not null
						)
			ORDER BY cc.CompanyCode, 1
			LIMIT 0, DataLimit;
		END IF;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AlertProcess` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AlertProcess`()
ThisProc:
	BEGIN


-- noformat
	DECLARE eof int DEFAULT 0;
	DECLARE dataAlertKey	varchar(20);
	DECLARE dataStoredProc	varchar(1000);
	DECLARE dataAlertName	varchar(1000);

	DECLARE curAlerts CURSOR FOR 
			SELECT	AlertKey, StoredProc, AlertName
			FROM 	Alert
			WHERE 	isActive = 1
					AND (
						1=2
						OR (
								Frequency = 0 -- Morning
								and not exists 	(select		1 
													from	AlertClient Run
													where	Run.AlertKey = Alert.AlertKey
                                                    		AND date(Run.LastRunDateTime) = date(UTC_TIMESTAMP())
													limit 1
													)
							)
						);
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET eof = 1;
	-- DECLARE CONTINUE HANDLER FOR SQLEXCEPTION;

	OPEN curAlerts;
NoMoreData:
	LOOP
		FETCH curAlerts INTO dataAlertKey, dataStoredProc, dataAlertName;
		IF eof = 1 THEN
			LEAVE NoMoreData;
		END IF;

		IF EXISTS (SELECT 1 FROM information_schema.ROUTINES r WHERE r.ROUTINE_NAME = dataStoredProc AND r.ROUTINE_SCHEMA = DATABASE()) THEN 
			set @AlertKey 	= dataAlertKey;
			SET @pResult 	= NULL;
			set @Statement 	= CONCAT_WS(' ', 'Call', dataStoredProc, '(@pResult)');
		
			PREPARE stmt FROM @Statement;
			EXECUTE stmt;
		
			IF @pResult is NOT NULL THEN
				set @CrLf = CONCAT(char(13),char(10));
				set @Subject = 'Alert Failed!';
				set @Body = CONCAT_WS(' ', 'The Alert [', dataAlertName, '] Failed.');
				set @Body = CONCAT(@Body, @CrLf);
				set @Body = CONCAT(@Body, @CrLf);
				set @Body = CONCAT_WS(' ',  @Body, 'Error: [', @pResult, '].');
				CALL _x_Notify(null, @Subject, @Body, 'Error', NULL, NULL, 1);
			END IF;
		ELSE
			set @CrLf = CONCAT(char(13),char(10));
			set @Subject = 'Alert Failed!';
			set @Body = CONCAT_WS(' ', 'The Alert [', dataAlertName, '] Failed.');
			set @Body = CONCAT(@Body, @CrLf);
			set @Body = CONCAT(@Body, @CrLf);
			set @Body = CONCAT_WS(' ',  @Body, 'Error: [', 'Stored procedure does not exists.', '].');
			CALL _x_Notify(null, @Subject, @Body, 'Error', NULL, NULL, 1);
		end IF;
	

	END LOOP;
	CLOSE curAlerts;	


	-- Housekeeping
	-- Clear all data older that 2 months
	delete from AlertClientHit where RunDateTime <= DATE_SUB(UTC_TIMESTAMP(), interval 60 day);

	
	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AlertProcess_NetTerms` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AlertProcess_NetTerms`(INOUT pResult varchar(5000))
ThisProc:
	BEGIN	
-- noformat

	declare CONST_ALERTKEY 	varchar(20) default 'DiscountDate';
	DECLARE eof 			int DEFAULT 0;
	DECLARE dataClientId	int;
	DECLARE dataAlertId		int;
	DECLARE dataField		varchar(20);
	DECLARE dataValue		varchar(1000);

	DECLARE varUsers 		text DEFAULT NULL;

	DECLARE curAlertData CURSOR FOR 
			SELECT 	ac.ClientId, aci.AlertId, acif.Field, acif.Value 
			FROM 	Alert a
					INNER JOIN AlertClient ac						ON 	ac.AlertKey = a.AlertKey
					INNER JOIN Client c 							ON 	c.ClientId = ac.ClientId
					INNER JOIN AlertClientInstance aci				ON 	aci.AlertKey = ac.AlertKey
																		AND aci.ClientId = ac.ClientId
					inner JOIN AlertClientInstanceFields acif 		ON 	acif.AlertId 	= aci.AlertId
			WHERE 	a.AlertKey = CONST_ALERTKEY
					and a.isActive = 1
					AND ac.isActive = 1
					AND c.IsActive = 1
					AND (
							1=2
							OR (a.Frequency = 0 AND NOT EXISTS (select		1 
																	from	AlertClientInstanceHit Hit 
																	where	Hit.AlertId 		= aci.AlertId
				                                                    		AND date(RunDateTime) = date(UTC_TIMESTAMP())
																	limit 1)
								)
						)
			ORDER BY 1,2,3;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET eof = 1;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
		@Msg =  MESSAGE_TEXT;
		SET pResult = @Msg;
	END;

	select Count(*), 0 into @FieldCountMAX, @FieldCount from AlertFields where AlertKey = CONST_ALERTKEY;

	OPEN curAlertData;
ProcessData:
	LOOP
		FETCH curAlertData INTO dataClientId, dataAlertId, dataField, dataValue;
		if eof = 1 THEN
			Leave ProcessData;
		end if;

		IF dataField = 'WarningDays' THEN
			set @WarningDays = CONVERT(dataValue, UNSIGNED);
			set @WarningDays = ifnull(nullif(@WarningDays, ''), 2);
		elseIF dataField = 'ClientRole' THEN
			set @ClientRole = dataValue;
		else
			SET @ErrMsg = CONCAT('Undefined FIELD; [', dataField, '].');
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @ErrMsg, MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;
		set @FieldCount = @FieldCount + 1;


		IF @FieldCount = @FieldCountMAX then 
			CALL _x_SetClientTimeZone(dataClientId);

			set @TotalCount		= 0;
			set @TotalAmount 	= 0;
			set @TotalDiscount	= 0;

			SELECT	COUNT(*), SUM(InvoiceTotal), SUM(NetTermDiscount)
			INTO 	@TotalCount, @TotalAmount, @TotalDiscount
			FROM 	Invoice 
			WHERE 	IsDeleted = FALSE
					AND InvoiceType = 'Invoice'
					AND NULLIF(Invoice.UserField5, '') IS NULL -- No payment number
					AND ApprovalStatusId IN (1,2,3,4,5,6)
					AND NetTermDate >= date('2023-03-04')
					AND DATEDIFF(date(NetTermDate), UTC_TIMESTAMP()) <= IFNULL(@WarningDays, 1)
					AND NetTermDiscount > 0
					AND ClientId = dataClientId;

			IF @TotalCount > 0 THEN
				SET SESSION group_concat_max_len = 5000000;
				Call _x_StringToRows(@ClientRole, ',');
				SELECT	GROUP_CONCAT(DISTINCT u.UserId SEPARATOR ';') 
				INTO 	varUsers
				FROM	User u
						INNER JOIN ClientRoles cr			ON cr.ClientId = u.ClientId
						INNER JOIN ClientUserRoles cur 		ON cur.RoleId = cr.RoleId
																AND cur.UserId = u.UserId
						INNER JOIN tSearchList Ids			ON Ids.SearchValue = cur.RoleId
				WHERE 	u.IsActive = 1 
						AND u.ClientId = dataClientId;


				set @Subject = 'NET TERMS Approching';
				set @Body = CONCAT_WS(' ', 'There are', @TotalCount, 'invoices totaling', CONCAT('$',FORMAT(@TotalAmount,2,'en_US')), 'for a total savings of',CONCAT('$',FORMAT(@TotalDiscount,2,'en_US')));
				set @Body = CONCAT_WS(' ', @Body, 'that will be past due within the next', @WarningDays, 'day(s).');	

				IF NULLIF(varUsers, '') is not null THEN 
					CALL _x_Notify(varUsers, @Subject, @Body, 'Alert', NULL, NULL, 1);
				END IF;
				
				CALL _x_AlertClientHit(dataAlertId, null);
			END IF;

			set @FieldCount 	= 0;
			set @ClientRole		= NULL;
			set @WarningDays	= NULL;
		end IF;

	END LOOP;
	CLOSE curAlertData;	


-- set @A = NULl;
-- call _x_AlertProcess_NetTerms(@A);
-- select @A;
-- 
-- 
-- select * from AlertClient;
-- select * from AlertClientInstance aci where AlertId = 2;
-- select * from AlertClientInstanceFields acif where AlertId = 2;
-- select * from AlertClientInstanceHit acih where AlertId = 2;
-- 
-- -- select * from ClientRoles where ClientId = 88; -- 23
-- -- update AlertClientInstanceFields set Value = '23' where AlertId = 2 and Field = 'ClientRole';
-- -- update AlertClient ac set isActive = 1 where AlertKey = 'DiscountDate' and ClientId = 88;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AlertRead` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AlertRead`(IN pUserId char(36), in pClientId int, IN pAlertKey varchar(20))
ThisProc:
	BEGIN

-- noformat

		SELECT	IFNULL(IsCloudxUser, 0)
		INTO	@isCloudxUser
		FROM	User
		WHERE	UserId = pUserId;


		IF pAlertKey IS NULL THEN
			SELECT
					AlertGrouping,
					CONCAT(AlertName, CASE WHEN isInternal = 1 THEN ' (Internal)' ELSE '' END) 				AS Name,
					ac.isActive,
					Alert.AlertKey	
			FROM 	Alert 
					inner JOIN AlertClient ac ON ac.AlertKey = Alert.AlertKey
			WHERE 	Alert.isActive = 1
					AND ac.ClientId = pClientId
					AND Alert.isInternal IN (@isCloudxUser, 0)
			ORDER 	BY SortOrderGrouping, AlertGrouping, SortOrderName, Alert.AlertName;
			LEAVE ThisProc;
		END IF;


		SELECT
				aci.AlertId,
				af.Field,
				af.Label,
				af.DataType,
				af.DependencyField,
				acf.Value
		FROM	AlertClientInstance aci
				inner JOIN AlertClientInstanceFields acf 	ON 	acf.AlertId = aci.AlertId 
				inner join AlertFields af 					on 	af.AlertKey = aci.AlertKey	
																AND af.Field = acf.Field 
		WHERE	aci.AlertKey		= pAlertKey
				and aci.ClientId	= pClientId

		ORDER 	BY aci.AlertId, af.FieldOrder, af.Label;
		


-- select * from User where ClientID = 88;

-- call _x_AlertRead('01b8668d-37d2-4e87-aef9-af4c3f18694e', null);
-- call _x_AlertRead('01b8668d-37d2-4e87-aef9-af4c3f18694e', 'DiscountDate')
-- call _x_AlertRead('01b8668d-37d2-4e87-aef9-af4c3f18694e', 'DueDate')

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AuditorComment` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AuditorComment`(
-- noformat
	in		pType 			int,				-- 0=Read comment	1=Save Back
	IN		pUserId 		char(36),
	IN		pInvoiceId 		int,
	INOUT	pDate 			datetime,
	INOUT	pComment 		Longtext)
ThisProc:BEGIN

	if pType = 0 THEN
		select 	EntryDate, Comment
		into 	pDate, pComment
		from 	AuditorsComments
		where 	AuditorId = pUserId
				and InvoiceId = pInvoiceId;
		Leave ThisProc;
	end if;


	set pComment = nullif(pComment, '');

	if pComment is null then
		IF not exists (select 1 from AuditorsComments where AuditorID = pUserId and InvoiceId = pInvoiceId limit 1) then
			LEAVE ThisProc;
		END IF;
		call _x_UserActivity(pUserId, 'Auditor:CommentDelete', pInvoiceId);
		delete from AuditorsComments where AuditorID = pUserId and InvoiceId = pInvoiceId;
		Update AuditorAssigment set IsAudited = 0
			where AuditorID = pUserId and InvoiceId = pInvoiceId;
	else
		call _x_UserActivity(pUserId, 'Auditor:CommentAdd', pInvoiceId);
		IF not exists (select 1 from AuditorsComments where AuditorID = pUserId and InvoiceId = pInvoiceId limit 1) then
			insert into AuditorsComments (EntryDate, AuditorID, InvoiceID, Comment)
				values (UTC_TIMESTAMP(), pUserId, pInvoiceId, pComment);
			Update AuditorAssigment set IsAudited = 0
				where AuditorID = pUserId and InvoiceId = pInvoiceId;
		else
			Update AuditorsComments set EntryDate = UTC_TIMESTAMP(), Comment = pComment
				where AuditorID = pUserId and InvoiceId = pInvoiceId;
		END IF;
	end if;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AuditorDetail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AuditorDetail`(
-- noformat
		IN `pType` 		tinyint,
		IN `pClientId` 	int,
		IN `pUserId` 	char(36),
		IN `pOffset` 	int,
		IN `pSize` 		int)
ThisProc:BEGIN

	set @CodePosition = 2;
	Call _x_GetClientParam(pClientId, 'CodePosition', @CodePosition);

	call _x_SetClientTimeZone(pClientId);


	IF (pType = 0) THEN
		select 	UserId,
				CONCAT(case when User.isActive = 1 then '' else '* ' end, LastName, ', ', FirstName)	AS FullName
	    FROM	User
	    WHERE	ClientId = pClientId
				and IsCloudxUser = 0
				and exists (SELECT	1
							FROM	ClientUserRoles cur
									INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
									INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
							WHERE	cur.UserId = User.UserId
									and crf.FunctionKey = 'InvoiceAuditor')
		order	by isActive desc, LastName, FirstName
		limit 	pOffset, pSize;
	ELSEIF (pType = 1) THEN
		SELECT
				Invoice.InvoiceId,
				AuditorAssigment.AssigmentDate,
				Invoice.InvoiceNo,
				_x_GetFormatedValue(Vendor.VendorNo, Vendor.VendorName, @CodePosition)								as Vendor,
				Invoice.InvoiceTotal						 														AS InvoiceTotal,
				Invoice.Comment,
				case when ac.CommentId is null then 0 else 1 end													as isLocked
		FROM	AuditorAssigment
				INNER JOIN Invoice				  	ON AuditorAssigment.InvoiceID = Invoice.InvoiceId
				INNER JOIN Vendor					ON Invoice.VendorId = Vendor.VendorId
				left join AuditorsComments ac 		ON ac.InvoiceId = Invoice.InvoiceID
														and ac.AuditorID = AuditorAssigment.AuditorID
		WHERE	AuditorAssigment.AuditorID = pUserId
				AND Invoice.IsDeleted = FALSE
		ORDER	BY 4, 3
		LIMIT	pOffset, pSize;
	ELSEIF (pType = 2) THEN	
		SELECT
				_x_GetFormatedValue(Vendor.VendorNo, Vendor.VendorName, @CodePosition)											as Vendor,
				Case	when InvoiceType = 'Invoice' then
							case when Invoice.IsPOInvoice = true then concat('PO:', ifnull(Invoice.PONUmber, '')) 
							else 'Non PO' END
						else InvoiceType end 																					as InvoiceType,
				IFNULL(Invoice.InvoiceNo, '') 																					AS InvoiceNo,
				date(Invoice.InvoiceDate) 																						AS InvoiceDate,
				InvoiceTotal					 																				AS InvoiceTotal,
				Concat(Auditor.Lastname, ', ', Auditor.Firstname) 																As AuditorName,
				convert_tz(Audit.EntryDate, 'GMT', @@session.time_zone)															as EntryDate,
				Audit.Comment,			
				Invoice.InvoiceId,
				Audit.AuditorId
		FROM	Invoice
				inner join AuditorsComments	Audit		on Audit.InvoiceId 	= Invoice.InvoiceId
				inner join User	Auditor					on Auditor.UserId 	= Audit.AuditorID
				LEFT JOIN Vendor						ON Invoice.VendorId = Vendor.VendorId
		WHERE 	Invoice.ClientId = pClientId
		order 	by 1, 3, Audit.EntryDate, AuditorName
		limit 	pOffset, pSize;
		
  END IF;

-- call _x_AuditorDetail(2, 1, null, 0, 10);


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AuditorEndReview` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AuditorEndReview`(
-- noformat
		IN pUserId	 	char(36)
		)
ThisProc:BEGIN

	call _x_UserActivity(pUserId, 'Auditor:EndReview', null);

	select	ClientId 
	into 	@ClientId
	from 	User 
	where 	UserId = pUserId;

	Insert into AuditorReviewHistory (ClientId, ClosedBy, AuditorID, EntryDate, Comment, InvoiceID)
		select	@ClientId, pUserId, AuditorID, EntryDate, Comment, InvoiceID
		from 	AuditorsComments ac
				inner join User 	on User.UserId = ac.AuditorID
		where 	User.ClientId = @ClientId;

	Update	User
	set 	isActive = 0
	where 	ClientId = @ClientId
			and IsCloudxUser = 0
			and exists (SELECT	1
						FROM	ClientUserRoles cur
								INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
								INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
						WHERE	cur.UserId = User.UserId
								and crf.FunctionKey = 'InvoiceAuditor');

	delete 	Data
	from 	AuditorsComments Data
			inner join User 	on User.UserId = Data.AuditorID
	where 	User.ClientId = @ClientId;

	delete 	Data
	from 	AuditorAssigment Data
			inner join User 	on User.UserId = Data.AuditorID
	where 	User.ClientId = @ClientId;

/*
start TRANSACTION;
select count(*) from AuditorAssigment;
call _x_AuditorEndReview ('2c92b404-048c-11ee-8962-02c102131f31');
select * from AuditorReviewHistory;
select * from AuditorsComments;
select count(*) from AuditorAssigment;
select * from UserActivity ua order by 1 desc limit 10;
rollback;
*/

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AuditorHistory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AuditorHistory`(
-- noformat
		in pType 		tinyint,
		IN pUserId	 	char(36),
		in pAuditorId	char(36),
		in pDateStr		varchar(10),
		in pInvoiceId	int
		)
ThisProc:BEGIN

	select	ClientId 
	into 	@ClientId
	from 	User 
	where 	UserId = pUserId;

	call _x_SetClientTimeZone(@ClientId);

	if pType = 0 THEN
		select	Distinct date(ClosedDate)			as Date
		from 	AuditorReviewHistory
		where	ClientId = @ClientId
		Order 	by date(ClosedDate) desc;
		Leave ThisProc;
	end if;

	set @CodePosition = 2;
	Call _x_GetClientParam(@ClientId, 'CodePosition', @CodePosition);

	set @Info 	= '';
	if pInvoiceId is not null THEN
		select 	CONCAT('For invoice no: [', ifnull(Invoice.InvoiceNo, ''), '], Vendor: ', _x_GetFormatedValue(Vendor.VendorNo, Vendor.VendorName, @CodePosition))
		into 	@Info 	
		from 	Invoice
				LEFT JOIN Vendor						ON Invoice.VendorId = Vendor.VendorId
		where 	Invoice.ClientId = @ClientId
				and Invoice.InvoiceId = pInvoiceId;
	else
		if pAuditorId is null THEN
			set @Info 	= 'All Auditors';
		else
			SELECT	CONCAT('For: ', u.LastName, ', ', u.FirstName) 
			into 	@Info
			FROM	User u
			WHERE	u.UserId = pUserId;
		end if;
		set @Info 	= CONCAT(@Info, case when pDateStr is null then ' and for all time' else concat(' for audit ending', pDateStr) end);
	end IF;

	call _x_UserActivity(pUserId, 'Auditor:History', @Info);

	SELECT
			_x_GetFormatedValue(Vendor.VendorNo, Vendor.VendorName, @CodePosition)											as Vendor,
			Case	when InvoiceType = 'Invoice' then
						case when Invoice.IsPOInvoice = true then concat('PO:', ifnull(Invoice.PONUmber, '')) 
						else 'Non PO' END
					else InvoiceType end 																					as InvoiceType,
			IFNULL(Invoice.InvoiceNo, '') 																					AS InvoiceNo,
			date(Invoice.InvoiceDate)								 														AS InvoiceDate,
			Invoice.InvoiceTotal			 																				AS InvoiceTotal,
			Concat(Auditor.Lastname, ', ', Auditor.Firstname) 																As AuditorName,
			convert_tz(Audit.EntryDate, 'GMT', @@session.time_zone) 														as EntryDate,
			Audit.Comment,			
			Invoice.InvoiceId,
			Audit.AuditorId
	FROM	Invoice
			inner join AuditorReviewHistory	Audit	on Audit.InvoiceId 	= Invoice.InvoiceId
			inner join User	Auditor					on Auditor.UserId 	= Audit.AuditorID
			LEFT JOIN Vendor						ON Invoice.VendorId = Vendor.VendorId
	WHERE 	Invoice.ClientId = @ClientId
			and date(Audit.ClosedDate)		= date(ifnull(pDateStr, Audit.ClosedDate))
			and Audit.AuditorId 			= ifnull(pAuditorId, Audit.AuditorId)
			and Audit.InvoiceID				= ifnull(pInvoiceId, Audit.InvoiceID)
	order 	by 1, 3, Audit.EntryDate, AuditorName;

/*

call _x_AuditorHistory(1, '2c92b404-048c-11ee-8962-02c102131f31', null, null, 663275332);


start TRANSACTION;
select count(*) from AuditorAssigment;
call _x_AuditorEndReview ('2c92b404-048c-11ee-8962-02c102131f31');
select * from AuditorReviewHistory;
select * from AuditorsComments;
select count(*) from AuditorAssigment;
select * from UserActivity ua order by 1 desc limit 10;
rollback;
*/

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AuditorSearch` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AuditorSearch`(
-- noformat
	IN pUserId 			varchar(36),							-- GlobalSearch■stop
	IN pSearchString 	mediumtext,								-- InvoiceNo■12335■InvoiceAmount2■45000		
	IN pRows 			int,									-- 10
	IN pPage 			int)
ThisProc:
	BEGIN
-- noformat	
		DECLARE done int DEFAULT FALSE;
		DECLARE DataValue mediumtext;
		DECLARE curParms CURSOR FOR SELECT * FROM tSearchList;
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

		if pPage <= 1 and pRows >= 500 then
			call _x_UserActivity(pUserId, 'Export All:AuditorSearch', pSearchString);
		else
			call _x_UserActivity(pUserId, 'AuditorSearch', concat(pSearchString, ' /Page:', pPage));
		end if;

		SET @InvoiceNo = NULL;
		SET @Vendor = NULL;
		SET @InvoiceAmount1 = NULL;
		SET @InvoiceAmount2 = NULL;
		SET @InvoiceType = NULL;
		SET @PONumber = NULL;
		SET @InvoiceDate1 = NULL;
		SET @InvoiceDate2 = NULL;
		SET @ScanDate1 = NULL;
		SET @ScanDate2 = NULL;
		SET @LastActionDate1 = NULL;
		SET @LastActionDate2 = NULL;
		SET @Comment = NULL;
		SET @Status = NULL;
		SET @Department = NULL;
		SET @CompanyCode = NULL;
		set @POorNonPO = NULL;
		set @CheckNumber = null;
		set @isConfidential = NULL;
		set @GLCode = null;

		-- Break up the Data passed into the following order
		CALL _x_StringToRows(pSearchString, '■');

		IF MOD((SELECT COUNT(*) FROM tSearchList), 2) <> 0 THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Improperly coded search string; Parameters not paired.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;



		OPEN curParms;
	readParms:
		LOOP
			FETCH curParms INTO DataValue;
			IF done THEN
				LEAVE readParms;
			END IF;
			SET @DataValue = DataValue;
			IF DataValue = 'InvoiceNo' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceNo = DataValue;
			ELSEIF DataValue = 'Vendor' THEN
				FETCH curParms INTO DataValue;
				SET @Vendor = DataValue;
			ELSEIF DataValue = 'InvoiceAmount1' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceAmount1 = CAST(DataValue AS decimal(18, 2));
			ELSEIF DataValue = 'InvoiceAmount2' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceAmount2 = CAST(DataValue AS decimal(18, 2));
			ELSEIF DataValue = 'InvoiceType' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceType = DataValue;
			ELSEIF DataValue = 'POorNonPO' THEN
				FETCH curParms INTO DataValue;
				SET @POorNonPO = DataValue;
			ELSEIF DataValue = 'CheckNumber' THEN
				FETCH curParms INTO DataValue;
				SET @CheckNumber = DataValue;
			ELSEIF DataValue = 'isConfidential' THEN
				FETCH curParms INTO DataValue;
				SET @isConfidential = CASE WHEN DataValue = 'True' THEN 1 ELSE 0 END;
			ELSEIF DataValue = 'GLCode' THEN
				FETCH curParms INTO DataValue;
				SET @GLCode = DataValue;
			ELSEIF DataValue = 'PONumber' THEN
				FETCH curParms INTO DataValue;
				SET @PONumber = DataValue;
			ELSEIF DataValue = 'InvoiceDate1' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceDate1 = DATE(DataValue);
			ELSEIF DataValue = 'InvoiceDate2' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceDate2 = DATE(DataValue);
			ELSEIF DataValue = 'ScanDate1' THEN
				FETCH curParms INTO DataValue;
				SET @ScanDate1 = DATE(DataValue);
			ELSEIF DataValue = 'ScanDate2' THEN
				FETCH curParms INTO DataValue;
				SET @ScanDate2 = DATE(DataValue);
			ELSEIF DataValue = 'LastActionDate1' THEN
				FETCH curParms INTO DataValue;
				SET @LastActionDate1 = DATE(DataValue);
			ELSEIF DataValue = 'LastActionDate2' THEN
				FETCH curParms INTO DataValue;
				SET @LastActionDate2 = DATE(DataValue);
			ELSEIF DataValue = 'Comment' THEN
				FETCH curParms INTO DataValue;
				SET @Comment = DataValue;
			ELSEIF DataValue = 'Department' THEN
				FETCH curParms INTO DataValue;
				SET @Department = DataValue;
			ELSEIF DataValue = 'InvoiceStatus' THEN
				FETCH curParms INTO DataValue;
				SET @Status = DataValue;
			ELSEIF DataValue = 'CompanyCode' THEN
				FETCH curParms INTO DataValue;
				SET @CompanyCode = DataValue;
			ELSE
				SET @ErrMsg = CONCAT('Improperly coded search string; Unknown keyword [', DataValue, '].');
				SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @ErrMsg, MYSQL_ERRNO = 1;
				LEAVE ThisProc;
			END IF;

			IF @isGlobalSearch = FALSE THEN
				INSERT INTO SystemAdvanceSearchFieldsUserStats (SearchType, Field, UserId, TotalUsed)
					VALUES ('AuditSearch', REPLACE(REPLACE(@DataValue, '1', '#'), '2', '#'), pUserId, 1)
				ON DUPLICATE KEY UPDATE TotalUsed = TotalUsed + 1;
			END IF;


		END LOOP;
		CLOSE curParms;

		SELECT ClientId INTO @ClientId FROM User WHERE UserId = pUserId;


		set @SplitChar = null;
		select SplitterCharacter 	into @SplitChar 	from ClientPONumberSplitter 	where ClientId = @ClientId;
		set @SplitChar = ifnull(@SplitChar, '|');

		set @CodePosition = 2;
		call _x_SetClientTimeZone(@ClientId);
		Call _x_GetClientParam(@ClientId, 'CodePosition', @CodePosition);

	

		drop TEMPORARY TABLE IF EXISTS GLCodeInInvoice;
		CREATE TEMPORARY TABLE IF NOT EXISTS GLCodeInInvoice AS (
				select InvoiceId from PendingApprovalHistory where GLCodeId = @GLCode
				union all select InvoiceId from TempApprovalHistory where GLCodeId = @GLCode
				union all select InvoiceId from ApprovalHistory where GLCodeId = @GLCode
			);



		SET pRows = IFNULL(pRows, 10);
		SET pPage = IFNULL(pPage, 1);
		SET pPage = ((pPage - 1) * pRows);
		SET @Sep = CHAR(254);


		CALL _x_StringToRegEx(@Comment);

		SELECT
				Invoice.InvoiceId,
				_x_GetFormatedValue(Vendor.VendorNo, Vendor.VendorName, @CodePosition)											as Vendor,
				IFNULL(Invoice.InvoiceNo, '') 																					AS InvoiceNo,
				FORMAT(Invoice.InvoiceTotal, 2) 																				AS InvoiceTotal,
				_x_GetFormatedValue(ClientCompany.CompanyCode, ClientCompany.Description, @CodePosition)						as Company,
				CONCAT(InvoiceStatus.StateName, CASE WHEN IsPaused = 1 THEN '/Paused' ELSE '' END) 								AS InvoiceStatus,
					Case	when InvoiceType = 'Invoice' then
								case when Invoice.IsPOInvoice = true then concat('PO:', ifnull(Invoice.PONUmber, '')) else 'Non PO' END
							else InvoiceType end 																				as InvoiceType,
				case	when timestampdiff(day, UTC_TIMESTAMP(), Invoice.NetTermDate) 		between 0 and 2 
						then concat('Approaching the discount date.', Invoice.NetTermDate)
						when timestampdiff(day, UTC_TIMESTAMP(), Invoice.PaymentDueDate) 	between 0 and 2
						then 'Approaching the due date.' 
						else '' end																								as AttentionMsg,
				concat(ifnull(concat(nullif(PausedInvoice.Comment, ''), char(13), char(10)), ''), ifnull(Invoice.Comment, '')) 	AS Comment,
				IFNULL(Invoice.LastActionBy, '') 																				AS LastActionBy,
				date(Invoice.InvoiceDate) 																						AS InvoiceDate,
				convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone)														AS ScannedDate,
				convert_tz(Invoice.LastActionDate, 'GMT', @@session.time_zone)													AS LastActionDate
		FROM	Invoice
				INNER JOIN InvoiceStatus 		ON InvoiceStatus.StateId = Invoice.ApprovalStatusId
				left join PaymentStatus ps		ON Invoice.InvoiceId = ps.InvoiceId
				left join _x_PaymentStatus xps	on xps.Id = ps.Id
				left JOIN PausedInvoice 		ON PausedInvoice.InvoiceId = Invoice.InvoiceId
				LEFT JOIN Vendor				ON Invoice.VendorId = Vendor.VendorId
				LEFT JOIN ClientCompany  		ON ClientCompany.CompanyCode = Invoice.CompanyCode
													and ClientCompany.ClientId = Invoice.ClientId
		WHERE 	Invoice.ClientId = @ClientId
				AND Invoice.IsDeleted = FALSE
				AND Invoice.InvoiceNo = ifnull(@InvoiceNo, Invoice.InvoiceNo)
				AND Regexp_Like(concat(IFNULL(Invoice.Comment, ''), @Sep, IFNULL(PausedInvoice.Comment, '')), @Comment, 'mi')
				AND Invoice.InvoiceTotal BETWEEN IFNULL(@InvoiceAmount1, Invoice.InvoiceTotal) AND IFNULL(@InvoiceAmount2, Invoice.InvoiceTotal)
				AND Invoice.InvoiceType = IFNULL(@InvoiceType, Invoice.InvoiceType)
				AND Invoice.IsPOInvoice = IFNULL(@POorNonPO, Invoice.IsPOInvoice)
				AND ifnull(xps.PaymentReference, '') = ifnull(IFNULL(@CheckNumber, xps.PaymentReference), '')
--				AND ifnull(Invoice.CheckNumber, '') = ifnull(IFNULL(@CheckNumber, Invoice.CheckNumber), '')
				AND ifnull(Invoice.IsConfidential, 0) = IFNULL(@isConfidential, ifnull(Invoice.IsConfidential, 0))
				and concat(@SplitChar, ifnull(Invoice.PONumber, ''), @SplitChar) like Concat('%', @SplitChar, ifnull(@PONumber, ''), @SplitChar, '%')
				AND IFNULL(Invoice.CompanyCode, '') = IFNULL(IFNULL(@CompanyCode, Invoice.CompanyCode), '')
				AND Invoice.VendorId = IFNULL(@Vendor, Invoice.VendorId)
				AND Invoice.InvoiceDate BETWEEN IFNULL(@InvoiceDate1, Invoice.InvoiceDate) AND IFNULL(@InvoiceDate2, Invoice.InvoiceDate)
				AND Invoice.ScannedDate BETWEEN IFNULL(@ScanDate1, Invoice.ScannedDate) AND IFNULL(@ScanDate2, Invoice.ScannedDate)
				AND Invoice.LastActionDate BETWEEN IFNULL(@LastActionDate1, Invoice.LastActionDate) AND IFNULL(@LastActionDate2, Invoice.LastActionDate)
				AND LOCATE(CONCAT(',', IFNULL(Invoice.ApprovalStatusId, -1), ','), CONCAT('%,', IFNULL(IFNULL(@Status, Invoice.ApprovalStatusId), -1), ',%')) > 0
				AND LOCATE(CONCAT(',', IFNULL(Invoice.VendorSiteId, -1), ','), CONCAT('%,', IFNULL(IFNULL(@Department, Invoice.VendorSiteId), -1), ',%')) > 0
				and (
						@GLCode is null
						or (
							@GLCode is not NULL
							and exists (select 1 from GLCodeInInvoice chk where chk.InvoiceId = Invoice.InvoiceId limit 1)
							)
					)
		ORDER BY Date_format(ifnull(Invoice.LastActionDate, UTC_TIMESTAMP()), '%Y%m') desc, 2, 3 DESC 
		LIMIT pPage, pRows;

		-- call _x_AuditorSearch('2c92b404-048c-11ee-8962-02c102131f31', 'InvoiceAmount1■1000.00■InvoiceAmount2■2000.00', 10, 1);

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AuditorUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AuditorUpdate`(
-- noformat
	IN pType 			tinyint,
	IN pAssignedBy 		char(36),
	IN pUserId 			char(36),
	IN pInvoiceId 		int,
	IN pDate 			datetime)
ThisProc:BEGIN

	IF (pType = 1) THEN
		IF not exists (select 1 from AuditorAssigment where AuditorID = pUserId and InvoiceId = pInvoiceId limit 1) then
			call _x_UserActivity(pAssignedBy, 'Auditor:Assign', concat(pUserId, '■', pInvoiceId));
	
			INSERT INTO AuditorAssigment (AssignedBy, AssigmentDate, AuditorID, InvoiceID, IsAudited)
				VALUES (pAssignedBy, UTC_TIMESTAMP(), pUserId, pInvoiceId, 0);
		end if;
	else
		IF exists (select 1 from AuditorsComments where AuditorID = pUserId and InvoiceId = pInvoiceId limit 1) then
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This Auditor already has commented on this Invoice', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;
		call _x_UserActivity(pAssignedBy, 'Auditor:Unassign', concat(pUserId, '■', pInvoiceId));
		DELETE	FROM AuditorAssigment
				WHERE AuditorID = pUserId
				AND InvoiceID = pInvoiceId;
	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_BatchById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_BatchById`(
	IN `pClientId` int,
	IN `pBatchId` int
)
BEGIN

  SELECT
    Invoice.InvoiceId,
    IFNULL(Invoice.InvoiceNo, '') AS InvoiceNo,
    COUNT(InvoiceDocs.InvoiceId) AS PageCount,
    IFNULL(CONCAT(Vendor.VendorNo, ', ', Vendor.VendorName), '') AS VendorName,
    IFNULL(CONCAT('$', FORMAT(Invoice.InvoiceTotal, 2)), '') AS InvoiceTotal,
    IFNULL(Invoice.InvoiceDate, '') AS InvoiceDate,
    Invoice.InvoiceType
  /*Invoice.CaptureBatchId*/

  FROM Invoice
    LEFT JOIN InvoiceDocs
      ON Invoice.InvoiceId = InvoiceDocs.InvoiceId
    LEFT JOIN Vendor
      ON Invoice.VendorId = Vendor.VendorId
  WHERE Invoice.ClientId = pClientId
  AND Invoice.IsDeleted = FALSE
  AND Invoice.BatchID = pBatchId;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_BatchList` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_BatchList`(
	IN `pType` tinyint,
	IN `pClientId` int,
	IN `pDateFrom` date,
	IN `pDateTo` date,
	IN `pBatchType` varchar(50),
	IN `pBatchSource` varchar(50),
	IN `pOffset` int,
	IN `pSize` int
)
BEGIN

  IF (pType = 0) THEN
    /* List : Batch */

    SELECT
      ID AS BatchId,
      BatchName,
      `Source`,
      BatchType,
      IFNULL(CreatedDate, '') AS CreatedDate

    FROM Batch
    WHERE ClientId = pClientId
    AND (pBatchType IS NULL
    OR BatchType = pBatchType)
    AND (pBatchSource IS NULL
    OR `Source` = pBatchSource)
    AND (pDateFrom IS NULL
    OR CreatedDate >= pDateFrom)
    AND (pDateTo IS NULL
    OR CreatedDate < DATE_ADD(pDateTo, INTERVAL 1 DAY))
    ORDER BY CreatedDate DESC LIMIT pOffset, pSize;

  ELSE
    /* List : Invoice */

    SELECT
      Invoice.InvoiceId,
      IFNULL(Invoice.InvoiceNo, '') AS InvoiceNo,
      (SELECT
          COUNT(InvoiceDocs.InvoiceId) AS PageCount
        FROM InvoiceDocs
        WHERE Invoice.InvoiceId = InvoiceDocs.InvoiceId) AS PageCount,
		IFNULL(CONCAT(Vendor.VendorNo, ', ', Vendor.VendorName), '') AS VendorName,
		IFNULL(CONCAT('$', FORMAT(Invoice.InvoiceTotal, 2)), '') AS InvoiceTotal,
		IFNULL(Invoice.InvoiceDate, '') AS InvoiceDate,
      Invoice.InvoiceType

    FROM Batch
      LEFT JOIN Invoice
        ON Batch.ID = Invoice.BatchID
      LEFT JOIN Vendor
        ON Invoice.VendorId = Vendor.VendorId
    WHERE Batch.ClientID = pClientId
    AND Invoice.IsDeleted = FALSE
    AND (pBatchType IS NULL
    OR Batch.BatchType = pBatchType)
    AND (pBatchSource IS NULL
    OR Batch.`Source` = pBatchSource)
    AND (pDateFrom IS NULL
    OR Batch.CreatedDate >= pDateFrom)
    AND (pDateTo IS NULL
    OR Batch.CreatedDate < DATE_ADD(pDateTo, INTERVAL 1 DAY))
    ORDER BY Invoice.InvoiceDate DESC LIMIT pOffset, pSize;

  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientById`(
-- noformat
	IN pType 			int, 
	IN pViewingUserId	 char(36),  	
	IN pUserId			char(36),  
	in pClientId	                 Int,
	IN pOffset 			int,                                               
	IN pSize 			int)
BEGIN

	SELECT	IFNULL(IsCloudxUser, 0), ClientId 
	INTO	@isCloudxUser, @ClientId
	FROM	User
	WHERE	UserId = pViewingUserId;
	

	set @CodePosition = 2;
	Call _x_GetClientParam(@ClientId, 'CodePosition', @CodePosition);


	IF (pType = 0) THEN  /* User Details */
		SELECT
				CAST(u.UserId AS char(36)) AS UserId,
				u.UserName,
				FirstName,
				u.LastName,
				u.AddressId,
				u.Email,
				u.Telephone,
				u.UserIdCard,
				u.OrgId,
				u.Duration,
				u.LimitMailPerDay,
				u.EnableEscalation,
				u.CanViewConfidentialInvoice,
				u.IsCloudxUser,
				u.ViewCapEx,
				u.IsActive,
				ua.AccessTail,
				ua.LaunchPage,
				ua.DisableNotifications,
				ua.UseSmartSearch,
				ua.IsExceptionHandler,
				ifnull(ua.DefaultGridSize, 10) as DefaultGridSize,
				(SELECT		GROUP_CONCAT(cr.RoleName order by cr.RoleName SEPARATOR ', ')
					FROM	ClientUserRoles cur
							INNER JOIN ClientRoles cr			ON cr.RoleId = cur.RoleId
					WHERE	cur.UserId = u.UserId) AS RoleName,
				ad.StateId,
				ad.ZipCode,
				ad.StreetName,
				ad.CityName,
				CONCAT(org.OrgId, ', ', org.OrgName) 				AS OrgName,
				CONCAT(st.StateNameShort, ', ', st.StateName) 		AS StateName,
				ua.DisableSourceNotifications
		FROM	User u
				LEFT JOIN _x_UserParameters ua			ON u.UserId = ua.UserId
				LEFT JOIN Address ad					ON u.AddressId = ad.AddressId
				LEFT JOIN State st						ON ad.StateId = st.StateId
				LEFT JOIN OrgData org					ON u.OrgId = org.Id
		WHERE u.ClientId = @ClientId
				AND u.UserId = pUserId;
	
	ELSEIF (pType = 1) THEN /* List: GLCode */
		SELECT
				ApproverGLCode.Id,
				case	when @CodePosition = 1 THEN
							concat("[", IFNULL(GLCode.GLCodeName, ""), "] ", IFNULL(GLCode.Desccription, ""))
						when @CodePosition = 2 THEN
							concat(IFNULL(GLCode.Desccription, ""), " [", IFNULL(GLCode.GLCodeName, ""), "]")
						else
							IFNULL(GLCode.Desccription, IFNULL(GLCode.GLCodeName, "")) end										as GLCode,
				case	when @CodePosition = 1 THEN
							concat("[", IFNULL(ClientCompany.CompanyCode, ""), "] ", IFNULL(ClientCompany.Description, ""))
						when @CodePosition = 2 THEN
							concat(IFNULL(ClientCompany.Description, ""), " [", IFNULL(ClientCompany.CompanyCode, ""), "]")
						else
							IFNULL(ClientCompany.Description, IFNULL(ClientCompany.CompanyCode, "")) end						as Company
		FROM	ApproverGLCode
				LEFT JOIN GLCode			ON ApproverGLCode.GLCodeId = GLCode.GLCodeId
				LEFT JOIN ClientCompany		ON GLCode.ClientCompanyId = ClientCompany.Id
		WHERE	ApproverGLCode.UserId = pUserId AND GLCode.ClientId = @ClientId
		ORDER	BY ApproverGLCode.Id DESC 
		LIMIT 	pOffset, pSize;
	
	ELSEIF (pType = 2) THEN /* List: Department */
		SELECT
				UserDepartment.Id,
				case	when @CodePosition = 1 THEN
							concat(IFNULL(Department.DepartmentName, ""), " [", IFNULL(Department.Description, ""), "]")
						when @CodePosition = 2 THEN
							concat(IFNULL(Department.Description, ""), " [", IFNULL(Department.DepartmentName, ""), "]")
						else
							IFNULL(Department.Description, IFNULL(Department.DepartmentName, "")) end							as Department,
				UserDepartment.IsHomeDepartment
		FROM	UserDepartment
				LEFT JOIN Department		ON UserDepartment.DepartmentId = Department.Id
		WHERE	UserDepartment.UserId = pUserId AND Department.ClientId = @ClientId
		ORDER	BY UserDepartment.Id DESC 
		LIMIT	pOffset, pSize;
	
	ELSEIF (pType = 3) THEN

		SELECT 
				*
		FROM _x_Client
		WHERE ClientId = pClientId 
		LIMIT	pOffset, pSize;
	
	ELSEIF (pType = 4) THEN /* List: Reassignment */
		SELECT
				UserReassignmentHistory.ReassignUserHistoryId AS Id,
				CONCAT(UserTarget.LastName, ', ', UserTarget.FirstName) AS Assignee,
				CONCAT(UserMain.LastName, ', ', UserMain.FirstName) AS AssignedBy,
				UserReassignmentHistory.IsPermanent,
				UserReassignmentHistory.DateFrom,
				UserReassignmentHistory.DateTo,
				UserReassignmentHistory.CreatedDate,
				UserReassignmentHistory.WorkflowType AS Type
		
		FROM	UserReassignmentHistory
				LEFT JOIN User AS UserTarget			ON UserReassignmentHistory.TargetUserId = UserTarget.UserId
				LEFT JOIN User AS UserMain				ON UserReassignmentHistory.UserId = UserMain.UserId
		WHERE	UserReassignmentHistory.SourceUserId = pUserId AND UserTarget.ClientId = @ClientId
		ORDER	BY UserReassignmentHistory.ReassignUserHistoryId DESC LIMIT pOffset, pSize;
	
	ELSEIF (pType = 5) THEN /* List: APClerkVendor */
		SELECT
				APClerkVendor.VendorId AS Id,
				case	when @CodePosition = 1 THEN
							concat("[", IFNULL(Vendor.VendorNo, ""), "] ", IFNULL(Vendor.VendorName, "")) 
						when @CodePosition = 2 THEN
							concat(IFNULL(Vendor.VendorName, ""), " [", IFNULL(Vendor.VendorNo, ""), "]")
						else
							IFNULL(Vendor.VendorName, IFNULL(Vendor.VendorNo, "")) end 								as Vendor
		FROM	APClerkVendor
				LEFT JOIN Vendor	ON APClerkVendor.VendorId = Vendor.VendorId
		WHERE	APClerkVendor.APClerkId = pUserId AND Vendor.ClientId = @ClientId
		LIMIT pOffset, pSize;
		
	ELSEIF (pType = 6) THEN /* List: Division */
		SELECT
				UserClientCompanies.ClientCompanyId AS Id,
				case	when @CodePosition = 1 THEN
							concat("[", IFNULL(ClientCompany.CompanyCode, ""), "] ", IFNULL(ClientCompany.Description, ""))
						when @CodePosition = 2 THEN
							concat(IFNULL(ClientCompany.Description, ""), " [", IFNULL(ClientCompany.CompanyCode, ""), "]")
						else
							IFNULL(ClientCompany.Description, IFNULL(ClientCompany.CompanyCode, "")) end				as Division
		FROM	UserClientCompanies
				LEFT JOIN ClientCompany	ON UserClientCompanies.ClientCompanyId = ClientCompany.Id
		WHERE	UserClientCompanies.UserId = pUserId AND ClientCompany.ClientId = @ClientId
		LIMIT pOffset, pSize;
	
	ELSEIF (pType = 7) THEN /* List: Roles */
		SELECT
				cr.RoleId,
				concat(cr.RoleName, case when isInternal=1 then ' **CloudX Only**' else '' end) as RoleName,
				CASE WHEN cur.UserId IS NULL THEN 0 ELSE 1 END AS IsAssigned,
				isInternal
		FROM	ClientRoles cr
				LEFT JOIN ClientUserRoles cur	ON cur.RoleId = cr.Roleid
													AND cur.Userid = pUserId		
				LEFT JOIN User u				ON u.UserId = pUserId
		WHERE	cr.ClientId = @ClientId 
				-- AND u.ClientId = @ClientId
				AND (
						cr.isInternal IN (0, ifnull(u.isCloudxUser, @isCloudxUser))
--						OR pUserId IS NULL
					)
		ORDER BY 4, 3 DESC, 2
		LIMIT pOffset, pSize;
		

	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientEmployeeType_Create` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientEmployeeType_Create`(IN p_ClientId INT, IN p_TypeName VARCHAR(30), IN p_IsActive BIT)
BEGIN
		INSERT INTO `ClientEmployeeType` (ClientId, TypeName, IsActive) VALUES (p_ClientId, p_TypeName, p_IsActive);
	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientEmployeeType_Delete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientEmployeeType_Delete`(IN p_EmployeeTypeId INT)
BEGIN
	BEGIN
	        DELETE FROM `ClientEmployeeType` WHERE EmployeeTypeId = p_EmployeeTypeId;
	END;
    END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientEmployeeType_Get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientEmployeeType_Get`(IN p_EmployeeTypeId INT)
BEGIN
	BEGIN
	    SELECT * FROM `ClientEmployeeType` WHERE EmployeeTypeId = p_EmployeeTypeId;
	END;
    END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientEmployeeType_GetAll` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientEmployeeType_GetAll`(IN p_ClientId INT)
BEGIN
	BEGIN
	    SELECT * FROM `ClientEmployeeType` WHERE ClientId = p_ClientId;
	END;
    END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientEmployeeType_SetStatus` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientEmployeeType_SetStatus`(IN p_EmployeeTypeId INT, IN p_IsActive BIT)
BEGIN
	BEGIN
	        UPDATE `ClientEmployeeType` SET IsActive = p_IsActive WHERE EmployeeTypeId = p_EmployeeTypeId;
	END;
    END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientEmployeeType_Update` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientEmployeeType_Update`(IN p_EmployeeTypeId INT, IN p_TypeName VARCHAR(30))
BEGIN
	BEGIN
	    UPDATE `ClientEmployeeType` SET TypeName = p_TypeName WHERE EmployeeTypeId = p_EmployeeTypeId;
	END;
    END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientExpenseCategoryByEmployeeType_GetAll` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientExpenseCategoryByEmployeeType_GetAll`(IN p_ClientId INT, IN p_ExpenseCategoryId INt)
BEGIN
	BEGIN
	        SELECT cec.ExpenseCategoryId, cet.EmployeeTypeId, cecbet.QtyMin, cecbet.QtyMax, cecbet.QtyRate, cecbet.AmountMin, cecbet.AmountMax, cecbet.isActive, cet.TypeName, cec.AllowQtyOrAmount
	        FROM `ClientExpenseCategory` cec 
	        CROSS JOIN `ClientEmployeeType` cet 
	        on cec.ClientId = p_ClientId AND cet.ClientId = p_ClientId AND cec.ExpenseCategoryId = p_ExpenseCategoryId
	        AND cet.isActive = 1
	        LEFT OUTER JOIN `ClientExpenseCategoryByEmployeeType` cecbet on
	        cec.ExpenseCategoryId = cecbet.ExpenseCategoryId AND cet.EmployeeTypeId = cecbet.EmployeeTypeId;
	END;
    END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientExpenseCategoryByEmployeeType_SetStatus` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientExpenseCategoryByEmployeeType_SetStatus`(
	IN p_ExpenseCategoryId INT,
	IN p_EmployeeTypeId INT,
	IN p_isActive BIT)
BEGIN
	BEGIN
	        INSERT INTO `ClientExpenseCategoryByEmployeeType` (
			`ExpenseCategoryId`,
			`EmployeeTypeId`,
			`isActive`
			) VALUES (
			p_ExpenseCategoryId,
			p_EmployeeTypeId,
			p_isActive
			) ON DUPLICATE KEY UPDATE
			`isActive` = VALUES(`isActive`);
	END;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientExpenseCategoryByEmployeeType_Upsert` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientExpenseCategoryByEmployeeType_Upsert`(
	IN p_ExpenseCategoryId INT,
	IN p_EmployeeTypeId INT,
	IN p_QtyMin INT,
	IN p_QtyMax INT,
	IN p_QtyRate DECIMAL(18,2),
	IN p_AmountMin DECIMAL(18,2),
	IN p_AmountMax DECIMAL(18,2),
	IN p_isActive BIT)
BEGIN
	BEGIN
		INSERT INTO `ClientExpenseCategoryByEmployeeType` (
			`ExpenseCategoryId`,
			`EmployeeTypeId`,
			`QtyMin`,
			`QtyMax`,
			`QtyRate`,
			`AmountMin`,
			`AmountMax`,
			`isActive`
			) VALUES (
			p_ExpenseCategoryId,
			p_EmployeeTypeId,
			p_QtyMin,
			p_QtyMax,
			p_QtyRate,
			p_AmountMin,
			p_AmountMax,
			p_isActive
			) ON DUPLICATE KEY UPDATE
			`QtyMin` = VALUES(`QtyMin`),
			`QtyMax` = VALUES(`QtyMax`),
			`QtyRate` = VALUES(`QtyRate`),
			`AmountMin` = VALUES(`AmountMin`),
			`AmountMax` = VALUES(`AmountMax`),
			`isActive` = VALUES(`isActive`);
	END;
    END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientExpenseCategory_Create` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientExpenseCategory_Create`(IN p_ClientId INT,
    IN p_CategoryName VARCHAR(30),
    IN p_EntryLabel VARCHAR(20),
    IN p_ToolTip VARCHAR(200),
    IN p_AllowQtyOrAmount CHAR(1),
    IN p_GLCode VARCHAR(100),
    IN p_IsReceiptRequired TINYINT(1),
    IN p_IsActive TINYINT(1))
BEGIN
	BEGIN
	        INSERT INTO `ClientExpenseCategory` (ClientId, CategoryName, EntryLabel, ToolTip, AllowQtyOrAmount, GLCode, IsReceiptRequired, IsActive)
		VALUES (p_ClientId, p_CategoryName, p_EntryLabel, p_ToolTip, p_AllowQtyOrAmount, p_GLCode, p_IsReceiptRequired, p_IsActive);
	END;
    END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientExpenseCategory_Delete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientExpenseCategory_Delete`(IN p_ExpenseCategoryId INT)
BEGIN
	BEGIN
	        DELETE FROM `ClientExpenseCategory`
		WHERE ExpenseCategoryId = p_ExpenseCategoryId;
	END;
    END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientExpenseCategory_Get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientExpenseCategory_Get`(IN p_ExpenseCategoryId INT)
BEGIN
	BEGIN
	        SELECT * FROM `ClientExpenseCategory`
		WHERE ExpenseCategoryId = p_ExpenseCategoryId;
	END;
    END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientExpenseCategory_GetAll` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientExpenseCategory_GetAll`(IN p_ClientId INT)
BEGIN
	BEGIN
	        SELECT * FROM `ClientExpenseCategory`
		WHERE ClientId = p_ClientId;
	END;
    END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientExpenseCategory_SetStatus` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientExpenseCategory_SetStatus`(IN p_ExpenseCategoryId INT, IN p_IsActive TINYINT(1))
BEGIN
	BEGIN
	        UPDATE `ClientExpenseCategory`
		SET IsActive = p_IsActive
		WHERE ExpenseCategoryId = p_ExpenseCategoryId;
	END;
    END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientExpenseCategory_Update` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientExpenseCategory_Update`(IN p_ExpenseCategoryId INT, IN p_CategoryName VARCHAR(30), IN p_EntryLabel VARCHAR(20), IN p_ToolTip VARCHAR(200), IN p_AllowQtyOrAmount CHAR(1), IN p_GLCode VARCHAR(100), IN p_IsReceiptRequired TINYINT(1))
BEGIN
	BEGIN
	        UPDATE `ClientExpenseCategory`
		SET CategoryName = p_CategoryName,
			EntryLabel = p_EntryLabel,
            isReceiptRequired = p_IsReceiptRequired,
			ToolTip = p_ToolTip,
			AllowQtyOrAmount = p_AllowQtyOrAmount,
			GLCode = p_GLCode
		WHERE ExpenseCategoryId = p_ExpenseCategoryId;
	END;
    END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientExpenseCurrency_Create` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientExpenseCurrency_Create`(IN p_ClientId INT,
	    IN p_Currency VARCHAR(3),
	    IN p_IsActive TINYINT(1))
BEGIN
	BEGIN
	        INSERT INTO `ClientExpenseCurrency` (ClientId, Currency, IsActive)
		VALUES (p_ClientId, p_Currency, p_IsActive);
	END;
    END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientExpenseCurrency_Delete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientExpenseCurrency_Delete`(IN p_ClientId INT,
		IN p_Currency VARCHAR(3))
BEGIN
	BEGIN
		DELETE FROM `ClientExpenseCurrency`
		WHERE ClientId = p_ClientId AND Currency = p_Currency;
	END;
    END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientExpenseCurrency_Get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientExpenseCurrency_Get`(IN p_ClientId INT,
	    IN p_Currency VARCHAR(3))
BEGIN
	BEGIN
	        SELECT * FROM `ClientExpenseCurrency`
		WHERE ClientId = p_ClientId AND Currency = p_Currency;
	END;
    END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientExpenseCurrency_GetAll` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientExpenseCurrency_GetAll`(IN p_ClientId INT)
BEGIN
	BEGIN
	    SELECT `ClientExpenseCurrency`.*,
				case when Currency= 'USD' then 0 else 1 end as isModifiable
		FROM `ClientExpenseCurrency`
		WHERE ClientId = p_ClientId;
	END;
    END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientExpenseCurrency_SetStatus` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientExpenseCurrency_SetStatus`(IN p_ClientId INT,
		IN p_Currency VARCHAR(3),
		IN p_IsActive TINYINT(1))
BEGIN
	BEGIN
		UPDATE `ClientExpenseCurrency`
		SET IsActive = p_IsActive
		WHERE ClientId = p_ClientId AND Currency = p_Currency;
	END;
    END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientExpenseCurrency_Update` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientExpenseCurrency_Update`(IN p_ClientId INT,
		IN p_Currency VARCHAR(3),
        IN p_OldCurrency VARCHAR(3),
		IN p_IsActive TINYINT(1))
BEGIN
	BEGIN
		UPDATE `ClientExpenseCurrency`
		SET Currency = p_Currency
		WHERE ClientId = p_ClientId AND Currency = p_OldCurrency;
	END;
    END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientPaymentTermsList` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientPaymentTermsList`(IN pUserId char(36), in pTermCode varchar(30))
ThisProc:BEGIN

-- noformat

	call _x_UserActivity(pUserId, 'PaymentTerms', null);
	
	SELECT	ClientId 
	INTO	@ClientId
	FROM	User
	WHERE	UserId = pUserId;

	SELECT	*
	FROM 	ClientPaymentTerms
	WHERE 	ClientId = @ClientId
			and TermCode = ifnull(pTermCode, TermCode)
  	ORDER 	BY TermCode;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientPaymentTermsSetDefault` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientPaymentTermsSetDefault`(IN pUserId char(36), pTermCode VARCHAR(30))
ThisProc:BEGIN

-- noformat

	call _x_UserActivity(pUserId, 'PaymentTermsSetDefault', pTermCode);
	
	SELECT	ClientId 
	INTO	@ClientId
	FROM	User
	WHERE	UserId = pUserId;

	Update 	ClientPaymentTerms		set isDefault = case when TermCode = pTermCode then 1 else 0 end
	WHERE 	ClientId = @ClientId;



END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientRead` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientRead`(IN pUserId char(36))
ThisProc:
	BEGIN

		-- noformat

		SELECT	IFNULL(IsCloudxUser, 0), ClientId 
		INTO	@isCloudxUser, @ClientId
		FROM	User
		WHERE	UserId = pUserId;

		IF @isCloudxUser = 1 THEN 
			SELECT	Client.CustomerName											AS Name,
					'Region: South | Industry: Automotive'						AS Metrics,
					ifnull((SELECT GROUP_CONCAT(DISTINCT PaymentProvider 
											ORDER BY PaymentProvider 
											SEPARATOR ', ')
					FROM 	ClientCompany cc
							inner JOIN _x_ClientCompany xcc	ON xcc.Id = cc.Id
					WHERE 	cc.ClientId = Client.ClientId
							and cc.IsActive = 1
							AND PaymentProvider is not null), '')				AS Providers,
					(SELECT count(*)
					FROM	User u
					WHERE 	u.ClientId = Client.ClientId
							AND u.isActive = 1
							AND u.IsCloudxUser = 0)								AS ActiveUsers,
					Client.isActive,
					Client.ClientId
			FROM 	Client
			WHERE	EXISTS (select 1 FROM ClientRoles cr WHERE cr.ClientId = Client.ClientId)
			ORDER	BY isActive DESC, CustomerName;
		ELSE
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Client information not supplied.', MYSQL_ERRNO = 1;
		end if;
	
/*
	call _x_ClientRead('18b61a24-d0a4-11e9-b055-22000a1f9f3d') 	-- bpngards admin
	call _x_ClientRead('78cb5a18-7474-4c81-814b-69e568833e9b') 		-- tiffany.anderson@bongards.com
*/
	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientRoleDelete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientRoleDelete`(
-- noformat
	IN pRoleId 		int,
	IN pClientId 	int)
ThisProc:BEGIN
	
	IF EXISTS (	SELECT	1
				FROM 	ClientRoles
				WHERE 	ClientId = pClientId
						AND RoleId = pRoleId
						AND (isAdmin = 1 OR isLocked = 1)) THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This role cannot be deleted', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;

	IF EXISTS (	SELECT	1
				FROM 	ReportClientRestrictions rcr
				WHERE 	ClientId = pClientId
						AND RoleId = pRoleId
				) THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This role is currently being used to restrict a report.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;

	IF EXISTS (	SELECT	1
				FROM 	ReportClientScheduleRecipients
				WHERE 	RoleId = pRoleId
				) THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This role is currently being referenced in a report.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;
	
	SELECT 	isInternal, RoleName
	INTO 	@isInternal, @RoleName
	FROM	ClientRoles
	WHERE	RoleId = pRoleId;

	drop TEMPORARY TABLE IF EXISTS myRolesToDelete;
	create TEMPORARY TABLE if not exists myRolesToDelete (
		SELECT 	RoleId
		FROM 	ClientRoles
		WHERE 	(@isInternal = 0 AND RoleId = pRoleId)
				OR (@isInternal = 1 AND RoleName = @RoleName)
	);
	

	DELETE	FROM ClientUserRoles
	WHERE 	RoleId in (
						SELECT 	RoleId
						FROM 	myRolesToDelete
						);


	DELETE	FROM ClientRoleFunctions
	WHERE 	RoleId in (
						SELECT 	RoleId
						FROM 	myRolesToDelete
						);

	DELETE	FROM ClientRoles
	WHERE 	RoleId in (
						SELECT 	RoleId
						FROM 	myRolesToDelete
						);


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientRoleRead` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientRoleRead`(IN pUserId char(36), IN pRoleId int)
ThisProc:
	BEGIN

		-- noformat

		SELECT	IFNULL(IsCloudxUser, 0), ClientId 
		INTO	@isCloudxUser, @ClientId
		FROM	User
		WHERE	UserId = pUserId;


		IF pRoleId IS NULL THEN
			SELECT
					CONCAT(cr.RoleName, CASE WHEN isInternal = 1 THEN ' **CloudX Only**' ELSE '' END) 		AS RoleName,
					(	SELECT	COUNT(*)
						FROM 	ClientUserRoles cur
								INNER JOIN User u	ON u.UserId = cur.UserId
						WHERE	cur.RoleId = cr.RoleId) 													AS TotalAssigned,
					CASE	WHEN cr.isAdmin = 1 OR cr.islocked = 1 THEN 0 
							ELSE 1 END 																		AS canDelete,
					cr.RoleId,
					cr.ClientId
			FROM	ClientRoles cr
			WHERE	cr.ClientId = @ClientId
					AND	(
							(cr.isInternal = 1 AND @isCloudxUser = 1)
							OR (cr.isInternal = 0)
							)
			ORDER BY isInternal, cr.RoleName;
			LEAVE ThisProc;
		END IF;

		SELECT	isInternal 
		INTO	@isInternal
		FROM	ClientRoles cr
		WHERE	cr.ClientId = @ClientId
				AND cr.RoleId = pRoleId;

		SELECT
				cr.RoleName,
				(	SELECT	COUNT(*)
					FROM ClientUserRoles cur
						INNER JOIN User u	ON u.UserId = cur.UserId
					WHERE	cur.RoleId = cr.RoleId
							AND u.IsActive = 1) 										AS TotalAssigned,
				CASE	WHEN cr.isAdmin = 1 OR cr.islocked = 1 THEN 0 
						ELSE 1 END 														AS canDelete,
				cr.RoleId
		FROM	ClientRoles cr
		WHERE	cr.ClientId = @ClientId
				AND	cr.RoleId = pRoleId;



		SELECT
				sf.FunctionGrouping,
				sf.FunctionName,
				CASE WHEN crf.isAdmin = 1 THEN 1 ELSE crf.Access END AS Access,
				sf.FunctionOptions,
				sf.FunctionKey
		FROM SystemFunctions sf
			LEFT JOIN (SELECT	y.FunctionKey,
								y.Access,
								x.isAdmin
						FROM	ClientRoles x
							LEFT JOIN ClientRoleFunctions y ON y.RoleId = x.RoleId
						WHERE x.RoleId = pRoleId) crf	ON IFNULL(crf.FunctionKey, sf.FunctionKey) = sf.FunctionKey
		WHERE (sf.isInternal = @isInternal)
		ORDER BY sf.SortOrderGrouping, sf.FunctionGrouping, sf.SortOrderName, sf.FunctionName;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientRoleUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientRoleUpdate`(
-- noformat
	INOUT 	pRoleId 		int,
	IN 		pRoleName 		varchar(50),
	IN 		pisInternal 	int,
	IN 		pClientId 		int,
	IN 		pFunctions 		mediumtext
	)
ThisProc:BEGIN
	IF pRoleId IS NULL THEN
		IF EXISTS (	SELECT	1
					FROM	ClientRoles
					WHERE	ClientId = pClientId
							AND	RoleName = pRoleName) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This role name is already being used', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;
	ELSE
		IF EXISTS (SELECT	1
					FROM	ClientRoles
					WHERE	ClientId = pClientId
							AND RoleName = pRoleName
				AND RoleId <> pRoleId) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This role name is already being used', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;
	END IF;

	SET @OldRoleName = null;
	SELECT 	RoleName
	INTO 	@OldRoleName
	FROM 	ClientRoles
	WHERE 	RoleId = pRoleId;


	IF pRoleId IS NULL THEN
		INSERT INTO ClientRoles (RoleName, ClientId, isAdmin, isInternal, isLocked)
			VALUES (pRoleName, pClientId, 0, pisInternal, 0);
		SET pRoleId = LAST_INSERT_ID();
	ELSE
		UPDATE ClientRoles	SET RoleName = pRoleName
		WHERE	RoleId = pRoleId
				AND ClientId = pClientId;
	END IF;

	DELETE
		FROM ClientRoleFunctions
	WHERE RoleId = pRoleId;


	SET pFunctions = IFNULL(pFunctions, '');

	SET @Pos = 1;
	SET @Count = LENGTH(pFunctions) - LENGTH(REPLACE(pFunctions, ';', '')) + 1;

	WHILE @Pos <= @Count DO
		SET @Function = _x_SPLIT_STRING(pFunctions, ';', @Pos);
		IF @Function <> '' THEN
			SET @Function = _x_SPLIT_STRING(pFunctions, ';', @Pos);
			SET @Equal = POSITION('=' IN @Function);
			IF @Equal > 0 THEN
				SET @FunctionKey = LEFT(@Function, @Equal - 1);
				SET @Access = SUBSTRING(@Function, @Equal + 1, 99);
				IF @FunctionKey <> ''
					AND @Access <> ''
					AND @Access <> '-1' THEN
					SET @Access = CONVERT(@Access, SIGNED);
					INSERT INTO ClientRoleFunctions (RoleId, FunctionKey, Access)
						VALUES (pRoleId, @FunctionKey, @Access);
				END IF;
			END IF;
		END IF;
		SET @Pos = @Pos + 1;
	END WHILE;


	
	-- Check if the InvoiceAuditor is the only function checked in InvoiceGroup
	IF exists (select 1 from ClientRoleFunctions where RoleId = pRoleId and FunctionKey = 'InvoiceAuditor' and Access = 1) then
		-- check if there is no other setting, if so, return an error
		if exists (	select 	1
					from 	ClientRoleFunctions crf
					where 	crf.RoleId = pRoleId
							and FunctionKey like 'Invoice_%'
							and FunctionKey <> 'InvoiceAuditor'
							and Access = 1) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = '[Allow Audit] action must be the only action in a Role.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		end if;
	END IF;


	-- if this is a client Role leave
	IF pisInternal = 0 THEN 
		LEAVE ThisProc;
	end IF;

	
	-- Sync this ROLE to ALL cloudx Clients
	IF @OldRoleName is NULL THEN
		INSERT INTO ClientRoles (RoleName, ClientId, isAdmin, isInternal, isLocked)
			SELECT	pRoleName, c.ClientId, 0, 1, 0
			FROM 	Client c
					INNER JOIN 	_x_Client xc 	ON xc.ClientId = c.ClientId
					LEFT JOIN 	ClientRoles	cr	ON cr.ClientId = c.ClientId
													AND cr.RoleName = pRoleName
													AND cr.ClientId = pClientId
													AND cr.isInternal = 1
			WHERE 	cr.ClientId is null;
		LEAVE ThisProc;
	end IF;
        

	-- Sync the name change, if there was one
	UPDATE 	ClientRoles
			SET RoleName	= pRoleName
	WHERE 	ClientId <> pClientId
			AND isInternal = 1
			AND RoleName = @OldRoleName;


	-- Sync the settings change
	DELETE
		FROM ClientRoleFunctions
	WHERE RoleId in (
						select 	RoleId
						FROM 	ClientRoles
						WHERE 	RoleId <> pRoleId
								AND isInternal = 1
								AND RoleName = pRoleName
					);

	INSERT INTO ClientRoleFunctions (RoleId, FunctionKey, Access)
		SELECT 	xRef.RoleId, FunctionKey, Access
		FROM	ClientRoleFunctions crf
				cross JOIN (
								SELECT 	RoleId
								FROM 	ClientRoles
								WHERE 	RoleId <> pRoleId
										AND isInternal = 1
										AND RoleName = pRoleName
							) xRef
		WHERE 	crf.RoleId = pRoleId;



END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientRoleUserRead` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientRoleUserRead`(
-- noformat
	IN pClientId int, 
	IN pRoleId int, 
	IN pRequest varchar(20)
)
ThisProc:
  BEGIN
	SET SESSION group_concat_max_len = 1000000;

    IF pRequest = 'Assigned' THEN
		SELECT	CONCAT(case when u.IsActive = 0 then '*' else '' end, u.LastName, ', ', u.FirstName) 	AS FullName,
				(SELECT	GROUP_CONCAT(cr.RoleName order by cr.RoleName SEPARATOR ', ')
				FROM	ClientUserRoles cur
						INNER JOIN ClientRoles cr	ON cr.RoleId = cur.RoleId
				WHERE 	cur.UserId = u.UserId
				ORDER 	BY 1) 											AS AssignedRoles,
				CAST(cur.UserId AS char(36)) 							AS UserId,
				cur.RoleId
		FROM	ClientUserRoles cur
				INNER JOIN User u	ON u.UserId = cur.UserId
		WHERE	cur.RoleId = pRoleId
				-- AND u.IsActive = 1
		ORDER 	BY u.IsActive desc, 1;
		LEAVE ThisProc;
    END IF;


	set @isInternal = 0;
    SET @isAdmin = 0;
    SELECT	case when cr.isAdmin = 1 and cr.isInternal = 1 then 1 else 0 end, cr.isInternal
	INTO	@isSuperAdmin, @isInternal
    FROM 	ClientRoles cr
    WHERE	cr.RoleId = pRoleId;

    IF pRequest = 'Unassigned' THEN
		SELECT	CONCAT(case when u.IsActive = 0 then '*' else '' end, u.LastName, ', ', u.FirstName) AS FullName,
				u.UserId,
				pRoleid AS RoleId, u.IsCloudxUser, @isInternal
		FROM 	User u
		WHERE	u.ClientId = pClientId
				-- AND u.IsActive = 1
				and (
						(@isSuperAdmin = 1						-- Only CloudxUsers can be assigned to Super Admin AND only Non CloudxUsers can be assigned to any other role
							and u.IsCloudxUser = 1)
						or (@isSuperAdmin = 0			
							and u.IsCloudxUser = @isInternal)
					)
				AND NOT EXISTS (SELECT	1
								FROM	ClientUserRoles cur
								WHERE	cur.RoleId = pRoleId
								AND	cur.UserId = u.Userid)
		ORDER BY u.IsActive desc, 1;
		LEAVE ThisProc;
    END IF;


  END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientRoleUserUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientRoleUserUpdate`(
-- noformat
	IN pRoleId int,
	IN pUserId char(36),
	IN pAction char(10)
	)
ThisProc:BEGIN
	
	IF	pAction = 'Add'
		AND pUserId IS NOT NULL
		AND pRoleId IS NOT NULL THEN
		IF NOT EXISTS (SELECT	1
						FROM	ClientUserRoles cur
						WHERE	RoleId = pRoleId
								AND UserId = pUserId) THEN

			INSERT INTO ClientUserRoles (RoleId, UserId)
				VALUES (pRoleId, pUserId);
	
	-- set @aa = Concat(pUserId, '   ', pRoleId);
	-- SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @aa, MYSQL_ERRNO = 1;
	-- LEAVE ThisProc;
	
			drop TEMPORARY table if exists tmp;
			CREATE TEMPORARY TABLE tmp (
				SELECT	crf.FunctionKey,
				  		MAX(Access) 	AS Access
				FROM	ClientUserRoles cur
						INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
						INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
				WHERE	cur.UserId = pUserId
				GROUP	BY crf.FunctionKey
				ORDER	BY 1
			);

			-- Check if the user is an Auditor.  If so they cannot belong to another role that has another action on an invoice.
			IF exists (select 1 from tmp where FunctionKey = 'InvoiceAuditor' and Access = 1) then
				-- check if there is no other setting, if so, return an error
				if exists (	select 	1
							from 	tmp
							where 	FunctionKey like 'Invoice_%'
									and FunctionKey <> 'InvoiceAuditor'
									and Access = 1) THEN
					select	Concat(FirstName, ' ', LastName)	into 	@Username	from	User u		where 	UserId = pUserId;
					select	RoleName							into 	@Rolename	from	ClientRoles	where 	RoleId = pRoleId;
					set @Message = Concat('Assigning [', @Rolename, '] to ', @Username, ' is not permitted. [Allow Audit]');
	
					SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @Message, MYSQL_ERRNO = 1;
					LEAVE ThisProc;
				end if;
			END IF;
		end if;

		LEAVE ThisProc;
	END IF;
	
	IF	pAction = 'Delete'
		AND pUserId IS NOT NULL
		AND pRoleId IS NOT NULL THEN
		DELETE	FROM ClientUserRoles
				WHERE RoleId = pRoleId
				AND UserId = pUserId;
		LEAVE ThisProc;
	END IF;

 END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientUpdate`(
		IN pClientId 					int,
		IN pCustomerName 					varchar(100),
		IN pEmail 					VARCHAR(100),
		IN pTelephone 					VARCHAR(100),
		IN pZipCode 					VARCHAR(100)
						
		)
ThisProc:
	BEGIN



	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_Client_Info` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_Client_Info`(IN pUserId char(36), IN pClientId int)
ThisProc:
	BEGIN

		-- noformat

		SELECT	IFNULL(IsCloudxUser, 0), ClientId 
		INTO	@isCloudxUser, @ClientId
		FROM	User
		WHERE	UserId = pUserId;

		IF @isCloudxUser = 0 THEN 
			SET pClientId = @ClientId;
		end if;

		SELECT          Client.ClientId,
				Client.CustomerName,
				Client.ContactPerson,
				Client.Telephone,
				a.StreetName,
				a.Address1,
				a.Address2,
				a.Address3,
				a.Address4,
				a.CityName,
				Client.IsActive,
				a.StateId,
				s.StateName,
				a.ZipCode,
				a.Country,
				a.ContactPerson,
				a.Email, 
				a.PhoneNo,
				Client.WebsiteAddress
		FROM Client
				LEFT JOIN Address a 	on a.AddressId = Client.AddressId
				LEFT JOIN State s		ON s.StateId = a.StateId
		WHERE Client.ClientId = pClientId;
	
/*
	call _x_Client_Info('18b61a24-d0a4-11e9-b055-22000a1f9f3d', 1) 	-- bpngards admin
	call _x_Client_Info('78cb5a18-7474-4c81-814b-69e568833e9b', 88) 		-- tiffany.anderson@bongards.com
*/
	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_Client_Info_Update` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_Client_Info_Update`(
-- noformat
		IN pUserId 				char(36), 
		IN pClientId 			int,
		IN pCustomerName		varchar(250),

		IN pStreetName			varchar(250),
		IN pAddress1			varchar(250),
		IN pCityName			varchar(250),
		IN pStateId				int,
		IN pZipCode				varchar(250),
		IN pCountry				varchar(250),

		IN pContactPerson		varchar(250),
		IN pEmail				varchar(250),
		IN pPhoneNo				varchar(250),

		IN pWebSiteAddress		varchar(250)
		)
ThisProc:BEGIN


	SELECT	IFNULL(IsCloudxUser, 0), ClientId 
	INTO	@isCloudxUser, @ClientId
	FROM	User
	WHERE	UserId = pUserId;

	IF @isCloudxUser = 0 THEN 
		SET pClientId = @ClientId;
	end if;



	SELECT	AddressId
	INTO 	@AddressId 
	FROM 	Client
	WHERE 	ClientId = pClientId
			and isActive = 1
	LIMIT 1;

	if nullif(pCustomerName, '') is null THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The customer name is required.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;

	if nullif(pStreetName, '') is null THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The address is required.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;

	if nullif(pCityName, '') is null THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The City is required.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;

	if nullif(pZipCode, '') is null THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The Zip Code is required.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;

	if nullif(pCountry, '') is null THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The Country is required.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;

	-- call _x_Notify(@UserId, 'Client', 'Information change', 'Settings', null, null, null);

	IF @AddressId is null then
		INSERT INTO Address (StreetName, Address1, StateId, CityName, ZipCode, Country, ContactPerson, Email, PhoneNo)
			VALUES (pStreetName, pAddress1, pStateId, pCityName, pZipCode, pCountry, pContactPerson, pEmail, pPhoneNo);
		set @AddressId = LAST_INSERT_ID();
	else
		UPDATE Address SET 	StreetName			= pStreetName,
							Address1			= pAddress1,
							StateId			= pStateId,	
							CityName			= pCityName,
							ZipCode			= pZipCode,
							Country			= pCountry,
							ContactPerson		= pContactPerson,
							Email				= pEmail,
							PhoneNo			= pPhoneNo
			WHERE AddressId = @AddressId;
	end if;
	
	UPDATE Client	SET CustomerName 		= pCustomerName,
						AddressId 			= @AddressId,
						Telephone			= @PhoneNo,
						Fax 				= null,
						Email 				= pEmail,
						ContactPerson		= pContactPerson
		where Clientid = pClientId;
		
								


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_Client_Security` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_Client_Security`(IN pUserId char(36), IN pClientId int)
ThisProc:
	BEGIN

		-- noformat

		SELECT	IFNULL(IsCloudxUser, 0), ClientId 
		INTO	@isCloudxUser, @ClientId
		FROM	User
		WHERE	UserId = pUserId;

		IF @isCloudxUser = 0 THEN 
			SET pClientId = @ClientId;
		end if;

		SELECT 
				*
		FROM _x_Client
		WHERE ClientId = pClientId;
	
/*
	call _x_Client_Security('18b61a24-d0a4-11e9-b055-22000a1f9f3d', 1) 	-- bpngards admin
	call _x_Client_Security('78cb5a18-7474-4c81-814b-69e568833e9b', 88) 		-- tiffany.anderson@bongards.com
*/
	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_Client_Security_Update` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_Client_Security_Update`(
-- noformat
		IN pUserId 										char(36), 
		IN pClientId 									int,

		IN pSecurity_Password_MinLength 				int,
		IN pSecurity_Password_RequireNumbers			bit,
		IN pSecurity_Password_RequireUppercase			bit,
		IN pSecurity_Password_RequireLowercase			bit,
		IN pSecurity_Password_RequireSpecialChar		bit,
		IN pSecurity_Password_RestrictRepeatingChar		bit,
	
		IN pSecurity_Password_Attempts					tinyint,
		IN pSecurity_Password_ExpirationDays			int,
		IN pSecurity_Password_History					tinyint,
		
		IN pSecurity_Authentication_Locations			tinyint,
		IN pSecurity_Authentication_Check				tinyint,
		IN pSecurity_Deactivate_InactiveUsersDays		int,
		IN pSecurity_Deactivate_NotifyAdminsDays		tinyint
		)
ThisProc:BEGIN



	SELECT	IFNULL(IsCloudxUser, 0), ClientId 
	INTO	@isCloudxUser, @ClientId
	FROM	User
	WHERE	UserId = pUserId;

	IF @isCloudxUser = 0 THEN 
		SET pClientId = @ClientId;
	end if;

	if ifnull(pSecurity_Password_MinLength, 0) < 8 THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Password Length:The minimum length is 8.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;

	if ifnull(pSecurity_Password_MinLength, 0) < 8 THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Password Length:The minimum length is 8.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;

	SET pSecurity_Password_RequireNumbers			= ifnull(pSecurity_Password_RequireNumbers, 0);
	SET pSecurity_Password_RequireUppercase			= ifnull(pSecurity_Password_RequireUppercase, 0);
	SET pSecurity_Password_RequireLowercase			= ifnull(pSecurity_Password_RequireLowercase, 0);
	SET pSecurity_Password_RequireSpecialChar		= ifnull(pSecurity_Password_RequireSpecialChar, 0);
	SET pSecurity_Password_RestrictRepeatingChar	= ifnull(pSecurity_Password_RestrictRepeatingChar, 0);

	if ifnull(pSecurity_Password_MinLength, 0) < 8 THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Password Length:The minimum length is 8.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;

	if NOT ifnull(pSecurity_Password_Attempts, 0) BETWEEN 3 AND 7 THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Password Attempts:Must be between 3 and 7.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;

	if NOT ifnull(pSecurity_Password_Attempts, 0) BETWEEN 3 AND 7 THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Password Attempts:Must be between 3 and 7.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;

	SET pSecurity_Password_ExpirationDays				= ifnull(pSecurity_Password_ExpirationDays, 60);
	SET pSecurity_Password_History						= ifnull(pSecurity_Password_History, -1);
	SET pSecurity_Authentication_Locations 				= ifnull(pSecurity_Authentication_Locations, 3);
	SET pSecurity_Authentication_Check					= ifnull(pSecurity_Authentication_Check, 3);
	SET pSecurity_Deactivate_InactiveUsersDays			= ifnull(pSecurity_Deactivate_InactiveUsersDays, 60);
	SET pSecurity_Deactivate_NotifyAdminsDays			= ifnull(pSecurity_Deactivate_NotifyAdminsDays, 3);

	-- call _x_Notify(@UserId, 'Client', 'Security change', 'Settings', null, null, null);
	
	UPDATE _x_Client	SET	Security_Password_MinLength 				= pSecurity_Password_MinLength,
							Security_Password_RequireNumbers			= pSecurity_Password_RequireNumbers,
							Security_Password_RequireUppercase			= pSecurity_Password_RequireUppercase,
							Security_Password_RequireLowercase			= pSecurity_Password_RequireLowercase,
							Security_Password_RequireSpecialChar		= pSecurity_Password_RequireSpecialChar,
							Security_Password_RestrictRepeatingChar		= pSecurity_Password_RestrictRepeatingChar,
							Security_Password_Attempts					= pSecurity_Password_Attempts,
							Security_Password_ExpirationDays			= pSecurity_Password_ExpirationDays,
							Security_Password_History					= pSecurity_Password_History,
							Security_Authentication_Locations			= pSecurity_Authentication_Locations,
							Security_Authentication_Check				= pSecurity_Authentication_Check,
							Security_Deactivate_InactiveUsersDays		= pSecurity_Deactivate_InactiveUsersDays,
							Security_Deactivate_NotifyAdminsDays		= pSecurity_Deactivate_NotifyAdminsDays
		where Clientid = pClientId;
		
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_Client_Switch` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_Client_Switch`(
-- noformat
		IN pUserId 				char(36)
		)
ThisProc:BEGIN

	SELECT	IFNULL(IsCloudxUser, 0), ClientId, Firstname, Lastname
	INTO	@isCloudxUser, @ClientId, @FirstName, @LastName
	FROM	User
	WHERE	UserId = pUserId;

	IF @isCloudxUser = 0 THEN 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This function is not available.', MYSQL_ERRNO = 1;
		leave ThisProc;
	end if;
	SET @isDataEntry = 0;
	if EXISTS (
					SELECT	1
				    FROM	ClientUserRoles cur
				      		INNER JOIN ClientRoles cr				ON	cr.RoleId = cur.RoleId
							INNER JOIN ClientRoleFunctions crf		ON 	crf.RoleId = cr.RoleId
				    WHERE	cur.UserId = pUserId
							AND crf.FunctionKey = 'SystemDataEntry'
				) THEN 

		SET @isDataEntry = 1;
	END if;
	

	drop TEMPORARY table if exists myAllowedClients;
	CREATE TEMPORARY TABLE myAllowedClients (
		SELECT	Client.CustomerName,
				min(u.UserId)						AS UserId,
				Client.ClientId
		FROM	User u
				inner JOIN Client		ON Client.ClientId = u.ClientId
 				INNER JOIN _x_Client xc	ON xc.ClientId = u.ClientId
		WHERE 	u.FirstName = @FirstName
				AND (
						u.LastName = @LastName
					)
				AND u.IsCloudxUser = TRUE
				AND u.IsActive = TRUE
				AND u.ClientId <> @ClientId
		GROUP	BY Client.CustomerName, Client.ClientId
	);

	IF @isDataEntry = 1 THEN
		SELECT 	myAllowedClients.Customername									AS Label,
				myAllowedClients.UserId 										AS UserId
		FROM	Invoice i
				INNER JOIN myAllowedClients	on myAllowedClients.ClientId
		WHERE 	i.ClientId = myAllowedClients.ClientId
				AND i.InvoiceType <> 'Archived'
				AND i.IsDeleted = FALSE
				and i.IsPaused = FALSE
				AND i.ApprovalStatusId IN (1,2)
		GROUP 	by myAllowedClients.Customername
		HAVING 	count(*) > 0
		ORDER	BY count(*) desc;
	ELSE
		SELECT 	CustomerName 				AS Label,
				Userid 						AS UserId
		FROM 	myAllowedClients 
		ORDER	by 1;							
    END IF;
            


-- CALL _x_Client_Switch('0cafd6c3-4c27-45dc-8cf6-a3f845be8e04'); -- 
-- CALL _x_Client_Switch('18b61a24-d0a4-11e9-b055-22000a1f9f3d');	-- admin

-- SELECT * FROM User WHERE UserId = '0cafd6c3-4c27-45dc-8cf6-a3f845be8e04';

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_Dashboard` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_Dashboard`(
-- noformat
	IN `pType` tinyint,
	IN `pClientId` int,
	IN `pOffset` int,
	IN `pSize` int)
BEGIN

	set @VendorNoAfterName = 1;

	call _x_SetClientTimeZone(pClientId);

	IF (pType = 0) THEN	
		-- By Approver
		SELECT
				`User`.UserId,
				ifnull(CONCAT(`User`.LastName, ', ', `User`.FirstName), '(unassigned)')							AS `FullName`,
 				case when length(User.LastName) + length(User.FirstName) + 2 > 16
 					then CONCAT(SUBSTRING(CONCAT(`User`.LastName, ', ', `User`.FirstName), 1, 14), '..') 
 					else ifnull(CONCAT(`User`.LastName, ', ', `User`.FirstName), '(unassigned)')	  end  		AS `Name`,
				FORMAT(SUM(Invoice.InvoiceTotal), 2) 															AS `InvoiceTotal`,
				SUM(Invoice.InvoiceTotal)			 															AS `Value`
		FROM 	Invoice
				INNER JOIN UserInvoiceAssignment					ON Invoice.InvoiceId = UserInvoiceAssignment.InvoiceId
				left JOIN `User`									ON UserInvoiceAssignment.UserId = `User`.UserId
		WHERE	Invoice.ClientId = pClientId
				AND Invoice.IsPaused = FALSE
				AND Invoice.IsDeleted = FALSE
				AND Invoice.ApprovalStatusId = 3
		GROUP	BY `User`.UserId
		ORDER	BY 2  
		LIMIT	pOffset, pSize;
	
	ELSEIF (pType = 1) THEN
		-- by Vendor
		SELECT
				Invoice.VendorId,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
					else
						concat('[', IFNULL(Vendor.VendorNo, ''), '] ', IFNULL(Vendor.VendorName, '')) end as Vendor,
				CONCAT(SUBSTRING(Vendor.VendorName, 1, 11), '..') AS `Name`,
				FORMAT(SUM(Invoice.InvoiceTotal), 2) AS `InvoiceTotal`,
				SUM(Invoice.InvoiceTotal) AS `Value`		
		FROM 	Invoice
				INNER JOIN Vendor					ON Invoice.VendorId = Vendor.VendorId
		WHERE 	Invoice.ClientId = pClientId
				AND Invoice.IsDeleted = FALSE
				AND Invoice.ApprovalStatusId = 3
		GROUP	BY Vendor
		ORDER	BY 5 DESC 
		LIMIT pOffset, pSize;		
	ELSEIF (pType = 2) THEN
		-- By Due date
		SELECT
				InvoiceId,
				PaymentDueDate,
				DATE_FORMAT(PaymentDueDate, "%b %e, %Y") AS `Name`,
				FORMAT(SUM(InvoiceTotal), 2) AS `InvoiceTotal`,
				SUM(InvoiceTotal) AS `Value`		
		FROM	Invoice
		WHERE	ClientId = pClientId
				AND IsDeleted = FALSE
				AND ApprovalStatusId = 3
				AND PaymentDueDate IS NOT NULL
		GROUP 	BY PaymentDueDate
		ORDER 	BY PaymentDueDate DESC LIMIT pOffset, pSize;
	ELSE
		-- by Net terms
		SELECT
				InvoiceId,
				NetTermDate,
				DATE_FORMAT(NetTermDate, "%b %e, %Y") AS `Name`,
				FORMAT(SUM(InvoiceTotal), 2) AS `InvoiceTotal`,
				SUM(InvoiceTotal) AS `Value`
		FROM 	Invoice
		WHERE	ClientId = pClientId
				and NetTermDate >= date(now())
				and NetTermDiscount > 0
				AND IsDeleted = FALSE
				AND ApprovalStatusId = 3
				AND NetTermDate IS NOT NULL
		GROUP	BY NetTermDate
		ORDER	BY NetTermDate DESC LIMIT pOffset, pSize;

  END IF;
-- select * from Invoice order by 1 desc limit 10
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DashboardClient_Approvers` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DashboardClient_Approvers`(
-- noformat 
	IN pUserId 				char(36), 
	IN pTop 				int,			-- Top x
	in pOrderCriteria		varchar(15),	-- DaysInQueue or InvoiceCount or InvoiceTotal
	in pApproverID 			char(36), 		-- The field and the one below will allow the SP to return the invoices that repect this criteria
	IN pQueueCategory 		int
	)
ThisProc:BEGIN

	select 	ClientId 
	into 	@ClientId
	from 	User u
	where	UserId = pUserId;

	set @CodePosition = 2;
	call _x_SetClientTimeZone(@ClientId);
	Call _x_GetClientParam(@ClientId, 'CodePosition', @CodePosition);

	set @AgingBucket = 6;


	drop TEMPORARY TABLE IF EXISTS mySummaryData;
		CREATE TEMPORARY TABLE IF NOT EXISTS mySummaryData AS (
		SELECT	
				uia.UserId,
				uia.InvoiceId,
				Concat(Lastname, ', ', Firstname)											as UserName,
				InvoiceTotal,
				timestampdiff(day, uia.DateCreated, UTC_TIMESTAMP()) 						AS DaysInQueue
		FROM	APSHTML.UserInvoiceAssignment uia
				INNER JOIN APSHTML.User			on User.UserId = uia.UserId
				INNER JOIN APSHTML.Invoice		ON Invoice.InvoiceId = uia.InvoiceId
		WHERE 	User.ClientID = @ClientId
				and Invoice.InvoiceType = 'Invoice'
				and Invoice.IsDeleted = FALSE
				AND Invoice.VendorId is not null
				AND Invoice.ApprovalStatusId = 3
				AND uia.UserId = ifnull(pApproverID, uia.UserId)
				AND (
						pQueueCategory is NULL
						or (
							pQueueCategory =	CASE 			
														WHEN timestampdiff(day, uia.DateCreated, UTC_TIMESTAMP()) 		BETWEEN 0 				AND @AgingBucket-1		THEN 1
														WHEN timestampdiff(day, uia.DateCreated, UTC_TIMESTAMP()) 		BETWEEN @AgingBucket 	AND (@AgingBucket*2)-1	THEN 2
														WHEN timestampdiff(day, uia.DateCreated, UTC_TIMESTAMP()) 		BETWEEN @AgingBucket*2 	AND (@AgingBucket*3)-1	THEN 3
														WHEN timestampdiff(day, uia.DateCreated, UTC_TIMESTAMP()) 		BETWEEN @AgingBucket*3 	AND (@AgingBucket*4)-1	THEN 4
														ELSE 5 END
							)
					)
		);


	-- return back a recordset of the details requested
	IF pApproverID is not null THEN
		SELECT
				_x_GetFormatedValue(Vendor.VendorNo, Vendor.VendorName, @CodePosition)		as Vendor,
				Invoice.InvoiceNo,
				date(Invoice.InvoiceDate)													AS InvoiceDate,
				Invoice.InvoiceTotal			 											as InvoiceTotal,
				Invoice.IsPOInvoice,
				Invoice.PONumber,
				convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone) 				AS ScannedDate,
				DaysInQueue,
				Invoice.InvoiceId
		FROM	APSHTML.Invoice
				INNER JOIN APSHTML.Vendor			ON Invoice.VendorId = Vendor.VendorId
				INNER JOIN mySummaryData			ON mySummaryData.InvoiceId = Invoice.InvoiceId
		WHERE 	Invoice.ClientId = @ClientId
		ORDER	BY DaysInQueue DESC;
		LEAVE ThisProc;
	end if;




	drop TEMPORARY TABLE IF EXISTS myTopLeaders;
	CREATE TEMPORARY TABLE IF NOT EXISTS myTopLeaders AS (
		SELECT 	UserId																	AS UserId,
				CASE	WHEN pOrderCriteria = 'DaysInQueue' then max(DaysInQueue)
						WHEN pOrderCriteria = 'InvoiceCount' then count(*)
						ELSE sum(ifnull(InvoiceTotal, 0.00)) END						AS UserLeaderTotal
		FROM 	mySummaryData
		GROUP 	BY UserId
		ORDER	BY UserLeaderTotal desc
		LIMIT	pTop
	);


	SELECT 	
			Data.UserName																															as UserName,
			Data.UserId																																AS UserId,
			myTopLeaders.UserLeaderTotal																											AS UserLeaderTotal,
			CASE 			
					WHEN DaysInQueue 		BETWEEN 0 				AND @AgingBucket-1		THEN 1
					WHEN DaysInQueue 		BETWEEN @AgingBucket 	AND (@AgingBucket*2)-1	THEN 2
					WHEN DaysInQueue 		BETWEEN @AgingBucket*2 	AND (@AgingBucket*3)-1	THEN 3
					WHEN DaysInQueue 		BETWEEN @AgingBucket*3 	AND (@AgingBucket*4)-1	THEN 4
					ELSE 5 END																														AS QueueCategory,
			CASE 	
					WHEN DaysInQueue 		BETWEEN 0 				AND @AgingBucket-1		THEN concat('0', '-', @AgingBucket-1)
					WHEN DaysInQueue 		BETWEEN @AgingBucket 	AND (@AgingBucket*2)-1	THEN concat(@AgingBucket*1, '-', (@AgingBucket*2)-1)
					WHEN DaysInQueue 		BETWEEN @AgingBucket*2 	AND (@AgingBucket*3)-1	THEN concat(@AgingBucket*2, '-', (@AgingBucket*3)-1)
					WHEN DaysInQueue 		BETWEEN @AgingBucket*3 	AND (@AgingBucket*4)-1	THEN concat(@AgingBucket*3, '-', (@AgingBucket*4)-1)
					ELSE concat(@AgingBucket*5, '+') END																							AS QueueCategoryLabel,
			Count(*) 																																AS TotalCount,
			sum(ifnull(InvoiceTotal, 0.00)) 																								AS TotalAmount
	FROM 	mySummaryData as Data	
			inner JOIN myTopLeaders			ON myTopLeaders.UserId = Data.UserId
	GROUP	BY 	UserName, UserId, UserLeaderTotal, QueueCategory
	ORDER 	BY 	UserLeaderTotal desc, UserName, UserId, QueueCategory;




-- 
-- select * FROM AuthorizedCompanies;
-- select * from mySummaryData;
-- SELECT * FROM InvoiceStatus;



/*

call _x_DashboardClient_Approvers('52029cb8-4d2f-4914-86eb-036c545fcc47', 5, 'DaysInQueue', null, null);  	-- Homer
call _x_DashboardClient_Approvers('52029cb8-4d2f-4914-86eb-036c545fcc47', 5, 'InvoiceCount', null, null);  	-- Homer
call _x_DashboardClient_Approvers('52029cb8-4d2f-4914-86eb-036c545fcc47', 5, 'InvoiceTotal', null, null);  	-- Homer


call _x_DashboardClient_Approvers('dfb816df-f6f5-41c0-9d43-8fbe626fed09', 5, 'DaysInQueue', null, null);  	-- kettle
call _x_DashboardClient_Approvers('dfb816df-f6f5-41c0-9d43-8fbe626fed09', 5, 'InvoiceCount', null, null);  	-- kettle
call _x_DashboardClient_Approvers('dfb816df-f6f5-41c0-9d43-8fbe626fed09', 5, 'InvoiceTotal', null, null);  	-- kettle

call _x_DashboardClient_Approvers('18b61a24-d0a4-11e9-b055-22000a1f9f3d', 5, 'DaysInQueue', null, null);  	-- bongard
call _x_DashboardClient_Approvers('18b61a24-d0a4-11e9-b055-22000a1f9f3d', 5, 'InvoiceCount', null, null);  	-- bongard
call _x_DashboardClient_Approvers('18b61a24-d0a4-11e9-b055-22000a1f9f3d', 5, 'InvoiceTotal', null, null);  	-- bongard
*/

  END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DashboardClient_Summary` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DashboardClient_Summary`(IN pUserId char(36))
ThisProc:
-- noformat 
  BEGIN

	select 	ClientId 
	into 	@ClientId
	from 	User u
	where	UserId = pUserId;

	call _x_SetClientTimeZone(@ClientId);

	drop TEMPORARY TABLE IF EXISTS myPaymentProviders;
	CREATE TEMPORARY TABLE IF NOT EXISTS myPaymentProviders AS (
			select 	cc.Id as ClientCompanyId
            FROM	ClientCompany cc
					inner join _x_ClientCompany xcc 	on xcc.Id = cc.Id
															AND xcc.PaymentEnabled = 1
										
			WHERE	ClientId = @ClientId
					and IsActive = 1
		);

	drop TEMPORARY TABLE IF EXISTS myPaymentStatusBeingMonitored;
	CREATE TEMPORARY TABLE IF NOT EXISTS myPaymentStatusBeingMonitored AS (
		SELECT	StateId 
		FROM 	InvoiceStatus
		WHERE 	StateId IN (5, 10, 12) 
				AND EXISTS (select 1 FROM myPaymentProviders)
		);

	drop TEMPORARY TABLE IF EXISTS mySummaryData;
	CREATE TEMPORARY TABLE IF NOT EXISTS mySummaryData AS (
		SELECT 	Invoice.*
		FROM	Invoice
				INNER JOIN 	ClientCompany cc		ON cc.ClientId = Invoice.ClientId
													AND cc.CompanyCode = Invoice.CompanyCode
				LEFT JOIN 	myPaymentProviders		ON myPaymentProviders.ClientCompanyId = cc.Id
		WHERE 	Invoice.ClientId = @ClientId
				and Invoice.IsDeleted = FALSE
				and Invoice.InvoiceType = 'Invoice'
				AND (
						Invoice.ApprovalStatusId IN (3, 4, 6)
						OR (
							Invoice.ApprovalStatusId IN (SELECT stateId FROM myPaymentStatusBeingMonitored psbm) 
							AND myPaymentProviders.ClientCompanyId is not null
							)
					)
		);

	SELECT	count(*), ifnull(sum(ifnull(InvoiceTotal, 0)), 0.00)
	INTO 	@InvoicesInApprovalCount, @InvoicesInApprovalTotal			
	FROM	mySummaryData 	
	WHERE	ApprovalStatusId = 3 
			and isPaused = false;

	SELECT	count(*), ifnull(sum(ifnull(InvoiceTotal, 0)), 0.00)
	INTO 	@InvoicesPausedCount, @InvoicesPausedTotal			
	FROM	mySummaryData 	
	WHERE	isPaused = true;

	SELECT	count(*), ifnull(sum(ifnull(InvoiceTotal, 0)), 0.00)
	INTO 	@InvoicesExceptionCount, @InvoicesExceptionTotal			
	FROM	mySummaryData 	
	WHERE	ApprovalStatusId = 6
			and isPaused = false;

	SELECT	count(*), ifnull(sum(ifnull(InvoiceTotal, 0)), 0.00)
	INTO 	@InvoicesPendingPaymentCount, @InvoicesPendingPaymentTotal			
	FROM	mySummaryData 	
	WHERE	ApprovalStatusId IN (5, 10, 12) 
			and isPaused = false;

	SELECT	count(*), ifnull(sum(ifnull(InvoiceTotal, 0)), 0.00)
	INTO 	@InvoicesAvailableDiscountsCount, @InvoicesAvailableDiscountsTotal			
	FROM	mySummaryData 	
	WHERE	ApprovalStatusId IN (5, 10, 12) 
			and isPaused = FALSE
			AND timestampdiff(day, UTC_TIMESTAMP(), NetTermDate) >= 0;
		
	SELECT	count(*), ifnull(sum(ifnull(InvoiceTotal, 0)), 0.00)
	INTO 	@InvoicesOverdueCount, @InvoicesOverdueTotal			
	FROM	mySummaryData 	
	WHERE	ApprovalStatusId IN (5, 10, 12) 
			and isPaused = FALSE
			AND timestampdiff(day, UTC_TIMESTAMP(), PaymentDueDate) < 0;

	SELECT 	@InvoicesInApprovalCount			AS InvoicesInApprovalCount, 
			@InvoicesInApprovalTotal			AS InvoicesInApprovalTotal,
			@InvoicesPausedCount				AS InvoicesPausedCount, 
			@InvoicesPausedTotal				AS InvoicesPausedTotal,
			@InvoicesExceptionCount				AS InvoicesExceptionCount, 
			@InvoicesExceptionTotal				AS InvoicesExceptionTotal,
			@InvoicesPendingPaymentCount		AS InvoicesPendingPaymentCount, 
			@InvoicesPendingPaymentTotal		AS InvoicesPendingPaymentTotal,
			@InvoicesAvailableDiscountsCount	AS InvoicesAvailableDiscountsCount, 
			@InvoicesAvailableDiscountsTotal	AS InvoicesAvailableDiscountsTotal,
			@InvoicesOverdueCount				AS InvoicesOverDueCount,									
			@InvoicesOverdueTotal				AS InvoicesOverDueTotal;
-- 
-- select * FROM AuthorizedCompanies;
-- select * from mySummaryData;
-- SELECT * FROM InvoiceStatus;



/*
call _x_DashboardClient_Summary('18b61a24-d0a4-11e9-b055-22000a1f9f3d');	-- bongard
call _x_DashboardClient_Summary('dfb816df-f6f5-41c0-9d43-8fbe626fed09');  	-- kettle
call _x_DashboardClient_Summary('52029cb8-4d2f-4914-86eb-036c545fcc47');  	-- Homer
*/

  END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DashboardClient_VendorAging` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DashboardClient_VendorAging`(
-- noformat 
	IN pUserId 				char(36), 
	IN pOutstanding			bit,
	IN pSummaryData 		bit,
	IN pTop 				int,			-- Top x
	in pOrderCriteria		varchar(15),	-- InvoiceCount or InvoiceTotal
	in pVendorID 			int, 			-- The field and the one below will allow the SP to return the invoices that repect this criteria
	IN pQueueCategory 		int
	)
ThisProc:BEGIN

	select 	ClientId 
	into 	@ClientId
	from 	User u
	where	UserId = pUserId;

	set @CodePosition = 2;
	call _x_SetClientTimeZone(@ClientId);
	Call _x_GetClientParam(@ClientId, 'CodePosition', @CodePosition);

	SET pTop = ifnull(pTop, 500);

	drop TEMPORARY TABLE IF EXISTS mySummaryData;
	CREATE TEMPORARY TABLE IF NOT EXISTS mySummaryData AS (
		SELECT 	Invoice.*,
				timestampdiff(day, UTC_TIMESTAMP(), PaymentDueDate) AS DaysUntilDue
		FROM	APSHTML.Invoice
		WHERE 	ClientId = @ClientId
				and Invoice.InvoiceType = 'Invoice'
				and Invoice.IsDeleted = FALSE
				AND Invoice.VendorId is not null
				AND Invoice.ApprovalStatusId IN (1, 3, 4, 6)
				AND Invoice.PaymentDueDate is NOT NULL
				AND (
						(pOutstanding = TRUE AND timestampdiff(day, UTC_TIMESTAMP(), PaymentDueDate) >= 0)
						OR (pOutstanding = False AND timestampdiff(day, UTC_TIMESTAMP(), PaymentDueDate) < 0)
					)
-- new
				AND Invoice.VendorId = ifnull(pVendorID, Invoice.VendorId)
				AND (
						pQueueCategory is NULL
						or (
							pQueueCategory =	CASE 	WHEN abs(timestampdiff(day, UTC_TIMESTAMP(), PaymentDueDate)) BETWEEN 0 	AND 30 THEN 1
														WHEN abs(timestampdiff(day, UTC_TIMESTAMP(), PaymentDueDate)) BETWEEN 31 	AND 60 THEN 2
														WHEN abs(timestampdiff(day, UTC_TIMESTAMP(), PaymentDueDate)) BETWEEN 61 	AND 90 THEN 3
														WHEN abs(timestampdiff(day, UTC_TIMESTAMP(), PaymentDueDate)) BETWEEN 91 	AND 120 THEN 4
														ELSE 5 END
							)
					)
-- new
		);

	if pSummaryData = true AND pVendorID is NULL AND pQueueCategory is null THEN 
		SELECT 	
				CASE 	WHEN abs(DaysUntilDue) BETWEEN 0 	AND 30 THEN 1
						WHEN abs(DaysUntilDue) BETWEEN 31 	AND 60 THEN 2
						WHEN abs(DaysUntilDue) BETWEEN 61 	AND 90 THEN 3
						WHEN abs(DaysUntilDue) BETWEEN 91 	AND 120 THEN 4
						ELSE 5 END															AS AgeCategory,
				CASE 	WHEN abs(DaysUntilDue) BETWEEN 0 	AND 30 THEN '0 - 30'
						WHEN abs(DaysUntilDue) BETWEEN 31 	AND 60 THEN '31 - 60'
						WHEN abs(DaysUntilDue) BETWEEN 61 	AND 90 THEN '61 - 90'
						WHEN abs(DaysUntilDue) BETWEEN 91 	AND 120 THEN '91 - 120'
						ELSE '121 +' END													AS AgeCategoryLabel,
				Count(*) 																	AS TotalCount,
				sum(ifnull(InvoiceTotal, 0.00)) 											AS TotalAmount
		FROM 	mySummaryData as Data	
		GROUP	BY 	AgeCategory, AgeCategoryLabel
		ORDER 	BY 	AgeCategory;
		Leave ThisProc;
	END if;


	-- return back a recordset of the details requested
	IF pSummaryData = false AND (pVendorID is not NULL OR pQueueCategory is NOT null) THEN
		SELECT
				_x_GetFormatedValue(Vendor.VendorNo, Vendor.VendorName, @CodePosition)		as Vendor,
				Invoice.InvoiceNo,
				date(Invoice.InvoiceDate)													AS InvoiceDate,
				Invoice.InvoiceTotal			 											as InvoiceTotal,
				Invoice.IsPOInvoice,
				Invoice.PONumber,
				convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone) 				AS ScannedDate,
				abs(DaysUntilDue)															AS DaysUntilDue,
				Invoice.InvoiceId
		FROM	APSHTML.Invoice
				INNER JOIN APSHTML.Vendor			ON Invoice.VendorId = Vendor.VendorId
				INNER JOIN mySummaryData			ON mySummaryData.InvoiceId = Invoice.InvoiceId
		WHERE 	Invoice.ClientId = @ClientId
		ORDER	BY abs(DaysUntilDue) DESC;
		LEAVE ThisProc;
	end if;


	if pSummaryData = false THEN 
		drop TEMPORARY TABLE IF EXISTS myTopLeaders;
		CREATE TEMPORARY TABLE IF NOT EXISTS myTopLeaders AS (
			SELECT 	VendorId																AS VendorId,
					CASE	WHEN pOrderCriteria = 'InvoiceCount' then count(*)
							ELSE sum(ifnull(InvoiceTotal, 0.00)) END						AS VendorLeaderTotal
			FROM 	mySummaryData
			GROUP 	BY VendorId
			ORDER	BY VendorLeaderTotal desc
			LIMIT	pTop
		);
		SELECT 	
				_x_GetFormatedValue(Vendor.VendorNo, Vendor.VendorName, @CodePosition)		as Vendor,
				Data.VendorId																AS VendorID,
				myTopLeaders.VendorLeaderTotal												AS VendorLeaderTotal,
				CASE 	WHEN DaysUntilDue >= 0 						THEN 0
						WHEN abs(DaysUntilDue) BETWEEN 0 	AND 30	THEN 1
						WHEN abs(DaysUntilDue) BETWEEN 31 	AND 60	THEN 2
						WHEN abs(DaysUntilDue) BETWEEN 61 	AND 90	THEN 3
						WHEN abs(DaysUntilDue) BETWEEN 91 	AND 120 THEN 4
						ELSE 5 END															AS AgeCategory,
				CASE 	
						WHEN DaysUntilDue >= 0 						THEN 'Current'
						WHEN abs(DaysUntilDue) BETWEEN 1 	AND 30	THEN '1 - 30'
						WHEN abs(DaysUntilDue) BETWEEN 31 	AND 60	THEN '31 - 60'
						WHEN abs(DaysUntilDue) BETWEEN 61 	AND 90	THEN '61 - 90'
						WHEN abs(DaysUntilDue) BETWEEN 91 	AND 120	THEN '91 - 120'
						ELSE '121 +' END													AS AgeCategoryLabel,
				Count(*) 																	AS TotalCount,
				sum(ifnull(InvoiceTotal, 0.00)) 											AS TotalAmount
		FROM 	mySummaryData as Data	
				inner JOIN APSHTML.Vendor				ON Vendor.VendorId = Data.VendorId
				inner JOIN myTopLeaders			ON myTopLeaders.VendorId = Data.VendorId
		GROUP	BY 	Vendor, VendorID, VendorLeaderTotal, AgeCategory
		ORDER 	BY 	VendorLeaderTotal desc, Vendor, VendorID, AgeCategory;
		Leave ThisProc;
	END if;






/*
call _x_DashboardClient_VendorAging('52029cb8-4d2f-4914-86eb-036c545fcc47', 'Vendor', 5, 'InvoiceTotal');  	-- Homer
call _x_DashboardClient_VendorAging('dfb816df-f6f5-41c0-9d43-8fbe626fed09', 'Vendor', 5, 'InvoiceTotal');  	-- kettle
call _x_DashboardClient_VendorAging('18b61a24-d0a4-11e9-b055-22000a1f9f3d', 'Vendor', 5, 'InvoiceTotal');  	-- bongard

*/

  END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DashboardDetail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DashboardDetail`(
-- noformat
	IN `pType` tinyint,
	IN `pClientId` int,
	IN `pId` char(36),
	IN `pDate` datetime,
	IN `pOffset` int,
	IN `pSize` int)
BEGIN


	set @VendorNoAfterName = 1;

	call _x_SetClientTimeZone(pClientId);

	IF (pType = 0) THEN
		-- by Approver
		SELECT
				Invoice.InvoiceId,
				Invoice.InvoiceNo,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
					else
						concat('[', IFNULL(Vendor.VendorNo, ''), '] ', IFNULL(Vendor.VendorName, '')) end as Vendor,
				format(Invoice.InvoiceTotal, 2) as InvoiceTotal,
				Invoice.InvoiceDate,
				convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone) AS ScannedDate,
				Invoice.IsPOInvoice,
				Invoice.PONumber,
				Invoice.IsPaused,
				DATEDIFF(CURRENT_DATE(), UserInvoiceAssignment.DateCreated) AS Days
		FROM	Invoice
				LEFT JOIN Vendor					ON Invoice.VendorId = Vendor.VendorId
				INNER JOIN UserInvoiceAssignment	ON Invoice.InvoiceId = UserInvoiceAssignment.InvoiceId
		WHERE Invoice.ClientId = pClientId
				AND Invoice.IsPaused = FALSE
				AND Invoice.IsDeleted = FALSE
				AND Invoice.ApprovalStatusId = 3
				AND UserInvoiceAssignment.UserId = pId
		ORDER	BY Days DESC 
		LIMIT pOffset, pSize;
	
	ELSEIF (pType = 1) THEN
		-- for a vendor
		SELECT
				Invoice.InvoiceId,
				Invoice.InvoiceNo,
				FORMAT(Invoice.InvoiceTotal, 2) AS InvoiceTotal,
				Invoice.InvoiceDate,
				Invoice.IsPOInvoice,
				Invoice.IsPaused,
				(select	GROUP_CONCAT(concat(User.LastName, ', ', User.FirstName) order by User.LastName separator ' | ')
				from	UserInvoiceAssignment Data
						inner join User 	on User.UserId = Data.UserId
				where 	Data.InvoiceId = Invoice.InvoiceId) 															as Assigned
		FROM	Invoice
		WHERE 	Invoice.ClientId = pClientId
				AND Invoice.IsDeleted = FALSE
				AND Invoice.ApprovalStatusId = 3
				AND Invoice.VendorId = pId
		order 	BY 3, InvoiceNo
		LIMIT	pOffset, pSize;
	
	ELSEIF (pType = 2) THEN
		-- Payment due date
		SELECT
				Invoice.InvoiceId,
				Invoice.InvoiceNo,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
					else
						concat('[', IFNULL(Vendor.VendorNo, ''), '] ', IFNULL(Vendor.VendorName, '')) end as Vendor,
				format(Invoice.InvoiceTotal, 2) as InvoiceTotal,
				Invoice.InvoiceDate,
				Invoice.IsPOInvoice,
				Invoice.IsPaused,
				(select	GROUP_CONCAT(concat(User.LastName, ', ', User.FirstName) order by User.LastName separator ' | ')
				from	UserInvoiceAssignment Data
						inner join User 	on User.UserId = Data.UserId
				where 	Data.InvoiceId = Invoice.InvoiceId) 															as Assigned
		FROM 	Invoice
				inner JOIN Vendor					ON Invoice.VendorId = Vendor.VendorId
		WHERE Invoice.ClientId = pClientId
				AND Invoice.IsDeleted = FALSE
				AND Invoice.ApprovalStatusId = 3
				AND Invoice.PaymentDueDate = pDate
		order 	BY 3, InvoiceNo
		LIMIT pOffset, pSize;
	ELSE
		-- Net Terms
		SELECT
				Invoice.InvoiceId,
				Invoice.InvoiceNo,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
					else
						concat('[', IFNULL(Vendor.VendorNo, ''), '] ', IFNULL(Vendor.VendorName, '')) end 				as Vendor,
				format(Invoice.InvoiceTotal, 2) as InvoiceTotal,
				Invoice.InvoiceDate,
				Invoice.IsPOInvoice,
				Invoice.IsPaused,
				(select	GROUP_CONCAT(concat(User.LastName, ', ', User.FirstName) order by User.LastName separator ' | ')
				from	UserInvoiceAssignment Data
						inner join User 	on User.UserId = Data.UserId
				where 	Data.InvoiceId = Invoice.InvoiceId) 															as Assigned

		FROM	Invoice
				INNER JOIN Vendor						ON Invoice.VendorId = Vendor.VendorId
		WHERE	Invoice.ClientId = pClientId
				AND Invoice.IsDeleted = FALSE
				AND Invoice.ApprovalStatusId = 3
				AND Invoice.NetTermDate = pDate
		order 	BY 3, InvoiceNo
		LIMIT pOffset, pSize;
		
	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DataLoadAll` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DataLoadAll`(IN pType tinyint, IN pClientId int, IN pOffset int, IN pSize int,
                                                      IN pSort varchar(255), IN pDesc tinyint(1),
                                                      IN pFilterValue varchar(255))
BEGIN

    SET @Order = 'ASC';
    IF (pDesc) THEN
        SET @Order = 'DESC';
    END IF;

    IF (pType = 0) THEN /* List: GLs */

        IF (pSort = '') THEN
            SET pSort = 'GLCode.GLCodeId';
        END IF;
        SET @query = CONCAT("SELECT 
				GLCode.GLCodeId as Id, GLCode.IsActive,
				GLCode.GLCodeName AS GLCode, GLCode.Desccription AS Description,
				CONCAT(ClientCompany.CompanyCode, ' - ', ClientCompany.`Description`) AS Company
			FROM GLCode
			LEFT JOIN ClientCompany ON GLCode.ClientCompanyId = ClientCompany.Id		
			WHERE GLCode.ClientId = ", pClientId, " AND 
			(GLCode.GLCodeName LIKE '%", pFilterValue, "%' OR GLCode.Desccription LIKE '%", pFilterValue, "%')
			ORDER BY GLCode.IsActive DESC, ", pSort, " ", @Order, "  	   
			LIMIT ", pOffset, ",", pSize, ";");
        PREPARE myquery FROM @query;
        EXECUTE myquery;

    ELSEIF (pType = 1) THEN /* List: Departments */

        IF (pSort = '') THEN
            SET pSort = 'Department.Id';
        END IF;
        SET @query = CONCAT("SELECT 
				Department.Id, Department.IsActive,
				Department.DepartmentName, Department.Description		
			FROM Department 
			WHERE Department.ClientId = ", pClientId, " AND 
			(Department.DepartmentName LIKE '%", pFilterValue, "%' OR Department.Description LIKE '%", pFilterValue, "%')
			 ORDER BY Department.IsActive DESC, ", pSort, " ", @Order, "  		   
			LIMIT ", pOffset, ",", pSize, ";");
        PREPARE myquery FROM @query;
        EXECUTE myquery;

    ELSEIF (pType = 2) THEN /*List: OrgData*/

        IF (pSort = '') THEN
            SET pSort = 'OrgData.Id';
        END IF;
        SET @query = CONCAT("SELECT 
				OrgData.Id, OrgData.IsActive, OrgData.OrgId, OrgData.OrgName, 
				IFNULL(OrgData.CountryCode, '') AS CountryCode,
				IFNULL(CONCAT(ClientCompany.CompanyCode, ' - ', ClientCompany.`Description`), '') AS Company
			FROM OrgData 
			LEFT JOIN ClientCompany ON OrgData.CompanyCode = ClientCompany.Id 
			WHERE OrgData.ClientId = ", pClientId, " AND
			(OrgName LIKE '%", pFilterValue, "%' OR OrgId LIKE '%", pFilterValue, "%')
			 ORDER BY OrgData.IsActive DESC, ", pSort, " ", @Order, " 	   
			LIMIT ", pOffset, ",", pSize, ";");
        PREPARE myquery FROM @query;
        EXECUTE myquery;

    ELSEIF (pType = 3) THEN /*List: Vendors*/

        IF (pSort = '') THEN
            SET pSort = 'v.VendorId';
        END IF;
        SET @query = CONCAT("SELECT
				v.VendorId as Id, v.IsActive, v.VendorNo, v.VendorName, v.VendorId,
				IFNULL(v.PaymentType,'') AS PaymentType ,  
				IFNULL(v.VendorTerm,'') AS VendorTerm, 
				IFNULL(CONCAT(cc.CompanyCode, ' - ', cc.`Description`),'') AS Company,
				IFNULL(CONCAT(fc.Code, ' - ', fc.Description),'') as FreightCode,
				IFNULL(CONCAT(st.Code , ' - ', st.Description),'') as ShippingTerm
			FROM Vendor v 
			LEFT JOIN ClientCompany cc ON v.ClientCompanyId  = cc.Id 
			LEFT JOIN FreightCodes fc On v.FreightCodeId = fc.FreightCodeId 
			LEFT JOIN ShippingTerms st ON v.ShippingTermId = st.ShippingTermId 
			/*LEFT JOIN VendorTerm vt ON v.VendorTerm */
			WHERE v.ClientId = ", pClientId, " AND
			(VendorNo LIKE '%", pFilterValue, "%' OR VendorName LIKE '%", pFilterValue, "%')
			ORDER BY v.IsActive DESC, ", pSort, " ", @Order, " 	   
			LIMIT ", pOffset, ",", pSize, ";");
        PREPARE myquery FROM @query;
        EXECUTE myquery;

    ELSEIF (pType = 4) THEN /*List: Client Company*/

        IF (pSort = '') THEN
            SET pSort = 'cc.Id';
        END IF;
        SET @query = CONCAT("SELECT 
				cc.Id, cc.IsActive, cc.CompanyCode, cc.Description, cc.DefaultDepartment as DefaultDepartmentId, cc.DefaultProject as DefaultProjectId, cc.DafaultGLCode as DafaultGLCodeId,
				IFNULL(CONCAT(d.DepartmentName , ' - ', d.`Description`),'') AS DefaultCostCenter,
				IFNULL(CONCAT(pt.ProjectName , ' - ', pt.`Description`),'') AS DefaultProject,
				IFNULL(CONCAT(gl.GLCodeName , ' - ', gl.Desccription),'') AS DafaultGLCode
			FROM ClientCompany cc 
			LEFT JOIN Department d ON cc.DefaultDepartment = d.Id
			LEFT JOIN ProjectType pt ON cc.DefaultProject = pt.Id 
			LEFT JOIN GLCode gl on cc.DafaultGLCode = gl.GLCodeId  		
			WHERE cc.ClientId = ", pClientId, " AND
			(cc.CompanyCode LIKE '%", pFilterValue, "%' OR cc.Description LIKE '%", pFilterValue, "%')
			ORDER BY cc.IsActive DESC, ", pSort, " ", @Order, " 	      
			LIMIT ", pOffset, ",", pSize, ";");
        PREPARE myquery FROM @query;
        EXECUTE myquery;

    ELSEIF (pType = 5) THEN /*LIST: Category*/

        IF (pSort = '') THEN
            SET pSort = 'c.Id';
        END IF;
        SET @query = CONCAT("SELECT c.Id, c.CategoryNo, c.CategoryName, IFNULL(c.CategoryType,'')AS CategoryType , 
								IFNULL(CONCAT(c2.CustomerName, ' - ', c2.CustomerNo),'') AS Customer
						FROM 	Category c 
								LEFT JOIN Customer c2 ON c.CustomerId = c2.CustomerId 
						WHERE	c.ClientId = ", pClientId, " AND
								(c.CategoryNo LIKE '%", pFilterValue, "%' OR c.CategoryName LIKE '%", pFilterValue, "%')
						ORDER	BY ", pSort, " ", @Order, " 		   
								LIMIT ", pOffset, ",", pSize, ";");
        PREPARE myquery FROM @query;
        EXECUTE myquery;

    ELSEIF (pType = 14) THEN /*List: PO Data*/

        IF (pSort = '') THEN
            SET pSort = 'p.Id';
        END IF;
        SET @query = CONCAT("SELECT 
            -- COUNT(*) OVER () AS total_count,
		    p.Id,
		    v.VendorName,
		    p.PONumber,
		    p.Amount,
		    p.POType,
		    p.POStatus,
		    p.ItemNumber,
		    p.VendorCatNumber,
		    p.UnitOfPurchase,
		    FORMAT(p.OrderQty,2) as OrderQty,
		    FORMAT(p.UnitCost,2) as UnitCost,
		    p.ExtCost,
		    FORMAT(p.RcvdQty,2) as RcvdQty,
		    p.LineNo,
		    p.POHeaderId,
		    p.POLineId,
		    p.POLineLocationId,
		    p.RecievedTransactionId,
		    p.GLCode,
		    p.IsExpense,
		    cc.Description as CompanyCode,
		    p.Container
		   FROM PO p
		   LEFT JOIN Vendor v ON p.VendorId = v.VendorId
		   LEFT JOIN ClientCompany cc ON p.ClientCompanyId = cc.Id
		   WHERE p.ClientId = ", pClientId, " AND 
		   (p.PONumber LIKE '%", pFilterValue, "%' OR v.VendorName LIKE '%", pFilterValue, "%')
		   ORDER BY ", pSort, " ", @Order, " 
		   LIMIT ", pOffset, ",", pSize, ";");
        PREPARE myquery FROM @query;
        EXECUTE myquery;
        DEALLOCATE PREPARE myquery;

    END IF;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DataLoadAllPaging` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DataLoadAllPaging`(IN `pType` tinyint,
IN `pClientId` int)
BEGIN

  IF (pType = 0) THEN /* List: GLs */

    SELECT
      COUNT(*) AS TotalRows
    FROM GLCode g
    WHERE g.ClientId = pClientId;

  ELSEIF (pType = 1) THEN /* List: Departments */

    SELECT
      COUNT(*) AS TotalRows
    FROM Department d
    WHERE d.ClientId = pClientId;

  ELSEIF (pType = 2) THEN /*List: OrgData*/

    SELECT
      COUNT(*) AS TotalRows
    FROM OrgData od
    WHERE od.ClientId = pClientId;

  ELSEIF (pType = 3) THEN /*List: Vendors*/

    SELECT
      COUNT(*) AS TotalRows
    FROM Vendor v
    WHERE v.ClientId = pClientId;

  ELSEIF (pType = 4) THEN /*List: Client Company*/

    SELECT
      COUNT(*) AS TotalRows
    FROM ClientCompany cc
    WHERE cc.ClientId = pClientId;

  ELSEIF (pType = 5) THEN /*LIST: Category*/

    SELECT
      COUNT(*) AS TotalRows
    FROM Category c
    WHERE c.ClientId = pClientId;

  ELSEIF (pType = 14) THEN /*List: PO Data*/

    SELECT
      COUNT(*) AS TotalRows
    FROM PO
    WHERE PO.ClientId = pClientId;

  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DataLoadCategory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DataLoadCategory`(IN pType tinyint,
IN pId int,
IN pClientId int,
IN pCustomerId int,
IN pCategoryName varchar(250),
IN pCategoryNo varchar(250),
IN pCategoryType tinyint)
BEGIN
  IF pType = 0 THEN -- SELECT Category

    SELECT
      c.Id,
      c.ClientId,
      c.CustomerId,
      c.CategoryName,
      c.CategoryNo,
      c.CategoryType,
      c2.CustomerName
    FROM Category c
      LEFT JOIN Customer c2
        ON c.CustomerId = c2.CustomerId
    WHERE c.Id = pId
    AND c.ClientId = pClientId;

  ELSEIF pType = 1 THEN -- Insert Category

    INSERT INTO Category (ClientId, CustomerId, CategoryName, CategoryNo, CategoryType)
      VALUES (pClientId, pCustomerId, pCategoryName, pCategoryNo, pCategoryType);

  ELSEIF pType = 2 THEN -- Update Category

    UPDATE Category
    SET CustomerId = pCustomerId,
        CategoryName = pCategoryName,
        CategoryNo = pCategoryNo,
        CategoryType = pCategoryType
    WHERE Id = pId
    AND ClientId = pClientId;

  ELSEIF pType = 3 THEN -- Delete Category

    DELETE
      FROM Category
    WHERE Id = pId
      AND ClientId = pClientId;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DataLoadClientCompany` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DataLoadClientCompany`(IN pType tinyint,
IN pId int,
IN pClientId int,
IN pCompanyCode varchar(50),
IN pDescription varchar(250),
IN pUserField1 varchar(500),
IN pUserField2 varchar(1000),
IN pUserField3 varchar(1000),
IN pUserField4 varchar(1000),
IN pUserField5 varchar(1000),
IN pUserField6 varchar(1000),
IN pUserField7 varchar(1000),
IN pUserField8 varchar(1000),
IN pVendorTypes varchar(1000),
IN pAllowPOAutoApproval tinyint,
IN pIsActive tinyint,
IN pDefaultDepartment int,
IN pDefaultProject int,
IN pDafaultGLCode int,
IN pAutoPopulateChild tinyint,
IN pGroup int)
BEGIN
  IF pType = 0 THEN
    -- Select by Id
    SELECT
      cc.Id,
      cc.ClientId,
      cc.CompanyCode,
      cc.Description,
      cc.UserField1,
      cc.UserField2,
      cc.UserField3,
      cc.UserField4,
      cc.UserField5,
      cc.UserField6,
      cc.UserField7,
      cc.UserField8,
      cc.VendorTypes,
      cc.AllowPOAutoApproval,
      cc.IsActive,
      cc.DefaultDepartment,
      cc.DefaultProject,
      cc.DafaultGLCode,
      cc.AutoPopulateChild,
      cc.`Group`,
      CONCAT(d.DepartmentName, ', ', d.Description) AS DefaultDepartmentName,
      CONCAT(p.ProjectName, ', ', p.Description) AS DefaultProjectName,
      CONCAT(gl.GLCodeName, ', ', gl.Desccription) AS DafaultGLCodeName
    FROM ClientCompany cc
      LEFT JOIN Department d
        ON cc.DefaultDepartment = d.Id
      LEFT JOIN ProjectType p
        ON cc.DefaultProject = p.Id
      LEFT JOIN GLCode gl
        ON cc.DafaultGLCode = gl.GLCodeId
    WHERE cc.Id = pId
    AND cc.ClientId = pClientId;

  ELSEIF pType = 1 THEN
    -- Insert ClientCompany
    INSERT INTO ClientCompany (ClientId, CompanyCode, Description, UserField1, UserField2, UserField3, UserField4, UserField5, UserField6, UserField7, UserField8, VendorTypes,
    AllowPOAutoApproval, IsActive, DefaultDepartment, DefaultProject, DafaultGLCode, AutoPopulateChild, `Group`)
      VALUES (pClientId, pCompanyCode, pDescription, pUserField1, pUserField2, pUserField3, pUserField4, pUserField5, pUserField6, pUserField7, pUserField8, pVendorTypes, pAllowPOAutoApproval, pIsActive, pDefaultDepartment, pDefaultProject, pDafaultGLCode, pAutoPopulateChild, pGroup);

  ELSEIF pType = 2 THEN
    -- Update ClientCompany
    UPDATE ClientCompany
    SET CompanyCode = COALESCE(pCompanyCode, CompanyCode),
        Description = COALESCE(pDescription, Description),
        UserField1 = COALESCE(pUserField1, UserField1),
        UserField2 = COALESCE(pUserField2, UserField2),
        UserField3 = COALESCE(pUserField3, UserField3),
        UserField4 = COALESCE(pUserField4, UserField4),
        UserField5 = COALESCE(pUserField5, UserField5),
        UserField6 = COALESCE(pUserField6, UserField6),
        UserField7 = COALESCE(pUserField7, UserField7),
        UserField8 = COALESCE(pUserField8, UserField8),
        VendorTypes = COALESCE(pVendorTypes, VendorTypes),
        AllowPOAutoApproval = COALESCE(pAllowPOAutoApproval, AllowPOAutoApproval),
        IsActive = pIsActive,
        DefaultDepartment = COALESCE(pDefaultDepartment, DefaultDepartment),
        DefaultProject = COALESCE(pDefaultProject, DefaultProject),
        DafaultGLCode = COALESCE(pDafaultGLCode, DafaultGLCode),
        AutoPopulateChild = COALESCE(pAutoPopulateChild, AutoPopulateChild),
        `Group` = COALESCE(pGroup, `Group`)
    WHERE Id = pId
    AND ClientId = pClientId;

  ELSEIF pType = 3 THEN
    -- Delete ClientCompany
    DELETE
      FROM ClientCompany
    WHERE Id = pId
      AND ClientId = pClientId;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DataLoadClosingDate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DataLoadClosingDate`(IN `pType` tinyint,
IN `pClientId` int,
IN `pClosingStartDate` datetime,
IN pClosingDuration int)
BEGIN

  IF (pType = 0) THEN /*GET*/

    SELECT
      Client.ClosingStartDate,
      Client.ClosingDuration
    FROM Client
    WHERE ClientId = pClientId;

  ELSEIF (pType = 1) THEN /*Update*/

    UPDATE Client
    SET ClosingStartDate = pClosingStartDate,
        ClosingDuration = pClosingDuration
    WHERE ClientId = pClientId;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DataLoadDepartment` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DataLoadDepartment`(IN `pType` tinyint,
IN `pId` int,
IN `pDepartmentName` varchar(75),
IN `pDescription` varchar(250),
IN `pClientCompanyId` int,
IN `pInternalId` varchar(250),
IN `pIsActive` tinyint,
IN `pClientId` int,
IN `pDepartmentPriority` int(1),
IN `pGLCodeId` int,
IN `pProjectTypeId` int)
BEGIN

  IF (pType = 0) THEN /*Single: Department*/

    SELECT
      Department.Id,
      Department.DepartmentName,
      Department.Description,
      Department.ClientCompanyId,
      Department.InternalId,
      Department.IsActive,
      Department.ClientId,
      Department.DepartmentPriority,
      COALESCE(CONCAT(ClientCompany.CompanyCode, ', ', ClientCompany.Description), CompanyCode) AS CompanyName

    FROM Department
      LEFT JOIN ClientCompany
        ON Department.ClientCompanyId = ClientCompany.Id
    WHERE Department.Id = pId
    AND Department.ClientId = pClientId;

  ELSEIF (pType = 1) THEN /*Create Department*/

    INSERT INTO Department (DepartmentName, Description, ClientCompanyId, InternalId, IsActive, DepartmentPriority, ClientId)
      VALUES (pDepartmentName, pDescription, pClientCompanyId, pInternalId, pIsActive, pDepartmentPriority, pClientId);

  ELSEIF (pType = 2) THEN /*Update Department*/

    UPDATE Department
    SET Department.DepartmentName = pDepartmentName,
        Department.Description = pDescription,
        Department.ClientCompanyId = pClientCompanyId,
        Department.InternalId = pInternalId,
        Department.IsActive = pIsActive,
        Department.ClientId = pClientId,
        Department.DepartmentPriority = pDepartmentPriority
    WHERE Department.Id = pId
    AND Department.ClientId = pClientId;

  ELSEIF (pType = 3) THEN /*Get GL Codes assigned*/

    SELECT
      DepartmentGLCode.DepartmentId,
      DepartmentGLCode.GLCodeId,
      CONCAT(GLCode.GLCodeName, ', ', GLCode.Desccription) AS `GLCode`

    FROM DepartmentGLCode
      LEFT JOIN GLCode
        ON DepartmentGLCode.GLCodeId = GLCode.GLCodeId
    WHERE DepartmentGLCode.DepartmentId = pId
    ORDER BY GLCode.GLCodeId DESC;

  ELSEIF (pType = 4) THEN /*Get Projects assigned*/

    SELECT
      DepartmentProjectType.DepartmentId,
      DepartmentProjectType.ProjectTypeId,
      CONCAT(ProjectType.ProjectName, ', ', ProjectType.Description) AS `Project`

    FROM DepartmentProjectType
      LEFT JOIN ProjectType
        ON DepartmentProjectType.ProjectTypeId = ProjectType.Id
    WHERE DepartmentProjectType.DepartmentId = pId
    ORDER BY ProjectType.Id DESC;

  ELSEIF (pType = 5) THEN /*Insert Department GL*/

    IF NOT EXISTS (SELECT
          *
        FROM DepartmentGLCode
        WHERE DepartmentId = pId
        AND GLCodeId = pGLCodeId) THEN

      INSERT INTO DepartmentGLCode (DepartmentGLCode.DepartmentId, DepartmentGLCode.GLCodeId)
        VALUES (pId, pGLCodeId);

    END IF;

  ELSEIF (pType = 6) THEN /*Delete Department GL*/

    DELETE
      FROM DepartmentGLCode
    WHERE DepartmentGLCode.DepartmentId = pId
      AND DepartmentGLCode.GLCodeId = pGLCodeId;

  ELSEIF (pType = 7) THEN/*Insert Department Projects*/

    IF NOT EXISTS (SELECT
          *
        FROM DepartmentProjectType
        WHERE DepartmentId = pId
        AND ProjectTypeId = pProjectTypeId) THEN

      INSERT INTO DepartmentProjectType (DepartmentProjectType.DepartmentId, DepartmentProjectType.ProjectTypeId)
        VALUES (pId, pProjectTypeId);

    END IF;

  ELSEIF (pType = 8) THEN /*Delete Department Projects*/

    DELETE
      FROM DepartmentProjectType
    WHERE DepartmentProjectType.DepartmentId = pId
      AND DepartmentProjectType.ProjectTypeId = pProjectTypeId;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DataLoadEmailCapture` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DataLoadEmailCapture`(IN `pType` tinyint,
IN `pClientId` int,
IN `pKeyword` varchar(50),
IN `pDateFrom` date,
IN `pDateTo` date,
IN pOffset int,
IN pSize int)
BEGIN

  IF (pType = 0) THEN

    SELECT
      ecce.EmailSource AS EmailSender,
      ecce.EmailSubject,
      eca.EmailAttachmentName AS EmailAttachment,
      ecce.ReceivedDateTime AS EmailDate,
      CASE WHEN (bch.`Source` = 'FTP') THEN CASE WHEN (inv.IsPOInvoice = TRUE) THEN CONCAT('https://apdropbox.com/apsimages/', SUBSTRING_INDEX (SUBSTRING(ecc.DropFolder, 8), '\\', 1), '/FTP/PO/', inv.InvoiceId, '.pdf') ELSE CONCAT('https://apdropbox.com/apsimages/', SUBSTRING_INDEX (SUBSTRING(ecc.DropFolder, 8), '\\', 1), '/FTP/NOPO/', inv.InvoiceId, '.pdf') END ELSE CONCAT('https://apdropbox.com/apsimages/', SUBSTRING_INDEX (SUBSTRING(ecc.DropFolder, 8), '\\', 1), '/Email/', inv.InvoiceId, '.pdf') END AS EmailFile

    FROM EmailCaptureClientEmails ecce
      INNER JOIN EmailCaptureClients ecc
        ON ecc.EmailCaptureClientId = ecce.EmailCaptureClientId
      INNER JOIN EmailCaptureAttachments eca
        ON eca.EmailCaptureClientEmailId = ecce.EmailCaptureClientEmailId
      INNER JOIN Batch bch
        ON bch.BatchName LIKE CONCAT('%', eca.NewAttachmentName, '%')
      INNER JOIN Invoice inv
        ON inv.BatchID = bch.ID
    WHERE bch.ClientID = pClientId
    AND ecc.ClientId = pClientId
    AND (pDateFrom IS NULL
    OR ecce.ReceivedDateTime >= pDateFrom)
    AND (pDateTo IS NULL
    OR ecce.ReceivedDateTime < DATE_ADD(pDateTo, INTERVAL 1 DAY))
    AND (pKeyword IS NULL
    OR ecce.EmailSource LIKE CONCAT('%', pKeyword, '%'))
    AND (pKeyword IS NULL
    OR ecce.EmailSubject LIKE CONCAT('%', pKeyword, '%'))
    LIMIT pOffset, pSize;

  ELSE

    SELECT
      ecce.EmailSource AS EmailSender,
      ecce.EmailSubject,
      eca.EmailAttachmentName AS EmailAttachment,
      ecce.ReceivedDateTime AS EmailDate,
      CASE WHEN (bch.`Source` = 'FTP') THEN CASE WHEN (inv.IsPOInvoice = TRUE) THEN CONCAT('https://apdropbox.com/apsimages/', SUBSTRING_INDEX (SUBSTRING(ecc.DropFolder, 8), '\\', 1), '/FTP/PO/', inv.InvoiceId, '.pdf') ELSE CONCAT('https://apdropbox.com/apsimages/', SUBSTRING_INDEX (SUBSTRING(ecc.DropFolder, 8), '\\', 1), '/FTP/NOPO/', inv.InvoiceId, '.pdf') END ELSE CONCAT('https://apdropbox.com/apsimages/', SUBSTRING_INDEX (SUBSTRING(ecc.DropFolder, 8), '\\', 1), '/Email/', inv.InvoiceId, '.pdf') END AS EmailFile

    FROM EmailCaptureClientEmails ecce
      INNER JOIN EmailCaptureClients ecc
        ON ecc.EmailCaptureClientId = ecce.EmailCaptureClientId
      INNER JOIN EmailCaptureAttachments eca
        ON eca.EmailCaptureClientEmailId = ecce.EmailCaptureClientEmailId
      INNER JOIN Batch bch
        ON bch.BatchName LIKE CONCAT('%', eca.NewAttachmentName, '%')
      INNER JOIN Invoice inv
        ON inv.BatchID = bch.ID
    WHERE bch.ClientID = pClientId
    AND ecc.ClientId = pClientId
    AND (pDateFrom IS NULL
    OR ecce.ReceivedDateTime >= pDateFrom)
    AND (pDateTo IS NULL
    OR ecce.ReceivedDateTime < DATE_ADD(pDateTo, INTERVAL 1 DAY))
    AND (pKeyword IS NULL
    OR ecce.EmailSource LIKE CONCAT('%', pKeyword, '%'))
    AND (pKeyword IS NULL
    OR ecce.EmailSubject LIKE CONCAT('%', pKeyword, '%')) LIMIT 15;

  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DataLoadGLCode` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DataLoadGLCode`(IN pType tinyint, IN pGLCodeId int,
                                                         IN pGLCodeName varchar(250), IN pDescription varchar(500),
                                                         IN pIsActive tinyint, IN pClientCompanyId int,
                                                         IN pClientId int)
BEGIN

  IF (pType = 0) THEN /*Single: GLCode*/

    SELECT
      GLCode.GLCodeId,
      GLCode.GLCodeName,
      GLCode.Desccription,
      GLCode.ClientCompanyId,
      GLCode.IsActive,
      GLCode.ActivityRequired,
      COALESCE(CONCAT(ClientCompany.CompanyCode, ', ', ClientCompany.Description), CompanyCode) AS CompanyName

    FROM GLCode
      LEFT JOIN ClientCompany
        ON GLCode.ClientCompanyId = ClientCompany.Id
    WHERE GLCode.GLCodeId = pGLCodeId
    AND GLCode.ClientId = pClientId LIMIT 1;

  ELSEIF (pType = 1) THEN /*Create GLCode*/

    INSERT INTO GLCode (GLCodeName, Desccription, IsActive, ClientCompanyId, ClientId, ActivityRequired)
      VALUES (pGLCodeName, pDescription, pIsActive, pClientCompanyId, pClientId, 0);

  ELSEIF (pType = 2) THEN /*Update GLCode*/

      UPDATE GLCode
      SET
          GLCodeName = IFNULL(pGLCodeName, GLCodeName),
          Desccription = IFNULL(pDescription, Desccription),
          ClientCompanyId = IFNULL(pClientCompanyId, ClientCompanyId),
          IsActive = IFNULL(pIsActive, IsActive)
      WHERE
          GLCodeId = pGLCodeId
        AND ClientId = pClientId;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DataLoadOrgData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DataLoadOrgData`(IN `pType` tinyint,
IN `pId` int,
IN `pOrgId` varchar(250),
IN `pOrgName` varchar(250),
IN `pIsActive` tinyint,
IN `pClientId` int)
BEGIN

  IF (pType = 0) THEN/*Single: GLCode*/

    SELECT
      OrgData.Id,
      OrgData.OrgId,
      OrgData.OrgName,
      OrgData.IsActive,
      OrgData.ClientId
    FROM OrgData
    WHERE OrgData.Id = pId
    AND OrgData.ClientId = pClientId LIMIT 1;

  ELSEIF (pType = 1) THEN /*Create OrgData*/

    INSERT INTO OrgData (OrgId, OrgName, IsActive, ClientId)
      VALUES (pOrgId, pOrgName, pIsActive, pClientId);

  ELSEIF (pType = 2) THEN /*Update GLCode*/

    UPDATE OrgData
    SET OrgId = pOrgId,
        OrgName = pOrgName,
        IsActive = pIsActive
    WHERE OrgData.Id = pId
    AND ClientId = pClientId;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DataLoadVendor` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DataLoadVendor`(IN pType tinyint,
IN pClientId int,
IN pVendorId int,
IN pVendorNo varchar(250),
IN pVendorName varchar(250),
IN pContactPerson varchar(250),
IN pTelephone varchar(250),
IN pFax varchar(250),
IN pEmail varchar(250),
IN pAddressId int,
IN pDefaultGlCodeId int,
IN pFreightGLCodeId int,
IN pTaxGLCodeId int,
IN pOrgDataId int,
IN pClientCompanyId int,
IN pShippingTermId int,
IN pFreightCodeId int,
IN pTaxCode varchar(50),
IN pCurrency varchar(250),
IN pTaxLevel varchar(50),
IN pVendorType varchar(50),
IN pPaymentType int,
IN pExternalId varchar(250),
IN pAccountCode varchar(50),
IN pAccountOwner varchar(255),
IN pContractAmount varchar(255),
IN pIsActive bool,
IN pIsConfidential bool,
IN pIsCSIVendor bool,
IN pIsOneTimeVendor bool,
IN pIsPoVendor bool,
IN pIs1099Vendor bool,
IN pNetDisPer double,
IN pDiscount_Day_01 int,
IN pFirst_Net_Days int,
IN pVendorTerm varchar(250),
IN pStateId int,
IN pZipCode varchar(250),
IN pStreetName varchar(250),
IN pCityName varchar(250),
IN pCountry varchar(250),
IN pAddress1 varchar(250),
IN pAddress2 varchar(250),
IN pAddress3 varchar(250))
BEGIN

	IF (pType = 0) THEN

		SELECT
			v.ClientId,
			v.VendorId,
			v.VendorNo,
			v.VendorName,
			v.ContactPerson,
			v.Telephone,
			v.Fax,
			v.Email,
			v.DefaultGlCodeId,
			v.FreightGLCodeId,
			v.TaxGLCodeId,
			v.orgDataId,
			v.ClientCompanyId,
			v.ShippingTermId,
			v.FreightCodeId,
			v.TaxCode,
			v.Currency,
			v.TaxLevel,
			v.VendorType,
			v.PaymentType,
			v.ExternalId,
			v.AccountCode,
			v.AccountOwner,
			v.ContractAmount,
			v.IsActive,
			v.IsConfidential,
			v.IsCSIVendor,
			v.IsOneTimeVendor,
			v.IsPoVendor,
			v.Is1099Vendor,
			v.AddressId,
			v.ActivityRequired,
			v.IgnoreValidation,
			v.OneInvoicePerCard,
			v.RequireAccountNumber,
			v.NetDisPer, v.Discount_Day_01, v.First_Net_Days, v.VendorTerm,
			a.StateId,
			a.ZipCode,
			a.StreetName,
			a.CityName,
			a.Country,
			a.Address1,
			a.Address2,
			a.Address3,
			s.StateName,
			CONCAT(gl.GLCodeName, ', ', gl.Desccription) AS DefaultGLCodeName,
			CONCAT(glf.GLCodeName, ', ', glf.Desccription) AS FreightGLCodeName,
			CONCAT(glt.GLCodeName, ', ', glt.Desccription) AS TaxGLCodeName,
			CONCAT(od.OrgId, ', ', od.OrgName) AS OrgDataName,
			CONCAT(cc.CompanyCode, ', ', cc.Description) AS CompanyName,
			CONCAT(st.Code, ', ', st.Description) AS ShippingTermName,
			CONCAT(fc.Code, ', ', fc.Description) AS FreightCodeName
		FROM Vendor v
			LEFT JOIN Address a
				ON v.AddressId = a.AddressId
			LEFT JOIN State s
				ON a.StateId = s.StateId
			LEFT JOIN ShippingTerms st
				ON v.ShippingTermId = st.ShippingTermId
			LEFT JOIN FreightCodes fc
				ON v.FreightCodeId = fc.FreightCodeId
			LEFT JOIN OrgData od
				ON v.orgDataId = od.Id
			LEFT JOIN ClientCompany cc
				ON v.ClientCompanyId = cc.Id
			LEFT JOIN GLCode gl
				ON v.DefaultGlCodeId = gl.GLCodeId
			LEFT JOIN GLCode glf
				ON v.FreightGLCodeId = glf.GLCodeId
			LEFT JOIN GLCode glt
				ON v.TaxGLCodeId = glt.GLCodeId
		WHERE v.VendorId = PVendorId
		AND v.ClientId = pClientId;

	ELSEIF (pType = 1) THEN /*Create Vendor*/

			-- Insert address into Address table
			INSERT INTO Address (StateId, ZipCode, StreetName, CityName, Country, Address1, Address2, Address3)
				VALUES (pStateId, pZipCode, pStreetName, pCityName, pCountry, pAddress1, pAddress2, pAddress3);

			SET @addressId = LAST_INSERT_ID();

			-- Vendor
			INSERT INTO Vendor (ClientId, VendorNo, VendorName, ContactPerson, Telephone, Fax, Email,
			DefaultGlCodeId, FreightGLCodeId, TaxGLCodeId, orgDataId, ClientCompanyId, ShippingTermId, FreightCodeId,
			TaxCode, Currency, TaxLevel, VendorType, PaymentType, ExternalId, AccountCode, AccountOwner, ContractAmount,
			IsActive, IsConfidential, IsCSIVendor, IsOneTimeVendor, IsPoVendor, Is1099Vendor, NetDisPer,Discount_Day_01,First_Net_Days,VendorTerm, AddressId,
			ActivityRequired, IgnoreValidation, OneInvoicePerCard, RequireAccountNumber) -- not nullables
				VALUES (pClientId, pVendorNo, pVendorName, pContactPerson, pTelephone, pFax, pEmail, pDefaultGlCodeId, pFreightGLCodeId, pTaxGLCodeId, pOrgDataId, pClientCompanyId, pShippingTermId,
						pFreightCodeId, pTaxCode, pCurrency, pTaxLevel, IFNULL(pVendorType, ''), pPaymentType, pExternalId, pAccountCode, pAccountOwner, pContractAmount, pIsActive, pIsConfidential, pIsCSIVendor,
						pIsOneTimeVendor, pIsPoVendor, pIs1099Vendor, pNetDisPer, pDiscount_Day_01, pFirst_Net_Days, pVendorTerm, @addressId, 0, 0, 0, 0);

	ELSEIF (pType = 2) THEN /*Update Vendor*/
			-- Insert into Address table if pAddressId is null or doesn't exist
			IF pAddressId IS NULL
				OR NOT EXISTS (SELECT
						1
					FROM `Address`
					WHERE AddressId = pAddressId) THEN
				INSERT INTO Address (StateId, ZipCode, StreetName, CityName, Country, Address1, Address2, Address3)
					VALUES (pStateId, pZipCode, pStreetName, pCityName, pCountry, pAddress1, pAddress2, pAddress3);
				SET pAddressId = LAST_INSERT_ID();
			ELSE
				UPDATE Address
				SET StateId = pStateId,
					ZipCode = pZipCode,
					StreetName = pStreetName,
					CityName = pCityName,
					Country = pCountry,
					Address1 = pAddress1,
					Address2 = pAddress2,
					Address3 = pAddress3
				WHERE AddressId = pAddressId;
			END IF;

			UPDATE Vendor
			SET VendorNo = pVendorNo,
				VendorName = pVendorName,
				ContactPerson = pContactPerson,
				Telephone = pTelephone,
				Fax = pFax,
				Email = pEmail,
				DefaultGlCodeId = pDefaultGlCodeId,
				FreightGLCodeId = pFreightGLCodeId,
				TaxGLCodeId = pTaxGLCodeId,
				orgDataId = pOrgDataId,
				ClientCompanyId = pClientCompanyId,
				ShippingTermId = pShippingTermId,
				FreightCodeId = pFreightCodeId,
				TaxCode = pTaxCode,
				Currency = pCurrency,
				TaxLevel = pTaxLevel,
				VendorType = pVendorType,
				PaymentType = pPaymentType,
				ExternalId = pExternalId,
				AccountCode = pAccountCode,
				AccountOwner = pAccountOwner,
				ContractAmount = pContractAmount,
				IsActive = pIsActive,
				IsConfidential = pIsConfidential,
				IsCSIVendor = pIsCSIVendor,
				IsOneTimeVendor = pIsOneTimeVendor,
				IsPoVendor = pIsPoVendor,
				Is1099Vendor = pIs1099Vendor,
				NetDisPer = pNetDisPer,
				Discount_Day_01 = pDiscount_Day_01,
				First_Net_Days = pFirst_Net_Days,
				VendorTerm = pVendorTerm,
				AddressId = pAddressId			
			WHERE VendorId = pVendorId
			AND ClientId = pClientId;

	ELSEIF (pType = 3) THEN /*GET Vendor locations*/

		SELECT
			vl.VendorId,
			vl.VendorLocationId,
			vl.LocationName,
			vl.LocationNumber,
			vl.IsActive,
			CONCAT(COALESCE(a.Address1, ''), ' ',
			COALESCE(a.CityName, ''), ' ',
			COALESCE(s.StateNameShort, ''), ' ',
			COALESCE(a.ZipCode, ''), ' ',
			COALESCE(a.Country, '')) AS Address
		FROM VendorLocation vl
			LEFT JOIN Address a
				ON vl.AddressId = a.AddressId
			LEFT JOIN State s
				ON a.StateId = s.StateId
		WHERE vl.VendorId = pVendorId
		ORDER BY vl.VendorLocationId DESC;

	ELSEIF (pType = 4) THEN /*GET Vendor item contracts*/

		SELECT
			vic.VendorId,
			vic.VendorItemContractId,
			vic.VendorItemDescription,
			vic.VendorPrice,
			vic.PriceChangeDate,
			i.ItemNo,
			IFNULL(cl.LocationName, '') AS LocationName
		FROM VendorItemContract vic
			LEFT JOIN Item i
				ON vic.ItemId = i.ItemId
			LEFT JOIN CustomerLocation cl
				ON vic.CustomerLocationId = cl.CustomerLocationId
		WHERE vic.VendorId = pVendorId
		ORDER BY vic.VendorItemContractId DESC;

	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DataLoadVendorDepartment` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DataLoadVendorDepartment`(IN pType tinyint,
IN pClientId int,
IN pVendorId int,
IN pDepartmentId int,
IN pGLCodeId int)
BEGIN
	IF (pType = 0) THEN /*List: VendorDpartment by VendorId*/

		SELECT
			vd.Id,
			vd.VendorId,
			vd.DepartmentId,
			d.DepartmentName,
			d.Description
		FROM VendorDepartment vd
			JOIN Department d
				ON vd.DepartmentId = d.Id
		WHERE vd.VendorId = pVendorId
		AND d.ClientId = pClientId
		ORDER BY vd.Id DESC;

	ELSEIF (pType = 1) THEN /*List: Vendor_Department_Gl*/
		SELECT
			vdg.VendorId,
			vdg.DepartmentId,
			vdg.GLCodeId,
			g.GLCodeName,
			g.Desccription
		FROM Vendor_Department_GL vdg
			JOIN GLCode g
				ON vdg.GLCodeId = g.GLCodeId
		WHERE vdg.VendorId = pVendorId
		AND vdg.DepartmentId = pDepartmentId
		AND g.ClientId = pClientId
		ORDER BY vdg.Id DESC;

	ELSEIF (pType = 2) THEN /*Insert VendorDepartment*/
		IF NOT EXISTS (SELECT
					*
				FROM VendorDepartment
				WHERE VendorId = pVendorId
				AND DepartmentId = pDepartmentId) THEN
			INSERT INTO VendorDepartment (VendorId, DepartmentId)
				VALUES (pVendorId, pDepartmentId);
		END IF;

	ELSEIF (pType = 3) THEN /*Delete VendorDepartment*/
			DELETE
				FROM VendorDepartment
			WHERE VendorId = pVendorId
				AND DepartmentId = pDepartmentId;

			DELETE
				FROM Vendor_Department_GL
			WHERE VendorId = pVendorId
				AND DepartmentId = pDepartmentId;

	ELSEIF (pType = 4) THEN /*INSERT Vendor_Department_GL*/
		IF NOT EXISTS (SELECT
					*
				FROM Vendor_Department_GL
				WHERE VendorId = pVendorId
				AND DepartmentId = pDepartmentId
				AND GLCodeId = pGLCodeId) THEN
			INSERT INTO Vendor_Department_GL (VendorId, DepartmentId, GLCodeId)
				VALUES (pVendorId, pDepartmentId, pGLCodeId);
		END IF;

	ELSEIF (pType = 5) THEN /*DELETE Vendor_Department_GL*/
		DELETE
			FROM Vendor_Department_GL
		WHERE VendorId = pVendorId
			AND DepartmentId = pDepartmentId
			AND GLCodeId = pGLCodeId;

	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DataLoadVendorItemContract` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DataLoadVendorItemContract`(IN pType tinyint,
IN pVendorId int,
IN pVendorItemContractId int,
IN pCustomerLocationId int,
IN pItemId int,
IN pVendorItemDescription varchar(250),
IN pVendorPrice double,
IN pPriceChangeDate date)
BEGIN

  IF (pType = 0) THEN /*Select Vendor item contract*/

    SELECT
      vic.VendorItemContractId,
      vic.VendorId,
      vic.ItemId,
      vic.VendorItemDescription,
      vic.VendorPrice,
      vic.PriceChangeDate,
      CONCAT(i.ItemNo, ", ", i.ItemDescription) AS ItemName
    FROM VendorItemContract vic
      JOIN Item i
        ON vic.ItemId = i.ItemId
    WHERE vic.VendorItemContractId = pVendorItemContractId LIMIT 1;

  ELSEIF (pType = 1) THEN /*Insert Vendor item contract*/

    INSERT INTO VendorItemContract (VendorId, CustomerLocationId, ItemId, VendorItemDescription, VendorPrice, PriceChangeDate)
      VALUES (pVendorId, pCustomerLocationId, pItemId, pVendorItemDescription, pVendorPrice, pPriceChangeDate);

  ELSEIF (pType = 2) THEN /*Edit Vendor item contract*/

    UPDATE VendorItemContract
    SET VendorItemDescription = pVendorItemDescription,
        VendorPrice = pVendorPrice,
        PriceChangeDate = pPriceChangeDate,
        ItemId = pItemId,
        CustomerLocationId = pCustomerLocationId
    WHERE VendorItemContractId = pVendorItemContractId
    AND VendorId = pVendorId;

  ELSEIF (pType = 3) THEN /*Delete Vendor item contract*/

    DELETE
      FROM VendorItemContract
    WHERE VendorItemContract.VendorItemContractId = pVendorItemContractId
      AND VendorItemContract.VendorId = pVendorId;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DataLoadVendorLocation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DataLoadVendorLocation`(IN pType tinyint,
IN pVendorId int,
IN pVendorLocationId int,
IN pLocationNumber varchar(50),
IN pLocationName varchar(150),
IN pAddressId int,
IN pIsActive bool,
IN pStateId int,
IN pZipCode varchar(20),
IN pStreetName varchar(150),
IN pCityName varchar(50),
IN pCountry varchar(50),
IN pAddress1 varchar(250),
IN pAddress2 varchar(250),
IN pAddress3 varchar(250),
IN pAddress4 varchar(250),
IN pContactPerson varchar(50),
IN pFax varchar(50),
IN pEmail varchar(250),
IN pPhoneNo varchar(50))
BEGIN
	IF (pType = 0) THEN /*Select Vendor location*/

		SELECT
			v.VendorId,
			vl.VendorLocationId,
			vl.LocationName,
			vl.LocationNumber,
			vl.IsActive,
			a.Address1,
			a.Address2,
			a.Address3,
			a.Address4,
			a.CityName,
			a.StateId,
			a.ZipCode,
			a.Country,
			a.StreetName,
			a.ContactPerson,
			a.Email,
			a.Fax,
			a.PhoneNo,
			s.StateName
		FROM VendorLocation vl
			LEFT JOIN Address a
				ON vl.AddressId = a.AddressId
			LEFT JOIN State s
				ON a.StateId = s.StateId
			LEFT JOIN Vendor v
				ON vl.VendorId = v.VendorId
		WHERE vl.VendorLocationId = pVendorLocationId LIMIT 1;

	ELSEIF (pType = 1) THEN /*Insert Vendor location*/

			-- Insert address into Address table
			INSERT INTO Address (StateId, ZipCode, StreetName, CityName, Country, Address1, Address2, Address3, Address4,
			ContactPerson, Fax, Email, PhoneNo)
				VALUES (pStateId, pZipCode, pStreetName, pCityName, pCountry, pAddress1, pAddress2, pAddress3, pAddress4, pContactPerson, pFax, pEmail, pPhoneNo);

			SET @addressId = LAST_INSERT_ID();

			-- Vendor
			INSERT INTO VendorLocation (LocationNumber, LocationName, VendorId, AddressId, IsActive)
				VALUES (pLocationNumber, pLocationName, pVendorId, @addressId, pIsActive);

	ELSEIF (pType = 2) THEN /*Update Vendor location*/

			IF pAddressId IS NULL
				OR NOT EXISTS (SELECT
						1
					FROM `Address`
					WHERE AddressId = pAddressId) THEN
				INSERT INTO Address (StateId, ZipCode, StreetName, CityName, Country, Address1, Address2, Address3, Address4,
				ContactPerson, Fax, Email, PhoneNo)
					VALUES (pStateId, pZipCode, pStreetName, pCityName, pCountry, pAddress1, pAddress2, pAddress3, pAddress4, pContactPerson, pFax, pEmail, pPhoneNo);

				SET pAddressId = LAST_INSERT_ID();

			ELSE
				UPDATE Address
				SET StateId = pStateId,
					ZipCode = pZipCode,
					StreetName = pStreetName,
					CityName = pCityName,
					Country = pCountry,
					Address1 = pAddress1,
					Address2 = pAddress2,
					Address3 = pAddress3,
					Address4 = pAddress4,
					ContactPerson = pContactPerson,
					Fax = pFax,
					Email = pEmail,
					PhoneNo = pPhoneNo
				WHERE AddressId = pAddressId;
			END IF;

			UPDATE VendorLocation
			SET LocationNumber = pLocationNumber,
				LocationName = pLocationName,
				IsActive = pIsActive,
				AddressId = pAddressId
			WHERE VendorLocationId = pVendorLocationId
			AND VendorId = pVendorId;


	ELSEIF (pType = 3) THEN /*Delete Vendor location*/

			SELECT
				AddressId INTO pAddressId
			FROM VendorLocation
			WHERE VendorLocationId = pVendorLocationId;

			DELETE
				FROM VendorLocation
			WHERE VendorLocation.VendorLocationId = pVendorLocationId
				AND VendorLocation.VendorId = pVendorId;

			DELETE
				FROM Address
			WHERE AddressId = pAddressId;

	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_EmailGetAttachments` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_EmailGetAttachments`(pEmailId char(36))
ThisProc:
	BEGIN	
-- noformat

	select 	Filename, ea.AttachmentPath, ifnull(ea.DeleteAttachmentAfterSending, 0) as DeleteAttachmentAfterSending
	from 	EmailAttachments ea
	where 	EmailId = pEmailId;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_EmailGetTemplateValues` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_EmailGetTemplateValues`(in pUserId char(36), in pDocType varchar(10), in pDocKey varchar(100), in pValues text, in pTemplate int,  inout pSubject text, inout pBody text)
ThisProc:
	BEGIN	

	-- pValues follows the save rules as _x_AdvancedSearchFieldValuesDependency
	--
	-- [Token]■Value■[Token]■Value■[Token]■Value■[Token]■Value■[Token]■Value
	--

	select	Subject, Body
	into	pSubject, pBody
	from	EmailTemplates 
	where	EmailTemplateType = pTemplate;
	if ROW_COUNT() = 0 then  
		leave ThisProc;
	end if;

	set @ClientId 					= null;
	set @DATEFORMAT					= '%M %d, %Y';
	set @DATETIMEFORMAT 			= '%M %d, %Y at %h:%i %p';


	set @ApprovedBy					= _x_AdvancedSearchFieldValuesDependency(pValues, '[ApprovedBy]');
	set @ApprovedOn					= _x_AdvancedSearchFieldValuesDependency(pValues, '[ApprovedOn]');
	set @AssignedDate				= _x_AdvancedSearchFieldValuesDependency(pValues, '[AssignedDate]');
	set @Careof						= _x_AdvancedSearchFieldValuesDependency(pValues, '[Careof]');
	set @Client						= _x_AdvancedSearchFieldValuesDependency(pValues, '[Client]');
	set @ClientFileList				= _x_AdvancedSearchFieldValuesDependency(pValues, '[ClientFileList]');
	set @ClientInvoiceCountList		= _x_AdvancedSearchFieldValuesDependency(pValues, '[ClientInvoiceCountList]');
	set @Comment					= _x_AdvancedSearchFieldValuesDependency(pValues, '[Comment]');
	set @ContactPerson				= _x_AdvancedSearchFieldValuesDependency(pValues, '[ContactPerson]');
	set @Contactus					= _x_AdvancedSearchFieldValuesDependency(pValues, '[Contactus]');
	set @CreditCardNo				= _x_AdvancedSearchFieldValuesDependency(pValues, '[CreditCardNo]');
	set @CVC2						= _x_AdvancedSearchFieldValuesDependency(pValues, '[CVC2]');
	set @Date						= _x_AdvancedSearchFieldValuesDependency(pValues, '[Date]');
	set @DelegatedDate				= _x_AdvancedSearchFieldValuesDependency(pValues, '[DelegatedDate]');
	set @DiscountRequestedAmount	= _x_AdvancedSearchFieldValuesDependency(pValues, '[DiscountRequestedAmount]');
	set @DiscountTotalSum			= _x_AdvancedSearchFieldValuesDependency(pValues, '[DiscountTotalSum]');
	set @ErrorMessage				= _x_AdvancedSearchFieldValuesDependency(pValues, '[ErrorMessage]');
	set @ESCALATEDFROMFULLNAME		= _x_AdvancedSearchFieldValuesDependency(pValues, '[ESCALATEDFROMFULLNAME]');
	set @EstOrderDate				= _x_AdvancedSearchFieldValuesDependency(pValues, '[EstOrderDate]');
	set @Expiration					= _x_AdvancedSearchFieldValuesDependency(pValues, '[Expiration]');
	set @FileName					= _x_AdvancedSearchFieldValuesDependency(pValues, '[FileName]');
	set @FullName					= _x_AdvancedSearchFieldValuesDependency(pValues, '[FullName]');
	set @InternalNote				= _x_AdvancedSearchFieldValuesDependency(pValues, '[InternalNote]');
	set @InvoiceCount				= _x_AdvancedSearchFieldValuesDependency(pValues, '[InvoiceCount]');
	set @InvoiceDate				= _x_AdvancedSearchFieldValuesDependency(pValues, '[InvoiceDate]');
	set @InvoiceNo					= _x_AdvancedSearchFieldValuesDependency(pValues, '[InvoiceNo]');
	set @InvoiceNumber				= _x_AdvancedSearchFieldValuesDependency(pValues, '[InvoiceNumber]');
	set @InvoiceTotal				= _x_AdvancedSearchFieldValuesDependency(pValues, '[InvoiceTotal]');
	set @link						= _x_AdvancedSearchFieldValuesDependency(pValues, '[link]');
	set @NameF						= _x_AdvancedSearchFieldValuesDependency(pValues, '[NameF]');
	set @NameL						= _x_AdvancedSearchFieldValuesDependency(pValues, '[NameL]');
	set @NewPassword				= _x_AdvancedSearchFieldValuesDependency(pValues, '[NewPassword]');
	set @NoOfInvoices				= _x_AdvancedSearchFieldValuesDependency(pValues, '[NoOfInvoices]');
	set @OrderAmount				= _x_AdvancedSearchFieldValuesDependency(pValues, '[OrderAmount]');
	set @OrderTotal					= _x_AdvancedSearchFieldValuesDependency(pValues, '[OrderTotal]');
	set @PaymentMethod				= _x_AdvancedSearchFieldValuesDependency(pValues, '[PaymentMethod]');
	set @POHeaderId					= _x_AdvancedSearchFieldValuesDependency(pValues, '[POHeaderId]');
	set @PONumber					= _x_AdvancedSearchFieldValuesDependency(pValues, '[PONumber]');
	set @PrefundedAccountBalance	= _x_AdvancedSearchFieldValuesDependency(pValues, '[PrefundedAccountBalance]');
	set @Reason						= _x_AdvancedSearchFieldValuesDependency(pValues, '[Reason]');
	set @RequesterName				= _x_AdvancedSearchFieldValuesDependency(pValues, '[RequesterName]');
	set @RequestorFullName			= _x_AdvancedSearchFieldValuesDependency(pValues, '[RequestorFullName]');
	set @SenderEmail				= _x_AdvancedSearchFieldValuesDependency(pValues, '[SenderEmail]');
	set @SenderFullName				= _x_AdvancedSearchFieldValuesDependency(pValues, '[SenderFullName]');
	set @ShipTo						= _x_AdvancedSearchFieldValuesDependency(pValues, '[ShipTo]');
	set @Source						= _x_AdvancedSearchFieldValuesDependency(pValues, '[Source]');
	set @Table						= _x_AdvancedSearchFieldValuesDependency(pValues, '[Table]');
	set @TimeStamp					= _x_AdvancedSearchFieldValuesDependency(pValues, '[TimeStamp]');
	set @URL						= _x_AdvancedSearchFieldValuesDependency(pValues, '[URL]');
	set @VendorCount				= _x_AdvancedSearchFieldValuesDependency(pValues, '[VendorCount]');
	set @VendorMessage				= _x_AdvancedSearchFieldValuesDependency(pValues, '[VendorMessage]');
	set @VendorName					= _x_AdvancedSearchFieldValuesDependency(pValues, '[VendorName]');
	set @VendorNo					= _x_AdvancedSearchFieldValuesDependency(pValues, '[VendorNo]');
	set @Warehouse					= _x_AdvancedSearchFieldValuesDependency(pValues, '[Warehouse]');


	select	FirstName, LastName, concat(ltrim(FirstName), ' ', ltrim(LastName)), ClientId
	into 	@NameF, @NameL, @FullName, @ClientId
	from 	User 
	where 	UserId = pUserId;


	if pDocType = 'Invoice' THEN
		select	i.ClientId, ltrim(i.Comment), i.DiscountRequestedAmount, i.PONumber, date(i.InvoiceDate), i.InvoiceNo, i.InvoiceNo, i.InvoiceTotal, i.AprovedDate,
				ltrim(c.CustomerName),
				ltrim(v.VendorName), ltrim(v.VendorNo)
		into	@ClientId, @Comment, @DiscountRequestedAmount, @PONumber, @InvoiceDate, @InvoiceNo, @InvoiceNumber, @InvoiceTotal, @ApprovedOn,
				@Client, 
				@VendorName, @VendorNo
		from 	Invoice i
				inner join 	Client c	on c.ClientId = i.ClientId
				left join 	Vendor v 	on v.VendorId = i.Vendorid
                                  
		where	i.InvoiceId = pDocKey;
	end if;

                    

	Call _x_SetClientTimeZone(@CliendId);

	set @ApprovedBy					= ifnull(nullif(@ApprovedBy, ''), 'n/a');
	set @ApprovedOn					= ifnull(nullif(DATE_FORMAT(convert_tz(@ApprovedOn, 'GMT', @@session.time_zone), @DATETIMEFORMAT), ''), 'n/a');
	set @AssignedDate				= ifnull(nullif(DATE_FORMAT(convert_tz(@AssignedDate, 'GMT', @@session.time_zone), @DATETIMEFORMAT), ''), 'n/a');
	set @Careof						= ifnull(nullif(@Careof, ''), 'n/a');
	set @Client						= ifnull(nullif(@Client, ''), 'n/a');
	set @ClientFileList				= ifnull(nullif(@ClientFileList, ''), 'n/a');
	set @ClientInvoiceCountList		= ifnull(nullif(@ClientInvoiceCountList, ''), 'n/a');
	set @Comment					= ifnull(nullif(@Comment, ''), 'n/a');
	set @ContactPerson				= ifnull(nullif(@ContactPerson, ''), 'n/a');
	set @Contactus					= ifnull(nullif(@Contactus, ''), 'n/a');
	set @CreditCardNo				= ifnull(nullif(@CreditCardNo, ''), 'n/a');
	set @CVC2						= ifnull(nullif(@CVC2, ''), 'n/a');
	set @Date						= ifnull(nullif(DATE_FORMAT(Now(), @DATEFORMAT), ''), 'n/a');
	set @DelegatedDate				= ifnull(nullif(DATE_FORMAT(convert_tz(@DelegatedDate, 'GMT', @@session.time_zone), @DATETIMEFORMAT), ''), 'n/a');
	set @DiscountRequestedAmount	= ifnull(nullif(format(@DiscountRequestedAmount, 2), ''), 'n/a');
	set @DiscountTotalSum			= ifnull(nullif(format(@DiscountTotalSum, 2), ''), 'n/a');
	set @ErrorMessage				= ifnull(nullif(@ErrorMessage, ''), 'n/a');
	set @ESCALATEDFROMFULLNAME		= ifnull(nullif(@ESCALATEDFROMFULLNAME, ''), 'n/a');
	set @EstOrderDate				= ifnull(nullif(DATE_FORMAT(@EstOrderDate, @DATEFORMAT), ''), 'n/a');
	set @Expiration					= ifnull(nullif(@Expiration, ''), 'n/a');
	set @FileName					= ifnull(nullif(@FileName, ''), 'n/a');
	set @FullName					= ifnull(nullif(@FullName, ''), 'n/a');
	set @InternalNote				= ifnull(nullif(@InternalNote, ''), 'n/a');
	set @InvoiceCount				= ifnull(nullif(@InvoiceCount, ''), 'n/a');
	set @InvoiceDate				= ifnull(nullif(format(@InvoiceDate, @DATEFORMAT), ''), 'n/a');
	set @InvoiceNo					= ifnull(nullif(@InvoiceNo, ''), 'n/a');
	set @InvoiceNumber				= ifnull(nullif(@InvoiceNumber, ''), 'n/a');
	set @InvoiceTotal				= ifnull(nullif(format(@InvoiceTotal, 2), ''), 'n/a');
	set @link						= ifnull(nullif(@link, ''), 'n/a');
	set @Message					= ifnull(nullif(@Message, ''), 'n/a');
	set @NameF						= ifnull(nullif(@NameF, ''), 'n/a');
	set @NameL						= ifnull(nullif(@NameL, ''), 'n/a');
	set @NewPassword				= ifnull(nullif(@NewPassword, ''), 'n/a');
	set @NoOfInvoices				= ifnull(nullif(@NoOfInvoices, ''), 'n/a');
	set @OrderAmount				= ifnull(nullif(format(@OrderAmount, 2), ''), 'n/a');
	set @OrderTotal					= ifnull(nullif(@OrderTotal, ''), 'n/a');
	set @PaymentMethod				= ifnull(nullif(@PaymentMethod, ''), 'n/a');
	set @POHeaderId					= ifnull(nullif(@POHeaderId, ''), 'n/a');
	set @PONumber					= ifnull(nullif(@PONumber, ''), 'n/a');
	set @PrefundedAccountBalance	= ifnull(nullif(format(@PrefundedAccountBalance, 2), ''), 'n/a');
	set @Reason						= ifnull(nullif(@Reason, ''), 'n/a');
	set @RequesterName				= ifnull(nullif(@RequesterName, ''), 'n/a');
	set @RequestorFullName			= ifnull(nullif(@RequestorFullName, ''), 'n/a');
	set @SenderEmail				= ifnull(nullif(@SenderEmail, ''), 'n/a');
	set @SenderFullName				= ifnull(nullif(@SenderFullName, ''), 'n/a');
	set @ShipTo						= ifnull(nullif(@ShipTo, ''), 'n/a');
	set @Source						= ifnull(nullif(@Source, ''), 'n/a');
	set @Table						= ifnull(nullif(@Table, ''), 'n/a');
	set @TimeStamp					= ifnull(nullif(@TimeStamp, ''), 'n/a');
	set @URL						= ifnull(nullif(@URL, ''), 'n/a');
	set @VendorCount				= ifnull(nullif(@VendorCount, ''), 'n/a');
	set @VendorMessage				= ifnull(nullif(@VendorMessage, ''), 'n/a');
	set @VendorName					= ifnull(nullif(@VendorName, ''), 'n/a');
	set @VendorNo					= ifnull(nullif(@VendorNo, ''), 'n/a');
	set @Warehouse					= ifnull(nullif(@Warehouse, ''), 'n/a');


	set pSubject		=	replace (pSubject, '[ActualVendorName]', 		@VendorName);
	set pSubject		=	replace (pSubject, '[ApprovedBy]', 				@ApprovedBy);
	set pSubject		=	replace (pSubject, '[ApprovedOn]', 				@ApprovedOn);
	set pSubject		=	replace (pSubject, '[AssignedDate]', 			@AssignedDate);
	set pSubject		=	replace (pSubject, '[Care of]', 				@Careof);
	set pSubject		=	replace (pSubject, '[Client]', 					@Client);
	set pSubject		=	replace (pSubject, '[ClientFileList]', 			@ClientFileList);
	set pSubject		=	replace (pSubject, '[ClientInvoiceCountList]',	@ClientInvoiceCountList);
	set pSubject		=	replace (pSubject, '[Comment]', 				@Comment);
	set pSubject		=	replace (pSubject, '[ContactPerson]', 			@ContactPerson);
	set pSubject		=	replace (pSubject, '[Contactus]', 				@Contactus);
	set pSubject		=	replace (pSubject, '[CreditCardNo]', 			@CreditCardNo);
	set pSubject		=	replace (pSubject, '[CVC2]', 					@CVC2);
	set pSubject		=	replace (pSubject, '[Date]', 					@Date);
	set pSubject		=	replace (pSubject, '[DelegatedDate]', 			@DelegatedDate);
	set pSubject		=	replace (pSubject, '[DiscountRequestedAmount]', @DiscountRequestedAmount);
	set pSubject		=	replace (pSubject, '[DiscountTotalSum]', 		@DiscountTotalSum);
	set pSubject		=	replace (pSubject, '[ErrorMessage]', 			@ErrorMessage);
	set pSubject		=	replace (pSubject, '[ESCALATEDFROMFULLNAME]', 	@ESCALATEDFROMFULLNAME);
	set pSubject		=	replace (pSubject, '[EstOrderDate]', 			@EstOrderDate);
	set pSubject		=	replace (pSubject, '[Expiration]', 				@Expiration);
	set pSubject		=	replace (pSubject, '[FileName]', 				@FileName);
	set pSubject		=	replace (pSubject, '[FullName]', 				@FullName);
	set pSubject		=	replace (pSubject, '[InternalNote]', 			@InternalNote);
	set pSubject		=	replace (pSubject, '[InvoiceCount]', 			@InvoiceCount);
	set pSubject		=	replace (pSubject, '[InvoiceDate]', 			@InvoiceDate);
	set pSubject		=	replace (pSubject, '[InvoiceNo]', 				@InvoiceNo);
	set pSubject		=	replace (pSubject, '[InvoiceNumber]', 			@InvoiceNumber);
	set pSubject		=	replace (pSubject, '[InvoiceTotal]', 			@InvoiceTotal);
	set pSubject		=	replace (pSubject, '[link]', 					@link);
	set pSubject		=	replace (pSubject, '[Message]', 				pSubject);
	set pSubject		=	replace (pSubject, '[NameF]', 					@NameF);
	set pSubject		=	replace (pSubject, '[NameL]', 					@NameL);
	set pSubject		=	replace (pSubject, '[NewPassword]',	 			@NewPassword);
	set pSubject		=	replace (pSubject, '[NoOfInvoices]', 			@NoOfInvoices);
	set pSubject		=	replace (pSubject, '[OrderAmount]', 			@OrderAmount);
	set pSubject		=	replace (pSubject, '[OrderTotal]', 				@OrderTotal);
	set pSubject		=	replace (pSubject, '[PaymentMethod]', 			@PaymentMethod);
	set pSubject		=	replace (pSubject, '[POHeaderId]', 				@POHeaderId);
	set pSubject		=	replace (pSubject, '[PONumber]', 				@PONumber);
	set pSubject		=	replace (pSubject, '[PrefundedAccountBalance]', @PrefundedAccountBalance);
	set pSubject		=	replace (pSubject, '[Reason]', 					@Reason);
	set pSubject		=	replace (pSubject, '[RequesterName]', 			@RequesterName);
	set pSubject		=	replace (pSubject, '[RequestorFullName]', 		@RequestorFullName);
	set pSubject		=	replace (pSubject, '[SenderEmail]', 			@SenderEmail);
	set pSubject		=	replace (pSubject, '[SenderFullName]', 			@SenderFullName);
	set pSubject		=	replace (pSubject, '[ShipTo]', 					@ShipTo);
	set pSubject		=	replace (pSubject, '[Source]', 					@Source);
	set pSubject		=	replace (pSubject, '[Table]', 					@Table);
	set pSubject		=	replace (pSubject, '[TimeStamp]', 				@TimeStamp);
	set pSubject		=	replace (pSubject, '[URL]', 					@URL);
	set pSubject		=	replace (pSubject, '[VendorCount]', 			@VendorCount);
	set pSubject		=	replace (pSubject, '[VendorMessage]', 			@VendorMessage);
	set pSubject		=	replace (pSubject, '[VendorName]', 				@VendorName);
	set pSubject		=	replace (pSubject, '[VendorNo]', 				@VendorNo);
	set pSubject		=	replace (pSubject, '[Warehouse]', 				@Warehouse);


	set pBody			=	replace (pBody, '[ActualVendorName]', 			@VendorName);
	set pBody			=	replace (pBody, '[ApprovedBy]', 				@ApprovedBy);
	set pBody			=	replace (pBody, '[ApprovedOn]', 				@ApprovedOn);
	set pBody			=	replace (pBody, '[AssignedDate]', 				@AssignedDate);
	set pBody			=	replace (pBody, '[Care of]', 					@Careof);
	set pBody			=	replace (pBody, '[Client]', 					@Client);
	set pBody			=	replace (pBody, '[ClientFileList]', 			@ClientFileList);
	set pBody			=	replace (pBody, '[ClientInvoiceCountList]',		@ClientInvoiceCountList);
	set pBody			=	replace (pBody, '[Comment]', 					@Comment);
	set pBody			=	replace (pBody, '[ContactPerson]', 				@ContactPerson);
	set pBody			=	replace (pBody, '[Contactus]', 					@Contactus);
	set pBody			=	replace (pBody, '[CreditCardNo]', 				@CreditCardNo);
	set pBody			=	replace (pBody, '[CVC2]', 						@CVC2);
	set pBody			=	replace (pBody, '[Date]', 						@Date);
	set pBody			=	replace (pBody, '[DelegatedDate]', 				@DelegatedDate);
	set pBody			=	replace (pBody, '[DiscountRequestedAmount]', 	@DiscountRequestedAmount);
	set pBody			=	replace (pBody, '[DiscountTotalSum]', 			@DiscountTotalSum);
	set pBody			=	replace (pBody, '[ErrorMessage]', 				@ErrorMessage);
	set pBody			=	replace (pBody, '[ESCALATEDFROMFULLNAME]', 		@ESCALATEDFROMFULLNAME);
	set pBody			=	replace (pBody, '[EstOrderDate]', 				@EstOrderDate);
	set pBody			=	replace (pBody, '[Expiration]', 				@Expiration);
	set pBody			=	replace (pBody, '[FileName]', 					@FileName);
	set pBody			=	replace (pBody, '[FullName]', 					@FullName);
	set pBody			=	replace (pBody, '[InternalNote]',	 			@InternalNote);
	set pBody			=	replace (pBody, '[InvoiceCount]', 				@InvoiceCount);
	set pBody			=	replace (pBody, '[InvoiceDate]', 				@InvoiceDate);
	set pBody			=	replace (pBody, '[InvoiceNo]', 					@InvoiceNo);
	set pBody			=	replace (pBody, '[InvoiceNumber]', 				@InvoiceNumber);
	set pBody			=	replace (pBody, '[InvoiceTotal]', 				@InvoiceTotal);
	set pBody			=	replace (pBody, '[link]', 						@link);
	set pBody			=	replace (pBody, '[Message]', 					pBody);
	set pBody			=	replace (pBody, '[NameF]', 						@NameF);
	set pBody			=	replace (pBody, '[NameL]', 						@NameL);
	set pBody			=	replace (pBody, '[NewPassword]',	 			@NewPassword);
	set pBody			=	replace (pBody, '[NoOfInvoices]', 				@NoOfInvoices);
	set pBody			=	replace (pBody, '[OrderAmount]', 				@OrderAmount);
	set pBody			=	replace (pBody, '[OrderTotal]', 				@OrderTotal);
	set pBody			=	replace (pBody, '[PaymentMethod]', 				@PaymentMethod);
	set pBody			=	replace (pBody, '[POHeaderId]', 				@POHeaderId);
	set pBody			=	replace (pBody, '[PONumber]', 					@PONumber);
	set pBody			=	replace (pBody, '[PrefundedAccountBalance]', 	@PrefundedAccountBalance);
	set pBody			=	replace (pBody, '[Reason]', 					@Reason);
	set pBody			=	replace (pBody, '[RequesterName]', 				@RequesterName);
	set pBody			=	replace (pBody, '[RequestorFullName]', 			@RequestorFullName);
	set pBody			=	replace (pBody, '[SenderEmail]', 				@SenderEmail);
	set pBody			=	replace (pBody, '[SenderFullName]', 			@SenderFullName);
	set pBody			=	replace (pBody, '[ShipTo]', 					@ShipTo);
	set pBody			=	replace (pBody, '[Source]', 					@Source);
	set pBody			=	replace (pBody, '[Table]', 						@Table);
	set pBody			=	replace (pBody, '[TimeStamp]', 					@TimeStamp);
	set pBody			=	replace (pBody, '[URL]', 						@URL);
	set pBody			=	replace (pBody, '[VendorCount]',	 			@VendorCount);
	set pBody			=	replace (pBody, '[VendorMessage]', 				@VendorMessage);
	set pBody			=	replace (pBody, '[VendorName]', 				@VendorName);
	set pBody			=	replace (pBody, '[VendorNo]', 					@VendorNo);
	set pBody			=	replace (pBody, '[Warehouse]', 					@Warehouse);


/*	
set @S = 'Test';
set @B = 'Body';
Call _x_EmailGetTemplateValues('06bc5af7-935d-45ce-b0f7-9beda57d036f', 'Invoice', 3950963, '[ApprovedBy]■Johnny Walker', 36, @S, @B);
select @S, @B;
*/


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_EmailGetTemplateValues1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_EmailGetTemplateValues1`(in pUserId char(36), in pDocType varchar(10), in pDocKey varchar(100), in pValues text, in pTemplate int,  inout pSubject text, inout pBody text)
ThisProc:
	BEGIN	

/*
set @S = 'Test';
set @B = 'This is an example for Birhanu';
Call _x_EmailGetTemplateValues1('06bc5af7-935d-45ce-b0f7-9beda57d036f', 'Invoice', 3950963, '[ApprovedBy]■Johnny Walker■[Table]■<TABLE><H></H></TABLE>', 32, @S, @B);		-- chr(254)
select @S, @B;
*/
	declare pMessageBody  text default null;
	-- pValues follows the same rules as _x_AdvancedSearchFieldValuesDependency
	--
	-- [Token]■Value■[Token]■Value■[Token]■Value■[Token]■Value■[Token]■Value
	--



	-- Get the template values
	select	Subject, Body
	into	pSubject, pMessageBody
	from	EmailTemplates 
	where	EmailTemplateType = pTemplate;
	if ROW_COUNT() = 0 then  
		leave ThisProc;
	end if;

	set @ClientId 					= null;
	set @DATEFORMAT					= '%M %d, %Y';
	set @DATETIMEFORMAT 			= '%M %d, %Y at %h:%i %p';

	-- Set up the default values from the pValues values passed
	set @ApprovedBy					= _x_AdvancedSearchFieldValuesDependency(pValues, '[ApprovedBy]');			-- Birhanu
	set @ApprovedOn					= _x_AdvancedSearchFieldValuesDependency(pValues, '[ApprovedOn]');
	set @AssignedDate				= _x_AdvancedSearchFieldValuesDependency(pValues, '[AssignedDate]');
	set @Careof						= _x_AdvancedSearchFieldValuesDependency(pValues, '[Careof]');				-- Birhanu
	set @Client						= _x_AdvancedSearchFieldValuesDependency(pValues, '[Client]');
	set @ClientFileList				= _x_AdvancedSearchFieldValuesDependency(pValues, '[ClientFileList]');
	set @ClientInvoiceCountList		= _x_AdvancedSearchFieldValuesDependency(pValues, '[ClientInvoiceCountList]');
	set @Comment					= _x_AdvancedSearchFieldValuesDependency(pValues, '[Comment]');
	set @ContactPerson				= _x_AdvancedSearchFieldValuesDependency(pValues, '[ContactPerson]');
	set @Contactus					= _x_AdvancedSearchFieldValuesDependency(pValues, '[Contactus]');
	set @CreditCardNo				= _x_AdvancedSearchFieldValuesDependency(pValues, '[CreditCardNo]');
	set @CVC2						= _x_AdvancedSearchFieldValuesDependency(pValues, '[CVC2]');
	set @Date						= _x_AdvancedSearchFieldValuesDependency(pValues, '[Date]');
	set @DelegatedDate				= _x_AdvancedSearchFieldValuesDependency(pValues, '[DelegatedDate]');
	set @DiscountRequestedAmount	= _x_AdvancedSearchFieldValuesDependency(pValues, '[DiscountRequestedAmount]');
	set @DiscountTotalSum			= _x_AdvancedSearchFieldValuesDependency(pValues, '[DiscountTotalSum]');
	set @ErrorMessage				= _x_AdvancedSearchFieldValuesDependency(pValues, '[ErrorMessage]');
	set @ESCALATEDFROMFULLNAME		= _x_AdvancedSearchFieldValuesDependency(pValues, '[ESCALATEDFROMFULLNAME]');
	set @EstOrderDate				= _x_AdvancedSearchFieldValuesDependency(pValues, '[EstOrderDate]');
	set @Expiration					= _x_AdvancedSearchFieldValuesDependency(pValues, '[Expiration]');
	set @FileName					= _x_AdvancedSearchFieldValuesDependency(pValues, '[FileName]');
	set @FullName					= _x_AdvancedSearchFieldValuesDependency(pValues, '[FullName]');
	set @InternalNote				= _x_AdvancedSearchFieldValuesDependency(pValues, '[InternalNote]');			
	set @InvoiceCount				= _x_AdvancedSearchFieldValuesDependency(pValues, '[InvoiceCount]');
	set @InvoiceDate				= _x_AdvancedSearchFieldValuesDependency(pValues, '[InvoiceDate]');
	set @InvoiceNo					= _x_AdvancedSearchFieldValuesDependency(pValues, '[InvoiceNo]');
	set @InvoiceNumber				= _x_AdvancedSearchFieldValuesDependency(pValues, '[InvoiceNumber]');
	set @InvoiceTotal				= _x_AdvancedSearchFieldValuesDependency(pValues, '[InvoiceTotal]');
	set @link						= _x_AdvancedSearchFieldValuesDependency(pValues, '[link]');
	set @NameF						= _x_AdvancedSearchFieldValuesDependency(pValues, '[NameF]');
	set @NameL						= _x_AdvancedSearchFieldValuesDependency(pValues, '[NameL]');
	set @NewPassword				= _x_AdvancedSearchFieldValuesDependency(pValues, '[NewPassword]');
	set @NoOfInvoices				= _x_AdvancedSearchFieldValuesDependency(pValues, '[NoOfInvoices]');
	set @OrderAmount				= _x_AdvancedSearchFieldValuesDependency(pValues, '[OrderAmount]');
	set @OrderTotal					= _x_AdvancedSearchFieldValuesDependency(pValues, '[OrderTotal]');
	set @PaymentMethod				= _x_AdvancedSearchFieldValuesDependency(pValues, '[PaymentMethod]');
	set @POHeaderId					= _x_AdvancedSearchFieldValuesDependency(pValues, '[POHeaderId]');
	set @PONumber					= _x_AdvancedSearchFieldValuesDependency(pValues, '[PONumber]');
	set @PrefundedAccountBalance	= _x_AdvancedSearchFieldValuesDependency(pValues, '[PrefundedAccountBalance]');
	set @Reason						= _x_AdvancedSearchFieldValuesDependency(pValues, '[Reason]');
	set @RequesterName				= _x_AdvancedSearchFieldValuesDependency(pValues, '[RequesterName]');
	set @RequestorFullName			= _x_AdvancedSearchFieldValuesDependency(pValues, '[RequestorFullName]');
	set @SenderEmail				= _x_AdvancedSearchFieldValuesDependency(pValues, '[SenderEmail]');
	set @SenderFullName				= _x_AdvancedSearchFieldValuesDependency(pValues, '[SenderFullName]');
	set @ShipTo						= _x_AdvancedSearchFieldValuesDependency(pValues, '[ShipTo]');
	set @Source						= _x_AdvancedSearchFieldValuesDependency(pValues, '[Source]');
	set @Table						= _x_AdvancedSearchFieldValuesDependency(pValues, '[Table]');
	set @TimeStamp					= _x_AdvancedSearchFieldValuesDependency(pValues, '[TimeStamp]');			-- Birhanu
	set @URL						= _x_AdvancedSearchFieldValuesDependency(pValues, '[URL]');					-- Birhanu
	set @VendorCount				= _x_AdvancedSearchFieldValuesDependency(pValues, '[VendorCount]');
	set @VendorMessage				= _x_AdvancedSearchFieldValuesDependency(pValues, '[VendorMessage]');
	set @VendorName					= _x_AdvancedSearchFieldValuesDependency(pValues, '[VendorName]');
	set @VendorNo					= _x_AdvancedSearchFieldValuesDependency(pValues, '[VendorNo]');
	set @Warehouse					= _x_AdvancedSearchFieldValuesDependency(pValues, '[Warehouse]');

	-- Get the User Passed info
	select	FirstName, LastName, concat(ltrim(FirstName), ' ', ltrim(LastName)), ClientId
	into 	@NameF, @NameL, @FullName, @ClientId
	from 	User 
	where 	UserId = pUserId;
	set @CareOf = @FullName;



	-- Using the pDocType and pDoyKey, use logic to fill in the values requesed for those variables
	if pDocType = 'Invoice' THEN
		select	i.ClientId, ltrim(i.Comment), i.DiscountRequestedAmount, i.PONumber, date(i.InvoiceDate), i.InvoiceNo, i.InvoiceNo, i.InvoiceTotal, i.AprovedDate,
				ltrim(c.CustomerName),
				ltrim(v.VendorName), ltrim(v.VendorNo)
		into	@ClientId, @Comment, @DiscountRequestedAmount, @PONumber, @InvoiceDate, @InvoiceNo, @InvoiceNumber, @InvoiceTotal, @ApprovedOn,
				@Client, 
				@VendorName, @VendorNo
		from 	Invoice i
				inner join 	Client c	on c.ClientId = i.ClientId
				left join 	Vendor v 	on v.VendorId = i.Vendorid
                                  
		where	i.InvoiceId = pDocKey;
	end if;

	if pDocType = 'PurchaseRequest' THEN
		set @CreditCardNo = '????';
	end if;
                    

	Call _x_SetClientTimeZone(@CliendId);


	-- Prepare all Keyword tokens to replace in the Template subject and Body
	set @ApprovedBy					= ifnull(nullif(@ApprovedBy, ''), 'n/a');
	set @ApprovedOn					= ifnull(nullif(DATE_FORMAT(convert_tz(@ApprovedOn, 'GMT', @@session.time_zone), @DATETIMEFORMAT), ''), 'n/a');
	set @AssignedDate				= ifnull(nullif(DATE_FORMAT(convert_tz(@AssignedDate, 'GMT', @@session.time_zone), @DATETIMEFORMAT), ''), 'n/a');
	set @Careof						= ifnull(nullif(@Careof, ''), 'n/a');
	set @Client						= ifnull(nullif(@Client, ''), 'n/a');
	set @ClientFileList				= ifnull(nullif(@ClientFileList, ''), 'n/a');
	set @ClientInvoiceCountList		= ifnull(nullif(@ClientInvoiceCountList, ''), 'n/a');
	set @Comment					= ifnull(nullif(@Comment, ''), 'n/a');
	set @ContactPerson				= ifnull(nullif(@ContactPerson, ''), 'n/a');
	set @Contactus					= ifnull(nullif(@Contactus, ''), 'n/a');
	set @CreditCardNo				= ifnull(nullif(@CreditCardNo, ''), 'n/a');
	set @CVC2						= ifnull(nullif(@CVC2, ''), 'n/a');
	set @Date						= ifnull(nullif(DATE_FORMAT(UTC_TIMESTAMP(), @DATEFORMAT), ''), 'n/a');
	set @DelegatedDate				= ifnull(nullif(DATE_FORMAT(convert_tz(@DelegatedDate, 'GMT', @@session.time_zone), @DATETIMEFORMAT), ''), 'n/a');
	set @DiscountRequestedAmount	= ifnull(nullif(format(@DiscountRequestedAmount, 2), ''), 'n/a');
	set @DiscountTotalSum			= ifnull(nullif(format(@DiscountTotalSum, 2), ''), 'n/a');
	set @ErrorMessage				= ifnull(nullif(@ErrorMessage, ''), 'n/a');
	set @ESCALATEDFROMFULLNAME		= ifnull(nullif(@ESCALATEDFROMFULLNAME, ''), 'n/a');
	set @EstOrderDate				= ifnull(nullif(DATE_FORMAT(@EstOrderDate, @DATEFORMAT), ''), 'n/a');
	set @Expiration					= ifnull(nullif(@Expiration, ''), 'n/a');
	set @FileName					= ifnull(nullif(@FileName, ''), 'n/a');
	set @FullName					= ifnull(nullif(@FullName, ''), 'n/a');
	set @InternalNote				= ifnull(nullif(@InternalNote, ''), 'n/a');
	set @InvoiceCount				= ifnull(nullif(@InvoiceCount, ''), 'n/a');
	set @InvoiceDate				= ifnull(nullif(format(@InvoiceDate, @DATEFORMAT), ''), 'n/a');
	set @InvoiceNo					= ifnull(nullif(@InvoiceNo, ''), 'n/a');
	set @InvoiceNumber				= ifnull(nullif(@InvoiceNumber, ''), 'n/a');
	set @InvoiceTotal				= ifnull(nullif(format(@InvoiceTotal, 2), ''), 'n/a');
	set @link						= ifnull(nullif(@link, ''), 'n/a');
	set @Message					= ifnull(nullif(@Message, ''), 'n/a');
	set @NameF						= ifnull(nullif(@NameF, ''), 'n/a');
	set @NameL						= ifnull(nullif(@NameL, ''), 'n/a');
	set @NewPassword				= ifnull(nullif(@NewPassword, ''), 'n/a');
	set @NoOfInvoices				= ifnull(nullif(@NoOfInvoices, ''), 'n/a');
	set @OrderAmount				= ifnull(nullif(format(@OrderAmount, 2), ''), 'n/a');
	set @OrderTotal					= ifnull(nullif(@OrderTotal, ''), 'n/a');
	set @PaymentMethod				= ifnull(nullif(@PaymentMethod, ''), 'n/a');
	set @POHeaderId					= ifnull(nullif(@POHeaderId, ''), 'n/a');
	set @PONumber					= ifnull(nullif(@PONumber, ''), 'n/a');
	set @PrefundedAccountBalance	= ifnull(nullif(format(@PrefundedAccountBalance, 2), ''), 'n/a');
	set @Reason						= ifnull(nullif(@Reason, ''), 'n/a');
	set @RequesterName				= ifnull(nullif(@RequesterName, ''), 'n/a');
	set @RequestorFullName			= ifnull(nullif(@RequestorFullName, ''), 'n/a');
	set @SenderEmail				= ifnull(nullif(@SenderEmail, ''), 'n/a');
	set @SenderFullName				= ifnull(nullif(@SenderFullName, ''), 'n/a');
	set @ShipTo						= ifnull(nullif(@ShipTo, ''), 'n/a');
	set @Source						= ifnull(nullif(@Source, ''), 'n/a');
	set @Table						= ifnull(nullif(@Table, ''), 'n/a');
	set @TimeStamp					= ifnull(nullif(@TimeStamp, ''), 'n/a');
	set @URL						= ifnull(nullif(@URL, ''), 'n/a');
	set @VendorCount				= ifnull(nullif(@VendorCount, ''), 'n/a');
	set @VendorMessage				= ifnull(nullif(@VendorMessage, ''), 'n/a');
	set @VendorName					= ifnull(nullif(@VendorName, ''), 'n/a');
	set @VendorNo					= ifnull(nullif(@VendorNo, ''), 'n/a');
	set @Warehouse					= ifnull(nullif(@Warehouse, ''), 'n/a');

	-- Replace all toekns in the subject
	set pSubject		=	replace (pSubject, '[ActualVendorName]', 		@VendorName);
	set pSubject		=	replace (pSubject, '[ApprovedBy]', 				@ApprovedBy);
	set pSubject		=	replace (pSubject, '[ApprovedOn]', 				@ApprovedOn);
	set pSubject		=	replace (pSubject, '[AssignedDate]', 			@AssignedDate);
	set pSubject		=	replace (pSubject, '[Care of]', 				@Careof);
	set pSubject		=	replace (pSubject, '[Client]', 					@Client);
	set pSubject		=	replace (pSubject, '[ClientFileList]', 			@ClientFileList);
	set pSubject		=	replace (pSubject, '[ClientInvoiceCountList]',	@ClientInvoiceCountList);
	set pSubject		=	replace (pSubject, '[Comment]', 				@Comment);
	set pSubject		=	replace (pSubject, '[ContactPerson]', 			@ContactPerson);
	set pSubject		=	replace (pSubject, '[Contactus]', 				@Contactus);
	set pSubject		=	replace (pSubject, '[CreditCardNo]', 			@CreditCardNo);
	set pSubject		=	replace (pSubject, '[CVC2]', 					@CVC2);
	set pSubject		=	replace (pSubject, '[Date]', 					@Date);
	set pSubject		=	replace (pSubject, '[DelegatedDate]', 			@DelegatedDate);
	set pSubject		=	replace (pSubject, '[DiscountRequestedAmount]', @DiscountRequestedAmount);
	set pSubject		=	replace (pSubject, '[DiscountTotalSum]', 		@DiscountTotalSum);
	set pSubject		=	replace (pSubject, '[ErrorMessage]', 			@ErrorMessage);
	set pSubject		=	replace (pSubject, '[ESCALATEDFROMFULLNAME]', 	@ESCALATEDFROMFULLNAME);
	set pSubject		=	replace (pSubject, '[EstOrderDate]', 			@EstOrderDate);
	set pSubject		=	replace (pSubject, '[Expiration]', 				@Expiration);
	set pSubject		=	replace (pSubject, '[FileName]', 				@FileName);
	set pSubject		=	replace (pSubject, '[FullName]', 				@FullName);
	set pSubject		=	replace (pSubject, '[InternalNote]', 			@InternalNote);
	set pSubject		=	replace (pSubject, '[InvoiceCount]', 			@InvoiceCount);
	set pSubject		=	replace (pSubject, '[InvoiceDate]', 			@InvoiceDate);
	set pSubject		=	replace (pSubject, '[InvoiceNo]', 				@InvoiceNo);
	set pSubject		=	replace (pSubject, '[InvoiceNumber]', 			@InvoiceNumber);
	set pSubject		=	replace (pSubject, '[InvoiceTotal]', 			@InvoiceTotal);
	set pSubject		=	replace (pSubject, '[link]', 					@link);
	set pSubject		=	replace (pSubject, '[Message]', 				pSubject);
	set pSubject		=	replace (pSubject, '[NameF]', 					@NameF);
	set pSubject		=	replace (pSubject, '[NameL]', 					@NameL);
	set pSubject		=	replace (pSubject, '[NewPassword]',	 			@NewPassword);
	set pSubject		=	replace (pSubject, '[NoOfInvoices]', 			@NoOfInvoices);
	set pSubject		=	replace (pSubject, '[OrderAmount]', 			@OrderAmount);
	set pSubject		=	replace (pSubject, '[OrderTotal]', 				@OrderTotal);
	set pSubject		=	replace (pSubject, '[PaymentMethod]', 			@PaymentMethod);
	set pSubject		=	replace (pSubject, '[POHeaderId]', 				@POHeaderId);
	set pSubject		=	replace (pSubject, '[PONumber]', 				@PONumber);
	set pSubject		=	replace (pSubject, '[PrefundedAccountBalance]', @PrefundedAccountBalance);
	set pSubject		=	replace (pSubject, '[Reason]', 					@Reason);
	set pSubject		=	replace (pSubject, '[RequesterName]', 			@RequesterName);
	set pSubject		=	replace (pSubject, '[RequestorFullName]', 		@RequestorFullName);
	set pSubject		=	replace (pSubject, '[SenderEmail]', 			@SenderEmail);
	set pSubject		=	replace (pSubject, '[SenderFullName]', 			@SenderFullName);
	set pSubject		=	replace (pSubject, '[ShipTo]', 					@ShipTo);
	set pSubject		=	replace (pSubject, '[Source]', 					@Source);
	set pSubject		=	replace (pSubject, '[Table]', 					@Table);
	set pSubject		=	replace (pSubject, '[TimeStamp]', 				@TimeStamp);
	set pSubject		=	replace (pSubject, '[URL]', 					@URL);
	set pSubject		=	replace (pSubject, '[VendorCount]', 			@VendorCount);
	set pSubject		=	replace (pSubject, '[VendorMessage]', 			@VendorMessage);
	set pSubject		=	replace (pSubject, '[VendorName]', 				@VendorName);
	set pSubject		=	replace (pSubject, '[VendorNo]', 				@VendorNo);
	set pSubject		=	replace (pSubject, '[Warehouse]', 				@Warehouse);

	-- Replace all tokens in the Body
	set pMessageBody			=	replace (pMessageBody, '[ActualVendorName]', 			@VendorName);
	set pMessageBody			=	replace (pMessageBody, '[ApprovedBy]', 				@ApprovedBy);
	set pMessageBody			=	replace (pMessageBody, '[ApprovedOn]', 				@ApprovedOn);
	set pMessageBody			=	replace (pMessageBody, '[AssignedDate]', 				@AssignedDate);
	set pMessageBody			=	replace (pMessageBody, '[Care of]', 					@Careof);
	set pMessageBody			=	replace (pMessageBody, '[Client]', 					@Client);
	set pMessageBody			=	replace (pMessageBody, '[ClientFileList]', 			@ClientFileList);
	set pMessageBody			=	replace (pMessageBody, '[ClientInvoiceCountList]',		@ClientInvoiceCountList);
	set pMessageBody			=	replace (pMessageBody, '[Comment]', 					@Comment);
	set pMessageBody			=	replace (pMessageBody, '[ContactPerson]', 				@ContactPerson);
	set pMessageBody			=	replace (pMessageBody, '[Contactus]', 					@Contactus);
	set pMessageBody			=	replace (pMessageBody, '[CreditCardNo]', 				@CreditCardNo);
	set pMessageBody			=	replace (pMessageBody, '[CVC2]', 						@CVC2);
	set pMessageBody			=	replace (pMessageBody, '[Date]', 						@Date);
	set pMessageBody			=	replace (pMessageBody, '[DelegatedDate]', 				@DelegatedDate);
	set pMessageBody			=	replace (pMessageBody, '[DiscountRequestedAmount]', 	@DiscountRequestedAmount);
	set pMessageBody			=	replace (pMessageBody, '[DiscountTotalSum]', 			@DiscountTotalSum);
	set pMessageBody			=	replace (pMessageBody, '[ErrorMessage]', 				@ErrorMessage);
	set pMessageBody			=	replace (pMessageBody, '[ESCALATEDFROMFULLNAME]', 		@ESCALATEDFROMFULLNAME);
	set pMessageBody			=	replace (pMessageBody, '[EstOrderDate]', 				@EstOrderDate);
	set pMessageBody			=	replace (pMessageBody, '[Expiration]', 				@Expiration);
	set pMessageBody			=	replace (pMessageBody, '[FileName]', 					@FileName);
	set pMessageBody			=	replace (pMessageBody, '[FullName]', 					@FullName);
	set pMessageBody			=	replace (pMessageBody, '[InternalNote]',	 			@InternalNote);
	set pMessageBody			=	replace (pMessageBody, '[InvoiceCount]', 				@InvoiceCount);
	set pMessageBody			=	replace (pMessageBody, '[InvoiceDate]', 				@InvoiceDate);
	set pMessageBody			=	replace (pMessageBody, '[InvoiceNo]', 					@InvoiceNo);
	set pMessageBody			=	replace (pMessageBody, '[InvoiceNumber]', 				@InvoiceNumber);
	set pMessageBody			=	replace (pMessageBody, '[InvoiceTotal]', 				@InvoiceTotal);
	set pMessageBody			=	replace (pMessageBody, '[link]', 						@link);
	set pMessageBody			=	replace (pMessageBody, '[Message]', 					pBody);
	set pMessageBody			=	replace (pMessageBody, '[NameF]', 						@NameF);
	set pMessageBody			=	replace (pMessageBody, '[NameL]', 						@NameL);
	set pMessageBody			=	replace (pMessageBody, '[NewPassword]',	 			@NewPassword);
	set pMessageBody			=	replace (pMessageBody, '[NoOfInvoices]', 				@NoOfInvoices);
	set pMessageBody			=	replace (pMessageBody, '[OrderAmount]', 				@OrderAmount);
	set pMessageBody			=	replace (pMessageBody, '[OrderTotal]', 				@OrderTotal);
	set pMessageBody			=	replace (pMessageBody, '[PaymentMethod]', 				@PaymentMethod);
	set pMessageBody			=	replace (pMessageBody, '[POHeaderId]', 				@POHeaderId);
	set pMessageBody			=	replace (pMessageBody, '[PONumber]', 					@PONumber);
	set pMessageBody			=	replace (pMessageBody, '[PrefundedAccountBalance]', 	@PrefundedAccountBalance);
	set pMessageBody			=	replace (pMessageBody, '[Reason]', 					@Reason);
	set pMessageBody			=	replace (pMessageBody, '[RequesterName]', 				@RequesterName);
	set pMessageBody			=	replace (pMessageBody, '[RequestorFullName]', 			@RequestorFullName);
	set pMessageBody			=	replace (pMessageBody, '[SenderEmail]', 				@SenderEmail);
	set pMessageBody			=	replace (pMessageBody, '[SenderFullName]', 			@SenderFullName);
	set pMessageBody			=	replace (pMessageBody, '[ShipTo]', 					@ShipTo);
	set pMessageBody			=	replace (pMessageBody, '[Source]', 					@Source);
	set pMessageBody			=	replace (pMessageBody, '[Table]', 						@Table);
	set pMessageBody			=	replace (pMessageBody, '[TimeStamp]', 					@TimeStamp);
	set pMessageBody			=	replace (pMessageBody, '[URL]', 						@URL);
	set pMessageBody			=	replace (pMessageBody, '[VendorCount]',	 			@VendorCount);
	set pMessageBody			=	replace (pMessageBody, '[VendorMessage]', 				@VendorMessage);
	set pMessageBody			=	replace (pMessageBody, '[VendorName]', 				@VendorName);
	set pMessageBody			=	replace (pMessageBody, '[VendorNo]', 					@VendorNo);
	set pMessageBody			=	replace (pMessageBody, '[Warehouse]', 					@Warehouse);


	-- Set return value
	set pBody = pMessageBody;

/*	
set @S = 'Test';
set @B = 'This is an example for Birhanu';
Call _x_EmailGetTemplateValues1('06bc5af7-935d-45ce-b0f7-9beda57d036f', 'Invoice', 3950963, '[ApprovedBy]■Johnny Walker■[Table]■<TABLE><H></H></TABLE>', 32, @S, @B);		-- chr(254)
select @S, @B;
*/


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ExpenseReportGenerate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ExpenseReportGenerate`(IN pClientId int, in pFirstTime bit)
ThisProc:
	BEGIN

-- noformat

		if pClientId is null THEN
			select 'No client passed';
			Leave ThisProc;
		end if;

		set pFirstTime = ifnull(pFirstTime, 0);


		update	_x_UserParameters xup 
				inner join User u 	on u.UserId = xup.UserId
		set 	xup.EmployeeTypeId = null
		where	ClientId = pClientId and xup.EmployeeTypeId;

		DELETE
		FROM	ClientExpenseCategoryByEmployeeType		
		WHERE	ExpenseCategoryId IN (	SELECT	ExpenseCategoryId
											FROM	ClientExpenseCategory
											WHERE	ClientId = pClientId);

		DELETE
		FROM	ClientExpenseCurrency
		WHERE	ClientId = pClientId;

		DELETE
		FROM	ClientExpenseCategory
		WHERE	ClientId = pClientId;

		DELETE
		FROM	ClientEmployeeType
		WHERE	ClientId = pClientId;

		IF pFirstTime = 1 THEN
			ALTER TABLE ClientExpenseCategory				AUTO_INCREMENT = 1;
			ALTER TABLE ClientEmployeeType 					AUTO_INCREMENT = 1;
		END IF;

		insert into ClientExpenseCurrency (ClientId, Currency) values (pClientId, 'USD');
		insert into ClientExpenseCurrency (ClientId, Currency) values (pClientId, 'EUR');
		insert into ClientExpenseCurrency (ClientId, Currency) values (pClientId, 'GBP');
		insert into ClientExpenseCurrency (ClientId, Currency) values (pClientId, 'JPY');
		insert into ClientExpenseCurrency (ClientId, Currency) values (pClientId, 'AUD');
		insert into ClientExpenseCurrency (ClientId, Currency) values (pClientId, 'CAD');
		insert into ClientExpenseCurrency (ClientId, Currency) values (pClientId, 'CHF');
		insert into ClientExpenseCurrency (ClientId, Currency) values (pClientId, 'CNH');
		insert into ClientExpenseCurrency (ClientId, Currency) values (pClientId, 'HKD');
		insert into ClientExpenseCurrency (ClientId, Currency) values (pClientId, 'NZD');
		insert into ClientEmployeeType(ClientId, TypeName) values (pClientId, 'Staff');
		insert into ClientEmployeeType(ClientId, TypeName) values (pClientId, 'Executive');
		insert into ClientExpenseCategory(ClientId, CategoryName, EntryLabel, AllowQtyOrAmount, isReceiptRequired, Tooltip) values (pClientId, 'Airfare', 			'Cost',			'A', 1, 'Enter the total cost of the flight.');
		insert into ClientExpenseCategory(ClientId, CategoryName, EntryLabel, AllowQtyOrAmount, isReceiptRequired, Tooltip) values (pClientId, 'Lodging', 			'Amount',		'A', 1, 'Enter the total charged for the hotel used.');
		insert into ClientExpenseCategory(ClientId, CategoryName, EntryLabel, AllowQtyOrAmount, isReceiptRequired, Tooltip) values (pClientId, 'Meal', 				'Amount',		'A', 1, 'Enter the total for the meal.');
		insert into ClientExpenseCategory(ClientId, CategoryName, EntryLabel, AllowQtyOrAmount, isReceiptRequired, Tooltip) values (pClientId, 'Other', 			'Amount',		'A', 1, 'Miscellaneous expense.');
		insert into ClientExpenseCategory(ClientId, CategoryName, EntryLabel, AllowQtyOrAmount, isReceiptRequired, Tooltip) values (pClientId, 'Per Diem', 			'Days',			'Q', 0, 'Enter the total days your expense report covers.');
		insert into ClientExpenseCategory(ClientId, CategoryName, EntryLabel, AllowQtyOrAmount, isReceiptRequired, Tooltip) values (pClientId, 'Transportation', 	'Fare',			'A', 1, 'Amount paid for Taxi, Uber or other public transit.');
		insert into ClientExpenseCategory(ClientId, CategoryName, EntryLabel, AllowQtyOrAmount, isReceiptRequired, Tooltip) values (pClientId, 'Vehicule', 			'Miles',		'Q', 0, 'Note the total Miles you travelled while using your vehicule.');

		insert into ClientExpenseCategoryByEmployeeType (ExpenseCategoryId, EmployeeTypeId, QtyMin, QtyMax, QtyRate, AmountMin, AmountMax)
			select 	ExpenseCategoryId, EmployeeTypeId,
					case when AllowQtyOrAmount = 'Q' then 1 else null end,
					null,
					case 	when AllowQtyOrAmount = 'Q' then 
								case	when CategoryName = 'Vehicule' then 0.67
									 	when CategoryName = 'Per Diem' then case when TypeName = 'Staff' then 35.00 else 45.00 END end
							else null end,
					case when AllowQtyOrAmount = 'A' then 1.00 else null end,
					null
			from 	ClientExpenseCategory
					cross join (select EmployeeTypeId, TypeName from ClientEmployeeType where ClientId = pClientId) Types
			where 	ClientId = pClientId;
				
		-- Update _x_ClientParameters xcp set isExpenseSMART = 1 where xcp.ClientId = pClientId;

		update	_x_UserParameters xup 
				inner join User u 	on u.UserId = xup.UserId
		set 	xup.EmployeeTypeId = (select EmployeeTypeId from ClientEmployeeType cet where cet.ClientId = pClientId and cet.TypeName = 'Staff')
		where	ClientId = pClientId and xup.EmployeeTypeId is null;

/*
set @ID = 88;

call _x_ExpenseReportGenerate(@ID, 1);

select * from ClientExpenseCurrency;
select * from ClientEmployeeType;
select * from ClientExpenseCategory cec;
select * from ClientExpenseCategoryByEmployeeType;
select * from _x_UserParameters xup where xup.EmployeeTypeId is not null;
*/


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ExpenseSmartCreateEmployeeType` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ExpenseSmartCreateEmployeeType`(IN p_ClientId INT, IN p_TypeName VARCHAR(30), IN p_IsActive BIT)
BEGIN
		INSERT INTO `ExpenseSmart.ClientEmployeeType` (ClientId, TypeName, IsActive) VALUES (p_ClientId, p_TypeName, p_IsActive);
	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ExpenseSmartGetEmployeeTypes` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ExpenseSmartGetEmployeeTypes`(IN p_ClientId INT)
BEGIN
	BEGIN
	    SELECT * FROM `ExpenseSmart.ClientEmployeeType` WHERE ClientId = p_ClientId;
	END;
    END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ExportApprovedInvoices` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ExportApprovedInvoices`(in pUserId char(36), in pNotifyAll tinyint)
ThisProc:BEGIN

	set pNotifyAll = ifnull(pNotifyAll, 0);

	call _x_UserActivity(pUserId, 'Export Approved Invoices', case when pNotifyAll = 0 then null else 'Notify All' end);

	select 	ClientId 
	into 	@ClientId
	from 	User u
	where	UserId = pUserId;
	
	-- Check is there is a processes scheduled
	if exists (
				select 1 
					from ExportProcess ep
					where ep.ClientId = @ClientId
						and CompletedDate is NULL
				) THEN
		Update 	ExportProcess	set 
				AdditionalUserIds 	= concat(ifnull(concat(AdditionalUserIds, ';'), ''), pUserId),
				isNotifyAll			= pNotifyAll
		where 	ClientId = @ClientId
				and UserId <> pUserId
				and CompletedDate is NULL
				and isNotifyAll = 0;
		Leave ThisProc;
	end if;
	
	insert into ExportProcess(ClientId, UserId, isNotifyAll) 
		Values (@ClientId, pUserId, pNotifyAll);

/*
truncate table ExportProcess;
call _x_ExportApprovedInvoices('60799ee7-d61c-4309-8ee5-f2b65f6fc925', 0);
call _x_ExportApprovedInvoices('1e02f268-3186-4399-9db9-2a4a3ce3738b', 1);
select * from ExportProcess;
*/

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ExportApprovedInvoices_List` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ExportApprovedInvoices_List`(in pUserId char(36), in pDate datetime)
ThisProc:BEGIN

	SELECT ClientId INTO @ClientId FROM User WHERE UserId = pUserId;
	call _x_SetClientTimeZone(@ClientId);

	if pDate is null then 
		call _x_UserActivity(pUserId, 'Export Approved Invoices', 'History');
	
		select 	convert_tz(RequestedDate, 'GMT', @@session.time_zone)		as RequestedDate,
				concat(User.LastName, ', ', User.FirstName)					as RequestedBy,
				(
					Select	count(*) 
					from 	ExportList 
					where 	ExportList.ClientId = ExportProcess.ClientId
							and ExportList.DateCreated = ExportProcess.CompletedDate
				)															as TotalExported,
				convert_tz(CompletedDate, 'GMT', @@session.time_zone)		as CompletedDate
		from 	ExportProcess
				inner join User on User.UserId = ExportProcess.UserId
		where 	ExportProcess.ClientId = @ClientId
		order 	by 1 desc;
		Leave ThisProc;
	end if;
	
	set @Info = Concat('History - Date: ', pDate);
    
	call _x_UserActivity(pUserId, 'Export Approved Invoices', @Info);

	SELECT
			Vendor.VendorNo, 
			Vendor.VendorName,
			IFNULL(Invoice.InvoiceNo, '') 										AS InvoiceNo,
			date(Invoice.InvoiceDate)											AS InvoiceDate,
			InvoiceType,
			ifnull(Invoice.PONUmber, '')										as PONumber,
			Invoice.InvoiceTotal,
			Invoice.InvoiceId
	FROM	Invoice
			inner join ExportList			on ExportList.InvoiceId = Invoice.InvoiceId
												and ExportList.ClientId = @ClientId
												and convert_tz(DateCreated, 'GMT', @@session.time_zone) = pDate
			LEFT JOIN Vendor				ON Vendor.VendorId = Invoice.VendorId			
	where 	Invoice.ClientId = @ClientId
	order	by 1,2,3;

/*

call _x_ExportApprovedInvoices_List('60799ee7-d61c-4309-8ee5-f2b65f6fc925', null);
call _x_ExportApprovedInvoices_List('60799ee7-d61c-4309-8ee5-f2b65f6fc925', '2024-11-13 10:45:00');


*/

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_FieldGLData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_FieldGLData`(IN `pClientId` int)
BEGIN

	SELECT	DISTINCT
		    ClientInvoiceAttribute.IsCritical,
		    ClientInvoiceAttribute.IsRequred 																		AS IsRequired,
		    COALESCE(InvoiceAttribute.EditorType, IF(InvoiceAttribute.InvoiceAttributeName LIKE 'Company%', 2, 0)) 	AS EditorType,
		    CASE	WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'Gl%'				THEN 'GLCode' 
					WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'Department%'		THEN 'Department' 
					WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'Project%' 			THEN 'Project' 
					WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'SubProject%'		THEN 'SubProject' 
					WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'Vendor%' 			THEN 'Vendor' 
					WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'Company%'			THEN 'Company' 
					WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'Customer%' 		THEN 'Customer' 
					WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'Org%' 				THEN 'Org' 
					WHEN InvoiceAttribute.InvoiceAttributeName = 'AccountingVariable1' 	THEN 'AccountingV1' 
					WHEN InvoiceAttribute.InvoiceAttributeName = 'AccountingVariable2' 	THEN 'AccountingV2' 
					WHEN InvoiceAttribute.InvoiceAttributeName = 'AccountingVariable3'	THEN 'AccountingV3' 
					WHEN InvoiceAttribute.InvoiceAttributeName = 'AccountingVariable4' 	THEN 'AccountingV4' 
					ELSE InvoiceAttribute.InvoiceAttributeName END 													AS AttributeName,
		    COALESCE(ClientInvoiceAttribute.DisplayName, InvoiceAttribute.DefaultDisplayName, InvoiceAttribute.InvoiceAttributeName) AS DisplayName
	FROM	ClientInvoiceAttribute
			INNER JOIN InvoiceAttribute			ON ClientInvoiceAttribute.InvoiceAttributeID = InvoiceAttribute.InvoiceAttributeID
	WHERE	ClientInvoiceAttribute.ClientID 		= pClientId
			AND ClientInvoiceAttribute.Task 		= 5
			AND ClientInvoiceAttribute.IsReadonly 	= 0
	ORDER	BY ClientInvoiceAttribute.OrderNo;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_FieldInvoice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_FieldInvoice`(
-- noformat
	IN pInvoiceId 		int,
	IN pClientId 		int,
	IN pUserId 			varchar(36),
	in pSource			varchar(50)		-- if NUll from Website else ExpenseSMART

)
ThisProc:BEGIN
	set pSource 	= nullif(pSource, '');

	SET @InvoiceType = NULL;
	set @ApprovalStatusId = 1;
	SET @TaskId = null;
	set @InMyQueue = 0;
	set @isAdmin = 0;
	set @isAuditor = 0;
	set @isInvoiceNew = 0;
	set @isInvoiceUpdate = 0;
	set @InMyQueue = 0; 
	set @UserSubmittedInvoice = 0;

	if exists (
				SELECT	1
				FROM	ClientUserRoles cur
						INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
						INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
				WHERE	cur.UserId = pUserId
						and crf.FunctionKey = 'InvoiceAuditor'
						and Access = 1
				) then
		set @isAuditor = 1;
	else
		if exists (
					SELECT	1
					FROM	ClientUserRoles cur
							INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
							INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
					WHERE	cur.UserId = pUserId
							and crf.FunctionKey = 'InvoiceUpdate'
							and Access = 1
					) then
			set @isInvoiceUpdate = 1;
		end if;
	
		if exists (
					SELECT	1
					FROM	ClientUserRoles cur
							INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
							INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
					WHERE	cur.UserId = pUserId
							and crf.FunctionKey = 'InvoiceNew'
							and Access = 1
					) then
			set @isInvoiceNew = 1;
		end if;
	
	    IF EXISTS (SELECT	1
			        FROM	ClientUserRoles cur
			          		INNER JOIN ClientRoles cr		ON	cr.RoleId = cur.RoleId
			            										AND cr.isAdmin = 1
			        WHERE	cur.UserId = pUserId) THEN
			set @isAdmin = 1;
		end if;
	end if;

-- SELECT @isAdmin, @isAuditor, @isInvoiceNew, @isInvoiceUpdate;

	SELECT
			   CASE 	WHEN InvoiceType LIKE '%Invoice%'	THEN 'Invoice' 
						WHEN InvoiceType LIKE '%Archive%'	THEN 'Invoice' 
						WHEN InvoiceType = NULL 			THEN 'Invoice' 
						ELSE InvoiceType END AS InvoiceType,
			   CASE		WHEN ApprovalStatusId = 1 AND IsPOInvoice = 1 THEN 6 
						WHEN ApprovalStatusId = 1 AND IsPOInvoice = 0 THEN 7 
						WHEN ApprovalStatusId = 3 AND IsPOInvoice = 1 THEN 0 
						WHEN ApprovalStatusId = 3 AND IsPOInvoice = 0 THEN 1 
						WHEN ApprovalStatusId = 4 AND IsPOInvoice = 1 THEN 0 
						WHEN ApprovalStatusId = 4 AND IsPOInvoice = 0 THEN 1 
						WHEN ApprovalStatusId = 5 AND IsPOInvoice = 1 THEN 0 
						WHEN ApprovalStatusId = 5 AND IsPOInvoice = 0 THEN 1 
						WHEN ApprovalStatusId = 6 AND IsPOInvoice = 1 THEN 2 
						WHEN ApprovalStatusId = 6 AND IsPOInvoice = 0 THEN 3 
						WHEN ApprovalStatusId > 6 AND IsPOInvoice = 1 THEN 0 
						WHEN ApprovalStatusId > 6 AND IsPOInvoice = 0 THEN 1 
						ELSE 0 END AS Task,
				ApprovalStatusId,
				case when ifnull(b.Source, '') = 'User' then 1 else 0 end
	INTO 	@InvoiceType, @TaskId, @ApprovalStatusId, @UserSubmittedInvoice
	FROM	Invoice
			left join Batch b on b.ID = Invoice.BatchId
	WHERE	InvoiceId = pInvoiceId
			AND	Invoice.ClientId = pClientId
	LIMIT 1;

	IF EXISTS (select 	1
				FROM	Invoice i
						INNER JOIN InvoiceStatus iStatus			ON iStatus.StateId = i.ApprovalStatusId
						left join Batch b 							on b.ID = i.BatchID
						left join Vendor v 							on v.ClientId = i.ClientId 
																		and v.VendorId = i.VendorId
						left join UserInvoiceAssignment ass			on ass.InvoiceId = i.InvoiceId
																		and ass.UserId = pUserId
						left join UserReassignmentHistory reassH	on reassH.TargetUserId = pUserId
																	and Now() between reassH.DateFrom and reassH.DateTo
						left join UserInvoiceAssignment reass		on reass.InvoiceId = i.InvoiceId 
																		and reass.UserId = reassH.SourceUserId
						WHERE i.ClientId = pClientId
								AND i.IsDeleted 			= 0
								and i.ApprovalStatusId		= 3
								and i.InvoiceType 			<> 'Archive'
								and i.InvoiceID				= pInvoiceId
								and (
										ass.InvoiceId is not null
										or reass.InvoiceId is not null
									)
				) THEN
       	set @InMyQueue = 1;    
	elseif @ApprovalStatusId = 6 THEN
		if exists (SELECT 1 from _x_UserParameters up	WHERE up.UserId = pUserId and up.IsExceptionHandler = 1) THEN
			set @InMyQueue = 1;
		end if;
	end if;

	if pSource = '**(ExpenseSMART)**' THEN
		Call _x_InvoiceUpdateDataChanges(pInvoiceId, pClientId, pUserId, pSource);		-- Get all the fields from the table

		select 	pInvoiceId 																								as InvoiceId,
				CASE 
						WHEN InvoiceAttribute.InvoiceAttributeName LIKE '%Date%' 									
							THEN 15 
						WHEN InvoiceAttribute.InvoiceAttributeName = 'VendorLocationId' 							
							THEN 16 
						ELSE ifnull(ifnull(ClientInvoiceAttribute.EditorType, InvoiceAttribute.EditorType), 0) END 		AS EditorType,
						
				CASE 
						WHEN InvoiceAttribute.InvoiceAttributeName = 'GLCodeId'
							THEN 'InvoiceNo' 
						ELSE InvoiceAttribute.InvoiceAttributeName END													AS AttributeName,
			
				CASE	WHEN ClientInvoiceAttribute.DisplayName = '' 												
							THEN IF(InvoiceAttribute.DefaultDisplayName != '', InvoiceAttribute.DefaultDisplayName, InvoiceAttribute.InvoiceAttributeName) 
						ELSE COALESCE(ClientInvoiceAttribute.DisplayName, InvoiceAttribute.DefaultDisplayName, InvoiceAttribute.InvoiceAttributeName) END AS DisplayName,
				REPLACE(ClientInvoiceAttribute.DisplayFormat, 'MMMM yyyy', 'mmyyyy') 									AS DisplayFormat,
				myDataChanges.FieldValueBefore																			as AttributeValue,
				CASE	WHEN InvoiceAttribute.InvoiceAttributeName = 'InvoiceNo'
							THEN 0 
						WHEN InvoiceAttribute.InvoiceAttributeName = 'Comment'
							THEN (ClientInvoiceAttribute.OrderNo + 10) 
						ELSE ClientInvoiceAttribute.OrderNo END 														AS OrderNo				
		FROM 	ClientInvoiceAttribute
				INNER JOIN InvoiceAttribute				ON ClientInvoiceAttribute.InvoiceAttributeID = InvoiceAttribute.InvoiceAttributeID
				inner join myDataChanges				on myDataChanges.TableName = 'Invoice' and myDataChanges.FieldName = InvoiceAttribute.InvoiceAttributeName
		WHERE 	ClientInvoiceAttribute.ClientID = pClientId
				AND ClientInvoiceAttribute.Task = @TaskId
		GROUP BY (AttributeName)
		ORDER BY OrderNo, EditorType, DisplayName;
		Leave ThisProc;
	end if;
                     

-- SELECT @InMyQueue, @isInvoiceNew, @UserSubmittedInvoice, @isAdmin, 	@isInvoiceUpdate, @ApprovalStatusId;
	SELECT
		    ClientInvoiceAttribute.Task,
		    ClientInvoiceAttribute.InvoiceType,
		    ClientInvoiceAttribute.IsCritical,
		    ClientInvoiceAttribute.IsRequred AS IsRequired,

			case 	when @isAuditor = 1 																		then 1
					When @InMyQueue = 1 																		then ClientInvoiceAttribute.IsReadonly
					When @isInvoiceNew = 1 and @UserSubmittedInvoice = 1 AND @ApprovalStatusId = 1				then ClientInvoiceAttribute.IsReadonly
					When @isAdmin = 1 then 
						case	When InvoiceAttribute.InvoiceAttributeName = 'Comment' 							then 0
								when @ApprovalStatusId in (1,2,3,6,99) 											then ClientInvoiceAttribute.IsReadonly
								else 1 end
					When @isInvoiceUpdate = 1			 														then 
						case	when @ApprovalStatusId in (1,2,3,6,99) 											then ClientInvoiceAttribute.IsReadonly
								else 1 end
					else 1 end as IsReadonly,
		    CASE 
					WHEN InvoiceAttribute.InvoiceAttributeName LIKE '%Date%' 									THEN 15 
					WHEN InvoiceAttribute.InvoiceAttributeName = 'VendorLocationId' 							THEN 16 
					ELSE ifnull(ifnull(ClientInvoiceAttribute.EditorType, InvoiceAttribute.EditorType), 0) END 			AS EditorType,
					
			CASE 
					WHEN InvoiceAttribute.InvoiceAttributeName = 'GLCodeId' 									THEN 'InvoiceNo' 
					ELSE InvoiceAttribute.InvoiceAttributeName 						END AS AttributeName,
		
			CASE	WHEN ClientInvoiceAttribute.DisplayName = '' 												THEN IF(InvoiceAttribute.DefaultDisplayName != '', InvoiceAttribute.DefaultDisplayName, InvoiceAttribute.InvoiceAttributeName) 
					ELSE COALESCE(ClientInvoiceAttribute.DisplayName, InvoiceAttribute.DefaultDisplayName, InvoiceAttribute.InvoiceAttributeName) END AS DisplayName,
			REPLACE(ClientInvoiceAttribute.DisplayFormat, 'MMMM yyyy', 'mmyyyy') AS DisplayFormat,
			CASE	WHEN InvoiceAttribute.InvoiceAttributeName = 'InvoiceNo' 									THEN 0 
					WHEN InvoiceAttribute.InvoiceAttributeName = 'Comment' 										THEN (ClientInvoiceAttribute.OrderNo + 10) 
					ELSE ClientInvoiceAttribute.OrderNo END AS OrderNo
	
	FROM 	ClientInvoiceAttribute
			INNER JOIN InvoiceAttribute				ON ClientInvoiceAttribute.InvoiceAttributeID = InvoiceAttribute.InvoiceAttributeID
	WHERE 	ClientInvoiceAttribute.ClientID = pClientId
			AND ClientInvoiceAttribute.Task = @TaskId
	GROUP BY (AttributeName)
	ORDER BY OrderNo, EditorType, DisplayName;

-- Call _x_FieldInvoice (663283376, 88, 'dfb816df-f6f5-41c0-9d43-8fbe626fed09', null);
-- Call _x_FieldInvoice (663272507, 1, '8d7960f2-6159-406b-9dde-c2fafb0d1033', null);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_FieldLineItem` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_FieldLineItem`(
-- noformat
	IN pInvoiceId 	int,
	IN pClientId 	int,
	IN pUserId 		varchar(36),
	in pTask 		int
)
BEGIN

	IF (pTask = 8) THEN
		SELECT	DISTINCT
				CASE WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'Department%' THEN 'DepartmentId' 
				ELSE InvoiceAttribute.InvoiceAttributeName END 																				AS AttributeName,
				COALESCE(ClientInvoiceAttribute.DisplayName, InvoiceAttribute.DefaultDisplayName, InvoiceAttribute.InvoiceAttributeName) 	AS DisplayName
		FROM	ClientInvoiceAttribute
				INNER JOIN InvoiceAttribute			ON ClientInvoiceAttribute.InvoiceAttributeID = InvoiceAttribute.InvoiceAttributeID
		WHERE	ClientInvoiceAttribute.ClientID = pClientId
				AND ClientInvoiceAttribute.Task = pTask
				AND ClientInvoiceAttribute.IsHiddenByDefault IS NULL
		ORDER	BY ClientInvoiceAttribute.OrderNo ASC;

	ELSE
		SELECT	DISTINCT
				CASE	WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'Department%' THEN 'DepartmentId' 
						WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'ItemNo%' THEN 'ItemNumber' 
						WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'UnitPrice%' THEN 'UnitCost' 
						WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'TotalAmount%' THEN 'Amount' 
						WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'ProductId%' THEN 'VendorCatNumber' 
						WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'DeliveryNumber%' THEN 'PRNumber' 
						ELSE InvoiceAttribute.InvoiceAttributeName END 																		AS AttributeName,
				COALESCE(ClientInvoiceAttribute.DisplayName, InvoiceAttribute.DefaultDisplayName, InvoiceAttribute.InvoiceAttributeName) 	AS DisplayName
		FROM	ClientInvoiceAttribute
				INNER JOIN InvoiceAttribute			ON ClientInvoiceAttribute.InvoiceAttributeID = InvoiceAttribute.InvoiceAttributeID
		WHERE	ClientInvoiceAttribute.ClientID = pClientId
				AND ClientInvoiceAttribute.Task = pTask
				AND ClientInvoiceAttribute.IsHiddenByDefault IS NULL
		ORDER BY ClientInvoiceAttribute.OrderNo ASC;

	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_FieldPopulate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_FieldPopulate`(IN `pType` VARCHAR(20),IN `pClientId` INT,IN `pValue` VARCHAR(1000),IN `pKeyword` VARCHAR(50), pUserId char(36))
BEGIN
	declare dLimitResults int default 25;

	if pKeyword = '**(ExpenseSMART)**' THEN		-- Hardcoded to get all approvers to send to ExpenseSmart
		set dLimitResults = 9999;
		set pKeyword = null;
	end if;

	set @CodePosition = 2;
	Call _x_GetClientParam(pClientId, 'CodePosition', @CodePosition);


	set pKeyword = ifnull(pKeyword, '');
	set @OriginalKeyword = pKeyword;
	CALL _x_StringToRegEx(pKeyword);

	IF (pType = 'accountcode') THEN
		if exists (select 1 from ClientSpecificConfig  where ClientId = pClientId and ClientSpecificConfigType = 150) THEN
			SELECT 	GLCodeName 																					AS TypeId,
					_x_GetFormatedValue(GLCodeName, Desccription, @CodePosition)								as TypeName
			FROM	GLCode
			WHERE	ClientId = pClientId
					and IsActive = 1
					and Regexp_Like(concat(ifnull(GLCodeName, ''), '', ifnull(Desccription, '')), pKeyword, 'mi')
			order by 2
			limit dLimitResults;
		else
			SELECT 	OrgId																		AS TypeId,
					_x_GetFormatedValue(OrgId, OrgName, @CodePosition)							as TypeName
			FROM	OrgData
			WHERE	ClientId = pClientId
					and IsActive = 1
					and Regexp_Like(concat(ifnull(OrgId, ''), '', ifnull(OrgName, '')), pKeyword, 'mi')
			order by 2
			limit dLimitResults;
		end if;
	elseIF (pType = 'vendor') THEN
		SELECT 	VendorId 																		AS TypeId,
				_x_GetFormatedValue(Vendor.VendorNo, Vendor.VendorName, @CodePosition)			as TypeName
		FROM	Vendor
		WHERE	ClientId = pClientId
				and IsActive = 1
				and Regexp_Like(concat(ifnull(VendorNo, ''), '', ifnull(VendorName, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;
	ELSEIF (pType = 'glcode') THEN 	
		set dLimitResults = dLimitResults * 2;
		set @RestrictGLCodes = 0;
		set @Mask = '%';
		set @MaskRequired = 'No';
		-- Check if the user has GLCode restrictions, if so, assum this codes are the only one he can search on and ignore the mask
		if (select 1 from ApproverGLCode where UserId = pUserId limit 1) then 
			set @RestrictGLCodes = 1;
		else
			if pValue is not null then
				call _x_GetClientParam(pClientId, 'GLCodeMaskRequired', @MaskRequired);
				call _x_GetGLMask(pValue, @Mask);
			end if;
		end if;

		SELECT 	GLCodeId 																					AS TypeId,
				concat(																					
							Case 	when @MaskRequired = 'Yes' then ''
									when @Mask like '%\%%' then ''
									else case when GLCodeName like @Mask then '*' else '' end end,  
							_x_GetFormatedValue(GLCodeName, Desccription, @CodePosition)
						) 																					as TypeName,
				Case when GLCodeName like @Mask then 1 else 99 end 											as DisplayPriority
		FROM	GLCode
		WHERE	ClientId = pClientId
				and IsActive = 1
				and (
						(@MaskRequired = 'Yes' and Case when GLCodeName like @Mask then 1 else 99 end = 1)
						or @MaskRequired = 'No'
					)
				and Regexp_Like(concat(ifnull(GLCodeName, ''), '', ifnull(Desccription, '')), pKeyword, 'mi')
				and 
					(
						@RestrictGLCodes = 0
						or @RestrictGLCodes = 1 and exists (select 1 from ApproverGLCode Allow where Allow.UserId = pUserId and Allow.GLCodeId = GLCode.GLCodeId)
					)
		order by DisplayPriority, 2
		limit dLimitResults;		
	ELSEIF (pType = 'clientlocation') THEN
		SELECT 	ClientLocationId 										AS TypeId,
				ContactName												as TypeName
		FROM	ClientLocation
		WHERE	ClientId = pClientId
				and IsActive = 1
				and Regexp_Like(ContactName, pKeyword, 'mi')
		order by 2
		limit dLimitResults;
					
	ELSEIF (pType = 'department') THEN 	
		SELECT 	Id 																	AS TypeId,
				_x_GetFormatedValue(DepartmentName, Description, @CodePosition)		as TypeName
		FROM	Department
		WHERE	ClientId = pClientId
				and IsActive = 1
				and Regexp_Like(concat(ifnull(DepartmentName, ''), '', ifnull(Description, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;				
	ELSEIF (pType = 'project') THEN 	
		SELECT 	Id 																	AS TypeId,
				_x_GetFormatedValue(ProjectName, Description, @CodePosition)		as TypeName
		FROM	ProjectType
		WHERE	ClientId = pClientId
				and IsActive = 1
				and Regexp_Like(concat(ifnull(ProjectName, ''), '', ifnull(Description, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;			
	ELSEIF (pType = 'subproject') THEN 	
		SELECT 	Id 																				AS TypeId,
				_x_GetFormatedValue(SubProjectName, SubProjectDescription, @CodePosition)		as TypeName
		FROM	SubProjectType
		WHERE	ClientId = pClientId
				and IsActive = 1
				and Regexp_Like(concat(ifnull(SubProjectName, ''), '', ifnull(SubProjectDescription, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;	
	ELSEIF (pType = 'company') THEN 	
		SELECT 	Id 																		AS TypeId,
				_x_GetFormatedValue(CompanyCode, Description, @CodePosition)			as TypeName
		FROM	ClientCompany
		WHERE	ClientId = pClientId
				and IsActive = 1
				and Regexp_Like(concat(ifnull(CompanyCode, ''), '', ifnull(Description, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;		
	ELSEIF (pType = 'org') THEN 	
		SELECT 	Id 																AS TypeId,
				_x_GetFormatedValue(OrgId, OrgName, @CodePosition)				as TypeName
		FROM	OrgData
		WHERE	ClientId = pClientId
				and IsActive = 1
				and Regexp_Like(concat(ifnull(OrgId, ''), '', ifnull(OrgName, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;
	ELSEIF (pType = 'ponumber') THEN
		set @SplitChar = null;
		set @PONumber = '';
		set @VendorId = -1;

		select	SplitterCharacter 	into	@SplitChar 	from ClientPONumberSplitter 	where ClientId = pClientId;
		select	PONumber, VendorId				
		into	@PONumber, @VendorId
		from	Invoice i					
		where	InvoiceId = pValue;

		set @SplitChar = ifnull(@SplitChar, '|');
		set @PONumber 	= ifnull(@PONumber, '');
		
		drop TEMPORARY TABLE IF EXISTS Results;
		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS (
			SELECT
					PONumber 																	AS TypeId,
					CONCAT(PONumber, " [Items: ", COUNT(DISTINCT ifnull(ItemNumber, '')) ,"]") 	AS TypeName
			FROM PO
			WHERE	ClientId = pClientId 
					and VendorId = @VendorId
					and Regexp_Like(PONumber, pKeyword, 'mi')
			GROUP 	BY PONumber
			order	by 2
			LIMIT 	dLimitResults
			);
	
		if not exists (select 1 from Results) THEN
			insert into Results values (@OriginalKeyword, CONCAT(@OriginalKeyword, ' [Items: 0]'));
		end if;

		select * from Results order by 2;
	ELSEIF (pType = 'QCSiteName') THEN
		drop TEMPORARY TABLE IF EXISTS Results;
		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS (
			SELECT	DISTINCT 
					UserIdCard 			AS TypeId,
					UserIdCard		 	AS TypeName
			FROM 	User
			WHERE	IsCloudxUser = 1 
					AND NOT UserIdCard LIKE '%@%'
					and nullif(UserIdCard, '') is not NULL
					and Regexp_Like(UserIdCard, pKeyword, 'mi')
			GROUP 	BY UserIdCard
			order	by 2
			);
	
		if not exists (select 1 from Results) THEN
			insert into Results values (@OriginalKeyword, concat(@OriginalKeyword, ' (new site)'));
		end if;

		select * from Results order by 2;

	ELSEIF (pType = 'customer') THEN 	
		SELECT 	CustomerId 		AS TypeId,
				CustomerName 	AS TypeName
		FROM	Customer
		WHERE	ClientId = pClientId	
				and IsDeleted = 0		
				and Regexp_Like(concat(ifnull(CustomerNo, ''), '', ifnull(CustomerName, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;	
	ELSEIF (pType = 'usermail') THEN 	
		drop TEMPORARY TABLE IF EXISTS Results;
		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS (
			SELECT 	Email 															AS TypeId,
					COALESCE (CONCAT(FirstName, ' ', LastName, ' (', Email, ')')) 	AS TypeName
			FROM	User
			WHERE	ClientId = pClientId
					and IsActive = 1
					and IsCloudxUser = 0
					and email like '%@%.%'
					and Regexp_Like(concat(ifnull(LastName, ''), ' ', ifnull(FirstName, ''), ' ', email), pKeyword, 'mi')
			order by 2
			limit dLimitResults
			);
	
		if not exists (select 1 from Results) then
			if @OriginalKeyword like '%support%' then
				insert into Results values ('support@cloudxdpo.com', 'APSMART support (support@cloudxdpo.com)');
			elseif @OriginalKeyword like '%@%.%' then
				insert into Results values (@OriginalKeyword, concat(@OriginalKeyword, ' (', @OriginalKeyword, ')'));
			end if;
		end if;

		select * from Results order by 2;
	ELSEIF (pType = 'user') THEN 	
		SELECT 	UserId 													AS TypeId,
				COALESCE (CONCAT(LastName, ', ', FirstName), UserName) 	AS TypeName
		FROM	User
		WHERE	ClientId = pClientId
				and IsActive = 1
				and IsCloudxUser = 0
				and Regexp_Like(concat(ifnull(LastName, ''), ' ', ifnull(FirstName, ''), ' ', ifnull(UserName, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;
	ELSEIF (pType = 'user2') THEN 	
		SELECT 	UserId 													AS TypeId,
				UserName 	AS TypeName
		FROM	User
		WHERE	ClientId = pClientId
				and IsActive = 1
				and IsCloudxUser = 0
				and Regexp_Like(concat(ifnull(LastName, ''), ' ', ifnull(FirstName, ''), ' ', ifnull(UserName, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;
	ELSEIF (pType = 'approver') THEN 	
		SELECT 	UserId 													AS TypeId,
				CONCAT(LastName, ', ', FirstName) 						AS TypeName
		FROM	User
		WHERE	ClientId = pClientId
				and IsActive = 1
				and IsCloudxUser = 0
				and Regexp_Like(concat(ifnull(LastName, ''), ' ', ifnull(FirstName, ''), ' ', ifnull(UserName, ' ')), pKeyword, 'mi')
				and exists (
								SELECT	1
								FROM	ClientUserRoles cur
										INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
										INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
								WHERE	cur.UserId = User.UserId
										and crf.FunctionKey = 'InvoiceApprove'
										and crf.Access = 1
								limit 1
							)													
		order by 2
		limit dLimitResults;	
	ELSEIF (pType = 'Auditor') THEN 	
		SELECT 	UserId 													AS TypeId,
				CONCAT(LastName, ', ', FirstName) 						AS TypeName
		FROM	User
		WHERE	ClientId = pClientId
				and IsActive = 1
				and IsCloudxUser = 0
				and Regexp_Like(concat(ifnull(LastName, ''), ' ', ifnull(FirstName, ''), ' ', ifnull(UserName, ' ')), pKeyword, 'mi')
				and exists (
								SELECT	1
								FROM	ClientUserRoles cur
										INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
										INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
								WHERE	cur.UserId = User.UserId
										and crf.FunctionKey = 'InvoiceAuditor'
										and crf.Access = 1
								limit 1
							)													
		order by 2
		limit dLimitResults;
	ELSEIF (pType = 'ehandler') THEN 	
		SELECT 	User.UserId 									AS TypeId,
				CONCAT(LastName, ', ', FirstName) 				AS TypeName
		FROM	User
				JOIN	_x_UserParameters ON User.UserId = _x_UserParameters.UserId
		WHERE	ClientId = pClientId
				and IsActive = 1
				and IsCloudxUser = 0
				and _x_UserParameters.IsExceptionHandler = 1
				and Regexp_Like(concat(ifnull(LastName, ''), '', ifnull(FirstName, ''), '', ifnull(UserName, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;	
	ELSEIF (pType = 'accounting') THEN 	
		SELECT 	Id 								AS TypeId,
				AccountingVariablesName 		AS TypeName
		FROM	AccountingVariable
		WHERE	ClientId = pClientId				
				and Regexp_Like(AccountingVariablesName, pKeyword, 'mi')
		order by 2
		limit dLimitResults;		
	ELSEIF (pType = 'category1') THEN 
		SELECT 	Id 								AS TypeId,
				CategoryName 					AS TypeName
		FROM	Category
		WHERE	ClientId = pClientId				
				AND ifnull(CategoryType, 0) = 0
				and Regexp_Like(concat(ifnull(GLCodeName, ''), '', ifnull(Desccription, '')), pKeyword, 'mi')
				and (	
						(
							CategoryName LIKE CONCAT('%', pKeyword, '%')								
						) 
					)
		order by 2
		limit dLimitResults;	
	ELSEIF (pType = 'category2') THEN 
		SELECT 	Id 								AS TypeId,
				CategoryName 					AS TypeName
		FROM	Category
		WHERE	ClientId = pClientId				
				AND CategoryType = 1
				and Regexp_Like(CategoryName, pKeyword, 'mi')
		order by 2
		limit dLimitResults;	
	ELSEIF (pType = 'subcategory') THEN 
		SELECT 	SubCategrory.Id 																		AS TypeId,
				_x_GetFormatedValue(SubCategrory.Code, SubCategrory.Description, @CodePosition)			as TypeName
		FROM	SubCategrory
				inner join Category c ON SubCategrory.CategoryId = c.Id
											and CategoryType = 0
		WHERE	ClientId = pClientId				
				and Regexp_Like(concat(ifnull(SubCategrory.Code, ''), '', ifnull(SubCategrory.Description, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;	
	ELSEIF (pType = 'types') THEN 
		SELECT 	InvoiceTypeName 		AS TypeId,
				InvoiceTypeName 		AS TypeName
		FROM	ClientInvoiceType
		WHERE	ClientId = pClientId				
				and Regexp_Like(InvoiceTypeName, pKeyword, 'mi')
		order by 2
		limit dLimitResults;	
	ELSEIF (pType = 'tax') THEN 
		SELECT 	Id 						AS TypeId,
				TaxCode 				AS TypeName
		FROM	Tax
		WHERE	ClientId = pClientId				
				and Regexp_Like(TaxCode, pKeyword, 'mi')
		order by 2
		limit dLimitResults;	
	ELSEIF (pType = 'class') THEN 
		SELECT 	Id 						AS TypeId,
				NSClass 				AS TypeName
		FROM	NSClass
		WHERE	ClientId = pClientId	
				and IsActive = 1			
				and Regexp_Like(NSClass, pKeyword, 'mi')
		order by 2
		limit dLimitResults;	
	ELSEIF (pType = 'nsdepartment') THEN 
		SELECT 	Id 																				AS TypeId,
				_x_GetFormatedValue(NSDepartmentName, Description, @CodePosition)				as TypeName
		FROM	NSDepartment n
		WHERE	ClientId = pClientId	
				and IsActive = 1			
				and Regexp_Like(concat(ifnull(NSDepartmentName, ''), '', ifnull(Description, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;
	ELSEIF (pType = 'role') THEN 
		SELECT 	RoleId 			AS TypeId,
				RoleName 		AS TypeName
		FROM	ClientRoles 
		WHERE	ClientId = pClientId	
				and isInternal = 0			
				and Regexp_Like(RoleName, pKeyword, 'mi')
		order by 2
		limit dLimitResults;
	ELSEIF (pType = 'state') THEN 
		SELECT 	StateId 																	AS TypeId,
				_x_GetFormatedValue(StateNameShort, StateName, @CodePosition)				as TypeName
		FROM	State 
		where 	Regexp_Like(concat(ifnull(StateNameShort, ''), '', ifnull(StateName, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;
	ELSEIF (pType = 'freightcode') THEN 
		SELECT 	FreightCodeId 														AS TypeId,
				_x_GetFormatedValue(Code, Description, @CodePosition)				as TypeName
		FROM	FreightCodes 
		WHERE	ClientId = pClientId	
				and isActive = 1
				and Regexp_Like(concat(ifnull(Code, ''), '', ifnull(Description, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;
	ELSEIF (pType = 'shippingterm') THEN 
		SELECT 	ShippingTermId 												AS TypeId,
				_x_GetFormatedValue(Code, Description, @CodePosition)		as TypeName
		FROM	ShippingTerms 
		WHERE	ClientId = pClientId	
				and isActive = 1
				and Regexp_Like(concat(ifnull(Code, ''), '', ifnull(Description, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;
	ELSEIF (pType = 'item') THEN 
		SELECT 	ItemId 															AS TypeId,
				_x_GetFormatedValue(ItemNo, ItemDescription, @CodePosition)		as TypeName
		FROM	Item 
		WHERE	ClientId = pClientId	
				and isActive = 1
				and Regexp_Like(concat(ifnull(ItemNo, ''), '', ifnull(ItemDescription, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;

	ELSEIF (pType = 'customerlocation') THEN 
		SELECT 	CustomerLocationId 																AS TypeId,
				_x_GetFormatedValue(LocationNumber, LocationName, @CodePosition)				as TypeName
		FROM	CustomerLocation cl 
				inner JOIN Customer ON cl.CustomerId = Customer.CustomerId
		WHERE	Customer.ClientId = pClientId	
				and cl.isActive = 1
				and Customer.IsDeleted = 0
				and Regexp_Like(concat(ifnull(LocationNumber, ''), '', ifnull(LocationName, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;
	ELSEIF (pType = 'ArchiveReason') THEN 

		set @ArchiveReasonSource = 'Data';
		set @ArchiveReasonAllowAny = 'Yes';
		Call _x_GetClientParam(pClientId, 'ArchiveReasonSource', @ArchiveReasonSource);
		Call _x_GetClientParam(pClientId, 'ArchiveReasonAllowAny', @ArchiveReasonAllowAny);

		if @ArchiveReasonSource = 'Data' then
			drop TEMPORARY TABLE IF EXISTS Results;
			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS (
				SELECT 	ArchiveReason			AS TypeId,
						ArchiveReason 			AS TypeName
				FROM	InvoiceArchiveReason 
				WHERE	ClientId = pClientId	
						and Regexp_Like(ArchiveReason, pKeyword, 'mi')
				order by TotalCount desc, 2
				limit dLimitResults
				);
		else
			drop TEMPORARY TABLE IF EXISTS Results;
			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS (
				SELECT 	ArchiveReason			AS TypeId,
						ArchiveReason 			AS TypeName
				FROM	ArchiveReason 
				WHERE	ClientId = pClientId	
						and Regexp_Like(ArchiveReason, pKeyword, 'mi')
				order by ArchiveReason
				limit dLimitResults
				);
		end if;	
		if not exists (select 1 from Results) and @ArchiveReasonAllowAny = 'Yes' THEN
			insert into Results values (@OriginalKeyword, @OriginalKeyword);
		end if;

		select * from Results order by 2;


	ELSEIF (pType = 'employeetype') THEN 
		SELECT 	EmployeeTypeId 				AS TypeId,
				TypeName 					AS TypeName
		FROM	ClientEmployeeType  				
		WHERE	ClientId = pClientId	
				and isActive = 1				
				and Regexp_Like(TypeName, pKeyword, 'mi')
		order by 2
		limit dLimitResults;
	END IF;

/*

call _x_FieldPopulate ('GLCode', 88, 'InvoiceId■660800804■Department■34350', ''); -- 34350, 34352, 34352
call _x_FieldPopulate ('Vendor', 88, 'InvoiceId■660800804■Department■34350', ''); -- 34350, 34352, 34352
call _x_FieldPopulate ('GLCode', 1, 'InvoiceId■663169335', ''); 
call _x_FieldPopulate ('ArchiveReason', 88, '', '');

call _x_FieldPopulate('glcode',86,'InvoiceId■663264710■Department■30178■AccountingV1■170■',null);

*/

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_GetClientParam` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_GetClientParam`(IN pClientId int, IN pParamKey varchar(100), inout pParamValue text)
ThisProc:
	BEGIN
	-- noformat

	SELECT	ParamValue
	into 	pParamValue
	FROM 	_x_ClientParameters
	WHERE 	ClientId = pClientId
			and ParamKey = pParamKey;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_GetGLMask` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_GetGLMask`(in pGLCodeValues varchar(1000), inout pMask varchar(1000))
ThisProc:
	BEGIN	
-- noformat
	DECLARE done int DEFAULT FALSE;
	DECLARE DataValue mediumtext;
	DECLARE curParms CURSOR FOR SELECT * FROM tSearchList;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

	set @ClientId 				= null;
	set @InvoiceId 				= null;
	set @Department				= null;
	set @VendorSiteId 			= null;
	set @AccountingV1			= null;

	set @OrgId					= null;
	set @Data 					= null;

	-- Break up the Data passed into the following order
	CALL _x_StringToRows(pGLCodeValues, '■');
	IF MOD((SELECT COUNT(*) FROM tSearchList), 2) <> 0 THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Improperly coded string; Parameters not paired.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;	

	OPEN curParms;
readParms:
	LOOP
		FETCH curParms INTO DataValue;
		IF done THEN
			LEAVE readParms;
		END IF;
		IF DataValue = 'InvoiceId' THEN
			FETCH curParms INTO DataValue;
			SET @InvoiceId = nullif(DataValue, '(null)');
		ELSEIF DataValue = 'Department' THEN
			FETCH curParms INTO DataValue;
			SET @Department = nullif(DataValue, '(null)');
		ELSEIF DataValue = 'AccountingV1' THEN
			FETCH curParms INTO DataValue;
			SET @AccountingV1 = nullif(DataValue, '(null)');
		ELSE
			SET @ErrMsg = CONCAT('Improperly coded string; Unknown keyword [', DataValue, '].');
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @ErrMsg, MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;
		IF done THEN
			LEAVE readParms;
		END IF;	
	END LOOP;
	CLOSE curParms;



	select 	ClientId, OrgId, VendorSiteId
	into 	@ClientId, @OrgId, @VendorSiteId
	from	Invoice 
	where 	InvoiceId = @InvoiceId;

	
	call _x_GetClientParam(@ClientId, 'GLCodeMask', pMask);


	set @PlaceHolder = '[OrgId]';
	if pMask like concat('%',@PlaceHolder,'%') THEN
		set @Data = null;
		select 	OrgId 
		into 	@Data
		from 	OrgData Data
		where 	Data.ClientId = @ClientId
				and Id = @OrgId;
		set @Data = ifnull(@Data, '%');
		set pMask = REPLACE(pMask, @PlaceHolder, @Data);
	end if;



	set @PlaceHolder = '[VendorSiteId]';
	if pMask like concat('%',@PlaceHolder,'%') THEN
		set @Data = null;
		select 	DepartmentName
		into 	@Data
		from 	Department Data
		where 	Data.ClientId = @ClientId
				and Id = @VendorSiteId;
		set @Data = ifnull(@Data, '%');
		set pMask = REPLACE(pMask, @PlaceHolder, @Data);
	end if;




	set @PlaceHolder = '[DepartmentName]';
	if pMask like concat('%',@PlaceHolder,'%') THEN
		set @Data = null;
		select 	DepartmentName 
		into 	@Data
		from 	Department Data
		where 	Data.ClientId = @ClientId
				and Id = @Department;
		set @Data = ifnull(@Data, '%');
		set pMask = REPLACE(pMask, @PlaceHolder, @Data);
	end if;


	-- This regex will work but crashes when executed in this version
	-- select Regexp_Replace('___[Steven][Penning]___[Was]_[Here]_', '(?)\[.+?\]/gmi', '%');


/*
call _x_GetGLMask ('InvoiceId■661211029■Department■34352■', @Mask); -- 34350, 34352, 34352
select  @Mask;

*/

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_GetInvoiceReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_GetInvoiceReport`(
    IN isPOInvoice BOOLEAN,
    IN scannedDateFrom DATE,
    IN scannedDateTo DATE,
    IN invoiceDateFrom DATE,
    IN invoiceDateTo DATE,
    IN lastActionDateFrom DATE,
    IN lastActionDateTo DATE,
    IN paymentDueDateFrom DATE,
    IN paymentDueDateTo DATE,
    IN invoiceStatuses VARCHAR(255),
    IN documentTypes VARCHAR(255),
    IN billingMonth VARCHAR(20),
    IN billingYear INT,
    IN approvers VARCHAR(1000),
    IN step INT,
    IN vendorSiteIds VARCHAR(1000),
    IN clientCompanyIds VARCHAR(1000),
    IN vendors VARCHAR(1000),
    IN clientId INT,
    IN userField3 VARCHAR(255),
    IN userField4 VARCHAR(255),
    IN isPaused BOOLEAN,
    IN isBilling BOOLEAN,
    IN VoucherNumber VARCHAR(100)
)
BEGIN
    -- Temporary tables to hold split IDs
    DROP TEMPORARY TABLE IF EXISTS TempVendorSiteIds;
    CREATE TEMPORARY TABLE TempVendorSiteIds (Id INT);
    IF vendorSiteIds IS NOT NULL THEN
        SET @sql = CONCAT("INSERT INTO TempVendorSiteIds (Id) VALUES ", 
                          REPLACE(REPLACE(vendorSiteIds, ',', '),('), '(', ''), '(');
        PREPARE stmt FROM @sql;
        EXECUTE stmt;
        DEALLOCATE PREPARE stmt;
    END IF;

    DROP TEMPORARY TABLE IF EXISTS TempClientCompanyIds;
    CREATE TEMPORARY TABLE TempClientCompanyIds (Code VARCHAR(50));
    IF clientCompanyIds IS NOT NULL THEN
        SET @sql = CONCAT("INSERT INTO TempClientCompanyIds (Code) VALUES ",
                          REPLACE(REPLACE(clientCompanyIds, ',', '),('), '(', ''), '(');
        PREPARE stmt FROM @sql;
        EXECUTE stmt;
        DEALLOCATE PREPARE stmt;
    END IF;

    -- Query main data
    SELECT 
        i.InvoiceId,
        i.InvoiceDate,
        i.ScannedDate,
        i.LastActionDate,
        i.PaymentDueDate,
        v.VendorName,
        i.InvoiceType,
        i.ApprovalStatusId,
        i.VoucherNumber,
        i.UserField3,
        i.UserField4,
        d.DepartmentName,
        gl.GLCodeName,
        gl.Desccription AS GLDescription,
        
        GROUP_CONCAT(DISTINCT lid.RecievedTransactionId) AS ReceiverId
    FROM Invoice i
    LEFT JOIN Vendor v ON i.VendorId = v.VendorId
    LEFT JOIN Department d ON i.VendorSiteId = d.Id
    LEFT JOIN GLCode gl ON v.DefaultGlCodeId = gl.GLCodeId
    LEFT JOIN LineItemDetail lid ON lid.InvoiceId = i.InvoiceId
    LEFT JOIN Department dep ON dep.ClientId = i.ClientId AND dep.Id = i.VendorSiteId AND dep.IsActive = TRUE
    WHERE 
        i.ClientId = clientId
        AND (isPOInvoice IS NULL OR i.IsPOInvoice = isPOInvoice)
        AND (scannedDateFrom IS NULL OR i.ScannedDate >= scannedDateFrom)
        AND (scannedDateTo IS NULL OR i.ScannedDate <= scannedDateTo)
        AND (invoiceDateFrom IS NULL OR i.InvoiceDate >= invoiceDateFrom)
        AND (invoiceDateTo IS NULL OR i.InvoiceDate <= invoiceDateTo)
        AND (lastActionDateFrom IS NULL OR i.LastActionDate >= lastActionDateFrom)
        AND (lastActionDateTo IS NULL OR i.LastActionDate <= lastActionDateTo)
        AND (paymentDueDateFrom IS NULL OR i.PaymentDueDate >= paymentDueDateFrom)
        AND (paymentDueDateTo IS NULL OR i.PaymentDueDate <= paymentDueDateTo)
        AND (invoiceStatuses IS NULL OR FIND_IN_SET(i.ApprovalStatusId, invoiceStatuses))
        AND (documentTypes IS NULL OR FIND_IN_SET(i.InvoiceType, documentTypes))
        AND (approvers IS NULL OR FIND_IN_SET(i.ApproverId, approvers))
        AND (step IS NULL OR EXISTS (
            SELECT 1 FROM UserInvoiceAssignment uia WHERE uia.InvoiceId = i.InvoiceId AND uia.ApprovalSubStepId = step
        ))
        AND (vendorSiteIds IS NULL OR EXISTS (
            SELECT 1 FROM TempVendorSiteIds tv WHERE tv.Id = i.VendorSiteId
        ))
        AND (clientCompanyIds IS NULL OR EXISTS (
            SELECT 1 FROM TempClientCompanyIds tc WHERE tc.Code = i.CompanyCode
        ))
        AND (vendors IS NULL OR FIND_IN_SET(i.VendorId, vendors))
        AND (userField3 IS NULL OR i.UserField3 LIKE CONCAT('%', userField3, '%'))
        AND (userField4 IS NULL OR i.UserField4 LIKE CONCAT('%', userField4, '%'))
        AND (VoucherNumber IS NULL OR i.VoucherNumber LIKE CONCAT('%', VoucherNumber, '%'))
    GROUP BY i.InvoiceId;

    -- Drop temporary tables
    DROP TEMPORARY TABLE IF EXISTS TempVendorSiteIds;
    DROP TEMPORARY TABLE IF EXISTS TempClientCompanyIds;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_GLDataById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_GLDataById`(IN pInvoiceId int, in pSource varchar(100))
BEGIN
-- noformat
	set @ClientId = 0;
	set @VendorId = 0;
	set @InvoiceTotal = 0;
	
	select InvoiceTotal, VendorId, ClientId
	into @InvoiceTotal, @VendorId, @ClientId
	from Invoice 
	where InvoiceId = pInvoiceId;


	set @CodePosition = 2;
	Call _x_GetClientParam(@ClientId, 'CodePosition', @CodePosition);

	drop temporary table if exists myGLData;

	CREATE TEMPORARY TABLE IF NOT EXISTS myGLData as (
		SELECT
				Data.ID 																													AS Id,
				GLCode.GLCodeId 																											AS `GLCode`,
	
				case	when @CodePosition = 1 THEN
							concat("[", IFNULL(GLCode.GLCodeName, ""), "] ", IFNULL(GLCode.Desccription, ""))
						when @CodePosition = 2 THEN
							concat(IFNULL(GLCode.Desccription, ""), " [", IFNULL(GLCode.GLCodeName, ""), "]")
						else
							IFNULL(GLCode.Desccription, IFNULL(GLCode.GLCodeName, "")) end 													as GLCodeName,
				Department.Id 																												AS `Department`,
	
				case	when @CodePosition = 1 THEN
							concat(IFNULL(Department.DepartmentName, ""), " [", IFNULL(Department.Description, ""), "]")
						when @CodePosition = 2 THEN
							concat(IFNULL(Department.Description, ""), " [", IFNULL(Department.DepartmentName, ""), "]")
						else
							IFNULL(Department.Description, IFNULL(Department.DepartmentName, "")) end										as DepartmentName,
				ProjectType.Id 																												AS Project,
	
				case	when @CodePosition = 1 THEN
							concat("[", IFNULL(ProjectType.ProjectName, ""), "] ", IFNULL(Vendor.VendorName, ""))
						when @CodePosition = 2 THEN
							concat(IFNULL(Vendor.VendorName, ""), " [", IFNULL(ProjectName, ""), "]")
						else
							IFNULL(ProjectType.Description, IFNULL(ProjectType.ProjectName, "")) end										as ProjectName,
				SubProjectType.Id 																											AS SubProject,
	
	
				case	when @CodePosition = 1 THEN
							concat("[", IFNULL(SubProjectType.SubProjectName, ""), "] ", IFNULL(SubProjectType.SubProjectDescription, ""))
						when @CodePosition = 2 THEN
							concat(IFNULL(SubProjectType.SubProjectDescription, ""), " [", IFNULL(SubProjectType.SubProjectName, ""), "]")
						else
							IFNULL(SubProjectType.SubProjectDescription, IFNULL(SubProjectType.SubProjectName, "")) end						as SubProjectName,
				Vendor.VendorId 																											AS `Vendor`,
	
				case	when @CodePosition = 1 THEN
							concat("[", IFNULL(Vendor.VendorNo, ""), "] ", IFNULL(Vendor.VendorName, "")) 
						when @CodePosition = 2 THEN
							concat(IFNULL(Vendor.VendorName, ""), " [", IFNULL(Vendor.VendorNo, ""), "]")
						else
							IFNULL(Vendor.VendorName, IFNULL(Vendor.VendorNo, "")) end 														as VendorName,
				ClientCompany.Id 																											AS Company,
	
				case	when @CodePosition = 1 THEN
							concat("[", IFNULL(ClientCompany.CompanyCode, ""), "] ", IFNULL(ClientCompany.Description, ""))
						when @CodePosition = 2 THEN
							concat(IFNULL(ClientCompany.Description, ""), " [", IFNULL(ClientCompany.CompanyCode, ""), "]")
						else
							IFNULL(ClientCompany.Description, IFNULL(ClientCompany.CompanyCode, "")) end									as CompanyName,
				OrgData.Id 																													AS Org,
	
				case	when @CodePosition = 1 THEN
							concat("[", IFNULL(OrgData.OrgId, ""), "] ", IFNULL(OrgData.OrgName, ""))
						when @CodePosition = 2 THEN
							concat(IFNULL(OrgData.OrgName, ""), " [", IFNULL(OrgData.OrgId, ""), "]")
						else
							IFNULL(OrgData.OrgName, IFNULL(OrgData.OrgId, "")) end															as OrgName,
				Customer.CustomerId 																										AS `Customer`,
				Customer.CustomerName,
				Data.AccountingVariable1 																									AS AccountingV1,
				AccV1.AccountingVariablesName 																								AS AccountingV1Name,
				Data.AccountingVariable2 																									AS AccountingV2,
				AccV2.AccountingVariablesName 																								AS AccountingV2Name,
				Data.AccountingVariable3 																									AS AccountingV3,
				AccV3.AccountingVariablesName 																								AS AccountingV3Name,
				Data.AccountingVariable4 																									AS AccountingV4,
				AccV4.AccountingVariablesName 																								AS AccountingV4Name,
				Cat1.Id 																													AS Category1,
				Cat1.CategoryName 																											AS Category1Name,
				Cat2.Id 																													AS Category2,
				Cat2.CategoryName 																											AS Category2Name,
				SubCat1.Id 																													AS SubCategory1,
				case	when @CodePosition = 1 THEN
							concat("[", IFNULL(SubCat1.Code, ""), "] ", IFNULL(SubCat1.Description, ""))
						when @CodePosition = 2 THEN
							concat(IFNULL(SubCat1.Description, ""), " [", IFNULL(SubCat1.Code, ""), "]")
						else
							IFNULL(SubCat1.Description, IFNULL(SubCat1.Code, "")) end														as SubCategory1Name,
				SubCat2.Id 																													AS SubCategory2,
				case	when @CodePosition = 1 THEN
							concat("[", IFNULL(SubCat2.Code, ""), "] ", IFNULL(SubCat2.Description, ""))
						when @CodePosition = 2 THEN
							concat(IFNULL(SubCat2.Description, ""), " [", IFNULL(SubCat2.Code, ""), "]")
						else
							IFNULL(SubCat2.Description, IFNULL(SubCat2.Code, "")) end														as SubCategory2Name,
				Data.AmountAppoved 																											AS Amount,
				Data.AmountInPercent 																										AS AmountPercent,
				Data.TaxAmount 																												AS TaxAmount,
				Data.SpecialNote
		FROM 
				(	
					select  Id, 
							AccountingVariable1, AccountingVariable2, AccountingVariable3, AccountingVariable4, 
							AmountAppoved, 
							AmountInPercent, 
							TaxAmount, 
							SpecialNote,
							GLCodeId, DepartmentId, ProjectId, SubProjectId, VendorId, CompanyCode, OrgId, CustomerId, Category1, Category2, SubCategory1, SubCategory2
					from 	PendingApprovalHistory
					WHERE	InvoiceId = pInvoiceId
							and  AmountAppoved <> 0
					union all
					select  ApprovalHistoryId, 
							AccountingVariable1, AccountingVariable2, AccountingVariable3, AccountingVariable4, 
							AmountAppoved, 
							AmountInPercent, 
							TaxAmount, 
							SpecialNote,
							GLCodeId, DepartmentId, ProjectId, SubProjectId, VendorId, CompanyCode, OrgId, CustomerId, Category1, Category2, SubCategory1, SubCategory2
					from 	ApprovalHistory
					WHERE	InvoiceId = pInvoiceId
							and  AmountAppoved <> 0
							and not exists (select 1 from PendingApprovalHistory where InvoiceId = pInvoiceId)
					union all
					select  Id, 
							AccountingVariable1, AccountingVariable2, AccountingVariable3, AccountingVariable4, 
							-- Round(@InvoiceTotal * AmountPercent / 100, 2) as Amount, 
							0 as Amount,
							AmountPercent, 
							0, 
							SpecialNote,
							GLCodeId, DepartmentId, ProjectTypeId, SubProjectTypeId, VendorId, ClientCompanyId, OrgId, CustomerId, null, null, null, null
					from 	VendorGlDefault
					WHERE	VendorId = @VendorId
							and AmountPercent <> 0
							and not exists (select 1 from PendingApprovalHistory where InvoiceId = pInvoiceId
											union all select 1 from ApprovalHistory where InvoiceId = pInvoiceId)
				) Data
				LEFT JOIN GLCode	        			ON Data.GLCodeId = GLCode.GLCodeId
				LEFT JOIN Department					ON Data.DepartmentId = Department.Id
				LEFT JOIN ProjectType					ON Data.ProjectId = ProjectType.Id
				LEFT JOIN SubProjectType				ON Data.SubProjectId = SubProjectType.Id
				LEFT JOIN Vendor						ON Data.VendorId = Vendor.VendorId
				LEFT JOIN ClientCompany					ON Data.CompanyCode = ClientCompany.Id
				LEFT JOIN OrgData						ON Data.OrgId = OrgData.Id
				LEFT JOIN Customer						ON Data.CustomerId = Customer.CustomerId
				LEFT JOIN AccountingVariable AccV1		ON Data.AccountingVariable1 = AccV1.Id
				LEFT JOIN AccountingVariable AccV2		ON Data.AccountingVariable2 = AccV2.Id
				LEFT JOIN AccountingVariable AccV3		ON Data.AccountingVariable3 = AccV3.Id
				LEFT JOIN AccountingVariable AccV4		ON Data.AccountingVariable4 = AccV4.Id
				LEFT JOIN Category Cat1					ON Data.Category1 = Cat1.Id
				LEFT JOIN Category Cat2					ON Data.Category2 = Cat2.Id
				LEFT JOIN SubCategrory SubCat1			ON Data.SubCategory1 = SubCat1.Id
				LEFT JOIN SubCategrory SubCat2			ON Data.SubCategory2 = SubCat2.Id
		);

	if ifnull(pSource, '') <> '**(ExpenseSMART)**' then
		select * 
		from myGLData
		Order by 1;
	end if;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_GLDataDelete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_GLDataDelete`(IN `pType` tinyint,
-- noformat
IN `pInvoiceId` int,
IN `pVendorId` int)
BEGIN
 	SET FOREIGN_KEY_CHECKS = 0;

	IF (pType = 0) THEN  /* PArtial save */
		DELETE	FROM PendingApprovalHistory		    WHERE InvoiceId = pInvoiceId;
		DELETE	FROM ApprovalHistory				WHERE InvoiceId = pInvoiceId;
	
	ELSEIF (pType = 1) THEN /* Approved */
		DELETE	FROM PendingApprovalHistory			WHERE InvoiceId = pInvoiceId;
		DELETE	FROM ApprovalHistory				WHERE InvoiceId = pInvoiceId;
	
	ELSEIF (pType = 2) THEN /* Clear */
		DELETE	FROM PendingApprovalHistory			WHERE InvoiceId = pInvoiceId;
		DELETE	FROM ApprovalHistory				WHERE InvoiceId = pInvoiceId;
	
	ELSEif (pType = 3 or pType = 4) then /* GLDefault set and clear */
		DELETE	FROM VendorGlDefault				WHERE VendorId = pVendorId;
	
	END IF;

	SET FOREIGN_KEY_CHECKS = 1;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_GLDataUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_GLDataUpdate`(IN `pType` tinyint,
-- noformat
IN `pApproverId` char(36),
IN `pInvoiceId` int,
IN `pVendorId` int,
IN `pGLCode` int,
IN `pDepartment` int,
IN `pProject` int,
IN `pSubProject` int,
IN `pVendor` int,
IN `pCompany` int,
IN `pOrg` int,
IN `pCustomer` int,
IN `pAccountingV1` int,
IN `pAccountingV2` int,
IN `pAccountingV3` int,
IN `pAccountingV4` int,
IN `pCategory1` int,
IN `pCategory2` int,
IN `pSubCategory1` int,
IN `pSubCategory2` int,
IN `pAmount` decimal(18, 2),
IN `pSpecialNote` varchar(250))
BEGIN

	IF (pType = 0) THEN  /* PArtial save */
		INSERT INTO PendingApprovalHistory (InvoiceId, ApproverId, GLCodeType, GLCodeId, DepartmentId, ProjectId, SubProjectId, VendorId, CompanyCode, OrgId, CustomerId, AccountingVariable1, AccountingVariable2, AccountingVariable3, AccountingVariable4, Category1, Category2, SubCategory1, SubCategory2, AmountAppoved, SpecialNote)
			VALUES (pInvoiceId, pApproverId, 0, pGLCode, pDepartment, pProject, pSubProject, pVendor, pCompany, pOrg, pCustomer, pAccountingV1, pAccountingV2, pAccountingV3, pAccountingV4, pCategory1, pCategory2, pSubCategory1, pSubCategory2, pAmount, pSpecialNote);

	ELSEIF (pType = 1) THEN /* Approved */
		INSERT INTO ApprovalHistory (InvoiceId, ApproverId, StateChangedDate, GLCodeId, DepartmentId, ProjectId, SubProjectId, VendorId, CompanyCode, OrgId, CustomerId, AccountingVariable1, AccountingVariable2, AccountingVariable3, AccountingVariable4, Category1, Category2, SubCategory1, SubCategory2, AmountAppoved, SpecialNote)
			VALUES (pInvoiceId, pApproverId, UTC_TIMESTAMP(), pGLCode, pDepartment, pProject, pSubProject, pVendor, pCompany, pOrg, pCustomer, pAccountingV1, pAccountingV2, pAccountingV3, pAccountingV4, pCategory1, pCategory2, pSubCategory1, pSubCategory2, pAmount, pSpecialNote);
	
	ELSEIF (pType = 2) THEN /* Clear */
		set @Dummy = 0; -- Donothing
	
	ELSEif (pType = 3) then  /* VendorGlDefault set */

		set @InvoiceTotal = 0;
		select InvoiceTotal into @InvoiceTotal from Invoice where InvoiceId = pInvoiceId;
		set @AmountPercent = ( pAmount / @InvoiceTotal * 100);

		INSERT INTO VendorGlDefault (VendorId, GlCodeId, DepartmentId, ProjectTypeId, ClientCompanyId, OrgId, CustomerId, AccountingVariable1, AccountingVariable2, AccountingVariable3, AccountingVariable4, Amount, AmountPercent, SpecialNote)
			VALUES (pVendorId, pGLCode, pDepartment, pProject, pCompany, pOrg, pCustomer, pAccountingV1, pAccountingV2, pAccountingV3, pAccountingV4, pAmount, @AmountPercent, pSpecialNote);
	
	ELSEif (pType = 4) then /* VendorGlDefault clear */
		set @Dummy = 0; -- Donothing
	
	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_GlobalSearch` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_GlobalSearch`(
-- noformat
	IN pUserId 			varchar(36),							-- GlobalSearch■stop
	IN pSearchString 	mediumtext,								-- InvoiceNo■12335■InvoiceAmount2■45000		
	IN pRows 			int,									-- 10
	IN pPage 			int)
ThisProc:
	BEGIN
-- noformat	
		DECLARE done int DEFAULT FALSE;
		DECLARE DataValue mediumtext;
		DECLARE curParms CURSOR FOR SELECT * FROM tSearchList;
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

		if pPage <= 1 and pRows >= 500 then
			call _x_UserActivity(pUserId, 'Export All:GlobalSearch', pSearchString);
		else
			call _x_UserActivity(pUserId, 'GlobalSearch', concat(pSearchString, ' /Page:', pPage));
		end if;


		SET @isGlobalSearch = FALSE;
		SET @MyInvoices = FALSE;
		SET @GlobalSearch = NULL;
		SET @InvoiceNo = NULL;
		SET @Vendor = NULL;
		SET @InvoiceAmount1 = NULL;
		SET @InvoiceAmount2 = NULL;
		SET @InvoiceType = NULL;
		SET @PONumber = NULL;
		SET @InvoiceDate1 = NULL;
		SET @InvoiceDate2 = NULL;
		SET @ScanDate1 = NULL;
		SET @ScanDate2 = NULL;
		SET @LastActionDate1 = NULL;
		SET @LastActionDate2 = NULL;
		SET @Comment = NULL;
		SET @Status = NULL;
		SET @Department = NULL;
		SET @CompanyCode = NULL;
		set @POorNonPO = NULL;
		SET @OnHold = NULL;
		set @CheckNumber = null;
		set @isConfidential = NULL;
		set @GLCode = null;

		-- Break up the Data passed into the following order
		CALL _x_StringToRows(pSearchString, '■');

		IF MOD((SELECT COUNT(*) FROM tSearchList), 2) <> 0 THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Improperly coded search string; Parameters not paired.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;


		OPEN curParms;
	readParms:
		LOOP
			FETCH curParms INTO DataValue;
			IF done THEN
				LEAVE readParms;
			END IF;
			SET @DataValue = DataValue;
			IF DataValue = 'GlobalSearch' THEN
				FETCH curParms INTO DataValue;
				SET @GlobalSearch = DataValue;
				Set @InvoiceNo = DataValue;
				set @Vendor = Datavalue;
				set @PONumber = Datavalue;
				SET @isGlobalSearch = TRUE;
			ELSEIF DataValue = 'MyInvoices' THEN
				FETCH curParms INTO DataValue;
				SET @MyInvoices = CASE WHEN DataValue = 'True' THEN 1 ELSE 0 END;
			ELSEIF DataValue = 'InvoiceNo' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceNo = DataValue;
			ELSEIF DataValue = 'Vendor' THEN
				FETCH curParms INTO DataValue;
				SET @Vendor = DataValue;
			ELSEIF DataValue = 'InvoiceAmount1' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceAmount1 = CAST(DataValue AS decimal(18, 2));
			ELSEIF DataValue = 'InvoiceAmount2' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceAmount2 = CAST(DataValue AS decimal(18, 2));
			ELSEIF DataValue = 'InvoiceType' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceType = DataValue;
			ELSEIF DataValue = 'OnHold' THEN
				FETCH curParms INTO DataValue;
				SET @OnHold = DataValue;
			ELSEIF DataValue = 'POorNonPO' THEN
				FETCH curParms INTO DataValue;
				SET @POorNonPO = DataValue;
			ELSEIF DataValue = 'CheckNumber' THEN
				FETCH curParms INTO DataValue;
				SET @CheckNumber = DataValue;
			ELSEIF DataValue = 'isConfidential' THEN
				FETCH curParms INTO DataValue;
				SET @isConfidential = CASE WHEN DataValue = 'True' THEN 1 ELSE 0 END;
			ELSEIF DataValue = 'GLCode' THEN
				FETCH curParms INTO DataValue;
				SET @GLCode = DataValue;
			ELSEIF DataValue = 'PONumber' THEN
				FETCH curParms INTO DataValue;
				SET @PONumber = DataValue;
			ELSEIF DataValue = 'InvoiceDate1' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceDate1 = DATE(DataValue);
			ELSEIF DataValue = 'InvoiceDate2' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceDate2 = DATE(DataValue);
			ELSEIF DataValue = 'ScanDate1' THEN
				FETCH curParms INTO DataValue;
				SET @ScanDate1 = DATE(DataValue);
			ELSEIF DataValue = 'ScanDate2' THEN
				FETCH curParms INTO DataValue;
				SET @ScanDate2 = DATE(DataValue);
			ELSEIF DataValue = 'LastActionDate1' THEN
				FETCH curParms INTO DataValue;
				SET @LastActionDate1 = DATE(DataValue);
			ELSEIF DataValue = 'LastActionDate2' THEN
				FETCH curParms INTO DataValue;
				SET @LastActionDate2 = DATE(DataValue);
			ELSEIF DataValue = 'Comment' THEN
				FETCH curParms INTO DataValue;
				SET @Comment = DataValue;
			ELSEIF DataValue = 'Department' THEN
				FETCH curParms INTO DataValue;
				SET @Department = DataValue;
			ELSEIF DataValue = 'InvoiceStatus' THEN
				FETCH curParms INTO DataValue;
				SET @Status = DataValue;
			ELSEIF DataValue = 'CompanyCode' THEN
				FETCH curParms INTO DataValue;
				SET @CompanyCode = DataValue;
			ELSE
				SET @ErrMsg = CONCAT('Improperly coded search string; Unknown keyword [', DataValue, '].');
				SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @ErrMsg, MYSQL_ERRNO = 1;
				LEAVE ThisProc;
			END IF;

			IF @isGlobalSearch = FALSE THEN
				INSERT INTO SystemAdvanceSearchFieldsUserStats (SearchType, Field, UserId, TotalUsed)
					VALUES ('GlobalSearch', REPLACE(REPLACE(@DataValue, '1', '#'), '2', '#'), pUserId, 1)
				ON DUPLICATE KEY UPDATE TotalUsed = TotalUsed + 1;
			END IF;


		END LOOP;
		CLOSE curParms;

		SELECT ClientId INTO @ClientId FROM User WHERE UserId = pUserId;


		set @SplitChar = null;
		select SplitterCharacter 	into @SplitChar 	from ClientPONumberSplitter 	where ClientId = @ClientId;
		set @SplitChar = ifnull(@SplitChar, '|');

		set @CodePosition = 2;
		call _x_SetClientTimeZone(@ClientId);
		Call _x_GetClientParam(@ClientId, 'CodePosition', @CodePosition);


		drop TEMPORARY TABLE IF EXISTS InvoicesOnHoldChk;
		CREATE TEMPORARY TABLE IF NOT EXISTS InvoicesOnHoldChk AS (
				SELECT	Invoice.InvoiceId 
				FROM	UserInvoiceAssignment
						inner JOIN Invoice 	on Invoice.InvoiceId = UserInvoiceAssignment.InvoiceId
												and HoldEndDate >= utc_Date()
				WHERE 	Invoice.ClientId = @ClientId
						AND IsPOInvoice = 1
						AND Invoice.IsDeleted = FALSE
						AND @OnHold = 1
			);


		drop TEMPORARY TABLE IF EXISTS InvoicesNotOnHoldChk;
		CREATE TEMPORARY TABLE IF NOT EXISTS InvoicesNotOnHoldChk AS (
				SELECT	Invoice.InvoiceId 
				FROM	UserInvoiceAssignment
						inner JOIN Invoice 	on Invoice.InvoiceId = UserInvoiceAssignment.InvoiceId
												and (HoldEndDate < utc_Date() OR HoldEndDate IS null)
				WHERE 	Invoice.ClientId = @ClientId
						AND IsPOInvoice = 1
						AND Invoice.IsDeleted = FALSE
						AND @OnHold = 0
			);
	

		drop TEMPORARY TABLE IF EXISTS GLCodeInInvoice;
		CREATE TEMPORARY TABLE IF NOT EXISTS GLCodeInInvoice AS (
				select InvoiceId from PendingApprovalHistory where GLCodeId = @GLCode
				union all select InvoiceId from TempApprovalHistory where GLCodeId = @GLCode
				union all select InvoiceId from ApprovalHistory where GLCodeId = @GLCode
			);


		SET pRows = IFNULL(pRows, 10);
		SET pPage = IFNULL(pPage, 1);
		SET pPage = ((pPage - 1) * pRows);
		SET @Sep = CHAR(254);


		CALL _x_StringToRegEx(@GlobalSearch);
		CALL _x_StringToRegEx(@Comment);

		SELECT
				Invoice.InvoiceId,
				_x_GetFormatedValue(Vendor.VendorNo, Vendor.VendorName, @CodePosition)											as Vendor,
				date(Invoice.InvoiceDate) 																						AS InvoiceDate,
				IFNULL(Invoice.InvoiceNo, '') 																					AS InvoiceNo,
				FORMAT(Invoice.InvoiceTotal, 2) 																				AS InvoiceTotal,
				_x_GetFormatedValue(ClientCompany.CompanyCode, ClientCompany.Description, @CodePosition)						as Company,
				CONCAT(InvoiceStatus.StateName, CASE WHEN IsPaused = 1 THEN '/Paused' ELSE '' END) 								AS InvoiceStatus,
					Case	when InvoiceType = 'Invoice' then
								case when Invoice.IsPOInvoice = true then concat('PO:', ifnull(Invoice.PONUmber, '')) else 'Non PO' END
							when InvoiceType = 'Archive' then
								case when Invoice.IsPOInvoice = true then concat('PO:', ifnull(Invoice.PONUmber, ''), '/Archive') else 'Archive' END
							else InvoiceType end 																				as InvoiceType,
				case	when timestampdiff(day, UTC_TIMESTAMP(), Invoice.NetTermDate) 		between 0 and 2 
						then 'Approaching the discount date.'
						when timestampdiff(day, UTC_TIMESTAMP(), Invoice.PaymentDueDate) 	between 0 and 2
						then 'Approaching the due date.' 
						else '' end																								as AttentionMsg,
				concat(ifnull(concat(nullif(PausedInvoice.Comment, ''), char(13), char(10)), ''), ifnull(Invoice.Comment, '')) 	AS Comment,
				IFNULL(Invoice.LastActionBy, '') 																				AS LastActionBy,
				convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone)														AS ScannedDate,
				convert_tz(Invoice.LastActionDate, 'GMT', @@session.time_zone)													AS LastActionDate
		FROM Invoice
			INNER JOIN InvoiceStatus 		ON InvoiceStatus.StateId = Invoice.ApprovalStatusId
			left join PaymentStatus ps		ON Invoice.InvoiceId = ps.InvoiceId
			left join _x_PaymentStatus xps	on xps.Id = ps.Id
			left JOIN PausedInvoice 		ON PausedInvoice.InvoiceId = Invoice.InvoiceId
			LEFT JOIN Vendor				ON Invoice.VendorId = Vendor.VendorId
			LEFT JOIN ClientCompany  		ON ClientCompany.CompanyCode = Invoice.CompanyCode
												and ClientCompany.ClientId = Invoice.ClientId
		WHERE Invoice.ClientId = @ClientId
				AND Invoice.IsDeleted = FALSE
				AND (
						(
							@isGlobalSearch = TRUE
							and (Invoice.InvoiceNo = @InvoiceNo 
									or Vendor.VendorNo = @Vendor
									or regexp_Like(IFNULL(Vendor.VendorName, ''), @GlobalSearch, 'mi')
									or concat(@SplitChar, ifnull(Invoice.PONumber, ''), @SplitChar) like Concat('%', @SplitChar, @PONumber, @SplitChar, '%')
									-- or Regexp_Like(CONCAT(IFNULL(Vendor.VendorName, ''), @Sep, IFNULL(Invoice.Comment, '')), @GlobalSearch, 'mi')
								)
						)
						OR (@isGlobalSearch = FALSE
								AND (
										-- Regexp_Like(IFNULL(Invoice.InvoiceNo, ''), @InvoiceNo, 'mi')
										Invoice.InvoiceNo = ifnull(@InvoiceNo, Invoice.InvoiceNo)
  										AND Regexp_Like(concat(IFNULL(Invoice.Comment, ''), @Sep, IFNULL(PausedInvoice.Comment, '')), @Comment, 'mi')
  										AND Invoice.InvoiceTotal BETWEEN IFNULL(@InvoiceAmount1, Invoice.InvoiceTotal) AND IFNULL(@InvoiceAmount2, Invoice.InvoiceTotal)
  										AND Invoice.InvoiceType = IFNULL(@InvoiceType, Invoice.InvoiceType)
  										AND Invoice.IsPOInvoice = IFNULL(@POorNonPO, Invoice.IsPOInvoice)
 										AND ifnull(xps.PaymentReference, '') = ifnull(IFNULL(@CheckNumber, xps.PaymentReference), '')
 										-- AND ifnull(Invoice.CheckNumber, '') = ifnull(IFNULL(@CheckNumber, Invoice.CheckNumber), '')
 										AND ifnull(Invoice.IsConfidential, 0) = IFNULL(@isConfidential, ifnull(Invoice.IsConfidential, 0))
 										and concat(@SplitChar, ifnull(Invoice.PONumber, ''), @SplitChar) like Concat('%', @SplitChar, ifnull(@PONumber, ifnull(Invoice.PONumber, '')), @SplitChar, '%')

										AND IFNULL(Invoice.CompanyCode, '') = IFNULL(IFNULL(@CompanyCode, Invoice.CompanyCode), '')
 								
										AND Invoice.VendorId = IFNULL(@Vendor, Invoice.VendorId)
										AND Invoice.InvoiceDate BETWEEN IFNULL(@InvoiceDate1, Invoice.InvoiceDate) AND IFNULL(@InvoiceDate2, Invoice.InvoiceDate)
										AND Invoice.ScannedDate BETWEEN IFNULL(@ScanDate1, Invoice.ScannedDate) AND IFNULL(@ScanDate2, Invoice.ScannedDate)
										AND Invoice.LastActionDate BETWEEN IFNULL(@LastActionDate1, Invoice.LastActionDate) AND IFNULL(@LastActionDate2, Invoice.LastActionDate)
										AND (
												IFNULL(@MyInvoices, 0) = 0
												OR (
													IFNULL(@MyInvoices, 0) = 1
													AND (exists (
																select 1
																FROM 	InvoiceHistory chk
																WHERE 	chk.InvoiceId = Invoice.InvoiceId and Actor = pUserId
																limit 1)
															or exists (select	1 chk
																from	UserInvoiceAssignment chk
																where	chk.InvoiceId = Invoice.InvoiceId and UserId = pUserId
																limit 1
																)
														)
													)
												)
										AND LOCATE(CONCAT(',', IFNULL(Invoice.ApprovalStatusId, -1), ','), CONCAT('%,', IFNULL(IFNULL(@Status, Invoice.ApprovalStatusId), -1), ',%')) > 0
										AND LOCATE(CONCAT(',', IFNULL(Invoice.VendorSiteId, -1), ','), CONCAT('%,', IFNULL(IFNULL(@Department, Invoice.VendorSiteId), -1), ',%')) > 0

										and (
												@GLCode is null
												or (
													@GLCode is not NULL
													and exists (select 1 from GLCodeInInvoice chk 		where chk.InvoiceId = Invoice.InvoiceId limit 1)
													)
											)

										and (
												@OnHold is null
												or (
													@OnHold = 1
													and EXISTS 		(select 1 from InvoicesOnHoldChk chk 		where chk.InvoiceId = Invoice.InvoiceId limit 1)
													)
												or (
													@OnHold = 0
													and NOT EXISTS 	(select 1 from InvoicesNotOnHoldChk chk 	where chk.InvoiceId = Invoice.InvoiceId limit 1)
													)
											)

									)
							)
					)
		ORDER BY Date_format(ifnull(Invoice.LastActionDate, UTC_TIMESTAMP()), '%Y%m') desc, 2, 3 DESC 
		LIMIT pPage, pRows;

		-- call _x_GlobalSearch('60799ee7-d61c-4309-8ee5-f2b65f6fc925', 'GlobalSearch■90069550/1', 10, 1);
		-- call _x_GlobalSearch('60799ee7-d61c-4309-8ee5-f2b65f6fc925', 'GlobalSearch■90069550/1', 501, 1);

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceAdditionInfo` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceAdditionInfo`(
-- noformat 
	IN pClientId 		int,
	IN pInvoiceId 		int,
	IN pUserId 			char(36)
	)
ThisProc:BEGIN
	
	set @Now = now();
	SET @IsAdmin = 0;
	set @isAudited = 0;
	set @AuditURL = null;
	if exists (select 1
				from 	AuditorReviewHistory arh
				where 	arh.ClientId = pClientId
						and arh.InvoiceID = pInvoiceId
				limit 1) THEN
		set @isAudited = 1;
	end if;

	if exists (SELECT	cr.*
					FROM	ClientUserRoles cur
							INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
					WHERE	cr.isAdmin	= 1
							AND cur.UserId	= pUserId
					limit 	1) then 
		SET @IsAdmin = 1;
	END IF;


	if @isAudited = 1 then
		if @IsAdmin = 1 
			or exists (
					SELECT	1
					FROM	ClientUserRoles cur
							INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
							INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
					WHERE	cur.UserId = pUserId
							and FunctionKey = 'Auditor'
							and Access = 1
					) then 
			set @AuditURL = pInvoiceId;
		end if;
	end if;

	CALL _x_SetClientTimeZone(pClientId);

	select	date(Invoice.NetTermDate)																as DiscountDate,
			Invoice.NetTermDiscount																	as DiscountAmount,
 			case 
 				when ifnull(xps.PaymentProvider, xcc.PaymentProvider) is NULL	
					then 0	-- No payer, NOT LATE
				when Invoice.ApprovalStatusId in (1,2,3,4,5,6,8,9,10,11,13) 
						and Invoice.NetTermDate > date(convert_tz(@NOW, 'GMT', @@session.time_zone))	
					then 1	-- It is late
				else 0 end 																			as isDiscountLost,

			date(Invoice.PaymentDueDate)															as DueDate,
			date(xps.PaymentDate)																	as PaymentDate,
			xps.PaymentAmount																		as PaymentAmount,			
			xps.PaymentProvider																		as PaymentProvider,
			xps.PaymentMethod																		as PaymentMethod,
			xps.PaymentNumber																		as PaymentNumber,
			case when @IsAdmin = 1 
				then nullif(xps.PaymentReference, '') 
				else if(xps.PaymentReference<>'', '****', null) END									as PaymentReference,
			null																					as PaymentURL,

			nullif(Invoice.ExternalId, '')															as ExternalReference,
			Batch.Sender				 															as Sender,
			convert_tz(Batch.CreatedDate, 'GMT', @@session.time_zone) 								as SenderDateTime,

			case when @isAudited = 1 then 'Yes' else 'No' end										as Audited,
			@AuditURL 																				as AuditedURL

	from 	Invoice	
			left join Batch 					on Batch.Id = Invoice.BatchId
			left join PaymentStatus ps			on ps.InvoiceId = Invoice.InvoiceId
			left join _x_PaymentStatus xps		on xps.Id = ps.Id
			left join ClientCompany cc 			on cc.ClientId = Invoice.ClientId
													and cc.CompanyCode = Invoice.CompanyCode
			left join _x_ClientCompany xcc 		on xcc.Id = cc.Id
	WHERE	Invoice.InvoiceId = pInvoiceId
			AND Invoice.ClientId = pClientId;
		
	-- call _x_InvoiceAdditionInfo(137, 663193686, 'e727c557-6c8e-4a73-811b-a2ee93e4916d');


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceApprove` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceApprove`(

-- noformat
	IN `pClientId` int,
	IN `pInvoiceId` int,
	IN `pUserId` varchar(36),
	IN `pForTesting` int,
	INOUT `pMessage` varchar(500))
ThisProc:
	BEGIN


		DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			GET DIAGNOSTICS CONDITION 1
			@p1 = MESSAGE_TEXT;
			SET pMessage = @p1;
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @p1, MYSQL_ERRNO = 1;
		END;

		SET SESSION group_concat_max_len = 1000000;


		SET @Now = UTC_TIMESTAMP();
		SET @DEBUGONLY = IFNULL(pForTesting, 0);
		SET pMessage = 'There was an issue with the approval.';

		SET @InvoiceId = pInvoiceId;
		SET @Approval = 1;
		SET @Response = 0;



		SET @ClientId = pClientId;
		SET @VendorSiteId = 0;
		SET @VendorId = 0;
		SET @AuthCode = '';
		SET @CostCenter = '';
		SET @ClientCompanyId = 0;
		SET @InvoiceTotal = 0.00;

		SET @FreightCharges 		= 0.00;
		SET @Tax 					= 0.00;
		SET @CalculableOtherCharges = 0.00;
		SET @MaterialSurcharge 		= 0.00;
		SET @FuelOutbound 			= 0.00;
		SET @MiscCharges 			= 0.00;



		set @AmountApproved = 0.00;
		SET @IsPO = 0;
		SET @PoNumber = null;
		SET @IsDeleted = 0;
		SET @IsPaused = 0;
		SET @ApprovalStatusId = -1;
		SET @DepartmentId = 0;
		SET @ProjectTypeId = 0;
		SET @OrgId = 0;
		SET @AccountCode = '';
		SET @ApproverName = '';
		SET @IsAdmin = 0;
		SET @AssignBackToUserId = '';
		set @InitialStatus = '';
		set @NotificationMessage = 'There is an invoice awaiting your review.';
		set @OKResponse = 'Approved';
		

		/*
		**	Approval workflow overview
		**	==========================
		**	Once the document is approved it does the following:
		**		If the document was requested to be approved by someone else, 
		**			it comes back to the original user
		**		if the approver has a max amount 
		**			It is send to the managers 
		**		if neither is true then
		**			The next substep (or step) is selected and a new list of approvers are prepared
		**
		**
		**		FOR all cases, an approver MUST be active
		**		If no approver is available or selected, then the catch all is enacted
		**
		**	pMessage returns 
		** 		Approved/Submitted	=  ok 
		**		Exception 			=  OK but has exceptions
		** 		Final    			=  ok and there are no more steps
		**		else anything else is an error to be displayed
		*/


		/* 
		**
		**	Create the table that will hold all the approvers
		**
		**/
		CREATE TEMPORARY TABLE IF NOT EXISTS zz_Approvers (
			CId bigint,
			UserId char(36),
			Level int
		);


		/*	This is needed if the table is NOT a temp table */
		DELETE
			FROM zz_Approvers
		WHERE CID = CONNECTION_ID();




		/*
		**
		** Get information on who approved it
		**
		*/
		SELECT	CONCAT(u.LastName, ', ', u.FirstName) INTO @ApproverName
		FROM	User u
		WHERE	u.UserId = pUserId;
		IF ROW_COUNT() = 0 THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Unknown user', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;

		if exists (SELECT	cr.*
					FROM	ClientUserRoles cur
							INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
					WHERE	cr.isAdmin	= 1
							AND cur.UserId	= pUserId
					limit 	1) then 
			SET @IsAdmin = 1;
		END IF;






		/* 
		**
		**	Information about the Object
		**
		**/
		SELECT
				i.VendorSiteId,
				i.VendorId,
				i.InvoiceTotal, ifnull(FreightCharges, 0), IFNULL(Tax, 0), ifnull(CalculableOtherCharges, 0), ifnull(MaterialSurcharge, 0), ifnull(FuelOutbound, 0), ifnull(MiscCharges, 0),
				i.VendorSiteId,
				i.ProjectTypeId,
				i.OrgId,
				i.AccountCode,
				i.IsPOInvoice,
				i.PONumber,
				i.ApprovalStatusId,
				i.IsPaused,
				i.IsDeleted,
				v.AuthCode,
				cc.Id,
				CONCAT('Invoice for ', format(i.InvoiceTotal, 2), ' approval'),
				InvoiceStatus.StateName
		INTO	@CostCenter, @VendorId, 
				@InvoiceTotal, @FreightCharges, @Tax, @CalculableOtherCharges, @MaterialSurcharge, @FuelOutbound, @MiscCharges,
				@DepartmentId, @ProjectTypeId, @OrgId, @AccountCode, @IsPo, @PoNumber,
				@ApprovalStatusId, @IsPaused, @IsDeleted, @AuthCode, @ClientCompanyId, @NotificationMessage, @InitialStatus
		FROM	Invoice i
				INNER JOIN Vendor v						ON i.VendorId = v.VendorId
				inner join InvoiceStatus 				on i.ApprovalStatusId = InvoiceStatus.StateId 	
				LEFT JOIN ClientCompany cc				ON cc.ClientId = i.ClientId
															AND cc.CompanyCode = i.CompanyCode
															AND cc.IsActive = 1
		WHERE i.InvoiceId = @InvoiceId
				and i.ClientId = pClientId;


		if @DEBUGONLY = 1 THEN
			select 'Info on Invoice', @CostCenter, @VendorId, @InvoiceTotal, @DepartmentId, @ProjectTypeId, @OrgId, @AccountCode, @IsPo, @PoNumber, @ApprovalStatusId, @IsPaused, @IsDeleted, @AuthCode, @ClientCompanyId, @NotificationMessage, @InitialStatus;
		end if;

		IF @IsDeleted = 1 THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The invoice is deleted.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;
		IF @IsPaused = 1 THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The invoice is paused.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;
		IF not @ApprovalStatusId in (1,3,6) THEN
			set @EMessage = '';
			select 	concat('The invoice''s status is currently ', StateName)
			into 	@EMessage
			from 	InvoiceStatus
			where 	StateId = @ApprovalStatusId;

			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @EMessage, MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;

		-- Check if all POs identified on the Invoice Hearer have atleast 1 line in the details
		-- and if all POs in the details are in the header
		IF @IsPo = 1 THEN
			set @PONumberCheck = CONCAT('|', @PoNumber, '|');

			IF EXISTS (
							SELECT	* 
							FROM 	LineItemDetail lid 
							WHERE	lid.InvoiceId = pInvoiceId		
									AND NOT @PONumberCheck LIKE CONCAT('%|', PoNumber, '|%')
							) THEN
				SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Not all PO Numbers identified on the invoice are present in the PO Lines.', MYSQL_ERRNO = 1;
				LEAVE ThisProc;
			end if;

			IF EXISTS (
							SELECT	* 
							FROM 	LineItemDetail lid 
							WHERE	lid.InvoiceId = pInvoiceId		
									AND instr(@PONumberCheck, CONCAT('|', PoNumber, '|')) = 0
							) THEN
				SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'There are some PO Numbers not referenced on the invoice header.', MYSQL_ERRNO = 1;
				LEAVE ThisProc;
			end if;
		END IF;
                   

	
		if @isPO = 1 then 
			SET @AdjustmentPercentPlus = 0;
			SET @AdjustmentPercentMinus = 0;
			set @AdjustmentAmountPlus = 0;		-- Priority is Percentage
			set @AdjustmentAmountMinus = 0;

			IF EXISTS ( SELECT	1
						FROM	ClientSpecificConfig
						WHERE	ClientSpecificConfigType = 29			-- ConsiderAdjustmentAmountForTreshold
						AND	ClientId = pClientId) THEN
	
				select	ifnull(-(AdjustmentPercent), 0), ifnull(-(AdjustmentAmount), 0)
				into 	@AdjustmentPercentMinus, @AdjustmentAmountMinus
				from	Client 
				where	ClientId = pClientId;
	
				IF EXISTS ( SELECT	1
							FROM	ClientSpecificConfig
							WHERE	ClientSpecificConfigType = 751		-- AllowNegativeThresholdTobeApprove
							AND		ClientId = pClientId) THEN
						SET @AdjustmentPercentPlus 	= @AdjustmentPercentMinus * -1;
						SET @AmountPercentPlus	 	= @AdjustmentAmountMinus * -1;
				END IF;
			END IF;
	
			set @Task = 0;
			if @ApprovalStatusId = 1 THEN		-- Captured
				set @Task = 6;
			elseif @ApprovalStatusId = 3 THEN	-- In approval
				set @Task = 0;
			elseif @ApprovalStatusId = 6 THEN	-- Exception
				set @Task = 2;
			end if;
	

			-- steven
			-- Check 
			if exists (select * from ClientExceptionRule where ClientId = pClientId and Task = @Task and ConfigurableExceptionType in  (0, 3)) THEN
				if not exists (select * from LineItemDetail lid where InvoiceId = pInvoiceId) THEN
					SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Missing line items.', MYSQL_ERRNO = 1;
					LEAVE ThisProc;
				end if;
-- 				set @AmountCheckPlus 	= @InvoiceTotal - (@FreightCharges + @Tax + @CalculableOtherCharges + @MaterialSurcharge + @FuelOutbound + @MiscCharges);
-- 				set @AmountCheckMinus 	= @InvoiceTotal - (@FreightCharges + @Tax + @CalculableOtherCharges + @MaterialSurcharge + @FuelOutbound + @MiscCharges);
				set @AmountCheckPlus 	= @InvoiceTotal;
				set @AmountCheckMinus 	= @InvoiceTotal;

				if @AdjustmentPercentMinus <> 0 then
					set @AmountCheckPlus	= @AmountCheckPlus 	+ (@AmountCheckPlus * @AdjustmentPercentPlus / 100);
					set @AmountCheckMinus	= @AmountCheckMinus + (@AmountCheckMinus * @AdjustmentPercentMinus / 100);
				elseif @AdjustmentAmountMinus <> 0 then
					set @AmountCheckPlus	= @AmountCheckPlus 	+ @AdjustmentAmountPlus;
					set @AmountCheckMinus	= @AmountCheckMinus + @AdjustmentAmountMinus;
				end if;
	
				if @DEBUGONLY = 1 THEN
					select 'Theshold',  @AmountCheckMinus, @AmountCheckPlus;
				end if;
	
				select	ifnull(sum(lid.TotalAmount), 0.00)
				INTO 	@POLineAmount 
				from	LineItemDetail lid 
				where	InvoiceId = pInvoiceId;

				SET @POLineAmount = @POLineAmount + (@FreightCharges + @Tax + @CalculableOtherCharges + @MaterialSurcharge + @FuelOutbound + @MiscCharges);

				if not @POLineAmount between @AmountCheckMinus and @AmountCheckPlus THEN
					if @AmountCheckMinus = @AmountCheckPlus then
						SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Sum of the line items do not match the invoice total.', MYSQL_ERRNO = 1;
						LEAVE ThisProc;
					else
						-- SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Adjustment amount exceeds the threshold configuration.', MYSQL_ERRNO = 1;
						set @Msg = 'Adjustment amount exceeds the threshold configuration by ';
						IF @POLineAmount < @AmountCheckMinus THEN
							set @Msg = concat(@Msg, format(@POLineAmount - @AmountCheckMinus, 2,'en_US'));
						ELSE
							set @Msg = concat(@Msg, format(@AmountCheckPlus - @POLineAmount, 2,'en_US'));
						end if;

						SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @Msg, MYSQL_ERRNO = 1;
						LEAVE ThisProc;
					end if;
				end if;
			end if;

		end if;





			SET @WorkflowType = 0;


			/* 
			**
			**	Information about the Current Step being approved
			**
			**/
			SET @ApprovalStepId = -1;
			SET @ApprovalSubStepId = -1;
			SET @ApprovalStepRule = 0;
			SET @CurrentStepOrderNo = -1;
			SET @CurrentSubStepOrderNo = -1;

			SET @MaxAllowedAmount = NULL;
			SET @ApprovalForwardingRule = -1;

			SET @SkipApprovalStepIfApproverAndAssignedToUsersAreTheSame = 0;
			set @FromApprovalSubStepId = null;



			/*
			**	If the current status of the object is not submitted for approval
			**	ApprovalStatusId=1		Captured
			**	ApprovalStatusId=2		Verified		(not used)
			**	ApprovalStatusId=3		In approval
			**	ApprovalStatusId=4		Approved
			**	ApprovalStatusId=5		Accepted
			**	ApprovalStatusId=6		Exception
			**	ApprovalStatusId=7		Paid
			**	ApprovalStatusId=8		Rejected
			**	ApprovalStatusId=9		Failed
			**	ApprovalStatusId=10		Payment initiated
			**	ApprovalStatusId=11		Funds recieved
			**	ApprovalStatusId=12		Payment approved
			**	ApprovalStatusId=13		EFT Synced
			**	ApprovalStatusId=99		PO exception
			*/


			/*
			** ABS(Invoice Total) for all checks
			*/
			IF EXISTS (SELECT	*
						FROM	ClientSpecificConfig
						WHERE	ClientId = @ClientId
						AND	ClientSpecificConfigType = 464) THEN
				SET @InvoiceTotal = ABS(@InvoiceTotal);
			END IF;

			/*
			** If The approver appears on the next step, Skip it
			*/
			IF EXISTS (SELECT	*
						FROM	ClientSpecificConfig
						WHERE	ClientId = @ClientId
						AND		ClientSpecificConfigType = 371) THEN
				SET @SkipApprovalStepIfApproverAndAssignedToUsersAreTheSame = 1;
			END IF;


			set @ApprovalSubStepId		= -1;
			set @ApprovalStepId			= -1;
			set @CurrentSubStepOrderNo	= -1;
			set @CurrentStepOrderNo		= -1;
			set @AssignBackToUserId		= -1;
			set @MaxAllowedAmount		= null;
			set @ApprovalForwardingRule	= -1;
			set @ApprovalStepRule		= -1;
			set @WorkFlowType			= -1;



			IF @ApprovalStatusId = 1
				OR @ApprovalStatusId = 6 THEN
				-- Select the first Step/Substep prioritizing the Company over any company
-- 				SELECT	ass.ApprovalStepRule, aStep.ApprovalStepId
-- 				INTO 	@ApprovalStepRule, @ApprovalStepId
-- 				from 	ApprovalStep ass
-- 						inner join 	ApprovalSubStep aStep	ON aStep.ApprovalStepId = ass.ApprovalStepId
-- 						left join 	ClientCompany cc		on cc.Id = ass.ClientCompanyId
-- 				where 	ass.ClientId = pClientId
-- 						and ass.IsPO = @isPO
-- 				order	by ifnull(ass.ClientCompanyId, -1) desc, aStep.OrderNo 
-- 				LIMIT	1;

				Update Invoice Set ApprovalStatusId = 3 where InvoiceId = pInvoiceId;
				set @OKResponse = 'Submitted';

-- 				IF @DEBUGONLY = 1 THEN
-- 					SELECT 
-- 						@OKResponse,
-- 						@ApprovalStatusId,
-- 						@ApprovalStepRule,
-- 						@ApprovalStepId;
-- 				END IF;

			END IF;


		GeneralApprovalLogic: while true do

			IF @ApprovalStatusId = 1
				OR @ApprovalStatusId = 6 THEN
				-- Select the first Step/Substep prioritizing the Company over any company
				SELECT	ass.ApprovalStepRule, aStep.ApprovalStepId
				INTO 	@ApprovalStepRule, @ApprovalStepId
				from 	ApprovalStep ass
						inner join 	ApprovalSubStep aStep	ON aStep.ApprovalStepId = ass.ApprovalStepId
						left join 	ClientCompany cc		on cc.Id = ass.ClientCompanyId
				where 	ass.ClientId = pClientId
						and ass.IsPO = @isPO
						and ass.ApprovalStepId = ifnull(nullif(@ApprovalStepId, -1), ass.ApprovalStepId)
				order	by ifnull(ass.ClientCompanyId, -1) desc, aStep.OrderNo 
				LIMIT	1;

				IF @DEBUGONLY = 1 THEN
					SELECT 
						@OKResponse,
						@ApprovalStatusId,
						@ApprovalStepRule,
						@ApprovalStepId;
				END IF;

			end if;

			IF @ApprovalStatusId = 3 THEN
				SELECT	uia.ApprovalSubStepId,
						aStep.ApprovalStepId,
						ass.OrderNo,
						aStep.OrderNo,
						uia.AssignBackToUserId,
						ass.MaxAllowedAmount,
						ass.ApprovalForwardingRule,
						aStep.ApprovalStepRule,
						aStep.WorkFlowType
				INTO 	@ApprovalSubStepId, 
						@ApprovalStepId, 
						@CurrentSubStepOrderNo, 
						@CurrentStepOrderNo, 
						@AssignBackToUserId, 
						@MaxAllowedAmount, 
						@ApprovalForwardingRule, 
						@ApprovalStepRule,
						@WorkFlowType
				FROM	UserInvoiceAssignment uia
						INNER JOIN ApprovalSubStep ass		ON ass.ApprovalSubStepId = uia.ApprovalSubStepId
						INNER JOIN ApprovalStep aStep		ON aStep.ApprovalStepId = ass.ApprovalStepId
		
						left join UserReassignmentHistory reassH	on reassH.SourceUserId = uia.UserId						-- reassign test
																	and Now() between reassH.DateFrom and reassH.DateTo		-- reassign test
				WHERE	uia.InvoiceId = @InvoiceId
						AND aStep.ClientId = @ClientId
						AND IFNULL(aStep.ClientCompanyId, -1) = IFNULL(@ClientCompanyId, IFNULL(aStep.ClientCompanyId, -1))
						AND (uia.UserId = pUserId OR @IsAdmin = 1 or reassH.TargetUserId = pUserId) 						-- reassign test
				LIMIT 1;
				IF @ApprovalSubStepId = -1 THEN
					SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The document is no longer in your queue.', MYSQL_ERRNO = 1;
					LEAVE ThisProc;
				END IF;

				set @FromApprovalSubStepId = ifnull(@FromApprovalSubStepId, @ApprovalStepId);		-- Get the original SubStep


				IF @DEBUGONLY = 1 THEN
					SELECT 
						@ApprovalSubStepId,
						@ApprovalStepId,
						@CurrentSubStepOrderNo,
						@CurrentStepOrderNo,
						@AssignBackToUserId,
						@MaxAllowedAmount,
						@ApprovalForwardingRule,
						@ApprovalStepRule,
						@CheckExpression;
				END IF;


				/*
				**
				**	Add approver to the invoice history
				**
				*/
				IF @DEBUGONLY = 1 THEN
					SELECT
						'InvoiceHistory',
						@InvoiceId,
						@ApproverName AS Actor,
						'Approve' AS Action,
						@Now AS ActionDate,
						'' AS PreviousData,
						'' AS NewData,
						'' AS Field,
						@InitialStatus AS InitialStatus,
						'' AS CurentStatus,
						pUserId AS ActorId,
						NULL AS OldId;
				end if;

				INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId, OldID)
					SELECT
						@InvoiceId,
						@ApproverName AS Actor,
						'Approve' AS Action,
						@Now AS ActionDate,
						'' AS PreviousData,
						'' AS NewData,
						'' AS Field,
						@InitialStatus AS InitialStatus,
						'In Approval' AS CurentStatus,
						pUserId AS ActorId,
						NULL AS OldId;




				/*
				**
				** If the field has a AssignBackToUserId then assign this back to the user ONLY if they are active, if they are not, catch all
				**
				*/
				IF @AssignBackToUserId IS NOT NULL THEN
					IF EXISTS (SELECT	1
								FROM	User u
								WHERE	u.UserId = @AssignBackToUserId
								AND		u.IsActive = 1) THEN
						IF @DEBUGONLY = 1 THEN
							SELECT
								'UserInvoiceAssignment (AssignBack)',
								@InvoiceId,
								@AssignBackToUserId,
								0 AS Type,
								1 AS State,
								@ApprovalSubStepId,
								NULL AS HoldStartDate,
								NULL AS HoldEndDate,
								@Now AS DateCreated,
								NULL AS AssignBackToUserId,
								NULL AS Comments;
						end if;

						INSERT INTO zz_Approvers
							SELECT
								CONNECTION_ID(),
								AssignBackToUserId,
								null;
						LEAVE ThisProc;
					ELSE
						/* The user that is supposed to get the approval is no longer active*/
						LEAVE GeneralApprovalLogic;
					END IF;
				END IF;


				/*
				**	ApprovalForwardingRule
				**
				**	The forwarding rul that the document was on when it was apporved is what determines the testing until the next step is found.
				**	If the next steps being considered are another rules we do not care, we still appy the setp approved ApprovalForwardingRule!!!!!!
				**
				**	0	= ByAmount After approval, loop thru all steps/substeps until the Maxallowedamount(or NULL)>Doc Amount		
				**	1	= ByStep/Substep
				**	2	= same as 3 
				**	3	= if Maxallowedamount>=DocumentAmount Then NextSub Else Jump this step and go to the next step (first substep)
				**	4	= Check the GLCode in the ApprovalHistory and cross reference them to the users on this next step.
				**			The next step MUST be a ApprovalStepUserFilterType = 4 then it will be selected else it follows Step 0
				**	5	= ByAmountUsingPriority (VNdor and/or AuthCode ando Costcenter
				**	6 	= ?
				**	7	= ?
				**	8	= ? 
				**	9	= ?
				**	10	= ? 
				**	11	= ?
				**	12	= ?
				**	13	= ?
				*/

				IF @DEBUGONLY = 1 THEN
					SELECT
						@ApprovalSubStepId,
						@ApprovalStepId,
						@CurrentSubStepOrderNo,
						@CurrentStepOrderNo,
						@AssignBackToUserId,
						@MaxAllowedAmount,
						@ApprovalForwardingRule,
						@ApprovalStepRule;
				END IF;

				IF @ApprovalForwardingRule = 5 THEN
					SET @MatchVendor = 0;
					SET @MatchAuthCode = 0;
					SET @MatchCostCenter = 0;

					IF @DEBUGONLY = 1 THEN
						select 'Checking ApproverByAmount', @VendorId, @AuthCode, @CostCenter, @isPo, @WorkflowType, @ClientCompanyId, @InvoiceTotal;
						SELECT
							aba.*,
							case when Vendorid is null then 1 			else ifnull(IFNULL(Vendorid, @VendorId) = @VendorId, 0) end			AS MatchVendor,
							case when aba.AuthCode is null then 1 		else ifnull(IFNULL(aba.AuthCode, @AuthCode) = @AuthCode, 0) end		AS MatchAuthCode,
							case when aba.CostCenters is null then 1 	else (FIND_IN_SET(IFNULL(@CostCenter, 'All'), CONCAT(IFNULL(aba.CostCenters, ''), ',All')) > 0) end AS MatchCostCenter
						FROM ApproverByAmount aba
							WHERE 	UserId = pUserId
									AND @InvoiceTotal > aba.MaximumAllowedAmount
									AND (
											(@isPo = 0		AND aba.WorkflowType IN (0, 2)
															and ifnull(aba.IsPOIsNoPOIsBoth, 0) = 0
											)
											OR (@isPo = 1	AND aba.WorkflowType IN (0, 2)
															and ifnull(aba.IsPOIsNoPOIsBoth, 1) = 1
											)
										)
									AND (IFNULL(ClientCompanyId, @ClientCompanyId) = @ClientCompanyId
											OR @ClientCompanyId IS NULL);
					end if;

					SELECT
						MatchVendor,
						MatchAuthCode,
						MatchCostCenter INTO @MatchVendor, @MatchAuthCode, @MatchCostCenter
					FROM (SELECT	aba.*,
									case when Vendorid is null then 1 			else ifnull(IFNULL(Vendorid, @VendorId) = @VendorId, 0) end			AS MatchVendor,
									case when aba.AuthCode is null then 1 		else ifnull(IFNULL(aba.AuthCode, @AuthCode) = @AuthCode, 0) end		AS MatchAuthCode,
		-- 							IFNULL(Vendorid = @VendorId, 0) 							AS MatchVendor,
		-- 							IFNULL(aba.AuthCode = @AuthCode, 0) 						AS MatchAuthCode,
									case when aba.CostCenters is null then 1 	else (FIND_IN_SET(IFNULL(@CostCenter, 'All'), CONCAT(IFNULL(aba.CostCenters, ''), ',All')) > 0) end AS MatchCostCenter
							FROM 	ApproverByAmount aba
							WHERE 	UserId = pUserId
									AND @InvoiceTotal > aba.MaximumAllowedAmount
									AND (
											(@isPo = 0		AND aba.WorkflowType IN (0, 2)
															and ifnull(aba.IsPOIsNoPOIsBoth, 0) = 0
											)
											OR (@isPo = 1	AND aba.WorkflowType IN (0, 2)
															and ifnull(aba.IsPOIsNoPOIsBoth, 1) = 1
											)
										)
									AND (IFNULL(ClientCompanyId, @ClientCompanyId) = @ClientCompanyId
											OR @ClientCompanyId IS NULL)
						) DATA
							ORDER BY ((MatchVendor * 4) + (MatchAuthCode * 2) + MatchCostCenter) DESC,
					MatchVendor DESC, MatchAuthCode DESC, MatchCostCenter DESC
					LIMIT 1;

					IF @DEBUGONLY = 1 THEN
						select @MatchVendor, @MatchAuthCode, @MatchCostCenter;
					end if;


-- 					set @msg = CONCAT(ifnull(pUserId, 'NA'), '--', ifnull(@InvoiceTotal, 'NA'), '--', ifnull(@isPo, 'NA'), '--', ifnull(@WorkflowType, 'NA'), '--', ifnull(@ClientCompanyId, 'NA'));
-- 					SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @msg, MYSQL_ERRNO = 1;

					INSERT INTO zz_Approvers
						SELECT
							CONNECTION_ID(),
							DATA.SecondApproverId,
							(@ApprovalLevel + 1) /*This is the next set of employees that will will need to check */
						FROM (SELECT
								aba.*,
								case when Vendorid is null then 1 			else ifnull(IFNULL(Vendorid, @VendorId) = @VendorId, 0) end			AS MatchVendor,
								case when aba.AuthCode is null then 1 		else ifnull(IFNULL(aba.AuthCode, @AuthCode) = @AuthCode, 0) end		AS MatchAuthCode,
	-- 							IFNULL(Vendorid = @VendorId, 0) 							AS MatchVendor,
	-- 							IFNULL(aba.AuthCode = @AuthCode, 0) 						AS MatchAuthCode,
								case when aba.CostCenters is null then 1 	else (FIND_IN_SET(IFNULL(@CostCenter, 'All'), CONCAT(IFNULL(aba.CostCenters, ''), ',All')) > 0) end AS MatchCostCenter
							FROM ApproverByAmount aba
							WHERE 	UserId = pUserId
									AND @InvoiceTotal > aba.MaximumAllowedAmount
									AND (
											(@isPo = 0		AND aba.WorkflowType IN (0, 2)
															and ifnull(aba.IsPOIsNoPOIsBoth, 0) = 0
											)
											OR (@isPo = 1	AND aba.WorkflowType IN (0, 2)
															and ifnull(aba.IsPOIsNoPOIsBoth, 1) = 1
											)
										)
									AND (IFNULL(ClientCompanyId, @ClientCompanyId) = @ClientCompanyId
											OR @ClientCompanyId IS NULL)
								) DATA
						WHERE MatchVendor = @MatchVendor
						AND MatchAuthCode = @MatchAuthCode
						AND MatchCostCenter = @MatchCostCenter;

					IF @DEBUGONLY = 1 THEN
						select * from zz_Approvers;
					end if;


					--
					-- If any approved was selected by Amount then Leave
					--
					IF EXISTS (SELECT 1 FROM zz_Approvers WHERE CId = CONNECTION_ID()) THEN
						IF @DEBUGONLY = 1 THEN
							SELECT
								'Leaving Filtering loop, found approver by amount';
						END IF;
						LEAVE GeneralApprovalLogic;
					END IF;


					IF @ApprovalStepRule <> 7 THEN 
						IF ROW_COUNT() = 0 THEN
							SET pMessage = 'Final';
						END IF;
						LEAVE GeneralApprovalLogic;
					END IF;
				END IF;
				
			END IF;

			IF @ApprovalForwardingRule = 2
				OR @ApprovalForwardingRule = 3 THEN
				IF @MaxAllowedAmount < @InvoiceTotal THEN
					SET @CurrentSubStepOrderNo = 999999;	#This will ensure that there are no sub steps after this one in the currentstep and jump to the next Setep
				END IF;
			END IF;

			/*
			** Keep looping until we find the next step or there are no more steps
			**
			**	If no step found then return FULLYAPPROVED (new)
			**
			*/
			SET @IssueWithLogic = 0;
			FindNextSubStep:WHILE @IssueWithLogic <= 30 DO
				SET @IssueWithLogic = @IssueWithLogic + 1;
				/* 
				**	Information about the the next Sub Step
				**/
				SET @ApprovalSubStepId = -1;
				SET @CheckExpression = NULL;

				IF @DEBUGONLY = 1 THEN
					select 'Find the next step after this one.',  @ApprovalStepId, @CurrentSubStepOrderNo, @ApprovalForwardingRule, @InvoiceTotal;
				end if;	

				SELECT
						ApprovalStep.ApprovalStepRule,
						ApprovalSubStep.ApprovalSubStepId,
						ApprovalSubStep.CheckExpression 
				INTO 	@ApprovalStepRule, @ApprovalSubStepId, @CheckExpression
				FROM 	ApprovalSubStep
						inner join ApprovalStep	on ApprovalStep.ApprovalStepId = ApprovalSubStep.ApprovalStepId
				WHERE 	ApprovalSubStep.ApprovalStepId = @ApprovalStepId
						AND @CurrentSubStepOrderNo < ApprovalSubStep.OrderNo
						AND (@ApprovalForwardingRule NOT IN (0, 4)
								OR (@ApprovalForwardingRule = 0
										AND IFNULL(MaxAllowedAmount, 9999999999999) > @InvoiceTotal)
								OR (@ApprovalForwardingRule = 4
										AND (
												(IFNULL(MaxAllowedAmount, 9999999999999) > @InvoiceTotal)
												OR EXISTS (SELECT 1
															FROM ApprovalHistory ah
															WHERE ah.InvoiceId = @InvoiceId)
												)
									)
							)
				ORDER BY ApprovalSubStep.Orderno
				LIMIT 1;

				IF @DEBUGONLY = 1 THEN
					SELECT 
						'Next substep',
						@ApprovalStepRule, 
						@ApprovalSubStepId,
						@ApprovalStepId;
				END IF;

				IF @ApprovalSubStepId <> -1 THEN
					LEAVE FindNextSubStep;
				END IF;





				/*
				**	No more substeps so no get the next step
				**
				**
				**	WorkflowType=0		for Invoice
				**	WorkflowType=1		for PO/PR
				**	WorkflowType=2		for Invoice and PO/PR
				**	WorkflowType=3		for STOCK
				**/
				SET @ApprovalStepId = -1;
				SET @CurrentSubStepOrderNo = -1;
				SELECT
						ApprovalStepId,
						ApprovalStepRule,
						WorkflowType,
						OrderNo 
				INTO 	@ApprovalStepId, @ApprovalStepRule, @WorkflowType, @CurrentStepOrderNo
				FROM 	ApprovalStep
				WHERE 	ClientId = @ClientId
						AND IFNULL(ClientCompanyId, -1) = IFNULL(@ClientCompanyId, IFNULL(ClientCompanyId, -1))
						AND WorkflowType IN (0, 2)
						AND isPo = @IsPo
						AND @CurrentStepOrderNo < OrderNo
				ORDER BY OrderNo
				LIMIT 1;

				if @DEBUGONLY = 1 then
					select @ApprovalStepId, @ApprovalStepRule, @WorkflowType, @CurrentStepOrderNo;
				end if;

				IF @ApprovalStepId = -1 THEN
					SET pMessage = 'Final';
					LEAVE FindNextSubStep;
				END IF;

			END WHILE FindNextSubStep;
	
	
	
	
	



			/*
			** Logic error
			*/
			IF @IssueWithLogic > 30 THEN
				SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Unknown error, please report this to support.', MYSQL_ERRNO = 1;
				LEAVE ThisProc;
			END IF;


-- 			if @DEBUGONLY = 1 THEN
-- 				select 'Get approvers and filter out everyone that is not on the FilterType', @ApprovalSubStepId;
-- 			end if;

			Call _x_InvoiceApproveFilters(pUserId, @ClientId, @InvoiceId, @VendorId, @Department, @OrgId, @AccountCode, @ProjectTypeId, @ApprovalSubStepId, @DEBUGONLY);

			/*
			Check if the we need to go to the next step if no approvers
			*/
			if @ApprovalStepRule = 12 and NOT EXISTS (SELECT 1 FROM zz_Approvers WHERE CID = CONNECTION_ID()) then
				IF @DEBUGONLY = 1 THEN
					SELECT	'No approvers/@ApprovalStepRule = 12/going to next step/substep';
				END IF;

				select (select OrderNo*100 from ApprovalStep where ApprovalStepId = @ApprovalStepId)
						+ (select OrderNo from ApprovalSubStep where ApprovalSubStepId = @ApprovalSubStepId)
				into 	@CurrentOrder;

				set @ApprovalStepId = -1;

				select 	ApprovalStep.ApprovalStepId
				into 	@ApprovalStepId
				from	ApprovalStep
						inner join ApprovalSubStep	on ApprovalSubStep.ApprovalStepId = ApprovalStep.ApprovalStepId
				where 	ClientId = @ClientId
						and isPo = @IsPO
						and ((ApprovalStep.OrderNo*100)+ApprovalSubStep.OrderNo) > @CurrentOrder
				order	BY ApprovalStep.OrderNo, ApprovalSubStep.OrderNo
				limit 	1;
				IF @DEBUGONLY = 1 THEN
					SELECT	@ApprovalStepId, @ApprovalStatusId;
				END IF;
	
				if @ApprovalStepId = -1 then
					Leave GeneralApprovalLogic;
				end if;
			else
				Leave GeneralApprovalLogic;
			end if;


begin
			/*
			**
			** Get approvers and filter out everyone that is not on the FilterType
			** If there are no approvers, then get the next filterType
			**
			*/
-- 			SET @ApprovalStepUserFilterType = -1;
-- 			SET @curFilters_eof = 0;
-- 
-- 			Filters:BEGIN
-- 				DECLARE varApprovalForwardingRule int;
-- 				DECLARE curFilters CURSOR FOR
-- 				SELECT
-- 					ApprovalStepUserFilterType
-- 				FROM ApprovalSubStepUserFilter assuf
-- 				WHERE ApprovalSubStepId = @ApprovalSubStepId;
-- 				DECLARE CONTINUE HANDLER FOR NOT FOUND SET @curFilters_eof = 1;
-- 				OPEN curFilters;
-- 				FiltersLoop:LOOP
-- 					SET @curFilters_eof = 0;
-- 					SET @ApprovalStepUserFilterType = -1;
-- 					FETCH FROM curFilters INTO varApprovalForwardingRule;
-- 
-- 
-- 					IF @curFilters_eof = 1 THEN
-- 						LEAVE FiltersLoop;
-- 					END IF;
-- 					SET @ApprovalStepUserFilterType = varApprovalForwardingRule;
-- 					IF @ApprovalStepUserFilterType = 0 THEN
-- 						IF @DEBUGONLY = 1 THEN
-- 							SELECT
-- 								'Filtering by Vendor...';
-- 						END IF;
-- 
-- 						INSERT INTO zz_Approvers
-- 							SELECT
-- 								CONNECTION_ID(),
-- 								User.UserId,
-- 								0
-- 							FROM ApprovalSubStepUser ApprU
-- 								INNER JOIN User
-- 									ON User.UserId = ApprU.UserId
-- 									AND User.ClientId = @ClientId
-- 									AND User.IsActive = 1
-- 									AND User.UserId <> pUserId
-- 								INNER JOIN ApprovalSubStepUserVendor filter
-- 									ON filter.ApprovalSubStepId = ApprU.ApprovalSubStepId
-- 									AND filter.UserId = User.UserId
-- 									AND filter.VendorId = @VendorId
-- 							WHERE ApprU.ApprovalSubStepId = @ApprovalSubStepId
-- 							AND ApprU.ManualAssignmentOnly = 0;
-- 					ELSEIF @ApprovalStepUserFilterType = 1 THEN
-- 						IF @DEBUGONLY = 1 THEN
-- 							SELECT
-- 								'Filtering by POPurchaser...';
-- 						END IF;
-- 						SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Filtering by POPurchaser not yet implemented yet.', MYSQL_ERRNO = 1;
-- 						LEAVE ThisProc;
-- 					ELSEIF @ApprovalStepUserFilterType = 2 THEN
-- 						IF @DEBUGONLY = 1 THEN
-- 							SELECT
-- 								'Filtering by Organization...';
-- 						END IF;
-- 						INSERT INTO zz_Approvers
-- 							SELECT
-- 								CONNECTION_ID(),
-- 								User.UserId,
-- 								0
-- 							FROM ApprovalSubStepUser ApprU
-- 								INNER JOIN User
-- 									ON User.UserId = ApprU.UserId
-- 									AND User.ClientId = @ClientId
-- 									AND User.IsActive = 1
-- 									AND User.UserId <> pUserId
-- 								INNER JOIN ApprovalSubStepOrganization filter
-- 									ON filter.ApprovalSubStepId = ApprU.ApprovalSubStepId
-- 									AND filter.UserId = User.UserId
-- 									AND filter.OrganizationId = @OrgId
-- 							WHERE ApprU.ApprovalSubStepId = @ApprovalSubStepId
-- 							AND ApprU.ManualAssignmentOnly = 0;
-- 
-- 					ELSEIF @ApprovalStepUserFilterType = 3 THEN
-- 						IF @DEBUGONLY = 1 THEN
-- 							SELECT
-- 								'Filtering by department...';
-- 						END IF;
-- 						INSERT INTO zz_Approvers
-- 							SELECT
-- 								CONNECTION_ID(),
-- 								User.UserId,
-- 								0
-- 							FROM ApprovalSubStepUser ApprU
-- 								INNER JOIN User
-- 									ON User.UserId = ApprU.UserId
-- 									AND User.ClientId = @ClientId
-- 									AND User.IsActive = 1
-- 									AND User.UserId <> pUserId
-- 								INNER JOIN ApprovalSubStepUserDepartment filter
-- 									ON filter.ApprovalSubStepId = ApprU.ApprovalSubStepId
-- 									AND filter.UserId = User.UserId
-- 									AND filter.DepartmentId = @DepartmentId
-- 							WHERE ApprU.ApprovalSubStepId = @ApprovalSubStepId
-- 							AND ApprU.ManualAssignmentOnly = 0;
-- 					ELSEIF @ApprovalStepUserFilterType = 4 THEN
-- 						IF @DEBUGONLY = 1 THEN
-- 							SELECT
-- 								'Filtering by GL...';
-- 						END IF;
-- 						INSERT INTO zz_Approvers
-- 							SELECT
-- 								CONNECTION_ID(),
-- 								User.UserId,
-- 								0
-- 							FROM ApprovalSubStepUser ApprU
-- 								INNER JOIN User
-- 									ON User.UserId = ApprU.UserId
-- 									AND User.ClientId = @ClientId
-- 									AND User.IsActive = 1
-- 									AND User.UserId <> pUserId
-- 								INNER JOIN ApprovalSubStepUserGL filter
-- 									ON filter.ApprovalSubStepId = ApprU.ApprovalSubStepId
-- 									AND filter.UserId = User.UserId
-- 									AND filter.GLCodeId IN (SELECT
-- 											GLCodeId
-- 										FROM ApprovalHistory
-- 										WHERE InvoiceId = @InvoiceId)
-- 							WHERE ApprU.ApprovalSubStepId = @ApprovalSubStepId
-- 							AND ApprU.ManualAssignmentOnly = 0;
-- 					ELSEIF @ApprovalStepUserFilterType = 5 THEN
-- 						IF @DEBUGONLY = 1 THEN
-- 							SELECT
-- 								'Filtering by Vendor department...';
-- 						END IF;
-- 						INSERT INTO zz_Approvers
-- 							SELECT
-- 								CONNECTION_ID(),
-- 								User.UserId,
-- 								0
-- 							FROM ApprovalSubStepUser ApprU
-- 								INNER JOIN User
-- 									ON User.UserId = ApprU.UserId
-- 									AND User.ClientId = @ClientId
-- 									AND User.IsActive = 1
-- 									AND User.UserId <> pUserId
-- 								INNER JOIN ApprovalSubStepUserVendorDepartment filter
-- 									ON filter.ApprovalSubStepId = ApprU.ApprovalSubStepId
-- 									AND filter.UserId = User.UserId
-- 									AND filter.VendorId = @VendorId
-- 									AND filter.DepartmentId = @DepartmentId
-- 							WHERE ApprU.ApprovalSubStepId = @ApprovalSubStepId
-- 							AND ApprU.ManualAssignmentOnly = 0;
-- 					ELSEIF @ApprovalStepUserFilterType = 6 THEN
-- 						IF @DEBUGONLY = 1 THEN
-- 							SELECT
-- 								'Filtering by Vendor account number...';
-- 						END IF;
-- 						INSERT INTO zz_Approvers
-- 							SELECT
-- 								CONNECTION_ID(),
-- 								User.UserId,
-- 								0
-- 							FROM ApprovalSubStepUser ApprU
-- 								INNER JOIN User
-- 									ON User.UserId = ApprU.UserId
-- 									AND User.ClientId = @ClientId
-- 									AND User.IsActive = 1
-- 									AND User.UserId <> pUserId
-- 								INNER JOIN ApprovalSubStepUserVendorAccountNumber filter
-- 									ON filter.ApprovalSubStepId = ApprU.ApprovalSubStepId
-- 									AND filter.UserId = User.UserId
-- 									AND filter.VendorId = @VendorId
-- 									AND filter.AccountNumber = @AccountCode
-- 							WHERE ApprU.ApprovalSubStepId = @ApprovalSubStepId
-- 							AND ApprU.ManualAssignmentOnly = 0;
-- 					ELSEIF @ApprovalStepUserFilterType = 7 THEN
-- 						IF @DEBUGONLY = 1 THEN
-- 							SELECT
-- 								'Filtering by project...';
-- 						END IF;
-- 						INSERT INTO zz_Approvers
-- 							SELECT
-- 								CONNECTION_ID(),
-- 								User.UserId,
-- 								0
-- 							FROM ApprovalSubStepUser ApprU
-- 								INNER JOIN User
-- 									ON User.UserId = ApprU.UserId
-- 									AND User.ClientId = @ClientId
-- 									AND User.IsActive = 1
-- 									AND User.UserId <> pUserId
-- 								INNER JOIN ApprovalSubStepUserProject filter
-- 									ON filter.ApprovalSubStepId = ApprU.ApprovalSubStepId
-- 									AND filter.UserId = User.UserId
-- 									AND filter.ProjectTypeId = @ProjectTypeId
-- 							WHERE ApprU.ApprovalSubStepId = @ApprovalSubStepId
-- 							AND ApprU.ManualAssignmentOnly = 0;
-- 					ELSEIF @ApprovalStepUserFilterType = 8 THEN
-- 						IF @DEBUGONLY = 1 THEN
-- 							SELECT
-- 								'Filtering by Vendor Org Data...';
-- 						END IF;
-- 						INSERT INTO zz_Approvers
-- 							SELECT
-- 								CONNECTION_ID(),
-- 								User.UserId,
-- 								0
-- 							FROM ApprovalSubStepUser ApprU
-- 								INNER JOIN User
-- 									ON User.UserId = ApprU.UserId
-- 									AND User.ClientId = @ClientId
-- 									AND User.IsActive = 1
-- 									AND User.UserId <> pUserId
-- 								INNER JOIN ApprovalSubStepUserVendorOrgData filter
-- 									ON filter.ApprovalSubStepId = ApprU.ApprovalSubStepId
-- 									AND filter.UserId = User.UserId
-- 									AND filter.VendorId = @VendorId
-- 									AND filter.OrgId = @OrgId
-- 							WHERE ApprU.ApprovalSubStepId = @ApprovalSubStepId
-- 							AND ApprU.ManualAssignmentOnly = 0;
-- 					ELSEIF @ApprovalStepUserFilterType = 9 THEN
-- 						IF @DEBUGONLY = 1 THEN
-- 							SELECT
-- 								'Filtering by PurchasedForDepartment...';
-- 						END IF;
-- 						SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Filtering by PurchaserForDepartment not implemented yet.', MYSQL_ERRNO = 1;
-- 						LEAVE ThisProc;
-- 					END IF;
-- 
-- 
-- 					IF EXISTS (SELECT
-- 								COUNT(*)
-- 							FROM zz_Approvers
-- 							WHERE CId = CONNECTION_ID()) THEN
-- 						IF @DEBUGONLY = 1 THEN
-- 							SELECT
-- 								'Leaving Filtering loop';
-- 						END IF;
-- 						LEAVE FiltersLoop;
-- 					END IF;
-- 
-- 
-- 				END LOOP FiltersLoop;
-- 				CLOSE curFilters;
-- 			END Filters;
-- 
-- 			/*
-- 			** if there are no user filters then grab all the users in that substep
-- 			*/
-- 			IF NOT EXISTS (SELECT
-- 						*
-- 					FROM ApprovalSubStepUserFilter
-- 					WHERE ApprovalSubStepId = @ApprovalSubStepId) THEN
-- 				INSERT INTO zz_Approvers
-- 					SELECT
-- 						CONNECTION_ID(),
-- 						User.UserId,
-- 						0
-- 					FROM ApprovalSubStepUser ApprU
-- 						INNER JOIN User
-- 							ON User.UserId = ApprU.UserId
-- 							AND User.ClientId = @ClientId
-- 							AND User.IsActive = 1
-- 							AND User.UserId <> pUserId
-- 					WHERE ApprU.ApprovalSubStepId = @ApprovalSubStepId
-- 					AND ApprU.ManualAssignmentOnly = 0;
-- 			END IF;
END;	
	
		END while GeneralApprovalLogic;



		/*
		** Final Approved 
		**	
		**	Now do this:
		**		
		**
		*/
		IF pMessage = 'Final' THEN
			set pMessage = '';
			IF @DEBUGONLY = 1 THEN
				SELECT 'Calling final approval...';
			END IF;
			CALL _x_InvoiceApproveFinal(@InvoiceId, pUserId, @FromApprovalSubStepId, 0, 0, @DEBUGONLY, pMessage);
			if pMessage <> 'Final' THEN
				select pMessage;
				SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = pMessage, MYSQL_ERRNO = 1;
			end if;
			LEAVE ThisProc;
		END IF;

-- 		/* 
-- 		**
-- 		**	CatchAll - Something in the step was not caught, so it falls to this.
-- 		**
-- 		*/
-- 		IF NOT EXISTS (SELECT 1 FROM zz_Approvers WHERE CID = CONNECTION_ID()) THEN
-- 			IF @DEBUGONLY = 1 THEN
-- 				SELECT	'No approvers getting Catchall users...';
-- 			END IF;
-- 			INSERT INTO zz_Approvers
-- 				SELECT	CONNECTION_ID(),
-- 						User.UserId,
-- 						0
-- 				FROM	ApprovalSubStepCatchAllUsers CatchAll
-- 						INNER JOIN User				ON User.ClientId = @ClientId
-- 														AND User.UserId = CatchAll.UserId
-- 				WHERE	ApprovalSubStepId = @ApprovalSubStepId
-- 						AND User.IsActive = 1;
-- 		END IF;



		/* 
		**	if after the catch all there are no approvers, then send to the admins
		*/
		IF NOT EXISTS (SELECT 1 FROM zz_Approvers WHERE CID = CONNECTION_ID()) THEN
			IF @DEBUGONLY = 1 THEN
				SELECT	'No approvers getting after Catchall users/sending to admins...';
			END IF;
			set @NotificationMessage = concat('Assignment issue:',@NotificationMessage);
			INSERT INTO zz_Approvers
				SELECT	CONNECTION_ID(),
						User.UserId,
						0
				FROM	User 
						inner join ClientUserRoles cur 	ON cur.UserId = User.UserId
						INNER JOIN ClientRoles cr		ON cr.RoleId = cur.RoleId
				WHERE	User.ClientId = @ClientId
						AND User.IsActive = 1
						and User.IsCloudxUser = 0
						and cr.isAdmin = 1;
		END IF;


		/*
		**
		**	Load all the approvers to their respective queues
		**	Type	= 0	Approval
		**			= 1 Exception
		**			= 2 Partial approval
		**	State 	= 1 Notification ? 
		**			= 2 Assigned invoice
		**			= 3 Delegated invoice (Request)
		**			= 4 Escalated invoice
		**
		*/

		IF @DEBUGONLY = 1 THEN
			select * from zz_Approvers;
		end if;

		IF @DEBUGONLY = 1 THEN
			SELECT	
				'UserInvoiceAssignment',
				@InvoiceId,
				zz_Approvers.UserId,
				0 AS Type,
				1 AS State,
				@ApprovalSubStepId,
				NULL AS HoldStartDate,
				NULL AS HoldEndDate,
				@Now AS DateCreated,
				NULL AS AssignBackToUserId,
				NULL AS Comments
			FROM zz_Approvers
			WHERE CID = CONNECTION_ID();
		end if;

		DELETE
			FROM UserInvoiceAssignment
		WHERE InvoiceId = @InvoiceId;

		delete Data
			from	UserNotification Data
					inner join User u	on u.UserId = Data.UserId
			where 	u.ClientId = @ClientId
					and Data.Source = 'Approval' 
					and Data.LinkPage = 'Invoice' 
					and Data.LinkValue = @InvoiceId 
					and Data.ReadDate is null;

		-- Steven
		insert INTO UserInvoiceAssignmentHistory(InvoiceId, FromApprovalSubStepId, FromApprovalSubStepUserId,
															ToApprovalSubStepId, ToApprovalSubStepUserId,
															ApprovedOn, AmountApproved)
			SELECT	@InvoiceId, @FromApprovalSubStepId, pUserId, @ApprovalSubStepId, zz_Approvers.UserId, @Now, @InvoiceTotal
			FROM 	zz_Approvers
			WHERE	CID = CONNECTION_ID();


		INSERT INTO UserInvoiceAssignment (InvoiceId, UserId, Type, State, ApprovalSubStepId, HoldStartDate, HoldEndDate, DateCreated, AssignBackToUserId, Comments)
			SELECT	@InvoiceId,
					zz_Approvers.UserId,
					0 						AS Type,
					1 						AS State,
					@ApprovalSubStepId,
					NULL 					AS HoldStartDate,
					NULL 					AS HoldEndDate,
					@Now 					AS DateCreated,
					NULL 					AS AssignBackToUserId,
					NULL 					AS Comments
			FROM	zz_Approvers
			WHERE	CID = CONNECTION_ID();
		
		SELECT	GROUP_CONCAT(distinct UserId separator ';')
		into 	@Users
		from 	zz_Approvers
		WHERE	CID = CONNECTION_ID();


		call _x_Notify(@Users, 'Invoice approval', @NotificationMessage, 'Approval', 'Invoice', @InvoiceId, null);


		IF EXISTS (SELECT	1
					FROM	zz_Approvers
					WHERE	CID = CONNECTION_ID()) THEN
			SET pMessage = @OKResponse;
		END IF;



		/*
		** Get all approvers and create 1 line: "Penning, Steven;Penning Patrick;Penning, Cathy"
		*/
		SET @InvoiceHistoryApprovers = '';
		SELECT	GROUP_CONCAT(CONCAT(u.LastName, ', ', u.FirstName) order by u.LastName SEPARATOR ';') 
		INTO	@InvoiceHistoryApprovers
		FROM 	zz_Approvers
				INNER JOIN User u		ON u.UserId = zz_Approvers.UserId
		WHERE 	CID = CONNECTION_ID();

		/*
		**
		**	Add to the invoice history
		**
		*/
		IF @DEBUGONLY = 1 THEN
			SELECT
				'InvoiceHistory',
				@InvoiceId,
				'System' AS Actor,
				'Notification' AS Action,
				@Now AS ActionDate,
				@ApproverName AS PreviousData,
				@InvoiceHistoryApprovers AS NewData,
				'Approvers' AS Field,
				@InitialStatus AS InitialStatus,
				'In Approval' AS CurentStatus,
				null AS ActorId,
				NULL AS OldId;
		end if;

		INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId, OldID)
			SELECT
				@InvoiceId,
				'System' AS Actor,
				'Notification' AS Action,
				@Now AS ActionDate,
				@ApproverName AS PreviousData,
				@InvoiceHistoryApprovers AS NewData,
				'Approvers' AS Field,
				@InitialStatus AS InitialStatus,
				'In Approval' AS CurentStatus,
				null AS ActorId,
				NULL AS OldId;



	END ThisProc ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceApproveFilters` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceApproveFilters`(

-- noformat
	in pUserId				char(36),
	in pClientId			int,
	in pInvoiceId			int,
	in pVendorId			int,
	in pDepartmentId		int,
	in pOrgId				int,
	in pAccountCode			varchar(300),
	in pProjectTypeId		int,
	in pApprovalSubStepId	int,
	IN pDEBUGONLY 			int
	)
ThisProc:BEGIN
	/*
	**
	** Get approvers and filter out everyone that is not on the FilterType
	** If there are no approvers, then get the next filterType
	**
	*/
	DECLARE varApprovalForwardingRule int;
	declare curFilters_eof int default(0);
	DECLARE curFilters CURSOR FOR
			SELECT	ApprovalStepUserFilterType
			FROM	ApprovalSubStepUserFilter assuf
			WHERE	ApprovalSubStepId = pApprovalSubStepId;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET curFilters_eof = 1;


	if pDEBUGONLY = 1 THEN
		select 'Get approvers and filter out everyone that is not on the FilterType', @ApprovalSubStepId, CONNECTION_ID();
	end if;



	OPEN curFilters;
	FiltersLoop:LOOP
		SET curFilters_eof = 0;
		SET @ApprovalStepUserFilterType = -1;
		FETCH FROM curFilters INTO varApprovalForwardingRule;


		IF curFilters_eof = 1 THEN
			LEAVE FiltersLoop;
		END IF;
		SET @ApprovalStepUserFilterType = varApprovalForwardingRule;
		IF @ApprovalStepUserFilterType = 0 THEN
			IF pDEBUGONLY = 1 THEN
				SELECT
					'Filtering by Vendor...';
			END IF;

			INSERT INTO zz_Approvers
				SELECT
					CONNECTION_ID(),
					User.UserId,
					0
				FROM ApprovalSubStepUser ApprU
					INNER JOIN User
						ON User.UserId = ApprU.UserId
						AND User.ClientId = pClientId
						AND User.IsActive = 1
						AND User.UserId <> pUserId
					INNER JOIN ApprovalSubStepUserVendor filter
						ON filter.ApprovalSubStepId = ApprU.ApprovalSubStepId
						AND filter.UserId = User.UserId
						AND filter.VendorId = pVendorId
				WHERE ApprU.ApprovalSubStepId = pApprovalSubStepId
				AND ApprU.ManualAssignmentOnly = 0;

		ELSEIF @ApprovalStepUserFilterType = 1 THEN
			IF pDEBUGONLY = 1 THEN
				SELECT
					'Filtering by POPurchaser...';
			END IF;
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Filtering by POPurchaser not yet implemented yet.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		ELSEIF @ApprovalStepUserFilterType = 2 THEN
			IF pDEBUGONLY = 1 THEN
				SELECT
					'Filtering by Organization...';
			END IF;
			INSERT INTO zz_Approvers
				SELECT	CONNECTION_ID(),
						User.UserId,
						0
				FROM ApprovalSubStepUser ApprU
					INNER JOIN User									ON User.UserId = ApprU.UserId
																		AND User.ClientId = pClientId
																		AND User.IsActive = 1
																		AND User.UserId <> pUserId
					INNER JOIN ApprovalSubStepOrganization filter	ON filter.ApprovalSubStepId = ApprU.ApprovalSubStepId
																		AND filter.UserId = User.UserId
																		AND filter.OrganizationId = pOrgId
				WHERE ApprU.ApprovalSubStepId = pApprovalSubStepId
				AND ApprU.ManualAssignmentOnly = 0;

		ELSEIF @ApprovalStepUserFilterType = 3 THEN
			IF pDEBUGONLY = 1 THEN
				SELECT
					'Filtering by department...';
			END IF;
			INSERT INTO zz_Approvers
				SELECT
					CONNECTION_ID(),
					User.UserId,
					0
				FROM ApprovalSubStepUser ApprU
					INNER JOIN User
						ON User.UserId = ApprU.UserId
						AND User.ClientId = pClientId
						AND User.IsActive = 1
						AND User.UserId <> pUserId
					INNER JOIN ApprovalSubStepUserDepartment filter
						ON filter.ApprovalSubStepId = ApprU.ApprovalSubStepId
						AND filter.UserId = User.UserId
						AND filter.DepartmentId = pDepartmentId
				WHERE ApprU.ApprovalSubStepId = pApprovalSubStepId
				AND ApprU.ManualAssignmentOnly = 0;
		ELSEIF @ApprovalStepUserFilterType = 4 THEN
			IF pDEBUGONLY = 1 THEN
				SELECT
					'Filtering by GL...';
			END IF;
			INSERT INTO zz_Approvers
				SELECT
					CONNECTION_ID(),
					User.UserId,
					0
				FROM ApprovalSubStepUser ApprU
					INNER JOIN User
						ON User.UserId = ApprU.UserId
						AND User.ClientId = pClientId
						AND User.IsActive = 1
						AND User.UserId <> pUserId
					INNER JOIN ApprovalSubStepUserGL filter
						ON filter.ApprovalSubStepId = ApprU.ApprovalSubStepId
						AND filter.UserId = User.UserId
						AND filter.GLCodeId IN (SELECT
								GLCodeId
							FROM ApprovalHistory
							WHERE InvoiceId = pInvoiceId)
				WHERE ApprU.ApprovalSubStepId = pApprovalSubStepId
				AND ApprU.ManualAssignmentOnly = 0;
		ELSEIF @ApprovalStepUserFilterType = 5 THEN
			IF pDEBUGONLY = 1 THEN
				SELECT
					'Filtering by Vendor department...';
			END IF;
			INSERT INTO zz_Approvers
				SELECT
					CONNECTION_ID(),
					User.UserId,
					0
				FROM ApprovalSubStepUser ApprU
					INNER JOIN User
						ON User.UserId = ApprU.UserId
						AND User.ClientId = pClientId
						AND User.IsActive = 1
						AND User.UserId <> pUserId
					INNER JOIN ApprovalSubStepUserVendorDepartment filter
						ON filter.ApprovalSubStepId = ApprU.ApprovalSubStepId
						AND filter.UserId = User.UserId
						AND filter.VendorId = pVendorId
						AND filter.DepartmentId = pDepartmentId
				WHERE ApprU.ApprovalSubStepId = pApprovalSubStepId
				AND ApprU.ManualAssignmentOnly = 0;
		ELSEIF @ApprovalStepUserFilterType = 6 THEN
			IF pDEBUGONLY = 1 THEN
				SELECT
					'Filtering by Vendor account number...';
			END IF;
			INSERT INTO zz_Approvers
				SELECT
					CONNECTION_ID(),
					User.UserId,
					0
				FROM ApprovalSubStepUser ApprU
					INNER JOIN User
						ON User.UserId = ApprU.UserId
						AND User.ClientId = pClientId
						AND User.IsActive = 1
						AND User.UserId <> pUserId
					INNER JOIN ApprovalSubStepUserVendorAccountNumber filter
						ON filter.ApprovalSubStepId = ApprU.ApprovalSubStepId
						AND filter.UserId = User.UserId
						AND filter.VendorId = pVendorId
						AND filter.AccountNumber = pAccountCode
				WHERE ApprU.ApprovalSubStepId = pApprovalSubStepId
				AND ApprU.ManualAssignmentOnly = 0;
		ELSEIF @ApprovalStepUserFilterType = 7 THEN
			IF pDEBUGONLY = 1 THEN
				SELECT
					'Filtering by project...';
			END IF;
			INSERT INTO zz_Approvers
				SELECT
					CONNECTION_ID(),
					User.UserId,
					0
				FROM ApprovalSubStepUser ApprU
					INNER JOIN User
						ON User.UserId = ApprU.UserId
						AND User.ClientId = pClientId
						AND User.IsActive = 1
						AND User.UserId <> pUserId
					INNER JOIN ApprovalSubStepUserProject filter
						ON filter.ApprovalSubStepId = ApprU.ApprovalSubStepId
						AND filter.UserId = User.UserId
						AND filter.ProjectTypeId = pProjectTypeId
				WHERE ApprU.ApprovalSubStepId = pApprovalSubStepId
				AND ApprU.ManualAssignmentOnly = 0;
		ELSEIF @ApprovalStepUserFilterType = 8 THEN
			IF pDEBUGONLY = 1 THEN
				SELECT
					'Filtering by Vendor Org Data...';
			END IF;
			INSERT INTO zz_Approvers
				SELECT
					CONNECTION_ID(),
					User.UserId,
					0
				FROM ApprovalSubStepUser ApprU
					INNER JOIN User
						ON User.UserId = ApprU.UserId
						AND User.ClientId = pClientId
						AND User.IsActive = 1
						AND User.UserId <> pUserId
					INNER JOIN ApprovalSubStepUserVendorOrgData filter
						ON filter.ApprovalSubStepId = ApprU.ApprovalSubStepId
						AND filter.UserId = User.UserId
						AND filter.VendorId = pVendorId
						AND filter.OrgId = pOrgId
				WHERE ApprU.ApprovalSubStepId = pApprovalSubStepId
				AND ApprU.ManualAssignmentOnly = 0;
		ELSEIF @ApprovalStepUserFilterType = 9 THEN
			IF pDEBUGONLY = 1 THEN
				SELECT
					'Filtering by PurchasedForDepartment...';
			END IF;
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Filtering by PurchaserForDepartment not implemented yet.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;


		IF EXISTS (SELECT
					COUNT(*)
				FROM zz_Approvers
				WHERE CId = CONNECTION_ID()) THEN
			IF pDEBUGONLY = 1 THEN
				SELECT
					'Leaving Filtering loop';
			END IF;
			LEAVE FiltersLoop;
		END IF;


	END LOOP FiltersLoop;
	CLOSE curFilters;

	/*
	** if there are no user filters then grab all the users in that substep
	*/
	IF NOT EXISTS (SELECT
				*
			FROM ApprovalSubStepUserFilter
			WHERE ApprovalSubStepId = pApprovalSubStepId) THEN
		INSERT INTO zz_Approvers
			SELECT
				CONNECTION_ID(),
				User.UserId,
				0
			FROM ApprovalSubStepUser ApprU
				INNER JOIN User
					ON User.UserId = ApprU.UserId
					AND User.ClientId = pClientId
					AND User.IsActive = 1
					AND User.UserId <> pUserId
			WHERE ApprU.ApprovalSubStepId = pApprovalSubStepId
			AND ApprU.ManualAssignmentOnly = 0;
	END IF;



	/* 
	**
	**	CatchAll - Something in the step was not caught, so it falls to this.
	**
	*/
	IF NOT EXISTS (SELECT 1 FROM zz_Approvers WHERE CID = CONNECTION_ID()) THEN
		IF @DEBUGONLY = 1 THEN
			SELECT	'No approvers getting Catchall users...';
		END IF;
		INSERT INTO zz_Approvers
			SELECT	CONNECTION_ID(),
					User.UserId,
					0
			FROM	ApprovalSubStepCatchAllUsers CatchAll
					INNER JOIN User				ON User.ClientId = pClientId
													AND User.UserId = CatchAll.UserId
			WHERE	ApprovalSubStepId = pApprovalSubStepId
					AND User.IsActive = 1;
	END IF;



end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceApproveFinal` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceApproveFinal`(
-- noformat
	IN pInvoiceId 					int,
	IN pUserId 						varchar(36),
	IN pFromApprovalSubStepId		int,
	IN pSubmittedThruRMS 			bit,
	IN pCalledFromAutoApproval 		bit,
	IN pForTesting 					int,
	INOUT pMessage 					varchar(500))
ThisProc:
	BEGIN
		DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			GET DIAGNOSTICS CONDITION 1
			@p1 = MESSAGE_TEXT;
			SET pMessage = @p1;
		END;

		SET @Now = UTC_TIMESTAMP();
		SET @DEBUGONLY = IFNULL(pForTesting, 0);
		SET pUserId = IFNULL(pUserId, '00000000-0000-0000-0000-000000000000');
		SET pMessage = 'There was an issue with the final approval.';

		SET @InvoiceId = pInvoiceId;
		SET @IsPO = 0;
		SET @ClientId = 0;
		SET @isArchived = 0;
		SET @CostCenter = '';
		SET @OriginalApprovalStatusId = 0;
		SET @ApprovalStatusId = 0;
		SET @isVersace = 0;
		SET @isBOL = 0;
		SET @isHAULER = 0;
		SET @isProfitDistribution = 0;
		SET @InvoiceBalance = 0;
		SET @InvoiceTotal = 0;

		SET @SendBOLToApprovalOnDataEntry = 0;
		SET @CalculateInvoiceTotalWithTax = 0;
		SET @ExcludeTaxFromInvoiceTotalForNoPOApproval = 0;
		SET @IgnorePOExistsWhenApprovingOrAccepting = 0;
		SET @KeepInvoiceTypeBOLUnchanged = 0;
		SET @ShowSubmitThroughRMSButtonForArchive = 0;
		SET @SetPostingDateSameAsApprovedDateWhenApproving = 0;
		SET @SetGLDateCurrentDatewhenApproving = 0;
		SET @IgnorePORemovalForClientAfterInvoiceApproval = 0;
		SET @MatchLineItemDetailWithPOByRecievedTransactionIdAndPONumber = 0;
		SET @CleanInvoicePOesFromPOTableAfterInvoiceApproval = 0;
		SET @AmountApproved = 0;
		SET @LastActionByName = 'System';

		/*
		**	Get the name of the user
		*/
		SELECT	IFNULL(CONCAT(u.FirstName, ' ', u.LastName), 'System') INTO @LastActionByName
		FROM	User u
		WHERE	u.UserId = pUserId;


		/*
		**
		**	Information about the Object
		**
		**/
		SELECT	i.ClientId,
				i.IsPOInvoice,
				CASE WHEN IFNULL(i.InvoiceType, '') = 'Archive' THEN 1 ELSE 0 END,
				CASE WHEN IFNULL(i.InvoiceType, '') = 'BOL' THEN 1 ELSE 0 END,
				CASE WHEN IFNULL(i.InvoiceType, '') = 'HAULERINVOICE' THEN 1 ELSE 0 END,
				CASE WHEN IFNULL(i.InvoiceType, '') = 'Profit Distribution' THEN 1 ELSE 0 END,
				i.ApprovalStatusId,
				cc.CompanyCode,
				InvoiceTotal
		INTO	@ClientId, @IsPo, @isArchived, @IsBOL, @isHAULER, @isProfitDistribution, @OriginalApprovalStatusId, @CostCenter, @InvoiceTotal
		FROM Invoice i
			LEFT JOIN ClientCompany cc	ON cc.ClientId = i.ClientId
											AND cc.CompanyCode = i.CompanyCode
											AND cc.IsActive = 1
		WHERE i.InvoiceId = @InvoiceId;

		SET @ApprovalStatusId = @OriginalApprovalStatusId;

		IF EXISTS (SELECT
					1
				FROM ClientSpecificConfig
				WHERE ClientSpecificConfigType = 519
				AND ClientId = @ClientId) THEN
			SET @SendBOLToApprovalOnDataEntry = 1;
		END IF;
		IF EXISTS (SELECT
					1
				FROM ClientSpecificConfig
				WHERE ClientSpecificConfigType = 442
				AND ClientId = @ClientId) THEN
			SET @CalculateInvoiceTotalWithTax = 1;
		END IF;
		IF EXISTS (SELECT
					1
				FROM ClientSpecificConfig
				WHERE ClientSpecificConfigType = 49
				AND ClientId = @ClientId) THEN
			SET @ExcludeTaxFromInvoiceTotalForNoPOApproval = 1;
		END IF;
		IF EXISTS (SELECT
					1
				FROM ClientSpecificConfig
				WHERE ClientSpecificConfigType = 404
				AND ClientId = @ClientId) THEN
			SET @IgnorePOExistsWhenApprovingOrAccepting = 1;
		END IF;
		IF EXISTS (SELECT
					1
				FROM ClientSpecificConfig
				WHERE ClientSpecificConfigType = 654
				AND ClientId = @ClientId) THEN
			SET @KeepInvoiceTypeBOLUnchanged = 1;
		END IF;
		IF EXISTS (SELECT
					1
				FROM ClientSpecificConfig
				WHERE ClientSpecificConfigType = 47
				AND ClientId = @ClientId) THEN
			SET @ShowSubmitThroughRMSButtonForArchive = 1;
		END IF;
		IF EXISTS (SELECT
					1
				FROM ClientSpecificConfig
				WHERE ClientSpecificConfigType = 678
				AND ClientId = @ClientId) THEN
			SET @SetPostingDateSameAsApprovedDateWhenApproving = 1;
		END IF;
		IF EXISTS (SELECT
					1
				FROM ClientSpecificConfig
				WHERE ClientSpecificConfigType = 369
				AND ClientId = @ClientId) THEN
			SET @SetGLDateCurrentDatewhenApproving = 1;
		END IF;
		IF EXISTS (SELECT
					1
				FROM ClientSpecificConfig
				WHERE ClientSpecificConfigType = 439
				AND ClientId = @ClientId) THEN
			SET @IgnorePORemovalForClientAfterInvoiceApproval = 1;
		END IF;
		IF EXISTS (SELECT
					1
				FROM ClientSpecificConfig
				WHERE ClientSpecificConfigType = 584
				AND ClientId = @ClientId) THEN
			SET @MatchLineItemDetailWithPOByRecievedTransactionIdAndPONumber = 1;
		END IF;
		IF EXISTS (SELECT
					1
				FROM ClientSpecificConfig
				WHERE ClientSpecificConfigType = 242
				AND ClientId = @ClientId) THEN
			SET @CleanInvoicePOesFromPOTableAfterInvoiceApproval = 1;
		END IF;


		IF @ClientId = 64 THEN
			SET @isVersace = 0;
		END IF;

		IF @IsPO = 0 THEN
			SELECT
				IFNULL(SUM(pah.AmountAppoved), 0) INTO @AmountApproved
			FROM PendingApprovalHistory pah
			WHERE pah.InvoiceId = @InvoiceId;
			IF @AmountApproved = 0 THEN
				SELECT
					IFNULL(SUM(pah.AmountAppoved), 0) INTO @AmountApproved
				FROM ApprovalHistory pah
				WHERE pah.InvoiceId = @InvoiceId;
			END IF;
		ELSE
			SELECT
				IFNULL(SUM(TotalAmount), 0) INTO @AmountApproved
			FROM LineItemDetail
			WHERE InvoiceId = @InvoiceId;
		END IF;

		IF @DEBUGONLY = 1 THEN
			SELECT
				@SendBOLToApprovalOnDataEntry,
				@CalculateInvoiceTotalWithTax,
				@ExcludeTaxFromInvoiceTotalForNoPOApproval,
				@IgnorePOExistsWhenApprovingOrAccepting,
				@KeepInvoiceTypeBOLUnchanged,
				@ShowSubmitThroughRMSButtonForArchive,
				@SetPostingDateSameAsApprovedDateWhenApproving,
				@SetGLDateCurrentDatewhenApproving,
				@IgnorePORemovalForClientAfterInvoiceApproval,
				@MatchLineItemDetailWithPOByRecievedTransactionIdAndPONumber,
				@CleanInvoicePOesFromPOTableAfterInvoiceApproval;
		end IF;

		/*
		** Balance Housekeeping
		*/
		IF @IsPO = 1 THEN
			SELECT
				CONVERT(
					ifnull(CASE WHEN @CalculateInvoiceTotalWithTax = 1 THEN ifnull(nullif(i.InvoiceTotalWithTax, 0.00), i.InvoiceTotal) ELSE i.InvoiceTotal END, 0)
					- IFNULL(i.Tax, 0)
					- IFNULL(i.FreightCharges, 0)
					- IFNULL(i.CalculableOtherCharges, 0)
					- IFNULL(i.AdjustmentAmount, 0)
					- ifnull(@AmountApproved, 0)
					,decimal(18, 2))
				INTO @InvoiceBalance
			FROM Invoice i
			WHERE i.InvoiceId = @InvoiceId;
		ELSE
			IF @isVersace = 0 THEN
				SELECT
					CONVERT(i.InvoiceTotal - @AmountApproved, decimal(18, 2)) INTO @InvoiceBalance
				FROM Invoice i
				WHERE i.InvoiceId = @InvoiceId;
			ELSE
				SELECT
					CONVERT(
					i.InvoiceTotal - @AmountApproved -
					CASE WHEN @CostCenter = '450' AND
							@ExcludeTaxFromInvoiceTotalForNoPOApproval = 1 THEN IFNULL(i.Tax, 0) ELSE 0 END, decimal(18, 2)) INTO @InvoiceBalance
				FROM Invoice i
				WHERE i.InvoiceId = @InvoiceId;
			END IF;
		END IF;


		/*
		**	Check is the invoice has PO Data
		*/

		SET @PONumber = NULL;
		SET @POLookup = NULL;
		SET @POReverseLookup = NULL;
		SET @POReverseLookupVariance = NULL;
		SET @LineItemsQuantityFilterVariance = NULL;
		IF @IsPO = 1 THEN
			SELECT
				PONumber,
				POLookup,
				POReverseLookup,
				POReverseLookupVariance,
				LineItemsQuantityFilterVariance INTO @PONumber, @POLookup, @POReverseLookup, @POReverseLookupVariance, @LineItemsQuantityFilterVariance
			FROM Invoice
			WHERE InvoiceId = @InvoiceId;
			-- AND IFNULL(LineItemsQuantityFiltervariance, 0) > 0;

			SET @PONumber = REPLACE(@PONumber, '|', ',');

			IF @IgnorePOExistsWhenApprovingOrAccepting = 0 THEN
				SET @POCount = 0;
				CALL GetPONumbersByFilterCriteria_Original(@ClientId, @PONumber, @POLookup, @POReverseLookup, @POReverseLookupVariance, @LineItemsQuantityFilterVariance, @InvoiceId, 1);
				SELECT
					COUNT(*) INTO @POCount
				FROM GetPONumbersByFilterCriteriaTempTable;
				-- DROP TEMPORARY TABLE IF EXISTS GetPONumbersByFilterCriteriaTempTable;

				IF @POCount < (SELECT
							COUNT(*)
						FROM LineItemDetail lid
						WHERE lid.InvoiceId = @InvoiceId) THEN
					SET pMessage = 'PO data for this invoice is missing';
					LEAVE ThisProc;
				END IF;
			END IF;

			IF @AmountApproved = 0 THEN
				SET pMessage = 'PO data for this invoice is missing or totals to zero (0)';
				LEAVE ThisProc;
			END IF;
		END IF;


		IF @isArchived = 1 THEN
			IF @DEBUGONLY = 1 THEN
				IF @SendBOLToApprovalOnDataEntry = 1
					AND @isBOL = 1
					AND @ApprovalStatusId = 1 THEN
					SELECT
						'Update Invoice set isPaused = 0, ApprovalStatusId=3, ApprovedDate=UTC_TIMESTAMP(), ApproverId=',
						pUserId;
				ELSE
					IF @KeepInvoiceTypeBOLUnchanged = 1 THEN
						SELECT
							'Update Invoice set isPaused = 0,ApprovalStatusId=5, islocked = 0';
						IF pSubmittedThruRMS = 1
							AND @ShowSubmitThroughRMSButtonForArchive = 1 THEN
							SELECT
								'Update Invoice set USerfield1 = 0';
						END IF;
					ELSE
						SELECT
							'Update Invoice set isPaused = 0,InvoiceType=Archive, reason=Not an invoice (if not already empty)'
						UNION ALL
						SELECT
							'Update Invoice set ApprovalStatusId=5, islocked = 0';
						IF pSubmittedThruRMS = 1
							AND @ShowSubmitThroughRMSButtonForArchive = 1 THEN
							SELECT
								'Update Invoice set USerfield1 = 0';
						END IF;
					END IF;
				END IF;
			end if;
			IF @SendBOLToApprovalOnDataEntry = 1
				AND @isBOL = 1
				AND @ApprovalStatusId = 1 THEN
				UPDATE Invoice
				SET IsPaused = 0,
					ApprovalStatusId = 3,
					AprovedDate = @Now,
					ApproverId = pUserId
				WHERE InvoiceId = @InvoiceId;
			ELSE
				UPDATE Invoice
				SET IsPaused = 0,
					ApprovalStatusId = 5,
					IsLocked = 0,
					InvoiceType = CASE WHEN @KeepInvoiceTypeBOLUnchanged = 0 THEN 'Archive' ELSE InvoiceType END,
					ArchiveReason = CASE WHEN IFNULL(ArchiveReason, '') = '' THEN 'Not an invoice' ELSE ArchiveReason END,
					UserField1 = CASE WHEN pSubmittedThruRMS = 1 AND
							@ShowSubmitThroughRMSButtonForArchive = 1 THEN '0' ELSE UserField1 END
				WHERE InvoiceId = @InvoiceId;
			END IF;

		ELSE
			IF @isHAULER = 1 THEN
				IF @DEBUGONLY = 1 THEN
					SELECT
						'WODetails to Delete',
						'WOId=',
						WOId,
						'InvoiceId=',
						InvoiceId
					FROM WODetails ToDelete
					WHERE ToDelete.WOId IN (SELECT
							w.WOId
						FROM WODetails w
						WHERE w.InvoiceId = @InvoiceId
						AND w.WOId IS NOT NULL)
					AND EXISTS (SELECT
							1
						FROM Invoice i
						WHERE i.InvoiceId = ToDelete.InvoiceId
						AND i.ApproverId = @ApprovalStatusId)
					AND ToDelete.InvoiceId <> @InvoiceId;
					SELECT
						'WOs to Delete',
						'WOId=',
						WOId
					FROM WO ToDelete
					WHERE ToDelete.WOId IN (SELECT
							w.WOId
						FROM WODetails w
						WHERE w.InvoiceId = @InvoiceId
						AND w.WOId IS NOT NULL);
					SELECT
						'Update Invoice set ApprovalStatusId=4,ApprovedDate=UTC_TIMESTAMP(),ApproverId=',
						pUserId;
				end if;
				DELETE ToDelete
					FROM WODetails ToDelete
				WHERE ToDelete.WOId IN (SELECT
							w.WOId
						FROM WODetails w
						WHERE w.InvoiceId = @InvoiceId
						AND w.WOId IS NOT NULL)
					AND EXISTS (SELECT
							1
						FROM Invoice i
						WHERE i.InvoiceId = ToDelete.InvoiceId
						AND i.ApproverId = @ApprovalStatusId)
					AND ToDelete.InvoiceId <> @InvoiceId;
				DELETE ToDelete
					FROM WO ToDelete
				WHERE ToDelete.WOId IN (SELECT
							w.WOId
						FROM WODetails w
						WHERE w.InvoiceId = @InvoiceId
						AND w.WOId IS NOT NULL);
				UPDATE Invoice
				SET ApprovalStatusId = 4,
					AprovedDate = @Now,
					ApproverId = pUserId
				WHERE InvoiceId = @InvoiceId;

			END IF;
			IF @DEBUGONLY = 1 THEN
				SELECT
					'Update invoice set ApprovalStatusId=4, ApproverId = puser, AprovedDate = UTC_TIMESTAMP()';
			end if;
			UPDATE Invoice
			SET ApprovalStatusId = 4,
				AprovedDate = @Now,
				ApproverId = pUserId
			WHERE InvoiceId = @InvoiceId;
		END IF;

		SELECT
			ApprovalStatusId INTO @ApprovalStatusId
		FROM Invoice
		WHERE InvoiceId = @InvoiceId;

		IF @SetPostingDateSameAsApprovedDateWhenApproving = 1
			OR @SetGLDateCurrentDatewhenApproving = 1 THEN
			IF @DEBUGONLY = 1 THEN
				SELECT
					'Update invoice set GLDate=UTC_TIMESTAMP()';
			end if;
			UPDATE Invoice
			SET GLDate = @Now
			WHERE InvoiceId = @InvoiceId;
		END IF;

		IF @DEBUGONLY = 1 THEN
			SELECT
				'Update invoice set AcceptedDate=case when ApprovalStatusId = 5 then UTC_TIMESTAMP() else AcceptedDate end';
		END IF;

		UPDATE Invoice
		SET AcceptedDate = CASE WHEN ApprovalStatusId = 5 THEN @Now ELSE AcceptedDate END
		WHERE InvoiceId = @InvoiceId;


		IF @InvoiceBalance <> 0
			AND NOT EXISTS (SELECT
					1
				FROM Invoice
				WHERE InvoiceId = @InvoiceId
				AND InvoiceType = 'Archive') THEN
			SET pMessage = CONCAT('You are the last approver, but the invoice has still a remaining amount. The remaining amount to be approved is ', FORMAT(@InvoiceBalance, 2));
			LEAVE ThisProc;
		END IF;


		IF @DEBUGONLY = 1 THEN
			SELECT
				CONCAT('Update invoice set LastActionDate=UTC_TIMESTAMP(),LastActionBy=SYSTEM')
			UNION ALL
			SELECT
				'Delete all the entries in UserInvoiceAssignment';
			SELECT
				'InvoiceHistory',
				@InvoiceId,
				'System' AS Actor,
				'Update' AS Action,
				@Now AS ActionDate,
				'' AS PreviousData,
				'' AS NewData,
				'Invoice Status' AS FIELD,
				_x_GetInvoiceStatusName(@OriginalApprovalStatusId) AS InitialStatus,
				_x_GetInvoiceStatusName(@ApprovalStatusId) AS CurentStatus,
				null AS ActorId,
				NULL AS OldId;
		end if;
		UPDATE 	Invoice
		SET 	LastActionDate = @Now,
				LastActionBy = @LastActionByName
		WHERE	InvoiceId = @InvoiceId;
		DELETE
			FROM UserInvoiceAssignment
		WHERE InvoiceId = @InvoiceId;
		INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId, OldID)
			SELECT	@InvoiceId,
					'System' 												AS Actor,
					'Update' 												AS Action,
					@Now 													AS ActionDate,
					'' 														AS PreviousData,
					'' 														AS NewData,
					'Invoice Status' 										AS FIELD,
					_x_GetInvoiceStatusName(@OriginalApprovalStatusId) 		AS InitialStatus,
					_x_GetInvoiceStatusName(@ApprovalStatusId) 				AS CurentStatus,
					NULL								 					AS ActorId,
					NULL 													AS OldId;


-- 		-- Steven
-- 		insert INTO UserInvoiceAssignmentHistory(InvoiceId, FromApprovalSubStepId, FromApprovalSubStepUserId,
-- 															ToApprovalSubStepId, ToApprovalSubStepUserId,
-- 															ApprovedOn, AmountApproved)
-- 			VALUES (@InvoiceId, pFromApprovalSubStepId, pUserId, null, pUserId, @Now, @InvoiceTotal);


		IF @isProfitDistribution = 1 THEN
			IF @DEBUGONLY = 1 THEN
				SELECT
					'INVOICE',
					ClientId,
					InvoiceId 																		AS ParentInvoiceId,
					'???' 																			AS ApprovalStatusId,
					VendorId,
					ah.AmountAppoved 																AS InvoiceTotal,
					InvoiceDate,
					CONCAT(LEFT(REPLACE(v.VendorName, ' ', ''), 3), DATE_FORMAT(@now, '%d%m%Y')) 	AS InvoiceNo,
					InvoiceName,
					BatchId,
					@Now 																			AS ScannedDate,
					isPOInvoice,
					'Invoice' 																		AS InvoiceType,
					i.CompanyCode,
					@Now 																			AS PaymentDueDate,
					1 																				AS ApprovalRequired,
					Comment
				FROM Invoice i
					INNER JOIN ApprovalHistory ah
						ON i.InvoiceId = ah.InvoiceId
					INNER JOIN Vendor v
						ON v.VendorId = i.VendorId
				WHERE Invoice = @InvoiceId;

				SELECT
					'ApprovalHistory',
					i.InvoiceId,
					i.InvoiceTotal AS AmountApproved,
					pUserId AS ApproverId,
					ah.CategoryId,
					i.CompanyCode,
					i.ClientId,
					i.NSDepartmentId,
					ah.GLCodeId,
					ah.SpecialNote,
					@Now AS StateChangedDate,
					ah.TaxableAmount,
					ah.TaxAmount,
					ah.TaxCodeId,
					ah.ProjectId,
					ah.RecoverableTaxAmout
				FROM Invoice i
					INNER JOIN ApprovalHistory ah
						ON i.ParentInvoiceId = ah.InvoiceId
				WHERE i.InvoiceId = @InvoiceId; -- this will read ParentInvoiceId = @InvoiceId

				SELECT
					'InvoiceDocs',
					i.InvoiceId,
					ID.Url
				FROM Invoice i
					INNER JOIN InvoiceDocs id
						ON id.InvoiceId = i.ParentInvoiceId
				WHERE i.InvoiceId = @InvoiceId; -- this will read ParentInvoiceId = @InvoiceId

				SELECT
					'Update invoice set InvoiceType=Archive, ArchiveReason=Not an Invoice, ApprovalStatusId=5,AcceptedDate=@Now';
			end if;
			INSERT INTO invoice (ClientId, ParentInvoiceId, ApprovalStatusId, VendorId, AmountAppoved, InvoiceDate,
									InvoiceNo, InvoiceName, BatchId, ScannedDate, isPOInvoice, InvoiceType,
									CompanyCode, PaymentDueDate, ApprovalRequired, Comment, ItemId)
				SELECT	i.ClientId,
						i.InvoiceId 																	AS ParentInvoiceId,
						'???' 																			AS ApprovalStatusId,
						VendorId,
						ah.AmountAppoved 																AS InvoiceTotal,
						InvoiceDate,
						CONCAT(LEFT(REPLACE(v.VendorName, ' ', ''), 3), DATE_FORMAT(@now, '%d%m%Y')) 	AS InvoiceNo,
						InvoiceName,
						BatchId,
						@Now 																			AS ScannedDate,
						isPOInvoice,
						'Invoice' 																		AS InvoiceType,
						i.CompanyCode,
						@Now 																			AS PaymentDueDate,
						1 																				AS ApprovalRequired,
						Comment,
						ah.ApprovalHistoryID -- Needed to join on the next query, this will later be nulled after work done.
				FROM Invoice i
					INNER JOIN ApprovalHistory ah		ON i.InvoiceId = ah.InvoiceId
					INNER JOIN Vendor v					ON v.VendorId = i.VendorId
				WHERE i.Invoice = @InvoiceId;


			INSERT INTO ApprovalHistory (InvoiceId, AmountApproved, ApproverId, CategoryId, CompanyCode,
											ClientId, NSDepartmentId, GLCodeId, SpecialNote, StateChangedDate,
											TaxableAmount, TaxAmount, TaxCodeId, ProjectId, RecoverableTaxAmout)
				SELECT	i.InvoiceId,
						i.InvoiceTotal AS AmountApproved,
						pUserId AS ApproverId,
						ah.CategoryId,
						i.CompanyCode,
						i.ClientId,
						i.NSDepartmentId,
						ah.GLCodeId,
						ah.SpecialNote,
						@Now AS StateChangedDate,
						ah.TaxableAmount,
						ah.TaxAmount,
						ah.TaxCodeId,
						ah.ProjectId,
						ah.RecoverableTaxAmout
				FROM Invoice i
					INNER JOIN ApprovalHistory ah		ON i.ParentInvoiceId = ah.InvoiceId
															AND i.ItemId = ah.ApprovalHistoryID
				WHERE ParentInvoiceId = @InvoiceId;

			INSERT INTO InvoiceDocs (InvoiceId, Url)
				SELECT	i.InvoiceId,
						ID.Url
				FROM Invoice i
					INNER JOIN InvoiceDocs id			ON id.InvoiceId = i.ParentInvoiceId
				WHERE i.ParentInvoiceId = @InvoiceId; -- this will read ParentInvoiceId = @InvoiceId

			UPDATE Invoice
			SET InvoiceType = 'Archive',
				ArchiveReason = 'Not an Invoice',
				ApprovalStatusId = 5,
				AcceptedDate = @Now,
				ItemId = NULL -- Null this, it used to house the ApprovalHistoryId for this specific process.
			WHERE InvoiceId = @InvoiceId;
		END IF;


		INSERT INTO ApprovalHistory (InvoiceId,ApproverId,GLCodeId,AmountAppoved,StateChangedDate,CustomerId,Recoverabletax,SpecialNote,CategoryId,DepartmentId,TaxCodeId,
										TaxableAmount,TaxAmount,WithholdingTaxId,PurchaseNum,ImportDoc,RecoverableTaxAmout,ProjectId,SubProjectId,CompanyCode,
										SourceApprovalHistoryId,ItemId,AccountingVariable1,AccountingVariable2,AccountingVariable3,AccountingVariable4,VendorId,OrgId,
										AmountInPercent,IsDistributedLine,Category1,Category2,SubCategory1,SubCategory2,ExternalRef)
			select 	InvoiceId,ApproverId,GLCodeId,AmountAppoved,now(),CustomerId,Recoverabletax,SpecialNote,CategoryId,DepartmentId,TaxCodeId,
					TaxableAmount,TaxAmount,null,null,ImportDoc,null,ProjectId,SubProjectId,CompanyCode,
					null,ItemId,AccountingVariable1,AccountingVariable2,AccountingVariable3,AccountingVariable4,VendorId,OrgId,
					AmountInPercent,IsDistributedLine,Category1,Category2,SubCategory1,SubCategory2,ExternalRef
			from PendingApprovalHistory
			where InvoiceId = @InvoiceId;

		Delete from PendingApprovalHistory 	where InvoiceId = @InvoiceId;
		Delete from TempApprovalHistory 	where InvoiceId = @InvoiceId;

		--	17
		SELECT
			ApprovalStatusId INTO @ApprovalStatusId
		FROM Invoice
		WHERE InvoiceId = @InvoiceId;
		IF not (
				@IgnorePORemovalForClientAfterInvoiceApproval = 0
				AND @isPO = 1
				AND @ApprovalStatusId IN (4, 5, 7)
				AND @IsArchived = 0) then
			SET pMessage = 'Final';
			LEAVE ThisProc;
		END IF;


		drop temporary table if exists POWorkMatch;
		Create temporary table if not exists POWorkMatch (
			POId 	int,
			LIDId	int
		);		


		-- Match the PO lines to the Invoice PO Lines
		Insert into  POWorkMatch (POId, LIDId)
			select 	p.Id as POId, lid.LineItemDetailId as LIDId
			FROM	PO p
					inner join LineItemDetail lid 	on (
															lid.POId is null
															and lid.PONumber						= p.PONumber
															and (p.RecievedTransactionId is null
																	or lid.RecievedTransactionId = p.RecievedTransactionId)
															and (
																	(
																		@MatchLineItemDetailWithPOByRecievedTransactionIdAndPONumber = 1
																		or 	
																		(lid.ProductId is null
																			or lid.ProductId		= p.VendorCatNumber)
																	)
																)
															and (p.LineNo is NULL
																	or lid.LineNo is null
																	or lid.LineNo = p.LineNo)
														)
														or lid.POid = p.Id
			where 	p.ClientId = @ClientId
					and lid.InvoiceId = @InvoiceId
					and (ifnull(p.RcvdQty, p.OrderQty) - lid.Quantity) is not null;


			-- Update the PO lines 
			Update 	PO p
					inner join POWorkMatch work 		on work.POId = p.Id
					inner join LineItemDetail lid 		on lid.LineItemDetailId = work.LIDId
			set 	p.MatchedFlag 	= case	when ifnull(p.RcvdQty, p.OrderQty) - lid.Quantity = 0 and @MarkCompletedPOLines = 1 and lid.RecievedTransactionId = p.RecievedTransactionId 	then 'Y' 
											else p.MatchedFlag end,
					p.UserField6	= case	when ifnull(p.RcvdQty, p.OrderQty) - lid.Quantity = 0 and @MarkCompletedPOLines = 1 and lid.RecievedTransactionId = p.RecievedTransactionId 	then null 
											else p.UserField6 end,
					p.UserField7	= case	when ifnull(p.RcvdQty, p.OrderQty) - lid.Quantity = 0 and @MarkCompletedPOLines = 1 and lid.RecievedTransactionId = p.RecievedTransactionId 	then null 
											else p.UserField7 end,
					p.OrderQty		= case  When p.RcvdQty is null 		then ifnull(p.RcvdQty, p.OrderQty) - lid.Quantity else OrderQty end,
					p.RcvdQty		= case  When p.RcvdQty is not null 	then ifnull(p.RcvdQty, p.OrderQty) - lid.Quantity else p.RcvdQty end;
			
			
			-- Update the Invoice Line Item Details lines 
			Update 	LineItemDetail lid
					inner join POWorkMatch work 		on work.LIDId = lid.LineItemDetailId
					inner join PO p				 		on p.Id = work.POId
			set 	lid.UserField6		= null,
					lid.UserField7		= null
			where 	p.MatchedFlag = 'Y';
			
			-- Dleet the PO lines if the Qty is 0
			Delete	p
					from PO p
					inner join POWorkMatch work 		on work.POId = p.Id
			where 	@DoNotRemovePODataOnPOApproval = 0 
					and ifnull(p.RcvdQty, p.OrderQty) = 0;

		SET pMessage = 'Final';

	END ThisProc ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceApproveSubmitTestingOnly` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceApproveSubmitTestingOnly`(bCommit int)
ThisProc:BEGIN
-- noformat
	declare isRollback bit default 0;
	declare isMessage varchar(5000) default '';
  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
  	begin
	set isRollback = 1;
 		GET DIAGNOSTICS CONDITION 1
 		@p1 = MESSAGE_TEXT;
 		SET isMessage = @p1;
	end ;
  DROP TEMPORARY TABLE IF EXISTS GetPONumbersByFilterCriteriaTempTable;


  --	-- IgnorePOExistsWhenApprovingOrAccepting
  -- 	SET @ClientId = 35;
  -- 	SET @UserId = '6de67cc1-a02e-4b3c-8370-e27d64bf00f1';
  -- 	SET @InvoiceID = '660821847';

  -- KeepInvoiceTypeBOLUnchanged
  -- No config set up in test


  -- 	-- ShowSubmitThroughRMSButtonForArchive
  -- 	set @ClientId = 27;
  -- 	set @InvoiceId = 660818140; -- Fail
  -- 	set @InvoiceId = 660818136;
  -- 	set @UserId = '0815d5fa-6ea2-40c4-ba1b-8165faf3393d';


  -- SetPostingDateSameAsApprovedDateWhenApproving
  -- No config set up in test

  --	-- SetGLDateCurrentDatewhenApproving
  -- 	set @ClientId = 64;
  -- 	set @InvoiceId = 660817095;
  -- 	set @UserId = 'cb994fda-b9df-4aea-8b74-af509a6bbc9c';


  -- IgnorePORemovalForClientAfterInvoiceApproval
  -- set @ClientId = 61;
  -- set @InvoiceId = 660818394;
  -- set @UserId = '080d2a60-4adc-4318-8753-488f09a15c04';


  -- MatchLineItemDetailWithPOByRecievedTransactionIdAndPONumber
  -- 	set @ClientId = 97;
  -- 	set @InvoiceId = 660823822;
  -- 	set @UserId = '0299e3b2-463f-4b8a-934b-062e2ee090b5';


  --	-- CleanInvoicePOesFromPOTableAfterInvoiceApproval
  -- 		set @ClientId = 50;
  -- 		set @InvoiceId = 660754188;
  -- 		set @UserId = '8da146c3-2bb2-4bd7-a8dd-08831cb2224f';


  --	-- Versace 
  -- 		set @ClientId=64;
  -- 		set @InvoiceId= 660795197;
  -- 		set @UserId= '240ccc47-3dc2-44d8-bd45-dac465d6f1ec';
  -- 		set @ClientId=64;
  -- 		set @InvoiceId= 660283273;
  -- 		set @UserId= '199c536e-847b-41c1-a1e6-7279b466141f';


--   -- AssignbackuserId 
--   SET @ClientId = 64;
--   SET @InvoiceId = 660283273;
--   SET @UserId = '6e748e68-a974-443e-8bac-fd36e9b037b2';

--   -- You are the last approver, but the invoice has still a remaining amount. The remaining amount to be approved is -53,297.97
--   SET @ClientId = 88;
--   SET @InvoiceId = 662593547;
--   SET @UserId = '18b61a24-d0a4-11e9-b055-22000a1f9f3d';


  -- InvoiceId not in list
--   SET @ClientId = 88;
--   SET @InvoiceId = 662594186;
--   SET @UserId = '18b61a24-d0a4-11e9-b055-22000a1f9f3d';


--   -- Approver BY amount
--   SET @ClientId = 88;
--   SET @InvoiceId = 660791162;
--   SET @UserId = '2a59fe87-8ef7-460c-9442-ea0ff6546038';


--   -- Approver BY amount
--   SET @ClientId = 88;
--   SET @InvoiceId = 660791162;
--   SET @UserId = '7cbe8f05-ff53-40f8-9c9d-73e5e16af2de';

--   -- Approver BY amount
--   SET @ClientId = 88;
--   SET @InvoiceId = 662583973;
--   SET @UserId = '8d7960f2-6159-406b-9dde-c2fafb0d1033';

-- 
-- 
--   -- Captured state
--   SET @ClientId = 88;
--   SET @InvoiceId = 660783747;
--   SET @UserId = '18b61a24-d0a4-11e9-b055-22000a1f9f3d';
-- 
--   -- PO testing the Threshold
--   SET @ClientId = 88;
--   SET @InvoiceId = 662613852;
--   SET @UserId = '18b61a24-d0a4-11e9-b055-22000a1f9f3d';
-- 
-- 
--   -- Exception already
--   SET @ClientId = 88;
--   SET @InvoiceId = 662613863;
--   SET @UserId = '18b61a24-d0a4-11e9-b055-22000a1f9f3d';



  -- Nova
  SET @ClientId = 86;
  SET @InvoiceId = 663278481;
  set @InvoiceId = 663091933;
  -- SET @InvoiceID = 663269760;
  -- SET @InvoiceID = 663268971;
  -- SET @InvoiceID = 663253073;
  SET @UserId = '06bae9a6-5fc6-4056-91d6-f46f4930a32e';

 

  set @ApprovalStatusId = 0;
  select ApprovalStatusId
  into @ApprovalStatusId
  from Invoice i
  where InvoiceId = @InvoiceId;


  SET @Response = '';

  START TRANSACTION;
  	set @Response = '';
	if @ApprovalStatusId = 3 then 
		select 'APPROVING';
	    CALL _x_InvoiceApprove(@ClientId, @InvoiceID, @UserId, 1, @Response);
	elseif @ApprovalStatusId in (1,6) then
		select 'Submitting';
	    CALL _x_InvoiceSubmit(@ClientId, @InvoiceID, @UserId, 1, @Response);
		select * from Exception e where InvoiceId = @InvoiceID;
	elseif @ApprovalStatusId in (4) then
		select 'Resetting';
	    CALL _x_InvoiceReset(@ClientId, @InvoiceID, @UserId);
		select * from Exception e where InvoiceId = @InvoiceID;
	else
		select 'Wrong status to run this PROC';
	end if;

	select 'EndOfCall', @Response;
    SELECT
			i.ApprovalStatusId,
			i.IsPOInvoice,
			i.InvoiceTotalWithTax,
			i.InvoiceTotal,
			i.Tax,
			i.FreightCharges,
			i.CalculableOtherCharges,
			i.AdjustmentAmount,
			PONumber,
			POLookup,
			POReverseLookup,
			POReverseLookupVariance,
			LineItemsQuantityFilterVariance,
			i.*
    FROM Invoice i
    WHERE InvoiceId = @InvoiceID;
    SELECT
      *
    FROM LineItemDetail
    WHERE InvoiceId = @InvoiceId;
    SELECT
      *
    FROM PendingApprovalHistory pah
    WHERE pah.InvoiceId = @InvoiceId;

    SELECT
      *
    FROM InvoiceHistory ih
    WHERE InvoiceId = @InvoiceID order by 1 desc;

     SELECT
       *
     FROM UserInvoiceAssignment ah
     WHERE ah.InvoiceId = @InvoiceId;

    SELECT	*
    FROM	PO
    WHERE	PONumber = (SELECT	PONumber FROM Invoice WHERE InvoiceId = @InvoiceID)
		    AND ClientId = @ClientID;

	select * from UserNotification where LinkValue = @InvoiceID and ReadDate is null order by ReceivedDate desc limit 4;

    IF @Response in ('Approved','Submitted') and isRollback = 0 THEN
	  	if bCommit = 1 THEN	
		      SELECT @Response, 'Commit';
	  		commit;
		else 
		      SELECT @Response, 'Rollback';
      		ROLLBACK; -- Commit;
		end if;
    ELSE
      IF @Response = 'Final'  and isRollback = 0 THEN
		      SELECT @Response, 'Commit';
        SELECT @Response;
	  	if bCommit = 1 THEN	
	  		commit;
		else 
		      SELECT @Response, 'Rollback';
      		ROLLBACK; -- Commit;
		end if;
      ELSE
        SELECT @Response, isRollback, isMessage, 'Rollback';
        ROLLBACK;
      END IF;
    END IF;


    IF bCommit = 1 and EXISTS (SELECT	*
        		FROM	InvoiceHistory ih
		        WHERE	InvoiceId = @InvoiceID
        				AND DATE(ActionDate) = DATE(UTC_TIMESTAMP()))
      	OR NOT EXISTS (SELECT	*
        				FROM	InvoiceHistory ih
        				WHERE	InvoiceId = @InvoiceID) THEN
		SELECT	*
		FROM	Invoice
		WHERE	InvoiceId = @InvoiceID;
		
		SELECT	*
		FROM	InvoiceHistory ih
		WHERE	InvoiceId = @InvoiceID
				AND DATE(actiondate) = DATE(UTC_TIMESTAMP());


    END IF;

	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceById`(
-- noformat
	IN `pAttrNames` varchar(2000),
	IN `pInvoiceId` int,
	IN `pClientId` 	int,
	IN `pUserId` 	varchar(36)
)
BEGIN

	set @VendorNoAfterName = 1;

  	SET @Expression = CONCAT('
		SELECT 
				', pAttrNames, ',
				Invoice.IsPOInvoice,
				COALESCE(Invoice.IsConfidential, 0) 																				AS IsConfidential,
				Invoice.ApprovalStatusId,

				case when ', @VendorNoAfterName, ' = 1 THEN
						concat(IFNULL(Vendor.VendorName, ""), " [", IFNULL(Vendor.VendorNo, ""), "]")
					else
						concat("[", IFNULL(Vendor.VendorNo, ""), "] ", IFNULL(Vendor.VendorName, "")) end 							as VendorName,
-- 				COALESCE(CONCAT(Vendor.VendorNo, ", ", Vendor.VendorName), Vendor.VendorNo) 										AS VendorName,

 				case when ', @VendorNoAfterName, ' = 1 THEN
 						concat(IFNULL(OrgData.OrgName, ""), " [", IFNULL(OrgData.OrgId, ""), "]")
 					else
 						concat("[", IFNULL(OrgData.OrgId, ""), "] ", IFNULL(OrgData.OrgName, "")) end 								as OrgName,
-- 				COALESCE(CONCAT(OrgData.OrgId, ", ", OrgData.OrgName), OrgData.OrgId) 												AS OrgName,

 				case when ', @VendorNoAfterName, ' = 1 THEN
 						concat(IFNULL(Department.`Description`, ""), " [", IFNULL(Department.DepartmentName, ""), "]")
 					else
 						concat("[", IFNULL(Department.DepartmentName, ""), "] ", IFNULL(Department.`Description`, "")) end 			as DepartmentName,
--				COALESCE(CONCAT(Department.DepartmentName, ", ", Department.`Description`), Department.DepartmentName) 				AS DepartmentName,
				ClientCompany.Id 																									AS CompanyId,

 				case when ', @VendorNoAfterName, ' = 1 THEN
 						concat(IFNULL(ClientCompany.`Description`, ""), " [", IFNULL(ClientCompany.CompanyCode, ""), "]")
 					else
 						concat("[", IFNULL(ClientCompany.CompanyCode, ""), "] ", IFNULL(ClientCompany.`Description`, "")) end 		as CompanyName,
--				COALESCE(CONCAT(ClientCompany.CompanyCode, ", ", ClientCompany.`Description`), ClientCompany.CompanyCode) 			AS CompanyName,
				Tax.TaxCode 																										AS TaxCodeName,
				Customer.CustomerName,

 				case when ', @VendorNoAfterName, ' = 1 THEN
 						concat(IFNULL(ProjectType.ProjectName, ""), " [", IFNULL(ProjectType.ProjectName, ""), "]")
 					else
 						concat("[", IFNULL(ProjectType.ProjectName, ""), "] ", IFNULL(ProjectType.ProjectName, "")) end 			as ProjectName,
--				COALESCE(CONCAT(ProjectType.ProjectName, ", ", ProjectType.`Description`), ProjectType.ProjectName) 				AS ProjectName,
				NSClass.`NSClass` 																									AS ClassName,

				ClientLocation.ContactName 																							as ShipToName,

 				case when ', @VendorNoAfterName, ' = 1 THEN
 						concat(IFNULL(NSDepartment.`Description`, ""), " [", IFNULL(NSDepartment.NSDepartmentName, ""), "]")
 					else
 						concat("[", IFNULL(NSDepartment.NSDepartmentName, ""), "] ", IFNULL(NSDepartment.`Description`, "")) end 	as NSDepartmentName
--				COALESCE(CONCAT(NSDepartment.NSDepartmentName, ", ", NSDepartment.`Description`), NSDepartment.NSDepartmentName) 	AS NSDepartmentName
		FROM 	Invoice 
				LEFT JOIN Vendor 					ON Invoice.VendorId = Vendor.VendorId
				LEFT JOIN OrgData 					ON Invoice.OrgId = OrgData.Id
				LEFT JOIN Department 				ON Invoice.VendorSiteId = Department.Id
				LEFT JOIN ClientCompany 			ON Invoice.ClientId = ClientCompany.ClientId 
														AND Invoice.CompanyCode = ClientCompany.CompanyCode
				LEFT JOIN Tax 						ON Invoice.ClientId = Tax.ClientId 
														AND Invoice.TaxCodeId = Tax.Id
				LEFT JOIN Customer 					ON Invoice.CustomerId = Customer.CustomerId
				LEFT JOIN ProjectType 				ON Invoice.ProjectTypeId = ProjectType.Id
				LEFT JOIN ClientLocation			ON Invoice.ShipToId = ClientLocation.ClientLocationId
				LEFT JOIN NSClass 					ON Invoice.ClientId = NSClass.ClientId 
														AND Invoice.ClassId = NSClass.Id
				LEFT JOIN NSDepartment 				ON Invoice.ClientId = NSDepartment.ClientId 
														AND Invoice.NSDepartmentId = NSDepartment.Id
		WHERE 	Invoice.InvoiceId = ', pInvoiceId, 
				' AND Invoice.ClientId = ', pClientId, 
				' AND Invoice.IsDeleted = FALSE 
		LIMIT 1;');

  PREPARE myquery FROM @Expression;
  EXECUTE myquery;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceCall` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceCall`(IN pInvoiceId int, IN pClientId int, IN pUserId varchar(36))
BEGIN

	call _x_UserActivity(pUserId, 'Invoice', pInvoiceId);

	SET SESSION group_concat_max_len = 1000000;

	set @InvoiceStatus = 0;
	set @isAuditor = 0;
	set @isAdmin = 0;
	set @InMyQueue = 0;
    IF EXISTS (SELECT	1
		        FROM	ClientUserRoles cur
		          		INNER JOIN ClientRoles cr		ON	cr.RoleId = cur.RoleId
		            										AND cr.isAdmin = 1
		        WHERE	cur.UserId = pUserId) THEN
		set @isAdmin = 1;
	end if;

	if EXISTs (SELECT	1
				FROM	ClientUserRoles cur
						INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
						INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
				WHERE	cur.UserId = pUserId
						and crf.FunctionKey = 'InvoiceAuditor' ) THEN
		set @isAuditor = 1;
	end if;
				

	set @InMyQueue = 0;
	set @InvoiceStatus = 0;
	set @ClientId = 0;
	select 	ApprovalStatusId, ClientId
	into 	@InvoiceStatus, @ClientId
	from 	Invoice 
	Where	InvoiceId = pInvoiceId;



	-- 
	-- Get the position of the invoice in the appropriate queue to allow the web site to use it in Previous and Next
	--
	set @CurrentIndexInQueue = null;
	set @Dummy = 0;
	if @isAuditor = 1 then			-- Auditor
		call _x_InvoiceQueueAuditor (@ClientId, pUserId, pInvoiceId, 1, 0, 0, @CurrentIndexInQueue, @Dummy);			-- Get the postion in the Auditor Queue
	elseif @InvoiceStatus = 1 then			
		call _x_InvoiceQueueCaptured (@ClientId, pUserId, pInvoiceId, 1, 0, 0, @CurrentIndexInQueue, @Dummy);			-- Get the postion in the Captured Queue
	elseif @InvoiceStatus = 6 then		
		if exists (SELECT 1 from _x_UserParameters up	WHERE up.UserId = pUserId and up.IsExceptionHandler = 1) THEN
			set @InMyQueue = 1;
			call _x_InvoiceQueueException (@ClientId, pUserId, pInvoiceId, 1, 0, 0, @CurrentIndexInQueue, @Dummy);			-- Get the postion in the Exception Queue
		end if;
	elseif @InvoiceStatus = 3 then		
		call _x_InvoiceMyQueue (pUserId, pInvoiceId, 1, 0, 0, null, @CurrentIndexInQueue, @Dummy);							-- Get the postion in the Approval Queue
		if @CurrentIndexInQueue is not null then -- NEW I think this will work
			set @InMyQueue = 1;  
		end if;
	end if;

	if @InvoiceStatus in (1) then
		set @LastAction = 'Captured';
	elseif @InvoiceStatus in (4,5) then
		select  GROUP_CONCAT(Actor separator ' » ')
		into 	@LastAction
		from 	InvoiceHistory ih 
		where 	InvoiceId = pInvoiceId
				and Id > (select 	max(Id) 
							from 	InvoiceHistory 
							where 	InvoiceId = pInvoiceId
									and CurrentStatus = 'Captured')
				and Action = 'Approve'
		order 	by Id;
	elseif @InvoiceStatus in (6) then
		select	GROUP_CONCAT(concat(User.LastName, ', ', User.FirstName) order by User.LastName separator '<small></small>')
		into 	@LastAction
		from	User 
				inner join _x_UserParameters up 	on up.UserId = User.UserId
		where 	ClientId = pClientId
				and up.IsExceptionHandler = 1
		order 	by LastName, FirstName;
	else
		select	GROUP_CONCAT(concat(User.LastName, ', ', User.FirstName) order by User.LastName separator '<small></small>')
		into 	@LastAction
		from	UserInvoiceAssignment Data
				inner join User 	on User.UserId = Data.UserId
		where 	InvoiceId = pInvoiceId
		order 	by LastName, FirstName;
	end if;

	if @isAuditor = 1 THEN
		select	Concat(ifnull(concat(@LastAction, '<br>'), ''), 'Audit:', Comment)
		into 	@LastAction
		from	AuditorsComments Data
		where 	InvoiceId = pInvoiceId 
				and AuditorID = pUserId
				and Comment is not null;			
	end if;


	SET @AllowReject = 1;
	IF @isAdmin = 0 THEN 
		if NOT EXISTS (
					SELECT	1
					FROM	ClientUserRoles cur
							INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
							INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
					WHERE	cur.UserId = pUserId
							AND crf.FunctionKey = 'InvoiceReject'
							AND crf.Access = 1 ) then
			SET @AllowReject = 0;		
		end if;
	END if;

	IF @AllowReject = 1 THEN
		IF not EXISTS (SELECT	1
						FROM	UserInvoiceAssignmentHistory uiah
						WHERE	uiah.InvoiceId = pInvoiceId
								AND uiah.FromApprovalSubStepUserId <> pUserId) THEN
			SET @AllowReject = 0;
		end if;
	END if;


	SELECT
			Invoice.VendorId,
			Invoice.InvoiceNo,
			Invoice.InvoiceTotal,
			Invoice.ApprovalStatusId,
			Invoice.IsPaused,
			Invoice.IsPOInvoice,
			COALESCE(Invoice.IsConfidential, 0) 																	AS IsConfidential,    
			Invoice.PONumber,
			COALESCE(@LastAction, Invoice.LastActionBy) 															AS LastActionBy,
			Invoice.AdjustmentAmount,
			IF(UserInvoiceAssignment.HoldStartDate IS NULL, FALSE, TRUE) 											AS IsHold,
			PausedInvoice.`Comment` 																				AS PausedComment,
			Vendor.VendorNo,
			Case when Invoice.ApprovalStatusId = 3 and Invoice.IsPaused = 0 and (@isAdmin = 1 or @InMyQueue = 1)  
					then 1 
					else 0 end 																						AS isApproveAllowed,
			Case when Invoice.ApprovalStatusId = 3 and Invoice.IsPaused = 0 and (@isAdmin = 1 or @InMyQueue = 1)  
					then @AllowReject 
					else 0 end 																						AS isRejectAllowed,
			@CurrentIndexInQueue 																					as CurrentIndexInQueue,
			@isAuditor 																								as isAuditor

	FROM	Invoice
			LEFT JOIN PausedInvoice 			ON Invoice.InvoiceId = PausedInvoice.InvoiceId
			LEFT JOIN UserInvoiceAssignment 	ON Invoice.InvoiceId = UserInvoiceAssignment.InvoiceId 
													AND DATE(UserInvoiceAssignment.HoldEndDate) > DATE(UTC_TIMESTAMP())
	        LEFT JOIN Vendor                         ON Invoice.VendorId = Vendor.VendorId
	WHERE Invoice.InvoiceId = pInvoiceId
  		AND Invoice.ClientId = pClientId
  		AND Invoice.IsDeleted = FALSE 
	LIMIT 1;

-- call _x_InvoiceCall(961260, 1, '0fe9d43b-73d1-4322-9fe8-fb2b9a86d33e');

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceCreate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceCreate`(
	IN `pClientId` int,
	IN `pUserId` varchar(36),
	IN `pFileName` varchar(500),
	IN `pBatchType` varchar(50),
	IN `pSource` varchar(255),
	IN `pCompanyId` int,
	IN `pInvoiceType` varchar(50),
	IN `pIsPOInvoice` tinyint,
	IN `pIsConfidential` tinyint,
	OUT `pInvoiceId` int
)
ThisProc:
	BEGIN
		if not exists (select 1 from Client where ClientId = ifnull(pClientId, 0) and IsActive = 1) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The client is not found or inactive.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		end if;
				
		if not exists (select 1 from User where ClientId = pClientId and UserId = pUserId and IsActive = 1) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The user is not found or inactive.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		end if;
		if not exists (select 1 from ClientCompany where ClientId = pClientId and Id = pCompanyId and IsActive = 1) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The company is not found or inactive.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		end if;
		if not exists (select 1 from ClientInvoiceType where ClientId = pClientId and InvoiceTypeName = pInvoiceType) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The invoice type is not valid.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		end if;
		if ifnull(pFileName, '') = '' THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The filename is missing.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		end if;
		if ifnull(pBatchType, '') = '' THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The batch type is missing.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		end if;
	
		set @CompanyCode = null;
	
		select	CompanyCode 
		into 	@CompanyCode
		from	ClientCompany 
		where 	ClientId = pClientId 
				and Id = pCompanyId 
				and IsActive = 1;
		
	
		--
		-- if pSource=User the following business logic will be apply farther down the line (After the create)
		--		It will be in a catured state, when in this state and pSource=User then
		--			** Data entry personel will not see this data for the first hour, to let the user do the entry themselves
		--			** After 1 hour, it will appear in the capture queue for Data Entry
		--
	
		set pIsPOInvoice = ifnull(pIsPOInvoice, 0);
	
		if pInvoiceType <> 'Invoice' THEN
			set pIsPOInvoice = 0;
		end if;
	
		SELECT	CONCAT(u.LastName, ', ', u.FirstName) INTO @UserName
		FROM	User u
		WHERE	u.UserId = pUserId;
	
		insert into Batch 	(BatchName, BatchType, CreatedDate, Source, ClientId, MatchWithCSV)
					Values 	(pFileName, pBatchType, UTC_TIMESTAMP(), pSource, pClientId, 0);
		set @BatchId = LAST_INSERT_ID();
	
		insert into Invoice	(ClientId, ApprovalRequired, ApprovalStatusId, isPaused, isExceptionRaised, ApproverId, IsModified, BatchId, CompanyCode,
							InvoiceName, IsPOInvoice, ScannedDate,
							isDeleted, isValidated, isLocked, SourceInvoiceId, PaperlessSubmission, Reissued, IsDaat)
					Values (pClientId, 1, 1, 0, 0, null, 0, @BatchId, @CompanyCode,
							pFileName, pIsPOInvoice, UTC_TIMESTAMP(),
							0, 0, 0, @SourceInvoiceId, 1, 0, 0);
		set pInvoiceId = LAST_INSERT_ID();
	
	
		call _x_InvoiceUpdateDataChanges(pInvoiceId, pClientId, pUserId, 'Before');
		Update 	Invoice 	set 
				InvoiceType			= pInvoiceType,
				IsConfidential		= pIsConfidential,
				LastActionDate		= UTC_TIMESTAMP(),
				LastActionBy		= @UserName
		where 	InvoiceId	= pInvoiceId
				and ClientId = pClientId;
	
		call _x_InvoiceUpdateDataChanges(pInvoiceId, pClientId, pUserId, 'After');		
	
	/*
	start TRANSACTION;
	set @InvoiceId = null;
	call _x_InvoiceCreate(88, '4d431e29-0646-4cf8-8231-4dc9d043797d', 'ThisIsAnInvoice.PDF', 'Invoice', 'User', 'Invoice', 0, 0, @InvoiceId);
	select * from Invoice Where InvoiceId = @InvoiceId;
	select * from Batch where Id in (select BatchId from Invoice where InvoiceId = @InvoiceId);
	select * from InvoiceHistory ih where InvoiceId = @InvoiceId order by 1;
	rollback;
	*/
	
	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceDelete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceDelete`(
-- noformat
	IN pClientId 			int,
	IN pInvoiceId	 		int,
	IN pUserId 				varchar(36)
	)
ThisProc:BEGIN

	call _x_InvoiceUpdateDataChanges(pInvoiceId, pClientId, pUserId, 'Before');

	UPDATE	Invoice	SET		IsDeleted = TRUE
	WHERE	ClientId = pClientId
			AND InvoiceId = pInvoiceId;
	
	call _x_InvoiceUpdateDataChanges(pInvoiceId, pClientId, pUserId, 'After');


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceFileAttach` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceFileAttach`(IN `pUserId` char(36),
IN `pInvoiceId` int,
OUT `pNewInvoiceId` int)
ThisProc:
	BEGIN

-- noformat
	set @UserName = null;
	set @Now = UTC_TIMESTAMP();

	SELECT	CONCAT(u.LastName, ', ', u.FirstName) 
	INTO	@UserName
	FROM	User u
	WHERE	u.UserId = pUserId;

	-- Add to History that a supporting document was added to the current invoice
	INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId, OldID)
		SELECT
			pInvoiceId,
			@UserName 		AS Actor,
			'Document added' 	AS Action,
			@Now 				AS ActionDate,
			'' 					AS PreviousData,
			'' 					AS NewData,
			'' 					AS Field,
			'' 					AS InitialStatus,
			'' 					AS CurentStatus,
			pUserId 			AS ActorId,
			NULL 				AS OldId;



	INSERT INTO Invoice (ClientId, InvoiceNo, InvoiceDate, InvoiceTotal, VendorId, PONumber, Comment, 
							ApprovalRequired, ApprovalStatusId, IsPaused, IsExceptionRaised, IsPOInvoice, ScannedDate, InvoiceType, ArchiveReason, SourceInvoiceId, 
							IsModified, CompanyCode, InvoiceName, isDeleted, IsOutPutPending, PayImmediate, IsMultipleSubmission, isLocked, 
							LastActionDate, LastActionBy, 
							PaperlessSubmission, Reissued, IsDaat, ApproverId)
		SELECT
			ClientId,
			InvoiceNo,
			InvoiceDate,
			InvoiceTotal,
			VendorId,
			PONumber,
			Comment,
			case when IsPOInvoice then 0 else 1 end,		1,				0,			0, 				IsPOInvoice, 	@Now, 		'Archive', 	'Not an invoice', pInvoiceId, 
			0,		CompanyCode,	InvoiceName,	0,				0,			0,			0,			0,
			@Now, 	@UserName,
			1, 		Reissued,		IsDaat, null
		FROM Invoice
		WHERE InvoiceId = pInvoiceId;
		SET pNewInvoiceId = LAST_INSERT_ID();


	set @Action = 'Document added as related';

	-- Add to History that this supporting document was added for invoice 
	INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId, OldID)
		SELECT
			pNewInvoiceId,
			@UserName 			AS Actor,
			@Action			 	AS Action,
			@Now 				AS ActionDate,
			'' 					AS PreviousData,
			'' 					AS NewData,
			'' 					AS Field,
			'' 					AS InitialStatus,
			'' 					AS CurentStatus,
			pUserId 			AS ActorId,
			NULL 				AS OldId;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceHold` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceHold`(
	IN pIsHold 				TINYINT,
	In pClientId 			INT,
	IN pInvoiceId 			INT,
	IN pUserId 				CHAR(36),
	IN pHoldEndDate 		DATETIME,
	IN pComments 			VARCHAR(250)
)
ThisProc:BEGIN

	-- Get security
	SELECT	max(cr.isAdmin), ifnull(Max(case WHEN crf.FunctionKey = if(pIsHold=true, 'InvoiceHold', 'InvoiceUnhold') THEN crf.access ELSE 0 end), 0)
	INTO 	@isAdmin, @isAllowed
	FROM	ClientUserRoles cur
	 		INNER JOIN	ClientRoles cr				ON cr.RoleId = cur.RoleId
			left JOIN 	ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
	WHERE	cur.UserId = pUserId;
	SET @isAllowed = IF(@isAdmin = 1, 1, @isAllowed); 


	-- Get Invoice Info
	SELECT	i.InvoiceType, i.IsPaused, i.isDeleted, i.ApprovalStatusId, i.IsPOInvoice, (SELECT	max(HoldEndDate)
																						FROM 	UserInvoiceAssignment
																						WHERE 	InvoiceId = pInvoiceId
																								AND ClientId = pClientId
																								AND HoldEndDate >= UTC_date())
	INTO	@InvoiceType, @IsPaused, @isDeleted, @ApprovalStatusId, @isPO, @HoldUntilDate
	FROM 	Invoice i
	WHERE 	i.ClientId = pClientId
			AND i.InvoiceId = pInvoiceId;

	-- Check if the invoice is in the right state to do this action
	IF @IsDeleted = 1 THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This invoice is already deleted.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	elseIF @InvoiceType = 'Archive' THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This invoice has already been archived.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	ElseIF @IsPaused = true THEN
		SET @Msg = concat('This invoice is already paused.');
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @Msg, MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	ElseIF pIsHold = true AND @HoldUntilDate IS NOT NULL THEN
		SET @Msg = concat('This invoice is on hold until ', date_format(@HoldUntilDate, '%M %e'), '.');
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @Msg, MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	ElseIF pIsHold = false AND @HoldUntilDate IS NULL THEN
		SET @Msg = concat('This invoice is not on hold.');
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @Msg, MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	ElseIF NOT @ApprovalStatusId IN (3) THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This invoice is not in an actionable status.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;


	-- if not an admin, check if this is in their queue
	IF @isAdmin = 0 then
		set @Position	= NULL;
		set @Total 		= null;
		call _x_InvoiceMyQueue(pUserId, pInvoiceId, 1, 0, 0, null, @Position, @Total);
	
		if @Position is null then 
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The invoice is no longer in your queue.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		end if;
	END if;



	--
	-- Do the action, all business logic passed
	--
	SET @RowCount = 0;
	SET @StepId = 0;
	SET @SubStepId = 0;
	SET @UserName = NULL;
	
	SELECT CONCAT(LastName, ', ', FirstName) INTO @UserName
	FROM User WHERE ClientId = pClientId AND UserId = pUserId;
	
	IF (pisHold = true) THEN 
	
		-- Check if any record already exists
		SELECT COUNT(*) INTO @RowCount FROM UserInvoiceAssignment WHERE InvoiceId = pInvoiceId;
		
		IF @RowCount > 0 THEN
			UPDATE UserInvoiceAssignment
			SET HoldStartDate = UTC_TIMESTAMP(), HoldEndDate = pHoldEndDate
			WHERE InvoiceId = pInvoiceId;
		ELSE
			SELECT ApprovalStepId INTO @StepId FROM ApprovalStep WHERE ClientId = pClientId ORDER BY OrderNo LIMIT 1;
			SELECT ApprovalSubStepId INTO @SubStepId FROM ApprovalSubStep WHERE ApprovalStepId = @StepId ORDER BY OrderNo LIMIT 1;
			
			INSERT INTO UserInvoiceAssignment (InvoiceId, UserId, Type, State, ApprovalSubStepId, HoldStartDate, HoldEndDate, DateCreated, AssignBackToUserId, Comments)
				VALUES (pInvoiceId, pUserId, 0, 1, @SubStepId, UTC_TIMESTAMP(), pHoldEndDate, UTC_TIMESTAMP(), NULL, NULL);     
		END IF;
	
		set @Data = Concat('Invoice on Hold until ', date_format(pHoldEndDate, '%Y-%m-%d'));

		INSERT INTO InvoiceHistory (InvoiceId, ActorId, Actor, `Action`, ActionDate, NewData, `Field`, InitialStatus, CurrentStatus)
			VALUES (pInvoiceId, pUserId, @UserName, 'Hold', UTC_TIMESTAMP(), @Data, 'Invoice Status', 'In Approval', 'In Approval');

	ELSE
	
		UPDATE UserInvoiceAssignment
		SET HoldStartDate = NULL, HoldEndDate = NULL, Comments = pComments 
		WHERE InvoiceId = pInvoiceId;
		
		INSERT INTO InvoiceHistory (InvoiceId, ActorId, Actor, `Action`, ActionDate, NewData, `Field`, InitialStatus, CurrentStatus)
		VALUES (pInvoiceId, pUserId, @UserName, 'Un-Hold', UTC_TIMESTAMP(), 'Invoice no longer on Hold', 'Invoice Status', 'In Approval', 'In Approval');
	
	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceImageAdd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceImageAdd`(IN pInvoiceId int, IN pUrl varchar(250))
ThisProc:
	BEGIN

	-- noformat

		IF NOT EXISTS (SELECT	1
						FROM	Invoice 
						WHERE	InvoiceId = pInvoiceId) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The invoice cannot be found.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;

		insert into InvoiceDocs (InvoiceId, Url) Values (pInvoiceId, pUrl);

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceImageGet` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceImageGet`(IN pInvoiceId int, IN pSource varchar(20))
BEGIN	

	-- noformat
	
	SELECT	Id 									AS ImageId,
			REPLACE(Url, 'http://', 'https://') AS ImageUrl
	FROM	InvoiceDocs id
	WHERE	id.InvoiceId = pInvoiceId
	ORDER	BY 1;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceImageSplit` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceImageSplit`(IN pUserId char(36), IN pImageId int, INOUT pNewInvoiceId int)
ThisProc:
	BEGIN

	-- noformat

		SET @CurInvoiceId = NULL;

		IF NOT EXISTS (SELECT	1
						FROM	InvoiceDocs id
						WHERE	id.id = pImageId) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This image cannot be found.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;


		IF pNewInvoiceId IS NULL THEN
			SELECT	i.InvoiceId 
			INTO	@CurInvoiceId
			FROM InvoiceDocs idoc
				INNER JOIN Invoice i	ON i.InvoiceId = idoc.InvoiceId
			WHERE idoc.Id = pImageId;

			INSERT INTO Invoice (ClientId, VendorId, ApprovalRequired, ApprovalStatusId, ApproverId, IsPaused, IsExceptionRaised, IsPOInvoice, ScannedDate, InvoiceType, IsModified, CompanyCode, BatchId, InvoiceName, isDeleted, IsOutPutPending, PayImmediate, IsMultipleSubmission, isLocked, PaperlessSubmission, Reissued, IsDaat)
				SELECT	ClientId,
						VendorId,
						ApprovalRequired,
						1,
						null, 
						IsPaused,
						IsExceptionRaised,
						IsPOInvoice,
						ScannedDate,
						InvoiceType,
						IsModified,
						CompanyCode,
						BatchId,
						InvoiceName,
						isDeleted,
						IsOutPutPending,
						PayImmediate,
						IsMultipleSubmission,
						0,
						PaperlessSubmission,
						Reissued,
						IsDaat
				FROM	Invoice
				WHERE	InvoiceId = @CurInvoiceId;
			SET pNewInvoiceId = LAST_INSERT_ID();
		END IF;

		--
		-- Transfert the image to the new invoice
		--

		UPDATE InvoiceDocs
		SET InvoiceId = pNewInvoiceId
		WHERE id = pImageId;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceMeta` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceMeta`(
-- noformat
	IN	pType 		tinyint,
	IN	pInvoiceId 	int,
	IN	pUserId 	char(36)
)
BEGIN

	set @ClientId = 0;
	set @isCloudxUser = 0;

	SELECT	IFNULL(IsCloudxUser, 0), ClientId 
	INTO	@isCloudxUser, @ClientId
	FROM	User
	WHERE	UserId = pUserId;


	call _x_SetClientTimeZone(@ClientId);
	
	IF (pType = 0) THEN
		SELECT	ExceptionTypeId AS TypeId,
				`Comment`
		
		FROM	Exception
		WHERE	InvoiceId = pInvoiceId;
	
	ELSEIF (pType = 1) THEN
		SELECT	`Action`,
				case when ifnull(User.IsCloudxUser, 0) in (0, @isCloudxUser)
						then Actor 
						else 'System' end																	as Actor,
				convert_tz(ActionDate, 'GMT', @@session.time_zone)											AS ActionDate,
				IFNULL(`Field`, '') 																		AS `Field`,
				IFNULL(PreviousData, '') 																	AS PreviousData,
				IFNULL(NewData, '') 																		AS NewData,
				IFNULL(InitialStatus, '') 																	AS InitialStatus,
				IFNULL(CurrentStatus, '') 																	AS CurrentStatus
	
		FROM 	InvoiceHistory
				left join User on User.UserId = InvoiceHistory.ActorId
		WHERE 	InvoiceId = pInvoiceId
		ORDER 	BY Id DESC;
	
	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceMyQueue` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceMyQueue`(
-- Noformat
	IN pUserId 			char(36),
	IN pInvoiceId 		int,
	in pIndexInQueue 	int,				-- This parm is always 0 when coming from the website, used within the SPs
											-- If 1 the pCount returns the Index of the Invoice Id in the the Users Approval Queue
											-- If 2 the pCount returns total count and total amount only
	IN pOffset 			INT,
	IN pSize 			INT,
	in pSource			varchar(50),		-- if NUll from Website else ExpenseSMART
	INOUT pCount 		int,
	INOUT pTotal 		decimal(18,2)
)
ThisProc:BEGIN

	set pSource 	= nullif(pSource, '');

	SELECT	IFNULL(IsCloudxUser, 0), ClientId 
	INTO	@isCloudxUser, @ClientId
	FROM	User
	WHERE	UserId = pUserId;

	set @CodePosition = 2;
	set @InvoiceNewDelayForCapture = 0;
	Call _x_GetClientParam(@ClientId, 'CodePosition', @CodePosition);
	Call _x_GetClientParam(@ClientId, 'InvoiceNewDelayForCapture', @InvoiceNewDelayForCapture);
	call _x_SetClientTimeZone(@ClientId);

	-- Put into a TempTable for return the count then later join to return the data for the page requested

	drop TEMPORARY TABLE IF EXISTS MyQueue;

	CREATE TEMPORARY TABLE IF NOT EXISTS MyQueue AS (
			SELECT	Distinct 
					i.InvoiceNo,
					_x_GetFormatedValue(v.VendorNo, v.VendorName, @CodePosition)											as Vendor,
					date(i.NetTermDate)																						as DiscountDate,
					date(i.PaymentDueDate)																					as PaymentDueDate,
					date(i.InvoiceDate) 																					as InvoiceDate,
					i.InvoiceTotal,
					i.ApprovalStatusId,
					Case	when i.InvoiceType = 'Invoice' then
								case when i.IsPOInvoice = true then concat('PO:', ifnull(i.PONUmber, '')) else 'Non PO' END
							else i.InvoiceType end 																			as InvoiceType,
					iStatus.StateName																						AS InvoiceStatus,
					DATEDIFF(date(UTC_TIMESTAMP()), date(i.SubmissionDate))+1												as InQueueDays,
					case when nullif(b.Sender, '') is not NULL
						then ifnull(nullif(b.Source, ''), '...')
						else nullif(b.Source, '') end																		as InvoiceSource,
					b.Sender 																								as InvoiceSender,
					case when reass.InvoiceId is null then '' else '*' end													as ReAssigned,
					i.InvoiceId,
					i.LastActionBy,
					case	when timestampdiff(day, UTC_TIMESTAMP(), i.NetTermDate) 	between 0 and 2 
								then 'Approaching the discount date.' 
							when timestampdiff(day, UTC_TIMESTAMP(), i.PaymentDueDate) 	between 0 and 2
								then 'Approaching the due date.' 
							when ifnull(b.Source, '') = 'User' and
								 timestampdiff(minute, b.CreatedDate, UTC_TIMESTAMP()) between 0 and @InvoiceNewDelayForCapture 
									then concat(substring(timediff(date_add(b.CreatedDate, interval @InvoiceNewDelayForCapture minute), UTC_TIMESTAMP()), 4, 5), ' remaining before sent for capture.') 
							else null end																					as AttentionMsg,
					ifnull(i.Comment, '')																					as Comment,
					convert_tz(i.ScannedDate, 'GMT', @@session.time_zone)													AS ScannedDate,
					convert_tz(i.LastActionDate, 'GMT', @@session.time_zone)												AS LastActionDate,
					case	when i.NetTermDate >= UTC_TIMESTAMP() 		then  1			-- Priority on DiscountDate
							when i.PaymentDueDate >= UTC_TIMESTAMP() 	then  2			-- The Duedate
							else 3 end																						as OrderByField1,												-- 
		
					case	when i.NetTermDate >= UTC_TIMESTAMP() 		then  abs(Datediff(UTC_TIMESTAMP(), i.NetTermDate))
							when i.PaymentDueDate >= UTC_TIMESTAMP() 	then  abs(Datediff(UTC_TIMESTAMP(), i.PaymentDueDate))
							else abs(DATEDIFF(date(UTC_TIMESTAMP()), date(i.SubmissionDate))) end							as OrderByField2

			FROM Invoice i
				INNER JOIN InvoiceStatus iStatus			ON iStatus.StateId = i.ApprovalStatusId
				left join Batch b 							on b.ID = i.BatchID
				left join Vendor v 							on v.ClientId = i.ClientId 
																and v.VendorId = i.VendorId
				left join UserInvoiceAssignment ass			on ass.InvoiceId = i.InvoiceId
																and ass.UserId = pUserId
				left join UserReassignmentHistory reassH	on reassH.TargetUserId = pUserId
															and UTC_TIMESTAMP() between reassH.DateFrom and reassH.DateTo
				left join UserInvoiceAssignment reass		on reass.InvoiceId = i.InvoiceId 
																and reass.UserId = reassH.SourceUserId
			WHERE i.ClientId = @ClientId
					AND i.IsDeleted 			= 0
					AND i.IsPaused	 			= 0
					and i.ApprovalStatusId		= 3
					and i.InvoiceType 			<> 'Archive'
					and (pSource is null
							or (
									pSource = '**(ExpenseSMART)**' 
									and i.IsPOInvoice = 0
									and (select sum(AmountAppoved) from ApprovalHistory where InvoiceId = i.InvoiceId) = i.InvoiceTotal
								)
						)

					and (
							(
								ifnull(pIndexInQueue, 0) = 0	
								and i.InvoiceID		<> ifnull(pInvoiceId, 0)
							)
								or pIndexInQueue in (1, 2)
						)
					and date(UTC_TIMESTAMP()) 			> ifnull(ifnull(reass.HoldEndDate, ass.HoldEndDate), date_sub(date(UTC_TIMESTAMP()), interval 1 day))
					and (
							ass.InvoiceId is not null
							or reass.InvoiceId is not null
						)
		);


 	if pIndexInQueue = 1 THEN
		select 	RowNumber-1
		into 	pCount
		from 	(
					select	ROW_NUMBER() OVER (ORDER BY OrderByField1, OrderbyField2, Vendor, InvoiceType, InvoiceNo) AS RowNumber,
							InvoiceId
					from 	MyQueue
				) Data
		where 	InvoiceId = pInvoiceId;
		set pTotal = 0.00;
		Leave ThisProc;
	end if;


	select 	count(*), sum(InvoiceTotal)  into pCount, pTotal from MyQueue;
	if pIndexInQueue = 2 THEN
		leave ThisProc;
	end if;

	if pSource = '**(ExpenseSMART)**' THEN
		set pOffset = 0;
		set pSize = 9999;
	end if;


	select 	
			IFNULL(InvoiceNo, '') AS InvoiceNo,
			Vendor,
			DiscountDate,
			PaymentDueDate,
			InvoiceTotal,
			ApprovalStatusId,
			InvoiceType,
			InvoiceStatus,
			InQueueDays,
			Reassigned,
			InvoiceSource,
			InvoiceSender,
			InvoiceId,
			AttentionMsg,
			Comment,
			IFNULL(LastActionBy, '') 																	AS LastActionBy,
			InvoiceDate,
			ScannedDate,
			LastActionDate,
			ROW_NUMBER() OVER (ORDER BY OrderByField1, OrderbyField2, Vendor, InvoiceType, InvoiceNo)-1	AS RowIndex
	from 	MyQueue
	order	by 
			OrderByField1, OrderbyField2, Vendor, InvoiceType, InvoiceNo 
	LIMIT pOffset, pSize;
/*
set @pCount = 0;
set @pTotal = 0.00;
call _x_InvoiceMyQueue ('18b61a24-d0a4-11e9-b055-22000a1f9f3d', null, 0, 0, 99, null, @pCount, @pTotal);
select @pCount, @pTotal;
*/

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoicePause` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoicePause`(
-- noformat 
	IN pInvoiceId 		int,
	IN pClientId 		int,
	IN pUserId 			char(36),
	IN pComment 		longtext,
	IN pIsPaused 		tinyint
	)
ThisProc:BEGIN


	-- Get security
	SELECT	max(cr.isAdmin), ifnull(Max(case WHEN crf.FunctionKey = if(pIsPaused=true, 'InvoicePause', 'InvoiceUnpause') THEN crf.access ELSE 0 end), 0)
	INTO 	@isAdmin, @isAllowed
	FROM	ClientUserRoles cur
	 		INNER JOIN	ClientRoles cr				ON cr.RoleId = cur.RoleId
			left JOIN 	ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
	WHERE	cur.UserId = pUserId;
	SET @isAllowed = IF(@isAdmin = 1, 1, @isAllowed); 


	-- Get Invoice Info
	SELECT	i.InvoiceType, i.IsPaused, i.isDeleted, i.ApprovalStatusId
	INTO	@InvoiceType, @IsPaused, @isDeleted, @ApprovalStatusId
	FROM 	Invoice i
	WHERE 	i.ClientId = pClientId
			AND i.InvoiceId = pInvoiceId;

	-- Check if the invoice is in the right state to do this action
	IF @IsDeleted = 1 THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This invoice is already deleted.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	elseIF @InvoiceType = 'Archive' THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This invoice has already been archived.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	ElseIF @IsPaused = pIsPaused THEN
		SET @Msg = concat('This invoice has already been ', if(pIsPaused, 'paused', 'unpaused'), '.');
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @Msg, MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	ElseIF NOT @ApprovalStatusId IN (1,3,4,5,6,8) THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This invoice is not in an actionable status.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;


	-- if not an admin, check if this is in their queue
	IF @isAdmin = 0 then
		set @Position	= NULL;
		set @Total 		= null;
		call _x_InvoiceMyQueue(pUserId, pInvoiceId, 1, 0, 0, null, @Position, @Total);
	
		if @Position is null then 
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The invoice is no longer in your queue.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		end if;
	END if;



	--
	-- Do the action, all business logic passed
	--


	call _x_InvoiceUpdateDataChanges(pInvoiceId, pClientId, pUserId, 'Before');


	IF (pIsPaused = TRUE) THEN /*Pause Invoice*/
		UPDATE	Invoice set 
				IsPaused = TRUE,
				LastActionDate = UTC_TIMESTAMP()
		WHERE	InvoiceId = pInvoiceId
				AND ClientId = pClientId;
		
		INSERT INTO PausedInvoice (InvoiceId, PauseBy, PausedDate, Comment)
			VALUES (pInvoiceId, pUserId, UTC_TIMESTAMP(), pComment)
			on duplicate key 	update 	PauseBy		= pUserId,
										PausedDate 	= UTC_TIMESTAMP(),
										Comment		= pComment;

		set @Message = null;
		select 	concat('Invoice paused for', char(13), char(10), VendorName, char(13), char(10), pComment)
		into 	@Message
		from 	Invoice 
				inner join Vendor 	on Vendor.VendorId = Invoice.VendorId and Vendor.ClientId = Invoice.ClientId
		WHERE	Invoice.InvoiceId = pInvoiceId
				AND Invoice.ClientId = pClientId;

		call _x_NotifyAdmins (pClientId, pUserId, 'Invoice paused', @Message, 'InvoicePause', 'Invoice', pInvoiceId);
	
	ELSEIF (pIsPaused = FALSE) THEN /*Unpause Invoice*/

		UPDATE	Invoice		SET IsPaused = FALSE
		WHERE	InvoiceId = pInvoiceId
				AND ClientId = pClientId;
		
		DELETE	FROM PausedInvoice
		WHERE	InvoiceId = pInvoiceId;

		delete	Data
		from	UserNotification Data
				inner join User u	on u.UserId = Data.UserId
		where 	u.ClientId = pClientId
				and Data.Source = 'InvoicePause' 
				and Data.LinkPage = 'Invoice' 
				and Data.LinkValue = pInvoiceId 
				and Data.ReadDate is null;
		
	END IF;

	call _x_InvoiceUpdateDataChanges(pInvoiceId, pClientId, pUserId, 'After');


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoicePONumber` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoicePONumber`(
-- noformat
	IN `pInvoiceId` INT,
	IN `pClientId` INT
)
BEGIN
	set @SplitChar = null;
	set @PONum = null;

	select SplitterCharacter 	into @SplitChar 	from ClientPONumberSplitter 	where ClientId = pClientId;
	SELECT PONumber 			INTO @PONum 		FROM Invoice 					WHERE InvoiceId = pInvoiceId;

	set @SplitChar 	= ifnull(@SplitChar, '|');
	set @PONum 		= ifnull(@PONum, '');

	call _x_StringToRows(@PONum, @SplitChar);

	select 	SearchValue 																						as PONumber,
			(Select count(*) 							from PO where ClientId = 88 and PONumber = SearchValue)	as TotalItems,
			(Select format(ifnull(SUM(ExtCost), 0),2) 	from PO where ClientId = 88 and PONumber = SearchValue)	as TotalOfPO
	from 	tSearchList
	order 	by 1;

-- 	SET @Expression = CONCAT(' SELECT
-- 											PONumber,
-- 											COUNT(DISTINCT ItemNumber) 	AS TotalItems, 
-- 											format(SUM(ExtCost),2) 		AS TotalOfPO								   
-- 								FROM	PO
-- 								WHERE	ClientId = ',pClientId,' 
-- 										and "', @SplitChar, @PONum, @SplitChar, '" like concat("%', @SplitChar, '", PONumber, "', @SplitChar, '%")
-- 								GROUP 	BY PONumber 
-- 								ORDER	BY PONumber ASC');
-- 
--  	PREPARE myquery FROM @Expression;
--  	EXECUTE myquery;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceQueueAuditor` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceQueueAuditor`(
-- Noformat
	IN pClientId 		int,
	IN pUserId 			char(36),
	IN pInvoiceId 		int,
	in pIndexInQueue 	int,				-- This parm is always 0 when coming from the website, used within the SPs
											-- If 1 the pCount returns the Index of the Invoice Id in the the Auditors Queue
											-- If 2 the pCount returns total count and total amount only
	IN pOffset 			INT,
	IN pSize 			INT,
	OUT pCount 			int,
	OUT pTotal 			decimal(18,2)
)
ThisProc:BEGIN

	set @CodePosition = 2;
	Call _x_GetClientParam(pClientId, 'CodePosition', @CodePosition);
	Call _x_SetClientTimeZone(pClientId);

	-- Put into a TempTable for return the count then later join to return the data for the page requested

	drop TEMPORARY TABLE IF EXISTS MyQueue;

	CREATE TEMPORARY TABLE IF NOT EXISTS MyQueue AS (
			SELECT	Distinct 
					i.InvoiceNo,
					_x_GetFormatedValue(v.VendorNo, v.VendorName, @CodePosition)											as Vendor,
					date(i.NetTermDate)																						as DiscountDate,
					date(i.PaymentDueDate)																					as PaymentDueDate,
					date(i.InvoiceDate) 																					as InvoiceDate,
					i.InvoiceTotal,
					Case	when i.InvoiceType = 'Invoice' then
								case when i.IsPOInvoice = true then concat('PO:', ifnull(i.PONUmber, '')) else 'Non PO' END
							else i.InvoiceType end 																			as InvoiceType,
					DATEDIFF(date(UTC_TIMESTAMP()), date(ifnull(i.SubmissionDate, i.ScannedDate)))+1						as InQueueDays,
					case when nullif(b.Sender, '') is not NULL
						then ifnull(nullif(b.Source, ''), '...')
						else nullif(b.Source, '') end																		as InvoiceSource,
					ifnull(b.Sender, '')																					as InvoiceSender,
					i.InvoiceId,
					i.LastActionBy,
					ifnull(concat(DATE_FORMAT(convert_tz(i.LastActionDate, 'GMT', @@session.time_zone), "%b %e, %Y"), ':', ac.Comment), '')	as AttentionMsg,
					i.Comment			 																					as Comment,																	
					convert_tz(i.LastActionDate, 'GMT', @@session.time_zone)												AS LastActionDate,
					convert_tz(i.ScannedDate, 'GMT', @@session.time_zone)													AS ScannedDate,
					i.ApprovalStatusId,
					iStatus.StateName																						AS InvoiceStatus,
					case when ac.Comment is not NULL then 1 else 2 end														as OrderByField1,												-- 
					2																										as OrderByField2

			FROM Invoice i
				INNER JOIN InvoiceStatus iStatus			ON iStatus.StateId = i.ApprovalStatusId
				inner join AuditorAssigment	aa				on aa.InvoiceID = i.InvoiceId
																and aa.AuditorID = pUserId
				left join AuditorsComments	ac				on ac.InvoiceID = i.InvoiceId
																and aa.AuditorID = pUserId
				left join Batch b 							on b.ID = i.BatchID
				left join Vendor v 							on v.ClientId = i.ClientId 
																and v.VendorId = i.VendorId
			WHERE i.ClientId = pClientId
					AND i.IsDeleted 			= 0
					and (
							(
								ifnull(pIndexInQueue, 0) = 0	
								and i.InvoiceID		<> ifnull(pInvoiceId, 0)
							)
							or pIndexInQueue in (1,2)
						)
		);

 	if pIndexInQueue = 1 THEN
		select 	RowNumber-1
		into 	pCount
		from 	(
					select	ROW_NUMBER() OVER (ORDER BY OrderByField1, OrderbyField2, Vendor, InvoiceType, InvoiceNo) AS RowNumber,
							InvoiceId
					from 	MyQueue
				) Data
		where 	InvoiceId = pInvoiceId;
		set pTotal = 0.00;
		Leave ThisProc;
	end if;


	select 	count(*), sum(InvoiceTotal)  into pCount, pTotal from MyQueue;
	if pIndexInQueue = 2 THEN
		leave ThisProc;
	end if;



	select 	
			Vendor,
			IFNULL(InvoiceNo, '') AS InvoiceNo,
			InvoiceType,
			InvoiceTotal,
			DiscountDate,
			PaymentDueDate,
			InQueueDays,
			'' as Reassigned,
			InvoiceSource,
			InvoiceSender,
			InvoiceId,
			IFNULL(LastActionBy, '') 																	AS LastActionBy,
			InvoiceDate,
			AttentionMsg,
			Comment,
			ScannedDate,
			LastActionDate,
			ApprovalStatusId,
			InvoiceStatus,
			ROW_NUMBER() OVER (ORDER BY OrderByField1, OrderbyField2, Vendor, InvoiceType, InvoiceNo)-1	AS RowIndex
	from 	MyQueue
	order	by 
			OrderByField1, OrderbyField2, Vendor, InvoiceType, InvoiceNo 
	LIMIT 	pOffset, pSize;
/*

set @pCount = 0;
set @pTotal = 0.00;
call _x_InvoiceQueueAuditor (1, '43633139-f421-4efe-93c7-89f625a24b55', null, 0, 0, 15, @pCount, @pTotal);
select @pCount, @pTotal;

*/

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceQueueCaptured` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceQueueCaptured`(
-- Noformat
	IN pClientId 		int,
	IN pUserId 			char(36),
	IN pInvoiceId 		int,
	in pIndexInQueue 	int,				-- This parm is always 0 when coming from the website, used within the SPs
											-- If 1 the pCount returns the Index of the Invoice Id in the the Users Approval Queue
											-- If 2 the pCount returns total count and total amount only
	IN pOffset 			INT,
	IN pSize 			INT,
	OUT pCount 			int,
	OUT pTotal 			decimal(18,2)
)
ThisProc:BEGIN

	set @isAdmin = 0;
	set @CodePosition = 2;
	set @InvoiceNewDelayForCapture = 0;
	Call _x_GetClientParam(pClientId, 'CodePosition', @CodePosition);
	Call _x_GetClientParam(pClientId, 'InvoiceNewDelayForCapture', @InvoiceNewDelayForCapture);

	SELECT	IFNULL(IsCloudxUser, 0)
	INTO	@isCloudxUser
	FROM	User
	WHERE	UserId = pUserId;

    IF EXISTS (SELECT	1
		        FROM	ClientUserRoles cur
		          		INNER JOIN ClientRoles cr		ON	cr.RoleId = cur.RoleId
		            										AND cr.isAdmin = 1
		        WHERE	cur.UserId = pUserId) THEN
		set @isAdmin = 1;
	end if;

	set @ClientId = pClientId;

	call _x_SetClientTimeZone(@ClientId);
	
	-- Put into a TempTable for return the count then later join to return the data for the page requested

	drop TEMPORARY TABLE IF EXISTS MyQueue;

	CREATE TEMPORARY TABLE IF NOT EXISTS MyQueue AS (
			SELECT	Distinct 
					i.InvoiceNo,
					_x_GetFormatedValue(v.VendorNo, v.VendorName, @CodePosition)											as Vendor,
					date(i.NetTermDate)																						as DiscountDate,
					date(i.PaymentDueDate)																					as PaymentDueDate,
					date(i.InvoiceDate) 																					as InvoiceDate,
					i.InvoiceTotal,
					Case	when i.InvoiceType = 'Invoice' then
								case when i.IsPOInvoice = true then concat('PO:', ifnull(i.PONUmber, '')) else 'Non PO' END
							else i.InvoiceType end 																			as InvoiceType,
					DATEDIFF(date(UTC_TIMESTAMP()), date(ifnull(i.SubmissionDate, i.ScannedDate)))+1						as InQueueDays,
					case when nullif(b.Sender, '') is not NULL
						then ifnull(nullif(b.Source, ''), '...')
						else nullif(b.Source, '') end																		as InvoiceSource,
					ifnull(b.Sender, '')																					as InvoiceSender,
					i.InvoiceId,
					i.LastActionBy,
					case when 	ifnull(b.Source, '') = 'User' and
								timestampdiff(minute, b.CreatedDate, UTC_TIMESTAMP()) between 0 and @InvoiceNewDelayForCapture 
								then concat(substring(timediff(date_add(b.CreatedDate, interval @InvoiceNewDelayForCapture minute), UTC_TIMESTAMP()), 4, 5), ' remaining before sent for capture.') 
						else null end			 																			as AttentionMsg,
					i.Comment			 																					as Comment,																	
					convert_tz(i.ScannedDate, 'GMT', @@session.time_zone)													AS ScannedDate,
					convert_tz(i.LastActionDate, 'GMT', @@session.time_zone)												AS LastActionDate,
					i.ApprovalStatusId,
					case	
							when 	ifnull(b.Source, '') = 'User'
									and timestampdiff(minute, b.CreatedDate, UTC_TIMESTAMP()) between 0 and @InvoiceNewDelayForCapture 	then  1				-- Priority on Bulk Invoice submission
							when i.NetTermDate >= UTC_TIMESTAMP() 						then  8				-- Priority on DiscountDate
							when i.PaymentDueDate >= UTC_TIMESTAMP() 					then  9				-- The Duedate
							else 10 end																						as OrderByField1,												-- 
		
					case	when i.NetTermDate >= UTC_TIMESTAMP() 		then  abs(Datediff(UTC_TIMESTAMP(), i.NetTermDate))
							when i.PaymentDueDate >= UTC_TIMESTAMP() 	then  abs(Datediff(UTC_TIMESTAMP(), i.PaymentDueDate))
							else abs(DATEDIFF(date(UTC_TIMESTAMP()), date(i.SubmissionDate))) end										as OrderByField2

			FROM Invoice i
				left join Batch b 							on b.ID = i.BatchID
				left join Vendor v 							on v.ClientId = i.ClientId 
																and v.VendorId = i.VendorId
			WHERE i.ClientId = @ClientId
					AND i.IsDeleted 			= 0
					AND i.IsPaused	 			= 0
					and i.InvoiceType 			<> 'Archive'
					and (
							i.ApprovalStatusId		= 1
							and (
									(@isCloudxUser = 0														-- Client employees can see what is in a captured state
										and @isAdmin = 1
										or	(@isAdmin = 0
												and	ifnull(b.Source, '') = 'User'
												and timestampdiff(minute, b.CreatedDate, UTC_TIMESTAMP()) between 0 and @InvoiceNewDelayForCapture 
											)
									)
									or (
										@isCloudxUser = 1 
										and ifnull(i.IsConfidential, 0) = 0					  				-- CloudX User cannot see confidential 
										and not (															-- Cloudx User cannot see new submissions under an hour
													ifnull(b.Source, '') = 'User'
													and timestampdiff(minute, b.CreatedDate, UTC_TIMESTAMP()) between 0 and @InvoiceNewDelayForCapture 
												)
										)
								)
						)
					and (
							(
								ifnull(pIndexInQueue, 0) = 0	
								and i.InvoiceID		<> ifnull(pInvoiceId, 0)
							)
							or pIndexInQueue in (1,2)
						)
		);


 	if pIndexInQueue = 1 THEN
		select 	RowNumber-1
		into 	pCount
		from 	(
					select	ROW_NUMBER() OVER (ORDER BY OrderByField1, OrderbyField2, Vendor, InvoiceType, InvoiceNo) AS RowNumber,
							InvoiceId
					from 	MyQueue
				) Data
		where 	InvoiceId = pInvoiceId;
		set pTotal = 0.00;
		Leave ThisProc;
	end if;


	select 	count(*), sum(InvoiceTotal)  into pCount, pTotal from MyQueue;
	if pIndexInQueue = 2 THEN
		leave ThisProc;
	end if;



	select 	
			Vendor,
			IFNULL(InvoiceNo, '') AS InvoiceNo,
			InvoiceType,
			InvoiceTotal,
			DiscountDate,
			PaymentDueDate,
			InQueueDays,
			'' as Reassigned,
			InvoiceSource,
			InvoiceSender,
			InvoiceId,
			IFNULL(LastActionBy, '') 																	AS LastActionBy,
			InvoiceDate,
			AttentionMsg,
			Comment,
			ScannedDate,
			LastActionDate,
			ApprovalStatusId,
			ROW_NUMBER() OVER (ORDER BY OrderByField1, OrderbyField2, Vendor, InvoiceType, InvoiceNo)-1	AS RowIndex
	from 	MyQueue
	order	by 
			OrderByField1, OrderbyField2, Vendor, InvoiceType, InvoiceNo 
	LIMIT 	pOffset, pSize;
/*

set @pCount = 0;
set @pTotal = 0.00;
call _x_InvoiceQueueCaptured (1, 'dfb816df-f6f5-41c0-9d43-8fbe626fed09', null, 0, 0, 15, @pCount, @pTotal);
select @pCount, @pTotal;


set @pCount = 0;
set @pTotal = 0.00;
call _x_InvoiceQueueCaptured (1, 'dfb816df-f6f5-41c0-9d43-8fbe626fed09', 663281327, 1, 0, 15, @pCount, @pTotal);
select @pCount, @pTotal;

*/

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceQueueException` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceQueueException`(
-- Noformat
	IN pClientId 		int,
	IN pUserId 			char(36),
	IN pInvoiceId 		int,
	in pIndexInQueue 	int,				-- This parm is always 0 when coming from the website, used within the SPs
											-- If 1 the pCount returns the Index of the Invoice Id in the the Users Approval Queue
											-- If 2 the pCount returns total count and total amount only
	IN pOffset 			INT,
	IN pSize 			INT,
	OUT pCount 			int,
	OUT pTotal 			decimal(18,2)
)
ThisProc:BEGIN

	set @CodePosition = 2;
	Call _x_GetClientParam(pClientId, 'CodePosition', @CodePosition);

	SELECT	IFNULL(IsCloudxUser, 0)
	INTO	@isCloudxUser
	FROM	User
	WHERE	UserId = pUserId;

	set @ClientId = pClientId;

	call _x_SetClientTimeZone(@ClientId);
	
	-- Put into a TempTable for return the count then later join to return the data for the page requested

	drop TEMPORARY TABLE IF EXISTS MyQueue;

	CREATE TEMPORARY TABLE IF NOT EXISTS MyQueue AS (
			SELECT	Distinct 
					i.InvoiceNo,
					_x_GetFormatedValue(v.VendorNo, v.VendorName, @CodePosition)									as Vendor,
					date(i.NetTermDate)																						as DiscountDate,
					date(i.PaymentDueDate)																					as PaymentDueDate,
					date(i.InvoiceDate) 																					as InvoiceDate,
					i.InvoiceTotal,
					DATEDIFF(date(UTC_TIMESTAMP()), date(ifnull(i.SubmissionDate, i.ScannedDate)))+1						as InQueueDays,
					case when nullif(b.Sender, '') is not NULL
						then ifnull(nullif(b.Source, ''), '...')
						else nullif(b.Source, '') end																		as InvoiceSource,
					b.Sender 																								as InvoiceSender,
					i.InvoiceId,
					i.LastActionBy,
					Case	when InvoiceType = 'Invoice' then
								case 	when i.IsPOInvoice = true then concat('PO:', ifnull(i.PONumber, '')) 
										else 'Non PO' END
							else InvoiceType end 																			as InvoiceType,
					case	when timestampdiff(day, UTC_TIMESTAMP(), i.NetTermDate) 		between 0 and 2 
							then 'Approaching the discount date.' 
							when timestampdiff(day, UTC_TIMESTAMP(), i.PaymentDueDate) 		between 0 and 2
							then 'Approaching the due date.' 
							else '' end																						as AttentionMsg,
					i.ApprovalStatusId,
					ifnull(Exception.Comment, 'n/a')																		as Comment,
					convert_tz(i.ScannedDate, 'GMT', @@session.time_zone)													AS ScannedDate,
					convert_tz(i.LastActionDate, 'GMT', @@session.time_zone)												AS LastActionDate,
					case	
							when i.NetTermDate >= UTC_TIMESTAMP() 						then  8				-- Priority on DiscountDate
							when i.PaymentDueDate >= UTC_TIMESTAMP() 					then  9				-- The Duedate
							else 10 end																						as OrderByField1,												-- 
		
					case	when i.NetTermDate >= UTC_TIMESTAMP() 		then  abs(Datediff(UTC_TIMESTAMP(), i.NetTermDate))
							when i.PaymentDueDate >= UTC_TIMESTAMP() 	then  abs(Datediff(UTC_TIMESTAMP(), i.PaymentDueDate))
							else abs(DATEDIFF(date(UTC_TIMESTAMP()), date(i.SubmissionDate))) end										as OrderByField2

			FROM Invoice i
				LEFT JOIN Exception 						on Exception.InvoiceId = i.InvoiceId
				left join Batch b 							on b.ID = i.BatchID
				left join Vendor v 							on v.ClientId = i.ClientId 
																and v.VendorId = i.VendorId
			WHERE i.ClientId = @ClientId
					AND i.IsDeleted 			= 0
					AND i.IsPaused	 			= 0
					and i.InvoiceType 			<> 'Archive'
					and i.ApprovalStatusId		= 6
					and (
							(
								ifnull(pIndexInQueue, 0) = 0	
								and i.InvoiceID		<> ifnull(pInvoiceId, 0)
							)
							or pIndexInQueue in (1,2)
						)
		);


 	if pIndexInQueue = 1 THEN
		select 	RowNumber-1
		into 	pCount
		from 	(
					select	ROW_NUMBER() OVER (ORDER BY OrderByField1, OrderbyField2, Vendor, InvoiceType, InvoiceNo) AS RowNumber,
							InvoiceId
					from 	MyQueue
				) Data
		where 	InvoiceId = pInvoiceId;
		set pTotal = 0.00;
		Leave ThisProc;
	end if;


	select 	count(*), ifnull(sum(InvoiceTotal), 0.00)  into pCount, pTotal from MyQueue;
	if pIndexInQueue = 2 THEN
		leave ThisProc;
	end if;

	select 	
			Vendor,
			IFNULL(InvoiceNo, '') AS InvoiceNo,
			InvoiceType,
			InvoiceTotal,
			DiscountDate,
			PaymentDueDate,
			InQueueDays,
			'' as Reassigned,
			InvoiceSource,
			InvoiceSender,
			InvoiceId,
			IFNULL(LastActionBy, '') 																	AS LastActionBy,
			InvoiceDate,
			AttentionMsg,
			Comment,
			ApprovalStatusId,
			ScannedDate,
			LastActionDate,
			ROW_NUMBER() OVER (ORDER BY OrderByField1, OrderbyField2, Vendor, InvoiceType, InvoiceNo)-1	AS RowIndex
	from 	MyQueue
	order	by 
			OrderByField1, OrderbyField2, Vendor, InvoiceType, InvoiceNo 
	LIMIT 	pOffset, pSize;
/*

set @pCount = 0;
set @pTotal = 0.00;
call _x_InvoiceQueueException (1, '18b61a24-d0a4-11e9-b055-22000a1f9f3d', null, 0, 0, 15, @pCount, @pTotal);
select @pCount, @pTotal;


set @pCount = 0;
set @pTotal = 0.00;
call _x_InvoiceQueueException (1, '18b61a24-d0a4-11e9-b055-22000a1f9f3d', 663280518, 1, 0, 15, @pCount, @pTotal);
select @pCount, @pTotal;

*/

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceReject` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceReject`(
-- noformat 
	IN pInvoiceId 						int,
	IN pClientId 						int,
	IN pUserId 							char(36),
	IN pComment 						longtext,
	IN pRejectToUser					char(36),
	in pUserInvoiceAssignmentHistoryId 	int
	)
ThisProc:BEGIN

	SELECT	CONCAT(u.LastName, ', ', u.FirstName) INTO @ApproverName
	FROM	User u
	WHERE	u.UserId = pRejectToUser
			and u.ClientId = pClientId;

	SELECT	CONCAT(u.LastName, ', ', u.FirstName) INTO @ActorName
	FROM	User u
	WHERE	u.UserId = pUserId
			and u.ClientId = pClientId;

	set @Message = null;
	select 	concat('Invoice rejected for', char(13), char(10), VendorName, char(13), char(10), pComment)
	into 	@Message
	from 	Invoice 
			inner join Vendor 	on Vendor.VendorId = Invoice.VendorId and Vendor.ClientId = Invoice.ClientId
	WHERE	Invoice.InvoiceId = pInvoiceId
			AND Invoice.ClientId = pClientId;
	CALL _x_Notify(pRejectToUser, 'Invoice Assignment', @Message, 'InvoiceReject', 'Invoice', pInvoiceId, NULL);

	SELECT 	FromApprovalSubStepId
	INTO 	@ApprovalSubStepId
	FROM	UserInvoiceAssignmentHistory
	WHERE	InvoiceId = pInvoiceId
			AND UserInvoiceAssignmentHistoryId = pUserInvoiceAssignmentHistoryId;

	DELETE	FROM 	UserInvoiceAssignment
			WHERE 	InvoiceId = pInvoiceId;

	DELETE	FROM	UserInvoiceAssignmentHistory
			WHERE	InvoiceId = pInvoiceId
					AND UserInvoiceAssignmentHistoryId >= pUserInvoiceAssignmentHistoryId;

	INSERT INTO UserInvoiceAssignment (InvoiceId, UserId, Type, State, DateCreated, ApprovalSubStepId, Comments)
		VALUES (pInvoiceId, pRejectToUser, 0, 1, UTC_TIMESTAMP(), @ApprovalSubStepId, @Message);
		

	-- Insert into history
	INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId)
		SELECT	InvoiceId,
				@ActorName 					AS Actor,
				'Reject' 					AS Action,
				UTC_TIMESTAMP()				AS ActionDate,
				@ActorName					AS PreviousData,
				@ApproverName				AS NewData,
				'Approver' 					AS Field,
				InvoiceStatus.StateName		AS InitialStatus,
				InvoiceStatus.StateName		AS CurentStatus,
				pUserId						AS ActorId
		from 	Invoice
				inner join 	InvoiceStatus on InvoiceStatus.StateId = Invoice.ApprovalStatusId
		Where 	InvoiceId = pInvoiceId
				AND Invoice.ClientId = pClientId;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceRelatedDocs` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceRelatedDocs`(
	IN `pInvoiceId` int
)
BEGIN

-- Noformat

	SELECT	ClientId, CompanyCode, VendorId, InvoiceNo, PONumber, ParentInvoiceId, SourceInvoiceId
	INTO 	@ClientId, @CompanyCode, @VendorId, @InvoiceNo, @PONumber, @ParentInvoiceId, @SourceInvoiceId
	FROM 	Invoice
	WHERE 	InvoiceId = pInvoiceId;


	SELECT	case 
				when RD.SourceInvoiceId is not null 
					then 'Attachment'
				else RD.InvoiceType end 					as InvoiceType,
			RD.InvoiceNo,
			RD.PONumber,
			date(RD.InvoiceDate)							as InvoiceDate,
			RD.InvoiceTotal,
			iStatus.StateName								AS InvoiceStatus,
			(SELECT		COUNT(*)
				FROM	InvoiceDocs iDocs
				WHERE	iDocs.InvoiceId = RD.InvoiceId) 	AS PageCount,
			RD.InvoiceId
	FROM Invoice RD
		INNER JOIN InvoiceStatus iStatus	ON iStatus.StateId = RD.ApprovalStatusId
	WHERE RD.ClientId = @ClientId
			AND (RD.CompanyCode = @CompanyCode or RD.CompanyCode is null)
			AND RD.IsDeleted 	= 0
			AND RD.InvoiceId 	<> pInvoiceId
			AND (
					(	
						RD.VendorId 	= @VendorId
						and (
								RD.InvoiceNo 	= NULLIF(@InvoiceNo, '') 
								OR RD.PONumber 	= NULLIF(@PONumber, '')
							)
					)
					or RD.ParentInvoiceId	= pInvoiceId
					or RD.ParentInvoiceId	= @ParentInvoiceId
					or RD.InvoiceId 		= @ParentInvoiceId
					or RD.SourceInvoiceId	= pInvoiceId
					or RD.InvoiceId			= @SourceInvoiceId
				)
	ORDER 	BY case	when RD.SourceInvoiceId is not null then 1 
					when RD.InvoiceType = 'Invoice' then 99 
					else 10 end,
			RD.InvoiceNo,
			RD.PONumber,
			RD.InvoiceDate;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceReset` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceReset`(
-- noformat
	IN pClientId		int,
	IN pInvoiceId		int,
	IN pUserId			char(36),
	IN pStatus	 		varchar(20)

)
ThisProc:BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
		@p1 = MESSAGE_TEXT;
		SET @Message = @p1;
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @p1, MYSQL_ERRNO = 1;
	END;

	IF pStatus <> 'Resubmit' AND pStatus <> 'Approved' AND pStatus <> 'LastApprover'  then
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Incorrect action.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;


	SELECT	ApprovalStatusId
	INTO 	@ApprovalStatusId
	FROM 	Invoice 
	where 	ClientId = pClientId
			and InvoiceId = pInvoiceId;	


	IF 	pStatus = 'Resubmit' AND NOT @ApprovalStatusId IN (4,5) THEN 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Incorrect status for this action.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	elseIF 	pStatus = 'Approved' AND NOT @ApprovalStatusId IN (5) THEN 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Incorrect status for this action.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
-- 	elseIF 	pStatus = 'LastApprover' AND NOT @ApprovalStatusId IN (4,5) THEN 
-- 		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Incorrect status for this action.', MYSQL_ERRNO = 1;
-- 		LEAVE ThisProc;
	END IF;	


	delete FROM PausedInvoice WHERE InvoiceId = pInvoiceId;

	set @CurrentStatus = '';
	select 	_x_GetInvoiceStatusName(ApprovalStatusId)
			into @CurrentStatus
	from	Invoice
	where 	ClientId = pClientId
			and InvoiceId = pInvoiceId;

	SELECT	CONCAT(LastName, ', ', FirstName) INTO @ActorName
	FROM	User
	WHERE	ClientId = pClientId
			AND UserId = pUserId;

	IF pStatus = 'Resubmit' THEN 
		Update 	Invoice set InvoiceType 	= IF(InvoiceType = 'Archive', 'Invoice', InvoiceType),
							ArchiveReason 	= null,
							AprovedDate 	= NULL,
							ApproverId 		= NULL,
							IsPaused 		= false
		where 	ClientId = pClientId
				and InvoiceId = pInvoiceId; 

		INSERT INTO InvoiceHistory (InvoiceId, ActorId, Actor, `Action`, ActionDate, NewData, `Field`, InitialStatus, CurrentStatus)
	 			VALUES (pInvoiceId, pUserId, @ActorName, 'Update', UTC_TIMESTAMP(), 'Invoice was reset', 'Invoice Status', @CurrentStatus, 'Captured');
		
		Update 	Invoice set ApprovalStatusId = 1
		where 	ClientId = pClientId
				and InvoiceId = pInvoiceId; 
	
		update  ApprovalHistory set ApproverId = '00000000-0000-0000-0000-000000000000' WHERE InvoiceId = pInvoiceId;

-- 	 	DELETE	FROM PendingApprovalHistory			WHERE InvoiceId = pInvoiceId;
-- 	 	DELETE	FROM ApprovalHistory				WHERE InvoiceId = pInvoiceId;
	 	DELETE	FROM UserInvoiceAssignment			WHERE InvoiceId = pInvoiceId;
	 	DELETE	FROM UserInvoiceAssignmentHistory	WHERE InvoiceId = pInvoiceId;

		set @Message = null;
		call _x_InvoiceSubmit(pClientId, pInvoiceId, pUserId, 0, @Message);
	
		if not @Message in ('Submitted', 'Exception') THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @Message, MYSQL_ERRNO = 1;
		end if;
		LEAVE ThisProc;
	end if;


	IF pStatus = 'Approved' THEN 
		Update 	Invoice set InvoiceType = IF(InvoiceType = 'Archive', 'Invoice', InvoiceType),
							ArchiveReason = null,
							IsPaused = false
		where 	ClientId = pClientId
				and InvoiceId = pInvoiceId; 

		INSERT INTO InvoiceHistory (InvoiceId, ActorId, Actor, `Action`, ActionDate, NewData, `Field`, InitialStatus, CurrentStatus)
	 			VALUES (pInvoiceId, pUserId, @ActorName, 'Update', UTC_TIMESTAMP(), 'Invoice was reset', 'Invoice Status', @CurrentStatus, 'Approved');
		
		Update 	Invoice set ApprovalStatusId = 4
		where 	ClientId = pClientId
				and InvoiceId = pInvoiceId; 

		LEAVE ThisProc;
	end if;

-- 	IF pStatus = 'LastApprover' THEN 
-- 		SET @ResetToUserInvoiceAssignmentHistoryId = null;
-- 		-- Get the last approver that
-- 		SELECT	
-- 				CONCAT(User.LastName, ', ', User.FirstName) 					AS FullName,
-- 				min(CAST(User.UserId AS char(36)))								AS UserId,
-- 				min(uiah.UserInvoiceAssignmentHistoryId)						AS UserInvoiceAssignmentHistoryId
-- 		INTO 	@ResetToUserName,
-- 				@ResetToUserId,
-- 				@ResetToUserInvoiceAssignmentHistoryId
-- 		FROM	UserInvoiceAssignmentHistory uiah
-- 				inner JOIN User  	ON	User.UserId = uiah.FromApprovalSubStepUserId
-- 										AND User.ClientId = pClientId
-- 										AND User.IsActive = 1
-- 		WHERE	User.ClientId = pClientId 
-- 				AND uiah.InvoiceId = pInvoiceId
-- 		GROUP	BY FullName, FromApprovalSubStepId
-- 		ORDER 	BY 	min(convert_tz(uiah.ApprovedOn, 'GMT', @@session.time_zone)) desc
-- 		LIMIT 	1;
-- 
-- 		IF @ResetToUserInvoiceAssignmentHistoryId is NULL THEN
-- 			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'There is no active user to reject back to.', MYSQL_ERRNO = 1;
-- 			LEAVE ThisProc;
-- 		end if;
-- 
-- 
-- 		Update 	Invoice set InvoiceType = IF(InvoiceType = 'Archive', 'Invoice', InvoiceType),
-- 							ArchiveReason = null,
-- 							AprovedDate = NULL,
-- 							ApproverId = NULL,
-- 							IsPaused = false
-- 		where 	ClientId = pClientId
-- 				and InvoiceId = pInvoiceId; 
-- 
-- 		SELECT 	FromApprovalSubStepId
-- 		INTO 	@ApprovalSubStepId
-- 		FROM	UserInvoiceAssignmentHistory
-- 		WHERE	InvoiceId = pInvoiceId
-- 				AND UserInvoiceAssignmentHistoryId = @ResetToUserInvoiceAssignmentHistoryId;
-- 	
-- 		DELETE	FROM 	UserInvoiceAssignment
-- 				WHERE 	InvoiceId = pInvoiceId;
-- 	
-- 		DELETE	FROM	UserInvoiceAssignmentHistory
-- 				WHERE	InvoiceId = pInvoiceId
-- 						AND UserInvoiceAssignmentHistoryId >= @ResetToUserInvoiceAssignmentHistoryId;
-- 
-- 		INSERT INTO UserInvoiceAssignment (InvoiceId, UserId, Type, State, DateCreated, ApprovalSubStepId, Comments)
-- 			VALUES (pInvoiceId, @ResetToUserId, 0, 1, UTC_TIMESTAMP(), @ApprovalSubStepId, 'Invoice reset back');
-- 		
-- 
-- 	-- Insert into history
-- 	INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId)
-- 		SELECT	InvoiceId,
-- 				@ActorName 					AS Actor,
-- 				'Reject' 					AS Action,
-- 				UTC_TIMESTAMP()				AS ActionDate,
-- 				@ActorName					AS PreviousData,
-- 				@ApproverName				AS NewData,
-- 				'Approver' 					AS Field,
-- 				InvoiceStatus.StateName		AS InitialStatus,
-- 				InvoiceStatus.StateName		AS CurentStatus,
-- 				pUserId						AS ActorId
-- 		from 	Invoice
-- 				inner join 	InvoiceStatus on InvoiceStatus.StateId = Invoice.ApprovalStatusId
-- 		Where 	InvoiceId = pInvoiceId
-- 				AND Invoice.ClientId = pClientId;
-- 
-- 
-- 		INSERT INTO InvoiceHistory (InvoiceId, ActorId, Actor, `Action`, ActionDate, NewData, `Field`, InitialStatus, CurrentStatus)
-- 	 			VALUES (pInvoiceId, pUserId, @ActorName, 'Update', UTC_TIMESTAMP(), 'Invoice was reset', 'Invoice Status', @CurrentStatus, 'In approval');
-- 		
-- 		Update 	Invoice set ApprovalStatusId = 4
-- 		where 	ClientId = pClientId
-- 				and InvoiceId = pInvoiceId; 
-- 
-- 		LEAVE ThisProc;
-- 	end if;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceSubmit` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceSubmit`(
-- noformat
	IN pClientId 	int,
	IN pInvoiceId 	int,
	IN pUserId 		varchar(36),
	IN pForTesting	int,
	INOUT pMessage	varchar(500)
)
ThisProc:BEGIN
	DECLARE done int DEFAULT FALSE;
	DECLARE InvoiceFieldName 		varchar(100);
	DECLARE InvoiceDisplayName 		varchar(100);
	declare FieldDatatype 			varchar(100);
	declare CheckDuplicate 			varchar(100);
	DECLARE curRequiredCheck CURSOR FOR SELECT * FROM MyRequiredFields;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
		@p1 = MESSAGE_TEXT;
		SET pMessage = @p1;
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @p1, MYSQL_ERRNO = 1;
	END;

	SET SESSION group_concat_max_len = 1000000;

	SET @DEBUGONLY = IFNULL(pForTesting, 0);


	SET @ApprovalStatusId 	= -1;
	set @Task				= 0;
	set @VendorId			= null;
	set @InvoiceType 		= null;
	set @InvoiceTotal		= null;
	set @InvoiceNo			= null;
	set @PONumber			= null;
	set @isPO				= null;
	set @CompanyCode		= null;
	set @InvoiceTaxAmount	= null;
	set @FreightAmount		= null;
	SET @isPaused 			= null;

	-- Get the information about the invoice
	select	ApprovalStatusId,
			VendorId, i.InvoiceNo, i.PONumber, i.IsPOInvoice, i.CompanyCode, i.InvoiceType,
			ifnull(i.InvoiceTotal, 0), ifnull(i.Tax, 0), ifnull(i.FreightCharges, 0),
			CASE	WHEN ApprovalStatusId = 1 AND IsPOInvoice = 1 THEN 6 
					WHEN ApprovalStatusId = 1 AND IsPOInvoice = 0 THEN 7 
					WHEN ApprovalStatusId = 3 AND IsPOInvoice = 1 THEN 0 
					WHEN ApprovalStatusId = 3 AND IsPOInvoice = 0 THEN 1 
					WHEN ApprovalStatusId = 4 AND IsPOInvoice = 1 THEN 0 
					WHEN ApprovalStatusId = 4 AND IsPOInvoice = 0 THEN 1 
					WHEN ApprovalStatusId = 5 AND IsPOInvoice = 1 THEN 0 
					WHEN ApprovalStatusId = 5 AND IsPOInvoice = 0 THEN 1 
					WHEN ApprovalStatusId = 6 AND IsPOInvoice = 1 THEN 2 
					WHEN ApprovalStatusId = 6 AND IsPOInvoice = 0 THEN 3 
					WHEN ApprovalStatusId > 6 AND IsPOInvoice = 1 THEN 0 
					WHEN ApprovalStatusId > 6 AND IsPOInvoice = 0 THEN 1 
					ELSE 0 END,
			isPaused
	into 	@ApprovalStatusId,
			@VendorId, @InvoiceNo, @PONumber, @isPO, @CompanyCode, @InvoiceType,
			@InvoiceTotal, @InvoiceTaxAmount, @FreightAmount,
			@Task, @isPaused
	from 	Invoice i
	where 	InvoiceId = pInvoiceId and ClientId = pClientId
			and i.IsDeleted = 0;


	If @isPaused = 1 THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The invoice is paused.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;
	If not @ApprovalStatusId in (1,6) THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The invoice is no longer in exception.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;


-- Get The information about the submitter
	SET @ApproverName 			= null;
	set @isAllowedToSubmit		= 0;

	SELECT	CONCAT(u.LastName, ', ', u.FirstName),
			ifnull(xup.IsExceptionHandler, 0)
	INTO	@ApproverName, @isAllowedToSubmit
	FROM	User u
 			inner join 	_x_UserParameters xup ON xup.UserId = u.UserId
 	WHERE	u.UserId = pUserId;

	-- ADMIN
	if exists (SELECT	cr.*
				FROM	ClientUserRoles cur
						INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
				WHERE 	cr.isAdmin	= 1
						aND cur.UserId	= pUserId
				limit 	1) then 
		SET @isAllowedToSubmit = 1;
	END IF;

	-- User with allow new invoice
	if exists (SELECT	1
				FROM	ClientUserRoles cur
						INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
						INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
				WHERE	cur.UserId = pUserId
						and FunctionKey = 'InvoiceNew') and @ApprovalStatusId = 1 then 
		SET @isAllowedToSubmit = 1;
	END IF;
	

	IF @ApproverName is null THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Unknown user.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;	
	IF @isAllowedToSubmit = 0 then 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Not authorized to submit this invoice.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;	


	-- Clear the exceptions for this invoice
	Insert into ExceptionHistory (InvoiceId, ExceptionTypeId, ExceptionHandlerId, ExceptionHandledDate, Comment, SourceExceptionId)
		select	InvoiceId, ExceptionTypeId, pUserId, UTC_TIMESTAMP(), Comment, null
		from	Exception where InvoiceId = pInvoiceId;

	Delete from Exception where InvoiceId = pInvoiceId;
	
	set @SQLDuplicateCheck = null;

	-- Check all the required fields
	drop TEMPORARY TABLE IF EXISTS MyRequiredFields;

	CREATE TEMPORARY TABLE IF NOT EXISTS MyRequiredFields AS (
		select 	ia.InvoiceAttributeName, ifnull(cia.DisplayName, ia.DefaultDisplayName) as DisplayName, COLUMNS.DATA_TYPE, cia.CheckDuplicate
		from	ClientInvoiceAttribute cia
				inner join 	InvoiceAttribute ia on ia.InvoiceAttributeID = cia.InvoiceAttributeID
				inner join 	information_schema.COLUMNS 	on COLUMNS.Column_Name = ia.InvoiceAttributeName
															and TABLE_SCHEMA = DATABASE()
 															and TABLE_NAME = 'Invoice'
		where 	ClientId = pClientId
				and cia.InvoiceType = @InvoiceType
				and (cia.IsRequred = 1 or cia.IsCritical = 1)
				and isReadOnly = 0
				and Task = @Task
		);

	OPEN curRequiredCheck;
readParms:
	LOOP
		FETCH curRequiredCheck INTO InvoiceFieldName, InvoiceDisplayName, FieldDatatype, CheckDuplicate;
		IF done THEN
			LEAVE readParms;
		END IF;

		if CheckDuplicate = 1 then
			set @SQLDuplicateCheck = ifnull(concat(@SQLDuplicateCheck, char(13), char(10), 'and '), 'Select 1 into @DuplicateInvoice from Invoice Chk inner join Invoice Data on ');
			set @SQLDuplicateCheck = concat(@SQLDuplicateCheck, 'Data.', InvoiceFieldName, ' = Chk.', InvoiceFieldName);
		end if;

		set @SQL = Concat('Insert into Exception (InvoiceId, ExceptionTypeId, Comment)');
		set @SQL = Concat(@SQL, char(13), char(10), 'Select ', pInvoiceId, ',', 99, ', ', '''', InvoiceDisplayName, ' is missing.''');
		set @SQL = Concat(@SQL, char(13), char(10), 'from Invoice where InvoiceId = ', pInvoiceId);
		set @SQL = Concat(@SQL, char(13), char(10), 'and nullif(', InvoiceFieldName, ', ', case when FieldDatatype in ('varchar', 'longtext', 'text', 'mediumtext', 'char') then '''''' else '0' end, ') is null');
		PREPARE myquery FROM @SQL;
		EXECUTE myquery;
		deallocate PREPARE myquery;

	END LOOP;
	CLOSE curRequiredCheck;


	if @SQLDuplicateCheck is not null THEN
		set @SQLDuplicateCheck = concat(@SQLDuplicateCheck, char(13), char(10), 'and Data.ClientId = Chk.ClientId');
		set @SQLDuplicateCheck = concat(@SQLDuplicateCheck, char(13), char(10), 'and Chk.InvoiceId = ', pInvoiceId);
		set @SQLDuplicateCheck = concat(@SQLDuplicateCheck, char(13), char(10), 'Where Data.IsDeleted = 0 and Data.InvoiceId <> ', pInvoiceId);

		set @DuplicateInvoice = 0;
		PREPARE myquery FROM @SQLDuplicateCheck;
		EXECUTE myquery;
		deallocate PREPARE myquery;

		if pForTesting = 1 then 
			select 'Duplicate Check', @SQLDuplicateCheck;
		end if;
		
		if @DuplicateInvoice = 1 THEN
			Insert into Exception (InvoiceId, ExceptionTypeId, Comment)
				Values (pInvoiceId, 100, 'Duplicate Detected.');
		end if;

	end if;


	

-- 	if @isPO = 1 then 
-- 		SET @AdjustmentPercentPlus = 0;
-- 		SET @AdjustmentPercentMinus = 0;
-- 		set @AdjustmentAmountPlus = 0;		-- Priority is Percentage
-- 		set @AdjustmentAmountMinus = 0;
-- 		IF EXISTS ( SELECT	1
-- 					FROM	ClientSpecificConfig
-- 					WHERE	ClientSpecificConfigType = 29			-- ConsiderAdjustmentAmountForTreshold
-- 					AND	ClientId = pClientId) THEN
-- 
-- 			select	ifnull(-(AdjustmentPercent), 0), ifnull(-(AdjustmentAmount), 0)
-- 			into 	@AdjustmentPercentMinus, @AdjustmentAmountMinus
-- 			from	Client 
-- 			where	ClientId = pClientId;
-- 
-- 			IF EXISTS ( SELECT	1
-- 						FROM	ClientSpecificConfig
-- 						WHERE	ClientSpecificConfigType = 751		-- AllowNegativeThresholdTobeApprove
-- 						AND		ClientId = pClientId) THEN
-- 					SET @AdjustmentPercentPlus 	= @AdjustmentPercentMinus * -1;
-- 					SET @AmountPercentPlus	 	= @AdjustmentAmountMinus * -1;
-- 			END IF;
-- 		END IF;
-- 
-- 		-- Check PO rules to report any exceptions
-- 		if exists (select * from ClientExceptionRule where ClientId = pClientId and Task = 0 and ConfigurableExceptionType in  (0, 3)) THEN
-- 			if not exists (select * from LineItemDetail lid where InvoiceId = pInvoiceId) THEN
-- 				Insert into Exception (InvoiceId, ExceptionTypeId, Comment)
-- 					Values (pInvoiceId, 99, 'Missing line items.');
-- 			end if;
-- 			set @AmountCheckPlus 	= @InvoiceTotal + @InvoiceTaxAmount + @FreightAmount;
-- 			set @AmountCheckMinus 	= @InvoiceTotal + @InvoiceTaxAmount + @FreightAmount;
-- 
-- 			if @AdjustmentPercentMinus <> 0 then
-- 				set @AmountCheckPlus	= @AmountCheckPlus 	+ (@AmountCheckPlus * @AdjustmentPercentPlus / 100);
-- 				set @AmountCheckMinus	= @AmountCheckMinus + (@AmountCheckMinus * @AdjustmentPercentMinus / 100);
-- 			elseif @AdjustmentAmountMinus <> 0 then
-- 				set @AmountCheckPlus	= @AmountCheckPlus 	+ @AdjustmentAmountPlus;
-- 				set @AmountCheckMinus	= @AmountCheckMinus + @AdjustmentAmountMinus;
-- 			end if;
-- 
-- 			if @DEBUGONLY = 1 THEN
-- 				select 'Theshold',  @AmountCheckMinus, @AmountCheckPlus;
-- 			end if;
-- 
-- 			if not ifnull((	select	sum(lid.TotalAmount) 
-- 							from	LineItemDetail lid 
-- 							where	InvoiceId = pInvoiceId), @AmountCheckPlus) between @AmountCheckMinus and @AmountCheckPlus THEN
-- 				if @AmountCheckMinus = @AmountCheckPlus then
-- 					Insert into Exception (InvoiceId, ExceptionTypeId, Comment)
-- 						Values (pInvoiceId, 99, 'Sum of the line items do not match the invoice total.');
-- 				else
-- 					Insert into Exception (InvoiceId, ExceptionTypeId, Comment)
-- 						Values (pInvoiceId, 99, 'Adjustment amount exceeds the threshold configuration.');
-- 				end if;
-- 			end if;
-- 		end if;
-- 
-- 	end if;


	if exists (select 1 from Exception e where InvoiceId = pInvoiceId) THEN
		set pMessage = 'Exception';
		LEAVE ThisProc;
	end if;

	-- Housekeeping
	delete 	from UserInvoiceAssignment 			where InvoiceId = pInvoiceId;
	DELETE 	from PendingApprovalHistory 		where InvoiceId = pInvoiceId;
	DELETE 	from TempApprovalHistory 			where InvoiceId = pInvoiceId;
	DELETE 	from ApprovalHistory 				where InvoiceId = pInvoiceId;

	call _x_InvoiceApprove(pClientId, pInvoiceId, pUserId, pForTesting, pMessage);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceUpdate`(
-- noformat
	IN `pClientId` 			int,
	IN `pInvoiceId` 		int,
	IN `pUserId` 			varchar(36),
	IN `pSetStatement` 		longtext)
BEGIN

	call _x_InvoiceUpdateDataChanges(pInvoiceId, pClientId, pUserId, 'Before');

	set @CountOfGLCoding = 0;
	set @OldInvoiceTotal = 0;
	set @NewInvoiceTotal = 0;
	select 	InvoiceTotal, (select count(*) from PendingApprovalHistory pah where InvoiceId = pInvoiceId) as CountOfGLCoding
			
	into 	@OldInvoiceTotal, @CountOfGLCoding
	from	Invoice 
	where 	InvoiceId = pInvoiceId;
	
	SET @Expression = CONCAT("
			UPDATE 	Invoice SET 
					LastActionDate 		= UTC_TIMESTAMP(), ",
					pSetStatement, " 
			WHERE	ClientId = ", pClientId, " 
					AND InvoiceId = ", pInvoiceId);

	PREPARE myquery FROM @Expression;
	EXECUTE myquery;
	deallocate prepare myquery;

	Update	Invoice 	set ApprovalStatusId = 5, AcceptedDate = UTC_TIMESTAMP()
	where 	InvoiceId = pInvoiceId 
			and ClientId = pClientId
			and ifnull(ArchiveReason, '') <> ''
			and ApprovalStatusId <> 5;
	

	if exists (select 1 from myDataChanges where FieldName = 'ArchiveReason' and FieldValueBefore <> FieldValueAfter) then 
		UPDATE 	Invoice SET Paused = FALSE
		WHERE	ClientId = pClientId 
				AND InvoiceId = pInvoiceId 	
				AND Paused = True;

		DELETE	FROM PausedInvoice
		WHERE	InvoiceId = pInvoiceId;		

		select 	FieldValueBefore, FieldValueAfter
		into	@FieldValueBefore, @FieldValueAfter
		from	myDataChanges
		where 	FieldName = 'ArchiveReason';

		update	InvoiceArchiveReason iar
		SET		iar.TotalCount = TotalCount - 1
		where 	ClientId = pClientId
				and iar.ArchiveReason = @FieldValueBefore;

		Insert into InvoiceArchiveReason(ClientId, ArchiveReason, TotalCount, LastUsed)
			values(pClientId, @FieldValueAfter, 1, date(UTC_TIMESTAMP()))
			on Duplicate key Update TotalCount = TotalCount + 1, LastUsed = date(LastUsed);

		Delete 	from UserInvoiceAssignment
				where InvoiceId = pInvoiceId;

		Delete	from UserNotification
				where LinkPage = 'Invoice' and LinkValue = pInvoiceId and ReadStatus = 0;

	end if;
	
	if exists (select 1 from myDataChanges where FieldName = 'InvoiceTotal' and FieldValueBefore <> FieldValueAfter) then 
		select 	FieldValueBefore, FieldValueAfter
		into	@FieldValueBefore, @FieldValueAfter
		from	myDataChanges
		where 	FieldName = 'InvoiceTotal';

		if @CountOfGLCoding > 1 then
			delete from PendingApprovalHistory where InvoiceId = pInvoiceId;
		elseif @CountOfGLCoding = 1 then
			update PendingApprovalHistory set AmountAppoved = @FieldValueAfter   
				where InvoiceId = pInvoiceId;
		end if;
	end if;

	call _x_InvoiceUpdateDataChanges(pInvoiceId, pClientId, pUserId, 'After');


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceUpdateDataChanges` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceUpdateDataChanges`(
-- noformat
	IN pInvoiceId	int,
	IN pClientId	int,
	in pUserId		char(36),
	in pStage		varchar(20)
)
BEGIN
	DECLARE done int DEFAULT FALSE;
	DECLARE DataField varchar(100);
	DECLARE curParms CURSOR FOR SELECT FieldName FROM myDataChanges;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

	set @FromExpsenseSMART = 0;
	if pStage = '**(ExpenseSMART)**' then 
		set pStage = 'Before';
		set @FromExpsenseSMART = 1;
	end if;



	set @isCloudxUser = null;
	SELECT	IsCloudxUser
	INTO	@isCloudxUser
	FROM	User
	WHERE	UserId = pUserId;	

	SELECT
		   CASE		WHEN ApprovalStatusId = 1 AND IsPOInvoice = 1 THEN 6 
					WHEN ApprovalStatusId = 1 AND IsPOInvoice = 0 THEN 7 
					WHEN ApprovalStatusId = 3 AND IsPOInvoice = 1 THEN 0 
					WHEN ApprovalStatusId = 3 AND IsPOInvoice = 0 THEN 1 
					WHEN ApprovalStatusId = 4 AND IsPOInvoice = 1 THEN 0 
					WHEN ApprovalStatusId = 4 AND IsPOInvoice = 0 THEN 1 
					WHEN ApprovalStatusId = 5 AND IsPOInvoice = 1 THEN 0 
					WHEN ApprovalStatusId = 5 AND IsPOInvoice = 0 THEN 1 
					WHEN ApprovalStatusId = 6 AND IsPOInvoice = 1 THEN 2 
					WHEN ApprovalStatusId = 6 AND IsPOInvoice = 0 THEN 3 
					WHEN ApprovalStatusId > 6 AND IsPOInvoice = 1 THEN 0 
					WHEN ApprovalStatusId > 6 AND IsPOInvoice = 0 THEN 1 
					ELSE 0 END 																AS Task,
			Case when ifnull(@isCloudxUser, 1) = 1 then 'QC' else 'Update' end				as Action,
			VendorId
	INTO 	@TaskId, @Action, @VendorId
	FROM	Invoice
	WHERE	InvoiceId = pInvoiceId
	LIMIT 1;


	if pStage = 'Before' or @FromExpsenseSMART = 1 then
		drop temporary table if exists myDataChanges;
		create temporary table myDataChanges (
			Action				varchar(100),
			TableName 			varchar(100),
			FieldName 			varchar(100),
			FieldLabel 			varchar(100),
			FieldValueBefore	text,
			FieldValueAfter		text
			);

		insert into myDataChanges(Action, TableName, FieldName, FieldLabel)
			select 	DISTINCT 
					@Action,
					'Invoice',
					CASE 	WHEN InvoiceAttribute.InvoiceAttributeName = 'GLCodeId' 		THEN 'InvoiceNo' 
							ELSE InvoiceAttribute.InvoiceAttributeName 						END,
					CASE	WHEN ClientInvoiceAttribute.DisplayName = '' 					THEN IF(InvoiceAttribute.DefaultDisplayName != '', InvoiceAttribute.DefaultDisplayName, InvoiceAttribute.InvoiceAttributeName) 
							ELSE COALESCE(ClientInvoiceAttribute.DisplayName, InvoiceAttribute.DefaultDisplayName, InvoiceAttribute.InvoiceAttributeName) END
					FROM 	ClientInvoiceAttribute
							INNER JOIN InvoiceAttribute				ON ClientInvoiceAttribute.InvoiceAttributeID = InvoiceAttribute.InvoiceAttributeID
					WHERE 	ClientInvoiceAttribute.ClientID = pClientId
							AND ClientInvoiceAttribute.Task = @TaskId
					ORDER BY OrderNo, DisplayName;
		
		-- Add Discount and Payment Infor to monitor Changes from Andi

		insert into myDataChanges(Action, TableName, FieldName, FieldLabel) Values (@Action,	'Invoice', 			'IsConfidential', 		'IsConfidential');
		insert into myDataChanges(Action, TableName, FieldName, FieldLabel) Values (@Action,	'Invoice', 			'ApprovalStatusId', 	'Invoice status');
		insert into myDataChanges(Action, TableName, FieldName, FieldLabel) Values (@Action,	'Invoice', 			'isPaused', 			'Paused');
		insert into myDataChanges(Action, TableName, FieldName, FieldLabel) Values (@Action,	'PausedInvoice', 	'Comment', 				'Paused comment');
		insert into myDataChanges(Action, TableName, FieldName, FieldLabel) Values (@Action,	'Invoice', 			'isDeleted', 			'Deleted');

	end if;

	set @SQL = Concat("Update 	myDataChanges as t
								inner join	Invoice as Data on Data.InvoiceId = ", pInvoiceId, "
								left join 	PausedInvoice pi 	on pi.InvoiceId  = Data.InvoiceId
						set 	t.FieldValue", pStage, " = ifnull(case ");

	OPEN curParms;
readParms:
	LOOP
		FETCH curParms INTO DataField;	
		IF done THEN
			LEAVE readParms;
		END IF;
		set @SQL = concat(@SQL, "when t.TableName = 'Invoice' and t.FieldName = '", DataField, "' then Data.", DataField, "
								");
	END LOOP;
	CLOSE curParms;
	set @SQL = concat(@SQL, "when t.TableName = 'PausedInvoice' and t.FieldName = 'Comment' then pi.Comment
							");
	set @SQL = concat(@SQL, "else null end, '')");

	prepare stmt from @Sql;
	execute stmt;
	deallocate prepare stmt;

	if pStage = 'After' or @FromExpsenseSMART = 1 then
		set @CodePosition = 2;
		Call _x_GetClientParam(pClientId, 'CodePosition', @CodePosition);

		select 	LastActionBy
		into 	@Actor
		FROM	Invoice
		where 	InvoiceId = pInvoiceId;

		select	ifnull(StateBefore.StateName, FieldValueBefore), ifnull(StateAfter.StateName, FieldValueAfter)
		into 	@OldStatus, @NewStatus
		from 	myDataChanges
				left join 	InvoiceStatus as StateBefore 	on StateBefore.StateId 	= myDataChanges.FieldValueBefore
				left join 	InvoiceStatus as StateAfter 	on StateAfter.StateId 	= myDataChanges.FieldValueAfter
		where 	FieldName = 'ApprovalStatusId';


		-- relabel data so it can appear more readable in the history
		Update	myDataChanges
				left join 	InvoiceStatus as StateBefore 	on StateBefore.StateId 	= myDataChanges.FieldValueBefore
				left join 	InvoiceStatus as StateAfter 	on StateAfter.StateId 	= myDataChanges.FieldValueAfter
		set 	FieldValueBefore 	= ifnull(StateBefore.StateName, FieldValueBefore),
				FieldValueAfter 	= ifnull(StateAfter.StateName, FieldValueAfter)
		where 	FieldName = 'ApprovalStatusId';

		Update	myDataChanges
				left join 	Vendor as StateBefore 	on StateBefore.VendorId 	= myDataChanges.FieldValueBefore	and StateBefore.ClientId = pClientId
				left join 	Vendor as StateAfter 	on StateAfter.VendorId 		= myDataChanges.FieldValueAfter		and StateAfter.ClientId = pClientId
		set 	FieldValueBefore 	= ifnull(_x_GetFormatedValue(StateBefore.VendorNo, StateBefore.VendorName, @CodePosition), FieldValueBefore),
				FieldValueAfter 	= ifnull(_x_GetFormatedValue(StateBefore.VendorNo, StateAfter.VendorName, @CodePosition), FieldValueAfter)
		where 	FieldName = 'VendorId';

		Update	myDataChanges
				left join 	OrgData as StateBefore 	on StateBefore.Id 	= myDataChanges.FieldValueBefore	and StateBefore.ClientId = pClientId
				left join 	OrgData as StateAfter 	on StateAfter.Id 	= myDataChanges.FieldValueAfter		and StateAfter.ClientId = pClientId
		set 	FieldValueBefore 	= ifnull(_x_GetFormatedValue(StateBefore.OrgId, StateBefore.OrgName, @CodePosition), FieldValueBefore),
				FieldValueAfter 	= ifnull(_x_GetFormatedValue(StateAfter.OrgId, 	StateAfter.OrgName, @CodePosition), FieldValueAfter)
		where 	FieldName = 'OrgId';

		-- Birhanu HERE
		UPDATE	myDataChanges
				LEFT JOIN 	ClientLocation AS StateBefore 	ON StateBefore.ClientLocationId = myDataChanges.FieldValueBefore	AND StateBefore.ClientId = pClientId
				LEFT JOIN 	ClientLocation AS StateAfter 	ON StateAfter.ClientLocationId 	= myDataChanges.FieldValueAfter		AND StateAfter.ClientId = pClientId
		SET 	FieldValueBefore 	= IFNULL(StateBefore.ContactName, FieldValueBefore),
				FieldValueAfter 	= IFNULL(StateAfter.ContactName, FieldValueAfter)
		WHERE 	FieldName = 'ShipToId';
		
		UPDATE	myDataChanges
				LEFT JOIN 	Tax AS StateBefore 	ON StateBefore.Id 	= myDataChanges.FieldValueBefore	AND StateBefore.ClientId = pClientId
				LEFT JOIN 	Tax AS StateAfter 	ON StateAfter.Id 	= myDataChanges.FieldValueAfter		AND StateAfter.ClientId = pClientId
		SET 	FieldValueBefore 	= IFNULL(StateBefore.TaxCode, FieldValueBefore),
				FieldValueAfter 	= IFNULL(StateAfter.TaxCode, FieldValueAfter)
		WHERE 	FieldName = 'TaxCodeId';
		
		UPDATE	myDataChanges
				LEFT JOIN 	SubProjectType AS StateBefore 	ON StateBefore.Id 	= myDataChanges.FieldValueBefore	AND StateBefore.ClientId = pClientId
				LEFT JOIN 	SubProjectType AS StateAfter 	ON StateAfter.Id 	= myDataChanges.FieldValueAfter		AND StateAfter.ClientId = pClientId
		SET 	FieldValueBefore 	= IFNULL(StateBefore.SubProjectName, FieldValueBefore),
				FieldValueAfter 	= IFNULL(StateAfter.SubProjectName, FieldValueAfter)
		WHERE 	FieldName = 'SubProjectTypeId';

		UPDATE	myDataChanges
				LEFT JOIN 	Location AS StateBefore 	ON StateBefore.Id 	= myDataChanges.FieldValueBefore
				LEFT JOIN 	Location AS StateAfter 		ON StateAfter.Id 	= myDataChanges.FieldValueAfter
		SET 	FieldValueBefore 	= IFNULL(StateBefore.LocationCode, FieldValueBefore),
				FieldValueAfter 	= IFNULL(StateAfter.LocationCode, FieldValueAfter)
		WHERE 	FieldName = 'LocationId';
		
		UPDATE	myDataChanges
				LEFT JOIN 	NSClass AS StateBefore 	ON StateBefore.Id 	= myDataChanges.FieldValueBefore	
				LEFT JOIN 	NSClass AS StateAfter 	ON StateAfter.Id 	= myDataChanges.FieldValueAfter	
		SET 	FieldValueBefore 	= IFNULL(StateBefore.NSClass, FieldValueBefore),
				FieldValueAfter 	= IFNULL(StateAfter.NSClass, FieldValueAfter)
		WHERE 	FieldName = 'ClassId';
		
		UPDATE	myDataChanges
				LEFT JOIN 	NSDepartment AS StateBefore 	ON StateBefore.Id 	= myDataChanges.FieldValueBefore	
				LEFT JOIN 	NSDepartment AS StateAfter 	ON StateAfter.Id 	= myDataChanges.FieldValueAfter	
		SET 	FieldValueBefore 	= IFNULL(_x_GetFormatedValue(StateBefore.Description, 	StateBefore.NSDepartmentName, @CodePosition), FieldValueBefore),
				FieldValueAfter 	= IFNULL(_x_GetFormatedValue(StateAfter.Description, 	StateAfter.NSDepartmentName, @CodePosition), FieldValueAfter)
		WHERE 	FieldName = 'NSDepartmentId';
		
		UPDATE	myDataChanges
				LEFT JOIN 	VendorLocation AS StateBefore 	ON StateBefore.VendorLocationId 	= myDataChanges.FieldValueBefore
				LEFT JOIN 	VendorLocation AS StateAfter 	ON StateAfter.VendorLocationId 		= myDataChanges.FieldValueAfter
		SET 	FieldValueBefore 	= IFNULL(_x_GetFormatedValue(StateBefore.LocationNumber, 	StateBefore.LocationName, @CodePosition), FieldValueBefore),
				FieldValueAfter 	= IFNULL(_x_GetFormatedValue(StateAfter.LocationNumber, 	StateAfter.LocationName, @CodePosition), FieldValueAfter)
		WHERE 	FieldName = 'VendorLocationId';
		
		UPDATE	myDataChanges
				LEFT JOIN 	Lookup AS StateBefore 	ON StateBefore.LookupId 	= myDataChanges.FieldValueBefore	
				LEFT JOIN 	Lookup AS StateAfter 	ON StateAfter.LookupId 	= myDataChanges.FieldValueAfter	
		SET 	FieldValueBefore 	= IFNULL(_x_GetFormatedValue(StateBefore.Code,	StateBefore.Description, @CodePosition), FieldValueBefore),
				FieldValueAfter 	= IFNULL(_x_GetFormatedValue(StateAfter.Code,	StateAfter.Description, @CodePosition), FieldValueAfter)
		WHERE 	FieldName = 'PrepaymentNoteId';
				
		UPDATE	myDataChanges
				LEFT JOIN 	CustomerLocation AS StateBefore 	ON StateBefore.CustomerLocationId 	= myDataChanges.FieldValueBefore	
				LEFT JOIN 	CustomerLocation AS StateAfter 	ON StateAfter.CustomerLocationId 	= myDataChanges.FieldValueAfter	
		SET 	FieldValueBefore 	= IFNULL(_x_GetFormatedValue(StateBefore.LocationNumber,	StateBefore.LocationName, @CodePosition), FieldValueBefore),
				FieldValueAfter 	= IFNULL(_x_GetFormatedValue(StateAfter.LocationNumber,		StateAfter.LocationName, @CodePosition), FieldValueAfter)
		WHERE 	FieldName = 'CustomerLocationId';
		
		UPDATE	myDataChanges
				LEFT JOIN 	Department AS StateBefore 	ON StateBefore.Id 	= myDataChanges.FieldValueBefore 
				LEFT JOIN 	Department AS StateAfter 	ON StateAfter.Id 	= myDataChanges.FieldValueAfter		
		SET 	FieldValueBefore 	= IFNULL(_x_GetFormatedValue(StateBefore.DepartmentName,	StateBefore.Description, @CodePosition), FieldValueBefore),
				FieldValueAfter 	= IFNULL(_x_GetFormatedValue(StateAfter.DepartmentName,		StateAfter.Description, @CodePosition), FieldValueAfter)
		WHERE 	FieldName = 'VendorSiteId';
		
		UPDATE	myDataChanges
				LEFT JOIN 	ProjectType AS StateBefore 	ON StateBefore.Id 	= myDataChanges.FieldValueBefore	
				LEFT JOIN 	ProjectType AS StateAfter 	ON StateAfter.Id 	= myDataChanges.FieldValueAfter	
		SET 	FieldValueBefore 	= IFNULL(StateBefore.ProjectName, FieldValueBefore),
				FieldValueAfter 	= IFNULL(StateAfter.ProjectName, FieldValueAfter)
		WHERE 	FieldName = 'ProjectTypeId';

		Update	myDataChanges
		set 	FieldValueBefore 	= case when ifnull(nullif(FieldValueBefore, ''), '0') = '0'	then 'No' else 'Yes' end,
				FieldValueAfter 	= case when ifnull(nullif(FieldValueAfter, ''), '0') = '0'	then 'No' else 'Yes' end
		where 	FieldName in ('isPaused', 'isDeleted', 'IsPOInvoice', 'IsConfidential');
	end if;


	if pStage = 'After' then
		INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId, OldID)
			select	pInvoiceId, @Actor, @Action, UTC_TIMESTAMP(), FieldValueBefore, FieldValueAfter, FieldLabel, @OldStatus, @NewStatus, pUserId, null
			from	myDataChanges
			where 	FieldValueBefore <> FieldValueAfter;
	end if;

/*
start transaction;
call _x_InvoiceUpdateDataChanges(663281406, 88, 'asd', 'Before');
call _x_InvoiceUpdateDataChanges(663281406, 88, 'asd', 'After');
select * from myDataChanges;
rollback;
*/

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceUpdateHistory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceUpdateHistory`(
IN `pInvoiceId` int,
IN `pActor` varchar(250),
IN `pAction` varchar(250),
IN `pActionDate` datetime,
IN `pPreviousData` longtext,
IN `pNewData` longtext,
IN `pField` varchar(250),
IN `pInitialStatus` varchar(50),
IN `pCurrentStatus` varchar(50),
IN `pActorId` char(36),
IN `pOldID` int)
BEGIN

  INSERT INTO InvoiceHistory (InvoiceId, Actor, ACTION, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId, OldID)
    VALUES (pInvoiceId, pActor, pAction, UTC_TIMESTAMP(), pPreviousData, pNewData, pField, pInitialStatus, pCurrentStatus, pActorId, pOldID);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceUserAssignedAdd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceUserAssignedAdd`(
-- noformat
	IN pClientId		int,	
	IN pInvoiceId 		int,
	IN pApproverId 		char(36),			-- Assigned to
	in pComments		varchar(250),
	IN pUserId 			char(36)			-- The person doing the assigning
)
ThisProc:BEGIN


	SELECT	CONCAT(u.LastName, ', ', u.FirstName) INTO @ApproverName
	FROM	User u
	WHERE	u.UserId = pApproverId
			and u.ClientId = pClientId;



	-- Get security
	SELECT	max(cr.isAdmin), ifnull(Max(case WHEN crf.FunctionKey = 'InvoiceAssignUser' THEN crf.access ELSE 0 end), 0)
	INTO 	@isAdmin, @isAllowed
	FROM	ClientUserRoles cur
	 		INNER JOIN	ClientRoles cr				ON cr.RoleId = cur.RoleId
			left JOIN 	ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
	WHERE	cur.UserId = pUserId;
	SET @isAllowed = IF(@isAdmin = 1, 1, @isAllowed); 



	-- Get Invoice Info
	SELECT	i.InvoiceType, i.IsPaused, i.isDeleted, i.ApprovalStatusId, ifnull(	(SELECT 	true
																					FROM 	UserInvoiceAssignment
																					WHERE 	InvoiceId = pInvoiceId
																							AND UserId = pApproverId
																					LIMIT 	1), false)
	INTO	@InvoiceType, @IsPaused, @isDeleted, @ApprovalStatusId, @isAssignedAlready
	FROM 	Invoice i
	WHERE 	i.ClientId = pClientId
			AND i.InvoiceId = pInvoiceId;

	-- Check if the invoice is in the right state to do this action
	IF @IsDeleted = 1 THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This invoice is already deleted.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	elseIF @InvoiceType = 'Archive' THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This invoice has already been archived.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	ElseIF @IsPaused = true THEN	
		SET @Msg = concat('This invoice is already paused.');
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @Msg, MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	ElseIF @isAssignedAlready = true THEN	
		SET @Msg = concat('This invoice is already assigned to ', @ApproverName, '.');
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @Msg, MYSQL_ERRNO = 1;
		LEAVE ThisProc;	
	ElseIF NOT @ApprovalStatusId IN (3) THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This invoice is not in an actionable status.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;


	-- if not an admin, check if this is in their queue
	IF @isAdmin = 0 then
		set @Position	= NULL;
		set @Total 		= null;
		call _x_InvoiceMyQueue(pApproverId, pInvoiceId, 1, 0, 0, null, @Position, @Total);
	
		if @Position is null then 
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The invoice is no longer in your queue.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		end if;
	END if;



	--
	-- Do the action, all business logic passed
	--

	-- Check if bad data, if so ignore
	if not exists (
					select	1
					from	User
					where 	UserId = pApproverId
							and ClientId = pClientId
							and IsActive = 1
					) then
		leave ThisProc;
	end if;


	SELECT	CONCAT(u.LastName, ', ', u.FirstName) INTO @ActorName
	FROM	User u
	WHERE	u.UserId = pUserId
			and u.ClientId = pClientId;

	select 	CONCAT('Invoice for ', format(InvoiceTotal, 2), ' delegated')
	into 	@NotificationMessage
	from 	Invoice
	where 	InvoiceId = pInvoiceId
			and ClientId = pClientId;

	select	ApprovalSubStepId
	into	@SubStepId
	FROM	UserInvoiceAssignment
	where	InvoiceId = pInvoiceId
	limit 	1;

	INSERT INTO UserInvoiceAssignment (InvoiceId, UserId, Type, State, DateCreated, ApprovalSubStepId, Comments)
		VALUES (pInvoiceId, pApproverId, 0, 1, UTC_TIMESTAMP(), @SubStepId, pComments);
		
	CALL _x_Notify(pUserId, 'Invoice Assignment', CONCAT(@NotificationMessage, IFNULL(concat('\n', '"', nullif(pComments, ''), '"'), '')), 'Assignment', 'Invoice', pInvoiceId, NULL);

	-- Insert into history
	INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId)
		SELECT	InvoiceId,
				@ActorName 					AS Actor,
				'Delegate' 					AS Action,
				UTC_TIMESTAMP()				AS ActionDate,
				''			 				AS PreviousData,
				@ApproverName				AS NewData,
				'' 							AS Field,
				InvoiceStatus.StateName		AS InitialStatus,
				InvoiceStatus.StateName		AS CurentStatus,
				pUserId						AS ActorId
		from 	Invoice
				inner join 	InvoiceStatus on InvoiceStatus.StateId = Invoice.ApprovalStatusId
		Where 	InvoiceId = pInvoiceId;

-- CALL _x_InvoiceUserAssignedAdd(1, 663245957, 'dfb816df-f6f5-41c0-9d43-8fbe626fed09', 'This is a comment', '2c92b404-048c-11ee-8962-02c102131f31');

	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceUserAssignedDelete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceUserAssignedDelete`(
-- noformat
	IN pClientId		int,	
	IN pInvoiceId 		int,
	IN pApproverId 		char(36),
	IN pUserId 			char(36)
)
ThisProc:BEGIN

		SELECT	CONCAT(u.LastName, ', ', u.FirstName) INTO @ApproverName
		FROM	User u
		WHERE	u.UserId = pApproverId
				and u.ClientId = pClientId;

		SELECT	CONCAT(u.LastName, ', ', u.FirstName) INTO @ActorName
		FROM	User u
		WHERE	u.UserId = pUserId
				and u.ClientId = pClientId;

		-- Delete the notification if still unread
		delete	Data
		from	UserNotification Data
		where 	Data.UserId = pApproverId
				and Data.Source = 'Approval' 
				and Data.LinkPage = 'Invoice' 
				and Data.LinkValue = pInvoiceId 
				and Data.ReadDate is null;

		-- remove the user from the Assignement
		DELETE	uia 
		FROM	UserInvoiceAssignment uia
		WHERE	InvoiceId = pInvoiceId
				and UserId = pApproverId;

		-- Insert into history
		INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId)
			SELECT	InvoiceId,
					@ActorName 					AS Actor,
					'Delegate' 					AS Action,
					UTC_TIMESTAMP()				AS ActionDate,
					@ApproverName 				AS PreviousData,
					'' 							AS NewData,
					'' 							AS Field,
					InvoiceStatus.StateName		AS InitialStatus,
					InvoiceStatus.StateName		AS CurentStatus,
					pUserId						AS ActorId
			from 	Invoice
					inner join 	InvoiceStatus on InvoiceStatus.StateId = Invoice.ApprovalStatusId
			Where 	InvoiceId = pInvoiceId;
	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceUserAssignedList` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceUserAssignedList`(
-- noformat
	IN pClientId 	int,
	IN pInvoiceId	int
)
ThisProc:BEGIN

	SELECT	uia.Id,
			uia.InvoiceId,
			usr.UserName,
			CONCAT(usr.LastName, ', ', usr.FirstName) 	AS FullName,
			uia.DateCreated,
			CAST(usr.UserId AS char(36)) 				AS UserId
	FROM	UserInvoiceAssignment uia
			inner JOIN	User usr ON uia.UserId = usr.UserId
	WHERE	usr.ClientId = pClientId 
			AND uia.InvoiceId = pInvoiceId
	order	by  4;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceUserRejectToList` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceUserRejectToList`(
-- noformat
	IN pClientId 		int,
	IN pInvoiceId		int,
	IN pUserId 			char(36),
	IN pIncludeUserId 	bit
)
ThisProc:BEGIN

	CALL _x_SetClientTimeZone(pClientId);

	drop TEMPORARY TABLE IF EXISTS myRejectToApproverList;
	CREATE TEMPORARY TABLE IF NOT EXISTS myRejectToApproverList AS (
		SELECT	
				CONCAT(User.LastName, ', ', User.FirstName) 					AS FullName,
				min(convert_tz(uiah.ApprovedOn, 'GMT', @@session.time_zone))	AS ApprovedOn,
				min(CAST(User.UserId AS char(36)))								AS UserId,
				min(uiah.UserInvoiceAssignmentHistoryId)						AS UserInvoiceAssignmentHistoryId
		FROM	UserInvoiceAssignmentHistory uiah
				inner JOIN User  	ON	User.UserId = uiah.FromApprovalSubStepUserId
										AND User.ClientId = pClientId
										AND User.IsActive = 1
		WHERE	User.ClientId = pClientId 
				AND uiah.InvoiceId = pInvoiceId
				AND uiah.FromApprovalSubStepUserId <> if(pIncludeUserId = 1, 'dummy', pUserId)
		GROUP	BY FullName, FromApprovalSubStepId
		);


	if EXISTS (SELECT 	1 
				FROM	UserInvoiceAssignmentHistory uiah
						inner JOIN User  	ON	User.UserId = uiah.FromApprovalSubStepUserId
												AND User.ClientId = pClientId
												AND User.IsActive = 0)  THEN
		drop TEMPORARY TABLE IF EXISTS myAdmins;
		CREATE TEMPORARY TABLE IF NOT EXISTS myAdmins AS (
			SELECT 	UserId 													AS AdminId,
					CONCAT(LastName, ', ', FirstName) 						AS AdminName
			FROM	User
			WHERE	ClientId = pClientId
					and IsActive = 1
					and IsCloudxUser = 0
					and exists (
									SELECT	1
							        FROM	ClientUserRoles cur
							          		INNER JOIN ClientRoles cr		ON	cr.RoleId = cur.RoleId
							            										AND cr.isAdmin = 1
									WHERE	cur.UserId = User.UserId
								)
			);


		INSERT INTO myRejectToApproverList
			SELECT	CONCAT(AdminName, '(re:', User.LastName, ')')				AS FullName,
					convert_tz(uiah.ApprovedOn, 'GMT', @@session.time_zone)		AS ApprovedOn,
					min(CAST(AdminId AS char(36)))								AS UserId,
					min(uiah.UserInvoiceAssignmentHistoryId)					AS UserInvoiceAssignmentHistoryId
			FROM	UserInvoiceAssignmentHistory uiah
					CROSS JOIN myAdmins
					inner JOIN User  	ON	User.UserId = uiah.FromApprovalSubStepUserId
											AND User.ClientId = pClientId
											AND User.IsActive = 0
					
			WHERE	User.ClientId = pClientId 
					AND uiah.InvoiceId = pInvoiceId
					AND uiah.FromApprovalSubStepUserId <> pUserId
			GROUP	BY FullName, ApprovedOn;
			
				
		SELECT 	*
		FROM 	myRejectToApproverList
		ORDER	BY 	ApprovedOn desc, FullName;

-- CALL _x_InvoiceUserRejectToList(88, 663053283, '18b61a24-d0a4-11e9-b055-22000a1f9f3d');
-- CALL _x_InvoiceUserRejectToList(88, 663271351, '18b61a24-d0a4-11e9-b055-22000a1f9f3d');

end if;

	


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_LineItemById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_LineItemById`(
-- noformat
	IN `pType` tinyint,
	IN `pInvoiceId` int,
	IN `pVendorId` int,
	IN `pPONumber` varchar(250),
	IN `pAttrNames` varchar(2000)
	)
BEGIN

	IF (pType = 0) THEN
		
		SET @Expression = CONCAT('
		SELECT 
				LineItemDetail.LineItemDetailId AS Id,
				', pAttrNames, ',
				COALESCE(CONCAT(Vendor.VendorNo, ", ", Vendor.VendorName), Vendor.VendorNo) AS VendorName,
				COALESCE(CONCAT(Department.DepartmentName, ", ", Department.`Description`), Department.DepartmentName) AS DepartmentName,
				COALESCE(CONCAT(ProjectType.ProjectName, ", ", ProjectType.`Description`), ProjectType.ProjectName) AS ProjectName
		FROM	LineItemDetail 
				LEFT JOIN Vendor ON LineItemDetail.VendorId = Vendor.VendorId
				LEFT JOIN Department ON LineItemDetail.DepartmentId = Department.Id
				LEFT JOIN ProjectType ON LineItemDetail.ProjectTypeId = ProjectType.Id
		WHERE	LineItemDetail.InvoiceId = ', pInvoiceId);
		
		PREPARE myquery FROM @Expression;
		EXECUTE myquery;
		deallocate PREPARE myquery;
	
	ELSE
		set @ClientId = -1;
		select ClientId 			into @ClientId 		from Invoice 					where InvoiceId = pInvoiceId;
		select SplitterCharacter 	into @SplitChar 	from ClientPONumberSplitter 	where ClientId = @ClientId;
		set @SplitChar 	= ifnull(@SplitChar, '|');
		call _x_StringToRows(pPONumber, @SplitChar);
		

		SET @Expression = CONCAT('
			SELECT 
					', pAttrNames, ',
					Id
					FROM  PO 
			WHERE	VendorId = ', pVendorId, ' 
					AND ClientId = ', @ClientId, '
					and PONumber in (select SearchValue from tSearchList) 
					and not exists 	(select 1 from LineItemDetail lid where lid.InvoiceId = ', pInvoiceId,' and lid.POId = PO.Id)
			ORDER	BY PONumber ASC;');
		
		PREPARE myquery FROM @Expression;
		EXECUTE myquery;
		deallocate PREPARE myquery;

-- call _x_LineItemById(1, 663217291, 1555558118, '230762', 'PO.PONumber, PO.ItemNumber, PO.UnitOfPurchase, PO.RcvdQty, PO.UnitCost, PO.Amount, PO.VendorCatNumber, PO.RecievedTransactionId, PO.Description');

	
 	END IF;



END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_LineItemDataChanges` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_LineItemDataChanges`(
	IN pClientId 	int,
	IN pInvoiceId 	int,
	IN pLineId 		int,
	in pUserId 		char(36),
	in pStage 		varchar(10)
)
ThisProc:BEGIN
	DECLARE done int DEFAULT FALSE;
	DECLARE DataField varchar(100);
	DECLARE curParms CURSOR FOR SELECT FieldName FROM myDataChanges;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;


	set @isCloudxUser = null;
	SELECT	IsCloudxUser, CONCAT(LastName, ', ', FirstName) 
	INTO	@isCloudxUser, @Actor
	FROM	User
	WHERE	UserId = pUserId;	

	if pStage = 'Before' then
		set @TaskId = 8;
		
		drop temporary table if exists myDataChanges;
		create temporary table myDataChanges (
			Action				varchar(100),
			TableName 			varchar(100),
			FieldName 			varchar(100),
			FieldLabel 			varchar(100),
			FieldValueBefore	text,
			FieldValueAfter		text,
			DisplayOrder		int
			);

		insert into myDataChanges(Action, TableName, FieldName, FieldLabel, DisplayOrder)
			select 	'Line:New',
					'LineItemDetail',
					CASE 	WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'Department%' THEN 'DepartmentId' 
							ELSE InvoiceAttribute.InvoiceAttributeName END,
					COALESCE(ClientInvoiceAttribute.DisplayName, InvoiceAttribute.DefaultDisplayName, InvoiceAttribute.InvoiceAttributeName),
					OrderNo
			FROM 	ClientInvoiceAttribute
					INNER JOIN InvoiceAttribute				ON ClientInvoiceAttribute.InvoiceAttributeID = InvoiceAttribute.InvoiceAttributeID
			WHERE 	ClientInvoiceAttribute.ClientID = pClientId
					AND ClientInvoiceAttribute.Task = @TaskId
			ORDER BY OrderNo, DisplayName;

-- 		insert into myDataChanges(Action, TableName, FieldName, FieldLabel) Values (@Action,	'Invoice', 			'IsConfidential', 		'IsConfidential');
-- 		insert into myDataChanges(Action, TableName, FieldName, FieldLabel) Values (@Action,	'Invoice', 			'ApprovalStatusId', 	'Invoice status');
-- 		insert into myDataChanges(Action, TableName, FieldName, FieldLabel) Values (@Action,	'Invoice', 			'isPaused', 			'Paused');
-- 		insert into myDataChanges(Action, TableName, FieldName, FieldLabel) Values (@Action,	'PausedInvoice', 	'Comment', 				'Paused comment');
-- 		insert into myDataChanges(Action, TableName, FieldName, FieldLabel) Values (@Action,	'Invoice', 			'isDeleted', 			'Deleted');

	end if;


	set @SQL = Concat("Update 	myDataChanges as t
								left join	LineItemDetail Data on Data.InvoiceId = ", pInvoiceId, " and Data.LineItemDetailId = ", ifnull(pLineId, -1) , "
						set 	t.Action = 'Line:Upd',
								t.FieldValue", pStage, " = ifnull(case ");

	OPEN curParms;
readParms:
	LOOP
		FETCH curParms INTO DataField;	
		IF done THEN
			LEAVE readParms;
		END IF;
		set @SQL = concat(@SQL, "when t.TableName = 'LineItemDetail' 	and t.FieldName = '", DataField, "' then Data.", DataField, "
								");
	END LOOP;
	CLOSE curParms;
	set @SQL = concat(@SQL, "else null end, '')");

	prepare stmt from @Sql;
	execute stmt;
	deallocate prepare stmt;

	if pStage = 'After' then
		if (select count(*) from myDataChanges where FieldValueBefore <> '') = 0 THEN
			Update  myDataChanges set Action = 'Li:New';
		elseif (select count(*) from myDataChanges where FieldValueAfter <> '') = 0 then
			Update  myDataChanges set Action = 'Li:Del';
		end if;

		if @isCloudxUser = 1 then
			Update  myDataChanges set Action = Concat('QC:', Action);
		end if;

		Select 	ifnull(nullif(FieldValueBefore, ''), FieldValueAfter) 
		into 	@LinePOKey
		from	myDataChanges dc 
		where 	DisplayOrder = 1;

		Select 	ifnull(nullif(FieldValueBefore, ''), FieldValueAfter) 
		into 	@LineItemKey
		from	myDataChanges dc 
		where 	DisplayOrder = 2;

		set @LinePOItemKey = Concat(ifnull(nullif(@LinePOKey, ''), '..'), '/', ifnull(nullif(@LineItemKey, ''), '..'));
		Update  myDataChanges set Action = Concat(Action, ':', @LinePOItemKey);

		select	InvoiceStatus.StateName, InvoiceStatus.StateName
		into 	@OldStatus, @NewStatus
		from 	Invoice
				inner join 	InvoiceStatus 					on InvoiceStatus.StateId 	= Invoice.ApprovalStatusId
		where 	InvoiceId = pInvoiceId;

		INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId, OldID)
			select	pInvoiceId, @Actor, Action, UTC_TIMESTAMP(), FieldValueBefore, FieldValueAfter, FieldLabel, @OldStatus, @NewStatus, pUserId, null
			from	myDataChanges
			where 	FieldValueBefore <> FieldValueAfter;

	end if;

/*
start transaction;
call _x_LineItemDataChanges(1, 663227581, 27389337, 'e06cb453-7dfb-4b61-9e98-cb3d4d4c603c', 'Before');
call _x_LineItemDataChanges(1, 663227581, 27389337, 'e06cb453-7dfb-4b61-9e98-cb3d4d4c603c', 'After');
select * from myDataChanges;
rollback;
*/

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_LineItemUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_LineItemUpdate`(
-- noformat
	IN pType 			tinyint, 
	IN pClientId 		int, 
	IN pInvoiceId 		int,
	IN pPOId 			int, 
	IN pUserId 			char(36), 
	IN pData 			text,
	IN pLineId 			int
)
BEGIN
	DECLARE done int DEFAULT FALSE;
	DECLARE DataField varchar(100);
	DECLARE curPOLines CURSOR FOR SELECT Id FROM myNewLines;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

	SET @InvoiceId = pInvoiceId;
	SET @LineId = pLineId;

	SET FOREIGN_KEY_CHECKS = 0;
	
	IF (pType = 0) THEN -- INSERT
		Call _x_LineItemDataChanges(pClientId, pInvoiceId, -1, pUserId, 'Before');
        SET @Expression = CONCAT('INSERT INTO LineItemDetail ', pData); -- (col1,col2) VALUES ('val1','val2')
        PREPARE myquery FROM @Expression;
        EXECUTE myquery;
        DEALLOCATE PREPARE myquery;
		set pLineId = LAST_INSERT_ID();
		Call _x_LineItemDataChanges(pClientId, pInvoiceId, pLineId, pUserId, 'After');
                		
	ELSEIF (pType = 1) THEN -- UPDATE            
		Call _x_LineItemDataChanges(pClientId, pInvoiceId, pLineId, pUserId, 'Before');
        SET @Expression = CONCAT('UPDATE LineItemDetail SET ', pData, ' WHERE LineItemDetailId = ? AND InvoiceId = ?');        
        PREPARE myquery FROM @Expression;        
        EXECUTE myquery USING @LineId, @InvoiceId;        
        DEALLOCATE PREPARE myquery;
		Call _x_LineItemDataChanges(pClientId, pInvoiceId, pLineId, pUserId, 'After');
        
    ELSEIF (pType = 2) THEN -- DELETE
		Call _x_LineItemDataChanges(pClientId, pInvoiceId, pLineId, pUserId, 'Before');
        DELETE FROM LineItemDetail WHERE LineItemDetailId = pLineId AND InvoiceId = pInvoiceId;
		Call _x_LineItemDataChanges(pClientId, pInvoiceId, -1, pUserId, 'After');
		
	ELSEIF (pType = 3) THEN -- Insert from PO
		Call _x_LineItemDataChanges(pClientId, pInvoiceId, -1, pUserId, 'Before');
		set @SplitChar = null;
		INSERT INTO LineItemDetail (InvoiceId, ActualQty, Quantity, ProductId, ProductDescription, `Description`, UnitPrice, TotalAmount, ItemNo, UnitOfPurchase,
					LineNo, POHeaderId, POLineId, POLineLocationId, RecievedTransactionId, PONumber, `GLCode`, IsExpense, OrderQuantity, ClientCompanyId, DeliveryDate, Container,
					UserField1, UserField2, UserField3, UserField4, UserField5, UserField6, UserField7, UserField8, UserField9, UserField10,
					POType, POId, DepartmentId, Currency, CustomerId, ProjectTypeId, SubProjectTypeId, Title, SupplierType, PRUseDescription,
					IsRepairOrder, HaveParts, IsReturnToStock, IsCapitalProject, CapitalProjectNo, BudgetAvailableAfterPR, CheckPerson, DirectStockOrder, `VendorTerm`,
					PRNumber, GRNUse, HTSCode, SEApprovalNo, TaxCode, TaxCodeId, VendorId, AssetProjectId, ItemId)
		SELECT	pInvoiceId, RcvdQty, RcvdQty, VendorCatNumber, `Description`, `Description`, UnitCost, ExtCost, ItemNumber, UnitOfPurchase, 
				LineNo, POHeaderId, POLineId, POLineLocationId, RecievedTransactionId, PONumber, `GLCode`, IsExpense, OrderQty, ClientCompanyId, DeliveryDate, Container,
				UserField1, UserField2, UserField3, UserField4, UserField5, UserField6, UserField7, UserField8, UserField9, UserField10,
				POType, Id, DepartmentId, Currency, CustomerId, ProjectTypeId, SubProjectTypeId, Title, SupplierType, PRUseDescription,
				IsRepairOrder, HaveParts, IsReturnToStock, IsCapitalProject, CapitalProjectNo, BudgetAvailableAfterPR, CheckPerson, DirectStockOrder, `VendorTerm`,
				PRNumber, GRNUse, HTSCode, SEApprovalNo, TaxCode, TaxCodeId, VendorId, AssetProjectId, ItemId
		FROM	PO
		WHERE	Id = pPOId;
		set pLineId = LAST_INSERT_ID();
		Call _x_LineItemDataChanges(pClientId, pInvoiceId, pLineId, pUserId, 'After');

	ELSEIF (pType = 4) THEN -- Invoice Update, Check for PO Change
		set @PONum = null;
		select PONumber into @PONum from Invoice where InvoiceId = pInvoiceId;

		select SplitterCharacter 	into @SplitChar 	from ClientPONumberSplitter 	where ClientId = pClientId;
		set @SplitChar 	= ifnull(@SplitChar, '|');
		call _x_StringToRows(@PONum, @SplitChar);

		SET @VendorID = 0;
		
		SELECT	VendorId 
		INTO	@VendorID
		FROM	PO
		WHERE	ClientId = pClientId
				AND PONumber in (select SearchValue from tSearchList)
		LIMIT 1;

		IF (@VendorID > 0) THEN
			UPDATE 	Invoice	SET VendorId = @VendorID		WHERE ClientId = pClientId AND InvoiceId = pInvoiceId;

			drop temporary table if exists myNewLines;
			create temporary table myNewLines (
				Id		int
				);			
			
			insert into myNewLines (Id)
				SELECT	Id
				FROM 	PO
				WHERE	ClientId = pClientId
						AND	PONumber in (select SearchValue from tSearchList)
						and VendorId = @VendorId
						and not exists (select 1 from LineItemDetail lid where lid.InvoiceId = pInvoiceId and lid.POId = PO.Id);

			OPEN curPOLines;
		readPOLines:
			LOOP
				FETCH curPOLines INTO DataField;	
				IF done THEN
					LEAVE readPOLines;
				END IF;
				Call _x_LineItemDataChanges(pClientId, pInvoiceId, -1, pUserId, 'Before');
				INSERT INTO LineItemDetail (InvoiceId, ActualQty, Quantity, ProductId, ProductDescription, `Description`, UnitPrice, TotalAmount, ItemNo, UnitOfPurchase,
											LineNo, POHeaderId, POLineId, POLineLocationId, RecievedTransactionId, PONumber, `GLCode`, IsExpense, OrderQuantity, ClientCompanyId, DeliveryDate, Container,
											UserField1, UserField2, UserField3, UserField4, UserField5, UserField6, UserField7, UserField8, UserField9, UserField10,
											POType, POId, DepartmentId, Currency, CustomerId, ProjectTypeId, SubProjectTypeId, Title, SupplierType, PRUseDescription,
											IsRepairOrder, HaveParts, IsReturnToStock, IsCapitalProject, CapitalProjectNo, BudgetAvailableAfterPR, CheckPerson, DirectStockOrder, `VendorTerm`,
											PRNumber, GRNUse, HTSCode, SEApprovalNo, TaxCode, TaxCodeId, VendorId, AssetProjectId, ItemId)
					SELECT	pInvoiceId, RcvdQty, RcvdQty, VendorCatNumber, `Description`, `Description`, UnitCost, ExtCost, ItemNumber, UnitOfPurchase, LineNo, POHeaderId, 
							POLineId, POLineLocationId, RecievedTransactionId, PONumber, `GLCode`, IsExpense, OrderQty,ClientCompanyId, DeliveryDate, Container,
							UserField1, UserField2, UserField3, UserField4, UserField5, UserField6, UserField7, UserField8, UserField9, UserField10, 
							POType, Id, DepartmentId, Currency, CustomerId,  ProjectTypeId, SubProjectTypeId, Title, SupplierType, PRUseDescription,
							IsRepairOrder, HaveParts, IsReturnToStock, IsCapitalProject, CapitalProjectNo, BudgetAvailableAfterPR, CheckPerson, DirectStockOrder, `VendorTerm`,
							PRNumber, GRNUse, HTSCode, SEApprovalNo, TaxCode, TaxCodeId, VendorId, AssetProjectId, ItemId
					FROM 	PO
					WHERE	ClientId = pClientId
							AND	Id = DataField;
				set pLineId = LAST_INSERT_ID();
				Call _x_LineItemDataChanges(pClientId, pInvoiceId, pLineId, pUserId, 'After');
			END LOOP;
			CLOSE curPOLines;			

-- 			INSERT INTO LineItemDetail (InvoiceId, ActualQty, Quantity, ProductId, ProductDescription, `Description`, UnitPrice, TotalAmount, ItemNo, UnitOfPurchase,
-- 										LineNo, POHeaderId, POLineId, POLineLocationId, RecievedTransactionId, PONumber, `GLCode`, IsExpense, OrderQuantity, ClientCompanyId, DeliveryDate, Container,
-- 										UserField1, UserField2, UserField3, UserField4, UserField5, UserField6, UserField7, UserField8, UserField9, UserField10,
-- 										POType, POId, DepartmentId, Currency, CustomerId, ProjectTypeId, SubProjectTypeId, Title, SupplierType, PRUseDescription,
-- 										IsRepairOrder, HaveParts, IsReturnToStock, IsCapitalProject, CapitalProjectNo, BudgetAvailableAfterPR, CheckPerson, DirectStockOrder, `VendorTerm`,
-- 										PRNumber, GRNUse, HTSCode, SEApprovalNo, TaxCode, TaxCodeId, VendorId, AssetProjectId, ItemId)
-- 			SELECT	pInvoiceId, RcvdQty, RcvdQty, VendorCatNumber, `Description`, `Description`, UnitCost, ExtCost, ItemNumber, UnitOfPurchase, LineNo, POHeaderId, 
-- 					POLineId, POLineLocationId, RecievedTransactionId, PONumber, `GLCode`, IsExpense, OrderQty,ClientCompanyId, DeliveryDate, Container,
-- 					UserField1, UserField2, UserField3, UserField4, UserField5, UserField6, UserField7, UserField8, UserField9, UserField10, 
-- 					POType, Id, DepartmentId, Currency, CustomerId,  ProjectTypeId, SubProjectTypeId, Title, SupplierType, PRUseDescription,
-- 					IsRepairOrder, HaveParts, IsReturnToStock, IsCapitalProject, CapitalProjectNo, BudgetAvailableAfterPR, CheckPerson, DirectStockOrder, `VendorTerm`,
-- 					PRNumber, GRNUse, HTSCode, SEApprovalNo, TaxCode, TaxCodeId, VendorId, AssetProjectId, ItemId
-- 			FROM 	PO
-- 			WHERE	ClientId = pClientId
-- 					AND	PONumber in (select SearchValue from tSearchList)
-- 					and VendorId = @VendorId
-- 					and not exists (select 1 from LineItemDetail lid where lid.InvoiceId = pInvoiceId and lid.POId = PO.Id);
		END IF;
	
	ELSE    -- Invoice History record
-- 		SELECT	CONCAT(LastName, ' ', FirstName) 
-- 		INTO	@UserName
-- 		FROM	User
-- 		WHERE	ClientId = pClientId
-- 				AND UserId = pUserId;
-- 	
-- 		INSERT INTO InvoiceHistory (InvoiceId, ActorId, Actor, `Action`, ActionDate, NewData, `Field`, CurrentStatus)
-- 			VALUES (pInvoiceId, pUserId, @UserName, 'Line Item Updated', UTC_TIMESTAMP(), pData, 'Line Item Detail', 'Updated');
		set @Dummy = null;
	END IF;
	
	
	UPDATE 	Invoice 	SET AdjustmentAmount = InvoiceTotal -
												(ifnull((SELECT 	sum(ifnull(TotalAmount, 0))
													FROM 	LineItemDetail lid
													WHERE 	lid.InvoiceId = pInvoiceId), 0)
													+ ifnull(FreightCharges, 0) 		+ IFNULL(Tax, 0) 
													+ ifnull(CalculableOtherCharges, 0) + ifnull(MaterialSurcharge, 0)
													+ ifnull(FuelOutbound, 0) 			+ ifnull(MiscCharges, 0)
												)
	WHERE InvoiceId = pInvoiceId;



	SET FOREIGN_KEY_CHECKS = 1;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_Notify` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_Notify`(IN pUsers text, IN pSubject varchar(200), IN pBody mediumtext, IN pSource varchar(20), IN pLinkPage varchar(20), IN pLinkValue varchar(20), IN pTemplate int)
ThisProc:
	BEGIN	
-- noformat
		set pSource = ifnull(pSource, '');

		CALL _x_StringToRows(pUsers, ';');
		--
		-- Notify the users
		--
		INSERT into UserNotification (UserId, SOURCE, Message, LinkPage, LinkValue, ReadStatus, ReadDate)
			SELECT 	u.UserId,	pSource, 	pBody, 	pLinkPage, pLinkValue, 
					case WHEN up.DisableNotifications = 0														-- 0 Unread, 1=READ 2=NOT notified but in their list
								and not concat(',', ifnull(up.DisableSourceNotifications, ''), ',') like concat('%,', pSource, ',%') 
							then 0 else 2 end,
					case WHEN up.DisableNotifications = 0														-- if disabled, set it to read and then it will eventually be cleaned up
								and not concat(',', ifnull(up.DisableSourceNotifications, ''), ',') like concat('%,', pSource, ',%') 
							then null else UTC_TIMESTAMP() end
			FROM tSearchList
				INNER JOIN User u					ON u.UserId 	= tSearchList.SearchValue
				INNER JOIN _x_UserParameters up 	ON up.UserId 	= u.UserId
			WHERE u.IsActive = 1;



		--
		-- Emails
		--
		IF pUsers IS NOT null then
			SET @NewId = UUID();
			-- Send all emails that are immediate
			insert into Email (Id, ClientId, 	CreatedDate, 		Subject, 	Body, 	EmailType, 	Priority)
					SELECT 	@NewId, u.ClientId, UTC_TIMESTAMP(),	pSubject	,pBody	,pTemplate, 9
					FROM 	tSearchList
							INNER JOIN User u					ON u.UserId 	= tSearchList.SearchValue
					WHERE 	u.IsActive = 1
							AND IFNULL(u.LimitMailPerDay, 0) = 2
					limit 1;
			if ROW_COUNT() > 0 then 
				insert into EmailRecipients(EmailId, EmailAddress, UserId, RecipientType)
						SELECT 	distinct @NewId, u.Email, u.UserId, 1
						FROM 	tSearchList
								INNER JOIN User u					ON u.UserId 	= tSearchList.SearchValue
						WHERE 	u.IsActive = 1
								and u.Email <> ''
								AND IFNULL(u.LimitMailPerDay, 0) = 2;
			end if;

-- 			SET @NewId = UUID();
-- 			-- Send all emails that are 1 / day (sent it tomorrow)
-- 			insert into Email (Id, ClientId, CreatedDate, Subject, Body, EmailType, Priority, SendAfter)
-- 					SELECT 	@NewId, u.ClientId, UTC_TIMESTAMP(),	pSubject	,pBody	,pTemplate, 99,
-- 							CONVERT_TZ(date_add(date(CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', xcp.TimeZone)), interval 1 day), xcp.TimeZone, 'UTC')
-- 					FROM tSearchList
-- 							INNER JOIN User u					ON u.UserId 	= tSearchList.SearchValue
-- 							INNER JOIN _x_ClientParameters xcp	ON xcp.ClientId	= u.ClientId
-- 					WHERE 	u.IsActive = 1
-- 							AND IFNULL(u.LimitMailPerDay, 0) = 1
-- 					limit 1;
-- 			if ROW_COUNT() > 0 then 
-- 				insert into EmailRecipients(EmailId, EmailAddress, UserId, RecipientType)
-- 						SELECT 	distinct @NewId, u.Email, u.UserId, 1
-- 						FROM 	tSearchList
-- 								INNER JOIN User u					ON u.UserId 	= tSearchList.SearchValue
-- 						WHERE 	u.IsActive = 1
-- 								and u.Email <> ''
-- 								AND IFNULL(u.LimitMailPerDay, 0) = 1;
-- 			end if;
		ELSE 
			SET @NewId = UUID();
			insert into Email (Id, ClientId, CreatedDate, Subject, Body, EmailType, Priority)
					Values (@NewId, null, UTC_TIMESTAMP(),	pSubject	,pBody	,pTemplate, 1);
			insert into EmailRecipients(EmailId, EmailAddress, RecipientType)
					values (@NewId, 'support@cloudxdpo.com', 1);
		END IF;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_NotifyAdmins` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_NotifyAdmins`(IN pClientId text, in pUserId char(36), IN pSubject varchar(200), IN pBody mediumtext, IN pSource varchar(20), IN pLinkPage varchar(20), IN pLinkValue varchar(20))
ThisProc:
	BEGIN	
-- noformat
		SET SESSION group_concat_max_len = 1000000;

		set @Admins = null;
		set @Notify = 1;
		-- Check if the client does not want admins to be notified for this Source

		if @Notify = 0 then 
			Leave ThisProc;
		end if;

		-- get the admins, if the person sending is already an admin then do not sent to this person

		select	GROUP_CONCAT(u.UserId SEPARATOR ';')
		into 	@Admins
		from	User u
		where 	ClientId = pClientId
				and u.IsActive = 1
				and u.IsCloudxUser = 0
				and u.UserId <> ifnull(pUserId, '00000000-0000-0000-0000-000000000000')
				and exists (SELECT	cr.*
							FROM	ClientUserRoles cur
									INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
							WHERE	cr.isAdmin	= 1
									and cr.isInternal = 0
									and cr.ClientId = pClientId
									AND cur.UserId	= u.UserId);

		if @Admins is not null then
			call _x_Notify(@Admins, pSubject, pBody, pSource, pLinkPage, pLinkValue, null);
		end if;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_NotifyInfo` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_NotifyInfo`(IN pUserId char(36), IN pRequest varchar(10), INOUT pCount int)
ThisProc:
	BEGIN	
-- noformat

-- pRequest
--		Count	Number of unread notifications
--		List 	The last 15 notifications received else there are not unread
--		History	All data

	declare pPage int;
	declare pRows int;

	set @ClientId = null;

	select	count(*), max(ClientId)
	into	pCount, @ClientId
	from 	UserNotification
			inner join User 	on User.UserId = UserNotification.UserId
	where 	UserNotification.UserId = pUserId
			and UserNotification.ReadStatus = 0;


	if pRequest = 'Count' then
		Leave ThisProc;
	end if;

	call _x_UserActivity(pUserId, concat('Notifications:', pRequest), null);

	call _x_SetClientTimeZone(@ClientId);

	SET pPage = IFNULL(pPage, 1);
	if pRequest = 'List' THEN
		set pRows = pCount;
		if pRows <= 15 THEN
			set pRows = 15;
		end if;
	else 
		SET pRows = 999999;
	end if;
	SET pPage = ((pPage - 1) * pRows);


	select	SOURCE, 
			Message, 
			LinkPage, 
			LinkValue, 
			case when ReadStatus = 0 then 1 else 0 end 				as isNew, 
 			convert_tz(ReceivedDate, 'GMT', @@session.time_zone)	AS ReceivedDate,
 			convert_tz(ReadDate, 'GMT', @@session.time_zone) 		AS ReadDate
	from 	UserNotification
	where 	UserId = pUserId
	order	by ReceivedDate desc
	LIMIT	pPage, pRows;
	
	if pRequest = 'List' THEN
		set TIME_ZONE = @@global.time_zone;
		Update UserNotification set ReadStatus = 1, ReadDate = now()
			where UserId = pUserId and ReadStatus = 0;
	end if;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_PaymentApprovalGenerate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_PaymentApprovalGenerate`(IN pClientId int, IN pFirstTime int)
ThisProc:
	BEGIN

-- noformat
/*
Clients with Payment:

They will have the repay CustomerId on table [ClientCompany] on [UserField1]



Unpaid Invoices:

[ApprovalStatusId] is 5 (Accepted) and [UserField5] is null or empty



Clients that required approval process:

[ClientSpecificConfigType] = 450 on [ClientSpecificConfig] table



Clients with payment workflow:

[ClientSpecificConfigType] = 455 on [ClientSpecificConfig] table



Two Level approval:

Table: [PaymentSecondApprover]

[UserId]: First Approver (Id from User table)

[SecondApproverId]: Second Approver (Id from User table)



WorkflowApproval:

Table: [PaymentApprovalSteps]

ClientId, MinAmount and MaxAmount



Table: [PaymentApprovalUsers]

UserId: First Approver

ManagerId: Second Approver

[PaymentApprovalStepId]: Reference to [PaymentApprovalSteps] table




Current Roles:

Issue: Super Administrator, Administrator, Supervisor

Approve: Super Administrator, Administrator, Supervisor, Procurement



*/

		if pClientId is null THEN
			select 'No client passed';
			Leave ThisProc;
		end if;

		SET pFirstTime = IFNULL(pFirstTime, 0);
		
		DELETE
		FROM	ClientUserRoles
		WHERE	UserId IN (	SELECT	Userid
							FROM	User
							WHERE	ClientId = IFNULL(pClientId, ClientId));
		DELETE
		FROM	ClientRoleFunctions
		WHERE	RoleId IN (SELECT	RoleId
							FROM	ClientRoles
							WHERE	ClientId = IFNULL(pClientId, ClientId));
		DELETE
		FROM	ClientRoles
		WHERE	ClientId = IFNULL(pClientId, ClientId);

		IF pFirstTime = 1 THEN
			ALTER TABLE ClientRoles AUTO_INCREMENT = 1;
		END IF;


		CREATE TEMPORARY TABLE IF NOT EXISTS tmpSuperAdmins (
			UserId char(36)
		);

		CREATE TEMPORARY TABLE IF NOT EXISTS tmpUsers (
			ClientId 		int,
			UserId 			char(36),
			isAdmin 		int,
			IsCloudxUser 	int,
			CurrentRoleId	int
		);

		Update User set IsCloudxUser = 1 
			where ClientId = IFNULL(pClientId, ClientId)
					and ifnull(IsCloudxUser, 0) = 0
					and (
							Email LIKE '%@cloudxdpo.com'
							or RoleId = 4
						);

		INSERT INTO tmpUsers (ClientId, UserId, isAdmin, IsCloudxUser, CurrentRoleId)
			SELECT	User.ClientId,
					User.UserId,
					CASE WHEN UserName LIKE '%admin' THEN 1 ELSE 0 END,
					CASE WHEN User.Email LIKE '%@cloudxdpo.com' THEN 1 ELSE IFNULL(IsCloudxUser, 0) END,
					User.RoleId
			FROM	User
					INNER JOIN Client	ON Client.ClientId = User.ClientId
			WHERE	Client.ClientId = IFNULL(pClientId, Client.ClientId)
					AND User.IsActive = 1
					AND (
							(Client.Email <> ''	AND pClientId IS NULL)
							OR pClientId IS NOT NULL
						);


		INSERT INTO ClientRoles (RoleName, ClientId, isAdmin, isLocked, isInternal)
			SELECT	RoleName,
					ClientId,
					isAdmin,
					isLocked,
					isInternal
			FROM	(SELECT DISTINCT ClientId FROM	tmpUsers) tmpUsers
					CROSS JOIN (
											SELECT	'Super Administrator' AS RoleName,	1 AS isAdmin,	1 AS isLocked,	1 AS isInternal,	1 AS InsertOrder
								UNION ALL	SELECT	'Data Entry',						0,				1,				1,					2
								UNION ALL	SELECT	'Approver',							0,				1,				0,					3
								UNION ALL	SELECT	'Supervisor',						0,				1,				0,					4
								UNION ALL	SELECT	'Search User',						0,				0,				0,					6					
								UNION ALL	SELECT	'Vendor',							0,				0,				0,					7					
								UNION ALL	SELECT	'Administrator',					1,				1,				0,					9
								UNION ALL	SELECT	'Buyer',							0,				0,				0,					10
								UNION ALL	SELECT	'Requestor',						0,				0,				0,					11
								UNION ALL	SELECT	'Procurement',						0,				0,				0,					12
								UNION ALL	SELECT	'Accounting',						0,				0,				0,					13
								UNION ALL	SELECT	'Auditor',							0,				0,				0,					14) Roles
			ORDER BY ClientId, isInternal DESC, InsertOrder;


		INSERT INTO ClientRoleFunctions (RoleId, FunctionKey, Access)
			SELECT	cr.RoleId,
					ss.FunctionKey,
					CASE WHEN cr.RoleName = 'Auditor' THEN CASE WHEN ss.FunctionOptions LIKE '%=0%' THEN 0 ELSE 1 END ELSE 1 END
			FROM	ClientRoles cr
					CROSS JOIN SystemFunctions ss
			WHERE	cr.ClientId = IFNULL(pClientId, cr.ClientId)
					AND (ss.Migrate LIKE CONCAT('%', cr.RoleName, '%') OR ss.Migrate = '')
					AND cr.RoleName <> 'Super Administrator'
			ORDER BY 1, 2;


		-- Insert all Cloud X supervisors as Super Users
		INSERT INTO ClientUserRoles (UserId, RoleId)
			SELECT	DISTINCT	UserId,	cr.RoleId
			FROM	tmpUsers u
					INNER JOIN ClientRoles cr	ON cr.ClientId = u.ClientId
			WHERE	(cr.RoleName = 'Super Administrator'
					AND u.IsCloudxUser = 1
					AND u.isAdmin = 1)
			ORDER	BY 2, 1;

		-- Insert all Cloud X users in the data entry role for Cloudx
		INSERT INTO ClientUserRoles (UserId, RoleId)
			SELECT	DISTINCT	UserId, cr.RoleId
			FROM	tmpUsers u
					INNER JOIN ClientRoles cr	ON cr.ClientId = u.ClientId
			WHERE	(cr.RoleName = 'Data Entry'
					AND u.IsCloudxUser = 1
					AND u.isAdmin = 0)
			ORDER	BY 2, 1;



		INSERT INTO ClientUserRoles (UserId, RoleId)
			SELECT	DISTINCT ur.UserId, cr.roleid
			FROM	UserRoles ur
					INNER JOIN tmpUsers u				ON u.UserId = ur.UserId
					INNER JOIN Role r					ON r.RoleId = IFNULL(ur.RoleId, 5) -- Default to Search User
					INNER JOIN ClientRoles cr			ON cr.ClientId = u.ClientId
			WHERE	u.ClientId = IFNULL(pClientId, u.ClientId)
					AND cr.RoleName LIKE CONCAT('%', case when r.RoleName = 'Exception Handler' then 'Approver' else r.RoleName end , '%')  -- Treat all Exception Handlers as Approvers later they will be tagger in the user table
					AND cr.isInternal = 0
					AND u.IsCloudxUser = 0;


		INSERT INTO tmpSuperAdmins (UserId)
			SELECT DISTINCT	cur.UserId
			FROM ClientUserRoles cur
				INNER JOIN User u				ON u.UserId = cur.UserId
													AND u.ClientId = IFNULL(pClientId, u.ClientId)
													AND u.IsActive = 1
													AND u.IsCloudxUser = 1
				INNER JOIN ClientRoles cr		ON cr.RoleId = cur.RoleId
													AND cr.isAdmin = 1 and cr.isInternal = 1;



		-- Delete all roles if the user is already a SUPER ADMIN
		DELETE	cur
		FROM	ClientUserRoles cur
				INNER JOIN User u				ON u.UserId = cur.UserId
													AND u.ClientId = IFNULL(pClientId, u.ClientId)
				INNER JOIN ClientRoles cr		ON cr.RoleId = cur.RoleId
													AND cr.isAdmin = 0
				INNER JOIN tmpSuperAdmins sa	ON sa.UserId = cur.UserId;

		insert into _x_UserParameters (UserId)
			select	UserId
			from	User
			where 	ClientId in (select distinct ClientId from ClientRoles cr)
					and not exists (select 1 from _x_UserParameters xup where xup.UserId = User.UserId);

		-- If they have the RoleId = 3  <- Exception handler, then set the flag to true
		Update 	_x_UserParameters Data
				inner join tmpUsers t	on t.UserId = Data.UserId
		set 	Data.isExceptionHandler = 1
		where 	t.IsCloudxUser = 0 and t.CurrentRoleId = 3;

		DROP TEMPORARY TABLE tmpUsers;
		DROP TEMPORARY TABLE tmpSuperAdmins;


		if not exists (Select 1 from _x_ClientParameters where ClientId = pClientId) THEN
			insert into _x_ClientParameters(ClientId, TimeZone) values (pClientId, 'US/Eastern');
		end if;


	/*
	
	CALL _x_SecurityGenerate(1, 1);
	CALL _x_SecurityGenerate(88, null);
	CALL _x_SecurityGenerate(137, null);
	CALL _x_SecurityGenerate(147, null);
	
	*/

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_PaymentApprove` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_PaymentApprove`(
-- noformat
	IN `pInvoiceIdList` varchar(16383),
	IN `pUserId` varchar(36))
ThisProc:
  BEGIN
    SET @Now = UTC_TIMESTAMP();

	set @ClientPayer =  'CPayPlusFundApproval';




    /*
	**	Get the name of the user
	*/
    SELECT	IFNULL(CONCAT(u.FirstName, ' ', u.LastName), 'System'), ClientId
	INTO	@LastActionByName, @ClientId
    FROM	User u
    WHERE	u.UserId = pUserId;


    /*pInvoiceIdList pattern "xxxxx,xxxx,xxxxxx"  (comma delimited)*/
    SET pInvoiceIdList = IFNULL(CONCAT(',', pInvoiceIdList, ','), '');

    -- Update the status
    UPDATE	Invoice
    		SET Invoice.ApprovalStatusId = 12
    WHERE	Invoice.ClientId = @ClientId
		    AND Invoice.ApprovalStatusId = 10
		    AND INSTR(pInvoiceIdList, CONCAT(',', InvoiceId, ',')) > 0;

    IF ROW_COUNT() = 0 THEN
		LEAVE ThisProc;
    END IF;

    -- updated PaymentStatus records
    UPDATE	PaymentStatus
    		inner JOIN Invoice ON PaymentStatus.InvoiceId = Invoice.InvoiceId
    		SET PaymentStatus.TransactionIdentifier = 'Funding Approved'
    WHERE	Invoice.ClientId = @ClientId
		    AND Invoice.ApprovalStatusId = 12
		    AND INSTR(pInvoiceIdList, CONCAT(',', Invoice.InvoiceId, ',')) > 0;

    -- for the invoices updated, add to Invoice to Invoice history
    INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId, OldID)
		SELECT	InvoiceId,
				@LastActionByName 			AS Actor,
				@ClientPayer 				AS Action,
				@Now 						AS ActionDate,
				'Payment Initiated' 		AS PreviousData,
				'PaymentApproved' 			AS NewData,
				'Invoice Status' 			AS FIELD,
				'Fund Requested' 			AS InitialStatus,
				'Funding Approved' 			AS CurentStatus,
				pUserId 					AS ActorId,
				NULL 						AS OldId
		FROM	Invoice
		WHERE	Invoice.ClientId = @ClientId
				AND Invoice.ApprovalStatusId = 12
				AND INSTR(pInvoiceIdList, CONCAT(',', Invoice.InvoiceId, ',')) > 0;

  END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_PaymentCancel` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_PaymentCancel`(IN pUserId varchar(36), IN pInvoiceIdList text)
ThisProc:
	BEGIN
		-- noformat
		SET @Now = UTC_TIMESTAMP();

		set @ClientId = NULL;

		--	Get the name of the user		
		SELECT	IFNULL(CONCAT(u.LastName, ', ', u.FirstName), 'System'), ClientId INTO @LastActionByName, @ClientId
		FROM 	User u
		WHERE 	u.UserId = pUserId;


		/*pInvoiceIdList pattern "xxxxx,xxxx,xxxxxx"  comma delimited*/
		Call _x_StringToRows(pInvoiceIdList, ',');


		-- Update the status
		UPDATE 	Invoice
				INNER JOIN tSearchList Ids	ON Ids.SearchValue = Invoice.InvoiceId
		SET 	Invoice.ApprovalStatusId = 5
		WHERE 	Invoice.ClientId = @ClientId
				AND Invoice.ApprovalStatusId = 10;

		IF ROW_COUNT() = 0 THEN
			LEAVE ThisProc;
		END IF;

		-- Delete records from PaymentStatus based on InvoiceId
		DELETE	PaymentStatus
		FROM	PaymentStatus
				INNER JOIN Invoice			ON PaymentStatus.InvoiceId = Invoice.InvoiceId
				INNER JOIN tSearchList Ids	ON Ids.SearchValue = Invoice.InvoiceId
		WHERE Invoice.ClientId = @ClientId	
			AND Invoice.ApprovalStatusId = 5;

		-- for the invoices updated, add to Invoice to Invoice history
		INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId, OldID)
			SELECT
					InvoiceId,
					@LastActionByName 							AS Actor,
					'Cancel Payment Request' 					AS Action,
					@Now 										AS ActionDate,
					'Payment Initiated' 						AS PreviousData,
					'Accepted' 									AS NewData,
					'Invoice Status' 							AS FIELD,
					'Initiated' 								AS InitialStatus,
					'Accepted' 									AS CurentStatus,
					pUserId 									AS ActorId,
					NULL 										AS OldId
			FROM 	Invoice
					INNER JOIN tSearchList Ids	ON Ids.SearchValue = Invoice.InvoiceId
			WHERE 	Invoice.ClientId = @ClientId
					AND Invoice.ApprovalStatusId = 5;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_PaymentCheckEnabled` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_PaymentCheckEnabled`(IN pClientId int,
IN pActionType varchar(50),
IN `pUserId` varchar(36))
BEGIN
  IF (pActionType = 'IssuePayment') THEN
    SELECT
      "Issuing Payment is disabled for the day." AS Message,
      1 AS Enabled;

  ELSEIF (pActionType = 'ApproveFunds') THEN
    SELECT
      "Payment Approval is disabled for the day." AS Message,
      1 AS Enabled;

  ELSEIF (pActionType = 'CancelPayment') THEN
    SELECT
      "Canceling Payment is disabled for the day." AS Message,
      1 AS Enabled;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_PaymentDiscount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_PaymentDiscount`(IN `pClientId` int,
IN `pInvoiceId` int,
IN `pPercent` decimal(18, 2),
IN `pDateFrom` datetime,
IN `pDateTo` datetime)
BEGIN

  UPDATE Invoice
  SET DiscountRequestedAmount = pPercent,
      PaymentProcessingDate = pDateFrom,
      DiscountExpireDate = pDateTo
  WHERE ClientId = pClientId
  AND InvoiceId = pInvoiceId;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_PaymentException` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_PaymentException`(IN pUserId varchar(36))
ThisProc:
	BEGIN
-- noformat
	SELECT	ClientId 
	INTO	@ClientId
	FROM	User
	WHERE	UserId = pUserId;



	SET @CheckAddressBeforePayment = 0;
	SET @CheckIfTheCompanyHasNoFundingSourceConfiguredInCPayPLUS = 0;
	IF EXISTS (SELECT	1
				FROM	ClientSpecificConfig
				WHERE	ClientSpecificConfigType = 237
				AND		ClientId = @ClientId) THEN
		SET @CheckAddressBeforePayment = 1;
	END IF;
	IF EXISTS (SELECT	1
				FROM	ClientSpecificConfig
				WHERE	ClientSpecificConfigType = 147
				AND		ClientId = @ClientId) THEN
		SET @CheckIfTheCompanyHasNoFundingSourceConfiguredInCPayPLUS = 1;
	END IF;

	drop temporary table if exists InvoicesReadyForIssue;
	Create temporary table InvoicesReadyForIssue as 
		SELECT	distinct Invoice.VendorId
		FROM	Invoice		
				inner JOIN Vendor				ON Invoice.VendorId = Vendor.VendorId
				INNER JOIN ClientCompany cc		ON cc.ClientId = Invoice.ClientId
													AND cc.CompanyCode = Invoice.CompanyCode
				left join PaymentStatus ps		ON Invoice.InvoiceId = ps.InvoiceId
				left join _x_PaymentStatus xps	on xps.Id = ps.Id
		WHERE 	Invoice.ClientId = @ClientId
				AND Invoice.IsDeleted = FALSE
				AND Invoice.IsPaused = FALSE
				AND Invoice.ApprovalStatusId = 5
				AND NULLIF(xps.PaymentNumber, '') IS NULL;
--				AND NULLIF(Invoice.UserField5, '') IS NULL;

	select	
			cc.CompanyCode																						AS Company,
			CONCAT(IFNULL(CONCAT('[', Vendor.VendorNo, '] '), ''), IFNULL(Vendor.VendorName, '')) 				AS Data,
			'The address is missing or incomplete.'																as DataException,
			'/dataload?t=vendor'																				as Url,
			Vendor.VendorId																						as UrlKey
	FROM	Vendor			
			left join Address a 			ON a.AddressId = Vendor.AddressId
			INNER JOIN ClientCompany cc		ON cc.ClientId = Vendor.ClientId
												AND cc.Id = Vendor.ClientCompanyId
	Where 	Vendor.ClientId = @ClientId
			and Vendor.IsActive = 1
			and @CheckAddressBeforePayment = 1 
			and exists (select 1 from InvoicesReadyForIssue data where data.VendorId = Vendor.VendorId)
			and (
					not (nullif(a.Address1, '') is not null or nullif(a.StreetName, '') is not null)
					or nullif(a.CityName, '') is null 
					or nullif(a.ZipCode, '') is null 
					or nullif(a.StateId, '') is null 
				)
	union all
	select	
			cc.CompanyCode																						AS Company,
			CONCAT(IFNULL(CONCAT('[', cc.CompanyCode, '] '), ''), IFNULL(cc.Description, '')) 					AS Data,
			'No funding source has been configured.'															as DataException,
			NULL																								as Url,
			null																								as UrlKey
	FROM	ClientCompany cc			
	Where 	cc.ClientId = @ClientId
			and @CheckIfTheCompanyHasNoFundingSourceConfiguredInCPayPLUS = 1 
			and nullif(cc.UserField1, '') IS not NULL
	order	by 3, 1, 2;

-- call _x_PaymentException('05a9d900-bacf-485d-a623-7b0a51690ca5')

-- call _x_PaymentException('1647df6b-398b-4dc1-8f6c-0e74cc592112')


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_PaymentExport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_PaymentExport`(
-- noformat
	IN pInvoiceIds			text
	)
ThisProc:
BEGIN
  DROP TABLE IF EXISTS pmtExportTempInvoices;
  CREATE TEMPORARY TABLE pmtExportTempInvoices AS
	    SELECT	* 
		FROM	JSON_TABLE(
				            CONCAT('[', pInvoiceIds, ']'),	
				            "$[*]"
				            COLUMNS(InvoiceId int PATH "$")
					        ) as InvIds;

	set @CodePosition = 2;

	SELECT
			cc.CompanyCode																						AS Company,
			_x_GetFormatedValue(Vendor.VendorNo, Vendor.VendorName, @CodePosition)								as Vendor,
			IFNULL(Invoice.InvoiceNo, '') 																		AS InvoiceNo,
			Invoice.InvoiceTotal,
			date(Invoice.InvoiceDate)																			AS InvoiceDate,
			date(Invoice.PaymentDueDate)																		AS InvoiceDueDate,
			
			CASE
				WHEN Invoice.NetTermDate IS NULL		THEN null
				WHEN Invoice.NetTermDate >= date(NOW()) THEN date(Invoice.NetTermDate)								
				ELSE NULL					END 																AS DiscountDate,
	
			CASE
				WHEN Invoice.NetTermDiscount IS NULL	THEN ''
				WHEN Invoice.NetTermDate >= date(NOW()) THEN Invoice.NetTermDiscount									
				ELSE ''									END 													AS DiscountAmount,
			CASE WHEN Invoice.NetTermDate < date(NOW()) THEN '' ELSE '' END 								AS DiscountNote
	FROM 	Invoice		
			inner JOIN Vendor				ON Invoice.VendorId = Vendor.VendorId
			INNER JOIN ClientCompany cc		ON cc.ClientId = Invoice.ClientId
												AND cc.CompanyCode = Invoice.CompanyCode
			left join PaymentStatus ps		ON Invoice.InvoiceId = ps.InvoiceId
		where Invoice.InvoiceId  in (select InvoiceId from pmtExportTempInvoices);
   
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_PaymentFundApprovalSearch` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_PaymentFundApprovalSearch`(IN pUserId varchar(36))
ThisProc:
	BEGIN
-- noformat

	SELECT 	ClientId INTO @ClientId
	FROM 	User
	WHERE 	UserId = pUserId;


	set @IsAdmin = 0;
    IF EXISTS (SELECT	1
		        FROM	ClientUserRoles cur
		          		INNER JOIN ClientRoles cr		ON	cr.RoleId = cur.RoleId
		            										AND cr.isAdmin = 1
		        WHERE	cur.UserId = pUserId) THEN
		set @IsAdmin = 1;
	end if;

	drop TEMPORARY TABLE IF EXISTS AuthorizedCompanies;
	CREATE TEMPORARY TABLE IF NOT EXISTS AuthorizedCompanies AS (
			select 	cc.Id as ClientCompanyId
            FROM	ClientCompany cc
					inner join UserClientCompanies ucc 	on ucc.UserId = pUserId
															and ucc.ClientCompanyId = cc.Id
															and ifnull(ucc.AllowPaymentApproval, 0) = 1
			WHERE	ClientId = @ClientId
					and IsActive = 1
		);


	CALL _x_SetClientTimeZone(@ClientId);

	SELECT
			LTRIM(cc.CompanyCode)															 					AS Company,
			CONCAT(IFNULL(CONCAT('[', Vendor.VendorNo, '] '), ''), IFNULL(Vendor.VendorName, '')) 				AS Vendor,
			IFNULL(Invoice.InvoiceNo, '') 																		AS InvoiceNo,
			Invoice.InvoiceTotal,
			Invoice.InvoiceDate																					AS InvoiceDate,
			Invoice.PaymentDueDate																				AS InvoiceDueDate,
			
			CASE
				WHEN Invoice.NetTermDate IS NULL					THEN ''
				WHEN Invoice.NetTermDate >= date(UTC_TIMESTAMP()) 	THEN Invoice.NetTermDate 									
				ELSE NULL					END 																AS DiscountDate,

			CASE
				WHEN Invoice.NetTermDiscount IS NULL				THEN ''
				WHEN Invoice.NetTermDate >= date(UTC_TIMESTAMP()) 	THEN Invoice.NetTermDiscount 									
				ELSE ''									END 													AS DiscountAmount,
			CASE WHEN Invoice.NetTermDate < date(UTC_TIMESTAMP()) 	THEN 'Lost' ELSE '' END 					AS DiscountNote, 									
			Invoice.InvoiceId,
			Invoice.VendorId

	FROM 	Invoice		
			INNER JOIN Vendor			ON Invoice.VendorId = Vendor.VendorId
			INNER JOIN PaymentStatus	ON PaymentStatus.InvoiceId = Invoice.InvoiceId
			INNER JOIN ClientCompany cc	ON cc.ClientId = Invoice.ClientId
											AND cc.CompanyCode = Invoice.CompanyCode
											AND cc.UserField1 IS NOT NULL
	WHERE 	Invoice.ClientId = @ClientId
			AND Invoice.IsDeleted = FALSE
			AND Invoice.IsPaused = FALSE
			AND Invoice.ApprovalStatusId = 10
			-- AND NULLIF(Invoice.UserField1, '') IS NOT NULL
			and exists (select 1 from AuthorizedCompanies chk where chk.ClientCompanyId = cc.Id limit 1)

	ORDER BY 1, 3, Invoice.NetTermDate, Invoice.PaymentDueDate;

-- call _x_PaymentFundApprovalSearch('e727c557-6c8e-4a73-811b-a2ee93e4916d');
-- call _x_PaymentFundApprovalSearch('e5cc2185-0b6b-4738-9d54-1f06d2bb6e22');


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_PaymentHistorySearch` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_PaymentHistorySearch`(
-- noformat
	IN pUserId varchar(36),			-- asdjhashjdgjahgsdjhgasdasd
	IN pSearchString mediumtext,	-- InvoiceNo■12335■InvoiceAmount2■45000		
	IN pRows int,					-- 10
	IN pPage int
	)
ThisProc:
	BEGIN
-- noformat

		DECLARE done int DEFAULT FALSE;
		DECLARE DataValue mediumtext;
		DECLARE curParms CURSOR FOR SELECT* FROM tSearchList;
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

		set @CompanyCode 			= null;
		set @DocumentType			= null;
		set @InvoiceNo 				= null;
		set @Vendor 				= null;
		Set @InvoiceDate1 			= null;
		set @InvoiceDate2 			= null;
		set @PaymentDate1			= null;
		Set @PaymentDate2			= NULL;
		set @PaymentInfo 			= NULL;

		-- Break up the Data passed into the following order
		CALL _x_StringToRows(pSearchString, '■');

		IF MOD((SELECT	COUNT(*) FROM tSearchList), 2) <> 0 THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Improperly coded search string; Parameters not paired.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;

		OPEN curParms;
	readParms:
		LOOP
			FETCH curParms INTO DataValue;
			IF done THEN
				LEAVE readParms;
			END IF;
			SET @DataValue = DataValue;
			IF DataValue = 'CompanyCode' THEN
				FETCH curParms INTO DataValue;
				SET @CompanyCode = DataValue;
			ELSEIF DataValue = 'DocumentType' THEN
				FETCH curParms INTO DataValue;
				SET @DocumentType = DataValue;
			ELSEIF DataValue = 'InvoiceNo' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceNo = DataValue;
			ELSEIF DataValue = 'Vendor' THEN
				FETCH curParms INTO DataValue;
				SET @Vendor = DataValue;
			ELSEIF DataValue = 'InvoiceDate1' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceDate1 = DATE(DataValue);
			ELSEIF DataValue = 'InvoiceDate2' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceDate2 = DATE(DataValue);
			ELSEIF DataValue = 'PaymentDate1' THEN
				FETCH curParms INTO DataValue;
				SET @PaymentDate1 = DATE(DataValue);
			ELSEIF DataValue = 'PaymentDate2' THEN
				FETCH curParms INTO DataValue;
				SET @PaymentDate2 = DATE(DataValue);
			ELSEIF DataValue = 'PaymentInfo' THEN
				FETCH curParms INTO DataValue;
				SET @PaymentInfo = DataValue;
			ELSE
				SET @ErrMsg = CONCAT('Improperly coded search string; Unknown keyword [', DataValue, '].');
				SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @ErrMsg, MYSQL_ERRNO = 1;
				LEAVE ThisProc;
			END IF;

			INSERT INTO SystemAdvanceSearchFieldsUserStats (SearchType, Field, UserId, TotalUsed)
				VALUES ('PaymentHistory', REPLACE(REPLACE(@DataValue, '1', '#'), '2', '#'), pUserId, 1)
			ON DUPLICATE KEY UPDATE TotalUsed = TotalUsed + 1;


		END LOOP;
		CLOSE curParms;

		SELECT	ClientId 
		INTO	@ClientId
		FROM	User
		WHERE	UserId = pUserId;

		SET pRows = IFNULL(pRows, 10);
		SET pPage = IFNULL(pPage, 1);
		SET pPage = ((pPage - 1) * pRows);
		SET @Sep = CHAR(254);


		CALL _x_StringToRegEx(@InvoiceNo);
		CALL _x_StringToRegEx(@PaymentInfo);


		SELECT
				cc.CompanyCode																												AS Company,
				CONCAT(IFNULL(CONCAT('[', Vendor.VendorNo, '] '), ''), IFNULL(Vendor.VendorName, '')) 										AS Vendor,
				Invoice.InvoiceType			 																								AS DocumentType,
				IFNULL(Invoice.InvoiceNo, '') 																								AS InvoiceNo,
				Invoice.InvoiceDate																											AS InvoiceDate,
				Invoice.InvoiceTotal						 																				AS InvoiceTotal,
				InvoiceStatus.StateName 																									AS InvoiceStatus,
				CASE
					WHEN Invoice.NetTermDiscount IS NULL							THEN ''
					ELSE Invoice.NetTermDiscount									END 													AS DiscountAmount,
				
				CASE
					WHEN Invoice.NetTermDiscount IS NULL							THEN ''
					WHEN Invoice.InvoiceTotal <> PaymentStatus.GrossAmount 			THEN 'Y'					
					ELSE 'N'														END 													AS DiscountTaken,
	
				PaymentStatus.ReceivedDate										 															AS PaymentDate,
				IFNULL(PaymentStatus.CardNumber, '')																						AS Cardnumber,  
				IFNULL(xps.PaymentNumber, '')																								AS PaymentNumber,
--				IFNULL(Invoice.UserField5, '')																								AS PaymentNumber,
				Invoice.InvoiceId,
				Invoice.VendorId

		FROM Invoice		
			Inner JOIN InvoiceStatus 		ON InvoiceStatus.StateId = Invoice.ApprovalStatusId
			inner JOIN Vendor				ON Invoice.VendorId = Vendor.VendorId
			INNER JOIN PaymentStatus		ON PaymentStatus.InvoiceId = Invoice.InvoiceId
			INNER JOIN ClientCompany cc		ON cc.ClientId = Invoice.ClientId
												AND cc.CompanyCode = Invoice.CompanyCode
			left join PaymentStatus ps		ON Invoice.InvoiceId = ps.InvoiceId
			left join _x_PaymentStatus xps	on xps.Id = ps.Id
		WHERE Invoice.ClientId = @ClientId
			AND Invoice.ApprovalStatusId IN (7, 11, 12, 13)


			AND Regexp_Like(IFNULL(Invoice.InvoiceNo, ''), @InvoiceNo, 'mi')
			AND Regexp_Like(CONCAT(IFNULL(PaymentStatus.CardNumber, ''), '■', IFNULL(xps.PaymentNumber, '')), @PaymentInfo, 'mi')
--			AND Regexp_Like(CONCAT(IFNULL(PaymentStatus.CardNumber, ''), '■', IFNULL(Invoice.UserField5, '')), @PaymentInfo, 'mi')

			AND Invoice.InvoiceTotal BETWEEN IFNULL(@InvoiceAmount1, Invoice.InvoiceTotal) AND IFNULL(@InvoiceAmount2, Invoice.InvoiceTotal)

			AND IFNULL(Invoice.CompanyCode, '') = IFNULL(IFNULL(@CompanyCode, Invoice.CompanyCode), '')
	
			AND Invoice.InvoiceType = IFNULL(@DocumentType, Invoice.InvoiceType)
			AND Invoice.VendorId = IFNULL(@Vendor, Invoice.VendorId)
			AND Invoice.InvoiceDate BETWEEN IFNULL(@InvoiceDate1, Invoice.InvoiceDate) AND IFNULL(@InvoiceDate2, Invoice.InvoiceDate)
			AND PaymentStatus.ReceivedDate BETWEEN IFNULL(@PaymentDate1, PaymentStatus.ReceivedDate) AND IFNULL(@PaymentDate2, PaymentStatus.ReceivedDate)

		ORDER BY 1, 10 DESC, 2, 3, 4
		LIMIT pPage, pRows;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_PaymentInitiate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_PaymentInitiate`(
-- noformat
	IN pUserId varchar(36),
	IN pInvoiceIdList text
	)
ThisProc:
	BEGIN		
		SET @Now = UTC_TIMESTAMP();

		set @ClientId = NULL;

		--	Get the name of the user		
		SELECT	IFNULL(CONCAT(u.LastName, ', ', u.FirstName), 'System'), ClientId INTO @LastActionByName, @ClientId
		FROM 	User u
		WHERE 	u.UserId = pUserId;

		set @ClientPayer =  'CPayPlusFundApproval';




		set @IgnoreDiscountCalculationForPaymentProcessing = 0; 
		IF EXISTS (SELECT	1
					FROM	ClientSpecificConfig
					WHERE	ClientSpecificConfigType = 712
					AND		ClientId = @ClientId) THEN
			SET @IgnoreDiscountCalculationForPaymentProcessing = 1; 
		END IF;	



		set @ManuallyApprovePayment = 12; -- Payment approved
		IF EXISTS (SELECT	1
					FROM	ClientSpecificConfig
					WHERE	ClientSpecificConfigType = 148
					AND		ClientId = @ClientId) THEN
			SET @ManuallyApprovePayment = 10; -- Payment issued requires approval -- Payment Initiated
		END IF;	
		
		Set @TransactionIdentifier = 'Funding Approved';
		if exists  (select 1 from Client where ClientId = @ClientId and PaymentApprovalRequired = 1) then
			Set @TransactionIdentifier = 'Fund Requested';
		end if;


		/*pInvoiceIdList pattern "xxxxx,xxxx,xxxxxx"  comma delimited*/
		Call _x_StringToRows(pInvoiceIdList, ',');

		-- Update the status
		UPDATE 	Invoice		
				INNER JOIN tSearchList Ids	ON Ids.SearchValue = Invoice.InvoiceId
		set 	ApprovalStatusId = @ManuallyApprovePayment
		WHERE	Invoice.ClientId = @ClientId
				AND Invoice.ApprovalStatusId = 5;

		IF ROW_COUNT() = 0 THEN
			LEAVE ThisProc;
		END IF;

-- select InvoiceNo, InvoiceDate, NetTermDate, InvoiceTotal, NetTermDiscount, ClientId, InvoiceId
-- from Invoice 
-- where ClientId in (147)
-- 		and InvoiceType = 'Invoice'
-- 		and NetTermDiscount >0
-- 		and ApprovalStatusId = 7
-- 		and exists (select * from PaymentStatus ps where ps.InvoiceId = Invoice.InvoiceId and ps.GrossAmount = Invoice.InvoiceTotal)
-- limit 100;
-- 
-- select * from PaymentStatus ps where ps.InvoiceId = 660336092;
-- select * from InvoiceHistory	 ps where ps.InvoiceId = 660336092;



		-- for the invoices updated, generate the PaymentStatus records
		INSERT INTO PaymentStatus (InvoiceId, TransactionTypeId, SupplierNo, GrossAmount, CardNumber, ReceivedDate, InvoiceNo, TransactionIdentifier, TransactionTypeDescription)
			SELECT
					Invoice.InvoiceId,
					1 																									AS TransactionTypeId,
					Vendor.VendorNo 																					AS SupplierNo,
					CASE
						when @IgnoreDiscountCalculationForPaymentProcessing = 1 then ROUND(Invoice.InvoiceTotal, 2)
						WHEN Invoice.NetTermDate IS NULL						THEN ROUND(Invoice.InvoiceTotal, 2)
						WHEN Invoice.NetTermDate < date(NOW()) 					THEN ROUND(Invoice.InvoiceTotal, 2)
						when nullif(ROUND(Invoice.NetTermDiscount, 2), 0) <= 0	then ROUND(Invoice.InvoiceTotal, 2)
						else ROUND(Invoice.InvoiceTotal, 2) - ROUND(Invoice.NetTermDiscount, 2)	end 					AS GrossAmount,
					IFNULL(NULLIF(xps.PaymentReference, ''), ' - ') 													AS CardNumber,
--					IFNULL(NULLIF(Invoice.CheckNumber, ''), ' - ') 														AS CardNumber,
					@Now AS ReceivedDate,
					Invoice.InvoiceNo,
					@TransactionIdentifier,
					'Card Issuance' 																					AS TransactionTypeDescription
			FROM 	Invoice
					INNER JOIN Vendor			ON Invoice.VendorId = Vendor.VendorId
					INNER JOIN tSearchList Ids	ON Ids.SearchValue = Invoice.InvoiceId
					left join PaymentStatus ps		ON Invoice.InvoiceId = ps.InvoiceId
					left join _x_PaymentStatus xps	on xps.Id = ps.Id
			WHERE Invoice.ClientId = @ClientId
				AND Invoice.ApprovalStatusId = @ManuallyApprovePayment;

		-- for the invoices updated, add to Invoice to Invoice history
		INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId, OldID)
			SELECT
					InvoiceId,
					@LastActionByName 						AS Actor,
					'Issue Payment' 						AS Action,
					@Now 									AS ActionDate,
					'Accepted' 								AS PreviousData,
					'Payment Initiated' 					AS NewData,
					'Invoice Status' 						AS FIELD,
					'Accepted' 								AS InitialStatus,
					'Initiated' 							AS CurentStatus,
					pUserId 								AS ActorId,
					NULL 									AS OldId
			FROM 	Invoice
					INNER JOIN tSearchList Ids	ON Ids.SearchValue = Invoice.InvoiceId
			WHERE 	Invoice.ClientId = @ClientId
					AND Invoice.ApprovalStatusId = @ManuallyApprovePayment;

	
	    -- for the invoices updated, add to Invoice to Invoice history
	    INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId, OldID)
	 			SELECT
						InvoiceId,
						@LastActionByName 						AS Actor,
						@ClientPayer 							AS Action,
						@Now 									AS ActionDate,
						'Payment Initiated' 					AS PreviousData,
						'PaymentApproved' 						AS NewData,
						'Invoice Status' 						AS FIELD,
						'Fund Requested' 						AS InitialStatus,
						'Funding Approved' 						AS CurentStatus,
						pUserId 								AS ActorId,
						NULL 									AS OldId
				FROM 	Invoice
						INNER JOIN tSearchList Ids	ON Ids.SearchValue = Invoice.InvoiceId
				WHERE 	Invoice.ClientId = @ClientId
						AND Invoice.ApprovalStatusId = 12;	-- Payment approved


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_PaymentIssueSearch` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_PaymentIssueSearch`(
-- noformat
	IN pUserId 			varchar(36),			-- asdjhashjdgjahgsdjhgasdasd
	IN pSearchString 	mediumtext
	)
ThisProc:
	BEGIN
-- noformat

	DECLARE done int DEFAULT FALSE;
	DECLARE DataValue mediumtext;
	DECLARE curParms CURSOR FOR
	SELECT	*
	FROM tSearchList;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

	set @CompanyCode 			= null;
	set @DocumentType			= NULL;
	set @InvoiceAmount1 		= NULL;
	set @InvoiceAmount2 		= NULL;
	Set @InvoiceDate1 			= null;
	set @InvoiceDate2 			= null;
	set @InvoiceDueDate1 		= null;
	Set @InvoiceDueDate2 		= null;
	set @DiscountOnly			= null;

	-- Break up the Data passed into the following order
	CALL _x_StringToRows(pSearchString, '■');

	IF MOD((SELECT	COUNT(*) FROM tSearchList), 2) <> 0 THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Improperly coded search string; Parameters not paired.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;


	OPEN curParms;
readParms:
	LOOP
		FETCH curParms INTO DataValue;
		IF done THEN
			LEAVE readParms;
		END IF;
		SET @DataValue = DataValue;
		IF DataValue = 'CompanyCode' THEN
			FETCH curParms INTO DataValue;
			SET @CompanyCode = DataValue;
		ELSEIF DataValue = 'DocumentType' THEN
			FETCH curParms INTO DataValue;
			SET @DocumentType = DataValue;
		ELSEIF DataValue = 'InvoiceNo' THEN
			FETCH curParms INTO DataValue;
			SET @InvoiceNo = DataValue;
		ELSEIF DataValue = 'Vendor' THEN
			FETCH curParms INTO DataValue;
			SET @Vendor = DataValue;
		ELSEIF DataValue = 'InvoiceAmount1' THEN
			FETCH curParms INTO DataValue;
			SET @InvoiceAmount1 = CAST(DataValue AS decimal(18, 2));
		ELSEIF DataValue = 'InvoiceAmount2' THEN
			FETCH curParms INTO DataValue;
			SET @InvoiceAmount2 = CAST(DataValue AS decimal(18, 2));
		ELSEIF DataValue = 'InvoiceDate1' THEN
			FETCH curParms INTO DataValue;
			SET @InvoiceDate1 = DATE(DataValue);
		ELSEIF DataValue = 'InvoiceDate2' THEN
			FETCH curParms INTO DataValue;
			SET @InvoiceDate2 = DATE(DataValue);
		ELSEIF DataValue = 'InvoiceDueDate1' THEN
			FETCH curParms INTO DataValue;
			SET @InvoiceDueDate1 = DATE(DataValue);
		ELSEIF DataValue = 'InvoiceDueDate2' THEN
			FETCH curParms INTO DataValue;
			SET @InvoiceDueDate2 = DATE(DataValue);
		ELSEIF DataValue = 'DiscountOnly' THEN
			FETCH curParms INTO DataValue;
			SET @DiscountOnly = CASE WHEN DataValue = 'True' THEN 1 ELSE 0 END;
		ELSE
			SET @ErrMsg = CONCAT('Improperly coded search string; Unknown keyword [', DataValue, '].');
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @ErrMsg, MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;

		INSERT INTO SystemAdvanceSearchFieldsUserStats (SearchType, Field, UserId, TotalUsed)
			VALUES ('IssuePayment', REPLACE(REPLACE(@DataValue, '1', '#'), '2', '#'), pUserId, 1)
		ON DUPLICATE KEY UPDATE TotalUsed = TotalUsed + 1;


	END LOOP;
	CLOSE curParms;

	SELECT	ClientId
	INTO	@ClientId
	FROM	User
	WHERE	UserId = pUserId;

	drop TEMPORARY TABLE IF EXISTS AuthorizedCompanies;
	CREATE TEMPORARY TABLE IF NOT EXISTS AuthorizedCompanies AS (
			select 	cc.Id as ClientCompanyId
            FROM	ClientCompany cc
					inner join UserClientCompanies ucc 	on ucc.UserId = pUserId
															and ucc.ClientCompanyId = cc.Id
															and ifnull(ucc.AllowPaymentApproval, 0) in (0, 1)
			WHERE	ClientId = @ClientId
					and IsActive = 1
		);

	set @CodePosition = 2;
	call _x_SetClientTimeZone(@ClientId);
	Call _x_GetClientParam(@ClientId, 'CodePosition', @CodePosition);
	CALL _x_StringToRegEx(@InvoiceNo);

	SET @Sep = CHAR(254);


	SELECT
			cc.CompanyCode																						AS Company,
			_x_GetFormatedValue(Vendor.VendorNo, Vendor.VendorName, @CodePosition)								as Vendor,
			IFNULL(Invoice.InvoiceNo, '') 																		AS InvoiceNo,
			Invoice.InvoiceTotal,
			date(Invoice.InvoiceDate)																			AS InvoiceDate,
			date(Invoice.PaymentDueDate)																		AS InvoiceDueDate,
			
			CASE
				WHEN Invoice.NetTermDate IS NULL					THEN null
				WHEN Invoice.NetTermDate >= date(UTC_TIMESTAMP()) 	THEN date(Invoice.NetTermDate )								
				ELSE NULL					END 																AS DiscountDate,
	
			CASE
				WHEN Invoice.NetTermDiscount IS NULL				THEN ''
				WHEN Invoice.NetTermDate >= date(UTC_TIMESTAMP()) 	THEN Invoice.NetTermDiscount									
				ELSE ''												END 										AS DiscountAmount,
			CASE WHEN Invoice.NetTermDate < date(UTC_TIMESTAMP()) THEN 'Lost' ELSE '' END 						AS DiscountNote, 									
			Invoice.InvoiceId,
			Invoice.VendorId
	FROM 	Invoice		
			inner JOIN Vendor				ON Invoice.VendorId = Vendor.VendorId
			INNER JOIN ClientCompany cc		ON cc.ClientId = Invoice.ClientId
												AND cc.CompanyCode = Invoice.CompanyCode
												AND cc.UserField1 IS NOT NULL
			left join PaymentStatus ps		ON Invoice.InvoiceId = ps.InvoiceId
			left join _x_PaymentStatus xps	on xps.Id = ps.Id
	WHERE 	Invoice.ClientId = @ClientId
			AND Invoice.IsDeleted = FALSE
			AND Invoice.IsPaused = FALSE
			AND Invoice.ApprovalStatusId = 5
			AND NULLIF(xps.PaymentNumber, '') IS NULL -- No payment number
--				AND NULLIF(Invoice.UserField5, '') IS NULL -- No payment number

			AND Regexp_Like(IFNULL(Invoice.InvoiceNo, ''), @InvoiceNo, 'mi')
			AND Invoice.InvoiceTotal BETWEEN IFNULL(@InvoiceAmount1, Invoice.InvoiceTotal) AND IFNULL(@InvoiceAmount2, Invoice.InvoiceTotal)
			AND (IFNULL(@DiscountOnly, 0) = 0
					OR (IFNULL(@DiscountOnly, 0) = 1
						and	Invoice.NetTermDate <= date(UTC_TIMESTAMP())
						)
				)
			AND IFNULL(Invoice.CompanyCode, '') = IFNULL(IFNULL(@CompanyCode, Invoice.CompanyCode), '')
	
			AND Invoice.InvoiceType = IFNULL(@DocumentType, Invoice.InvoiceType)
			AND Invoice.VendorId = IFNULL(@Vendor, Invoice.VendorId)
			AND Invoice.InvoiceDate BETWEEN IFNULL(@InvoiceDate1, Invoice.InvoiceDate) AND IFNULL(@InvoiceDate2, Invoice.InvoiceDate)
			AND Invoice.PaymentDueDate BETWEEN IFNULL(@InvoiceDueDate1, Invoice.PaymentDueDate) AND IFNULL(@InvoiceDueDate2, Invoice.PaymentDueDate)

			and exists (select 1 from AuthorizedCompanies chk where chk.ClientCompanyId = cc.Id limit 1)
	ORDER BY 1, 2, 3;

-- call _x_PaymentIssueSearch('52029cb8-4d2f-4914-86eb-036c545fcc47', null);
-- call _x_PaymentIssueSearch('e5cc2185-0b6b-4738-9d54-1f06d2bb6e22', null);

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_PaymentSearch` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_PaymentSearch`(
-- noformat
	IN pUserId varchar(36),			-- asdjhashjdgjahgsdjhgasdasd
	IN pSearchString mediumtext,	-- InvoiceNo■12335■InvoiceAmount2■45000		
	IN pRows int,					-- 10
	IN pPage int
)
ThisProc:
	BEGIN
		DECLARE done int DEFAULT FALSE;
		DECLARE DataValue mediumtext;
		DECLARE curParms CURSOR FOR
		SELECT
			*
		FROM tSearchList;
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

		Set @CompanyCode = null;
		Set @InvoiceNo = null;
		Set @Vendor = null;
		Set @InvoiceDate1 = null;
		Set @InvoiceDate2 = null;
		Set @DueDate1 = null;
		Set @DueDate2 = null;
		Set @NetTermDate = null;
		Set @PaymentAmount1 = null;
		Set @PaymentAmount2 = null;
		Set @PaymentDate1 = null;
		Set @PaymentDate2 = null;
		Set @PaymentStatus = null;

		-- Break up the Data passed into the following order
		CALL _x_StringToRows(pSearchString, '■');

		IF MOD((SELECT	COUNT(*)
				FROM	tSearchList), 2) <> 0 THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Improperly coded search string; Parameters not paired.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;


		OPEN curParms;
	readParms:
		LOOP
			FETCH curParms INTO DataValue;
			IF done THEN
				LEAVE readParms;
			END IF;
			SET @DataValue = DataValue;
			IF DataValue = 'CompanyCode' THEN
				FETCH curParms INTO DataValue;
				SET @CompanyCode = DataValue;
			ELSEIF DataValue = 'InvoiceNo' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceNo = DataValue;
			ELSEIF DataValue = 'Vendor' THEN
				FETCH curParms INTO DataValue;
				SET @Vendor = DataValue;
			ELSEIF DataValue = 'InvoiceDate1' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceDate1 = DATE(DataValue);
			ELSEIF DataValue = 'InvoiceDate2' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceDate2 = DATE(DataValue);
			ELSEIF DataValue = 'DueDate1' THEN
				FETCH curParms INTO DataValue;
				SET @DueDate1 = DATE(DataValue);
			ELSEIF DataValue = 'DueDate2' THEN
				FETCH curParms INTO DataValue;
				SET @DueDate2 = DATE(DataValue);
			ELSEIF DataValue = 'NetTermDate' THEN
				FETCH curParms INTO DataValue;
				SET @NetTermDate = DATE(DataValue);
			ELSEIF DataValue = 'PaymentAmount1' THEN
				FETCH curParms INTO DataValue;
				SET @PaymentAmount1 = CAST(DataValue AS decimal(18, 2));
			ELSEIF DataValue = 'PaymentAmount2' THEN
				FETCH curParms INTO DataValue;
				SET @PaymentAmount2 = CAST(DataValue AS decimal(18, 2));
			ELSEIF DataValue = 'PaymentDate1' THEN
				FETCH curParms INTO DataValue;
				SET @PaymentDate1 = DATE(DataValue);
			ELSEIF DataValue = 'PaymentDate2' THEN
				FETCH curParms INTO DataValue;
				SET @PaymentDate2 = DATE(DataValue);
			ELSEIF DataValue = 'PaymentStatus' THEN
				FETCH curParms INTO DataValue;
				SET @PaymentStatus = DataValue;
			ELSE
				SET @ErrMsg = CONCAT('Improperly coded search string; Unknown keyword [', DataValue, '].');
				SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @ErrMsg, MYSQL_ERRNO = 1;
				LEAVE ThisProc;
			END IF;

-- 			INSERT INTO SystemAdvanceSearchFieldsUserStats (SearchType, SearchField, UserId, TotalUsed)
-- 				VALUES ('IssuePayment', REPLACE(REPLACE(@DataValue, '1', '#'), '2', '#'), pUserId, 1)
-- 			ON DUPLICATE KEY UPDATE TotalUsed = TotalUsed + 1;


		END LOOP;
		CLOSE curParms;

		SELECT	ClientId 
		INTO	@ClientId
		FROM	User
		WHERE	UserId = pUserId;

		SET pRows = IFNULL(pRows, 10);
		SET pPage = IFNULL(pPage, 1);
		SET pPage = ((pPage - 1) * pRows);
		SET @Sep = CHAR(254);


		set @CodePosition = 2;
		call _x_SetClientTimeZone(@ClientId);
		Call _x_GetClientParam(@ClientId, 'CodePosition', @CodePosition);

		CALL _x_StringToRegEx(@InvoiceNo);


		SELECT
				Invoice.InvoiceId,
				_x_GetFormatedValue(Vendor.VendorNo, Vendor.VendorName, @CodePosition)		as Vendor,
				IFNULL(Invoice.InvoiceNo, '') 												AS InvoiceNo,
				Invoice.InvoiceTotal						 								AS InvoiceTotal,
				_x_GetInvoiceStatusName(Invoice.ApprovalStatusId) 							AS InvoiceStatus,
				Date(Invoice.InvoiceDate) 													AS InvoiceDate,
				Date(Invoice.PaymentDueDate) 												AS DueDate,
				Date(Invoice.NetTermDate) 													AS DiscountDate,
				Invoice.NetTermDiscount														AS DiscountAmount,
				Date(xps.PaymentDate) 														AS PaymentDate
--				IFNULL(DATE_FORMAT(PaymentStatus.ReceivedDate, "%b %e, %Y"), '') 			AS PaymentDate
		FROM Invoice
			inner JOIN Vendor				ON Invoice.VendorId = Vendor.VendorId
			left JOIN PaymentStatus			ON PaymentStatus.InvoiceId = Invoice.InvoiceId
			left join _x_PaymentStatus xps	on xps.Id = PaymentStatus.Id
		WHERE Invoice.ClientId = @ClientId
				AND Invoice.IsDeleted = FALSE
				AND Invoice.IsPaused = FALSE
				AND Regexp_Like(IFNULL(Invoice.InvoiceNo, ''), @InvoiceNo, 'mi')
		
				AND Invoice.InvoiceTotal BETWEEN IFNULL(@InvoiceAmount1, Invoice.InvoiceTotal) AND IFNULL(@InvoiceAmount2, Invoice.InvoiceTotal)
				AND IFNULL(Invoice.CompanyCode, '') = IFNULL(IFNULL(@CompanyCode, Invoice.CompanyCode), '')
		
				AND Invoice.VendorId = IFNULL(@Vendor, Invoice.VendorId)
				AND Invoice.InvoiceDate BETWEEN IFNULL(@InvoiceDate1, Invoice.InvoiceDate) AND IFNULL(@InvoiceDate2, Invoice.InvoiceDate)
		
				AND LOCATE(CONCAT(',', IFNULL(Invoice.ApprovalStatusId, -1), ','), CONCAT('%,', IFNULL(IFNULL(@Status, Invoice.ApprovalStatusId), -1), ',%')) > 0
				AND LOCATE(CONCAT(',', IFNULL(Invoice.VendorSiteId, -1), ','), CONCAT('%,', IFNULL(IFNULL(@Department, Invoice.VendorSiteId), -1), ',%')) > 0
		ORDER BY Invoice.InvoiceId DESC LIMIT pPage, pRows;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportActivate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportActivate`(IN pReportKey varchar(20), IN pisAllClients int, IN pRestrictToAdmins int, IN pConfirm varchar(100))
ThisProc:
	BEGIN

-- noformat

	IF IFNULL(pConfirm, 'oops') <> 'Confirm' THEN
		SELECT 'You must ''confirm'' this process';
		LEAVE ThisProc;
	END IF;
		
-- 	if NOT EXISTS (SELECT 1 FROM Alert WHERE Alertkey = pAlertKey AND isActive = 0) THEN
-- 		SELECT 'This alert is already active';
-- 		LEAVE ThisProc;
-- 	END IF;


	INSERT INTO ReportClient (ReportKey, ClientId, isActive)
		SELECT 	Report.ReportKey, Ids.ClientId, ifnull(pisAllClients, 0)
		FROM 	Report
				CROSS JOIN (SELECT DISTINCT ClientId FROM ClientRoles) Ids
				LEFT JOIN ReportClient rc 	ON rc.ReportKey = Report.ReportKey AND rc.ClientId = Ids.ClientId
		WHERE 	rc.ReportKey IS NULL
				AND Report.ReportKey = pReportKey
		ORDER BY 1,2;

	IF pRestrictToAdmins = 1 THEN
		INSERT INTO ReportClientRestrictions(ReportKey, ClientId, RoleId)
			SELECT	ReportClient.ReportKey, ReportClient.ClientId, ClientRoles.RoleId
			FROM	ReportClient
					inner JOIN ClientRoles	ON ClientRoles.ClientId = ReportClient.ClientId
												AND ClientRoles.isAdmin = 1
												AND ClientRoles.isInternal = 0
			WHERE 	ReportKey = pReportKey;
	end if;

			
	UPDATE Report set isActive = 1 WHERE ReportKey = pReportKey;


/*
 call _x_ReportActivate('R1', 'CONFIRM');
 call _x_ReportActivate('R2', 'CONFIRM');
 call _x_ReportActivate('R3', 'CONFIRM');
 call _x_ReportActivate('R4', 'CONFIRM');
 call _x_ReportActivate('R5', 'CONFIRM');
*/



	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportClientSchedule` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportClientSchedule`(
-- noformat
		inout pReportScheduleId 		int,
		in pUserId 						varchar(36),
		in pReportKey 					varchar(20),
		in pClientId 					int,
		in pReportName 					varchar(50),			-- Used if NOT scheduled
		in pisScheduled					bit,
		in pMailSubject 				varchar(100),
		in pMailBody	 				mediumtext,
		in pisHideRecipients			bit,
		in pFrequency 					varchar(10),
		in pFrequencyWeekly 			int,
		in pTimeOfTheDay				int,
		in pScheduleStartDate 			varchar(10),
		in pOutputFormat				int						-- 0=Tab delimited, 1=CSV,	2=HTML	
		)
ThisProc:
	BEGIN

	set pReportScheduleId = nullif(pReportScheduleId, 0); 	

	if pisScheduled = 0 THEN
		set pMailSubject		= null;
		set pMailBody			= null;
		set pisHideRecipients	= null;
		set pFrequency			= null;
		set pFrequencyWeekly	= null;
		set pTimeOfTheDay		= null;
		set pScheduleStartDate	= null;
		set pOutputFormat		= null;
	else
		set pReportName			= null;
	end if;

	if pReportScheduleId is null then
		insert into ReportClientSchedule (ReportKey, ClientId, ReportName, UserId, isScheduled, isActive, MailSubject, MailBody, isHideRecipients, Frequency, FrequencyWeekly, TimeOfTheDay, ScheduleStartDate, OutputFormat)
			values (pReportKey, pClientId, pReportName, pUserId, pisScheduled, 1, pMailSubject, pMailBody, pisHideRecipients, pFrequency, pFrequencyWeekly, pTimeOfTheDay, pScheduleStartDate, pOutputFormat);
		SET pReportScheduleId = LAST_INSERT_ID();
	else

		if not pOutputFormat in (0, 1, 2) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The output format is missing.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;	

		update ReportClientSchedule set
				ReportName			= pReportName,
				MailSubject			= pMailSubject,
				MailBody			= pMailBody,
				isHideRecipients	= pisHideRecipients,
				Frequency			= pFrequency,
				FrequencyWeekly		= pFrequencyWeekly,
				TimeOfTheDay		= pTimeOfTheDay,
				ScheduleStartDate	= pScheduleStartDate,
				OutputFormat 		= pOutputFormat
			where ReportScheduleId = pReportScheduleId
					and ReportKey = pReportKey
					and ClientId = pClientId;

	end if;
/*
set @ID = 0;
call _x_ReportClientSchedule(@Id, '18b61a24-d0a4-11e9-b055-22000a1f9f3d', 'R1', 88, 'Test', 1, 'The is the subject', 'This is the body', 0, 'Daily', null, 9, '7/1/2024', 0)
set @ID = 0;
call _x_ReportClientSchedule(@Id, '18b61a24-d0a4-11e9-b055-22000a1f9f3d', 'R1', 88, 'SAVE report1', 0, null, null, null, null, null, null, null, null);
*/

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportClientScheduleDelete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportClientScheduleDelete`(
-- noformat
		IN pReportScheduleId 	int,
		in pisModifyOnly 		tinyint
		)
ThisProc:
	BEGIN
	
	Delete from ReportClientScheduleFieldOutput	where ReportScheduleId = pReportScheduleId;
	Delete from ReportClientScheduleFieldValues	where ReportScheduleId = pReportScheduleId;
	Delete from ReportClientScheduleRecipients	where ReportScheduleId = pReportScheduleId;

	if ifnull(pisModifyOnly, 0) = 0 THEN
		Delete from ReportClientSchedule			where ReportScheduleId = pReportScheduleId;
	end if;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportClientScheduleEnable` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportClientScheduleEnable`(
-- noformat
		IN pReportScheduleId 	int,
		in pEnabled				tinyint
		)
ThisProc:
	BEGIN

	update ReportClientSchedule set isActive = ifnull(pEnabled, 0)
		where ReportScheduleId = pReportScheduleId;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportClientScheduleFieldOutput` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportClientScheduleFieldOutput`(IN pReportScheduleId int, IN pReportKey varchar(20), IN pField varchar(20), IN pLabel varchar(50), IN pFieldOrder int, IN pSortOrder int)
ThisProc:
	BEGIN
-- noformat

	insert into ReportClientScheduleFieldOutput(ReportScheduleId, ReportKey, Field, Label, FieldOrder, SortOrder)
			Value (pReportScheduleId, pReportKey, pField, pLabel, pFieldOrder, pSortOrder)
		ON DUPLICATE KEY update  Label = pLabel, FieldOrder = pFieldOrder, SortOrder = pSortOrder;

/*
*/

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportClientScheduleFieldValue` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportClientScheduleFieldValue`(IN pReportScheduleId int, IN pReportKey varchar(20), IN pField varchar(20), IN pValue mediumtext)
ThisProc:
	BEGIN
-- noformat

	insert into ReportClientScheduleFieldValues(ReportScheduleId, ReportKey, Field, Value)
			Value (pReportScheduleId, pReportKey,pField, pValue)
		ON DUPLICATE KEY update  Value = pValue;

/*
Call _x_ReportClientScheduleFieldValue(1, 'Department', 'The Department');
Call _x_ReportClientScheduleFieldValue(1, 'InvoiceAmount#', '100.00,750.98');
Call _x_ReportClientScheduleFieldValue(1, 'Comment', 'The comment I am looking for');
*/

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportClientScheduleRead` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportClientScheduleRead`(
-- noformat
		in pType	 					varchar(10),
		in pId 							int
		)
ThisProc:
	BEGIN

	SET SESSION group_concat_max_len = 1000000;
-- 
-- 	IF pType = 'List' THEN 
-- 		set @ClientId = pId;
-- 	ELSE
-- 		SELECT 	ClientId
-- 		into	@ClientId
-- 		FROM 	ReportClientSchedule	
-- 		WHERE	ReportScheduleId = pId;
-- 	end if;
-- 
-- 	call _x_SetClientTimeZone(@ClientId);

	if pType = 'List' then
		select	Case 
					when rcs.Frequency = 'Daily' then
							concat(rcs.Frequency, ' at ', _x_ReturnHHMMFromMin(rcs.TimeOfTheDay))

					when rcs.Frequency = 'Weekly' then
							concat(rcs.Frequency, ' at ', _x_ReturnHHMMFromMin(rcs.TimeOfTheDay),
									ltrim(
										concat(
												if(rcs.FrequencyWeekly & 64 = 64,	'Sun', ''),  
												if(rcs.FrequencyWeekly & 32 = 32,	' Mon', ''),  
												if(rcs.FrequencyWeekly & 16 = 16,	' Tue', ''),  
												if(rcs.FrequencyWeekly & 8 = 8,	' Wed', ''),  
												if(rcs.FrequencyWeekly & 4 = 4,	' Thu', ''),  
												if(rcs.FrequencyWeekly & 2 = 2,	' Fri', ''),  
												if(rcs.FrequencyWeekly & 1 = 1,	' Sat', '')
												)
											)
									)

					when rcs.Frequency = 'Monthly' THEN
							concat(DATE_FORMAT(rcs.ScheduleStartDate, "%D"), ' of the month at ', _x_ReturnHHMMFromMin(rcs.TimeOfTheDay))
					when rcs.Frequency = 'Quarterly' THEN
							Concat('Next execution/', 
										DATE_FORMAT(
											case WHEN rcs.ScheduleStartDate > now() THEN	
												rcs.ScheduleStartDate
											else								
												date_add(rcs.ScheduleStartDate, INTERVAL (TIMESTAMPDIFF(month, rcs.ScheduleStartDate, now()) + (3 - mod(TIMESTAMPDIFF(month, rcs.ScheduleStartDate, now()), 3))) month)
											END, '%b %d, %Y'),
									' at ', _x_ReturnHHMMFromMin(rcs.TimeOfTheDay))
					when rcs.Frequency = 'Yearly' then
							Concat('Next execution/', 
										DATE_FORMAT(
											case WHEN rcs.ScheduleStartDate > now() THEN	
												rcs.ScheduleStartDate
											else								
												date_add(rcs.ScheduleStartDate, INTERVAL (TIMESTAMPDIFF(year, rcs.ScheduleStartDate, now()) + (12 - mod(TIMESTAMPDIFF(month, rcs.ScheduleStartDate, now()), 12))) month)
											END, '%b %d, %Y'),
									' at ', _x_ReturnHHMMFromMin(rcs.TimeOfTheDay))
				end																								as Frequency,
				Report.ReportName,
				(	select	GROUP_CONCAT(Recipient order by SortOrder, Recipient SEPARATOR ';')
					from	(
							SELECT	cr.RoleName 																as Recipient, 1 as SortOrder
							FROM	ReportClientScheduleRecipients rcsr
									inner join ClientRoles cr	ON cr.RoleId = rcsr.RoleId
							WHERE	rcsr.ReportScheduleId = rcs.ReportScheduleId
							union all
							SELECT	concat(u.LastName,', ', u.Firstname)										as Recipient, 2 as SortOrder
							FROM	ReportClientScheduleRecipients rcsr
									inner join User u	ON u.UserId = rcsr.UserId
															and u.IsActive = 1
							WHERE	rcsr.ReportScheduleId = rcs.ReportScheduleId
							) data
				)																								as Recipients,
				rcs.isActive,
				rcs.ReportScheduleId,
				rcs.ReportKey,
				Report.StoredProc
				,rcs.ScheduleStartDate
		from	ReportClientSchedule rcs
				inner join Report			on Report.ReportKey = rcs.ReportKey
		where 	ClientId = pId
				and rcs.isScheduled = 1
		ORDER 	BY	
				case
					when rcs.Frequency = 'Daily' then
						now()

					when rcs.Frequency = 'Weekly' then
						Now()

					when rcs.Frequency = 'Monthly' THEN
						case WHEN rcs.ScheduleStartDate > now() THEN	
							rcs.ScheduleStartDate
						else								
							date_add(rcs.ScheduleStartDate, INTERVAL (TIMESTAMPDIFF(month, rcs.ScheduleStartDate, now()) + (1 - mod(TIMESTAMPDIFF(month, rcs.ScheduleStartDate, now()), 1))) month)
						END

					when rcs.Frequency = 'Quarterly' THEN
						case WHEN rcs.ScheduleStartDate > now() THEN	
							rcs.ScheduleStartDate
						else								
							date_add(rcs.ScheduleStartDate, INTERVAL (TIMESTAMPDIFF(month, rcs.ScheduleStartDate, now()) + (3 - mod(TIMESTAMPDIFF(month, rcs.ScheduleStartDate, now()), 3))) month)
						END
					when rcs.Frequency = 'Yearly' then
						case WHEN rcs.ScheduleStartDate > now() THEN	
							rcs.ScheduleStartDate
						else								
							date_add(rcs.ScheduleStartDate, INTERVAL (TIMESTAMPDIFF(year, rcs.ScheduleStartDate, now()) + (12 - mod(TIMESTAMPDIFF(month, rcs.ScheduleStartDate, now()), 12))) month)
						END
				end, rcs.Frequency, rcs.TimeOfTheDay;
		Leave ThisProc;
	end if;

	if pType = 'Read' then
		select * from ReportClientSchedule where ReportScheduleId = pId;
	end if;

/*
call _x_ReportClientScheduleRead('List', 88);
call _x_ReportClientScheduleRead('Read', 35);
*/

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportClientScheduleRecipient` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportClientScheduleRecipient`(in pType varchar(10), IN pReportScheduleId int, in pUserId varchar(36), in pRoleId int)
ThisProc:
	BEGIN

	select 	isInternal, rcs.ClientId
	into 	@isInternal, @ClientId
	from 	Report r
			inner join ReportClientSchedule rcs 			on rcs.ReportKey = r.ReportKey
	where 	rcs.ReportScheduleId = pReportScheduleId;



-- noformat
	if pType = 'Remove' THEN
		delete from ReportClientScheduleRecipients where ReportScheduleId = pReportScheduleId;
		Leave ThisProc;
	elseif pType = 'Add' THEN
		insert into ReportClientScheduleRecipients (ReportScheduleId, UserId, RoleId)
			values (pReportScheduleId, pUserId, pRoleId);
	elseif pType = 'ListUsers' THEN
		SELECT
				u.UserId,
				u.Username,
				CASE WHEN cur.UserId IS NULL THEN 0 ELSE 1 END AS IsAssigned,
				u.IsCloudxUser
		FROM	User u
				inner JOIN ReportClientScheduleRecipients cur	ON cur.UserId = u.UserId
																	and cur.ReportScheduleId = pReportScheduleId
		WHERE	u.ClientId = @ClientId
				AND (
						u.IsCloudxUser = @isInternal
					)
		ORDER BY 4 DESC, 3 DESC, 2;
	elseif pType = 'ListRoles' THEN
		SELECT
				cr.RoleId,
				cr.RoleName,
				CASE WHEN cur.RoleId IS NULL THEN 0 ELSE 1 END AS IsAssigned,
				isInternal
		FROM	ClientRoles cr
				LEFT JOIN ReportClientScheduleRecipients cur	ON cur.RoleId = cr.Roleid
																	and cur.ReportScheduleId = pReportScheduleId
		WHERE	cr.ClientId = @ClientId
				AND (
						cr.isInternal = @isInternal
					)
		ORDER BY 4 DESC, 3 DESC, 2;

	end if;

/*

call _x_ReportClientScheduleRecipient('Remove', 1, null, null);
call _x_ReportClientScheduleRecipient('Add', 1, null, 10);
call _x_ReportClientScheduleRecipient('Add', 1, null, 11);
call _x_ReportClientScheduleRecipient('Add', 1, '01b8668d-37d2-4e87-aef9-af4c3f18694e', null);
call _x_ReportClientScheduleRecipient('ListRoles', 1, null, null);
call _x_ReportClientScheduleRecipient('ListUsers', 1, null, null);
select * from ReportClientScheduleRecipients;


*/


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportDelete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportDelete`(IN pReportKey varchar(20), IN pConfirm varchar(100))
ThisProc:
	BEGIN

-- noformat

	IF IFNULL(pConfirm, 'oops') <> 'Confirm' THEN
		SELECT 'You must ''confirm'' this process';
		LEAVE ThisProc;
	END IF;
		

	delete FROM ReportRunRecipients					WHERE ReportRunId IN (SELECT ReportRunId FROM ReportRun data WHERE data.ReportKey = pReportKey);
	delete FROM ReportRun 							WHERE ReportKey = pReportKey;
	delete FROM ReportClientScheduleFieldOutput		WHERE ReportKey = pReportKey;
	delete FROM ReportClientScheduleFieldValues		WHERE ReportKey = pReportKey;
	delete FROM ReportClientScheduleRecipients		WHERE ReportScheduleId IN (SELECT ReportScheduleId FROM ReportClientSchedule data WHERE data.ReportKey = pReportKey);
	delete FROM ReportClientSchedule				WHERE ReportKey = pReportKey;
	delete FROM ReportClientRestrictions			WHERE ReportKey = pReportKey;
	delete FROM ReportClient						WHERE ReportKey = pReportKey;
	delete FROM ReportFields						WHERE ReportKey = pReportKey;
	delete FROM ReportFieldOutput					WHERE ReportKey = pReportKey;
	delete FROM Report								WHERE ReportKey = pReportKey;

-- call _x_ReportDelete( 'UserDetail', 'confirm');

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportFieldOutputRead` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportFieldOutputRead`(IN pReportKey varchar(20), in pReportScheduleId int)
ThisProc:
	BEGIN

-- noformat
	SELECT 	rfo.Field 											AS Field,
			ifnull(output.Label, rfo.Label) 					AS Label,
			ifNull(output.SortOrder, rfo.SortOrder)				AS SortOrder,
			CASE
				WHEN pReportScheduleId IS NULL THEN 1			
				WHEN output.Field is NULL THEN 0				
				ELSE 1 END										AS isShow
	FROM 	ReportFieldOutput rfo
			LEFT JOIN 	ReportClientScheduleFieldOutput output 	ON output.ReportKey = rfo.ReportKey
																	AND output.Field = rfo.Field
																	AND output.ReportScheduleId = pReportScheduleId
	WHERE 	rfo.ReportKey = pReportKey
			AND NOT rfo.Field LIKE '\_%'
	ORDER	BY CASE
					WHEN pReportScheduleId 	IS NULL THEN rfo.FieldOrder			
					WHEN output.FIELD 		is NULL THEN 9999	
					ELSE output.FieldOrder 	END, rfo.FieldOrder;

-- CALL _x_ReportFieldOutputRead('InvoiceStatus', null);
	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportFieldValues` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportFieldValues`(IN pUserId varchar(36), IN pReportType varchar(20), IN pReportField varchar(20), IN pDependency mediumtext, IN pCurrentValues mediumtext, IN pSearchString varchar(100))
ThisProc:
	BEGIN

-- noformat
		DECLARE DataLimit	int DEFAULT 20;

		SELECT	ClientID, ifnull(IsCloudxUser, 0)
		INTO	@ClientId, @IsCloudxUser
		FROM	User
		WHERE	UserId = pUserId;
		
		set @CodePosition = 2;
		Call _x_GetClientParam(@ClientId, 'CodePosition', @CodePosition);


		Call _x_StringToRows(pCurrentValues, ',');

		set pCurrentValues = NULLIF(pCurrentValues, '');


		CALL _x_StringToRegEx(pSearchString);

		IF pReportField = 'InvoiceType' THEN
			select 	InvoiceTypeName 											as Label, 
					InvoiceTypeName 											as Value,
					CASE WHEN ids.SearchValue IS NULL THEN 0 ELSE 1 end			as DefValue
			from 	ClientInvoiceType 
					LEFT JOIN tSearchList ids 	ON ids.SearchValue = InvoiceTypeName
			where	ClientId = @ClientId
					AND Regexp_Like(InvoiceTypeName, pSearchString, 'mi')
					AND NOT (
							pReportType = 'InvoiceAccrual' AND InvoiceTypeName in ('Archive', 'Statement')
							)
					AND (
							pCurrentValues IS NULL
							OR ids.SearchValue IS not null
						)
			order	by 1;
			LEAVE ThisProc;
		ELSEIF pReportField = 'POorNonPO' THEN
						SELECT	'PO' AS Label,		'1' AS VALUE,		CASE WHEN pCurrentValues = 1 			THEN 1 ELSE 0 END 	AS DefValue
			UNION ALL	SELECT 	'Non PO',			'0',				CASE WHEN pCurrentValues = 0 			THEN 1 ELSE 0 END;
			LEAVE ThisProc;
		ELSEIF pReportField = 'GLCode' THEN
			SET @DependencyValue = _x_AdvancedSearchFieldValuesDependency(pDependency, 'CompanyCode');
			SELECT
					concat(if(GLCode.isActive = 1 and cc.IsActive = 1, '', '*') 
							,_x_GetFormatedValue(GLCodeName, Desccription, @CodePosition))				as Label,
					GLCodeId 																			AS Value,
					CASE WHEN ids.SearchValue IS NULL THEN 0 ELSE 1 end 								AS DefValue
		   	FROM 	GLCode
		      		LEFT JOIN ClientCompany	cc		ON cc.Id = GLCode.ClientCompanyId
					LEFT JOIN tSearchList ids 		ON ids.SearchValue = GLCode.GLCodeId
		    WHERE 	GLCode.ClientId = @ClientId
					AND ifnull(cc.CompanyCode, -1) = IFNULL(@DependencyValue, ifnull(cc.CompanyCode, -1))
					AND ifnull(cc.IsActive, 1) = 1
					AND Regexp_Like(CONCAT(IFNULL(GLCode.Desccription, ''), '■', IFNULL(GLCode.GLCodeName, '')), pSearchString, 'mi')
					AND (
							pCurrentValues IS NULL
							OR ids.SearchValue IS not null
						)
			order 	by if(GLCode.isActive = 1 and cc.IsActive = 1, 1, 9), 1
			LIMIT 	0, DataLimit;
			LEAVE ThisProc;
		ELSEIF pReportField = 'InvoiceStatus' THEN
			SELECT	StateName  													AS Label,
					StateID  													AS VALUE,
					CASE WHEN ids.SearchValue IS NULL THEN 0 ELSE 1 end 		AS DefValue
			FROM 	InvoiceStatus
					LEFT JOIN tSearchList ids 	ON ids.SearchValue = StateID
			WHERE 	StateId IN (1,2,3,4,5,6,7,8,9,10,11,12,99)
			ORDER 	BY 1;
			LEAVE ThisProc;
		ELSEIF pReportField = 'WorkflowStep' THEN
			SELECT	aStep.StepName 															as Label,
					aStep.ApprovalStepId													AS Value,
					CASE WHEN ids.SearchValue IS NULL THEN 0 ELSE 1 end 					AS DefValue

			FROM 	ApprovalStep  AS aStep
					LEFT JOIN tSearchList ids 	ON ids.SearchValue = aStep.ApprovalStepId
			WHERE 	ClientId = @ClientId
					AND Regexp_Like(aStep.StepName, pSearchString, 'mi')
					AND (
							pCurrentValues IS NULL
							OR ids.SearchValue IS not null
						)
			order 	by 1
			LIMIT 	0, DataLimit;
		ELSEIF pReportField = 'CompanyCode' THEN
			SELECT	concat(if(isActive = 1, '', '*') 
							,_x_GetFormatedValue(CompanyCode, Description, @CodePosition))	as Label,
					CompanyCode 															AS Value,
					CASE WHEN ids.SearchValue IS NULL THEN 0 ELSE 1 end 					AS DefValue

			FROM 	ClientCompany cc
					LEFT JOIN tSearchList ids 	ON ids.SearchValue = CompanyCode
			WHERE 	ClientId = @ClientId
					AND Regexp_Like(CONCAT(IFNULL(cc.Description, ''), '■', IFNULL(cc.CompanyCode, '')), pSearchString, 'mi')
					AND (
							pCurrentValues IS NULL
							OR ids.SearchValue IS not null
						)
			order 	by if(isActive = 1, 1, 9), 1
			LIMIT 	0, DataLimit;
		ELSEIF pReportField = 'Vendor' THEN
			SET @DependencyValue = _x_AdvancedSearchFieldValuesDependency(pDependency, 'CompanyCode');
			SELECT
					CONCAT(		
								if(d.isActive = 1 and cc.IsActive = 1, '', '*'),
								_x_GetFormatedValue(d.VendorNo, d.VendorName, @CodePosition),
								ifnull(CASE WHEN @DependencyValue IS NULL THEN CONCAT(' (', cc.CompanyCode, ')') ELSE '' END, '')
							) 													AS Label,
					d.VendorId 													AS Value,
					CASE WHEN ids.SearchValue IS NULL THEN 0 ELSE 1 end 		AS DefValue
			FROM 	Vendor d
					left JOIN ClientCompany cc		ON cc.Id = d.ClientCompanyId
					LEFT JOIN tSearchList ids 		ON ids.SearchValue = VendorId
			WHERE 	d.ClientId = @ClientId
					AND ifnull(cc.CompanyCode, -1) = IFNULL(@DependencyValue, ifnull(cc.CompanyCode, -1))
					AND ifnull(cc.isActive, 1) = 1
					AND Regexp_Like(CONCAT(IFNULL(d.VendorName, ''), '■', IFNULL(d.VendorNo, '')), pSearchString, 'mi')
					AND (
							pCurrentValues IS NULL
							OR ids.SearchValue IS not null
						)
			ORDER 	BY if(d.isActive = 1 and cc.IsActive = 1, 1, 9), cc.CompanyCode, 1
			LIMIT 	0, DataLimit;
		ELSEIF pReportField = 'Department' THEN
			SET @DependencyValue = _x_AdvancedSearchFieldValuesDependency(pDependency, 'CompanyCode');
			SELECT
					CONCAT(
							if(d.isActive = 1 and cc.IsActive = 1, '', '*'),
							_x_GetFormatedValue(d.DepartmentName, d.Description, @CodePosition),
							CASE WHEN @DependencyValue IS NULL THEN CONCAT(' (', cc.CompanyCode, ')') ELSE '' END
							) 															AS Label,
					d.Id 																AS Value,
					CASE WHEN ids.SearchValue IS NULL THEN 0 ELSE 1 end 				AS DefValue
			FROM 	Department d	
					INNER JOIN ClientCompany cc		ON cc.Id = d.ClientCompanyId
					LEFT JOIN tSearchList ids 		ON ids.SearchValue = d.Id 
			WHERE 	d.ClientId = @ClientId
					AND cc.CompanyCode = IFNULL(@DependencyValue, cc.CompanyCode)
					AND cc.IsActive = 1
					AND Regexp_Like(CONCAT(IFNULL(d.Description, ''), '■', IFNULL(d.DepartmentName, '')), pSearchString, 'mi')
					AND (
							pCurrentValues IS NULL
							OR ids.SearchValue IS not null
						)
			ORDER 	BY if(d.isActive = 1 and cc.IsActive = 1, 1, 9), cc.CompanyCode, 1
			LIMIT 	0, DataLimit;
		ELSEIF pReportField = 'Approver' THEN
			SELECT 	CONCAT(if(isActive=1, '', '*'), LastName, ', ', FirstName) 			AS Label,
					CAST(UserId AS char(36))											AS Value,
					CASE WHEN ids.SearchValue IS NULL THEN 0 ELSE 1 end 				AS DefValue
			FROM	User
					LEFT JOIN tSearchList ids 	ON ids.SearchValue = CAST(UserId AS char(36))
			WHERE	ClientId = @ClientId
					and IsCloudxUser in (0, @IsCloudxUser)
					AND Regexp_Like(CONCAT(IFNULL(LastName, ''), '■', IFNULL(FirstName, '')), pSearchString, 'mi')
					AND (
							pCurrentValues IS NULL
							OR ids.SearchValue IS not null
						)
			order 	by IsActive Desc, Label
			LIMIT 	0, DataLimit;
			LEAVE ThisProc;
		ELSEIF pReportField like '%YearSEL' THEN
						SELECT	'This year' 	AS Label,				'ThisYear' AS VALUE,			CASE WHEN pCurrentValues = 'ThisYear'			THEN 1 ELSE 0 END 	AS DefValue
			UNION ALL	SELECT 	'Last year',							'LastYear',						CASE WHEN pCurrentValues = 'LastYear'			THEN 1 ELSE 0 END;
		ELSEIF pReportField like '%MonthSEL' THEN
						SELECT	'This month' 	AS Label,				'ThisMonth' AS VALUE,			CASE WHEN pCurrentValues = 'ThisMonth'			THEN 1 ELSE 0 END 	AS DefValue
			UNION ALL	SELECT 	'Last month',							'LastMonth',					CASE WHEN pCurrentValues = 'LastMonth'			THEN 1 ELSE 0 END;
		ELSEIF pReportField like '%DateSEL1' THEN
						SELECT	'Start of last year' 	AS Label,		'StartLastYear' AS VALUE,		CASE WHEN pCurrentValues = 'StartLastYear'		THEN 1 ELSE 0 END 	AS DefValue
			UNION ALL	SELECT 	'Start of this year',					'StartThisYear',				CASE WHEN pCurrentValues = 'StartThisYear'		THEN 1 ELSE 0 END
			UNION ALL	SELECT 	'Start of last month',					'StartLastMonth',				CASE WHEN pCurrentValues = 'StartLastMonth'		THEN 1 ELSE 0 END
			UNION ALL	SELECT 	'Start of this month',					'StartThisMonth',				CASE WHEN pCurrentValues = 'StartThisMonth'		THEN 1 ELSE 0 END
			UNION ALL	SELECT 	'Start of last week',					'StartLastWeek',				CASE WHEN pCurrentValues = 'StartLastWeek'		THEN 1 ELSE 0 END
			UNION ALL	SELECT 	'Start of this week',					'StartThisWeek',				CASE WHEN pCurrentValues = 'StartThisWeek'		THEN 1 ELSE 0 END
			UNION ALL	SELECT 	'Yesterday',							'Yesterday',					CASE WHEN pCurrentValues = 'Yesterday'			THEN 1 ELSE 0 END
			UNION ALL	SELECT 	'Today',								'Today',						CASE WHEN pCurrentValues = 'Today'				THEN 1 ELSE 0 END;
			LEAVE ThisProc;
		ELSEIF pReportField like '%DateSEL2' THEN
						SELECT	'End of last year' 	AS Label,			'EndLastYear' AS VALUE,			CASE WHEN pCurrentValues = 'EndLastYear'		THEN 1 ELSE 0 END 	AS DefValue
			UNION ALL	SELECT 	'End of this year',						'EndThisYear',					CASE WHEN pCurrentValues = 'EndThisYear'		THEN 1 ELSE 0 END
			UNION ALL	SELECT 	'End of last month',					'EndLastMonth',					CASE WHEN pCurrentValues = 'EndLastMonth'		THEN 1 ELSE 0 END
			UNION ALL	SELECT 	'End of this month',					'EndThisMonth',					CASE WHEN pCurrentValues = 'EndThisMonth'		THEN 1 ELSE 0 END
			UNION ALL	SELECT 	'End of last week',						'EndLastWeek',					CASE WHEN pCurrentValues = 'EndLastWeek'		THEN 1 ELSE 0 END
			UNION ALL	SELECT 	'End of this week',						'EndThisWeek',					CASE WHEN pCurrentValues = 'EndThisWeek'		THEN 1 ELSE 0 END
			UNION ALL	SELECT 	'Yesterday',							'Yesterday',					CASE WHEN pCurrentValues = 'Yesterday'			THEN 1 ELSE 0 END
			UNION ALL	SELECT 	'Today',								'Today',						CASE WHEN pCurrentValues = 'Today'				THEN 1 ELSE 0 END;
			LEAVE ThisProc;

		ELSEIF pReportField like 'YesNo%' THEN
						SELECT	'Yes' AS Label,		'1' AS VALUE,		CASE WHEN pCurrentValues = 1 			THEN 1 ELSE 0 END 	AS DefValue
			UNION ALL	SELECT 	'No',				'0',				CASE WHEN pCurrentValues = 0 			THEN 1 ELSE 0 END;
			LEAVE ThisProc;
		END IF;

	/*
	call _x_ReportFieldValues('01b8668d-37d2-4e87-aef9-af4c3f18694e', 'InvoiceStatus', 'Approver', null, null, 'jeff');
	call _x_ReportFieldValues('01b8668d-37d2-4e87-aef9-af4c3f18694e', 'InvoiceStatus', 'Approver', null, 'cc6c2580-86ad-4e3e-a078-1bdc065d8086', null);

	call _x_ReportFieldValues('01b8668d-37d2-4e87-aef9-af4c3f18694e', 'InvoiceStatus', 'Department', null, '34352,34619,34481', null);
	call _x_ReportFieldValues('01b8668d-37d2-4e87-aef9-af4c3f18694e', 'InvoiceStatus', 'InvoiceType', null, 'Archive,Invoice', null);

	call _x_ReportFieldValues('01b8668d-37d2-4e87-aef9-af4c3f18694e', 'InvoiceStatus', 'Department', null, null, 'sh');
	call _x_ReportFieldValues('01b8668d-37d2-4e87-aef9-af4c3f18694e', 'InvoiceStatus', 'Vendor', null, null, 'all');
	call _x_ReportFieldValues('01b8668d-37d2-4e87-aef9-af4c3f18694e', 'InvoiceStatus', 'PaymentDueDateSEL2', null, null, null);

	*/

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportGenerateGetScheduleInfo` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportGenerateGetScheduleInfo`(IN pReportScheduleId int, out pClientId int, out pReportKey varchar(20), out pCriteria text, out pReportFieldOutput text, out pUsers mediumtext, out pRoles mediumtext)
ThisProc:
	BEGIN	
-- noformat


	select 	ClientId, ReportKey
	into 	pClientId, pReportKey
	from 	ReportClientSchedule
	where 	ReportScheduleId = pReportScheduleId;

	select 	GROUP_CONCAT(Criteria SEPARATOR '■')
	into 	pCriteria
	from 	(select	case	when Field Like '%#' THEN
					case	when rcsfv.Value like ',%' THEN concat(replace(Field, '#', '2'), '■', substr(Value, 2, 9999))
							when rcsfv.Value like '%,' THEN concat(replace(Field, '#', '1'), '■', substr(Value, 2, 9999))
							else concat(replace(Field, '#', '1'), '■', replace(Value, ',', concat('■', replace(Field, '#', '2'), '■')))
							end
					else
						concat(Field, '■', Value) end	as Criteria
			from	ReportClientScheduleFieldValues rcsfv
			where 	ReportScheduleId = pReportScheduleId
			) Criterion;

	SELECT 	group_concat(concat(Field, '■',	Label, '■', FieldOrder,	'■', ifnull(SortOrder, '0')) order BY FieldOrder SEPARATOR '■')
	INTO 	pReportFieldOutput
	FROM 	ReportClientScheduleFieldOutput
	WHERE 	ReportScheduleId = pReportScheduleId;

	select 	GROUP_CONCAT(UserId SEPARATOR ','), GROUP_CONCAT(RoleId SEPARATOR ',')
	into 	pUsers, pRoles
	from 	ReportClientScheduleRecipients
	where 	ReportScheduleId = pReportScheduleId;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportGenerateSendToHistory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportGenerateSendToHistory`(in pClientId int, in pSource varchar(10), in pReportKey varchar(20), in pCriteria text, pFieldOutput text, pCount int, pTimeSeconds int, in pUsers mediumtext, in pRoles mediumtext, IN pOutputFormat int, pisBcc int)
ThisProc:
	BEGIN	
-- noformat

	drop TEMPORARY TABLE IF EXISTS MyRecipients;
	CREATE TEMPORARY TABLE IF NOT EXISTS MyRecipients AS (
		select 	UserId, Email
		from 	User 
		where 	ClientId = pClientId
				and isActive = 1
				and nullif(Email, '') is not NULL
				and (
						pUsers like concat('%', UserId, '%')
						or exists (select	1
									from 	ClientUserRoles cur
									where 	cur.UserId = User.UserId
											and concat(',', pRoles, ',') like concat('%,', RoleId, ',%'))
					)
		);



	-- Insert into History
	insert into ReportRun (ReportKey, ClientId, isScheduled, Criteria, FieldOutput, TotalRecords, RunSeconds)
		VALUES (pReportKey, pClientId, if(pSource = 'Run', 1,0), pCriteria, pFieldOutput, pCount, pTimeSeconds);

	set @ReportRunId = LAST_INSERT_ID();

	insert into ReportRunRecipients(ReportRunId, UserID, Email)
		select 	DISTINCT
				@ReportRunId,
				UserId,
				null
		from 	MyRecipients;

	select 	Distinct 
			Email, pisBcc as isBcc, pOutputFormat as OutputFormat
	from 	MyRecipients;	


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportGenerate_ApprovalWorkflow` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportGenerate_ApprovalWorkflow`(in pSource varchar(10), IN pReportScheduleId int, in pClientId int, in pReportKey varchar(20), pCriteria text, pReportFieldOutput text, in pUsers mediumtext, in pRoles mediumtext)
ThisProc:
	BEGIN	
-- noformat
	DECLARE done 			int DEFAULT FALSE;
	DECLARE DataValue 		Mediumtext;
	DECLARE curParms 		CURSOR FOR SELECT * FROM tSearchList;
	DECLARE CONTINUE 		HANDLER FOR NOT FOUND SET done = TRUE;

	SET SESSION group_concat_max_len = 1000000;

	if pSource = 'Schedule' then
		-- Get the schedule data
		call _x_ReportGenerateGetScheduleInfo(pReportScheduleId, pClientId, pReportKey, pCriteria, pReportFieldOutput, pUsers, pRoles);

		set @@SESSION.max_sp_recursion_depth=1;
		-- Recursive call
		call _x_ReportGenerate_ApprovalWorkflow('Run', pReportScheduleId, pClientId, pReportKey, pCriteria, pReportFieldOutput, pUsers, pRoles);
		Leave ThisProc;
	end if;

	SET @StartTime = UTC_TIMESTAMP();
	set @isBcc = null;
	set @OutputFormat = null;
	-- Take the Criteria and parse it to get the fields and their values
	if pSource = 'Generated' and pReportScheduleId is not null then
		select 	ReportClientSchedule.ClientId, ReportClientSchedule.OutputFormat, ReportClientSchedule.isHideRecipients
		into 	@ClientId, @OutputFormat, @isBcc
		from 	ReportClientSchedule
		where 	ReportScheduleId = pReportScheduleId;
	elseif pReportScheduleId is not null then -- This is executed if scheduled
		select 	ReportClientSchedule.OutputFormat, ReportClientSchedule.isHideRecipients
		into 	@OutputFormat, @isBcc
		from 	ReportClientSchedule
				inner join 	ReportClient 	on ReportClient.ReportKey = ReportClientSchedule.ReportKey
												and ReportClient.ClientId = ReportClientSchedule.ClientId
		where 	ReportScheduleId = pReportScheduleId
				and ReportClientSchedule.isActive = 1
				and ReportClient.isActive = 1;
		if @OutputFormat is null THEN
			set pClientId = NULL;
			set @ClientId = null;
		end if;
	end if;

	set @ClientId = ifnull(pClientId, @ClientId);

	if @ClientId is null THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This Report or Schedule is not active', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;

	set @CodePosition = 2;
	Call _x_GetClientParam(@ClientId, 'CodePosition', @CodePosition);
	call _x_SetClientTimeZone(@ClientId);

	-- ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** 
	--
	-- Temp Table with all field to output with their label and sort order
	--
	--
	drop TEMPORARY TABLE IF EXISTS myOutput;
	create TEMPORARY TABLE if not exists myOutput (
		Field 			varchar(50),
		Label 			varchar(50),
		FieldOrder 		int not null,
		SortOrder 		int null
		);

	SET done = false;
	CALL _x_StringToRows(pReportFieldOutput, '■');
	OPEN curParms;
readFields:
	LOOP
		FETCH curParms INTO DataValue;
		IF done THEN
			LEAVE readFields;
		END IF;
		SET @OutputField = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputLabel = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputFieldOrder = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputSortOrder = DataValue;
		insert INTO myOutput VALUES (@OutputField, @OutputLabel, @OutputFieldOrder, nullif(@OutputSortOrder, 0));

	END LOOP;
	CLOSE curParms;
	SET done= false;



	-- xref to get addition info including any internal ids for linking
	drop TEMPORARY TABLE IF EXISTS myReportFieldOutput;
	create TEMPORARY TABLE if not exists myReportFieldOutput (
		SELECT 	ReportFieldOutput.Field 												AS InternalField,	
				ifnull(myOutput.Label, ReportFieldOutput.Label)							AS Field,	
				ReportFieldOutput.Type,	
				if(ReportFieldOutput.Field LIKE '\_%', -1, ReportFieldOutput.Width)		AS Width,	
				ReportFieldOutput.LinkPage,	
				ReportFieldOutput.LinkPageValue,
				ifnull(myOutput.FieldOrder, ReportFieldOutput.FieldOrder)				AS FieldOrder,
				ifnull(myOutput.SortOrder, ReportFieldOutput.SortOrder)					AS SortOrder
		FROM 	ReportFieldOutput
				left JOIN myOutput		ON myOutput.Field = ReportFieldOutput.Field
		WHERE 	ReportKey = pReportKey
				AND (myOutput.Field is not null OR ReportFieldOutput.Field LIKE '\_%')
		ORDER 	BY SortOrder
		);

	SELECT 	GROUP_CONCAT(InternalField order BY FieldOrder SEPARATOR ',')
	INTO 	@ReportOutputFields
	FROM 	myReportFieldOutput
	WHERE 	NOT InternalField LIKE '\_%';

	-- Generate the Fields for the select: VendorName as `The Vendor`, InvoiceNo as `Inv #`
	SELECT 	GROUP_CONCAT(concat(InternalField, ' as ', '`', Field , '`') order BY FieldOrder SEPARATOR ',')
	INTO 	@SQLSelectFields
	FROM 	myReportFieldOutput;

	-- Build the order by clause any absolute number is treated as 1st 2nd 3rd etc, but -2, for example means descending
	SELECT 	GROUP_CONCAT(concat(InternalField, if(SortOrder>0,' ASC', ' DESC')) order BY abs(SortOrder) SEPARATOR ',')
	INTO 	@SQLSelectOrderBy
	FROM 	myReportFieldOutput
	WHERE 	nullif(SortOrder, 0) is not null;
	SET @SQLSelectOrderBy = ifnull(@SQLSelectOrderBy, '1, 2');

	-- the the select the will be run at the end.  Asuu ing the final output in a Temp Tbale called 
	SET @SQLSelect = Concat('Select ', @SQLSelectFields, ' from myReportData order by ', @SQLSelectOrderBy);

	SELECT Field, Type, Width, LinkPage, LinkPageValue from myReportFieldOutput WHERE Width <> -1 ORDER by FieldOrder;












	-- ******************************************************************************************
	--
	--
	-- 									Generate the report
	-- 	0. Change the report NAME IN 3 places in this SP
	-- 		a. Drop PROC
	-- 		b, Create PROC
	-- 		c. Recursive Call
	-- 	1. Create the QUERY (efficient SIMPLE AND only 1 SQL STATEMENT)
	-- 	2. Put the QUERY WHERE myReportData IS placed.  It is possible other temp tables are needed TO spead up the processing
	-- 		a. The fields should be properly set allowing the dev to dientify the list of fields available for the interface
	-- 		b. Add the criteria to the already existing where clause, this will allow the dev to identifying all the report criteria
	-- 	3. Adjust the loop to retrieve all the criteria
	-- 	4. Create the entries in the following tables to allow the interface to properly react with it.
	-- 		a.	Table:Report			This lists the report name and the the SP to call
	-- 		b.	Table:ReportFields		This is the list of all fields the criteria
	-- 		c.	Table:ReportFieldOutput	This are the output field names
	-- 		d.	Make sure the _x_ReportFieldValues handles any new fields (if it does not make changes to the SP and before activating, musk publish new _x_ReportFieldValues
	-- 		e.  Activate the report for all clients
	--
	--   	f. enjoy the ride
	--
	-- ******************************************************************************************

	SET @Approver = NULL;
	SET @Vendor = NULL;
	SET @Department = NULL;
	SET @Company = NULL;
	SET @Step = NULL;

	CALL _x_StringToRows(pCriteria, '■');

	IF MOD((SELECT COUNT(*) FROM tSearchList), 2) <> 0 THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Improperly coded string; Parameters not paired.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;

	OPEN curParms;
readParms:
	LOOP
		FETCH curParms INTO DataValue;
		IF done THEN
			LEAVE readParms;
		END IF;
		SET @DataValue = DataValue;
		IF DataValue = 'Approver' THEN
			FETCH curParms INTO DataValue;
			SET @Approver = DataValue;
		ELSEIF DataValue = 'Vendor' THEN
			FETCH curParms INTO DataValue;
			SET @Vendor = DataValue;
		ELSEIF DataValue = 'Department' THEN
			FETCH curParms INTO DataValue;
			SET @Department = DataValue;
		ELSEIF DataValue = 'CompanyCode' THEN
			FETCH curParms INTO DataValue;
			SET @Company = DataValue;
		ELSEIF DataValue = 'WorkflowStep' THEN
			FETCH curParms INTO DataValue;
			SET @Step = DataValue;
		ELSE
			SET @ErrMsg = CONCAT('Improperly coded string; Unknown keyword [', DataValue, '].');
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @ErrMsg, MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;

	END LOOP;
	CLOSE curParms;


	drop TEMPORARY TABLE IF EXISTS myApprovers1;
	CREATE TEMPORARY TABLE IF NOT EXISTS myApprovers1 AS (
			select 	UserId
			from	User
			where 	ClientId = @ClientId
					and @Approver Like concat('%', UserId, '%')
		);

	drop TEMPORARY TABLE IF EXISTS myVendors1;
	CREATE TEMPORARY TABLE IF NOT EXISTS myVendors1 AS (
			select 	VendorId
			from	Vendor
			where 	ClientId = @ClientId
					and concat(',', @Vendor, ',') Like concat('%,', VendorId, ',%') 
		);

	drop TEMPORARY TABLE IF EXISTS myApprovers2;
	CREATE TEMPORARY TABLE IF NOT EXISTS myApprovers2 AS (
			SELECT UserId FROM myApprovers1
		);

	drop TEMPORARY TABLE IF EXISTS myVendors2;
	CREATE TEMPORARY TABLE IF NOT EXISTS myVendors2 AS (
			SELECT VendorId FROM myVendors1
		);






	-- Get the vendor and department info
	drop TEMPORARY TABLE IF EXISTS myWorkflowSteps;
	create TEMPORARY TABLE if not exists myWorkflowSteps (
		SELECT 	Data.ApprovalSubStepId							AS ApprovalSubStepId,
				Data.UserId										AS UserId,
				Data.VendorId									AS VendorId,
				Data.DepartmentId								AS DepartmentId
		FROM 	ApprovalSubStepUserVendorDepartment Data
				inner JOIN User u	ON u.UserId 	= Data.UserId
		WHERE 	u.IsActive = 1
				AND u.IsCloudxUser = 0
				AND u.ClientId = @ClientId
				AND (
					@Vendor is NULL
					or (
							@Vendor is not NULL
							and exists (select	1 
										from	myVendors1 chk1
										where 	chk1.VendorId = Data.VendorId
										)
						))
				AND (
					@Approver is NULL
					or (
							@Approver is not NULL
							and exists (select	1 
										from	myApprovers1 chk2
										where 	chk2.UserId = Data.UserId
										)
						))
		UNION ALL
		SELECT 	Data.ApprovalSubStepId							AS ApprovalSubStepId,
				Data.UserId										AS UserId,
				Data.VendorId									AS VendorId,
				NULL											AS DepartmentId
		FROM 	ApprovalSubStepUserVendor Data
				inner JOIN User u	ON u.UserId 	= Data.UserId
		WHERE 	u.IsActive = 1
				AND u.IsCloudxUser = 0
				AND u.ClientId = @ClientId
				AND (
					@Vendor is NULL
					or (
							@Vendor is not NULL
							and exists (select	1 
										from	myVendors2 chk1
										where 	chk1.VendorId = Data.VendorId
										)
						))
				AND (
					@Approver is NULL
					or (
							@Approver is not NULL
							and exists (select	1 
										from	myApprovers2 chk2
										where 	chk2.UserId = Data.UserId
										)
						))
		);


 	drop TEMPORARY TABLE IF EXISTS myReportData;
 	CREATE TEMPORARY TABLE IF NOT EXISTS myReportData AS (
		SELECT	DISTINCT
				CONCAT(u.LastName, ', ', FirstName) 								AS Approver,
				_x_GetFormatedValue(cc.CompanyCode, cc.Description, @CodePosition) 	AS Company,
				sa.StepName															AS Step,
				ass.SubStepName														AS SubStep,
				_x_GetFormatedValue(v.VendorNo, v.VendorName, @CodePosition) 		AS Vendor,
				_x_GetFormatedValue(d.DepartmentName, d.Description, @CodePosition) AS Location
		FROM	myWorkflowSteps wfSteps
				inner JOIN User u							ON u.UserId 					= wfSteps.UserId
				inner JOIN ApprovalSubStep ass				ON ass.ApprovalSubStepId 		= wfSteps.ApprovalSubStepId
				INNER JOIN ApprovalSubStepUserFilter filter	ON filter.ApprovalSubStepId 	= ass.ApprovalSubStepId
				inner JOIN ApprovalStep sa					ON sa.ApprovalStepId 			= ass.ApprovalStepId
				inner JOIN Vendor v							ON v.VendorId 					= wfSteps.VendorId
				left JOIN ClientCompany cc					ON cc.Id 						= sa.ClientCompanyId
				LEFT JOIN Department AS d					ON wfSteps.DepartmentId 		= d.Id
		WHERE	u.ClientId 									= @ClientId
				AND u.IsCloudxUser 							= 0
				AND u.isActive 								= 1
				AND v.IsActive 								= 1
				AND ifnull(cc.IsActive, 1) 					= 1
				AND ifnull(d.IsActive, 1) 					= 1
 				AND cc.CompanyCode							= IFNULL(@Company, cc.CompanyCode)
 				AND sa.ApprovalStepId  						= IFNULL(@Step, sa.ApprovalStepId)
 				AND ifnull(wfSteps.DepartmentId, -1) 		= ifnull(IFNULL(@Department, wfSteps.DepartmentId), -1)
		);

/*

	call _x_ReportDelete ('ApprovalWorkflow', 'Confirm');

	insert into Report (ReportKey, 				ReportName, 			ReportGrouping, 		SortOrderGrouping, 	SortOrderName, 	isInternal, StoredProc) 
				values ('ApprovalWorkflow', 	'Approval workflow', 	'Administration',		99,					1, 				0,			'_x_ReportGenerate_ApprovalWorkflow');


	Insert into ReportFields (	ReportKey,				Field,					Label, 					DataType, 			FieldOrder,	DependencyField,	ShowOn)
					SELECT 		'ApprovalWorkflow', 	'WorkflowStep', 		'Step', 				'Select', 			10,			NULL,				0
		UNION ALL	SELECT 		'ApprovalWorkflow', 	'Approver', 			'Approver', 			'MultiSelect', 		20,			NULL,				0
		UNION ALL	SELECT 		'ApprovalWorkflow', 	'CompanyCode', 			'Company/Store',		'Select', 			30,			NULL,				0
		UNION ALL	SELECT 		'ApprovalWorkflow', 	'Department', 			'Department', 			'Select', 			40,			'CompanyCode',		0
		union all	SELECT 		'ApprovalWorkflow',	 	'Vendor', 				'Vendor', 				'MultiSelect',	 	50,			'CompanyCode',		0;


	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)		values ('ApprovalWorkflow', 	'Company', 			'Company/Store',	'Text',		160, 1, 1);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)		values ('ApprovalWorkflow', 	'Location',			'Location',			'Text',		200, 2, 2);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)		values ('ApprovalWorkflow', 	'Step', 			'Step',				'Text',		200, 3, 3);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)		values ('ApprovalWorkflow', 	'SubStep', 			'Sub step',			'Text',		200, 4, 4);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)		values ('ApprovalWorkflow', 	'Approver',			'Approver',			'Text',		200, 5, 5);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)		values ('ApprovalWorkflow', 	'Vendor', 			'Vendor',			'Text',		200, 6, 6);


	-- Make sure the _x_ReportFieldValues handles any new fields

	call _x_ReportActivate ('ApprovalWorkflow', 1, 1, 'Confirm');

*/








	-- ******************************************************************************************
	-- 										END OF REPORT
	-- ******************************************************************************************
    PREPARE stmt FROM @SQLSelect;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;

	SELECT count(*) INTO @RecordCount FROM myReportData;
	set @TotalTime = time_to_Sec(timediff(UTC_TIMESTAMP(), @StartTime));


	-- Record History info
	call _x_ReportGenerateSendToHistory(@ClientId, pSource, pReportKey, pCriteria, @ReportOutputFields, @RecordCount, @TotalTime, pUsers, pRoles, @OutputFormat, @isBcc);


/*

-- call _x_ReportGenerate_InvoiceStatus('Schedule', 50, null, null, null, null, null); 
call _x_ReportGenerate_InvoiceStatus('Generated', null, 88, 'InvoiceStatus', 'ScanDate1■2023-11-01■ScanDate2■2023-12-31', 'Company■myLabelCompany/Store■100■0■VendorName■myLabelVendor Name■2■0■VendorNo■myLabelVendor No■3■0■InvoiceNo■myLabelInvoice No■4■0■InvoiceDate■myLabelDate■5■0■InvoiceType■myLabelType■6■0■InvoiceTotal■myLabelTotal■7■0■', '022b30f2-dddd-49b8-a4aa-e2045d704f29', null);

*/


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportGenerate_ApproverVolume` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportGenerate_ApproverVolume`(in pSource varchar(10), IN pReportScheduleId int, in pClientId int, in pReportKey varchar(20), pCriteria text, pReportFieldOutput text, in pUsers mediumtext, in pRoles mediumtext)
ThisProc:
	BEGIN	
-- noformat
	DECLARE done 			int DEFAULT FALSE;
	DECLARE DataValue 		Mediumtext;
	DECLARE curParms 		CURSOR FOR SELECT * FROM tSearchList;
	DECLARE CONTINUE 		HANDLER FOR NOT FOUND SET done = TRUE;


	SET SESSION group_concat_max_len = 1000000;

	if pSource = 'Schedule' then
		-- Get the schedule data
		call _x_ReportGenerateGetScheduleInfo(pReportScheduleId, pClientId, pReportKey, pCriteria, pReportFieldOutput, pUsers, pRoles);

		set @@SESSION.max_sp_recursion_depth=1;
		call _x_ReportGenerate_ApproverVolume('Run', pReportScheduleId, pClientId, pReportKey, pCriteria, pReportFieldOutput, pUsers, pRoles);
		Leave ThisProc;
	end if;

	SET @StartTime = UTC_TIMESTAMP();
	set @isBcc = null;
	set @OutputFormat = null;
	-- Take the Criteria and parse it to get the fields and their values
	if pSource = 'Generated' and pReportScheduleId is not null then
		select 	ReportClientSchedule.ClientId, ReportClientSchedule.OutputFormat, ReportClientSchedule.isHideRecipients
		into 	@ClientId, @OutputFormat, @isBcc
		from 	ReportClientSchedule
		where 	ReportScheduleId = pReportScheduleId;
	elseif pReportScheduleId is not null then -- This is executed if scheduled
		select 	ReportClientSchedule.OutputFormat, ReportClientSchedule.isHideRecipients
		into 	@OutputFormat, @isBcc
		from 	ReportClientSchedule
				inner join 	ReportClient 	on ReportClient.ReportKey = ReportClientSchedule.ReportKey
												and ReportClient.ClientId = ReportClientSchedule.ClientId
		where 	ReportScheduleId = pReportScheduleId
				and ReportClientSchedule.isActive = 1
				and ReportClient.isActive = 1;
		if @OutputFormat is null THEN
			set pClientId = NULL;
			set @ClientId = null;
		end if;
	end if;

	set @ClientId = ifnull(pClientId, @ClientId);

	if @ClientId is null THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This Report or Schedule is not active', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;
	
	set @CodePosition = 2;
	Call _x_GetClientParam(@ClientId, 'CodePosition', @CodePosition);
	call _x_SetClientTimeZone(@ClientId);


	-- ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** 
	--
	-- Temp Table with all field to output with their label and sort order
	--
	--
	drop TEMPORARY TABLE IF EXISTS myOutput;
	create TEMPORARY TABLE if not exists myOutput (
		Field 			varchar(50),
		Label 			varchar(50),
		FieldOrder 		int not null,
		SortOrder 		int null
		);

	SET Done = false;
	CALL _x_StringToRows(pReportFieldOutput, '■');
	OPEN curParms;
readFields:
	LOOP
		FETCH curParms INTO DataValue;
		IF done THEN
			LEAVE readFields;
		END IF;
		SET @OutputField = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputLabel = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputFieldOrder = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputSortOrder = DataValue;
		insert INTO myOutput VALUES (@OutputField, @OutputLabel, @OutputFieldOrder, nullif(@OutputSortOrder, 0));

	END LOOP;
	CLOSE curParms;
	SET done= false;

	-- xref to get addition info including any internal ids for linking
	drop TEMPORARY TABLE IF EXISTS myReportFieldOutput;
	create TEMPORARY TABLE if not exists myReportFieldOutput (
		SELECT 	ReportFieldOutput.Field 												AS InternalField,	
				ifnull(myOutput.Label, ReportFieldOutput.Label)							AS Field,	
				ReportFieldOutput.Type,	
				if(ReportFieldOutput.Field LIKE '\_%', -1, ReportFieldOutput.Width)		AS Width,	
				ReportFieldOutput.LinkPage,	
				ReportFieldOutput.LinkPageValue,
				ifnull(myOutput.FieldOrder, ReportFieldOutput.FieldOrder)				AS FieldOrder,
				ifnull(myOutput.SortOrder, ReportFieldOutput.SortOrder)					AS SortOrder
		FROM 	ReportFieldOutput
				left JOIN myOutput		ON myOutput.Field = ReportFieldOutput.Field
		WHERE 	ReportKey = pReportKey
				AND (myOutput.Field is not null OR ReportFieldOutput.Field LIKE '\_%')
		ORDER 	BY SortOrder
		);

	SELECT 	GROUP_CONCAT(InternalField order BY FieldOrder SEPARATOR ',')
	INTO 	@ReportOutputFields
	FROM 	myReportFieldOutput
	WHERE 	NOT InternalField LIKE '\_%';

	-- Generate the Fields for the select: VendorName as `The Vendor`, InvoiceNo as `Inv #`
	SELECT 	GROUP_CONCAT(concat(InternalField, ' as ', '`', Field , '`') order BY FieldOrder SEPARATOR ',')
	INTO 	@SQLSelectFields
	FROM 	myReportFieldOutput;

	-- Build the order by clause any absolute number is treated as 1st 2nd 3rd etc, but -2, for example means descending
	SELECT 	GROUP_CONCAT(concat(InternalField, if(SortOrder>0,' ASC', ' DESC')) order BY abs(SortOrder) SEPARATOR ',')
	INTO 	@SQLSelectOrderBy
	FROM 	myReportFieldOutput
	WHERE 	nullif(SortOrder, 0) is not null;
	SET @SQLSelectOrderBy = ifnull(@SQLSelectOrderBy, '1, 2');

	-- the the select the will be run at the end.  Asuu ing the final output in a Temp Tbale called 
	SET @SQLSelect = Concat('Select ', @SQLSelectFields, ' from myReportData order by ', @SQLSelectOrderBy);

	SELECT Field, Type, Width, LinkPage, LinkPageValue from myReportFieldOutput WHERE Width <> -1 ORDER by FieldOrder;











	-- ******************************************************************************************
	--
	--
	-- 									Generate the report
	--
	--
	-- ******************************************************************************************

	set @Year = null;
	set @Month = null;
	SET @Approver = null;

	CALL _x_StringToRows(pCriteria, '■');

	IF MOD((SELECT COUNT(*) FROM tSearchList), 2) <> 0 THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Improperly coded string; Parameters not paired.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;

	OPEN curParms;
readParms:
	LOOP
		FETCH curParms INTO DataValue;
		IF done THEN
			LEAVE readParms;
		END IF;
		SET @DataValue = DataValue;
		IF DataValue = 'Approver' THEN
			FETCH curParms INTO DataValue;
			SET @Approver = DataValue;
		ELSEIF DataValue = 'Year' THEN
			FETCH curParms INTO DataValue;
			set @Year = DataValue;
		ELSEIF DataValue = 'Month' THEN
			FETCH curParms INTO DataValue;
			set @Month = DataValue;
		ELSEIF DataValue = 'YearSEL' THEN
			FETCH curParms INTO DataValue;
			set @Year = _x_ReturnReportDateKeyword(DataValue);	-- This returns the last day of the year selected
		ELSEIF DataValue = 'MonthSEL' THEN
			FETCH curParms INTO DataValue;
			set @Month = _x_ReturnReportDateKeyword(DataValue);	-- This returns the last day of the yea/month selected
		ELSE
			SET @ErrMsg = CONCAT('Improperly coded string; Unknown keyword [', DataValue, '].');
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @ErrMsg, MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;

	END LOOP;
	CLOSE curParms;


	if day(@Month) is not null or day(@Year) is not null THEN 
		if day(@Year) is not null then 
			set @Year = year(@Year);
		end if;
		if day(@Month) is not null then 
			set @Year = ifnull(@Year, Year(@Month));
			set @Month = Month(@Month); 
		end if;
	end if;


	drop TEMPORARY TABLE IF EXISTS myApprovers;
	CREATE TEMPORARY TABLE IF NOT EXISTS myApprovers AS (
			select 	UserId
			from	User
			where 	ClientId = @ClientId
					and @Approver Like concat('%', UserId, '%')
		);





 	drop TEMPORARY TABLE IF EXISTS myReportData;
 	CREATE TEMPORARY TABLE IF NOT EXISTS myReportData AS (
		SELECT	Employee,
				sum(cnt) 							As Total,
				sum(if(Month=1, cnt, 0))			as January,
				sum(if(Month=2, cnt, 0))			as February,
				sum(if(Month=3, cnt, 0))			as March,
				sum(if(Month=4, cnt, 0))			as April,
				sum(if(Month=5, cnt, 0))			as May,
				sum(if(Month=6, cnt, 0))			as June,
				sum(if(Month=7, cnt, 0))			as July,
				sum(if(Month=8, cnt, 0))			as August,
				sum(if(Month=9, cnt, 0))			as September,
				sum(if(Month=10, cnt, 0))			as October,
				sum(if(Month=11, cnt, 0))			as November,
				sum(if(Month=12, cnt, 0))			as December
		from 	(
					select	concat(LastName, ', ', FirstName) 						as Employee,
							Month(ActionDate)										as Month,
							count(*)												as Cnt
					from 	InvoiceHistory ih
							Inner join User 	on User.UserId = ih.ActorId 			
							WHERE 	User.ClientId = @ClientId
									and Year(ActionDate) = @Year
									and Month(ActionDate) = ifnull(@Month, Month(ActionDate))
									and (
											(Action in ('Approve', 'Reject', 'Request')				and FIELD = 'Invoice Status')
											OR (Action in ('Delegation', 'Delegate')				and FIELD = 'Approvers')
										)
									and (
											@Approver is NULL
											or (
													@Approver is not NULL
													and exists (select 1 from myApprovers where UserId = ActorId)
												)
										)
					group 	by Employee, Month
				) Details
		GROUP 	BY Employee
	);








	-- ******************************************************************************************
	-- 										END OF REPORT
	-- ******************************************************************************************
    PREPARE stmt FROM @SQLSelect;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;

	SELECT count(*) INTO @RecordCount FROM myReportData;
	set @TotalTime = time_to_Sec(timediff(UTC_TIMESTAMP(), @StartTime));


	-- Record History info
	call _x_ReportGenerateSendToHistory(@ClientId, pSource, pReportKey, pCriteria, @ReportOutputFields, @RecordCount, @TotalTime, pUsers, pRoles, @OutputFormat, @isBcc);


/*
call _x_ReportGenerate_ApproverVolume('Generated', null, 88, 'ApproverVolume', 'YearSEL■LastYear■Approver■01b8668d-37d2-4e87-aef9-af4c3f18694e', '01b8668d-37d2-4e87-aef9-af4c3f18694e', null);
*/


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportGenerate_DocumentProcessing` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportGenerate_DocumentProcessing`(in pSource varchar(10), IN pReportScheduleId int, in pClientId int, in pReportKey varchar(20), pCriteria text, pReportFieldOutput text, in pUsers mediumtext, in pRoles mediumtext)
ThisProc:
	BEGIN	
-- noformat
	DECLARE done 			int DEFAULT FALSE;
	DECLARE DataValue 		Mediumtext;
	DECLARE curParms 		CURSOR FOR SELECT * FROM tSearchList;
	DECLARE CONTINUE 		HANDLER FOR NOT FOUND SET done = TRUE;


	SET SESSION group_concat_max_len = 1000000;

	if pSource = 'Schedule' then
		-- Get the schedule data
		call _x_ReportGenerateGetScheduleInfo(pReportScheduleId, pClientId, pReportKey, pCriteria, pReportFieldOutput, pUsers, pRoles);

		set @@SESSION.max_sp_recursion_depth=1;
		call _x_ReportGenerate_DocumentProcessing('Run', pReportScheduleId, pClientId, pReportKey, pCriteria, pReportFieldOutput, pUsers, pRoles);
		Leave ThisProc;
	end if;

	SET @StartTime = UTC_TIMESTAMP();
	set @isBcc = null;
	set @OutputFormat = null;
	-- Take the Criteria and parse it to get the fields and their values
	if pSource = 'Generated' and pReportScheduleId is not null then
		select 	ReportClientSchedule.ClientId, ReportClientSchedule.OutputFormat, ReportClientSchedule.isHideRecipients
		into 	@ClientId, @OutputFormat, @isBcc
		from 	ReportClientSchedule
		where 	ReportScheduleId = pReportScheduleId;
	elseif pReportScheduleId is not null then -- This is executed if scheduled
		select 	ReportClientSchedule.OutputFormat, ReportClientSchedule.isHideRecipients
		into 	@OutputFormat, @isBcc
		from 	ReportClientSchedule
				inner join 	ReportClient 	on ReportClient.ReportKey = ReportClientSchedule.ReportKey
												and ReportClient.ClientId = ReportClientSchedule.ClientId
		where 	ReportScheduleId = pReportScheduleId
				and ReportClientSchedule.isActive = 1
				and ReportClient.isActive = 1;
		if @OutputFormat is null THEN
			set pClientId = NULL;
			set @ClientId = null;
		end if;
	end if;

	set @ClientId = ifnull(pClientId, @ClientId);

	if @ClientId is null THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This Report or Schedule is not active', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;
	
	set @CodePosition = 2;
	Call _x_GetClientParam(@ClientId, 'CodePosition', @CodePosition);
	call _x_SetClientTimeZone(@ClientId);




	-- ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** 
	--
	-- Temp Table with all field to output with their label and sort order
	--
	--
	drop TEMPORARY TABLE IF EXISTS myOutput;
	create TEMPORARY TABLE if not exists myOutput (
		Field 			varchar(50),
		Label 			varchar(50),
		FieldOrder 		int not null,
		SortOrder 		int null
		);

	SET Done = false;
	CALL _x_StringToRows(pReportFieldOutput, '■');
	OPEN curParms;
readFields:
	LOOP
		FETCH curParms INTO DataValue;
		IF done THEN
			LEAVE readFields;
		END IF;
		SET @OutputField = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputLabel = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputFieldOrder = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputSortOrder = DataValue;
		insert INTO myOutput VALUES (@OutputField, @OutputLabel, @OutputFieldOrder, nullif(@OutputSortOrder, 0));

	END LOOP;
	CLOSE curParms;
	SET done= false;

	-- xref to get addition info including any internal ids for linking
	drop TEMPORARY TABLE IF EXISTS myReportFieldOutput;
	create TEMPORARY TABLE if not exists myReportFieldOutput (
		SELECT 	ReportFieldOutput.Field 												AS InternalField,	
				ifnull(myOutput.Label, ReportFieldOutput.Label)							AS Field,	
				ReportFieldOutput.Type,	
				if(ReportFieldOutput.Field LIKE '\_%', -1, ReportFieldOutput.Width)		AS Width,	
				ReportFieldOutput.LinkPage,	
				ReportFieldOutput.LinkPageValue,
				ifnull(myOutput.FieldOrder, ReportFieldOutput.FieldOrder)				AS FieldOrder,
				ifnull(myOutput.SortOrder, ReportFieldOutput.SortOrder)					AS SortOrder
		FROM 	ReportFieldOutput
				left JOIN myOutput		ON myOutput.Field = ReportFieldOutput.Field
		WHERE 	ReportKey = pReportKey
				AND (myOutput.Field is not null OR ReportFieldOutput.Field LIKE '\_%')
		ORDER 	BY SortOrder
		);

	SELECT 	GROUP_CONCAT(InternalField order BY FieldOrder SEPARATOR ',')
	INTO 	@ReportOutputFields
	FROM 	myReportFieldOutput
	WHERE 	NOT InternalField LIKE '\_%';

	-- Generate the Fields for the select: VendorName as `The Vendor`, InvoiceNo as `Inv #`
	SELECT 	GROUP_CONCAT(concat(InternalField, ' as ', '`', Field , '`') order BY FieldOrder SEPARATOR ',')
	INTO 	@SQLSelectFields
	FROM 	myReportFieldOutput;

	-- Build the order by clause any absolute number is treated as 1st 2nd 3rd etc, but -2, for example means descending
	SELECT 	GROUP_CONCAT(concat(InternalField, if(SortOrder>0,' ASC', ' DESC')) order BY abs(SortOrder) SEPARATOR ',')
	INTO 	@SQLSelectOrderBy
	FROM 	myReportFieldOutput
	WHERE 	nullif(SortOrder, 0) is not null;
	SET @SQLSelectOrderBy = ifnull(@SQLSelectOrderBy, '1, 2');

	-- the the select the will be run at the end.  Asuu ing the final output in a Temp Tbale called 
	SET @SQLSelect = Concat('Select ', @SQLSelectFields, ' from myReportData order by ', @SQLSelectOrderBy);

	SELECT Field, Type, Width, LinkPage, LinkPageValue from myReportFieldOutput WHERE Width <> -1 ORDER by FieldOrder;
















	-- ******************************************************************************************
	--
	--
	-- 									Generate the report
	--
	--
	-- ******************************************************************************************

	SET @InvoiceType = NULL;
	SET @ScanDate1 = NULL;
	SET @ScanDate2 = NULL;
	SET @CompanyCode = NULL;
	SET @Detailed = NULL;

	CALL _x_StringToRows(pCriteria, '■');

	IF MOD((SELECT COUNT(*) FROM tSearchList), 2) <> 0 THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Improperly coded string; Parameters not paired.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;

	OPEN curParms;
readParms:
	LOOP
		FETCH curParms INTO DataValue;
		IF done THEN
			LEAVE readParms;
		END IF;
		SET @DataValue = DataValue;
		IF DataValue = 'InvoiceType' THEN
			FETCH curParms INTO DataValue;
			SET @InvoiceType = DataValue;
		ELSEIF DataValue = 'ScanDate1' THEN
			FETCH curParms INTO DataValue;
			SET @ScanDate1 = DATE(DataValue);
		ELSEIF DataValue = 'ScanDate2' THEN
			FETCH curParms INTO DataValue;
			SET @ScanDate2 = DATE(DataValue);
		ELSEIF DataValue = 'ScanDateSEL1' THEN
			FETCH curParms INTO DataValue;
			SET @ScanDate1 = _x_ReturnReportDateKeyword(DataValue);
		ELSEIF DataValue = 'ScanDateSEL2' THEN
			FETCH curParms INTO DataValue;
			SET @ScanDate2 = _x_ReturnReportDateKeyword(DataValue);
		ELSEIF DataValue = 'CompanyCode' THEN
			FETCH curParms INTO DataValue;
			SET @CompanyCode = DataValue;
		ELSE
			SET @ErrMsg = CONCAT('Improperly coded string; Unknown keyword [', DataValue, '].');
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @ErrMsg, MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;

	END LOOP;
	CLOSE curParms;



 	drop TEMPORARY TABLE IF EXISTS myReportData;
 	CREATE TEMPORARY TABLE IF NOT EXISTS myReportData AS (
		SELECT
				_x_GetFormatedValue(ClientCompany.CompanyCode, ClientCompany.Description, @CodePosition)						as Company,
				Vendor.VendorName,
				Vendor.VendorNo,
				IFNULL(Invoice.InvoiceNo, '') 																					AS InvoiceNo,
				date(Invoice.InvoiceDate) 																						AS InvoiceDate,
				Case	when InvoiceType = 'Invoice' then
							case when Invoice.IsPOInvoice = true then 'Invoice/PO' else 'Invoice/NonPO' END
							else InvoiceType end 																				as InvoiceType,
				Invoice.InvoiceTotal	 																						AS InvoiceTotal,
				Invoice.Ten99Amount	 																							AS Invoice1099,
				InvoiceStatus.StateName																							AS InvoiceStatus,
				convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone)														AS ScannedDate,
				InvoiceId																										AS _InvoiceId
		FROM 	Invoice
				INNER JOIN InvoiceStatus 		ON InvoiceStatus.StateId = Invoice.ApprovalStatusId
				LEFT JOIN Vendor				ON Invoice.VendorId = Vendor.VendorId
				LEFT JOIN ClientCompany  		ON ClientCompany.CompanyCode = Invoice.CompanyCode
													and ClientCompany.ClientId = Invoice.ClientId
		WHERE 	Invoice.ClientId = pClientId
				AND Invoice.ScannedDate BETWEEN IFNULL(@ScanDate1, Invoice.ScannedDate) AND IFNULL(@ScanDate2, Invoice.ScannedDate)
				AND IFNULL(Invoice.CompanyCode, '') = IFNULL(IFNULL(@CompanyCode, Invoice.CompanyCode), '')

	);

-- 		insert 	into myOutput (Field, Label, Type, Width)							values ('Company', 			'Company/Store',	'Text',		140);
-- 		insert 	into myOutput (Field, Label, Type, Width)							values ('ScannedDate',		'Scanned',			'Date',		120);
-- 		insert 	into myOutput (Field, Label, Type, Width)							values ('InvoiceType', 		'Type',				'Text',		140);
-- 		insert 	into myOutput (Field, Label, Type, Width)							values ('InvoiceStatus',	'Status',			'Text',		100);
-- 		insert 	into myOutput (Field, Label, Type, Width)							values ('TotalCount',		'Count',			'Number',	100);
-- 		insert 	into myOutput (Field, Label, Type, Width)							values ('TotalAmount',		'Total',			'Currency',	100);
-- 		insert 	into myOutput (Field, Label, Type, Width)							values ('Total1099',		'1099 Total',		'Currency',	100);
-- 		select * from myOutput;
-- 
-- 
-- 		Select 	Company,
-- 				Date(ScannedDate)				As ScannedDate,
-- 				InvoiceType,
-- 				InvoiceStatus,
-- 				Count(*) 						as TotalCount,
-- 				Sum(ifnull(InvoiceTotal, 0)) 	As TotalAmount,
-- 				Sum(ifnull(Invoice1099, 0)) 	As Total1099
-- 		from 	myData	
-- 		group	by Company, Date(ScannedDate), InvoiceType, InvoiceStatus
-- 		order 	by 1,2,3,4;








	-- ******************************************************************************************
	-- 										END OF REPORT
	-- ******************************************************************************************
    PREPARE stmt FROM @SQLSelect;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;

	SELECT count(*) INTO @RecordCount FROM myReportData;
	set @TotalTime = time_to_Sec(timediff(UTC_TIMESTAMP(), @StartTime));


	-- Record History info
	call _x_ReportGenerateSendToHistory(@ClientId, pSource, pReportKey, pCriteria, @ReportOutputFields, @RecordCount, @TotalTime, pUsers, pRoles, @OutputFormat, @isBcc);


/*

call _x_ReportGenerate_DocumentProcessing('Generated', null, 88, 'DocumentProcessing', 'ScanDate1■2023-11-01■ScanDate2■2023-12-31', 'Company■myLabelCompany/Store■100■0■VendorName■myLabelVendor Name■2■0■VendorNo■myLabelVendor No■3■0■InvoiceNo■myLabelInvoice No■4■0■InvoiceDate■myLabelDate■5■0■InvoiceType■myLabelType■6■0■InvoiceTotal■myLabelTotal■7■0■', '022b30f2-dddd-49b8-a4aa-e2045d704f29', null);

*/


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportGenerate_DocumentProcessingSUM` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportGenerate_DocumentProcessingSUM`(in pSource varchar(10), IN pReportScheduleId int, in pClientId int, in pReportKey varchar(20), pCriteria text, pReportFieldOutput text, in pUsers mediumtext, in pRoles mediumtext)
ThisProc:
	BEGIN	
-- noformat
	DECLARE done 			int DEFAULT FALSE;
	DECLARE DataValue 		Mediumtext;
	DECLARE curParms 		CURSOR FOR SELECT * FROM tSearchList;
	DECLARE CONTINUE 		HANDLER FOR NOT FOUND SET done = TRUE;


	SET SESSION group_concat_max_len = 1000000;

	if pSource = 'Schedule' then
		-- Get the schedule data
		call _x_ReportGenerateGetScheduleInfo(pReportScheduleId, pClientId, pReportKey, pCriteria, pReportFieldOutput, pUsers, pRoles);

		set @@SESSION.max_sp_recursion_depth=1;
		call _x_ReportGenerate_DocumentProcessingSUM('Run', pReportScheduleId, pClientId, pReportKey, pCriteria, pReportFieldOutput, pUsers, pRoles);
		Leave ThisProc;
	end if;

	SET @StartTime = UTC_TIMESTAMP();
	set @isBcc = null;
	set @OutputFormat = null;
	-- Take the Criteria and parse it to get the fields and their values
	if pSource = 'Generated' and pReportScheduleId is not null then
		select 	ReportClientSchedule.ClientId, ReportClientSchedule.OutputFormat, ReportClientSchedule.isHideRecipients
		into 	@ClientId, @OutputFormat, @isBcc
		from 	ReportClientSchedule
		where 	ReportScheduleId = pReportScheduleId;
	elseif pReportScheduleId is not null then -- This is executed if scheduled
		select 	ReportClientSchedule.OutputFormat, ReportClientSchedule.isHideRecipients
		into 	@OutputFormat, @isBcc
		from 	ReportClientSchedule
				inner join 	ReportClient 	on ReportClient.ReportKey = ReportClientSchedule.ReportKey
												and ReportClient.ClientId = ReportClientSchedule.ClientId
		where 	ReportScheduleId = pReportScheduleId
				and ReportClientSchedule.isActive = 1
				and ReportClient.isActive = 1;
		if @OutputFormat is null THEN
			set pClientId = NULL;
			set @ClientId = null;
		end if;
	end if;

	set @ClientId = ifnull(pClientId, @ClientId);

	if @ClientId is null THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This Report or Schedule is not active', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;
	
	set @CodePosition = 2;
	Call _x_GetClientParam(@ClientId, 'CodePosition', @CodePosition);
	call _x_SetClientTimeZone(@ClientId);




	-- ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** 
	--
	-- Temp Table with all field to output with their label and sort order
	--
	--
	drop TEMPORARY TABLE IF EXISTS myOutput;
	create TEMPORARY TABLE if not exists myOutput (
		Field 			varchar(50),
		Label 			varchar(50),
		FieldOrder 		int not null,
		SortOrder 		int null
		);

	SET Done = false;
	CALL _x_StringToRows(pReportFieldOutput, '■');
	OPEN curParms;
readFields:
	LOOP
		FETCH curParms INTO DataValue;
		IF done THEN
			LEAVE readFields;
		END IF;
		SET @OutputField = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputLabel = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputFieldOrder = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputSortOrder = DataValue;
		insert INTO myOutput VALUES (@OutputField, @OutputLabel, @OutputFieldOrder, nullif(@OutputSortOrder, 0));

	END LOOP;
	CLOSE curParms;
	SET done= false;

	-- xref to get addition info including any internal ids for linking
	drop TEMPORARY TABLE IF EXISTS myReportFieldOutput;
	create TEMPORARY TABLE if not exists myReportFieldOutput (
		SELECT 	ReportFieldOutput.Field 												AS InternalField,	
				ifnull(myOutput.Label, ReportFieldOutput.Label)							AS Field,	
				ReportFieldOutput.Type,	
				if(ReportFieldOutput.Field LIKE '\_%', -1, ReportFieldOutput.Width)		AS Width,	
				ReportFieldOutput.LinkPage,	
				ReportFieldOutput.LinkPageValue,
				ifnull(myOutput.FieldOrder, ReportFieldOutput.FieldOrder)				AS FieldOrder,
				ifnull(myOutput.SortOrder, ReportFieldOutput.SortOrder)					AS SortOrder
		FROM 	ReportFieldOutput
				left JOIN myOutput		ON myOutput.Field = ReportFieldOutput.Field
		WHERE 	ReportKey = pReportKey
				AND (myOutput.Field is not null OR ReportFieldOutput.Field LIKE '\_%')
		ORDER 	BY SortOrder
		);

	SELECT 	GROUP_CONCAT(InternalField order BY FieldOrder SEPARATOR ',')
	INTO 	@ReportOutputFields
	FROM 	myReportFieldOutput
	WHERE 	NOT InternalField LIKE '\_%';

	-- Generate the Fields for the select: VendorName as `The Vendor`, InvoiceNo as `Inv #`
	SELECT 	GROUP_CONCAT(concat(InternalField, ' as ', '`', Field , '`') order BY FieldOrder SEPARATOR ',')
	INTO 	@SQLSelectFields
	FROM 	myReportFieldOutput;

	-- Build the order by clause any absolute number is treated as 1st 2nd 3rd etc, but -2, for example means descending
	SELECT 	GROUP_CONCAT(concat(InternalField, if(SortOrder>0,' ASC', ' DESC')) order BY abs(SortOrder) SEPARATOR ',')
	INTO 	@SQLSelectOrderBy
	FROM 	myReportFieldOutput
	WHERE 	nullif(SortOrder, 0) is not null;
	SET @SQLSelectOrderBy = ifnull(@SQLSelectOrderBy, '1, 2');

	-- the the select the will be run at the end.  Asuu ing the final output in a Temp Tbale called 
	SET @SQLSelect = Concat('Select ', @SQLSelectFields, ' from myReportData order by ', @SQLSelectOrderBy);

	SELECT Field, Type, Width, LinkPage, LinkPageValue from myReportFieldOutput WHERE Width <> -1 ORDER by FieldOrder;
















	-- ******************************************************************************************
	--
	--
	-- 									Generate the report
	--
	--
	-- ******************************************************************************************

	SET @InvoiceType = NULL;
	SET @ScanDate1 = NULL;
	SET @ScanDate2 = NULL;
	SET @CompanyCode = NULL;
	SET @Detailed = NULL;

	CALL _x_StringToRows(pCriteria, '■');

	IF MOD((SELECT COUNT(*) FROM tSearchList), 2) <> 0 THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Improperly coded string; Parameters not paired.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;

	OPEN curParms;
readParms:
	LOOP
		FETCH curParms INTO DataValue;
		IF done THEN
			LEAVE readParms;
		END IF;
		SET @DataValue = DataValue;
		IF DataValue = 'InvoiceType' THEN
			FETCH curParms INTO DataValue;
			SET @InvoiceType = DataValue;
		ELSEIF DataValue = 'ScanDate1' THEN
			FETCH curParms INTO DataValue;
			SET @ScanDate1 = DATE(DataValue);
		ELSEIF DataValue = 'ScanDate2' THEN
			FETCH curParms INTO DataValue;
			SET @ScanDate2 = DATE(DataValue);
		ELSEIF DataValue = 'ScanDateSEL1' THEN
			FETCH curParms INTO DataValue;
			SET @ScanDate1 = _x_ReturnReportDateKeyword(DataValue);
		ELSEIF DataValue = 'ScanDateSEL2' THEN
			FETCH curParms INTO DataValue;
			SET @ScanDate2 = _x_ReturnReportDateKeyword(DataValue);
		ELSEIF DataValue = 'CompanyCode' THEN
			FETCH curParms INTO DataValue;
			SET @CompanyCode = DataValue;
		ELSE
			SET @ErrMsg = CONCAT('Improperly coded string; Unknown keyword [', DataValue, '].');
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @ErrMsg, MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;

	END LOOP;
	CLOSE curParms;



 	drop TEMPORARY TABLE IF EXISTS myReportData;
 	CREATE TEMPORARY TABLE IF NOT EXISTS myReportData AS (
		SELECT
				_x_GetFormatedValue(ClientCompany.CompanyCode, ClientCompany.Description, @CodePosition)						as Company,
				date(convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone))												AS ScannedDate,
				Case	when InvoiceType = 'Invoice' then
							case when Invoice.IsPOInvoice = true then 'Invoice/PO' else 'Invoice/NonPO' END
							else InvoiceType end 																				as InvoiceType,
				InvoiceStatus.StateName																							AS InvoiceStatus,
				Count(*) 																										as TotalCount,
 				Sum(ifnull(Invoice.InvoiceTotal, 0)) 																			As TotalAmount,
 				Sum(ifnull(Invoice.Ten99Amount, 0)) 																			As Total1099
		FROM 	Invoice
				INNER JOIN InvoiceStatus 		ON InvoiceStatus.StateId = Invoice.ApprovalStatusId
				LEFT JOIN Vendor				ON Invoice.VendorId = Vendor.VendorId
				LEFT JOIN ClientCompany  		ON ClientCompany.CompanyCode = Invoice.CompanyCode
													and ClientCompany.ClientId = Invoice.ClientId
		WHERE 	Invoice.ClientId = pClientId
				AND Invoice.ScannedDate BETWEEN IFNULL(@ScanDate1, Invoice.ScannedDate) AND IFNULL(@ScanDate2, Invoice.ScannedDate)
				AND IFNULL(Invoice.CompanyCode, '') = IFNULL(IFNULL(@CompanyCode, Invoice.CompanyCode), '')
		group	by Company, Date(date(convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone))), InvoiceType, InvoiceStatus
	);










	-- ******************************************************************************************
	-- 										END OF REPORT
	-- ******************************************************************************************
    PREPARE stmt FROM @SQLSelect;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;

	SELECT count(*) INTO @RecordCount FROM myReportData;
	set @TotalTime = time_to_Sec(timediff(UTC_TIMESTAMP(), @StartTime));


	-- Record History info
	call _x_ReportGenerateSendToHistory(@ClientId, pSource, pReportKey, pCriteria, @ReportOutputFields, @RecordCount, @TotalTime, pUsers, pRoles, @OutputFormat, @isBcc);


/*

call _x_ReportGenerate_DocumentProcessingSUM('Generated', null, 88, 'DocumentProcessingSM', 'ScanDate1■2023-11-01■ScanDate2■2023-12-31', 'Company■Company/Store■1■0■ScannedDate■Scanned■2■0■InvoiceType■Type■3■0■InvoiceStatus■Status■4■0■TotalCount■Count■5■0■TotalAmount■Total■6■0■Total1099■1099■7■0', '022b30f2-dddd-49b8-a4aa-e2045d704f29', null);

*/


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportGenerate_DocumentTimeFlow` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportGenerate_DocumentTimeFlow`(in pSource varchar(10), IN pReportScheduleId int, in pClientId int, in pReportKey varchar(20), pCriteria text, pReportFieldOutput text, in pUsers mediumtext, in pRoles mediumtext)
ThisProc:
	BEGIN	
-- noformat
	DECLARE done 			int DEFAULT FALSE;
	DECLARE DataValue 		Mediumtext;
	DECLARE curParms 		CURSOR FOR SELECT * FROM tSearchList;
	DECLARE CONTINUE 		HANDLER FOR NOT FOUND SET done = TRUE;


	SET SESSION group_concat_max_len = 1000000;

	if pSource = 'Schedule' then
		-- Get the schedule data
		call _x_ReportGenerateGetScheduleInfo(pReportScheduleId, pClientId, pReportKey, pCriteria, pReportFieldOutput, pUsers, pRoles);

		set @@SESSION.max_sp_recursion_depth=1;
		call _x_ReportGenerate_DocumentTimeFlow('Run', pReportScheduleId, pClientId, pReportKey, pCriteria, pReportFieldOutput, pUsers, pRoles);
		Leave ThisProc;
	end if;

	SET @StartTime = UTC_TIMESTAMP();
	set @isBcc = null;
	set @OutputFormat = null;
	-- Take the Criteria and parse it to get the fields and their values
	if pSource = 'Generated' and pReportScheduleId is not null then
		select 	ReportClientSchedule.ClientId, ReportClientSchedule.OutputFormat, ReportClientSchedule.isHideRecipients
		into 	@ClientId, @OutputFormat, @isBcc
		from 	ReportClientSchedule
		where 	ReportScheduleId = pReportScheduleId;
	elseif pReportScheduleId is not null then -- This is executed if scheduled
		select 	ReportClientSchedule.OutputFormat, ReportClientSchedule.isHideRecipients
		into 	@OutputFormat, @isBcc
		from 	ReportClientSchedule
				inner join 	ReportClient 	on ReportClient.ReportKey = ReportClientSchedule.ReportKey
												and ReportClient.ClientId = ReportClientSchedule.ClientId
		where 	ReportScheduleId = pReportScheduleId
				and ReportClientSchedule.isActive = 1
				and ReportClient.isActive = 1;
		if @OutputFormat is null THEN
			set pClientId = NULL;
			set @ClientId = null;
		end if;
	end if;

	set @ClientId = ifnull(pClientId, @ClientId);

	if @ClientId is null THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This Report or Schedule is not active', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;
	
	set @CodePosition = 2;
	Call _x_GetClientParam(@ClientId, 'CodePosition', @CodePosition);
	call _x_SetClientTimeZone(@ClientId);




	-- ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** 
	--
	-- Temp Table with all field to output with their label and sort order
	--
	--
	drop TEMPORARY TABLE IF EXISTS myOutput;
	create TEMPORARY TABLE if not exists myOutput (
		Field 			varchar(50),
		Label 			varchar(50),
		FieldOrder 		int not null,
		SortOrder 		int null
		);

	SET Done = false;
	CALL _x_StringToRows(pReportFieldOutput, '■');
	OPEN curParms;
readFields:
	LOOP
		FETCH curParms INTO DataValue;
		IF done THEN
			LEAVE readFields;
		END IF;
		SET @OutputField = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputLabel = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputFieldOrder = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputSortOrder = DataValue;
		insert INTO myOutput VALUES (@OutputField, @OutputLabel, @OutputFieldOrder, nullif(@OutputSortOrder, 0));

	END LOOP;
	CLOSE curParms;
	SET done= false;

	-- xref to get addition info including any internal ids for linking
	drop TEMPORARY TABLE IF EXISTS myReportFieldOutput;
	create TEMPORARY TABLE if not exists myReportFieldOutput (
		SELECT 	ReportFieldOutput.Field 												AS InternalField,	
				ifnull(myOutput.Label, ReportFieldOutput.Label)							AS Field,	
				ReportFieldOutput.Type,	
				if(ReportFieldOutput.Field LIKE '\_%', -1, ReportFieldOutput.Width)		AS Width,	
				ReportFieldOutput.LinkPage,	
				ReportFieldOutput.LinkPageValue,
				ifnull(myOutput.FieldOrder, ReportFieldOutput.FieldOrder)				AS FieldOrder,
				ifnull(myOutput.SortOrder, ReportFieldOutput.SortOrder)					AS SortOrder
		FROM 	ReportFieldOutput
				left JOIN myOutput		ON myOutput.Field = ReportFieldOutput.Field
		WHERE 	ReportKey = pReportKey
				AND (myOutput.Field is not null OR ReportFieldOutput.Field LIKE '\_%')
		ORDER 	BY SortOrder
		);

	SELECT 	GROUP_CONCAT(InternalField order BY FieldOrder SEPARATOR ',')
	INTO 	@ReportOutputFields
	FROM 	myReportFieldOutput
	WHERE 	NOT InternalField LIKE '\_%';

	-- Generate the Fields for the select: VendorName as `The Vendor`, InvoiceNo as `Inv #`
	SELECT 	GROUP_CONCAT(concat(InternalField, ' as ', '`', Field , '`') order BY FieldOrder SEPARATOR ',')
	INTO 	@SQLSelectFields
	FROM 	myReportFieldOutput;

	-- Build the order by clause any absolute number is treated as 1st 2nd 3rd etc, but -2, for example means descending
	SELECT 	GROUP_CONCAT(concat(InternalField, if(SortOrder>0,' ASC', ' DESC')) order BY abs(SortOrder) SEPARATOR ',')
	INTO 	@SQLSelectOrderBy
	FROM 	myReportFieldOutput
	WHERE 	nullif(SortOrder, 0) is not null;
	SET @SQLSelectOrderBy = ifnull(@SQLSelectOrderBy, '1, 2');

	-- the the select the will be run at the end.  Asuu ing the final output in a Temp Tbale called 
	SET @SQLSelect = Concat('Select ', @SQLSelectFields, ' from myReportData order by ', @SQLSelectOrderBy);

	SELECT Field, Type, Width, LinkPage, LinkPageValue from myReportFieldOutput WHERE Width <> -1 ORDER by FieldOrder;
















	-- ******************************************************************************************
	--
	--
	-- 									Generate the report
	--
	--
	-- ******************************************************************************************

	SET @Approver = NULL;
	SET @InvoiceType = NULL;
	SET @InvoiceDate1 = NULL;
	SET @InvoiceDate2 = NULL;
	SET @ScanDate1 = NULL;
	SET @ScanDate2 = NULL;
	SET @Status = NULL;
	SET @CompanyCode = NULL;
	set @POorNonPO = NULL;

	CALL _x_StringToRows(pCriteria, '■');

	IF MOD((SELECT COUNT(*) FROM tSearchList), 2) <> 0 THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Improperly coded string; Parameters not paired.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;

	OPEN curParms;
readParms:
	LOOP
		FETCH curParms INTO DataValue;
		IF done THEN
			LEAVE readParms;
		END IF;
		SET @DataValue = DataValue;
		IF DataValue = 'Approver' THEN
			FETCH curParms INTO DataValue;
			SET @Approver = DataValue;
		ELSEIF DataValue = 'InvoiceType' THEN
			FETCH curParms INTO DataValue;
			SET @InvoiceType = DataValue;
		ELSEIF DataValue = 'POorNonPO' THEN
			FETCH curParms INTO DataValue;
			SET @POorNonPO = DataValue;
		ELSEIF DataValue = 'InvoiceDate1' THEN
			FETCH curParms INTO DataValue;
			SET @InvoiceDate1 = DATE(DataValue);
		ELSEIF DataValue = 'InvoiceDate2' THEN
			FETCH curParms INTO DataValue;
			SET @InvoiceDate2 = DATE(DataValue);
		ELSEIF DataValue = 'InvoiceDateSEL1' THEN
			FETCH curParms INTO DataValue;
			SET @InvoiceDate1 = _x_ReturnReportDateKeyword(DataValue);
		ELSEIF DataValue = 'InvoiceDateSEL2' THEN
			FETCH curParms INTO DataValue;
			SET @InvoiceDate2 = _x_ReturnReportDateKeyword(DataValue);
		ELSEIF DataValue = 'ScanDate1' THEN
			FETCH curParms INTO DataValue;
			SET @ScanDate1 = DATE(DataValue);
		ELSEIF DataValue = 'ScanDate2' THEN
			FETCH curParms INTO DataValue;
			SET @ScanDate2 = DATE(DataValue);
		ELSEIF DataValue = 'ScanDateSEL1' THEN
			FETCH curParms INTO DataValue;
			SET @ScanDate1 = _x_ReturnReportDateKeyword(DataValue);
		ELSEIF DataValue = 'ScanDateSEL2' THEN
			FETCH curParms INTO DataValue;
			SET @ScanDate2 = _x_ReturnReportDateKeyword(DataValue);
		ELSEIF DataValue = 'InvoiceStatus' THEN
			FETCH curParms INTO DataValue;
			SET @Status = DataValue;
		ELSEIF DataValue = 'CompanyCode' THEN
			FETCH curParms INTO DataValue;
			SET @CompanyCode = DataValue;
		ELSE
			SET @ErrMsg = CONCAT('Improperly coded string; Unknown keyword [', DataValue, '].');
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @ErrMsg, MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;

	END LOOP;
	CLOSE curParms;

	drop TEMPORARY TABLE IF EXISTS myApprovers;
	CREATE TEMPORARY TABLE IF NOT EXISTS myApprovers AS (
			select 	UserId
			from	User
			where 	ClientId = @ClientId
					and @Approver Like concat('%', UserId, '%')
		);


 	drop TEMPORARY TABLE IF EXISTS myData;
 	CREATE TEMPORARY TABLE IF NOT EXISTS myData AS (
		SELECT
				_x_GetFormatedValue(ClientCompany.CompanyCode, ClientCompany.Description, @CodePosition)						as Company,
				Vendor.VendorName,
				Vendor.VendorNo,
				IFNULL(Invoice.InvoiceNo, '') 																					AS InvoiceNo,
				date(Invoice.InvoiceDate) 																						AS InvoiceDate,
				Case	when InvoiceType = 'Invoice' then
							case when Invoice.IsPOInvoice = true then 'Invoice/PO' else 'Invoice/NonPO' END
							else InvoiceType end 																				as InvoiceType,
				Invoice.InvoiceTotal	 																						AS InvoiceTotal,
				ifnull(Invoice.Ten99Amount, 0.00)																				AS Invoice1099,
				InvoiceStatus.StateName																							AS InvoiceStatus,
				if(Invoice.isPaused, 'Yes', '')																					AS InvoicePaused,
				convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone)														AS ScannedDate,
				Invoice.InvoiceId																								AS _InvoiceId
		FROM 	Invoice
				INNER JOIN InvoiceStatus 		ON InvoiceStatus.StateId = Invoice.ApprovalStatusId
				LEFT JOIN Vendor				ON Invoice.VendorId = Vendor.VendorId
				LEFT JOIN ClientCompany  		ON ClientCompany.CompanyCode = Invoice.CompanyCode
													and ClientCompany.ClientId = Invoice.ClientId
	WHERE 	Invoice.ClientId = @ClientId
			AND Invoice.IsDeleted = FALSE
			AND locate(Invoice.InvoiceType, IFNULL(@InvoiceType, Invoice.InvoiceType)) > 0
			AND Invoice.IsPOInvoice = IFNULL(@POorNonPO, Invoice.IsPOInvoice)
			AND ifnull(Invoice.IsConfidential, 0) = IFNULL(@isConfidential, ifnull(Invoice.IsConfidential, 0))

			AND IFNULL(Invoice.CompanyCode, '') = IFNULL(IFNULL(@CompanyCode, Invoice.CompanyCode), '')
		
			AND Invoice.InvoiceDate BETWEEN IFNULL(@InvoiceDate1, Invoice.InvoiceDate) AND IFNULL(@InvoiceDate2, Invoice.InvoiceDate)
			AND Invoice.ScannedDate BETWEEN IFNULL(@ScanDate1, Invoice.ScannedDate) AND IFNULL(@ScanDate2, Invoice.ScannedDate)
			AND LOCATE(CONCAT(',', IFNULL(Invoice.ApprovalStatusId, -1), ','), CONCAT('%,', IFNULL(IFNULL(@Status, Invoice.ApprovalStatusId), -1), ',%')) > 0
			and (
					@Approver is NULL
					or (
							@Approver is not NULL
							and exists (select	1 
										from	InvoiceHistory
										where 	InvoiceHistory.InvoiceId = Invoice.InvoiceId	
												and Action in ('Approve', 'Reject', 'Delegation', 'Delegate', 'Request')
												and (select 1 from myApprovers where UserId = ActorId)
										)
						)
				)
 	);


	drop TEMPORARY TABLE IF EXISTS myDataStates;
	create TEMPORARY TABLE if not exists myDataStates (
		InvoiceId 			int	Primary key,
		Captured 			datetime,
		OutOfCaptured		datetime,
		Exception			datetime,
		OutOfException		datetime,
		Assigned			datetime,
		Approved 			datetime,
		Paused				datetime,
		Unpaused			datetime,
		Accepted			datetime
		);


	insert into myDataStates (InvoiceId, Captured)
		select 	InvoiceHistory.InvoiceId, min(ActionDate)
		from	InvoiceHistory
				inner join myData	on myData._InvoiceId = InvoiceHistory.InvoiceId
		GROUP 	by InvoiceHistory.InvoiceId;



	Update 		myDataStates	set OutOfCaptured	= (select 	min(ActionDate)
														from	InvoiceHistory ih
														where 	ih.InvoiceId =  myDataStates.InvoiceId
																and InitialStatus = 'Captured' and CurrentStatus <> 'Captured');
	Update 		myDataStates	set Exception 		= (select 	min(ActionDate)
														from	InvoiceHistory ih
														where 	ih.InvoiceId =  myDataStates.InvoiceId
																and CurrentStatus = 'Exception');
	Update 		myDataStates	set OutOfException	= (select 	min(ActionDate)
														from	InvoiceHistory ih
														where 	ih.InvoiceId =  myDataStates.InvoiceId
																and InitialStatus = 'Exception' and CurrentStatus <> 'Exception');
	Update 		myDataStates	set Assigned 	= (select 		min(ActionDate)
														from	InvoiceHistory ih
														where 	ih.InvoiceId =  myDataStates.InvoiceId
																and CurrentStatus = 'Captured');
	Update 		myDataStates	set Paused 		= (select 		min(ActionDate)
														from	InvoiceHistory ih
														where 	ih.InvoiceId =  myDataStates.InvoiceId
																and Field = 'Pause' and NewData = 'Yes');
	Update 		myDataStates	set UnPaused 	= (select 		max(ActionDate)
														from	InvoiceHistory ih
														where 	ih.InvoiceId =  myDataStates.InvoiceId
																and Field = 'Pause' and NewData = 'No');
	Update 		myDataStates	set Approved 	= (select 		max(ActionDate)
														from	InvoiceHistory ih
														where 	ih.InvoiceId =  myDataStates.InvoiceId
																and (
																		(InitialStatus = 'In Approval' and CurrentStatus in ('Approved', 'Accepted'))
																		or (InitialStatus = 'Captured' and CurrentStatus in ('Approved', 'Accepted'))
																	));
	Update 		myDataStates	set Accepted 	= (select 		max(ActionDate)
														from	InvoiceHistory ih
														where 	ih.InvoiceId =  myDataStates.InvoiceId
																and (
																		(InitialStatus = 'Approved' and CurrentStatus = 'Accepted')
																		or (InitialStatus = 'In Approval' and CurrentStatus in ('Accepted'))
																		or (InitialStatus = 'Captured' and CurrentStatus in ('Accepted'))
																	));
 

	drop TEMPORARY TABLE IF EXISTS myApprovers;
	create TEMPORARY TABLE if not exists myApprovers (
		InvoiceId		int				NOT null,
		Actor 			char(36)			null,
		ActionDate		datetime		NOT null,
		RowNum 			int				NOT null,
		Days 			int				NOT null,
		PRIMARY KEY (InvoiceId, RowNum)
		);

	insert INTO myApprovers
		select 	myDataStates.InvoiceId, 
				if(u.UserId is null, null, Actor)												AS Actor, 
				ActionDate, 
				ROW_NUMBER() OVER(PARTITION BY InvoiceHistory.InvoiceId ORDER BY ActionDate) 	AS RowNum,
				_x_DaysDiff(Assigned, ActionDate) 												as Days
		from	InvoiceHistory
				left JOIN User u 		ON UserId = InvoiceHistory.ActorId
											AND u.ClientId = @ClientId
				inner join myDataStates	on myDataStates.InvoiceId = InvoiceHistory.InvoiceId
		where 	(Action in ('Approve', 'Reject', 'Request')				and FIELD = 'Invoice Status')
				OR (Action in ('Delegation', 'Delegate')				and FIELD = 'Approvers');


	-- This is done because a temp table can only be used once in a query
	drop TEMPORARY TABLE IF EXISTS myApproversAdjusted;
	create TEMPORARY TABLE if not exists myApproversAdjusted (
		InvoiceId		int				NOT null,
		Actor 			char(36)			null,
		ActionDate		datetime		NOT null,
		RowNum 			int				NOT null,
		Days 			int				NOT null,
		PRIMARY KEY (InvoiceId, ActionDate, RowNum)
		);

	insert INTO myApproversAdjusted
		select * from myApprovers;


	Update 	myApproversAdjusted curApprover
			inner join myApprovers PrevApprover on PrevApprover.InvoiceId = curApprover.InvoiceId
														and PrevApprover.RowNum = (curApprover.RowNum - 1)
			set curApprover.Days = _x_DaysDiff(PrevApprover.ActionDate, curApprover.ActionDate)
	where 	curApprover.RowNum > 1;

	
 	drop TEMPORARY TABLE IF EXISTS myReportData;
 	CREATE TEMPORARY TABLE IF NOT EXISTS myReportData AS (
		SELECT
				myData.*,
				_x_DaysDiff(Captured, OutOfCaptured) 									as DaysInCapture,
				_x_DaysDiff(Exception, OutOfException) 									as DaysInException,
				_x_DaysDiff(Paused, Unpaused) 											as DaysInPause,
				_x_DaysDiff(Assigned, Approved) 										as DaysInApproval,
				_x_DaysDiff(Captured, Accepted) 										as DaysToAccepted,
				(
					Select 	GROUP_CONCAT(concat(ifnull(Actor, 'System'), ' | ', Days) 
										Order by ActionDate
										separator ' | '
										) 
					from 	myApproversAdjusted
					where 	myApproversAdjusted.InvoiceId = myData._InvoiceId
				)																		as Approvers
		from	myData
				inner join myDataStates	on myDataStates.InvoiceId = myData._InvoiceId
		);
		







	-- ******************************************************************************************
	-- 										END OF REPORT
	-- ******************************************************************************************
    PREPARE stmt FROM @SQLSelect;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;

	SELECT count(*) INTO @RecordCount FROM myReportData;
	set @TotalTime = time_to_Sec(timediff(UTC_TIMESTAMP(), @StartTime));


	-- Record History info
	call _x_ReportGenerateSendToHistory(@ClientId, pSource, pReportKey, pCriteria, @ReportOutputFields, @RecordCount, @TotalTime, pUsers, pRoles, @OutputFormat, @isBcc);


/*
call _x_ReportGenerate_DocumentTimeFlow('Generated', null, 88, 'DocumentTimeFlow', 'ScanDate1■2023-01-01■ScanDate2■2023-12-31', 'Company■myLabelCompany/Store■100■0■VendorName■myLabelVendor Name■2■0■VendorNo■myLabelVendor No■3■0■InvoiceNo■myLabelInvoice No■4■0■InvoiceDate■myLabelDate■5■0■InvoiceType■myLabelType■6■0■InvoiceTotal■myLabelTotal■7■0■Invoice1099■myLabel1099■8■0■InvoiceStatus■myLabelStatus■9■0■InvoicePaused■myLabelPaused■10■0■ScannedDate■myLabelScanned■11■0■DaysInCapture■myLabelIn Capture■12■0■DaysInException■myLabelIn Exception■13■0■DaysInPause■myLabelIn Pause■14■0■DaysInApproval■myLabelIn Approval■15■0■DaysToAccepted■myLabelTo Accepted■16■0■Approvers■myLabelApprover/Days■17■0', '01b8668d-37d2-4e87-aef9-af4c3f18694e', null);
*/


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportGenerate_InvoiceAccrual` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportGenerate_InvoiceAccrual`(in pSource varchar(10), IN pReportScheduleId int, in pClientId int, in pReportKey varchar(20), pCriteria text, pReportFieldOutput text, in pUsers mediumtext, in pRoles mediumtext)
ThisProc:
	BEGIN	
-- noformat
	DECLARE done 			int DEFAULT FALSE;
	DECLARE DataValue 		Mediumtext;
	DECLARE curParms 		CURSOR FOR SELECT * FROM tSearchList;
	DECLARE CONTINUE 		HANDLER FOR NOT FOUND SET done = TRUE;


	SET SESSION group_concat_max_len = 1000000;

	if pSource = 'Schedule' then
		-- Get the schedule data
		call _x_ReportGenerateGetScheduleInfo(pReportScheduleId, pClientId, pReportKey, pCriteria, pReportFieldOutput, pUsers, pRoles);

		set @@SESSION.max_sp_recursion_depth=1;
		call _x_ReportGenerate_InvoiceAccrual('Run', pReportScheduleId, pClientId, pReportKey, pCriteria, pReportFieldOutput, pUsers, pRoles);
		Leave ThisProc;
	end if;



	SET @StartTime = UTC_TIMESTAMP();
	set @isBcc = null;
	set @OutputFormat = null;
	-- Take the Criteria and parse it to get the fields and their values
	if pSource = 'Generated' and pReportScheduleId is not null then
		select 	ReportClientSchedule.ClientId, ReportClientSchedule.OutputFormat, ReportClientSchedule.isHideRecipients
		into 	@ClientId, @OutputFormat, @isBcc
		from 	ReportClientSchedule
		where 	ReportScheduleId = pReportScheduleId;
	elseif pReportScheduleId is not null then -- This is executed if scheduled
		select 	ReportClientSchedule.OutputFormat, ReportClientSchedule.isHideRecipients
		into 	@OutputFormat, @isBcc
		from 	ReportClientSchedule
				inner join 	ReportClient 	on ReportClient.ReportKey = ReportClientSchedule.ReportKey
												and ReportClient.ClientId = ReportClientSchedule.ClientId
		where 	ReportScheduleId = pReportScheduleId
				and ReportClientSchedule.isActive = 1
				and ReportClient.isActive = 1;
		if @OutputFormat is null THEN
			set pClientId = NULL;
			set @ClientId = null;
		end if;
	end if;

	set @ClientId = ifnull(pClientId, @ClientId);

	if @ClientId is null THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This Report or Schedule is not active', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;
	
	set @CodePosition = 2;
	Call _x_GetClientParam(@ClientId, 'CodePosition', @CodePosition);
	call _x_SetClientTimeZone(@ClientId);




	-- ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** 
	--
	-- Temp Table with all field to output with their label and sort order
	--
	--
	drop TEMPORARY TABLE IF EXISTS myOutput;
	create TEMPORARY TABLE if not exists myOutput (
		Field 			varchar(50),
		Label 			varchar(50),
		FieldOrder 		int not null,
		SortOrder 		int null
		);

	SET Done = false;
	CALL _x_StringToRows(pReportFieldOutput, '■');
	OPEN curParms;
readFields:
	LOOP
		FETCH curParms INTO DataValue;
		IF done THEN
			LEAVE readFields;
		END IF;
		SET @OutputField = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputLabel = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputFieldOrder = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputSortOrder = DataValue;
		insert INTO myOutput VALUES (@OutputField, @OutputLabel, @OutputFieldOrder, nullif(@OutputSortOrder, 0));

	END LOOP;
	CLOSE curParms;
	SET done= false;

	-- xref to get addition info including any internal ids for linking
	drop TEMPORARY TABLE IF EXISTS myReportFieldOutput;
	create TEMPORARY TABLE if not exists myReportFieldOutput (
		SELECT 	ReportFieldOutput.Field 												AS InternalField,	
				ifnull(myOutput.Label, ReportFieldOutput.Label)							AS Field,	
				ReportFieldOutput.Type,	
				if(ReportFieldOutput.Field LIKE '\_%', -1, ReportFieldOutput.Width)		AS Width,	
				ReportFieldOutput.LinkPage,	
				ReportFieldOutput.LinkPageValue,
				ifnull(myOutput.FieldOrder, ReportFieldOutput.FieldOrder)				AS FieldOrder,
				ifnull(myOutput.SortOrder, ReportFieldOutput.SortOrder)					AS SortOrder
		FROM 	ReportFieldOutput
				left JOIN myOutput		ON myOutput.Field = ReportFieldOutput.Field
		WHERE 	ReportKey = pReportKey
				AND (myOutput.Field is not null OR ReportFieldOutput.Field LIKE '\_%')
		ORDER 	BY SortOrder
		);

	SELECT 	GROUP_CONCAT(InternalField order BY FieldOrder SEPARATOR ',')
	INTO 	@ReportOutputFields
	FROM 	myReportFieldOutput
	WHERE 	NOT InternalField LIKE '\_%';

	-- Generate the Fields for the select: VendorName as `The Vendor`, InvoiceNo as `Inv #`
	SELECT 	GROUP_CONCAT(concat(InternalField, ' as ', '`', Field , '`') order BY FieldOrder SEPARATOR ',')
	INTO 	@SQLSelectFields
	FROM 	myReportFieldOutput;

	-- Build the order by clause any absolute number is treated as 1st 2nd 3rd etc, but -2, for example means descending
	SELECT 	GROUP_CONCAT(concat(InternalField, if(SortOrder>0,' ASC', ' DESC')) order BY abs(SortOrder) SEPARATOR ',')
	INTO 	@SQLSelectOrderBy
	FROM 	myReportFieldOutput
	WHERE 	nullif(SortOrder, 0) is not null;
	SET @SQLSelectOrderBy = ifnull(@SQLSelectOrderBy, '1, 2');

	-- the the select the will be run at the end.  Asuu ing the final output in a Temp Tbale called 
	SET @SQLSelect = Concat('Select ', @SQLSelectFields, ' from myReportData order by ', @SQLSelectOrderBy);

	SELECT Field, Type, Width, LinkPage, LinkPageValue from myReportFieldOutput WHERE Width <> -1 ORDER by FieldOrder;
















	-- ******************************************************************************************
	--
	--
	-- 									Generate the report
	--
	--
	-- ******************************************************************************************

	set @CompanyCode = null;
	set @AcceptedDate1 = null;
	set @AcceptedDate2 = null;
	SET @InvoiceType = NULL;
	set @POorNonPO = NULL;
	set @InCurrentMonth = 0;
	set @Detailed = null;

	CALL _x_StringToRows(pCriteria, '■');

	IF MOD((SELECT COUNT(*) FROM tSearchList), 2) <> 0 THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Improperly coded string; Parameters not paired.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;

	OPEN curParms;
readParms:
	LOOP
		FETCH curParms INTO DataValue;
		IF done THEN
			LEAVE readParms;
		END IF;
		SET @DataValue = DataValue;
		IF DataValue = 'InvoiceType' THEN
			FETCH curParms INTO DataValue;
			SET @InvoiceType = DataValue;
		ELSEIF DataValue = 'POorNonPO' THEN
			FETCH curParms INTO DataValue;
			SET @POorNonPO = DataValue;
		ELSEIF DataValue = 'AcceptedDate1' THEN
			FETCH curParms INTO DataValue;
			SET @AcceptedDate1 = DATE(DataValue);
		ELSEIF DataValue = 'AcceptedDate2' THEN
			FETCH curParms INTO DataValue;
			SET @AcceptedDate2 = DATE(DataValue);
		ELSEIF DataValue = 'AcceptedDateSEL1' THEN
			FETCH curParms INTO DataValue;
			SET @AcceptedDate1 = _x_ReturnReportDateKeyword(DataValue);
		ELSEIF DataValue = 'AcceptedDateSEL2' THEN
			FETCH curParms INTO DataValue;
			SET @AcceptedDate2 = _x_ReturnReportDateKeyword(DataValue);
		ELSEIF DataValue = 'CompanyCode' THEN
			FETCH curParms INTO DataValue;
			SET @CompanyCode = DataValue;
		ELSEIF DataValue = 'YesNo' THEN
			FETCH curParms INTO DataValue;
			set @InCurrentMonth = DataValue;
		ELSE
			SET @ErrMsg = CONCAT('Improperly coded string; Unknown keyword [', DataValue, '].');
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @ErrMsg, MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;

	END LOOP;
	CLOSE curParms;


 	drop TEMPORARY TABLE IF EXISTS myReportData;
 	CREATE TEMPORARY TABLE IF NOT EXISTS myReportData AS (
		SELECT
				_x_GetFormatedValue(ClientCompany.CompanyCode, ClientCompany.Description, @CodePosition)						as Company,
				Vendor.VendorName,
				Vendor.VendorNo,
				IFNULL(Invoice.InvoiceNo, '') 																					AS InvoiceNo,
				date(Invoice.InvoiceDate) 																						AS InvoiceDate,
				Case	when InvoiceType = 'Invoice' then
							case when Invoice.IsPOInvoice = true then 'Invoice/PO' else 'Invoice/NonPO' END
							else InvoiceType end 																				as InvoiceType,
				Invoice.InvoiceTotal	 																						AS InvoiceTotal,
				date(convert_tz(Invoice.AcceptedDate, 'GMT', @@session.time_zone))												AS PostedDate,
				(Year(Invoice.AcceptedDate) * 12 + Month(Invoice.AcceptedDate)) 
				- (Year(Invoice.InvoiceDate) * 12 + Month(Invoice.InvoiceDate))													as TotalMonths,
				ifnull(ClientLocation.ContactName, '') 																			as Entity,
				InvoiceId																										AS _InvoiceId
		FROM 	Invoice
				INNER JOIN InvoiceStatus 		ON InvoiceStatus.StateId = Invoice.ApprovalStatusId
				left join ClientLocation		on ClientLocation.ClientLocationId = Invoice.ShipToId
				LEFT JOIN Vendor				ON Invoice.VendorId = Vendor.VendorId
				LEFT JOIN ClientCompany  		ON ClientCompany.CompanyCode = Invoice.CompanyCode
													and ClientCompany.ClientId = Invoice.ClientId
		WHERE 	Invoice.ClientId = @ClientId
				AND Invoice.IsDeleted = FALSE
				AND locate(Invoice.InvoiceType, IFNULL(@InvoiceType, Invoice.InvoiceType)) > 0
				AND Invoice.IsPOInvoice = IFNULL(@POorNonPO, Invoice.IsPOInvoice)
				AND IFNULL(Invoice.CompanyCode, '') = IFNULL(IFNULL(@CompanyCode, Invoice.CompanyCode), '')
					AND Invoice.AcceptedDate BETWEEN IFNULL(@AcceptedDate1, Invoice.AcceptedDate) AND IFNULL(@AcceptedDate2, Invoice.AcceptedDate)
					AND IFNULL(Invoice.CompanyCode, '') = IFNULL(IFNULL(@CompanyCode, Invoice.CompanyCode), '')
					and (
							@InCurrentMonth = 0
							or (@InCurrentMonth = 1 and DATE_FORMAT(Invoice.InvoiceDate, '%Y%m') = DATE_FORMAT(Invoice.AcceptedDate, '%Y%m'))
						)	
		);









	-- ******************************************************************************************
	-- 										END OF REPORT
	-- ******************************************************************************************
    PREPARE stmt FROM @SQLSelect;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;

	SELECT count(*) INTO @RecordCount FROM myReportData;
	set @TotalTime = time_to_Sec(timediff(UTC_TIMESTAMP(), @StartTime));


	-- Record History info
	call _x_ReportGenerateSendToHistory(@ClientId, pSource, pReportKey, pCriteria, @ReportOutputFields, @RecordCount, @TotalTime, pUsers, pRoles, @OutputFormat, @isBcc);


/*
call _x_ReportGenerate_InvoiceAccrual('Generated', null, 88, 'InvoiceAccrual', 'AcceptedDate1■2023-12-01■AcceptedDate2■2023-12-31■YesNo■0', 'Company■Cpy■1■1', '01b8668d-37d2-4e87-aef9-af4c3f18694e', null);
*/


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportGenerate_InvoiceAccrualSUM` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportGenerate_InvoiceAccrualSUM`(in pSource varchar(10), IN pReportScheduleId int, in pClientId int, in pReportKey varchar(20), pCriteria text, pReportFieldOutput text, in pUsers mediumtext, in pRoles mediumtext)
ThisProc:
	BEGIN	
-- noformat
	DECLARE done 			int DEFAULT FALSE;
	DECLARE DataValue 		Mediumtext;
	DECLARE curParms 		CURSOR FOR SELECT * FROM tSearchList;
	DECLARE CONTINUE 		HANDLER FOR NOT FOUND SET done = TRUE;


	SET SESSION group_concat_max_len = 1000000;

	if pSource = 'Schedule' then
		-- Get the schedule data
		call _x_ReportGenerateGetScheduleInfo(pReportScheduleId, pClientId, pReportKey, pCriteria, pReportFieldOutput, pUsers, pRoles);

		set @@SESSION.max_sp_recursion_depth=1;
		call _x_ReportGenerate_InvoiceAccrualSUM('Run', pReportScheduleId, pClientId, pReportKey, pCriteria, pReportFieldOutput, pUsers, pRoles);
		Leave ThisProc;
	end if;

	SET @StartTime = UTC_TIMESTAMP();
	set @isBcc = null;
	set @OutputFormat = null;
	-- Take the Criteria and parse it to get the fields and their values
	if pSource = 'Generated' and pReportScheduleId is not null then
		select 	ReportClientSchedule.ClientId, ReportClientSchedule.OutputFormat, ReportClientSchedule.isHideRecipients
		into 	@ClientId, @OutputFormat, @isBcc
		from 	ReportClientSchedule
		where 	ReportScheduleId = pReportScheduleId;
	elseif pReportScheduleId is not null then -- This is executed if scheduled
		select 	ReportClientSchedule.OutputFormat, ReportClientSchedule.isHideRecipients
		into 	@OutputFormat, @isBcc
		from 	ReportClientSchedule
				inner join 	ReportClient 	on ReportClient.ReportKey = ReportClientSchedule.ReportKey
												and ReportClient.ClientId = ReportClientSchedule.ClientId
		where 	ReportScheduleId = pReportScheduleId
				and ReportClientSchedule.isActive = 1
				and ReportClient.isActive = 1;
		if @OutputFormat is null THEN
			set pClientId = NULL;
			set @ClientId = null;
		end if;
	end if;

	set @ClientId = ifnull(pClientId, @ClientId);

	if @ClientId is null THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This Report or Schedule is not active', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;
	
	set @CodePosition = 2;
	Call _x_GetClientParam(@ClientId, 'CodePosition', @CodePosition);
	call _x_SetClientTimeZone(@ClientId);




	-- ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** 
	--
	-- Temp Table with all field to output with their label and sort order
	--
	--
	drop TEMPORARY TABLE IF EXISTS myOutput;
	create TEMPORARY TABLE if not exists myOutput (
		Field 			varchar(50),
		Label 			varchar(50),
		FieldOrder 		int not null,
		SortOrder 		int null
		);

	SET Done = false;
	CALL _x_StringToRows(pReportFieldOutput, '■');
	OPEN curParms;
readFields:
	LOOP
		FETCH curParms INTO DataValue;
		IF done THEN
			LEAVE readFields;
		END IF;
		SET @OutputField = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputLabel = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputFieldOrder = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputSortOrder = DataValue;
		insert INTO myOutput VALUES (@OutputField, @OutputLabel, @OutputFieldOrder, nullif(@OutputSortOrder, 0));

	END LOOP;
	CLOSE curParms;
	SET done= false;

	-- xref to get addition info including any internal ids for linking
	drop TEMPORARY TABLE IF EXISTS myReportFieldOutput;
	create TEMPORARY TABLE if not exists myReportFieldOutput (
		SELECT 	ReportFieldOutput.Field 												AS InternalField,	
				ifnull(myOutput.Label, ReportFieldOutput.Label)							AS Field,	
				ReportFieldOutput.Type,	
				if(ReportFieldOutput.Field LIKE '\_%', -1, ReportFieldOutput.Width)		AS Width,	
				ReportFieldOutput.LinkPage,	
				ReportFieldOutput.LinkPageValue,
				ifnull(myOutput.FieldOrder, ReportFieldOutput.FieldOrder)				AS FieldOrder,
				ifnull(myOutput.SortOrder, ReportFieldOutput.SortOrder)					AS SortOrder
		FROM 	ReportFieldOutput
				left JOIN myOutput		ON myOutput.Field = ReportFieldOutput.Field
		WHERE 	ReportKey = pReportKey
				AND (myOutput.Field is not null OR ReportFieldOutput.Field LIKE '\_%')
		ORDER 	BY SortOrder
		);

	SELECT 	GROUP_CONCAT(InternalField order BY FieldOrder SEPARATOR ',')
	INTO 	@ReportOutputFields
	FROM 	myReportFieldOutput
	WHERE 	NOT InternalField LIKE '\_%';

	-- Generate the Fields for the select: VendorName as `The Vendor`, InvoiceNo as `Inv #`
	SELECT 	GROUP_CONCAT(concat(InternalField, ' as ', '`', Field , '`') order BY FieldOrder SEPARATOR ',')
	INTO 	@SQLSelectFields
	FROM 	myReportFieldOutput;

	-- Build the order by clause any absolute number is treated as 1st 2nd 3rd etc, but -2, for example means descending
	SELECT 	GROUP_CONCAT(concat(InternalField, if(SortOrder>0,' ASC', ' DESC')) order BY abs(SortOrder) SEPARATOR ',')
	INTO 	@SQLSelectOrderBy
	FROM 	myReportFieldOutput
	WHERE 	nullif(SortOrder, 0) is not null;
	SET @SQLSelectOrderBy = ifnull(@SQLSelectOrderBy, '1, 2');

	-- the the select the will be run at the end.  Asuu ing the final output in a Temp Tbale called 
	SET @SQLSelect = Concat('Select ', @SQLSelectFields, ' from myReportData order by ', @SQLSelectOrderBy);

	SELECT Field, Type, Width, LinkPage, LinkPageValue from myReportFieldOutput WHERE Width <> -1 ORDER by FieldOrder;
















	-- ******************************************************************************************
	--
	--
	-- 									Generate the report
	--
	--
	-- ******************************************************************************************

	set @CompanyCode = null;
	set @AcceptedDate1 = null;
	set @AcceptedDate2 = null;
	SET @InvoiceType = NULL;
	set @POorNonPO = NULL;
	set @InCurrentMonth = 0;
	set @Detailed = null;

	CALL _x_StringToRows(pCriteria, '■');

	IF MOD((SELECT COUNT(*) FROM tSearchList), 2) <> 0 THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Improperly coded string; Parameters not paired.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;

	OPEN curParms;
readParms:
	LOOP
		FETCH curParms INTO DataValue;
		IF done THEN
			LEAVE readParms;
		END IF;
		SET @DataValue = DataValue;
		IF DataValue = 'InvoiceType' THEN
			FETCH curParms INTO DataValue;
			SET @InvoiceType = DataValue;
		ELSEIF DataValue = 'POorNonPO' THEN
			FETCH curParms INTO DataValue;
			SET @POorNonPO = DataValue;
		ELSEIF DataValue = 'AcceptedDate1' THEN
			FETCH curParms INTO DataValue;
			SET @AcceptedDate1 = DATE(DataValue);
		ELSEIF DataValue = 'AcceptedDate2' THEN
			FETCH curParms INTO DataValue;
			SET @AcceptedDate2 = DATE(DataValue);
		ELSEIF DataValue = 'AcceptedDateSEL1' THEN
			FETCH curParms INTO DataValue;
			SET @AcceptedDate1 = _x_ReturnReportDateKeyword(DataValue);
		ELSEIF DataValue = 'AcceptedDateSEL2' THEN
			FETCH curParms INTO DataValue;
			SET @AcceptedDate2 = _x_ReturnReportDateKeyword(DataValue);
		ELSEIF DataValue = 'CompanyCode' THEN
			FETCH curParms INTO DataValue;
			SET @CompanyCode = DataValue;
		ELSEIF DataValue = 'YesNo' THEN
			FETCH curParms INTO DataValue;
			set @InCurrentMonth = DataValue;
		ELSE
			SET @ErrMsg = CONCAT('Improperly coded string; Unknown keyword [', DataValue, '].');
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @ErrMsg, MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;

	END LOOP;
	CLOSE curParms;


 	drop TEMPORARY TABLE IF EXISTS myReportData;
 	CREATE TEMPORARY TABLE IF NOT EXISTS myReportData AS (
		SELECT
				_x_GetFormatedValue(ClientCompany.CompanyCode, ClientCompany.Description, @CodePosition)						as Company,
				ifnull(ClientLocation.ContactName, '') 																			as Entity,
				date(convert_tz(Invoice.AcceptedDate, 'GMT', @@session.time_zone))												AS PostedDate,
				Case 
					when (Year(Invoice.AcceptedDate) * 12 + Month(Invoice.AcceptedDate)) 
						- (Year(Invoice.InvoiceDate) * 12 + Month(Invoice.InvoiceDate)) = 0 THEN 'Same month' 
					else 'Prior month' END 																						as Category,
 				Count(*) 																										as TotalCount,
				Sum(ifnull(InvoiceTotal, 0)) 																					As TotalAmount
		FROM 	Invoice
				INNER JOIN InvoiceStatus 		ON InvoiceStatus.StateId = Invoice.ApprovalStatusId
				left join ClientLocation		on ClientLocation.ClientLocationId = Invoice.ShipToId
				LEFT JOIN Vendor				ON Invoice.VendorId = Vendor.VendorId
				LEFT JOIN ClientCompany  		ON ClientCompany.CompanyCode = Invoice.CompanyCode
													and ClientCompany.ClientId = Invoice.ClientId
		WHERE 	Invoice.ClientId = @ClientId
				AND Invoice.IsDeleted = FALSE
				AND locate(Invoice.InvoiceType, IFNULL(@InvoiceType, Invoice.InvoiceType)) > 0
				AND Invoice.IsPOInvoice = IFNULL(@POorNonPO, Invoice.IsPOInvoice)
				AND IFNULL(Invoice.CompanyCode, '') = IFNULL(IFNULL(@CompanyCode, Invoice.CompanyCode), '')
					AND Invoice.AcceptedDate BETWEEN IFNULL(@AcceptedDate1, Invoice.AcceptedDate) AND IFNULL(@AcceptedDate2, Invoice.AcceptedDate)
					AND IFNULL(Invoice.CompanyCode, '') = IFNULL(IFNULL(@CompanyCode, Invoice.CompanyCode), '')
					and (
							@InCurrentMonth = 0
							or (@InCurrentMonth = 1 and DATE_FORMAT(Invoice.InvoiceDate, '%Y%m') = DATE_FORMAT(Invoice.AcceptedDate, '%Y%m'))
						)	
 		group	by Company, Entity, PostedDate, Category
		);







	-- ******************************************************************************************
	-- 										END OF REPORT
	-- ******************************************************************************************
    PREPARE stmt FROM @SQLSelect;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;

	SELECT count(*) INTO @RecordCount FROM myReportData;
	set @TotalTime = time_to_Sec(timediff(UTC_TIMESTAMP(), @StartTime));


	-- Record History info
	call _x_ReportGenerateSendToHistory(@ClientId, pSource, pReportKey, pCriteria, @ReportOutputFields, @RecordCount, @TotalTime, pUsers, pRoles, @OutputFormat, @isBcc);


/*
call _x_ReportGenerate_InvoiceAccrualSUM('Generated', null, 88, 'InvoiceAccrualSUM', 'AcceptedDate1■2023-12-01■AcceptedDate2■2023-12-31■YesNo■0', 'Company■Cpy■1■1■TotalCount■Cnt■2■0■TotalAmount■($)■3■0', '01b8668d-37d2-4e87-aef9-af4c3f18694e', null);
*/


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportGenerate_InvoiceStatus` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportGenerate_InvoiceStatus`(in pSource varchar(10), IN pReportScheduleId int, in pClientId int, in pReportKey varchar(20), pCriteria text, pReportFieldOutput text, in pUsers mediumtext, in pRoles mediumtext)
ThisProc:
	BEGIN	
-- noformat
	DECLARE done 			int DEFAULT FALSE;
	DECLARE DataValue 		Mediumtext;
	DECLARE curParms 		CURSOR FOR SELECT * FROM tSearchList;
	DECLARE CONTINUE 		HANDLER FOR NOT FOUND SET done = TRUE;

	SET SESSION group_concat_max_len = 1000000;

	if pSource = 'Schedule' then
		-- Get the schedule data
		call _x_ReportGenerateGetScheduleInfo(pReportScheduleId, pClientId, pReportKey, pCriteria, pReportFieldOutput, pUsers, pRoles);

		set @@SESSION.max_sp_recursion_depth=1;
		call _x_ReportGenerate_InvoiceStatus('Run', pReportScheduleId, pClientId, pReportKey, pCriteria, pReportFieldOutput, pUsers, pRoles);
		Leave ThisProc;
	end if;

	SET @StartTime = UTC_TIMESTAMP();
	set @isBcc = null;
	set @OutputFormat = null;
	-- Take the Criteria and parse it to get the fields and their values
	if pSource = 'Generated' and pReportScheduleId is not null then
		select 	ReportClientSchedule.ClientId, ReportClientSchedule.OutputFormat, ReportClientSchedule.isHideRecipients
		into 	@ClientId, @OutputFormat, @isBcc
		from 	ReportClientSchedule
		where 	ReportScheduleId = pReportScheduleId;
	elseif pReportScheduleId is not null then -- This is executed if scheduled
		select 	ReportClientSchedule.OutputFormat, ReportClientSchedule.isHideRecipients
		into 	@OutputFormat, @isBcc
		from 	ReportClientSchedule
				inner join 	ReportClient 	on ReportClient.ReportKey = ReportClientSchedule.ReportKey
												and ReportClient.ClientId = ReportClientSchedule.ClientId
		where 	ReportScheduleId = pReportScheduleId
				and ReportClientSchedule.isActive = 1
				and ReportClient.isActive = 1;
		if @OutputFormat is null THEN
			set pClientId = NULL;
			set @ClientId = null;
		end if;
	end if;

	set @ClientId = ifnull(pClientId, @ClientId);

	if @ClientId is null THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This Report or Schedule is not active', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;

	set @CodePosition = 2;
	Call _x_GetClientParam(@ClientId, 'CodePosition', @CodePosition);
	call _x_SetClientTimeZone(@ClientId);

	-- ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** 
	--
	-- Temp Table with all field to output with their label and sort order
	--
	--
	drop TEMPORARY TABLE IF EXISTS myOutput;
	create TEMPORARY TABLE if not exists myOutput (
		Field 			varchar(50),
		Label 			varchar(50),
		FieldOrder 		int not null,
		SortOrder 		int null
		);

	SET done = false;
	CALL _x_StringToRows(pReportFieldOutput, '■');
	OPEN curParms;
readFields:
	LOOP
		FETCH curParms INTO DataValue;
		IF done THEN
			LEAVE readFields;
		END IF;
		SET @OutputField = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputLabel = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputFieldOrder = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputSortOrder = DataValue;
		insert INTO myOutput VALUES (@OutputField, @OutputLabel, @OutputFieldOrder, nullif(@OutputSortOrder, 0));

	END LOOP;
	CLOSE curParms;
	SET done= false;



	-- xref to get addition info including any internal ids for linking
	drop TEMPORARY TABLE IF EXISTS myReportFieldOutput;
	create TEMPORARY TABLE if not exists myReportFieldOutput (
		SELECT 	ReportFieldOutput.Field 												AS InternalField,	
				ifnull(myOutput.Label, ReportFieldOutput.Label)							AS Field,	
				ReportFieldOutput.Type,	
				if(ReportFieldOutput.Field LIKE '\_%', -1, ReportFieldOutput.Width)		AS Width,	
				ReportFieldOutput.LinkPage,	
				ReportFieldOutput.LinkPageValue,
				ifnull(myOutput.FieldOrder, ReportFieldOutput.FieldOrder)				AS FieldOrder,
				ifnull(myOutput.SortOrder, ReportFieldOutput.SortOrder)					AS SortOrder
		FROM 	ReportFieldOutput
				left JOIN myOutput		ON myOutput.Field = ReportFieldOutput.Field
		WHERE 	ReportKey = pReportKey
				AND (myOutput.Field is not null OR ReportFieldOutput.Field LIKE '\_%')
		ORDER 	BY SortOrder
		);

	SELECT 	GROUP_CONCAT(InternalField order BY FieldOrder SEPARATOR ',')
	INTO 	@ReportOutputFields
	FROM 	myReportFieldOutput
	WHERE 	NOT InternalField LIKE '\_%';

	-- Generate the Fields for the select: VendorName as `The Vendor`, InvoiceNo as `Inv #`
	SELECT 	GROUP_CONCAT(concat(InternalField, ' as ', '`', Field , '`') order BY FieldOrder SEPARATOR ',')
	INTO 	@SQLSelectFields
	FROM 	myReportFieldOutput;

	-- Build the order by clause any absolute number is treated as 1st 2nd 3rd etc, but -2, for example means descending
	SELECT 	GROUP_CONCAT(concat(InternalField, if(SortOrder>0,' ASC', ' DESC')) order BY abs(SortOrder) SEPARATOR ',')
	INTO 	@SQLSelectOrderBy
	FROM 	myReportFieldOutput
	WHERE 	nullif(SortOrder, 0) is not null;
	SET @SQLSelectOrderBy = ifnull(@SQLSelectOrderBy, '1, 2');

	-- the the select the will be run at the end.  Asuu ing the final output in a Temp Tbale called 
	SET @SQLSelect = Concat('Select ', @SQLSelectFields, ' from myReportData order by ', @SQLSelectOrderBy);

	SELECT Field, Type, Width, LinkPage, LinkPageValue from myReportFieldOutput WHERE Width <> -1 ORDER by FieldOrder;












	-- ******************************************************************************************
	--
	--
	-- 									Generate the report
	--
	--
	-- ******************************************************************************************

	SET @Approver = NULL;
	SET @InvoiceNo = NULL;
	SET @Vendor = NULL;
	SET @InvoiceAmount1 = NULL;
	SET @InvoiceAmount2 = NULL;
	SET @InvoiceType = NULL;
	SET @InvoiceDate1 = NULL;
	SET @InvoiceDate2 = NULL;
	SET @ScanDate1 = NULL;
	SET @ScanDate2 = NULL;
	SET @LastActionDate1 = NULL;
	SET @LastActionDate2 = NULL;
	SET @DueDate1 = NULL;
	SET @DueDate2 = NULL;
	SET @Comment = NULL;
	SET @Status = NULL;
	SET @Department = NULL;
	SET @CompanyCode = NULL;
	set @POorNonPO = NULL;
	set @CheckNumber = null;
	set @isConfidential = NULL;
	set @GLCode = null;

	CALL _x_StringToRows(pCriteria, '■');

	IF MOD((SELECT COUNT(*) FROM tSearchList), 2) <> 0 THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Improperly coded string; Parameters not paired.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;

	OPEN curParms;
readParms:
	LOOP
		FETCH curParms INTO DataValue;
		IF done THEN
			LEAVE readParms;
		END IF;
		SET @DataValue = DataValue;
		IF DataValue = 'Approver' THEN
			FETCH curParms INTO DataValue;
			SET @Approver = DataValue;
		ELSEIF DataValue = 'Vendor' THEN
			FETCH curParms INTO DataValue;
			SET @Vendor = DataValue;
		ELSEIF DataValue = 'InvoiceAmount1' THEN
			FETCH curParms INTO DataValue;
			SET @InvoiceAmount1 = CAST(DataValue AS decimal(18, 2));
		ELSEIF DataValue = 'InvoiceAmount2' THEN
			FETCH curParms INTO DataValue;
			SET @InvoiceAmount2 = CAST(DataValue AS decimal(18, 2));
		ELSEIF DataValue = 'InvoiceType' THEN
			FETCH curParms INTO DataValue;
			SET @InvoiceType = DataValue;
		ELSEIF DataValue = 'POorNonPO' THEN
			FETCH curParms INTO DataValue;
			SET @POorNonPO = DataValue;
		ELSEIF DataValue = 'CheckNumber' THEN
			FETCH curParms INTO DataValue;
			SET @CheckNumber = DataValue;
		ELSEIF DataValue = 'isConfidential' THEN
			FETCH curParms INTO DataValue;
			SET @isConfidential = CASE WHEN DataValue = 'True' THEN 1 ELSE 0 END;
		ELSEIF DataValue = 'GLCode' THEN
			FETCH curParms INTO DataValue;
			SET @GLCode = DataValue;
		ELSEIF DataValue = 'InvoiceDate1' THEN
			FETCH curParms INTO DataValue;
			SET @InvoiceDate1 = DATE(DataValue);
		ELSEIF DataValue = 'InvoiceDate2' THEN
			FETCH curParms INTO DataValue;
			SET @InvoiceDate2 = DATE(DataValue);
		ELSEIF DataValue = 'InvoiceDateSEL1' THEN
			FETCH curParms INTO DataValue;
			SET @InvoiceDate1 = _x_ReturnReportDateKeyword(DataValue);
		ELSEIF DataValue = 'InvoiceDateSEL2' THEN
			FETCH curParms INTO DataValue;
			SET @InvoiceDate2 = _x_ReturnReportDateKeyword(DataValue);
		ELSEIF DataValue = 'ScanDate1' THEN
			FETCH curParms INTO DataValue;
			SET @ScanDate1 = DATE(DataValue);
		ELSEIF DataValue = 'ScanDate2' THEN
			FETCH curParms INTO DataValue;
			SET @ScanDate2 = DATE(DataValue);
		ELSEIF DataValue = 'ScanDateSEL1' THEN
			FETCH curParms INTO DataValue;
			SET @ScanDate1 = _x_ReturnReportDateKeyword(DataValue);
		ELSEIF DataValue = 'ScanDateSEL2' THEN
			FETCH curParms INTO DataValue;
			SET @ScanDate2 = _x_ReturnReportDateKeyword(DataValue);
		ELSEIF DataValue = 'PaymentDueDate1' THEN
			FETCH curParms INTO DataValue;
			SET @PaymentDueDate1 = DATE(DataValue);
		ELSEIF DataValue = 'PaymentDueDate2' THEN
			FETCH curParms INTO DataValue;
			SET @PaymentDueDate2 = DATE(DataValue);
		ELSEIF DataValue = 'PaymentDueDateSEL1' THEN
			FETCH curParms INTO DataValue;
			SET @PaymentDueDate1 = _x_ReturnReportDateKeyword(DataValue);
		ELSEIF DataValue = 'PaymentDueDateSEL2' THEN
			FETCH curParms INTO DataValue;
			SET @PaymentDueDate2 = _x_ReturnReportDateKeyword(DataValue);
		ELSEIF DataValue = 'LastActionDate1' THEN
			FETCH curParms INTO DataValue;
			SET @LastActionDate1 = DATE(DataValue);
		ELSEIF DataValue = 'LastActionDate2' THEN
			FETCH curParms INTO DataValue;
			SET @LastActionDate2 = DATE(DataValue);
		ELSEIF DataValue = 'LastActionDateSEL1' THEN
			FETCH curParms INTO DataValue;
			SET @LastActionDate1 = _x_ReturnReportDateKeyword(DataValue);
		ELSEIF DataValue = 'LastActionDateSEL2' THEN
			FETCH curParms INTO DataValue;
			SET @LastActionDate2 = _x_ReturnReportDateKeyword(DataValue);
		ELSEIF DataValue = 'Comment' THEN
			FETCH curParms INTO DataValue;
			SET @Comment = DataValue;
		ELSEIF DataValue = 'Department' THEN
			FETCH curParms INTO DataValue;
			SET @Department = DataValue;
		ELSEIF DataValue = 'InvoiceStatus' THEN
			FETCH curParms INTO DataValue;
			SET @Status = DataValue;
		ELSEIF DataValue = 'CompanyCode' THEN
			FETCH curParms INTO DataValue;
			SET @CompanyCode = DataValue;
		ELSE
			SET @ErrMsg = CONCAT('Improperly coded string; Unknown keyword [', DataValue, '].');
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @ErrMsg, MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;

	END LOOP;
	CLOSE curParms;


	drop TEMPORARY TABLE IF EXISTS myApprovers;
	CREATE TEMPORARY TABLE IF NOT EXISTS myApprovers AS (
			select 	UserId
			from	User
			where 	ClientId = @ClientId
					and @Approver Like concat('%', UserId, '%')
		);

	drop TEMPORARY TABLE IF EXISTS GLCodeInInvoice;
	CREATE TEMPORARY TABLE IF NOT EXISTS GLCodeInInvoice AS (
			select InvoiceId from PendingApprovalHistory where GLCodeId = @GLCode
			union all select InvoiceId from TempApprovalHistory where GLCodeId = @GLCode
			union all select InvoiceId from ApprovalHistory where GLCodeId = @GLCode
		);

	SET @Sep = CHAR(254);

	CALL _x_StringToRegEx(@Comment);


 	drop TEMPORARY TABLE IF EXISTS myReportData;
 	CREATE TEMPORARY TABLE IF NOT EXISTS myReportData AS (
		SELECT
				_x_GetFormatedValue(ClientCompany.CompanyCode, ClientCompany.Description, @CodePosition)						as Company,
				Vendor.VendorName,
				Vendor.VendorNo,
				IFNULL(Invoice.InvoiceNo, '') 																					AS InvoiceNo,
				date(Invoice.InvoiceDate) 																						AS InvoiceDate,
					Case	when InvoiceType = 'Invoice' then
								case when Invoice.IsPOInvoice = true then concat('PO:', ifnull(Invoice.PONUmber, '')) 
									else 'Non PO' END
							when InvoiceType = 'Archive' then
								case when Invoice.IsPOInvoice = true then concat('PO:', ifnull(Invoice.PONUmber, ''), '/Archive') 
									else 'Archive' END
							else InvoiceType end 																				as InvoiceType,
				Invoice.InvoiceTotal			 																				AS InvoiceTotal,
				CONCAT(InvoiceStatus.StateName, CASE WHEN IsPaused = 1 THEN '/Paused' ELSE '' END) 								AS InvoiceStatus,
				concat(ifnull(concat(nullif(PausedInvoice.Comment, ''), char(13), char(10)), ''), ifnull(Invoice.Comment, '')) 	AS Comment,
				IFNULL(Invoice.LastActionBy, '') 																				AS LastActionBy,
				convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone)														AS ScannedDate,
				convert_tz(Invoice.LastActionDate, 'GMT', @@session.time_zone)													AS LastActionDate,
				Invoice.InvoiceId																								AS _InvoiceId
		FROM 	Invoice
				INNER JOIN InvoiceStatus 		ON InvoiceStatus.StateId = Invoice.ApprovalStatusId
				left join PaymentStatus ps		ON Invoice.InvoiceId = ps.InvoiceId
				left join _x_PaymentStatus xps	on xps.Id = ps.Id
				left JOIN PausedInvoice 		ON PausedInvoice.InvoiceId = Invoice.InvoiceId
				LEFT JOIN Vendor				ON Invoice.VendorId = Vendor.VendorId
				LEFT JOIN ClientCompany  		ON ClientCompany.CompanyCode = Invoice.CompanyCode
													and ClientCompany.ClientId = Invoice.ClientId
		WHERE 	Invoice.ClientId = @ClientId
				AND Invoice.IsDeleted = FALSE
				AND Regexp_Like(concat(IFNULL(Invoice.Comment, ''), @Sep, IFNULL(PausedInvoice.Comment, '')), @Comment, 'mi')
				AND Invoice.InvoiceTotal BETWEEN IFNULL(@InvoiceAmount1, Invoice.InvoiceTotal) AND IFNULL(@InvoiceAmount2, Invoice.InvoiceTotal)
				AND locate(Invoice.InvoiceType, IFNULL(@InvoiceType, Invoice.InvoiceType)) > 0
				AND Invoice.IsPOInvoice = IFNULL(@POorNonPO, Invoice.IsPOInvoice)
				AND ifnull(xps.PaymentReference, '') = ifnull(IFNULL(@CheckNumber, xps.PaymentReference), '')
				AND ifnull(Invoice.IsConfidential, 0) = IFNULL(@isConfidential, ifnull(Invoice.IsConfidential, 0))
	
				-- AND IFNULL(Invoice.CompanyCode, '') = IFNULL(IFNULL(@CompanyCode, Invoice.CompanyCode), '')
			
				AND Invoice.VendorId = IFNULL(@Vendor, Invoice.VendorId)
				AND Invoice.InvoiceDate BETWEEN IFNULL(@InvoiceDate1, Invoice.InvoiceDate) AND IFNULL(@InvoiceDate2, Invoice.InvoiceDate)
				AND Invoice.ScannedDate BETWEEN IFNULL(@ScanDate1, Invoice.ScannedDate) AND IFNULL(@ScanDate2, Invoice.ScannedDate)
				AND Invoice.PaymentDueDate BETWEEN IFNULL(@PaymentDueDate1, Invoice.PaymentDueDate) AND IFNULL(@PaymentDueDate2, Invoice.PaymentDueDate)
				AND Invoice.LastActionDate BETWEEN IFNULL(@LastActionDate1, Invoice.LastActionDate) AND IFNULL(@LastActionDate2, Invoice.LastActionDate)
				AND LOCATE(CONCAT(',', IFNULL(Invoice.ApprovalStatusId, -1), ','), CONCAT('%,', IFNULL(IFNULL(@Status, Invoice.ApprovalStatusId), -1), ',%')) > 0
				AND LOCATE(CONCAT(',', IFNULL(Invoice.VendorSiteId, -1), ','), CONCAT('%,', IFNULL(IFNULL(@Department, Invoice.VendorSiteId), -1), ',%')) > 0
				and (
						@GLCode is null
						or (
							@GLCode is not NULL
							and exists (select 1 from GLCodeInInvoice chk where chk.InvoiceId = Invoice.InvoiceId limit 1)
							)
					)
				and (
						@Approver is NULL
						or (
								@Approver is not NULL
								and exists (select	1 
											from	InvoiceHistory
											where 	InvoiceHistory.InvoiceId = Invoice.InvoiceId	
													and Action in ('Approve', 'Reject', 'Delegation', 'Delegate', 'Request')
													and (select 1 from myApprovers where UserId = ActorId)
											)
							)
					)
		);








	-- ******************************************************************************************
	-- 										END OF REPORT
	-- ******************************************************************************************
    PREPARE stmt FROM @SQLSelect;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;

	SELECT count(*) INTO @RecordCount FROM myReportData;
	set @TotalTime = time_to_Sec(timediff(UTC_TIMESTAMP(), @StartTime));


	-- Record History info
	call _x_ReportGenerateSendToHistory(@ClientId, pSource, pReportKey, pCriteria, @ReportOutputFields, @RecordCount, @TotalTime, pUsers, pRoles, @OutputFormat, @isBcc);


/*

-- call _x_ReportGenerate_InvoiceStatus('Schedule', 50, null, null, null, null, null); 
call _x_ReportGenerate_InvoiceStatus('Generated', null, 88, 'InvoiceStatus', 'ScanDate1■2023-11-01■ScanDate2■2023-12-31', 'Company■myLabelCompany/Store■100■0■VendorName■myLabelVendor Name■2■0■VendorNo■myLabelVendor No■3■0■InvoiceNo■myLabelInvoice No■4■0■InvoiceDate■myLabelDate■5■0■InvoiceType■myLabelType■6■0■InvoiceTotal■myLabelTotal■7■0■', '022b30f2-dddd-49b8-a4aa-e2045d704f29', null);


*/


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportGenerate_UserDetail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportGenerate_UserDetail`(IN pSource VARCHAR(10), IN pReportScheduleId INT, IN pClientId INT, IN pReportKey VARCHAR(20), pCriteria TEXT, pReportFieldOutput TEXT, IN pUsers MEDIUMTEXT, IN pRoles MEDIUMTEXT)
ThisProc:
	BEGIN	
-- noformat
	DECLARE done 			INT DEFAULT FALSE;
	DECLARE DataValue 		MEDIUMTEXT;
	DECLARE curParms 		CURSOR FOR SELECT * FROM tSearchList;
	DECLARE CONTINUE 		HANDLER FOR NOT FOUND SET done = TRUE;

	SET SESSION group_concat_max_len = 1000000;

	IF pSource = 'Schedule' THEN
		-- Get the schedule data
		CALL _x_ReportGenerateGetScheduleInfo(pReportScheduleId, pClientId, pReportKey, pCriteria, pReportFieldOutput, pUsers, pRoles);

		SET @@SESSION.max_sp_recursion_depth=1;
		-- Recursive call
		CALL _x_ReportGenerate_UserDetail('Run', pReportScheduleId, pClientId, pReportKey, pCriteria, pReportFieldOutput, pUsers, pRoles);
		LEAVE ThisProc;
	END IF;

	SET @StartTime = UTC_TIMESTAMP();
	SET @isBcc = NULL;
	SET @OutputFormat = NULL;
	-- Take the Criteria and parse it to get the fields and their values
	IF pSource = 'Generated' AND pReportScheduleId IS NOT NULL THEN
		SELECT 	ReportClientSchedule.ClientId, ReportClientSchedule.OutputFormat, ReportClientSchedule.isHideRecipients
		INTO 	@ClientId, @OutputFormat, @isBcc
		FROM 	ReportClientSchedule
		WHERE 	ReportScheduleId = pReportScheduleId;
	ELSEIF pReportScheduleId IS NOT NULL THEN -- This is executed if scheduled
		SELECT 	ReportClientSchedule.OutputFormat, ReportClientSchedule.isHideRecipients
		INTO 	@OutputFormat, @isBcc
		FROM 	ReportClientSchedule
				INNER JOIN 	ReportClient 	ON ReportClient.ReportKey = ReportClientSchedule.ReportKey
												AND ReportClient.ClientId = ReportClientSchedule.ClientId
		WHERE 	ReportScheduleId = pReportScheduleId
				AND ReportClientSchedule.isActive = 1
				AND ReportClient.isActive = 1;
		IF @OutputFormat IS NULL THEN
			SET pClientId = NULL;
			SET @ClientId = NULL;
		END IF;
	END IF;

	SET @ClientId = IFNULL(pClientId, @ClientId);

	IF @ClientId IS NULL THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This Report or Schedule is not active', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;

	SET @CodePosition = 2;
	CALL _x_GetClientParam(@ClientId, 'CodePosition', @CodePosition);
	CALL _x_SetClientTimeZone(@ClientId);

	-- ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** 
	--
	-- Temp Table with all field to output with their label and sort order
	--
	--
	DROP TEMPORARY TABLE IF EXISTS myOutput;
	CREATE TEMPORARY TABLE IF NOT EXISTS myOutput (
		Field 			VARCHAR(50),
		Label 			VARCHAR(50),
		FieldOrder 		INT NOT NULL,
		SortOrder 		INT NULL
		);

	SET done = FALSE;
	CALL _x_StringToRows(pReportFieldOutput, '■');
	OPEN curParms;
readFields:
	LOOP
		FETCH curParms INTO DataValue;
		IF done THEN
			LEAVE readFields;
		END IF;
		SET @OutputField = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputLabel = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputFieldOrder = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputSortOrder = DataValue;
		INSERT INTO myOutput VALUES (@OutputField, @OutputLabel, @OutputFieldOrder, NULLIF(@OutputSortOrder, 0));

	END LOOP;
	CLOSE curParms;
	SET done= FALSE;



	-- xref to get addition info including any internal ids for linking
	DROP TEMPORARY TABLE IF EXISTS myReportFieldOutput;
	CREATE TEMPORARY TABLE IF NOT EXISTS myReportFieldOutput (
		SELECT 	ReportFieldOutput.Field 												AS InternalField,	
				IFNULL(myOutput.Label, ReportFieldOutput.Label)							AS Field,	
				ReportFieldOutput.Type,	
				IF(ReportFieldOutput.Field LIKE '\_%', -1, ReportFieldOutput.Width)		AS Width,	
				ReportFieldOutput.LinkPage,	
				ReportFieldOutput.LinkPageValue,
				IFNULL(myOutput.FieldOrder, ReportFieldOutput.FieldOrder)				AS FieldOrder,
				IFNULL(myOutput.SortOrder, ReportFieldOutput.SortOrder)					AS SortOrder
		FROM 	ReportFieldOutput
				LEFT JOIN myOutput		ON myOutput.Field = ReportFieldOutput.Field
		WHERE 	ReportKey = pReportKey
				AND (myOutput.Field IS NOT NULL OR ReportFieldOutput.Field LIKE '\_%')
		ORDER 	BY SortOrder
		);

	SELECT 	GROUP_CONCAT(InternalField ORDER BY FieldOrder SEPARATOR ',')
	INTO 	@ReportOutputFields
	FROM 	myReportFieldOutput
	WHERE 	NOT InternalField LIKE '\_%';

	-- Generate the Fields for the select: VendorName as `The Vendor`, InvoiceNo as `Inv #`
	SELECT 	GROUP_CONCAT(CONCAT(InternalField, ' as ', '`', Field , '`') ORDER BY FieldOrder SEPARATOR ',')
	INTO 	@SQLSelectFields
	FROM 	myReportFieldOutput;

	-- Build the order by clause any absolute number is treated as 1st 2nd 3rd etc, but -2, for example means descending
	SELECT 	GROUP_CONCAT(CONCAT(InternalField, IF(SortOrder>0,' ASC', ' DESC')) ORDER BY ABS(SortOrder) SEPARATOR ',')
	INTO 	@SQLSelectOrderBy
	FROM 	myReportFieldOutput
	WHERE 	NULLIF(SortOrder, 0) IS NOT NULL;
	SET @SQLSelectOrderBy = IFNULL(@SQLSelectOrderBy, '1, 2');

	-- the the select the will be run at the end.  Asuu ing the final output in a Temp Tbale called 
	SET @SQLSelect = CONCAT('Select ', @SQLSelectFields, ' from myReportData order by ', @SQLSelectOrderBy);

	SELECT Field, Type, Width, LinkPage, LinkPageValue FROM myReportFieldOutput WHERE Width <> -1 ORDER BY FieldOrder;












	-- ******************************************************************************************
	--
	--
	-- 									Generate the report
	-- 	0. Change the report NAME IN 3 places in this SP
	-- 		a. Drop PROC
	-- 		b, Create PROC
	-- 		c. Recursive Call
	-- 	1. Create the QUERY (efficient SIMPLE AND only 1 SQL STATEMENT)
	-- 	2. Put the QUERY WHERE myReportData IS placed.  It is possible other temp tables are needed TO spead up the processing
	-- 		a. The fields should be properly set allowing the dev to dientify the list of fields available for the interface
	-- 		b. Add the criteria to the already existing where clause, this will allow the dev to identifying all the report criteria
	-- 	3. Adjust the loop to retrieve all the criteria
	-- 	4. Create the entries in the following tables to allow the interface to properly react with it.
	-- 		a.	Table:Report			This lists the report name and the the SP to call
	-- 		b.	Table:ReportFields		This is the list of all fields the criteria
	-- 		c.	Table:ReportFieldOutput	This are the output field names
	-- 		d.	Make sure the _x_ReportFieldValues handles any new fields (if it does not make changes to the SP and before activating, musk publish new _x_ReportFieldValues
	-- 		e.  Activate the report for all clients
	--
	--   	f. enjoy the ride
	--
	-- ******************************************************************************************

	SET @Approver = NULL;
	SET @Department = NULL;
	SET @ActiveorDeactive = NULL;
	

	CALL _x_StringToRows(pCriteria, '■');

	IF MOD((SELECT COUNT(*) FROM tSearchList), 2) <> 0 THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Improperly coded string; Parameters not paired.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;

	OPEN curParms;
readParms:
	LOOP
		FETCH curParms INTO DataValue;
		IF done THEN
			LEAVE readParms;
		END IF;
		SET @DataValue = DataValue;
		IF DataValue = 'Approver' THEN
			FETCH curParms INTO DataValue;
			SET @Approver = DataValue;
		ELSEIF DataValue = 'Department' THEN
			FETCH curParms INTO DataValue;
			SET @Department = DataValue;
		ELSEIF DataValue = 'YesNo' THEN
			FETCH curParms INTO DataValue;
			SET @ActiveorDeactive = DataValue;
		ELSE
			SET @ErrMsg = CONCAT('Improperly coded string; Unknown keyword [', DataValue, '].');
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @ErrMsg, MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;

	END LOOP;
	CLOSE curParms;


	DROP TEMPORARY TABLE IF EXISTS myApprovers;
	CREATE TEMPORARY TABLE IF NOT EXISTS myApprovers AS (
			SELECT 	UserId
			FROM	`User`
			WHERE 	ClientId = @ClientId
					AND @Approver LIKE CONCAT('%', UserId, '%')
		);


 	DROP TEMPORARY TABLE IF EXISTS myReportData;
 	CREATE TEMPORARY TABLE IF NOT EXISTS myReportData AS (
		SELECT 
				ifnull(
						(	
							SELECT	GROUP_CONCAT(_x_GetFormatedValue(d.DepartmentName, d.Description, @CodePosition) order by _x_GetFormatedValue(d.DepartmentName, d.Description, @CodePosition) SEPARATOR ', ')
							FROM	UserDepartment ud
									INNER JOIN Department d	ON d.Id = ud.DepartmentId
							WHERE	ud.UserId = u.UserId
									AND d.IsActive = 1
						), '') 																				AS Departments,
			    CONCAT(u.LastName, ', ', u.FirstName) 														AS Employee,
			    u.Email 																					AS Email,
			    u.UserName 																					AS UserName,
				ifnull(
						(	
							SELECT	GROUP_CONCAT(cr.RoleName order by cr.RoleName SEPARATOR ', ')
							FROM	ClientUserRoles cur
									INNER JOIN ClientRoles cr	ON cr.RoleId = cur.RoleId
							WHERE	cur.UserId = u.UserId
						), '(not assigned)') 																AS Roles,
			    CASE 	WHEN u.IsActive = 1 THEN 'Yes'
						ELSE 'No' END 																		AS Active,
			    CASE 	WHEN u.EnableEscalation = 1 THEN 'Yes'
						ELSE 'No'  END 																		AS Escalation,
			    CASE 	WHEN u.LimitMailPerDay = 0 THEN 'None'
						WHEN u.LimitMailPerDay = 1 THEN 'Once per day'
						WHEN u.LimitMailPerDay = 2 THEN 'Immediately'
						ELSE 'Unknown'END 																	AS EmailNotification,
			    convert_tz(u.LastPasswordChangeDate, 'GMT', @@session.time_zone)							AS LastPasswordChangeDate
		FROM	User AS u
				inner JOIN _x_Client AS xcl 				    ON xcl.ClientId = u.ClientId
		WHERE 	u.ClientId = @ClientId 
				AND IsCloudxUser = 0
				AND u.IsActive = IFNULL(@ActiveorDeactive, u.IsActive)
				AND (
					@Approver IS NULL
					OR (
							@Approver IS NOT NULL
							AND EXISTS (SELECT	1 
										FROM	myApprovers approvers
										WHERE 	approvers.UserId = u.UserId
										)
						))
				AND (@Department is NULL
						or (@Department is not NULL 
							AND EXISTS (select 1 FROM UserDepartment ud WHERE ud.UserId = u.UserId AND IFNULL(ud.Id, -1) = IFNULL(IFNULL(@Department, ud.Id), -1))
							))
				AND u.IsActive = IFNULL(@ActiveorDeactive, u.IsActive)
		GROUP BY 	u.UserId, u.LastName, u.FirstName

		);


/*

	call _x_ReportDelete ('UserDetail', 'Confirm');

	insert into Report (ReportKey, 				ReportName, 			ReportGrouping, 		SortOrderGrouping, 	SortOrderName, 	isInternal, StoredProc) 
				values ('UserDetail', 	'User Detail', 	'Administration',		99,					1, 				0,			'_x_ReportGenerate_UserDetail');


	Insert into ReportFields (	ReportKey,		Field,					Label, 				DataType, 			FieldOrder,	DependencyField,	ShowOn)
					SELECT 		'UserDetail', 	'Approver', 			'Approver', 		'MultiSelect', 		20,			NULL,				0
		UNION ALL	SELECT 		'UserDetail', 	'Department', 			'Department',		'Select', 			30,			null,				0
		UNION ALL	SELECT 		'UserDetail', 	'YesNo', 				'Is Active', 		'Radio', 			40,			Null,				0;


	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)		values ('UserDetail', 	'Employee', 								'Name',							'Text',		150, 1, 1);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)		values ('UserDetail', 	'UserName', 								'Username',						'Text',		150, 2, null);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)		values ('UserDetail', 	'Email',									'Email',						'Text',		150, 3, null);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)		values ('UserDetail', 	'Roles', 									'Roles',						'Text',		200, 4, null);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)		values ('UserDetail', 	'Departments', 								'Departments',					'Text',		200, 5, null);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)		values ('UserDetail', 	'Escalation', 								'Escalation',					'Text',		80, 6, null);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)		values ('UserDetail', 	'EmailNotification', 						'Email Notification',			'Text',		120, 7, null);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)		values ('UserDetail', 	'LastPasswordChangeDate', 					'Password Changed',				'DateTime',	120, 8, null);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)		values ('UserDetail', 	'Active',									'Active',						'Text',		80, 9, null);


	-- Make sure the _x_ReportFieldValues handles any new fields

	call _x_ReportActivate ('UserDetail', 1, 1, 'Confirm');

*/





	-- ******************************************************************************************
	-- 										END OF REPORT
	-- ******************************************************************************************
    PREPARE stmt FROM @SQLSelect;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;

	SELECT COUNT(*) INTO @RecordCount FROM myReportData;
	SET @TotalTime = TIME_TO_SEC(TIMEDIFF(UTC_TIMESTAMP(), @StartTime));


	-- Record History info
	CALL _x_ReportGenerateSendToHistory(@ClientId, pSource, pReportKey, pCriteria, @ReportOutputFields, @RecordCount, @TotalTime, pUsers, pRoles, @OutputFormat, @isBcc);


/*

-- call _x_ReportGenerate_InvoiceStatus('Schedule', 50, null, null, null, null, null); 
call _x_ReportGenerate_InvoiceStatus('Generated', null, 88, 'InvoiceStatus', 'ScanDate1■2023-11-01■ScanDate2■2023-12-31', 'Company■myLabelCompany/Store■100■0■VendorName■myLabelVendor Name■2■0■VendorNo■myLabelVendor No■3■0■InvoiceNo■myLabelInvoice No■4■0■InvoiceDate■myLabelDate■5■0■InvoiceType■myLabelType■6■0■InvoiceTotal■myLabelTotal■7■0■', '022b30f2-dddd-49b8-a4aa-e2045d704f29', null);

*/


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportGenerate_UserLimit` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportGenerate_UserLimit`(IN pSource VARCHAR(10), IN pReportScheduleId INT, IN pClientId INT, IN pReportKey VARCHAR(20), pCriteria TEXT, pReportFieldOutput TEXT, IN pUsers MEDIUMTEXT, IN pRoles MEDIUMTEXT)
ThisProc:
	BEGIN	
-- noformat
	DECLARE done 			INT DEFAULT FALSE;
	DECLARE DataValue 		MEDIUMTEXT;
	DECLARE curParms 		CURSOR FOR SELECT * FROM tSearchList;
	DECLARE CONTINUE 		HANDLER FOR NOT FOUND SET done = TRUE;

	SET SESSION group_concat_max_len = 1000000;

	IF pSource = 'Schedule' THEN
		-- Get the schedule data
		CALL _x_ReportGenerateGetScheduleInfo(pReportScheduleId, pClientId, pReportKey, pCriteria, pReportFieldOutput, pUsers, pRoles);

		SET @@SESSION.max_sp_recursion_depth=1;
		-- Recursive call
		CALL _x_ReportGenerate_UserLimit('Run', pReportScheduleId, pClientId, pReportKey, pCriteria, pReportFieldOutput, pUsers, pRoles);
		LEAVE ThisProc;
	END IF;

	SET @StartTime = UTC_TIMESTAMP();
	SET @isBcc = NULL;
	SET @OutputFormat = NULL;
	-- Take the Criteria and parse it to get the fields and their values
	IF pSource = 'Generated' AND pReportScheduleId IS NOT NULL THEN
		SELECT 	ReportClientSchedule.ClientId, ReportClientSchedule.OutputFormat, ReportClientSchedule.isHideRecipients
		INTO 	@ClientId, @OutputFormat, @isBcc
		FROM 	ReportClientSchedule
		WHERE 	ReportScheduleId = pReportScheduleId;
	ELSEIF pReportScheduleId IS NOT NULL THEN -- This is executed if scheduled
		SELECT 	ReportClientSchedule.OutputFormat, ReportClientSchedule.isHideRecipients
		INTO 	@OutputFormat, @isBcc
		FROM 	ReportClientSchedule
				INNER JOIN 	ReportClient 	ON ReportClient.ReportKey = ReportClientSchedule.ReportKey
												AND ReportClient.ClientId = ReportClientSchedule.ClientId
		WHERE 	ReportScheduleId = pReportScheduleId
				AND ReportClientSchedule.isActive = 1
				AND ReportClient.isActive = 1;
		IF @OutputFormat IS NULL THEN
			SET pClientId = NULL;
			SET @ClientId = NULL;
		END IF;
	END IF;

	SET @ClientId = IFNULL(pClientId, @ClientId);

	IF @ClientId IS NULL THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This Report or Schedule is not active', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;

	SET @CodePosition = 2;
	CALL _x_GetClientParam(@ClientId, 'CodePosition', @CodePosition);
	CALL _x_SetClientTimeZone(@ClientId);

	-- ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** 
	--
	-- Temp Table with all field to output with their label and sort order
	--
	--
	DROP TEMPORARY TABLE IF EXISTS myOutput;
	CREATE TEMPORARY TABLE IF NOT EXISTS myOutput (
		Field 			VARCHAR(50),
		Label 			VARCHAR(50),
		FieldOrder 		INT NOT NULL,
		SortOrder 		INT NULL
		);

	SET done = FALSE;
	CALL _x_StringToRows(pReportFieldOutput, '■');
	OPEN curParms;
readFields:
	LOOP
		FETCH curParms INTO DataValue;
		IF done THEN
			LEAVE readFields;
		END IF;
		SET @OutputField = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputLabel = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputFieldOrder = DataValue;
		FETCH curParms INTO DataValue;
		SET @OutputSortOrder = DataValue;
		INSERT INTO myOutput VALUES (@OutputField, @OutputLabel, @OutputFieldOrder, NULLIF(@OutputSortOrder, 0));

	END LOOP;
	CLOSE curParms;
	SET done= FALSE;



	-- xref to get addition info including any internal ids for linking
	DROP TEMPORARY TABLE IF EXISTS myReportFieldOutput;
	CREATE TEMPORARY TABLE IF NOT EXISTS myReportFieldOutput (
		SELECT 	ReportFieldOutput.Field 												AS InternalField,	
				IFNULL(myOutput.Label, ReportFieldOutput.Label)							AS Field,	
				ReportFieldOutput.Type,	
				IF(ReportFieldOutput.Field LIKE '\_%', -1, ReportFieldOutput.Width)		AS Width,	
				ReportFieldOutput.LinkPage,	
				ReportFieldOutput.LinkPageValue,
				IFNULL(myOutput.FieldOrder, ReportFieldOutput.FieldOrder)				AS FieldOrder,
				IFNULL(myOutput.SortOrder, ReportFieldOutput.SortOrder)					AS SortOrder
		FROM 	ReportFieldOutput
				LEFT JOIN myOutput		ON myOutput.Field = ReportFieldOutput.Field
		WHERE 	ReportKey = pReportKey
				AND (myOutput.Field IS NOT NULL OR ReportFieldOutput.Field LIKE '\_%')
		ORDER 	BY SortOrder
		);

	SELECT 	GROUP_CONCAT(InternalField ORDER BY FieldOrder SEPARATOR ',')
	INTO 	@ReportOutputFields
	FROM 	myReportFieldOutput
	WHERE 	NOT InternalField LIKE '\_%';

	-- Generate the Fields for the select: VendorName as `The Vendor`, InvoiceNo as `Inv #`
	SELECT 	GROUP_CONCAT(CONCAT(InternalField, ' as ', '`', Field , '`') ORDER BY FieldOrder SEPARATOR ',')
	INTO 	@SQLSelectFields
	FROM 	myReportFieldOutput;

	-- Build the order by clause any absolute number is treated as 1st 2nd 3rd etc, but -2, for example means descending
	SELECT 	GROUP_CONCAT(CONCAT(InternalField, IF(SortOrder>0,' ASC', ' DESC')) ORDER BY ABS(SortOrder) SEPARATOR ',')
	INTO 	@SQLSelectOrderBy
	FROM 	myReportFieldOutput
	WHERE 	NULLIF(SortOrder, 0) IS NOT NULL;
	SET @SQLSelectOrderBy = IFNULL(@SQLSelectOrderBy, '1, 2');

	-- the the select the will be run at the end.  Asuu ing the final output in a Temp Tbale called 
	SET @SQLSelect = CONCAT('Select ', @SQLSelectFields, ' from myReportData order by ', @SQLSelectOrderBy);

	SELECT Field, Type, Width, LinkPage, LinkPageValue FROM myReportFieldOutput WHERE Width <> -1 ORDER BY FieldOrder;


	SET @Approver = NULL;
	SET @Vendor = NULL;
	SET @Department = NULL;
	SET @ActiveorDeactive = NULL;
	SET @MaximumAmount1=NULL;
	SET @MaximumAmount2=NULL;

	CALL _x_StringToRows(pCriteria, '■');

	IF MOD((SELECT COUNT(*) FROM tSearchList), 2) <> 0 THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Improperly coded string; Parameters not paired.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;

	OPEN curParms;
readParms:
	LOOP
		FETCH curParms INTO DataValue;
		IF done THEN
			LEAVE readParms;
		END IF;
		SET @DataValue = DataValue;
		IF DataValue = 'Approver' THEN
			FETCH curParms INTO DataValue;
			SET @Approver = DataValue;
		ELSEIF DataValue = 'Vendor' THEN
			FETCH curParms INTO DataValue;
			SET @Vendor = DataValue;
		ELSEIF DataValue = 'Department' THEN
			FETCH curParms INTO DataValue;
			SET @Department = DataValue;
		ELSEIF DataValue = 'MaximumAmount1' THEN
			FETCH curParms INTO DataValue;
			SET @MaximumAmount1 = CAST(DataValue AS DECIMAL(18, 2));
		ELSEIF DataValue = 'MaximumAmount2' THEN
			FETCH curParms INTO DataValue;
			SET @MaximumAmount2 = CAST(DataValue AS DECIMAL(18, 2));
		ELSEIF DataValue = 'YesNo' THEN
			FETCH curParms INTO DataValue;
			SET @ActiveorDeactive = DataValue;
		ELSE
			SET @ErrMsg = CONCAT('Improperly coded string; Unknown keyword [', DataValue, '].');
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @ErrMsg, MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;

	END LOOP;
	CLOSE curParms;


	DROP TEMPORARY TABLE IF EXISTS myApprovers;
	CREATE TEMPORARY TABLE IF NOT EXISTS myApprovers AS (
			SELECT 	UserId
			FROM	`User`
			WHERE 	ClientId = @ClientId
					AND @Approver LIKE CONCAT('%', UserId, '%')
		);

 	DROP TEMPORARY TABLE IF EXISTS myReportData;
 	CREATE TEMPORARY TABLE IF NOT EXISTS myReportData AS (
		SELECT 
				CONCAT(IF(u.IsActive = 1, '', ' (*) '), u.LastName, ' ', u.FirstName) 						AS FirstApprover,
			    CASE 	WHEN u.IsActive = 1 THEN 'Yes'
						ELSE 'No' END 																		AS Active,
				ifnull(aba.MaximumAllowedAmount, '')														as MaximumAmount,
				CONCAT(IF(mgr.IsActive = 1, '', ' (*) '), mgr.LastName, ' ', mgr.FirstName) 				AS SecondApprover,
				COALESCE(d.DepartmentName, '') 					        									AS Departments,
				COALESCE(ass.SubStepName, '')																AS SubStepName,
				_x_GetFormatedValue(v.VendorNo, v.VendorName, @CodePosition)								AS Vendor
		FROM 	`User` u
			     LEFT JOIN ApprovalSubStepUser assu						ON assu.UserId = u.UserId
			     LEFT OUTER JOIN ApprovalSubStep ass					ON ass.ApprovalSubStepId = assu.ApprovalSubStepId
			     LEFT OUTER JOIN ApprovalSubStepUserVendor assuv        ON assuv.UserId = assu.UserId
			     LEFT OUTER JOIN Vendor v								ON v.VendorId = assuv.VendorId
			     LEFT OUTER JOIN ApproverByAmount aba					ON aba.UserId = assuv.UserId
			     LEFT OUTER JOIN User mgr								ON aba.SecondApproverId = mgr.UserId
			     LEFT OUTER JOIN Department d							ON d.Id IN (aba.CostCenters)
		WHERE 	u.ClientId = @ClientId
			     AND u.IsCloudxUser = FALSE
			     AND IFNULL (v.IsActive, TRUE) = TRUE
			     AND u.IsActive = IFNULL(@ActiveorDeactive, u.IsActive)
			     AND (
						  (@MaximumAmount1 IS NULL AND @MaximumAmount2 IS NULL)
						  OR (aba.MaximumAllowedAmount >= IFNULL(@MaximumAmount1, aba.MaximumAllowedAmount) 
						      AND aba.MaximumAllowedAmount <= IFNULL(@MaximumAmount2, aba.MaximumAllowedAmount))
						)
			     AND ifnull(v.VendorId, -1) = ifnull(IFNULL(@Vendor, v.VendorId), -1)				     
			     AND (@Department IS NULL OR FIND_IN_SET(@Department, aba.CostCenters) > 0)
			     AND (@Approver IS NULL
						OR (
								@Approver IS NOT NULL
								AND EXISTS (SELECT	1 
											FROM	myApprovers approvers
											WHERE 	approvers.UserId = u.UserId
												)
								))
				    
		ORDER BY FirstApprover
		);

/*

	call _x_ReportDelete ('UserLimit', 'Confirm');

	insert into Report (ReportKey, 		ReportName, 	ReportGrouping, 		SortOrderGrouping, 	SortOrderName, 	isInternal, StoredProc) 
				values ('UserLimit', 	'User Limits', 	'Administration',		99,					1, 				0,			'_x_ReportGenerate_UserLimit');


	Insert into ReportFields (	ReportKey,		Field,				Label, 					DataType, 			FieldOrder,	DependencyField,	ShowOn)
					SELECT 		'UserLimit', 	'YesNo', 			'Is Active', 			'Radio', 			10,			NULL,				0
		UNION ALL	SELECT 		'UserLimit', 	'Approver', 		'Approver', 			'MultiSelect', 		20,			NULL,				0
		UNION ALL	SELECT 		'UserLimit', 	'MaximumAmount#', 	'Maximum Amount',		'Currency', 		30,			NULL,				0
		UNION ALL	SELECT 		'UserLimit', 	'Department', 		'Department', 			'Select', 			40,			null,				0
		union all	SELECT 		'UserLimit',	'Vendor', 			'Vendor', 				'Select',	 		50,			null,				0;


	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)		values ('UserLimit', 	'FirstApprover', 	'First Approver',	'Text',		200, 1, 2);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)		values ('UserLimit', 	'Active',			'Active',			'Text',		80,  2, 1);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)		values ('UserLimit', 	'MaximumAmount', 	'MaximumAmount',	'Currency',	140, 3, null);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)		values ('UserLimit', 	'SecondApprover', 	'Second Approver',	'Text',		200, 4, null);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)		values ('UserLimit', 	'Departments',		'Departments',		'Text',		200, 5, null);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)		values ('UserLimit', 	'SubStepName', 		'SubStep',			'Text',		140, 6, null);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)		values ('UserLimit', 	'Vendor', 			'Vendor',			'Text',		200, 7, null);


	-- Make sure the _x_ReportFieldValues handles any new fields

	call _x_ReportActivate ('UserLimit', 1, 1,'Confirm');

*/






	-- ******************************************************************************************
	-- 										END OF REPORT
	-- ******************************************************************************************
    PREPARE stmt FROM @SQLSelect;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;

	SELECT COUNT(*) INTO @RecordCount FROM myReportData;
	SET @TotalTime = TIME_TO_SEC(TIMEDIFF(UTC_TIMESTAMP(), @StartTime));


	-- Record History info
	CALL _x_ReportGenerateSendToHistory(@ClientId, pSource, pReportKey, pCriteria, @ReportOutputFields, @RecordCount, @TotalTime, pUsers, pRoles, @OutputFormat, @isBcc);


/*

-- call _x_ReportGenerate_InvoiceStatus('Schedule', 50, null, null, null, null, null); 
call _x_ReportGenerate_InvoiceStatus('Generated', null, 88, 'InvoiceStatus', 'ScanDate1■2023-11-01■ScanDate2■2023-12-31', 'Company■myLabelCompany/Store■100■0■VendorName■myLabelVendor Name■2■0■VendorNo■myLabelVendor No■3■0■InvoiceNo■myLabelInvoice No■4■0■InvoiceDate■myLabelDate■5■0■InvoiceType■myLabelType■6■0■InvoiceTotal■myLabelTotal■7■0■', '022b30f2-dddd-49b8-a4aa-e2045d704f29', null);

*/


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportHistorySearch` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportHistorySearch`(
-- noformat
	IN pUserId 			varchar(36),							-- GlobalSearch■stop
	IN pSearchString 	mediumtext,								-- InvoiceNo■12335■InvoiceAmount2■45000		
	IN pRows 			int,									-- 10
	IN pPage 			int)
ThisProc:
	BEGIN
-- noformat	
		DECLARE done int DEFAULT FALSE;
		DECLARE DataValue mediumtext;
		DECLARE curParms CURSOR FOR SELECT * FROM tSearchList;
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

		if pPage <= 1 and pRows >= 500 then
			call _x_UserActivity(pUserId, 'Export All:ReportHistorySearch', pSearchString);
		else
			call _x_UserActivity(pUserId, 'ReportHistorySearch', concat(pSearchString, ' /Page:', pPage));
		end if;

		SET @RunDate1 = NULL;
		SET @RunDate2 = NULL;
		set @isScheduled = NULL;
		set @Users = null;
		set @ReportKeys = null;

		-- Break up the Data passed into the following order
		CALL _x_StringToRows(pSearchString, '■');

		IF MOD((SELECT COUNT(*) FROM tSearchList), 2) <> 0 THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Improperly coded search string; Parameters not paired.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;

		OPEN curParms;
	readParms:
		LOOP
			FETCH curParms INTO DataValue;
			IF done THEN
				LEAVE readParms;
			END IF;
			SET @DataValue = DataValue;
			if 	DataValue = 'RunDate1' THEN
				FETCH curParms INTO DataValue;
				SET @RunDate1 = DATE(DataValue);
			ELSEIF DataValue = 'RunDate2' THEN
				FETCH curParms INTO DataValue;
				SET @RunDate2 = DATE(DataValue);
			ELSEIF DataValue = 'isScheduled' THEN
				FETCH curParms INTO DataValue;
				SET @isScheduled = DataValue;
			ELSEIF DataValue = 'ReportKey' THEN
				FETCH curParms INTO DataValue;
				SET @ReportKeys = DataValue;
			ELSEIF DataValue = 'User' THEN
				FETCH curParms INTO DataValue;
				SET @Users = DataValue;
			ELSE
				SET @ErrMsg = CONCAT('Improperly coded search string; Unknown keyword [', DataValue, '].');
				SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @ErrMsg, MYSQL_ERRNO = 1;
				LEAVE ThisProc;
			END IF;

			INSERT INTO SystemAdvanceSearchFieldsUserStats (SearchType, Field, UserId, TotalUsed)
				VALUES ('ReportHistorySearch', REPLACE(REPLACE(@DataValue, '1', '#'), '2', '#'), pUserId, 1)
			ON DUPLICATE KEY UPDATE TotalUsed = TotalUsed + 1;


		END LOOP;
		CLOSE curParms;

		SELECT ClientId, IFNULL(IsCloudxUser, 0) 
		INTO	@ClientId, @isCloudxUser
		FROM User WHERE UserId = pUserId;
		call _x_SetClientTimeZone(@ClientId);

		drop TEMPORARY TABLE IF EXISTS myRecipients;
		if @Users is not null THEN
			CREATE TEMPORARY TABLE IF NOT EXISTS myRecipients AS (
					select	UserId
					from 	User
					where 	ClientId = @ClientId
							and @Users like concat('%', UserId, '%')
				);
		else
			CREATE TEMPORARY TABLE IF NOT EXISTS myRecipients (
				UserId char(36)
				);		
		end if;


		SET pRows = IFNULL(pRows, 10);
		SET pPage = IFNULL(pPage, 1);
		SET pPage = ((pPage - 1) * pRows);
		SET @Sep = CHAR(254);

		select	convert_tz(rr.RunDateTime, 'GMT', @@session.time_zone)		as RunDateTime,
				r.ReportName, 
				if(rr.isScheduled = 1, 'Yes', 'No') 						as isScheduled,
				(	
					SELECT	GROUP_CONCAT(concat(u.LastName, ', ', u.FirstName) order by u.LastName, u.FirstName SEPARATOR '|')
					FROM	ReportRunRecipients rrr
							INNER JOIN User u	ON u.UserId = rrr.UserId
													and u.ClientId = @ClientId
					WHERE	rrr.ReportRunId = rr.ReportRunId
					ORDER	BY 1
				)					 										AS Recipients,
				Criteria 													as Criteria,
				FieldOutput													AS Fields,
				TotalRecords												AS TotalCount,
				RunSeconds													AS TimeInSecords
		from 	ReportRun rr
				inner join 	Report r		on r.ReportKey = rr.ReportKey
		WHERE 	rr.ClientId = @ClientId
				and date(convert_tz(rr.RunDateTime, 'GMT', @@session.time_zone)) between ifnull(@RunDate1, date(convert_tz(rr.RunDateTime, 'GMT', @@session.time_zone))) and ifnull(@RunDate2, date(convert_tz(rr.RunDateTime, 'GMT', @@session.time_zone)))
				AND (rr.isScheduled = @isScheduled or @isScheduled is null)
				and concat(',', ifnull(@ReportKeys, rr.ReportKey) , ',') like concat('%,', rr.ReportKey, ',%')
				and (
						@Users is NULL
						or (
								@Users is not NULL
								and exists (
											select	1 
											from 	ReportRunRecipients rrr 
													inner join myRecipients 	on myRecipients.UserId = rrr.UserID
											where 	rrr.ReportRunId = rr.ReportRunId
											)
							)
					)

		ORDER BY 1 desc, 2
		LIMIT pPage, pRows;

--		call _x_ReportHistorySearch('01b8668d-37d2-4e87-aef9-af4c3f18694e', 'RunDate1■2024-12-02', 10, 1);


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportList` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportList`(IN pUserId char(36), in pClientId int, INOUT pCount int)
ThisProc:
	BEGIN

-- noformat

	-- If pCount is null 	then it returs the list of reports the user is allowed
	-- If pCount is 0 		then the routine returns NOThing and sets the pCount = Total Reports allowed

	SET @IsAdmin = 0;

	SELECT	IFNULL(IsCloudxUser, 0)
	INTO	@isCloudxUser
	FROM	User
	WHERE	UserId = pUserId;

	if exists (SELECT	cr.*
				FROM	ClientUserRoles cur
						INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
				WHERE	cr.isAdmin	= 1
						AND cur.UserId	= pUserId
				limit 	1) then 
		SET @IsAdmin = 1;
	END IF;

	drop TEMPORARY TABLE IF EXISTS MyReports;

	CREATE TEMPORARY TABLE IF NOT EXISTS MyReports AS (
		-- report templates with access
		SELECT
				ReportGrouping,
				CONCAT(ReportName, CASE WHEN isInternal = 1 THEN ' (Internal)' ELSE '' END) 	AS Name,
				rc.isActive,
				Report.ReportKey,
				null as ReportScheduleId,
				Report.StoredProc,
				SortOrderGrouping, 
				SortOrderName, 
				concat(Report.ReportName, '/', 0)												as SortReportName
		FROM 	Report 
				inner JOIN ReportClient rc 				ON rc.ReportKey = Report.ReportKey
		WHERE 	Report.isActive = 1
				and rc.isActive = 1
				AND rc.ClientId = pClientId
				AND Report.isInternal IN (@isCloudxUser, 0)
				and (@isCloudxUser = 1 
					or @IsAdmin = 1
					or (
						@isCloudxUser = 0 
						and @IsAdmin = 0
						and 
							(
							not exists 	(select 	1 from ReportClientRestrictions rcr	where rcr.ReportKey = Report.ReportKey and rcr.ClientId = pClientId)	-- No restrictions
							or exists 	(select		1 
											from	ReportClientRestrictions rcr	
													inner join ClientUserRoles cur	on cur.UserId = pUserId		
																						and cur.RoleId = rcr.RoleId
											where	rcr.ReportKey = Report.ReportKey 
													and rcr.ClientId = pClientId
													)
							)								
						)
					)
		union ALL 
		-- Saved reports
		SELECT
				ReportGrouping,
				rcs.ReportName							AS Name,
				rc.isActive,
				Report.ReportKey,
				rcs.ReportScheduleId,	
				Report.StoredProc,
				SortOrderGrouping, 
				SortOrderName, 
				concat(Report.ReportName, '/', 1)		as SortReportName
		FROM 	Report 
				inner JOIN ReportClient rc 				ON rc.ReportKey = Report.ReportKey
				inner join ReportClientSchedule rcs		on rcs.ReportKey = Report.ReportKey
															and rcs.ClientId = rc.ClientId
															and rcs.isScheduled = 0
															and rcs.UserId = pUserId
		WHERE 	Report.isActive = 1
				and rc.isActive = 1
				AND rc.ClientId = pClientId
				AND Report.isInternal IN (@isCloudxUser, 0)
				and (@isCloudxUser = 1 
					or @IsAdmin = 1
					or (
						@isCloudxUser = 0 
						and @IsAdmin = 0
						and 
							(
							not exists 	(select 	1 from ReportClientRestrictions rcr	where rcr.ReportKey = Report.ReportKey and rcr.ClientId = pClientId)	-- No restrictions
							or exists 	(select		1 
											from	ReportClientRestrictions rcr	
													inner join ClientUserRoles cur	on cur.UserId = pUserId		
																						and cur.RoleId = rcr.RoleId
											where	rcr.ReportKey = Report.ReportKey 
													and rcr.ClientId = pClientId
													)
							)								
						)
					)
		);
		
	if pCount is null then
		select 	*								
		from 	MyReports
		ORDER 	BY SortOrderGrouping, ReportGrouping, SortOrderName, SortReportName, 2;
	else
		select 	count(*)
		into 	pCount
		from 	MyReports;
	end if;
		

/*
set @Count = null;
call _x_ReportList('01b8668d-37d2-4e87-aef9-af4c3f18694e', 88, @Count);
set @Count = 0;
call _x_ReportList('01b8668d-37d2-4e87-aef9-af4c3f18694e', 88, @Count);
select @Count;
*/
	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportRead` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportRead`(IN pUserId char(36), in pClientId int, IN pReportKey varchar(20), in pisScheduled bit, in pReportScheduleId int)
ThisProc:
	BEGIN

-- noformat

	/*
		if pReportScheduleId is supplied then this means he is reading a currently saved schedule/saved report
		if pReportKey and pisScheduled is supplied then this is either a new report to generate/email or to create a new schedule
	*/

	SET @IsAdmin = 0;

	SELECT	IFNULL(IsCloudxUser, 0)
	INTO	@isCloudxUser
	FROM	User
	WHERE	UserId = pUserId;

	if exists (SELECT	cr.*
				FROM	ClientUserRoles cur
						INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
				WHERE	cr.isAdmin	= 1
						AND cur.UserId	= pUserId
				limit 	1) then 
		SET @IsAdmin = 1;
	END IF;

	if pReportScheduleId is not null THEN
		select 	ReportKey, isScheduled
		into 	pReportKey, pisScheduled
		from 	ReportClientSchedule
		where 	ReportScheduleId = pReportScheduleId;
	end if;

	-- read the fields for a new report or schedule
	SELECT
			rf.Field,
			rf.Label,
			rf.DataType,
			rf.DependencyField,
			rfv.Value
	FROM	ReportFields rf
			left join ReportClientSchedule rcs 				on	rcs.ReportKey = rf.ReportKey
																and rcs.ReportScheduleId = pReportScheduleId												
			left join ReportClientScheduleFieldValues rfv 	on 	rfv.ReportScheduleId = rcs.ReportScheduleId
																and rfv.Field = rf.Field
	WHERE	rf.ReportKey		= pReportKey
			and (
					(pisScheduled = 0 and rf.ShowOn in (0,1))
					or (pisScheduled = 1 and rf.ShowOn in (0,2))
				)
	ORDER 	BY rf.FieldOrder, rf.Label;


-- call _x_ReportRead('01b8668d-37d2-4e87-aef9-af4c3f18694e', 88, null, 0, null);
-- call _x_ReportRead('01b8668d-37d2-4e87-aef9-af4c3f18694e', 88, 'InvoiceStatus', 0, null);
-- call _x_ReportRead('01b8668d-37d2-4e87-aef9-af4c3f18694e', 88, 'InvoiceStatus', 0, null);
-- call _x_ReportRead('01b8668d-37d2-4e87-aef9-af4c3f18694e', 88, null, null, 1);

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ReportRestriction` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ReportRestriction`(in pType varchar(10), IN pReportKey varchar(20), in pClientId int, in pRoleId int)
ThisProc:
	BEGIN

	select 	isInternal 
	into 	@isInternal
	from 	Report r
	where 	pReportKey = ReportKey;


-- noformat
	if pType = 'Remove' THEN
		delete from ReportClientRestrictions where ReportKey = pReportKey and ClientId = pClientId;
		Leave ThisProc;
	elseif pType = 'Add' THEN
		insert into ReportClientRestrictions (ReportKey, ClientId, RoleId)
			values (pReportKey, pClientId, pRoleId);
	elseif pType = 'List' THEN
		SELECT
				cr.RoleId,
				cr.RoleName,
				CASE WHEN cur.RoleId IS NULL THEN 0 ELSE 1 END AS IsAssigned,
				isInternal
		FROM	ClientRoles cr
				LEFT JOIN ReportClientRestrictions cur	ON cur.RoleId = cr.Roleid
															and cur.ReportKey = pReportKey
		WHERE	cr.ClientId = pClientId
				AND (
						cr.isInternal = @isInternal
					)
		ORDER BY 4 DESC, 3 DESC, 2;
	end if;

/*

call _x_ReportRestriction('Remove', 'R1', 88, null);
call _x_ReportRestriction('Add', 'R1', 88, 10);
call _x_ReportRestriction('Add', 'R1', 88, 11);
call _x_ReportRestriction('Add', 'R1', 88, 12);
call _x_ReportRestriction('List', 'R1', 88, null);
*/


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_Security` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_Security`(IN pUserId char(36))
ThisProc:
-- noformat 
  BEGIN

	select 	ClientId 
	into 	@ClientId
	from 	User u
	where	UserId = pUserId;

	set @IsAdmin 				= 0;
	set @GridPause				= null;
	set @GridCaptured			= null;
	set @GridApproval			= null;
	set @GridException			= null;
	set @GridApproved			= null;



    IF EXISTS (SELECT	1
		        FROM	ClientUserRoles cur
		          		INNER JOIN ClientRoles cr		ON	cr.RoleId = cur.RoleId
		            										AND cr.isAdmin = 1
		        WHERE	cur.UserId = pUserId) THEN
		drop TEMPORARY TABLE if exists tmp;
		CREATE TEMPORARY TABLE tmp (
			SELECT	FunctionKey,
			  		1 				AS Access
			FROM	SystemFunctions
			ORDER	BY 1
		);
		set @GridPause				= 1;
		set @GridCaptured			= 1;
		set @GridApproval			= 1;
		set @GridException			= 1;
		set @GridApproved			= 1;
		SET	@IsAdmin 				= 1;
    ELSE
		drop TEMPORARY table if exists tmp;
		CREATE TEMPORARY TABLE tmp (
			SELECT	crf.FunctionKey,
			  		MAX(Access) 	AS Access
			FROM	ClientUserRoles cur
					INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
					INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
			WHERE	cur.UserId = pUserId
			GROUP	BY crf.FunctionKey
			ORDER	BY 1
		);

		-- if exists (select 1 from tmp where Access >= 1 and FunctionKey in ('InvoiceUpdate', 'InvoiceReset', 'InvoiceUnpause')) then 
		if exists (select 1 from tmp where Access >= 1 and FunctionKey in ('InvoiceUnpause')) then 
			set @GridPause = 1;
		end if;

		if exists (SELECT	1 from _x_UserParameters up	WHERE up.UserId = pUserId and up.IsExceptionHandler = 1) then 
			set @GridException = 1;
		end if;

		if exists (select 1 from tmp where Access >= 1 and FunctionKey in ('SystemDataEntry', 'InvoiceNew')) then
			set @GridCaptured = 1;
		end if;

    END IF;


/*
Mark as Paid	 btn-BatchActionMarkPaid
Archive	 btn-BatchActionArchive
*/



	

	insert into tmp 		select 	'GridPause', 					1 where @GridPause = 1;
	insert into tmp 		select 	'GridCaptured', 				1 where @GridCaptured = 1;
	insert into tmp 		select 	'GridApproval', 				1 where @GridApproval = 1;
	insert into tmp 		select 	'GridException', 				1 where @GridException = 1;
	insert into tmp 		select 	'GridApproved', 				1 where @GridApproved = 1;
	
	insert into tmp 		select 	'ExportApprovedInvoices', 		1 where exists (select 1 		-- If the Client uses EXPORT Data AND requires a confirmation of the job
																					from 	_x_ClientParameters xcp 
																					where 	ClientId = @ClientId 
																							and xcp.ParamKey = 'ExportApprovedInvoices'
																							and xcp.ParamValue = 'Yes'
																					intersect
																					select 1 
																					from 	_x_ClientParameters xcp 
																					where 	ClientId = @ClientId 
																							and xcp.ParamKey = 'ExportApprovedInvoicesAutomatically'
																							and xcp.ParamValue = 'No'
																						);



	
	set @UsesPayments = 0;
	-- Check if Client has Payments
	if exists (	select	1 
				from	ClientCompany  
				where	ClientId = @ClientId 
						and nullif(UserField1, '') is not null 
						and isActive = 1) then 
		set @UsesPayments = 1;
	end if;

	-- Check if User has any reports
	set @ReportCount = 0;
	call _x_ReportList(pUserId, @ClientId, @ReportCount);
	if @ReportCount > 0 THEN
		insert into tmp 		select 	'Reports', 		1;
	end if;



	drop TEMPORARY TABLE if exists myFinalSecurity;
	CREATE TEMPORARY TABLE myFinalSecurity (
		select	* 
		from	tmp
		where 	(@UsesPayments = 1 or (@UsesPayments = 0 and not FunctionKey Like 'Payment%'))
	);


	-- ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** 
	--
	-- Set up the security to see if the user is allow to do any batch functions from the search grid 
	--
	-- ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** 
	INSERT 	INTO myFinalSecurity
			SELECT	Concat('SearchGridbtnBatch', if(FunctionKey='InvoiceApprove', 'InvoiceArchive', FunctionKey)), 1
			FROM 	tmp
			WHERE 	@IsAdmin = 1
					AND FunctionKey IN ('InvoicePause', 'InvoiceUnPause', 
										'InvoiceHold', 	'InvoiceUnHold', 
										'InvoiceAssignUser',
										'InvoiceReject', 'InvoiceDelete', 'InvoiceApprove')  -- InvoiceApprove becomes InvoiceArchive
			union all
			SELECT	'SearchGridbtnBatchInvoiceStatusPaid', 1
			WHERE 	@IsAdmin = 1
			union all
			SELECT	'SearchGridbtnBatchDownload', 1
			WHERE 	@IsAdmin = 1
			union all
			SELECT	'SearchGridbtnBatchEmail', 1
			WHERE 	@IsAdmin = 1;
		


-- select * FROM SystemFunctions;



	SELECT 	*
	FROM 	myFinalSecurity
	ORDER 	by 1;





/*
call _x_Security('b43b812f-f35e-4c13-8cb4-a15a4ffbc900');  

-- call _x_Security('18b61a24-d0a4-11e9-b055-22000a1f9f3d');
call _x_Security('dfb816df-f6f5-41c0-9d43-8fbe626fed09');
call _x_Security('2c92b404-048c-11ee-8962-02c102131f31');

*/

  END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_SecurityGenerate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_SecurityGenerate`(IN pClientId int, IN pFirstTime int)
ThisProc:
	BEGIN

-- noformat

		if pClientId is null THEN
			select 'No client passed';
			Leave ThisProc;
		end if;

		SET pFirstTime = IFNULL(pFirstTime, 0);
		
		if pFirstTime = 0 then
			if exists (select 1 from ClientRoles where ClientId = pClientId) then             
				select 'This client has already been migrated!';
				Leave ThisProc;
			end if;
        end if;
	


		DELETE
		FROM	ClientUserRoles
		WHERE	UserId IN (	SELECT	Userid
							FROM	User
							WHERE	ClientId = IFNULL(pClientId, ClientId));
		DELETE
		FROM	ClientRoleFunctions
		WHERE	RoleId IN (SELECT	RoleId
							FROM	ClientRoles
							WHERE	ClientId = IFNULL(pClientId, ClientId));
		DELETE
		FROM	ClientRoles
		WHERE	ClientId = IFNULL(pClientId, ClientId);

		IF pFirstTime = 1 THEN
			ALTER TABLE ClientRoles AUTO_INCREMENT = 1;
		END IF;


		CREATE TEMPORARY TABLE IF NOT EXISTS tmpSuperAdmins (
			UserId char(36)
		);

		CREATE TEMPORARY TABLE IF NOT EXISTS tmpUsers (
			ClientId 		int,
			UserId 			char(36),
			isAdmin 		int,
			IsCloudxUser 	int
		);

		Update User set IsCloudxUser = 1 
			where ClientId = IFNULL(pClientId, ClientId)
					and ifnull(IsCloudxUser, 0) = 0
					and (
							Email LIKE '%@cloudxdpo.com'
							or RoleId = 4
							or exists (select 1 from UserRoles ur where ur.UserId = User.UserId and ur.RoleId = 4)
						);

		INSERT INTO tmpUsers (ClientId, UserId, isAdmin, IsCloudxUser)
			SELECT	User.ClientId,
					User.UserId,
					CASE WHEN UserName LIKE '%admin' THEN 1 ELSE 0 END,
					CASE WHEN User.Email LIKE '%@cloudxdpo.com' THEN 1 ELSE IFNULL(IsCloudxUser, 0) END
			FROM	User
					INNER JOIN Client	ON Client.ClientId = User.ClientId
			WHERE	Client.ClientId = IFNULL(pClientId, Client.ClientId)
					AND User.IsActive = 1
					AND (
							(Client.Email <> ''	AND pClientId IS NULL)
							OR pClientId IS NOT NULL
						);


		INSERT INTO ClientRoles (RoleName, ClientId, isAdmin, isLocked, isInternal)
			SELECT	RoleName,
					ClientId,
					isAdmin,
					isLocked,
					isInternal
			FROM	(SELECT DISTINCT ClientId FROM	tmpUsers) tmpUsers
					CROSS JOIN (
											SELECT	'Super Administrator' AS RoleName,	1 AS isAdmin,	1 AS isLocked,	1 AS isInternal,	1 AS InsertOrder
								UNION ALL	SELECT	'Data Entry',						0,				1,				1,					2
								UNION ALL	SELECT	'Approver',							0,				1,				0,					3
								UNION ALL	SELECT	'Supervisor',						0,				1,				0,					4
								UNION ALL	SELECT	'Search User',						0,				0,				0,					6					
								UNION ALL	SELECT	'Vendor',							0,				0,				0,					7					
								UNION ALL	SELECT	'Administrator',					1,				1,				0,					9
								UNION ALL	SELECT	'Buyer',							0,				0,				0,					10
								UNION ALL	SELECT	'Requestor',						0,				0,				0,					11
								UNION ALL	SELECT	'Procurement',						0,				0,				0,					12
								UNION ALL	SELECT	'Accounting',						0,				0,				0,					13
								UNION ALL	SELECT	'Auditor',							0,				1,				0,					14) Roles
			ORDER BY ClientId, isInternal DESC, InsertOrder;


		INSERT INTO ClientRoleFunctions (RoleId, FunctionKey, Access)
			SELECT	cr.RoleId,
					ss.FunctionKey,
					CASE WHEN cr.RoleName = 'Auditor' THEN CASE WHEN ss.FunctionOptions LIKE '%=0%' THEN 0 ELSE 1 END ELSE 1 END
			FROM	ClientRoles cr
					CROSS JOIN SystemFunctions ss
			WHERE	cr.ClientId = IFNULL(pClientId, cr.ClientId)
					AND (ss.Migrate LIKE CONCAT('%', cr.RoleName, '%') OR ss.Migrate = '')
					AND cr.RoleName <> 'Super Administrator'
			ORDER BY 1, 2;


		-- Insert all Cloud X supervisors as Super Users
		INSERT INTO ClientUserRoles (UserId, RoleId)
			SELECT	DISTINCT	UserId,	cr.RoleId
			FROM	tmpUsers u
					INNER JOIN ClientRoles cr	ON cr.ClientId = u.ClientId
			WHERE	(cr.RoleName = 'Super Administrator'
					AND u.IsCloudxUser = 1
					AND u.isAdmin = 1)
			ORDER	BY 2, 1;

		-- Insert all Cloud X users in the data entry role for Cloudx
		INSERT INTO ClientUserRoles (UserId, RoleId)
			SELECT	DISTINCT	UserId, cr.RoleId
			FROM	tmpUsers u
					INNER JOIN ClientRoles cr	ON cr.ClientId = u.ClientId
			WHERE	(cr.RoleName = 'Data Entry'
					AND u.IsCloudxUser = 1
					AND u.isAdmin = 0)
			ORDER	BY 2, 1;



		INSERT INTO ClientUserRoles (UserId, RoleId)
			SELECT	DISTINCT ur.UserId, cr.roleid
			from 	(	select	* 
								from	UserRoles 
								where 	not exists (select 1 from UserRoles chk where chk.UserId = UserRoles.UserId and chk.RoleId = 7)
					            union all 	
								select 	*
								from	UserRoles 
								where 	RoleId = 7) ur -- Auditors can ONLY have the Auditor Role.
					INNER JOIN tmpUsers u				ON u.UserId = ur.UserId
					INNER JOIN Role r					ON r.RoleId = IFNULL(ur.RoleId, 5) -- Default to Search User
					INNER JOIN ClientRoles cr			ON cr.ClientId = u.ClientId
			WHERE	u.ClientId = IFNULL(pClientId, u.ClientId)
					AND cr.RoleName LIKE CONCAT('%', case when r.RoleName = 'Exception Handler' then 'Approver' else r.RoleName end , '%')  -- Treat all Exception Handlers as Approvers later they will be tagger in the user table
					AND cr.isInternal = 0
					AND u.IsCloudxUser = 0;


		INSERT INTO tmpSuperAdmins (UserId)
			SELECT DISTINCT	cur.UserId
			FROM ClientUserRoles cur
				INNER JOIN User u				ON u.UserId = cur.UserId
													AND u.ClientId = IFNULL(pClientId, u.ClientId)
													AND u.IsActive = 1
													AND u.IsCloudxUser = 1
				INNER JOIN ClientRoles cr		ON cr.RoleId = cur.RoleId
													AND cr.isAdmin = 1 and cr.isInternal = 1;



		-- Delete all roles if the user is already a SUPER ADMIN
		DELETE	cur
		FROM	ClientUserRoles cur
				INNER JOIN User u				ON u.UserId = cur.UserId
													AND u.ClientId = IFNULL(pClientId, u.ClientId)
				INNER JOIN ClientRoles cr		ON cr.RoleId = cur.RoleId
													AND cr.isAdmin = 0
				INNER JOIN tmpSuperAdmins sa	ON sa.UserId = cur.UserId;

		insert into _x_UserParameters (UserId)
			select	UserId
			from	User
			where 	ClientId in (select distinct ClientId from ClientRoles cr)
					and not exists (select 1 from _x_UserParameters xup where xup.UserId = User.UserId);

		-- If they have the RoleId = 3  <- Exception handler, then set the flag to true
		Update 	_x_UserParameters Data
				inner join tmpUsers t	on t.UserId = Data.UserId
		set 	Data.isExceptionHandler = 1
		where 	t.IsCloudxUser = 0 
				and exists (select 1 from UserRoles ur where ur.UserId = t.UserId and ur.RoleId = 3);

		DROP TEMPORARY TABLE tmpUsers;
		DROP TEMPORARY TABLE tmpSuperAdmins;

		if not exists (Select 1 from _x_ClientParameters where ClientId = pClientId) THEN
			insert into _x_ClientParameters values (pClientId, 'Timezone', 								'US/Eastern');		-- Used to display dates with times in the correct timezone
			insert into _x_ClientParameters values (pClientId, 'GLCodeMask', 							'%');				-- The helps filter the GLcode for the client
			insert into _x_ClientParameters values (pClientId, 'GLCodeMaskRequired', 					'No');				-- If not required, those that match are placed first witha *, else they are not shown
			insert into _x_ClientParameters values (pClientId, 'CodePosition', 							'2');				-- Do we show [Code] Desc / Desc [Code] or Desc    1=Left or 2=Right or 0-No Code
			insert into _x_ClientParameters values (pClientId, 'ArchiveReasonSource', 					'Data');			-- Where are the reasons pulled from : Data/List
			insert into _x_ClientParameters values (pClientId, 'ArchiveReasonAllowAny', 				'Yes');				-- Can the user add something not on the list Yes/no
			insert into _x_ClientParameters values (pClientId, 'InvoiceNewDelayForCapture',			 	'10');				-- How many minutes after a user create a new invoice before it is sent to CAPTURE
			insert into _x_ClientParameters values (pClientId, 'ApprovedPossibleException', 			'60');				-- How many minutes before it it draws attention to possible issue
			insert into _x_ClientParameters values (pClientId, 'ExportApprovedInvoices', 				'No');				-- Is there an export process on approved invoiced
			insert into _x_ClientParameters values (pClientId, 'ExportApprovedInvoicesAutomatically', 	'No');				-- Is there an export process on approved invoiced
			insert into _x_ClientParameters values (pClientId, 'WorkStatusRefreshRate', 				'60');				-- RefreshRate in seconds
			insert into _x_ClientParameters values (pClientId, 'DashboardRefreshRate', 					'60');				-- RefreshRate in seconds
		end if;



		-- Migrate ClientSpecific Data
		delete from InvoiceArchiveReason where ClientId = pClientId;

		set @D = 	date(date_sub(now(), interval 6 month));
		insert into InvoiceArchiveReason(ClientId, ArchiveReason, TotalCount, LastUsed)
			Select 	Invoice.ClientId, left(ArchiveReason, 200), count(*), date(max(LastActionDate))
			from 	Invoice 
			where 	Invoice.isDeleted = 0
					and Invoice.ClientId = pClientId
					and nullif(Invoice.ArchiveReason, 'null') is not null  
					and length(Invoice.ArchiveReason) >= 3
			group 	by Invoice.ClientId, ArchiveReason
			having 	date(max(LastActionDate)) >= @D;

		
		
		Update 	_x_UserParameters set LaunchPage = 'Invoice'
		where 	UserId in (select	UserId
						from 	User
						where 	ClientId = pClientId
								and exists 	(select		1 
												from	ClientUserRoles cur
														inner join ClientRoles cr on cr.RoleId = cur.RoleId 
																						and cr.RoleName = 'Approver'
												where cur.UserId = User.UserId));
		

		Update 	_x_UserParameters set LaunchPage = 'Invoice'
		where 	UserId in (select	UserId
							from 	ClientUserRoles cur
									inner join ClientRoles cr 			on cr.RoleId = cur.RoleId 
									inner join ClientRoleFunctions crf 	on crf.RoleId = cur.RoleId
							where 	ClientId = pClientId
									and crf.FunctionKey = 'InvoiceAuditor');

		delete 
		from	ClientUserRoles
		where 	UserId in (
								select 	UserId
								from	User
								where 	UserId in (select	UserId
													from 	User
													where 	ClientId = pClientId
															and isCloudxUser = 1
															and not Email like '%@cloud%'));
		
		-- Every CloudX user user should have search user role
		insert into ClientUserRoles (UserId, RoleId)
			select 	UserId, aa.RoleId
			from	User
					cross join (select Roleid From ClientRoles where RoleName = 'Search User' and ClientId = pClientId) aa
			where 	UserId in (select	UserId
								from 	User
								where 	ClientId = pClientId
										and isCloudxUser = 1
										and not Email like '%@cloud%');	
		
	
 		-- Handle the Admin accounts that may have been badly assigned security
		UPDATE	User set isCloudxUser = 0
		where 	ClientId = pClientId
				and isCloudxUser = 1
				and not Email like '%@cloud%';
	
		delete 
		from	ClientUserRoles
		where	UserId in (select	UserId
								from 	User
								where 	ClientId = pClientId
										and isCloudxUser = 0
										and username like '%admin%')
				and RoleId in (select Roleid From ClientRoles where RoleName = 'Super Administrator' and ClientId = pClientId);
		
		insert into ClientUserRoles (UserId, RoleId)
			select 	UserId, aa.RoleId
			from	User
					cross join (select Roleid From ClientRoles where RoleName = 'Super Administrator' and ClientId = pClientId) aa
			where 	UserId in (select	UserId
								from 	User
								where 	ClientId = pClientId
										and isCloudxUser = 1
										and username like '%admin%')
					and not exists (select 1 from ClientUserRoles cr where cr.UserId = User.UserId and cr.RoleId = aa.RoleId);



	-- This is for clients with payments
	insert into _x_ClientCompany(Id, PaymentEnabled, PaymentProvider, PaymentCustomerCode)
		select	cc.Id,
				case when nullif(cc.UserField1, '') is null then 0 else 1 end,
				case when nullif(cc.UserField1, '') is null then null else 'REPAY' end,
				case when nullif(cc.UserField1, '') is null then null else cc.UserField1 end
		from ClientCompany cc
			inner join (select distinct ClientId from ClientRoles cr) Migrated on Migrated.ClientId = cc.ClientId
		where not exists (select 1 from _x_ClientCompany chk where chk.Id = cc.Id);

	-- Extended table for Payment info
	insert into _x_PaymentStatus (Id, PaymentDate, PaymentAmount, PaymentProvider, PaymentMethod, PaymentReference, PaymentNumber, PaymentExternalId)
		select	ps.Id,
				ps.ReceivedDate,
				ifnull(ps.DiscountAmount, ps.GrossAmount),
				case 
					when Invoice.UserField5 is not null or Invoice.UserField6 is not null	Then ifnull(xcc.PaymentProvider, 'REPAY')
					when ps.TransactionIdentifier = 'Fund Requested'	 					then ifnull(xcc.PaymentProvider, 'REPAY')
					else null end,
				case when Invoice.ApprovalStatusId in (7, 10, 11, 12, 13) then nullif(Invoice.UserField10, 'Pending') else null end,
				case when Invoice.ApprovalStatusId in (7, 10, 11, 12, 13) then ifnull(Invoice.CheckNumber, Invoice.UserField8) else null end,
				Invoice.UserField5,
				Invoice.UserField6
		from 	PaymentStatus ps
				inner JOIN	Invoice 				on Invoice.InvoiceId 	= ps.InvoiceId
				left join 	ClientCompany cc		on cc.ClientId 	= Invoice.ClientId
														and cc.CompanyCode = Invoice.CompanyCode
				inner join (select distinct ClientId from ClientRoles cr) Migrated on Migrated.ClientId = cc.ClientId
				left join 	_x_ClientCompany xcc	on xcc.Id = cc.Id
		where not exists (select 1 from _x_PaymentStatus chk where chk.Id = ps.Id)
		order by 1 desc;

	-- Setup the default security settins for a client
	insert into _x_Client (ClientId)
		select 	Distinct ClientId 
		from	ClientRoles
		where 	not exists (select 1 from _x_Client where _x_Client.ClientId = ClientRoles.ClientId);

UPDATE _x_Client SET Security_Authentication_Locations = 0;

	-- Build the current Payment Terms into new tabler



	-- Assign all active reports to this Client
	INSERT INTO ReportClient (ReportKey, ClientId, isActive)
		SELECT 	Report.ReportKey, Ids.ClientId, 1
		FROM 	Report
				CROSS JOIN (SELECT DISTINCT ClientId FROM ClientRoles) Ids
				LEFT JOIN ReportClient rc 	ON rc.ReportKey = Report.ReportKey AND rc.ClientId = Ids.ClientId
		WHERE 	rc.ReportKey IS NULL
				and Report.isActive = 1
				and not exists (select 1 from ReportClient chk where chk.ReportKey = Report.ReportKey and chk.ClientId = Ids.ClientId)
		ORDER BY 1,2;


	-- call _x_ExpenseReportGenerate(pClient, 0);

	-- If DB is dbQA or dbDEV then initial password and emails
	if DATABASE() = 'dbDev' or DATABASE() = 'dbQA' then 
		Update User set Password = 'O�!�r��A�-~�(b�ү�', email = 'spenning@cloudxdpo.com' where ClientId = pClientId;	-- pass@ap2024#
	end if;

	
-- select * from User where ClientId = 1 and Username = 'kettleadmin';
-- select * from _x_UserParameters xup where UserId = '2c92b404-048c-11ee-8962-02c102131f31';
-- Update _x_UserParameters set AccessCode = null, AccessDate = null where UserId = '2c92b404-048c-11ee-8962-02c102131f31';
-- Update User set Password = 'O�!�r��A�-~�(b�ү�', email = 'spenning@cloudxdpo.com' where UserId = '2c92b404-048c-11ee-8962-02c102131f31';

	/*

	select UserId, UserName, IsCloudxUser, IsActive, Email, password from User where ClientId = 1 and username like '%admin%';
	
	CALL _x_SecurityGenerate(88, 1);			-- Bongard
	CALL _x_SecurityGenerate(1, null);			-- Kettle
	CALL _x_SecurityGenerate(137, null);		-- Homer Skelton
	call _x_SecurityGenerate(86, null)			-- NOVA
	CALL _x_SecurityGenerate(147, null);
	
	*/

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_SetClientTimeZone` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_SetClientTimeZone`(IN pClientId int)
ThisProc:
	BEGIN

	-- noformat

	set 	@TZ = 'US/Eastern';

	SELECT	ifnull(nullif(ParamValue, ''), 'US/Eastern')
	INTO 	@TZ
	FROM 	_x_ClientParameters
	WHERE 	ClientId = pClientId
			and ParamKey = 'Timezone';

	set TIME_ZONE = @TZ;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_SigninAccess` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_SigninAccess`(IN `pUserId` char(36),
IN `pAccessCode` varchar(50),
IN `pAccessTail` char(2),
IN `pAccessDate` datetime)
BEGIN

-- noformat

	UPDATE _x_UserParameters 	set 
		AccessCode = pAccessCode,
		AccessTail = pAccessTail,
		AccessDate = pAccessDate
	WHERE UserId = pUserId;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_SigninAuthenticate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_SigninAuthenticate`(
-- noformat
	IN pLocationOnetimeKey  char(36)
  )
ThisProc:BEGIN
	DECLARE varAuthentication_Locations 	int;

	SET @Authentication_Locations		= 0;							-- -1 	= Always			0 = Never
	SET @UserId							= null;
	SET @IPaddress						= null;
	SET @Location						= null;
	SET @UserAgent						= null;
	SET @isStillValid					= 0;

	SELECT	UserId, IPaddress, Location, UserAgent, ValidUntil >= UTC_TIMESTAMP()
	INTO	@UserId, @IPaddress, @Location, @UserAgent, @isStillValid
	FROM	UserAuthenticatedLocation
	WHERE 	LocationOnetimeKey = pLocationOnetimeKey;


	if @UserId is null OR @isStillValid = 0  THEN 
		IF @UserId is NOT null THEN 
			DELETE	FROM	UserAuthenticatedLocation
					WHERE	UserId = @UserId
							AND ValidUntil IS NOT null;
		END if;
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Failed to authenticate within the allotted time.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;


	SELECT	_x_Client.Security_Authentication_Locations
	INTO	varAuthentication_Locations
	FROM	User
			inner JOIN _x_Client 			ON _x_Client.ClientId	= if(User.isCloudxUser = 1, 0, User.ClientId)
	WHERE 	UserId = @UserId;

	
	UPDATE 	UserAuthenticatedLocation	SET ValidUntil = NULL, LocationOnetimeKey = null
			WHERE	UserId = @UserId 
					AND ValidUntil is not null;

	drop TEMPORARY TABLE IF EXISTS myPermittedAuthenticatedLocations;
	create TEMPORARY TABLE if not exists myPermittedAuthenticatedLocations (
		SELECT	DateAdded
		FROM	UserAuthenticatedLocation
		WHERE 	UserId = @UserId
		ORDER 	by 1 desc
		LIMIT 	varAuthentication_Locations
		);

	DELETE	FROM UserAuthenticatedLocation
			WHERE	UserId = @UserId
					AND DateAdded not IN (select DateAdded FROM myPermittedAuthenticatedLocations);

	set @msg = Concat('A new computer/location was used to login.');
	set @msg = Concat(@msg, char(13), char(10), 'IP:', 			if(@IPaddress<>'', 		@IPaddress, 'Unknown'));
	set @msg = Concat(@msg, char(13), char(10), 'Location:', 	if(@Location<>'', 		@Location, 	'Unknown'));
	set @msg = Concat(@msg, char(13), char(10), 'Browser:', 	if(@UserAgent<>'', 		@UserAgent, 'Unknown'));
	call _x_Notify(@UserId, 'Autenticated location', @msg, 'Security', null, null, null);

/*

	This location/computer has been authenticated.

	Click on continue to return to the signin screen.


*/




/*
CALL _x_SigninAuthenticate('41cddaa2-c6d3-11ef-ba35-02198e5bae4b');
select * FROM UserAuthenticatedLocation;
SELECT * FROM UserNotification un ORDER by 1 desc LIMIT 1;

-- SELECT UserId, ClientId, isCloudxUser, Username, Password
-- FROM User 
-- WHERE UserId IN ('18b61a24-d0a4-11e9-b055-22000a1f9f3d', 'dfb816df-f6f5-41c0-9d43-8fbe626fed09') AND isActive = true;

*/

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_SigninCheck` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_SigninCheck`(
-- noformat
	IN pUsername    varchar(50),
	IN pPassword    varchar(50),
	in pIPaddress   varchar(15),
	in pLocation    varchar(500),
	IN pUserAgent   varchar(500)
  )
ThisProc:BEGIN
	

	SET @UserId 						= NULL;
	set @isAdmin 						= null;
	SET @Email 							= NULL;
	set @Security_Password_Attempts		= 7;				
	SET @Authentication_Locations		= 0;				-- -1 	= Always			0 = Never
	SET @Security_Authentication_Check	= 3;				-- 1 	= UserAgent only 	2=UserAgent/IPAddress 3=UserAgent/Location 
	SET @AccessTail 					= NULL;
	SET @AccessDate 					= NULL;
	SET @LocationTimeRemaining 			= null;
	SET @LocationOnetimeKey				= char(36);
	SET @FailCount 						= NULL;
	set @Password 						= null; 

	SET pIPaddress 	= ifnull(pIPaddress, '');
	SET pLocation 	= ifnull(pLocation, '');
	SET pUserAgent 	= ifnull(pUserAgent, '');

	SELECT	User.UserId,							User.Password,					User.Email,
			_x_Client.Security_Password_Attempts,
			_x_Client.Security_Authentication_Locations,
			_x_Client.Security_Authentication_Check,
			_x_UserParameters.AccessTail,			_x_UserParameters.AccessDate,	_x_UserParameters.FailCount
	INTO	@UserId, @Password, @Email, 
			@Security_Password_Attempts,
			@Authentication_Locations,
			@Security_Authentication_Check,
			@AccessTail, @AccessDate, @FailCount
	FROM	User
			inner JOIN _x_Client 			ON _x_Client.ClientId	= if(User.isCloudxUser = 1, 0, User.ClientId)
			LEFT JOIN _x_UserParameters 	ON User.UserId 			= _x_UserParameters.UserId
	WHERE User.UserName = pUsername
			AND User.IsActive = TRUE
			AND IFNULL(_x_UserParameters.FailCount, 0) < _x_Client.Security_Password_Attempts
	LIMIT 1;

	IF @UserId IS NOT NULL AND @FailCount IS NULL THEN
		INSERT INTO _x_UserParameters (UserId)
			VALUES (@UserId);
	END IF;


	CheckUser:BEGIN

		IF @UserId IS NULL THEN 
			LEAVE CheckUser;
		end if;

		-- Check if the location is authorized if not do not check password, return to sender so they can confirm the location then relogin
		IF @Authentication_Locations <> 0 THEN

			-- delete any previous access location that was never validated
			DELETE	FROM	UserAuthenticatedLocation
					WHERE	UserId = @UserId
							AND ValidUntil IS NOT null;

			IF not EXISTS (SELECT	1
							FROM	UserAuthenticatedLocation
							WHERE 	UserId = @UserId
									AND UserAgent = pUserAgent
									AND (
											@Security_Authentication_Check = 1
											OR (@Security_Authentication_Check = 2 AND IPAddress = pIPaddress)
											OR (@Security_Authentication_Check = 3 AND Location = pLocation)
										)
							) THEN 
				SET @LocationTimeRemaining	= 7;
				SET @LocationOnetimeKey		= UUID();
				
				INSERT INTO UserAuthenticatedLocation(UserId, IPAddress, Location, UserAgent, ValidUntil, LocationOnetimeKey)
					VALUES (@Userid, pIPaddress, pLocation, pUserAgent, DATE_ADD(UTC_TIMESTAMP(), INTERVAL @LocationTimeRemaining MINUTE), @LocationOnetimeKey);
				LEAVE CheckUser;
			end if;


		end IF;
            




		
		if pPassword <> @Password then 
			if @FailCount between @Security_Password_Attempts-2 and @Security_Password_Attempts-1 THEN
				set @msg = Concat('There has been a ', @FailCount, 'th attempt to login using your information.');
				set @msg = Concat(@msg, char(13), char(10), 'If this was not done by you, please contact your administrator immediately.');
				call _x_Notify(@UserId, 'Login attempts', @msg, 'Security', null, null, null);
			end if;
			SET @UserId 	= NULL;
			SET @Email 		= NULL;
			SET @AccessTail = NULL;
			SET @AccessDate = NULL;
		else
			if not exists 	   (SELECT	1
								FROM 	ClientUserRoles cur
										INNER JOIN ClientRoles cr	ON cr.RoleId = cur.RoleId
																		AND cr.isAdmin = 1
								WHERE cur.UserId = @UserId
								limit 1)
				and not exists (SELECT	1
								FROM	ClientUserRoles cur
										INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
										INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
								WHERE	cur.UserId = @UserId
										and Access >= 0
								limit 1) then
				SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Please contact your administrator.  You have no roles assigned.', MYSQL_ERRNO = 1;
				LEAVE ThisProc;
			end if;
		end if;


	END CheckUser;


	SELECT	@UserId 				AS UserId,
			@Email 					AS Email,
			@AccessTail 			AS AccessTail,
			@AccessDate 			AS AccessDate,
			@LocationTimeRemaining 	AS LocationTimeRemaining,
			@LocationOnetimeKey		AS LocationOnetimeKey;

/*
CALL _x_SigninCheck('aacevedo', 'O�!�r��A�-~�(b�ү�', '192.178.0.0', 'Laprairie6', 'Chrome');
-- CALL _x_SigninCheck('Bongardsadmin', 'O�!�r��A�-~�(b�ү�', '192.178.0.1', 'Laprairie', 'Chrome');

select * FROM UserAuthenticatedLocation;
-- 
-- SELECT UserId, ClientId, isCloudxUser, Username, Password
-- FROM User 
-- WHERE UserId IN ('18b61a24-d0a4-11e9-b055-22000a1f9f3d', 'dfb816df-f6f5-41c0-9d43-8fbe626fed09') AND isActive = true;

*/

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_SigninFailed` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_SigninFailed`(IN `pUsername` varchar(50))
BEGIN

-- noformat

	UPDATE 	User
			LEFT JOIN _x_UserParameters 	ON User.UserId = _x_UserParameters.UserID
	set 	_x_UserParameters.FailCount = _x_UserParameters.FailCount + 1
	WHERE 	User.UserName = pUsername;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_SigninReset` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_SigninReset`(IN pType tinyint, IN pClientId int, IN pUsername varchar(50),
                                                      IN pPassword varchar(50), IN pAccessCode varchar(50),
                                                      IN pAccessDate datetime)
BEGIN

-- noformat

	SET @ClientId 		= 0;
	SET @UserId 		= NULL;    
	SET @Email        = NULL;	

	IF (pType = 0) THEN

		SELECT	ClientId, UserId, Email
		INTO	@ClientId, @UserId, @Email
		FROM	User
		WHERE	UserName = pUsername
				AND IsActive = TRUE 
		LIMIT 1;

		IF (@ClientId > 0) THEN

			UPDATE 	User
					LEFT JOIN _x_UserParameters	ON User.UserId = _x_UserParameters.UserID
			SET 	_x_UserParameters.AccessCode 	= pAccessCode,
					_x_UserParameters.FailCount 	= 0,
					_x_UserParameters.AccessDate 	= pAccessDate
			WHERE	User.UserId = @UserId;

			call _x_Notify(@UserId, 'Password reset', 'Someone requested to reset your password', 'Security', null, null, null);

			SELECT	@ClientId AS ClientId, @Email AS Email;
		ELSE
			SELECT	0 AS ClientId, NULL AS Email;
		END IF;

	ELSEIF (pType = 1) THEN
		SELECT	_x_UserParameters.AccessDate
		FROM	User
				LEFT JOIN _x_UserParameters		ON User.UserId = _x_UserParameters.UserID
		WHERE	User.ClientId = pClientId
				AND _x_UserParameters.AccessCode = pAccessCode
				AND User.IsActive = TRUE 
		LIMIT 1;
	ELSE
		UPDATE	User
				LEFT JOIN _x_UserParameters		ON User.UserId = _x_UserParameters.UserID
		SET 	User.Password 					= pPassword,
				User.LastPasswordChangeDate 	= UTC_TIMESTAMP(),
				_x_UserParameters.AccessCode 	= NULL,
		        _x_UserParameters.AccessDate    = NULL
		WHERE	User.ClientId = pClientId
				AND _x_UserParameters.AccessCode = pAccessCode
				AND User.IsActive = TRUE;

		SELECT	1 AS ClientId;

	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_SigninSocial` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_SigninSocial`(IN pEmail varchar(100))
ThisProc:BEGIN
-- noformat

	SET @UserId = '';
	SELECT	UserId
	INTO 	@UserId
	FROM 	User AS u
	WHERE	u.UserName = pEmail
			AND u.IsCloudxUser = 0
			AND u.IsActive = TRUE;

	CALL _x_SigninSuccess(@UserId, null);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_SigninSuccess` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_SigninSuccess`(
-- noformat
	IN pUserId 		char(36),
	IN pAccessCode 	varchar(50))
ThisProc:BEGIN
	IF not exists(
					SELECT	UserId
					FROM 	User 
					WHERE	UserId = pUserId
							AND IsActive = TRUE
				) THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The user does not exist or is not active.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;


	call _x_UserActivity(pUserId, 'Login', null);

	SELECT	ClientId
	into 	@ClientId
	FROM	User u
	where 	u.UserId = pUserId;


	set @WorkStatusRefreshRate = 60;
	Call _x_GetClientParam(@ClientId, 'WorkStatusRefreshRate', @WorkStatusRefreshRate);

	set @isAdmin 	= 0;
	set @isAuditor 	= 0;
	if EXISTs (SELECT	1
				FROM	ClientUserRoles cur
						INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
				WHERE	cur.UserId = pUserId
						and cr.isAdmin = 1 ) THEN
		set @isAdmin = 1;
	end if;

	if EXISTs (SELECT	1
				FROM	ClientUserRoles cur
						INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
						INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
				WHERE	cur.UserId = pUserId
						and crf.FunctionKey = 'InvoiceAuditor' ) THEN
		set @isAuditor = 1;
	end if;

	UPDATE 	_x_UserParameters
	set 	FailCount = 0
	WHERE 	UserId = pUserId LIMIT 1;

	SELECT
			CAST(u.UserId AS char(36)) 		AS UserId,
			u.ClientId,
			u.UserName,
			u.FirstName,
			u.IsCloudxUser,
			u.Email,
			up.LaunchPage,
			u.CanViewConfidentialInvoice,
			c.CustomerName					as ClientName,
			c.CustomerShortName				as ClientShortName,
			nullif(c.WebSiteAddress, '')	as ClientWebSite,
			@isAdmin						as isAdmin,
			@isAuditor						as isAuditor,
			@WorkStatusRefreshRate			as WorkStatusRefreshRate,
			ifnull(up.DefaultGridSize, 10)	as DefaultGridSize
	FROM User u
		inner join Client c ON u.ClientId = c.ClientId
		LEFT JOIN _x_UserParameters up	ON u.UserId = up.UserId
	WHERE 	u.UserId = pUserId
			AND IFNULL(up.AccessCode, '!@#$%^') = IFNULL(pAccessCode, '!@#$%^');

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_StringToRegEx` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_StringToRegEx`(INOUT pInput text)
BEGIN

	-- This is the regex Expression Jack and james are the fields being sought
	-- ^(?=.*jack)(?=.*james).*$'
	-- ^(?=.*Cleaning)(?=.*5547.04).*$

	IF IFNULL(pInput, '') <> '' THEN
		CALL _x_StringToRows(pInput, ' ');
		-- update tSearchList set SearchValue = replace(SearchValue, char(92), '\\\\\\\\\\');
		update tSearchList set SearchValue = replace(SearchValue, '+', '\\+');
		update tSearchList set SearchValue = replace(SearchValue, '^', '\\^');
		update tSearchList set SearchValue = replace(SearchValue, '*', '\\*');
		update tSearchList set SearchValue = replace(SearchValue, '[', '\\[');
		update tSearchList set SearchValue = replace(SearchValue, ']', '\\]');
		update tSearchList set SearchValue = replace(SearchValue, '-', '\\-');
		update tSearchList set SearchValue = replace(SearchValue, '(', '\\(');
		update tSearchList set SearchValue = replace(SearchValue, ')', '\\)');
		update tSearchList set SearchValue = replace(SearchValue, '{', '\\{');
		update tSearchList set SearchValue = replace(SearchValue, '}', '\\}');
		SELECT
			GROUP_CONCAT(DISTINCT SearchValue SEPARATOR '■') INTO pInput
		FROM tSearchList;
		SET pInput = CONCAT('^(?=.*', REPLACE(pInput, '■', ')(?=.*'), ').*$');
	else 
		set pInput = '.|^$';  -- This show be used to say found as true if string is empty
	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_StringToRows` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_StringToRows`(Input text, delimiter varchar(1))
ThisProc:
BEGIN
	-- noformat
	DROP TEMPORARY TABLE IF EXISTS tSearchList;
	CREATE TEMPORARY TABLE tSearchList (
		SearchValue text
	);

	DROP TEMPORARY TABLE IF EXISTS DataRows;
	CREATE TEMPORARY TABLE DataRows (
		Id int
	);

	
	set @Count = CHAR_LENGTH(Input) - CHAR_LENGTH(REPLACE(Input, delimiter, '')) + 1 ;
	INSERT DataRows (Id)
	WITH RECURSIVE sequence AS (
	    SELECT 1 AS Id
	    UNION ALL
	    SELECT Id + 1 
	    FROM sequence
	    WHERE sequence.Id < @Count
	)
	SELECT Id FROM sequence;

	INSERT INTO tSearchList(SearchValue)
		SELECT	SUBSTRING_INDEX (SUBSTRING_INDEX (val, delimiter, Id), delimiter, -1) AS myvalue
		FROM 	DataRows cnt
				CROSS JOIN (SELECT
						CONCAT(Input, REPEAT(delimiter, @Count)) AS val) AS c
			HAVING myvalue <> '';
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_UserActivity` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_UserActivity`(IN pUserId varchar(36), IN pActivity varchar(50), IN pInfo mediumtext)
ThisProc:
	BEGIN	
-- noformat

	INSERT into UserActivity (UserId, Activity, Info)
		Values (pUserId, pActivity, pInfo);

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_UserAddFilter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_UserAddFilter`(IN `pType` tinyint,
IN `pUserId` char(36),
IN `pGLCodeId` int,
IN `pDepartmentId` int,
IN `pVendorId` int,
IN `pCompanyId` int,
IN `pAssigneeId` char(36),
IN `pAssignedId` char(36),
IN `pTypes` tinyint,
IN `pCenters` varchar(250),
IN `pAmount` decimal(18, 2),
IN `pIsChecked` tinyint,
IN `pDateFrom` datetime,
IN `pDateTo` datetime,
IN `pDateCreated` datetime)
BEGIN

  SET FOREIGN_KEY_CHECKS = 0;

  IF (pType = 1) THEN /* GLCode */

    DELETE
      FROM ApproverGLCode
    WHERE UserId = pUserId
      AND GLCodeId = pGLCodeId;
    INSERT INTO ApproverGLCode (UserId, GLCodeId)
      VALUES (pUserId, pGLCodeId);

  ELSEIF (pType = 2) THEN /* Department */

    DELETE
      FROM UserDepartment
    WHERE UserId = pUserId
      AND DepartmentId = pDepartmentId;
    INSERT INTO UserDepartment (UserId, DepartmentId, IsHomeDepartment)
      VALUES (pUserId, pDepartmentId, pIsChecked);

  ELSEIF (pType = 3) THEN /* Max Amount */

    IF (pIsChecked = 0) THEN
      DELETE
        FROM ApproverByAmount
      WHERE UserId = pUserId
        AND SecondApproverId = pAssigneeId
        AND ClientCompanyId = pCompanyId;

      INSERT INTO ApproverByAmount (UserId, SecondApproverId, ClientCompanyId, MaximumAllowedAmount, CostCenters, IsPOIsNoPOIsBoth)
        VALUES (pUserId, pAssigneeId, pCompanyId, pAmount, pCenters, pTypes);
    ELSE
      DELETE
        FROM ApproverByAmount
      WHERE UserId = pUserId
        AND SecondApproverId = pAssigneeId
        AND ClientCompanyId = pCompanyId
        AND VendorId = pVendorId;

      INSERT INTO ApproverByAmount (UserId, SecondApproverId, ClientCompanyId, MaximumAllowedAmount, VendorId, CostCenters, IsPOIsNoPOIsBoth)
        VALUES (pUserId, pAssigneeId, pCompanyId, pAmount, pVendorId, pCenters, pTypes);
    END IF;

  ELSEIF (pType = 4) THEN /* Reassignment */

    DELETE
      FROM UserReassignmentHistory
    WHERE SourceUserId = pUserId
      AND TargetUserId = pAssigneeId;

    IF (pIsChecked = 0) THEN

      INSERT INTO UserReassignmentHistory (SourceUserId, TargetUserId, UserId, WorkflowType, IsPermanent, DateFrom, DateTo, CreatedDate)
        VALUES (pUserId, pAssigneeId, pAssignedId, pTypes, pIsChecked, pDateFrom, pDateTo, pDateCreated);

    ELSE

      INSERT INTO UserReassignmentHistory (SourceUserId, TargetUserId, UserId, WorkflowType, IsPermanent, DateFrom, DateTo, CreatedDate)
        VALUES (pUserId, pAssigneeId, pAssignedId, pTypes, pIsChecked, NULL, NULL, pDateCreated);

    END IF;

  ELSEIF (pType = 5) THEN /* APClerkVendor */

    DELETE
      FROM APClerkVendor
    WHERE APClerkId = pUserId
      AND VendorId = pVendorId;
    INSERT INTO APClerkVendor (APClerkId, VendorId)
      VALUES (pUserId, pVendorId);

  ELSE /* Division */

    DELETE
      FROM UserClientCompanies
    WHERE UserId = pUserId
      AND ClientCompanyId = pCompanyId;
    INSERT INTO UserClientCompanies (UserId, ClientCompanyId)
      VALUES (pUserId, pCompanyId);

  END IF;

  SET FOREIGN_KEY_CHECKS = 1;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_UserById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_UserById`(
-- noformat
	IN pType 			int, 
	IN pViewingUserId	char(36),  	
	IN pUserId 			char(36),  	
	IN pOffset 			int,                                               
	IN pSize 			int)
BEGIN

	SELECT	IFNULL(IsCloudxUser, 0), ClientId 
	INTO	@isCloudxUser, @ClientId
	FROM	User
	WHERE	UserId = pViewingUserId;
	

	set @CodePosition = 2;
	Call _x_GetClientParam(@ClientId, 'CodePosition', @CodePosition);


	IF (pType = 0) THEN  /* User Details */
		SELECT
				CAST(u.UserId AS char(36)) AS UserId,
				u.UserName,
				FirstName,
				u.LastName,
				u.AddressId,
				u.Email,
				u.Telephone,
				u.UserIdCard,
				u.OrgId,
				u.Duration,
				u.LimitMailPerDay,
				u.EnableEscalation,
				u.CanViewConfidentialInvoice,
				u.IsCloudxUser,
				u.ViewCapEx,
				u.IsActive,
				ua.AccessTail,
				ua.LaunchPage,
				ua.DisableNotifications,
				ua.UseSmartSearch,
				ua.IsExceptionHandler,
				ifnull(ua.DefaultGridSize, 10) as DefaultGridSize,
				(SELECT		GROUP_CONCAT(cr.RoleName order by cr.RoleName SEPARATOR ', ')
					FROM	ClientUserRoles cur
							INNER JOIN ClientRoles cr			ON cr.RoleId = cur.RoleId
					WHERE	cur.UserId = u.UserId) AS RoleName,
				ad.StateId,
				ad.ZipCode,
				ad.StreetName,
				ad.CityName,
				CONCAT(org.OrgId, ', ', org.OrgName) 				AS OrgName,
				CONCAT(st.StateNameShort, ', ', st.StateName) 		AS StateName,
				ua.DisableSourceNotifications
		FROM	User u
				LEFT JOIN _x_UserParameters ua			ON u.UserId = ua.UserId
				LEFT JOIN Address ad					ON u.AddressId = ad.AddressId
				LEFT JOIN State st						ON ad.StateId = st.StateId
				LEFT JOIN OrgData org					ON u.OrgId = org.Id
		WHERE u.ClientId = @ClientId
				AND u.UserId = pUserId;
	
	ELSEIF (pType = 1) THEN /* List: GLCode */
		SELECT
				ApproverGLCode.Id,
				case	when @CodePosition = 1 THEN
							concat("[", IFNULL(GLCode.GLCodeName, ""), "] ", IFNULL(GLCode.Desccription, ""))
						when @CodePosition = 2 THEN
							concat(IFNULL(GLCode.Desccription, ""), " [", IFNULL(GLCode.GLCodeName, ""), "]")
						else
							IFNULL(GLCode.Desccription, IFNULL(GLCode.GLCodeName, "")) end										as GLCode,
				case	when @CodePosition = 1 THEN
							concat("[", IFNULL(ClientCompany.CompanyCode, ""), "] ", IFNULL(ClientCompany.Description, ""))
						when @CodePosition = 2 THEN
							concat(IFNULL(ClientCompany.Description, ""), " [", IFNULL(ClientCompany.CompanyCode, ""), "]")
						else
							IFNULL(ClientCompany.Description, IFNULL(ClientCompany.CompanyCode, "")) end						as Company
		FROM	ApproverGLCode
				LEFT JOIN GLCode			ON ApproverGLCode.GLCodeId = GLCode.GLCodeId
				LEFT JOIN ClientCompany		ON GLCode.ClientCompanyId = ClientCompany.Id
		WHERE	ApproverGLCode.UserId = pUserId AND GLCode.ClientId = @ClientId
		ORDER	BY ApproverGLCode.Id DESC 
		LIMIT 	pOffset, pSize;
	
	ELSEIF (pType = 2) THEN /* List: Department */
		SELECT
				UserDepartment.Id,
				case	when @CodePosition = 1 THEN
							concat(IFNULL(Department.DepartmentName, ""), " [", IFNULL(Department.Description, ""), "]")
						when @CodePosition = 2 THEN
							concat(IFNULL(Department.Description, ""), " [", IFNULL(Department.DepartmentName, ""), "]")
						else
							IFNULL(Department.Description, IFNULL(Department.DepartmentName, "")) end							as Department,
				UserDepartment.IsHomeDepartment
		FROM	UserDepartment
				LEFT JOIN Department		ON UserDepartment.DepartmentId = Department.Id
		WHERE	UserDepartment.UserId = pUserId AND Department.ClientId = @ClientId
		ORDER	BY UserDepartment.Id DESC 
		LIMIT	pOffset, pSize;
	
	ELSEIF (pType = 3) THEN /* List: Max Amount */
		SELECT
				ApproverByAmount.Id,
				CONCAT('$', FORMAT(ApproverByAmount.MaximumAllowedAmount, 2)) AS MaxAmount,
				CONCAT(User.LastName, ', ', User.FirstName) AS Manager,
				case	when @CodePosition = 1 THEN
							concat("[", IFNULL(Vendor.VendorNo, ""), "] ", IFNULL(Vendor.VendorName, "")) 
						when @CodePosition = 2 THEN
							concat(IFNULL(Vendor.VendorName, ""), " [", IFNULL(Vendor.VendorNo, ""), "]")
						else
							IFNULL(Vendor.VendorName, IFNULL(Vendor.VendorNo, "")) end 								as Vendor,
				LENGTH(ApproverByAmount.CostCenters) - LENGTH(REPLACE(ApproverByAmount.CostCenters, ',', '')) + 1 	AS Department,
				case	when @CodePosition = 1 THEN
							concat("[", IFNULL(ClientCompany.CompanyCode, ""), "] ", IFNULL(ClientCompany.Description, ""))
						when @CodePosition = 2 THEN
							concat(IFNULL(ClientCompany.Description, ""), " [", IFNULL(ClientCompany.CompanyCode, ""), "]")
						else
							IFNULL(ClientCompany.Description, IFNULL(ClientCompany.CompanyCode, "")) end				as Company,
				ApproverByAmount.IsPOIsNoPOIsBoth AS IsPo /* Both = null, NoPo = 0, Po = 1 */
		
		FROM	ApproverByAmount
				LEFT JOIN User				ON ApproverByAmount.SecondApproverId = User.UserId
				LEFT JOIN Vendor			ON ApproverByAmount.VendorId = Vendor.VendorId
				LEFT JOIN ClientCompany		ON ApproverByAmount.ClientCompanyId = ClientCompany.Id
		WHERE	ApproverByAmount.UserId = pUserId AND User.ClientId = @ClientId
		ORDER	BY ApproverByAmount.Id DESC 
		LIMIT	pOffset, pSize;
	
	ELSEIF (pType = 4) THEN /* List: Reassignment */
		SELECT
				UserReassignmentHistory.ReassignUserHistoryId AS Id,
				CONCAT(UserTarget.LastName, ', ', UserTarget.FirstName) AS Assignee,
				CONCAT(UserMain.LastName, ', ', UserMain.FirstName) AS AssignedBy,
				UserReassignmentHistory.IsPermanent,
				UserReassignmentHistory.DateFrom,
				UserReassignmentHistory.DateTo,
				UserReassignmentHistory.CreatedDate,
				UserReassignmentHistory.WorkflowType AS Type
		
		FROM	UserReassignmentHistory
				LEFT JOIN User AS UserTarget			ON UserReassignmentHistory.TargetUserId = UserTarget.UserId
				LEFT JOIN User AS UserMain				ON UserReassignmentHistory.UserId = UserMain.UserId
		WHERE	UserReassignmentHistory.SourceUserId = pUserId AND UserTarget.ClientId = @ClientId
		ORDER	BY UserReassignmentHistory.ReassignUserHistoryId DESC LIMIT pOffset, pSize;
	
	ELSEIF (pType = 5) THEN /* List: APClerkVendor */
		SELECT
				APClerkVendor.VendorId AS Id,
				case	when @CodePosition = 1 THEN
							concat("[", IFNULL(Vendor.VendorNo, ""), "] ", IFNULL(Vendor.VendorName, "")) 
						when @CodePosition = 2 THEN
							concat(IFNULL(Vendor.VendorName, ""), " [", IFNULL(Vendor.VendorNo, ""), "]")
						else
							IFNULL(Vendor.VendorName, IFNULL(Vendor.VendorNo, "")) end 								as Vendor
		FROM	APClerkVendor
				LEFT JOIN Vendor	ON APClerkVendor.VendorId = Vendor.VendorId
		WHERE	APClerkVendor.APClerkId = pUserId AND Vendor.ClientId = @ClientId
		LIMIT pOffset, pSize;
		
	ELSEIF (pType = 6) THEN /* List: Division */
		SELECT
				UserClientCompanies.ClientCompanyId AS Id,
				case	when @CodePosition = 1 THEN
							concat("[", IFNULL(ClientCompany.CompanyCode, ""), "] ", IFNULL(ClientCompany.Description, ""))
						when @CodePosition = 2 THEN
							concat(IFNULL(ClientCompany.Description, ""), " [", IFNULL(ClientCompany.CompanyCode, ""), "]")
						else
							IFNULL(ClientCompany.Description, IFNULL(ClientCompany.CompanyCode, "")) end				as Division
		FROM	UserClientCompanies
				LEFT JOIN ClientCompany	ON UserClientCompanies.ClientCompanyId = ClientCompany.Id
		WHERE	UserClientCompanies.UserId = pUserId AND ClientCompany.ClientId = @ClientId
		LIMIT pOffset, pSize;
	
	ELSEIF (pType = 7) THEN /* List: Roles */
		SELECT
				cr.RoleId,
				concat(cr.RoleName, case when isInternal=1 then ' **CloudX Only**' else '' end) as RoleName,
				CASE WHEN cur.UserId IS NULL THEN 0 ELSE 1 END AS IsAssigned,
				isInternal
		FROM	ClientRoles cr
				LEFT JOIN ClientUserRoles cur	ON cur.RoleId = cr.Roleid
													AND cur.Userid = pUserId		
				LEFT JOIN User u				ON u.UserId = pUserId
		WHERE	cr.ClientId = @ClientId 
				-- AND u.ClientId = @ClientId
				AND (
--						cr.isInternal = if(ifnull(u.isCloudxUser, @isCloudxUser) = 1, 1, 0)
						cr.isInternal IN (0, ifnull(u.isCloudxUser, @isCloudxUser))
--						OR pUserId IS NULL
					)
		ORDER BY 4, 3 DESC, 2
		LIMIT pOffset, pSize;
		

	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_UserClientsForSite` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_UserClientsForSite`(
-- noformat
	IN pClientId			int,
	IN pUserIdCard 		varchar(20)
)
ThisProc:
  BEGIN
	SET SESSION group_concat_max_len = 1000000;

	drop TEMPORARY TABLE IF EXISTS myData;
	create TEMPORARY TABLE if not exists myData AS (
		SELECT DISTINCT ClientId
		FROM 	User u
		WHERE 	u.IsActive = 1
				AND u.IsCloudxUser = 1
				AND u.UserIdCard = pUserIdCard
		);


	SELECT 	c.CustomerName,
			c.ClientId,
			if(d.ClientId IS null, 0, 1) AS isSelected
	FROM 	Client c
			inner JOIN 	_x_Client xc 		ON xc.ClientId = c.ClientId
			LEFT JOIN 	myData d				on d.ClientId = c.ClientId
	WHERE	c.isActive = 1
			AND c.ClientId <> pClientId
	ORDER 	BY isSelected desc, c.CustomerName;



  END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_UserCompanyAccess` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_UserCompanyAccess`(
-- noformat
	IN pUserId 					char(36), 
	IN pWorkingOnUserId 		char(36), 
	IN pAction 					varchar(10),
	IN pClientCompanyId 		int,
	IN pAccess 					int
	)
ThisProc:BEGIN

-- noformat
	
	SELECT	ClientId 
	INTO	@ClientId
	FROM	User
	WHERE	UserId = pUserId;

	if 	not exists(
					SELECT	1
					FROM	User
					WHERE	UserId = pWorkingOnUserId
							and ClientId = @ClientId) then
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The employee for not belong to the same company as you.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;	

	if not pAction in ('List', 'Add', 'Delete') THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The Action is incorrect.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;
                                                
	if pAction = 'List' THEN
		set @CodePosition = 2;
		Call _x_GetClientParam(@ClientId, 'CodePosition', @CodePosition);

		SELECT 	_x_GetFormatedValue(CompanyCode, Description, @CodePosition)			as Company,
				case	when ucc.ClientCompanyId is null 
						then -1 
				else ifnull(ucc.AllowPaymentApproval, 0) end							as Access,
				Id 																		AS ClientCompanyId
		FROM	ClientCompany cc
				left join UserClientCompanies ucc 	on ucc.UserId = pWorkingOnUserId
														and ucc.ClientCompanyId = cc.Id
		WHERE	ClientId = @ClientId
				and IsActive = 1
		order 	by if(Access >= 0, 9, 0) desc, ifnull(AllowPaymentApproval, 0) desc, 2;
		Leave ThisProc;
	elseif pAction = 'Delete' THEN
		Delete 
		from	UserClientCompanies
		where	UserId = pWorkingOnUserId;
		Leave ThisProc;
	end IF;

	if 	not exists(
					SELECT	1
					FROM	ClientCompany cc
					WHERE	cc.Id = pClientCompanyId
							and cc.ClientId = @ClientId) then
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The company does not exist.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	end if;	

	if pAction = 'Add' and pAccess in (0,1) then
		Insert into UserClientCompanies(UserId, ClientCompanyId, AllowPaymentApproval)
			Values (pWorkingOnUserId, pClientCompanyId, pAccess);
	end if;

-- call _x_UserCompanyAccess('e727c557-6c8e-4a73-811b-a2ee93e4916d', '52029cb8-4d2f-4914-86eb-036c545fcc47', 'List', null, null);


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_UserDelete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_UserDelete`(IN `pType` tinyint,
IN `pId` int,
IN `pUserId` char(36))
BEGIN

  SET FOREIGN_KEY_CHECKS = 0;

  IF (pType = 1) THEN

    DELETE
      FROM ApproverGLCode
    WHERE Id = pId;

  ELSEIF (pType = 2) THEN

    DELETE
      FROM UserDepartment
    WHERE Id = pId;

  ELSEIF (pType = 3) THEN

    DELETE
      FROM ApproverByAmount
    WHERE Id = pId;

  ELSEIF (pType = 4) THEN

    DELETE
      FROM UserReassignmentHistory
    WHERE ReassignUserHistoryId = pId;

  ELSEIF (pType = 5) THEN

    DELETE
      FROM APClerkVendor
    WHERE APClerkId = pUserId
      AND VendorId = pId;

  ELSE

    DELETE
      FROM UserClientCompanies
    WHERE UserId = pUserId
      AND ClientCompanyId = pId;

  END IF;

  SET FOREIGN_KEY_CHECKS = 1;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_UserEnable2FA` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_UserEnable2FA`(IN `pUserId` char(36),
IN `pIsEnabled` int)
ThisProc:

-- noformat

	BEGIN
		IF pIsEnabled = 1 THEN
			UPDATE _x_UserParameters 
			SET AccessTail = '00',
				AccessDate = DATE_SUB(UTC_TIMESTAMP(), INTERVAL 1 DAY)
			WHERE UserId = pUserId;
		ELSE
			UPDATE _x_UserParameters
			SET AccessCode = NULL,
				AccessTail = NULL,
				AccessDate = NULL
			WHERE UserId = pUserId;
		END IF;
	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_UserList` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_UserList`(IN pUserId char(36), IN pFilter varchar(20))
BEGIN

-- noformat
	
	SELECT	IFNULL(IsCloudxUser, 0), ClientId 
	INTO	@isCloudxUser, @ClientId
	FROM	User
	WHERE	UserId = pUserId;

	SET SESSION group_concat_max_len = 10000000;
  	SELECT	CAST(User.UserId AS char(36)) 													AS UserId,
			concat(CONCAT(User.LastName, ', ', User.FirstName) 									
			,CASE WHEN User.IsCloudxUser = 1 THEN ' (CloudX User)' ELSE '' END)				AS FullName,
			User.UserName,  
			User.Email,  
			ifnull(
					(	
						SELECT	GROUP_CONCAT(cr.RoleName order by cr.RoleName SEPARATOR ', ')
						FROM	ClientUserRoles cur
								INNER JOIN ClientRoles cr	ON cr.RoleId = cur.RoleId
						WHERE	cur.UserId = User.UserId
						ORDER	BY 1
					), '(not assigned)') 													AS RoleName,
			
			substring(ifnull(nullif(concat(
						case when xup.isExceptionHandler = 1 then ',Ehandler' else '' end,	
						case when User.CanViewConfidentialInvoice = 1 then ',ViewConfidential' else '' end	
						), ''), ',')				
						, 2, 999)															as Userproperty,
			case when User.isActive = 1 then '' else 'Inactive' END							as Status,
			User.isActive
  FROM 		User    
  			inner join _x_UserParameters xup on xup.UserId = User.UserId
  WHERE 	User.ClientId = @ClientId
  			and User.IsCloudxUser in (0, @isCloudxUser)
			and (
					(	pFilter is null
						or (pFilter = 'Approver'
							and exists (
											SELECT	1
											FROM	ClientUserRoles cur
													INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
													INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
											WHERE	cur.UserId = User.UserId
													and crf.FunctionKey = 'InvoiceApprove'
													and crf.Access = 1
											limit 1
										)
							)
					)
				)
  	ORDER 	BY User.IsCloudxUser, User.LastName;



END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_UserStatus` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_UserStatus`(
-- noformat
	IN 	pUserId 		char(36),
	IN 	pIsActive		int,
	out pMessage 		mediumtext
	)
ThisProc:
	BEGIN
	
	SET SESSION group_concat_max_len = 1000000;

	set pMessage = null;

	set @ClientId = null;
	set @UserName = null;

	if pIsActive = 0 then
		select 	ClientId, CONCAT(LastName, ', ', FirstName)
		into	@ClientId, @UserName
		from	User 
		where 	UserId = pUserId;
	
		set @Msg = NULL;
		
		if exists (select 	1
					from 	ApprovalStep aStep
							inner join ApprovalSubStep ass ON aStep.ApprovalStepId = ass.ApprovalStepId
							inner join ApprovalSubStepUser asscau ON ass.ApprovalSubStepId = asscau.ApprovalSubStepId
					where 	aStep.ClientId = @ClientId 
							and asscau.UserId = pUserId
					limit 1) THEN
			set @Msg = concat(ifnull(concat(@msg, char(13), char(10)), ''), 'Currently assigned as an approver in a workflow.');
		end if;
	
		if exists (select 	1
					from 	ApprovalStep aStep
							inner join ApprovalSubStep ass ON aStep.ApprovalStepId = ass.ApprovalStepId
							inner join ApprovalSubStepCatchAllUsers asscau ON ass.ApprovalSubStepId = asscau.ApprovalSubStepId
							inner join User on User.UserId = asscau.UserId
					where 	aStep.ClientId = @ClientId
							and asscau.UserId = pUserId
					limit 1) THEN
			set @Msg = concat(ifnull(concat(@msg, char(13), char(10)), ''), 'Currently assigned as a catch approver in a workflow.');
		end if;

		set @ByAmountList = null;
		select	GROUP_CONCAT(concat(User.Firstname, ' ', User.LastName) order by User.LastName SEPARATOR ', ')
		into	@ByAmountList
		from 	ApproverByAmount
				inner join User 	on User.UserId = ApproverByAmount.UserId
		where 	User.ClientId = @ClientId
				and ApproverByAmount.SecondApproverId = pUserId;


		if @ByAmountList is not null THEN
			set @Msg = concat(ifnull(concat(@msg, char(13), char(10)), ''), '');
 			set @Msg = concat(ifnull(concat(@msg, char(13), char(10)), ''), 'Currently assigned as a manager for the max amount for the following users:');
			set @Msg = concat(ifnull(concat(@msg, char(13), char(10)), ''), @ByAmountList);
		end if;

		if @Msg is not null then
			set pMessage = @Msg;
			LEAVE ThisProc;
		END IF;











		drop TEMPORARY TABLE IF EXISTS Admins;
		CREATE TEMPORARY TABLE IF NOT EXISTS Admins AS (
			select	u.UserId, concat(u.LastName, ', ', u.FirstName) as AdminName
			from	User u
			where 	ClientId = @ClientId
					and u.IsActive = 1
					and u.IsCloudxUser = 0
					and exists (SELECT	cr.*
								FROM	ClientUserRoles cur
										INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
								WHERE	cr.isAdmin	= 1
										and cr.isInternal = 0
										and cr.ClientId = @ClientId
										AND cur.UserId	= u.UserId)
		);



		-- checking the queues
		-- If the user is not the only user for an invoice, then we can delete the assignement
		-- if the user is the only one for that invoice, then we should assign to all admins
		drop TEMPORARY TABLE IF EXISTS MyData;
		CREATE TEMPORARY TABLE IF NOT EXISTS MyData AS (
			select	InvoiceId, count(distinct UserId) as cnt
			from 	UserInvoiceAssignment
			where 	InvoiceId in (	select	distinct InvoiceId 
									from 	UserInvoiceAssignment
									where 	UserId = pUserId)
			group by InvoiceId
		);

		-- If the user is not the only user for an invoice, then we can delete the assignement
		delete	from UserInvoiceAssignment 
		where	InvoiceId in (select InvoiceId from MyData where Cnt > 1)
				and UserId = pUserId;

		set 	@Admins = null;
		SELECT	GROUP_CONCAT(distinct Admins.UserId separator ';')
		into 	@Admins
		from 	UserInvoiceAssignment 
				cross join Admins
		where	InvoiceId in (select InvoiceId from MyData where Cnt = 1)
				and UserInvoiceAssignment.UserId = pUserId;


		-- IF @Admins is not null then there are Invoices in his queue where he is the only one.. THey have to be delegarted to admins.
		if @Admins is not null then
			-- if the user is the only one for that invoice, then we should assign to all admins
			insert into UserInvoiceAssignment(InvoiceId, UserId, Type, State, ApprovalSubStepId, HoldStartDate, HoldEndDate, DateCreated, Comments)
				select 	InvoiceId, Admins.UserId, Type, State, ApprovalSubStepId, HoldStartDate, HoldEndDate, now(), Comments
				from 	UserInvoiceAssignment 
						cross join Admins
				where	InvoiceId in (select InvoiceId from MyData where Cnt = 1)
						and UserInvoiceAssignment.UserId = pUserId;

			set @AdminNames = null;
			select 	GROUP_CONCAT(concat(AdminName) order by AdminName SEPARATOR '; ')
			into 	@AdminNames
			from 	Admins;


			INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId, OldID)
				SELECT	InvoiceId,
						'System' 			AS Actor,
						'Delegation' 		AS Action,
						Now() 				AS ActionDate,
						@UserName			AS PreviousData,
						@AdminNames			AS NewData,
						'Approvers'			AS Field,
						'' 					AS InitialStatus,
						'' 					AS CurentStatus,
						NULL	 			AS ActorId,
						NULL 				AS OldId	
				from 	UserInvoiceAssignment 
				where	InvoiceId in (select InvoiceId from MyData where Cnt = 1)
						and UserInvoiceAssignment.UserId = pUserId;
	
			-- If the user is the only user for an invoice, then we can delete the assignement--The admins were assigned
			delete	from UserInvoiceAssignment 
			where	InvoiceId in (select InvoiceId from MyData where Cnt = 1)
					and UserId = pUserId;
	 		call _x_Notify(@Admins, 'Invoice approval', concat('Invoice(s) for ', @UserName, ' were reassigned to admins'), 'Approval', 'Invoice', null, null);
		end if;

	end if;	


	UPDATE User
	SET IsActive = pIsActive
	WHERE UserId = pUserId;

	UPDATE _x_UserParameters
	SET FailCount = 0
	WHERE UserId = pUserId;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_UserUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_UserUpdate`(
-- noformat

		IN pAsSelf 						tinyint,						-- 0 = Someone is modifing this user, 1 = The user is modifying themself
		
		-- Always this
		IN pUserId 						char(36),
		IN pClientId 					int,
		IN pEmail 						varchar(100),
		IN pFirstName 					varchar(50),
		IN pLastName 					varchar(50),

		-- Options
		IN pLimitMailPerDay 			int,
		in pLaunchPage 					varchar(20),
		in pUseSmartSearch	 			int,
		in pDisableNotifications 		int,
		in pDefaultGridSize		 		int,
		in pDisableSourceNotifications	varchar(1000),					-- Comma delimited list of notifications to disable

		-- Address
		IN pStreetName 					varchar(150),
		IN pCityName 					varchar(50),
		IN pStateId 					int,
		IN pZipCode 					varchar(20),
		IN pTelephone 					varchar(50),
		-- Password
		IN pCurrentPassword 			varchar(50),					-- pCurrentPassword is only needed for pAsSelf = 1
		IN pPassword 					varchar(50),					-- If Password is NULL then do not update
		IN pPasswordNotEncrypted		varchar(50),					-- This password is used to send an email to the user with the New password

		
		-- if pAsSelf = 0 then update all this
		IN pUserName 					varchar(50),
		IN pUserIdCard 					varchar(50),
		IN pOrgId 						varchar(50),
		IN pEnableEscalation 			tinyint,
		IN pCanViewConfidentialInvoice 	tinyint,
		IN pViewCapEx 					tinyint,
		IN pIsCloudxUser 				tinyint,
		IN pIsExceptionHandler			tinyint,

		-- Roles		
		IN pRoleIds 					varchar(1000)					-- Comma delimited list of roles the user is assigned to
		)
ThisProc:
	BEGIN
		SET @vAddressId = NULL;

		set pDefaultGridSize 	= ifnull(pDefaultGridSize, 10);
		set pCurrentPassword 	= nullif(pCurrentPassword, '');
		set pIsCloudxUser 		= ifnull(pIsCloudxUser, 0);
		SET pPassword			= nullif(pPassword, '');

		IF pAsSelf = 0 THEN
			-- Business logic
			-- Check is username already used
			IF EXISTS (SELECT	1
						FROM 	User
						WHERE 	UserName = pUserName
						AND 	UserId <> IFNULL(pUserId, '**NOMATCHPOSSIBLE**')) THEN
				SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This user name is already being used.', MYSQL_ERRNO = 1;
				LEAVE ThisProc;
			END IF;

		ELSE
			IF pCurrentPassword IS NOT NULL THEN
				IF NOT EXISTS (SELECT	1
								FROM	User
								WHERE	UserId = pUserId
										AND Password = pCurrentPassword) THEN
					SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The current password does not match the one entered.', MYSQL_ERRNO = 1;
					LEAVE ThisProc;
				END IF;
			ELSE
				SET pPassword = NULL;
			END IF;
		END IF;


		IF pUserId IS NULL THEN
			INSERT INTO Address (StreetName, CityName, StateId, ZipCode)
				VALUES (pStreetName, pCityName, pStateId, pZipCode);
			SET @vAddressId = LAST_INSERT_ID();


			SET pUserId = UUID();
			INSERT INTO User (ClientId, UserId, UserName, FirstName, LastName, Email,
								Telephone, UserIdCard, EnableEscalation, LimitMailPerDay,
								OrgId, CanViewConfidentialInvoice, IsCloudxUser, ViewCapEx,
								Password, AddressId)
				VALUES (pClientId, pUserId, pUserName, pFirstName, pLastName, pEmail, 
						pTelephone, pUserIdCard, pEnableEscalation, 1, 
						pOrgId, pCanViewConfidentialInvoice, pIsCloudxUser, pViewCapEx, 
						pPassword, @vAddressId);

			Insert into _x_UserParameters (UserId, LaunchPage, UseSmartSearch, DisableNotifications, IsExceptionHandler, FailCount, DefaultGridSize)
				Values (pUserId, 'Home', 0, 0, pIsExceptionHandler, 0, pDefaultGridSize);

			set @Msg = concat('Hello ', pFirstName);
			set @Msg = concat(@Msg, char(13), char(10));
			set @Msg = concat(@Msg, char(13), char(10), 'Please connect to APSmart with the url below.');
			set @Msg = concat(@Msg, char(13), char(10), 'Your username is:', pUserName);
			set @Msg = concat(@Msg, char(13), char(10), 'Your password is:', pPasswordNotEncrypted);
			set @Msg = concat(@Msg, char(13), char(10));
			set @Msg = concat(@Msg, char(13), char(10), 'Once connected, please click on your name in the upper right-hand corner and change your password.');
			Call _x_Notify(pUserId, 'Welcome to APSmart', @Msg, 'Security', null, null, 1);

		ELSE
			SELECT	Addressid
			into 	@vAddressId
			FROM	User
			WHERE	UserId = pUserId;
			IF @vAddressId IS NULL THEN
				INSERT INTO Address (StreetName, CityName, StateId, ZipCode)
					VALUES (pStreetName, pCityName, pStateId, pZipCode);
				SET @vAddressId = LAST_INSERT_ID();
			ELSE
				UPDATE Address	SET 
					StreetName 	= pStreetName,
					CityName 	= pCityName,
					StateId 	= pStateId,
					ZipCode 	= pZipCode
				WHERE AddressId = @vAddressId;
			END IF;
			IF pAsSelf = 1 THEN
				update 	_x_UserParameters 	set
						LaunchPage						= pLaunchPage,
						UseSmartSearch					= pUseSmartSearch,
						DisableNotifications			= pDisableNotifications,
						FailCount 						= 0,
						DisableSourceNotifications		= pDisableSourceNotifications,
						DefaultGridSize					= pDefaultGridSize
				WHERE UserId = pUserId;						

				UPDATE User SET
						FirstName				= pFirstName,
						LastName				= pLastName,
						Email 					= pEmail,
						Telephone	 			= pTelephone,
						Password				= CASE WHEN pPassword IS NULL THEN Password 				ELSE pPassword END,
						LastPasswordChangeDate	= CASE WHEN pPassword IS NULL THEN LastPasswordChangeDate 	ELSE UTC_TIMESTAMP() END,
						LimitMailPerDay			= pLimitMailPerDay,
						AddressId 				= @vAddressId
				WHERE UserId = pUserId;
			ELSE
				update 	_x_UserParameters 	set
						IsExceptionHandler		= pIsExceptionHandler
				WHERE UserId = pUserId;						

				UPDATE User	SET 
					FirstName 					= pFirstName,
					LastName 					= pLastName,
					UserName					= pUserName,
					Email						= pEmail,
					Telephone 					= pTelephone,
					UserIdCard 					= pUserIdCard,
					AddressId 					= @vAddressId,
					OrgId 						= pOrgId,
					EnableEscalation 			= pEnableEscalation,
					CanViewConfidentialInvoice	= pCanViewConfidentialInvoice,
					IsCloudxUser 				= pIsCloudxUser,
					ViewCapEx 					= pViewCapEx,
					Password					= case when pIsCloudxUser = 1 then ifnull(pPassword, Password) else Password end
				WHERE UserId = pUserId;

				if pPassword is not null then
					update 	_x_UserParameters 	set
							FailCount 			= 0
					WHERE UserId = pUserId;						
				end if;
			END IF;
		END IF;

		--
		-- Roles only changed if pAsSelf = 0
		--
		IF pAsSelf = 0 and IFNULL(pRoleIds, '') <> '' THEN
			DELETE
				FROM ClientUserRoles
			WHERE UserId = pUserId;

			SET @Pos = 1;
			SET @Count = LENGTH(pRoleIds) - LENGTH(REPLACE(pRoleIds, ',', '')) + 1;

			WHILE @Pos <= @Count DO
				SET @RoleId = _x_SPLIT_STRING(pRoleIds, ',', @Pos);
				IF @RoleId <> '' THEN
					SET @RoleId = CONVERT(@RoleId, UNSIGNED);
					call _x_ClientRoleUserUpdate(@RoleId, pUserId, 'Add');
-- 
-- 					INSERT INTO ClientUserRoles (UserId, RoleId)
-- 						VALUES (pUserId, @RoleId);
				END IF;
				SET @Pos = @Pos + 1;
			END WHILE;
		END IF;




	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_User_Add` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_User_Add`(
-- noformat

		INOUT pUserId 					char(36),
		IN pClientId 					int,
		IN pEmail 						varchar(100),
		IN pFirstName 					varchar(50),
		IN pLastName 					varchar(50),

		-- Password
		IN pPassword 					varchar(50),					-- If Password is NULL then do not update
		IN pPasswordNotEncrypted		varchar(50),					-- This password is used to send an email to the user with the New password
		
		IN pUserName 					varchar(50),
		IN pUserIdCard 					varchar(50),
		IN pOrgId 						varchar(50),
		IN pEnableEscalation 			tinyint,
		IN pCanViewConfidentialInvoice 	tinyint,
		IN pViewCapEx 					tinyint,
		IN pIsCloudxUser 				tinyint,
		IN pIsExceptionHandler			tinyint,

		IN pClientIds 					mediumtext,					-- Comma delimited list of other clients the user should be created in (for cloudXUsers ONLY)
		IN pRoleIds 					mediumtext					-- Comma delimited list of roles the user is assigned to
		)
ThisProc:BEGIN
	SET @vAddressId = NULL;

	SET pFirstName 			= ltrim(rtrim(pFirstName));
	SET pLastName 			= ltrim(rtrim(pLastName));
	set pIsCloudxUser 		= ifnull(pIsCloudxUser, 0);
	SET pPassword			= nullif(pPassword, '');


	IF pIsCloudxUser = 1 THEN
		SELECT	CustomerShortName
		INTO 	@CustomerShortName
		FROM	Client
		WHERE	ClientId = pClientId;

		IF pUserName <> concat(pFirstName, '.', pLastName, '@', @CustomerShortName) THEN
			SET @Msg = concat('The username does not follow: {fn}.{ln}@', @CustomerShortName);
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @Msg, MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		end if;
	end if;


	IF EXISTS (SELECT	1
				FROM 	User
						INNER JOIN Client 		ON Client.ClientId = User.ClientId
				WHERE 	Client.isActive = 1
						AND UserName = pUserName) THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This username is already being used.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;

	IF pIsCloudxUser = 1 THEN	
		-- Get the address for this user from another client
		SELECT	User.AddressId, Password
		INTO	@vAddressId, pPassword
		FROM 	User 
				INNER JOIN Client 		ON Client.ClientId = User.ClientId
		WHERE 	Client.isActive = 1
				AND User.FirstName = pFirstName
				AND User.LastName = pLastName
				AND User.IsCloudxUser = 1
				AND User.ClientId <> pClientId
		LIMIT 1;

	END if;

	-- This is the first time this user is created anywhere
	IF @vAddressId is null THEN 
		INSERT INTO Address (StreetName, CityName, StateId, ZipCode)
			VALUES ('', '', null, '');
		SET @vAddressId = LAST_INSERT_ID();
	END if;


	SET pUserId = UUID();
	INSERT INTO User (ClientId, UserId, UserName, FirstName, LastName, Email,
						UserIdCard, EnableEscalation, LimitMailPerDay,
						OrgId, CanViewConfidentialInvoice, IsCloudxUser, ViewCapEx,
						Password, AddressId)
		VALUES (pClientId, pUserId, pUserName, pFirstName, pLastName, pEmail, 
				pUserIdCard, pEnableEscalation, 1, 
				pOrgId, pCanViewConfidentialInvoice, pIsCloudxUser, pViewCapEx, 
				pPassword, @vAddressId);


	if pPassword is not null then
		update 	_x_UserParameters 	set
				FailCount 			= 0
		WHERE UserId = pUserId;						
	end if;


	Insert into _x_UserParameters (UserId, LaunchPage, UseSmartSearch, DisableNotifications, IsExceptionHandler, FailCount, DefaultGridSize)
		Values (pUserId, 'Home', 0, 0, pIsExceptionHandler, 0, 10);



	IF IFNULL(pRoleIds, '') <> '' THEN
		DELETE
			FROM ClientUserRoles
		WHERE UserId = pUserId;

		SET @Pos = 1;
		SET @Count = LENGTH(pRoleIds) - LENGTH(REPLACE(pRoleIds, ',', '')) + 1;

		WHILE @Pos <= @Count DO
			SET @RoleId = _x_SPLIT_STRING(pRoleIds, ',', @Pos);
			IF @RoleId <> '' THEN
				SET @RoleId = CONVERT(@RoleId, UNSIGNED);
				call _x_ClientRoleUserUpdate(@RoleId, pUserId, 'Add');

			END IF;
			SET @Pos = @Pos + 1;
		END WHILE;
	END IF;


	set @FirstTimeCloudXUser = false;
	SET @SendEmail = 1;
	IF pIsCloudxUser = 1 then
		IF EXISTS (	SELECT 	1 
					FROM 	User
							INNER JOIN Client 		ON Client.ClientId = User.ClientId
					WHERE 	Client.isActive = 1
							AND User.FirstName = pFirstName
							AND User.LastName = pLastName
							AND User.IsCloudxUser = 1
							AND User.ClientId <> pClientId) then
			-- Sync the settings
			SELECT	LaunchPage, UseSmartSearch, DisableNotifications,
					FailCount, DisableSourceNotifications, DefaultGridSize
			INTO 	@LaunchPage, @UseSmartSearch, @DisableNotifications, 
					@FailCount, @DisableSourceNotifications, @DefaultGridSize
			FROM 	User
					INNER join _x_UserParameters 	ON _x_UserParameters.UserId = User.UserId
			WHERE 	User.FirstName = pFirstName
					AND User.LastName = pLastName
					AND User.IsCloudxUser = 1
					AND User.ClientId <> pClientId
					AND User.UserId <> pUserId
			LIMIT 1;
			
			update 	_x_UserParameters 	set
					LaunchPage						= @LaunchPage,
					UseSmartSearch					= @UseSmartSearch,
					DisableNotifications			= @DisableNotifications,
					FailCount 						= @FailCount,
					DisableSourceNotifications		= @DisableSourceNotifications,
					DefaultGridSize					= @DefaultGridSize
			WHERE	UserId = pUserId;
		
			SET @SendEmail = 0;
		ELSE
			set @FirstTimeCloudXUser = true;
		END if;
	end if;



	-- Genertate this new CloudX user for all clients selected
	IF @FirstTimeCloudXUser = true AND nullif(pClientIds, '') IS not null THEN
		SET pClientIds = concat(',', pClientIds, ',');
		SET @ClientsAssigned = null;
		SELECT 	Group_Concat(CustomerShortName order BY CustomerShortName SEPARATOR ', ')
		INTO 	@ClientsAssigned
		FROM	Client
		WHERE 	pClientIds LIKE concat('%,', ClientId, ',%');

		INSERT INTO User (	ClientId, UserId, UserName, FirstName, LastName, Email,
							UserIdCard, EnableEscalation, LimitMailPerDay,
							OrgId, CanViewConfidentialInvoice, IsCloudxUser, ViewCapEx,
							Password, AddressId)
			SELECT 	xRef.ClientId, UUID(), concat(FirstName, '.', LastName, '@', xRef.CustomerShortName), FirstName, LastName, Email,
					UserIdCard, EnableEscalation, LimitMailPerDay,
					OrgId, CanViewConfidentialInvoice, IsCloudxUser, ViewCapEx,
					Password, AddressId	
			FROM 	User u
					CROSS JOIN (SELECT 	Client.ClientId, Client.CustomerShortName
								FROM	Client
										inner JOIN _x_Client xc	ON xc.ClientId = Client.ClientId
								WHERE 	pClientIds LIKE concat('%,', Client.ClientId, ',%')) AS xRef
			WHERE 	u.UserId = pUserId;


		Insert into _x_UserParameters (UserId, LaunchPage, UseSmartSearch, DisableNotifications, IsExceptionHandler, FailCount, DefaultGridSize)
			SELECT 	xRef.UserId, LaunchPage, UseSmartSearch, DisableNotifications, IsExceptionHandler, FailCount, DefaultGridSize
			FROM	_x_UserParameters
					CROSS  join	(SELECT 	UserId
									FROM	User
											inner JOIN _x_Client xc	ON xc.ClientId = User.ClientId
									WHERE 	User.FirstName = pFirstName
											AND User.LastName = pLastName
											and User.IsCloudxUser = 1
											AND User.ClientId <> pClientId
											AND User.UserId <> pUserId) xRef
			WHERE 	_x_UserParameters.UserId = pUserId;
								

		INSERT INTO ClientUserRoles (RoleId, UserId)
			SELECT 	crDestination.RoleId, xRef.UserId
			FROM	ClientUserRoles
					inner JOIN 	ClientRoles crSource	ON crSource.RoleId = ClientUserRoles.RoleId    
					CROSS join 	(SELECT 	UserId, User.ClientId
									FROM	User
											inner JOIN _x_Client xc	ON xc.ClientId = User.ClientId
									WHERE 	User.FirstName = pFirstName
											AND User.LastName = pLastName
											and User.IsCloudxUser = 1
											AND User.ClientId <> pClientId
											AND User.UserId <> pUserId) xRef
					inner JOIN 	ClientRoles crDestination	ON crDestination.ClientId = xRef.ClientId			
																AND crDestination.RoleName = crSource.RoleName	
			WHERE 	ClientUserRoles.UserId = pUserId;
	end if;



	IF @SendEmail = 1 THEN 
		set @Msg = concat('Hello ', pFirstName);
		set @Msg = concat(@Msg, char(13), char(10));
		set @Msg = concat(@Msg, char(13), char(10), 'Please connect to APSmart with the url below.');
		set @Msg = concat(@Msg, char(13), char(10), 'Your username is:', pUserName);
		set @Msg = concat(@Msg, char(13), char(10), 'Your password is:', pPasswordNotEncrypted);
		set @Msg = concat(@Msg, char(13), char(10));
		set @Msg = concat(@Msg, char(13), char(10), 'Once connected, please click on your name in the upper right-hand corner and change your password and update your address and settings.');

		IF @ClientsAssigned is not null THEN
			set @Msg = concat(@Msg, char(13), char(10));
			set @Msg = concat(@Msg, char(13), char(10));
			set @Msg = concat(@Msg, char(13), char(10), 'You now have access to the following clients: ', @ClientsAssigned);
		end if;

		Call _x_Notify(pUserId, 'Welcome to APSmart', @Msg, 'Security', null, null, 1);
	END if;		



	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_User_Cloudx_Check` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_User_Cloudx_Check`(
-- noformat

		INOUT pUserId 					char(36),
		IN pClientId 					int,
		IN pFirstName 					varchar(50),
		IN pLastName 					varchar(50),
		OUT pResult						int,					--	-1 = Already exists for this client, >= 0 Number of clients this employee is present in
		OUT pResultList					Mediumtext,
		OUT pResultEmail				varchar(200), 
		OUT pResultUserIDCard			varchar(200)
		)
ThisProc:BEGIN
	SET pFirstName 			= ltrim(rtrim(pFirstName));
	SET pLastName 			= ltrim(rtrim(pLastName));

	SELECT	CustomerShortName
	INTO 	@CustomerShortName
	FROM	Client
	WHERE	ClientId = pClientId;

	IF EXISTS (
				SELECT 	1
				FROM 	User
						INNER JOIN Client 		ON Client.ClientId = User.ClientId
				WHERE 	Client.isActive = 1
						AND User.FirstName = pFirstName
						AND User.LastName = pLastName
						AND User.ClientId = pClientId
						AND User.UserId <> ifnull(pUserId, 'fakeGUID')
						AND User.IsCloudxUser = 1
						AND User.IsActive = 1
				) then
		SET pResult = -1;
	ELSEIF pUserId is not NULL AND EXISTS (
											SELECT 	1
											FROM 	User
													INNER JOIN Client 		ON Client.ClientId = User.ClientId
							--						INNER join _x_Client xc	ON xc.ClientId = Client.ClientId 
											WHERE 	Client.isActive = 1
													AND User.FirstName = pFirstName
													AND User.LastName = pLastName
													AND User.ClientId = pClientId
													AND User.UserId = pUserId
													AND User.IsCloudxUser = 1
													AND User.IsActive = 1
											) then
		SET pResult = 1;
		SET pResultList = null;
		SET pResultEmail = null;
		SET pResultUserIDCard = null;
	else						
		SELECT 	count(*), GROUP_CONCAT(CustomerShortName 
										order BY  CustomerShortName 
										SEPARATOR ', '), max(User.Email), max(User.UserIdCard)
		into 	pResult, pResultList, pResultEmail, pResultUserIDCard
		FROM 	User
				INNER JOIN Client 		ON Client.ClientId = User.ClientId
		WHERE 	Client.isActive = 1
				AND User.FirstName = pFirstName
				AND User.LastName = pLastName
				AND User.ClientId <> pClientId
				AND User.IsCloudxUser = 1
				AND User.IsActive = 1;
	end if;

/*


SET @pUserId 		= null;
SET @pClientId 		= 88;
SET @pFirstName 	= 'Christine';
SET @pLastName 		= 'Uwase';
SET @pResult		= -99;
SET @pResultList	= null;
SET @pResultEmail	= null;
set @pResultUserIDCard = null;

CALL _x_User_Cloudx_Check(@pUserId, @pClientId, @pFirstName, @pLastName, @pResult, @pResultList, @pResultEmail, @pResultUserIDCard);
SELECT @pResult, @pResultList, @pResultEmail, @pResultUserIDCard

*/

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_User_Update` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_User_Update`(
-- noformat

		IN pUserId 						char(36),
		IN pClientId 					int,
		IN pEmail 						varchar(100),
		IN pFirstName 					varchar(50),
		IN pLastName 					varchar(50),

		IN pUserName 					varchar(50),
		IN pUserIdCard 					varchar(50),
		IN pOrgId 						varchar(50),
		IN pEnableEscalation 			tinyint,
		IN pCanViewConfidentialInvoice 	tinyint,
		IN pViewCapEx 					tinyint,
		IN pIsCloudxUser 				tinyint,
		IN pIsExceptionHandler			tinyint,

		-- Roles		
		IN pRoleIds 					varchar(1000)					-- Comma delimited list of roles the user is assigned to
		)
ThisProc:BEGIN
	SET @vAddressId = NULL;

	SET pFirstName 			= ltrim(rtrim(pFirstName));
	SET pLastName 			= ltrim(rtrim(pLastName));
	set pIsCloudxUser 		= ifnull(pIsCloudxUser, 0);


	IF EXISTS (
				SELECT 1
				FROM	User 
				WHERE 	UserName = pUserName
						AND UserId <> pUserId
				) then
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This username is already being used.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END if;

	SELECT 	u.FirstName, u.LastName
	INTO	@OldFirstName, @OldLastName
	FROM 	User u
	WHERE 	u.UserId = pUserId
			AND u.ClientId = pClientId;




	UPDATE 	User	SET 
			FirstName 					= pFirstName,
			LastName 					= pLastName,
			UserName					= pUserName,
			Email						= pEmail,
			UserIdCard 					= pUserIdCard,
			OrgId 						= pOrgId,
			EnableEscalation 			= pEnableEscalation,
			CanViewConfidentialInvoice	= pCanViewConfidentialInvoice,
			IsCloudxUser 				= pIsCloudxUser,
			ViewCapEx 					= pViewCapEx
	WHERE 	UserId = pUserId
			AND ClientId = pClientId;

	if NOT EXISTS (select 1 FROM _x_UserParameters WHERE UserId = pUserId) then
		Insert into _x_UserParameters (UserId, LaunchPage, UseSmartSearch, DisableNotifications, IsExceptionHandler, FailCount, DefaultGridSize)
			Values (pUserId, 'Home', 0, 0, pIsExceptionHandler, 0, 10);
	ELSE 
		update 	_x_UserParameters 	set
			IsExceptionHandler		= pIsExceptionHandler
		WHERE UserId = pUserId;		
	end if;



	IF IFNULL(pRoleIds, '') <> '' THEN
		DELETE
			FROM ClientUserRoles
		WHERE UserId = pUserId;

		SET @Pos = 1;
		SET @Count = LENGTH(pRoleIds) - LENGTH(REPLACE(pRoleIds, ',', '')) + 1;

		WHILE @Pos <= @Count DO
			SET @RoleId = _x_SPLIT_STRING(pRoleIds, ',', @Pos);
			IF @RoleId <> '' THEN
				SET @RoleId = CONVERT(@RoleId, UNSIGNED);
				call _x_ClientRoleUserUpdate(@RoleId, pUserId, 'Add');
			END IF;
			SET @Pos = @Pos + 1;
		END WHILE;
	END IF;



	IF pIsCloudxUser = 0 THEN
		LEAVE ThisProc;
	end if;

	UPDATE 	User AS u
			inner JOIN Client c 	on c.ClientId = u.ClientId
			inner JOIN _x_Client xc	ON xc.ClientId = u.ClientId
			SET u.FirstName 					= pFirstName,
				u.LastName 						= pLastName,
				u.UserName 						= concat(pFirstName, '.', pLastName, '@', c.CustomerShortName),
				u.Email							= pEmail,
				u.UserIdCard 					= pUserIdCard,
				u.AddressId 					= @vAddressId,
				u.OrgId 						= pOrgId,
				u.EnableEscalation 				= pEnableEscalation,
				u.CanViewConfidentialInvoice	= pCanViewConfidentialInvoice,
				u.IsCloudxUser 					= pIsCloudxUser,
				u.ViewCapEx 					= pViewCapEx
	WHERE 	u.FirstName 			= @OldFirstName
			AND u.LastName 			= @OldLastName
			AND u.IsCloudxUser 		= 1
			AND u.ClientId 			<> pClientId
			AND u.UserId 			<> pUserId;



	-- Sync the Roles
	DELETE FROM ClientUserRoles
	WHERE UserId IN (
						SELECT 	UserId
						FROM 	User
								INNER JOIN _x_Client xc ON xc.ClientId = User.ClientId
						WHERE 	User.FirstName = pFirstName
								AND User.LastName = pLastName
								AND User.IsCloudxUser = 1
								AND User.ClientId <> pClientId
								AND User.UserId <> pUserId
					);


	INSERT INTO ClientUserRoles (RoleId, UserId)
		SELECT 	crDestination.RoleId, xRef.UserId
		FROM	ClientUserRoles
				inner JOIN 	ClientRoles crSource	ON crSource.RoleId = ClientUserRoles.RoleId    
				CROSS join 	(SELECT 	UserId, User.ClientId
								FROM	User
										inner JOIN _x_Client xc	ON xc.ClientId = User.ClientId
								WHERE 	FirstName = pFirstName
										AND User.LastName 		= pLastName
										and User.IsCloudxUser 	= 1
										AND User.ClientId 		<> pClientId
										AND User.UserId 		<> pUserId) xRef
				inner JOIN 	ClientRoles crDestination	ON crDestination.ClientId = xRef.ClientId			
															AND crDestination.RoleName = crSource.RoleName	
		WHERE 	ClientUserRoles.UserId = pUserId;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_User_Update_Self` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_User_Update_Self`(
-- noformat

		IN pUserId 						char(36),
		IN pClientId 					int,
		IN pEmail 						varchar(100),
		IN pFirstName 					varchar(50),
		IN pLastName 					varchar(50),

		-- Options
		IN pLimitMailPerDay 			int,
		in pLaunchPage 					varchar(20),
		in pUseSmartSearch	 			int,
		in pDisableNotifications 		int,
		in pDefaultGridSize		 		int,
		in pDisableSourceNotifications	varchar(1000),					-- Comma delimited list of notifications to disable

		-- Address
		IN pStreetName 					varchar(150),

		IN pCityName 					varchar(50),
		IN pStateId 					int,
		IN pZipCode 					varchar(20),
		IN pTelephone 					varchar(50),

		-- Password
		IN pCurrentPassword 			varchar(50),					-- pCurrentPassword is only needed for pAsSelf = 1
		IN pPassword 					varchar(50) 					-- If Password is NULL then do not update
		)
ThisProc:BEGIN
		SET @vAddressId = NULL;

		set pDefaultGridSize 	= ifnull(pDefaultGridSize, 10);
		set pCurrentPassword 	= nullif(pCurrentPassword, '');
		SET pPassword			= nullif(pPassword, '');


		SELECT	ifnull(IsCloudxUser, 0) 
		INTO 	@IsCloudxUser
		FROM 	User 
		WHERE	UserId = pUserId 
				AND ClientId = pClientId;


		IF pCurrentPassword IS NOT NULL THEN
			IF NOT EXISTS (SELECT	1
							FROM	User
							WHERE	UserId = pUserId
									AND ClientId = pClientId
									AND Password = pCurrentPassword) THEN
				SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The current password does not match the one entered.', MYSQL_ERRNO = 1;
				LEAVE ThisProc;
			END IF;
		END IF;



		SELECT	Addressid
		into 	@vAddressId
		FROM	User
		WHERE	UserId = pUserId;
		IF @vAddressId IS NULL THEN
			INSERT INTO Address (StreetName, CityName, StateId, ZipCode)
				VALUES (pStreetName, pCityName, pStateId, pZipCode);
			SET @vAddressId = LAST_INSERT_ID();
		ELSE
			UPDATE 	Address	SET 
					StreetName 	= pStreetName,
					CityName 	= pCityName,
					StateId 	= pStateId,
					ZipCode 	= pZipCode
			WHERE AddressId = @vAddressId;
		END IF;


		update 	_x_UserParameters 	set
				LaunchPage						= pLaunchPage,
				UseSmartSearch					= pUseSmartSearch,
				DisableNotifications			= pDisableNotifications,
				FailCount 						= 0,
				DisableSourceNotifications		= pDisableSourceNotifications,
				DefaultGridSize					= pDefaultGridSize
		WHERE	UserId = pUserId;

		SET @LastPasswordChangeDate = UTC_TIMESTAMP();

		-- Update this user
		UPDATE 	User SET
				FirstName				= if(@IsCloudxUser = 0, pFirstName, FirstName),
				LastName				= if(@IsCloudxUser = 0, pLastName, LastName),
				Email 					= pEmail,
				Telephone	 			= pTelephone,
				Password				= IF(pPassword is null, Password, pPassword),
				LastPasswordChangeDate	= IF(pPassword is null, LastPasswordChangeDate, @LastPasswordChangeDate),
				LimitMailPerDay			= pLimitMailPerDay,
				AddressId 				= @vAddressId
		WHERE 	UserId = pUserId
				AND ClientId = pClientId;


		-- if Client User then do not do any syncing				
		IF @IsCloudxUser = 0 then
			LEAVE ThisProc;
		end if;






		-- All the data has been changed for this user.
		-- Now sync to all other logins this user has.  (Do this ONLY for CloudX admins... for now)

		-- Update all other users BUT use the same AddressId
		UPDATE 	User AS u
				inner JOIN _x_Client xc	ON xc.ClientId = u.ClientId

			SET
				u.Email 					= pEmail,
				u.Telephone	 				= pTelephone,
				u.Password					= IF(pPassword is null, u.Password, pPassword),
				u.LastPasswordChangeDate	= IF(pPassword is null, u.LastPasswordChangeDate, @LastPasswordChangeDate),
				u.LimitMailPerDay			= pLimitMailPerDay,
				u.AddressId 				= @vAddressId
		WHERE 	u.FirstName 		= pFirstName
				AND u.LastName 		= pLastName
				AND u.IsCloudxUser 	= 1
				AND u.ClientId 		<> pClientId;

		
		-- Make sure there is a record in here fore the update
		INSERT 	INTO _x_UserParameters(UserId)
			SELECT 	u.UserId
			FROM	User u
					inner JOIN _x_Client xc	ON xc.ClientId = u.ClientId
					LEFT JOIN _x_UserParameters parms	on parms.UserId = u.UserId
			WHERE 	u.FirstName 		= pFirstName
					AND u.LastName 		= pLastName
					AND u.IsCloudxUser 	= 1
					AND u.ClientId 		<> pClientId
					AND parms.UserId is null;
		

		-- Sync Changes
		update 	_x_UserParameters AS parms
				inner JOIN User			ON User.UserId = parms.UserId
				inner JOIN _x_Client xc	ON xc.ClientId = User.ClientId
			set
				parms.LaunchPage						= pLaunchPage,
				parms.UseSmartSearch					= pUseSmartSearch,
				parms.DisableNotifications				= pDisableNotifications,
				parms.FailCount 						= 0,
				parms.DisableSourceNotifications		= pDisableSourceNotifications,
				parms.DefaultGridSize					= pDefaultGridSize
		WHERE 	User.FirstName 			= pFirstName
				AND User.LastName 		= pLastName
				AND User.IsCloudxUser 	= 1
				AND User.ClientId 		<> pClientId;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_Workflow` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_Workflow`(IN `pType` tinyint,
	IN `pClientId` int,
	IN `pCompanyId` int,
	IN `pStepId` int,
	IN `pOrderNo` tinyint)
BEGIN

	set @CodePosition = 2;
	Call _x_GetClientParam(pClientId, 'CodePosition', @CodePosition);

	IF (pType = 0) THEN  /* Main Step */

		SELECT DISTINCT
			COALESCE(ClientCompany.Id, 0) AS Id,
			case	when @CodePosition = 1 THEN
						concat("[", IFNULL(CompanyCode, ""), "] ", IFNULL(Description, ""))
					when @CodePosition = 2 THEN
						concat(IFNULL(Description, ""), " [", IFNULL(CompanyCode, ""), "]")
					else
						IFNULL(Description, IFNULL(CompanyCode, "")) end								as Description
		FROM ApprovalStep
			LEFT JOIN ClientCompany
				ON ApprovalStep.ClientCompanyId = ClientCompany.Id
		WHERE ApprovalStep.ClientId = pClientId;

	ELSEIF (pType = 1) THEN /* Step List */

		IF (pCompanyId > 0) THEN
			SELECT
				ApprovalStepId AS Id,
				StepName,
				ClientCompanyId AS CompanyId,
				IsPO,
				WorkflowType

			FROM ApprovalStep
			WHERE ClientId = pClientId
			AND ClientCompanyId = pCompanyId;
		ELSE
			SELECT
				ApprovalStepId AS Id,
				StepName,
				ClientCompanyId AS CompanyId,
				IsPO,
				WorkflowType

			FROM ApprovalStep
			WHERE ClientId = pClientId;
		END IF;

	ELSEIF (pType = 2) THEN /* SubStep 1 & 2 */

		SELECT
			ApprovalSubStep.ApprovalSubStepId AS Id,
			ApprovalStep.StepName,
			SUBSTRING_INDEX (ApprovalSubStep.SubStepName, '(', 1) AS SubStepName,
			ApprovalSubStep.OrderNo

		FROM ApprovalSubStep
			LEFT JOIN ApprovalStep
				ON ApprovalSubStep.ApprovalStepId = ApprovalStep.ApprovalStepId
		WHERE ApprovalSubStep.ApprovalStepId = pStepId
		AND ApprovalStep.ClientId = pClientId;

	ELSEIF (pType = 3) THEN /* User in SubStep 1 & 2 */

		SELECT
			CAST(ApprovalSubStepUser.UserId AS char(36)) AS UserId,
			CONCAT(`User`.LastName, ', ', `User`.FirstName) AS `Name`,
			`User`.UserName,
			ApprovalSubStepUser.ManualAssignmentOnly

		FROM ApprovalSubStep
			LEFT JOIN ApprovalSubStepUser
				ON ApprovalSubStep.ApprovalSubStepId = ApprovalSubStepUser.ApprovalSubStepId
			LEFT JOIN `User`
				ON ApprovalSubStepUser.UserId = `User`.UserId
		WHERE ApprovalSubStep.ApprovalSubStepId = pStepId
		AND ApprovalSubStep.OrderNo = pOrderNo
		AND `User`.ClientId = pClientId
		ORDER BY `User`.LastName ASC;

	ELSE /* Catch All Users */

		SELECT
			CAST(ApprovalSubStepCatchAllUsers.UserId AS char(36)) AS UserId,
			CONCAT(`User`.LastName, ', ', `User`.FirstName) AS `Name`,
			`User`.UserName

		FROM ApprovalSubStepCatchAllUsers
			LEFT JOIN `User`
				ON ApprovalSubStepCatchAllUsers.UserId = `User`.UserId
		WHERE ApprovalSubStepCatchAllUsers.ApprovalSubStepId = pStepId
		AND `User`.ClientId = pClientId
		ORDER BY `User`.LastName ASC;

	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_WorkflowAddFilter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_WorkflowAddFilter`(IN `pType` tinyint,
IN `pSubStepId` int,
IN `pUserId` char(36),
IN `pGLCodeId` int,
IN `pDepartmentId` int,
IN `pProjectId` int,
IN `pVendorId` int,
IN `pOrgId` int,
IN `pAccountNumber` varchar(250))
BEGIN

  SET FOREIGN_KEY_CHECKS = 0;

  IF (pType = 0) THEN   /* ByVendor (VendorId) */

    DELETE
      FROM ApprovalSubStepUserVendor
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId
      AND VendorId = pVendorId;
    INSERT INTO ApprovalSubStepUserVendor (ApprovalSubStepId, UserId, VendorId)
      VALUES (pSubStepId, pUserId, pVendorId);

  ELSEIF (pType = 3) THEN   /* ByDepartment (DepartmentId) */

    DELETE
      FROM ApprovalSubStepUserDepartment
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId
      AND DepartmentId = pDepartmentId;
    INSERT INTO ApprovalSubStepUserDepartment (ApprovalSubStepId, UserId, DepartmentId)
      VALUES (pSubStepId, pUserId, pDepartmentId);

  ELSEIF (pType = 4) THEN   /* ByGL (GLCodeId) */

    DELETE
      FROM ApprovalSubStepUserGL
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId
      AND GLCodeId = pGLCodeId;
    INSERT INTO ApprovalSubStepUserGL (ApprovalSubStepId, UserId, GLCodeId)
      VALUES (pSubStepId, pUserId, pGLCodeId);

  ELSEIF (pType = 5) THEN   /* ByVendorAndDepartment (VendorId & DepartmentId) */

    DELETE
      FROM ApprovalSubStepUserVendorDepartment
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId
      AND VendorId = pVendorId
      AND DepartmentId = pDepartmentId;
    INSERT INTO ApprovalSubStepUserVendorDepartment (ApprovalSubStepId, UserId, VendorId, DepartmentId)
      VALUES (pSubStepId, pUserId, pVendorId, pDepartmentId);

  ELSEIF (pType = 6) THEN   /* ByVendorAndAccountNumber (VendorId & AccountNumber) */

    DELETE
      FROM ApprovalSubStepUserVendorAccountNumber
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId
      AND VendorId = pVendorId
      AND AccountNumber = pAccountNumber;
    INSERT INTO ApprovalSubStepUserVendorAccountNumber (ApprovalSubStepId, UserId, VendorId, AccountNumber)
      VALUES (pSubStepId, pUserId, pVendorId, pAccountNumber);

  ELSEIF (pType = 7) THEN   /* ByProject (ProjectId) */

    DELETE
      FROM ApprovalSubStepUserProject
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId
      AND ProjectTypeId = pProjectId;
    INSERT INTO ApprovalSubStepUserProject (ApprovalSubStepId, UserId, ProjectTypeId)
      VALUES (pSubStepId, pUserId, pProjectId);

  ELSEIF (pType = 8) THEN   /* ByVendorAndOrgData (VendorId & OrgId) */

    DELETE
      FROM ApprovalSubStepUserVendorOrgData
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId
      AND VendorId = pVendorId
      AND OrgId = pOrgId;
    INSERT INTO ApprovalSubStepUserVendorOrgData (ApprovalSubStepId, UserId, VendorId, OrgId)
      VALUES (pSubStepId, pUserId, pVendorId, pOrgId);

  END IF;

  SET FOREIGN_KEY_CHECKS = 1;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_WorkflowAddUser` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_WorkflowAddUser`(IN `pType` tinyint,
IN `pSubStepId` int,
IN `pUserId` char(36),
IN `pAssign` tinyint)
BEGIN

  SET FOREIGN_KEY_CHECKS = 0;

  IF (pType = 0) THEN

    DELETE
      FROM ApprovalSubStepUser
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId;
    INSERT INTO ApprovalSubStepUser (ApprovalSubStepId, UserId, ManualAssignmentOnly, CompareByFilterIntersection)
      VALUES (pSubStepId, pUserId, pAssign, 0);

  ELSE

    DELETE
      FROM ApprovalSubStepCatchAllUsers
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId;
    INSERT INTO ApprovalSubStepCatchAllUsers (ApprovalSubStepId, UserId)
      VALUES (pSubStepId, pUserId);

  END IF;

  SET FOREIGN_KEY_CHECKS = 1;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_WorkflowDelete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_WorkflowDelete`(IN `pType` tinyint,
IN `pSubStepId` int,
IN `pUserId` char(36),
IN `pFilter` tinyint,
IN `pFilterId1` varchar(250),
IN `pFilterId2` varchar(250))
BEGIN

  SET FOREIGN_KEY_CHECKS = 0;

  IF (pType = 0) THEN  /* Delete Approver */

    DELETE
      FROM ApprovalSubStepUserVendor
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId;

    DELETE
      FROM ApprovalSubStepUserDepartment
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId;

    DELETE
      FROM ApprovalSubStepUserGL
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId;

    DELETE
      FROM ApprovalSubStepUserVendorDepartment
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId;

    DELETE
      FROM ApprovalSubStepUserVendorAccountNumber
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId;

    DELETE
      FROM ApprovalSubStepUserProject
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId;

    DELETE
      FROM ApprovalSubStepUserVendorOrgData
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId;

    DELETE
      FROM ApprovalSubStepUser
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId;

  ELSEIF (pType = 1) THEN /* Delete Catch Approver */

    DELETE
      FROM ApprovalSubStepCatchAllUsers
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId;

  ELSE

    IF (pFilter = 0) THEN   /* ByVendor (VendorId) */

      DELETE
        FROM ApprovalSubStepUserVendor
      WHERE ApprovalSubStepId = pSubStepId
        AND UserId = pUserId
        AND VendorId = pFilterId1;

    ELSEIF (pFilter = 3) THEN   /* ByDepartment (DepartmentId) */

      DELETE
        FROM ApprovalSubStepUserDepartment
      WHERE ApprovalSubStepId = pSubStepId
        AND UserId = pUserId
        AND DepartmentId = pFilterId1;

    ELSEIF (pFilter = 4) THEN   /* ByGL (GLCodeId) */

      DELETE
        FROM ApprovalSubStepUserGL
      WHERE ApprovalSubStepId = pSubStepId
        AND UserId = pUserId
        AND GLCodeId = pFilterId1;

    ELSEIF (pFilter = 5) THEN   /* ByVendorAndDepartment (VendorId & DepartmentId) */

      DELETE
        FROM ApprovalSubStepUserVendorDepartment
      WHERE ApprovalSubStepId = pSubStepId
        AND UserId = pUserId
        AND VendorId = pFilterId1
        AND DepartmentId = pFilterId2;

    ELSEIF (pFilter = 6) THEN   /* ByVendorAndAccountNumber (VendorId & AccountNumber) */

      DELETE
        FROM ApprovalSubStepUserVendorAccountNumber
      WHERE ApprovalSubStepId = pSubStepId
        AND UserId = pUserId
        AND VendorId = pFilterId1
        AND AccountNumber = pFilterId2;

    ELSEIF (pFilter = 7) THEN   /* ByProject (ProjectId) */

      DELETE
        FROM ApprovalSubStepUserProject
      WHERE ApprovalSubStepId = pSubStepId
        AND UserId = pUserId
        AND ProjectTypeId = pFilterId1;

    ELSEIF (pFilter = 8) THEN   /* ByVendorAndOrgData (VendorId & OrgId) */

      DELETE
        FROM ApprovalSubStepUserVendorOrgData
      WHERE ApprovalSubStepId = pSubStepId
        AND UserId = pUserId
        AND VendorId = pFilterId1
        AND OrgId = pFilterId2;

    END IF;

  END IF;

  SET FOREIGN_KEY_CHECKS = 1;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_WorkflowFilter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_WorkflowFilter`(
-- noformat
	IN `pType` tinyint,
	IN `pSubStepId` int,
	IN `pUserId` char(36),
	IN `pOffset` int,
	IN `pSize` int)
BEGIN
	
	set @VendorNoAfterName = 1;

	IF (pType = 0) THEN   /* ByVendor (VendorId) */
		SELECT	CONCAT(Vendor.VendorId, ';0') 																				AS Id,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
					else
						concat('[', IFNULL(Vendor.VendorNo, ''), '] ', IFNULL(Vendor.VendorName, '')) end 					as Vendor
		FROM	ApprovalSubStepUserVendor
				LEFT JOIN Vendor	ON ApprovalSubStepUserVendor.VendorId = Vendor.VendorId
		WHERE	ApprovalSubStepUserVendor.ApprovalSubStepId = pSubStepId
				AND ApprovalSubStepUserVendor.UserId = pUserId
		LIMIT 	pOffset, pSize;
	
	ELSEIF (pType = 3) THEN   /* ByDepartment (DepartmentId) */
		SELECT	CONCAT(Department.Id, ';0') AS Id,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Department.Description, ''), ' [', IFNULL(Department.DepartmentName, ''), ']')
					else
						concat('[', IFNULL(Department.DepartmentName, ''), '] ', IFNULL(Department.Description, '')) end 	as Department
		FROM 	ApprovalSubStepUserDepartment
				LEFT JOIN Department	ON ApprovalSubStepUserDepartment.DepartmentId = Department.Id
		WHERE	ApprovalSubStepUserDepartment.ApprovalSubStepId = pSubStepId
				AND ApprovalSubStepUserDepartment.UserId = pUserId
		LIMIT	pOffset, pSize;
	
	ELSEIF (pType = 4) THEN   /* ByGL (GLCodeId) */
		SELECT	CONCAT(GLCode.GLCodeId, ';0') AS Id,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(GLCode.Desccription, ''), ' [', IFNULL(GLCode.GLCodeName, ''), ']')
					else
						concat('[', IFNULL(GLCode.GLCodeName, ''), '] ', IFNULL(GLCode.Desccription, '')) end 	as GLCode

		FROM	ApprovalSubStepUserGL
				LEFT JOIN GLCode		ON ApprovalSubStepUserGL.GLCodeId = GLCode.GLCodeId
		WHERE	ApprovalSubStepUserGL.ApprovalSubStepId = pSubStepId
				AND ApprovalSubStepUserGL.UserId = pUserId
		LIMIT	pOffset, pSize;
	
	ELSEIF (pType = 5) THEN   /* ByVendorAndDepartment (VendorId & DepartmentId) */
	
		SELECT	CONCAT(Vendor.VendorId, ';', Department.Id) AS Id,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
					else
						concat('[', IFNULL(Vendor.VendorNo, ''), '] ', IFNULL(Vendor.VendorName, '')) end 					as Vendor,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Department.Description, ''), ' [', IFNULL(Department.DepartmentName, ''), ']')
					else
						concat('[', IFNULL(Department.DepartmentName, ''), '] ', IFNULL(Department.Description, '')) end 	as Department
		FROM	ApprovalSubStepUserVendorDepartment
				LEFT JOIN Vendor		ON ApprovalSubStepUserVendorDepartment.VendorId = Vendor.VendorId
				LEFT JOIN Department	ON ApprovalSubStepUserVendorDepartment.DepartmentId = Department.Id
		WHERE	ApprovalSubStepUserVendorDepartment.ApprovalSubStepId = pSubStepId
				AND ApprovalSubStepUserVendorDepartment.UserId = pUserId
		LIMIT pOffset, pSize;
	
	ELSEIF (pType = 6) THEN   /* ByVendorAndAccountNumber (VendorId & AccountNumber) */
		SELECT	CONCAT(Vendor.VendorId, ';', ApprovalSubStepUserVendorAccountNumber.AccountNumber) AS Id,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
					else
						concat('[', IFNULL(Vendor.VendorNo, ''), '] ', IFNULL(Vendor.VendorName, '')) end 					as Vendor,
				ApprovalSubStepUserVendorAccountNumber.AccountNumber
		FROM	ApprovalSubStepUserVendorAccountNumber
				LEFT JOIN Vendor	ON ApprovalSubStepUserVendorAccountNumber.VendorId = Vendor.VendorId
		WHERE	ApprovalSubStepUserVendorAccountNumber.ApprovalSubStepId = pSubStepId
				AND ApprovalSubStepUserVendorAccountNumber.UserId = pUserId
		LIMIT pOffset, pSize;
	
	ELSEIF (pType = 7) THEN   /* ByProject (ProjectId) */
		SELECT	CONCAT(ProjectType.Id, ';0') AS Id,
				ProjectType.ProjectName AS `Project`
		FROM	ApprovalSubStepUserProject
				LEFT JOIN ProjectType	ON ApprovalSubStepUserProject.ProjectTypeId = ProjectType.Id
		WHERE	ApprovalSubStepUserProject.ApprovalSubStepId = pSubStepId
				AND ApprovalSubStepUserProject.UserId = pUserId
		LIMIT pOffset, pSize;
	
	ELSEIF (pType = 8) THEN   /* ByVendorAndOrgData (VendorId & OrgId) */
		SELECT	CONCAT(Vendor.VendorId, ';', OrgData.Id) AS Id,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
					else
						concat('[', IFNULL(Vendor.VendorNo, ''), '] ', IFNULL(Vendor.VendorName, '')) end 					as Vendor,

				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(OrgData.OrgName, ''), ' [', IFNULL(OrgData.OrgId, ''), ']')
					else
						concat('[', IFNULL(OrgData.OrgId, ''), '] ', IFNULL(OrgData.OrgName, '')) end 					as `Company`
		FROM	ApprovalSubStepUserVendorOrgData
				LEFT JOIN Vendor	ON ApprovalSubStepUserVendorOrgData.VendorId = Vendor.VendorId
				LEFT JOIN OrgData	ON ApprovalSubStepUserVendorOrgData.OrgId = OrgData.Id
		WHERE	ApprovalSubStepUserVendorOrgData.ApprovalSubStepId = pSubStepId
				AND ApprovalSubStepUserVendorOrgData.UserId = pUserId
		LIMIT 	pOffset, pSize;
	
	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_WorkflowType` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_WorkflowType`(IN `pSubStepId` int)
BEGIN

  SELECT
    ApprovalStepUserFilterType AS `Type`
  FROM ApprovalSubStepUserFilter
  WHERE ApprovalSubStepId = pSubStepId
  ORDER BY ApprovalStepUserFilterType DESC;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_zzzz_StandardizeCloudxUsers` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_zzzz_StandardizeCloudxUsers`(in pConfirm varchar(20))
ThisProc:BEGIN
	drop TEMPORARY TABLE IF EXISTS myWork;
	CREATE TEMPORARY TABLE IF NOT EXISTS myWork (
			UserId					char(36),
			FN						varchar(500),
			LN						varchar(500),
			isAdmin					int,
			isActive				int, 
			ClientId				int,
			isCloudXUser			int,
			ShortName				varchar(500),
			UserName				varchar(500),
			Email					varchar(500),
			Site 					varchar(500)
		);

insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b835216a-e6e9-4444-a89c-9934c53cbe1c', 'Abeba', 'Degefu', 0, 0, 1, 1, 'Kettle', 'Abeba.Degefu@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4e9ee656-1a46-4c66-aac2-2e0a496dfbd9', 'Abel', 'Kenaw', 0, 0, 1, 1, 'Kettle', 'Abel.Kenaw@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0cafd6c3-4c27-45dc-8cf6-a3f845be8e04', 'Abraham', 'Teklay', 0, 0, 1, 1, 'Kettle', 'Abraham.Teklay@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('eef77707-0045-4e3d-ab5c-f72c2b9b7613', 'Addis', 'Qc', 0, 0, 1, 1, 'Kettle', 'Addis.Qc@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7ad064ca-d8bd-4de4-86b5-d646b1ccd520', 'Admin', 'Kettle', 1, 1, 1, 1, 'Kettle', 'Admin@Kettle', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a88f3764-b5bb-46d7-8242-c85e73b590fa', 'Arsema', 'Abiy', 0, 0, 1, 1, 'Kettle', 'Arsema.Abiy@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f21f73c9-04bd-481d-b5e0-bdedfa653c6d', 'Ashenafi', 'Dejen', 0, 0, 1, 1, 'Kettle', 'Ashenafi.Dejen@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('526b039a-ef72-499a-afd5-aa9616ef97ec', 'Ashenafi', 'Dejen', 0, 0, 1, 1, 'Kettle', 'Ashenafi.Dejen@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('58c494a4-92ad-4a20-803b-7561fe19c4ad', 'Ashenafi', 'Dejen', 0, 0, 1, 1, 'Kettle', 'Ashenafi.Dejen@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('60086dd2-94ca-433e-9f39-9c6d6c20632d', 'Ashenafi', 'Dejen', 0, 0, 1, 1, 'Kettle', 'Ashenafi.Dejen@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7c1911f1-0312-4468-8871-46d403cb70ad', 'Ashenafi', 'Dejen', 0, 0, 1, 1, 'Kettle', 'Ashenafi.Dejen@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('991461ea-a864-43ea-99d2-1850020c0f50', 'Ashenafi', 'Dejen', 0, 0, 1, 1, 'Kettle', 'Ashenafi.Dejen@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e2e368db-4411-4331-8fa7-e9c8c1ab3169', 'Ashenafi', 'Dejen', 0, 0, 1, 1, 'Kettle', 'Ashenafi.Dejen@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ecc581d0-9c7e-4c60-83f6-42de461ce319', 'Ashenafi', 'Dejen', 0, 0, 1, 1, 'Kettle', 'Ashenafi.Dejen@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2b89a9a1-6a49-4fdd-82ab-d282e5dbdbc0', 'Ashenafi', 'Dejen', 0, 0, 1, 1, 'Kettle', 'Ashenafi.Dejen@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cf701ac1-c0bb-48d0-9bd1-73788e941bc3', 'Ashenafi', 'Dejen', 0, 0, 1, 1, 'Kettle', 'Ashenafi.Dejen@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1a79f8de-95ec-4287-80cb-5c7a72390db7', 'Beakal', 'Deriba', 0, 0, 1, 1, 'Kettle', 'Beakal.Deriba@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('becdbe54-a1e3-4f93-b19f-a011eb2509ba', 'Bro', 'Elias', 0, 0, 1, 1, 'Kettle', 'Bro.Elias@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6fdeaf77-f9c0-4bff-bebd-ee71bff4ce0f', 'Cloudxuser', 'For Testing', 0, 0, 1, 1, 'Kettle', 'Cloudxuser.For Testing@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ccb13c01-72b8-4fdf-bc1e-a81a2e0b0835', 'Hana', 'Zewede', 0, 0, 1, 1, 'Kettle', 'Hana.Zewede@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1dd28bd3-b440-4298-a6cc-0f5f4fa1735f', 'Henok', 'Hailu', 0, 0, 1, 1, 'Kettle', 'Henok.Hailu@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bd25f635-b607-467b-a6ea-48d73afd1027', 'Jote', 'Daniel', 0, 0, 1, 1, 'Kettle', 'Jote.Daniel@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9a21c177-8462-47fe-b5ac-e271fe14023e', 'Admin', 'Kettle', 1, 0, 1, 1, 'Kettle', 'Admin@Kettle-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('caf866da-d9a3-4452-a9c2-15e145b12841', 'Kaleab', 'Tariku', 0, 0, 1, 1, 'Kettle', 'Kaleab.Tariku@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('eb6f4949-6ef1-4339-b407-5a2300c9662b', 'Mahlet', 'Bekele', 0, 0, 1, 1, 'Kettle', 'Mahlet.Bekele@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b26036e-7931-4f42-9bbd-274e2c7f4bd0', 'Mahlet', 'Tesfay', 0, 0, 1, 1, 'Kettle', 'Mahlet.Tesfay@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c7482110-3b4c-44aa-be2e-7ecd957a388e', 'Mahlet', 'Tesfay', 0, 0, 1, 1, 'Kettle', 'Mahlet.Tesfay@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3bf9c48a-28f5-41f9-b4f1-06506d7099f7', 'Mamar', 'Sewuye', 0, 0, 1, 1, 'Kettle', 'Mamar.Sewuye@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('dcbadbb8-c6c0-4639-8139-cb41a29f2463', 'Mamar', 'Sewuye', 0, 0, 1, 1, 'Kettle', 'Mamar.Sewuye@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8a0b9d97-67e0-4d80-ab51-0a08e7687ff7', 'Melat', 'Mitiku', 0, 0, 1, 1, 'Kettle', 'Melat.Mitiku@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('da9d3c51-f4de-47de-8a76-ee4eb9403d40', 'Mesay', 'Fikru', 0, 0, 1, 1, 'Kettle', 'Mesay.Fikru@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6f921800-8004-4778-a85a-9eee68365ed9', 'Mikias', 'Leweyehu', 0, 0, 1, 1, 'Kettle', 'Mikias.Leweyehu@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5313c483-4c0c-48f3-8376-d21c4d122f0d', 'Mikiyas', 'Tefera', 0, 0, 1, 1, 'Kettle', 'Mikiyas.Tefera@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3a97e14d-5534-463b-82bd-8d30f1e19336', 'Milaaa', 'Mila', 0, 0, 1, 1, 'Kettle', 'Milaaa.Mila@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d3be2dc0-2727-49b9-a689-19433db577fa', 'Misker', 'Misker', 0, 0, 1, 1, 'Kettle', 'Misker.Misker@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('15f4b0e4-7f09-4c4f-9802-383afa70ad8c', 'Misker', 'Tsegaye', 0, 0, 1, 1, 'Kettle', 'Misker.Tsegaye@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a5459978-3c73-4327-8e40-05896f9462c8', 'Nani', 'Legesse', 0, 0, 1, 1, 'Kettle', 'Nani.Legesse@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b8d4519-5702-4765-971d-0bcefc5e1949', 'Osman', 'Amare F', 0, 0, 1, 1, 'Kettle', 'Osman.Amare F@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f26773c8-12ed-4e2c-a6ed-62e1ffa42850', 'Raey', 'Yohannes', 0, 0, 1, 1, 'Kettle', 'Raey.Yohannes@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f323664e-bb20-4718-b867-12ad0ac51edc', 'Samrawit', 'Goitom', 0, 0, 1, 1, 'Kettle', 'Samrawit.Goitom@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4fbeca10-ba86-47f5-8e40-be43f87fb117', 'Samrawit', 'Tesfaye', 0, 0, 1, 1, 'Kettle', 'Samrawit.Tesfaye@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0aef3864-2b11-4c16-955e-f0cba12bcb4f', 'Samrawit', 'Yohalashet', 0, 0, 1, 1, 'Kettle', 'Samrawit.Yohalashet@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0e2b7b2-b6c0-4dff-a89e-4d5bfc33a3db', 'Seble', 'Sisay', 0, 0, 1, 1, 'Kettle', 'Seble.Sisay@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a6b1eff2-6c2b-4734-b3e2-8ed01109e837', 'Selam', 'Selam', 0, 0, 1, 1, 'Kettle', 'Selam.Selam@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('23c1f5f2-406c-4688-8f95-c045095d7aff', 'Senait', 'Besepa', 0, 0, 1, 1, 'Kettle', 'Senait.Besepa@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('dead5d4a-994e-46a7-8935-67479782b880', 'Tamara', 'Ruel', 0, 0, 1, 1, 'Kettle', 'Tamara.Ruel@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f20cae8b-dd0d-4087-b041-5a913b555e43', 'Tamara', 'Ruel', 1, 0, 1, 1, 'Kettle', 'Admin@Kettle-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('55a15bfd-216e-4a47-9664-ba0cc9df715d', 'Tiruwork', 'Mekonnen', 0, 0, 1, 1, 'Kettle', 'Tiruwork.Mekonnen@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ecfd5e4b-be85-4624-adf9-b01befd90745', 'Tsedenya', 'Yohannes', 0, 0, 1, 1, 'Kettle', 'Tsedenya.Yohannes@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9440f05d-581a-45c1-9916-0f21c7d15f8f', 'Wintana', 'Gebremedhin', 0, 0, 1, 1, 'Kettle', 'Wintana.Gebremedhin@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d11a68a3-21c0-4ffd-acc7-c1fdaae054ae', 'Yafet', 'Abdo', 0, 0, 1, 1, 'Kettle', 'Yafet.Abdo@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e8c02dd6-4981-4ef9-ac13-04f882217042', 'Yafet', 'Abdo', 0, 0, 1, 1, 'Kettle', 'Yafet.Abdo@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f4dd8d0c-a644-40e9-bcf4-f7e2ae39af39', 'Yafet', 'Abdo', 0, 0, 1, 1, 'Kettle', 'Yafet.Abdo@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('49a51154-e849-4922-a05e-f3a1d33b3266', 'Yaphet', 'G/Tsadik', 0, 0, 1, 1, 'Kettle', 'Yaphet.G/Tsadik@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('54fad739-6930-4e61-87e2-42fb4895d4cd', 'Yonatan', 'Getamesay', 0, 0, 1, 1, 'Kettle', 'Yonatan.Getamesay@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('79689d53-ec06-4c55-9886-c6d2ba78b9e5', 'Yonatan', 'Getamesay', 0, 0, 1, 1, 'Kettle', 'Yonatan.Getamesay@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0f5c0917-4fb0-494e-81c6-f19b8db86542', 'Yonatan', 'Getamesay', 0, 0, 1, 1, 'Kettle', 'Yonatan.Getamesay@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('28d05801-cd58-457e-9652-9a8a576a1264', 'Yonathan', 'Tedla', 0, 0, 1, 1, 'Kettle', 'Yonathan.Tedla@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c3005b8b-e85e-47ff-91d9-799cdfc42314', 'Yonathan', 'Tedla', 0, 0, 1, 1, 'Kettle', 'Yonathan.Tedla@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('110100c9-c625-489b-a155-8cba686fb573', 'Yordanos', 'Zewde', 0, 0, 1, 1, 'Kettle', 'Yordanos.Zewde@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d4e91885-6b5c-4155-9e1c-0db49acaead4', 'Abeba', 'Degefu', 0, 0, 5, 1, 'MHC', 'Abeba.Degefu@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('DF0D378C-51A4-4776-89BD-4D3A56BE362A', 'Alexander', 'Melese', 0, 0, 5, 1, 'MHC', 'Alexander.Melese@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a8601a11-eaa5-4097-9f41-7a14492fbd80', 'Arsema', 'Abiy', 0, 0, 5, 1, 'MHC', 'Arsema.Abiy@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3ea9f219-c854-48ed-88e5-80368cc0534a', 'Ashenafi', 'Dejen', 0, 0, 5, 1, 'MHC', 'Ashenafi.Dejen@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9BD31ACA-82BA-4F94-973A-DF917AEEC990', 'Bigbossman', 'Cloudx', 0, 0, 5, 1, 'MHC', 'Bigbossman.Cloudx@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b93d79e6-0617-4149-bae0-680a665c5c10', 'Bro', 'Elias', 0, 0, 5, 1, 'MHC', 'Bro.Elias@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0CA9E5D9-6136-42E0-B7B5-469606A15A89', 'Cloudx', 'Operator', 0, 0, 5, 1, 'MHC', 'Cloudx.Operator@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('A09CD5A2-ADD0-4422-912A-46BAA2BA2E96', 'Cloudx', 'Supervisor', 0, 0, 5, 1, 'MHC', 'Cloudx.Supervisor@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('61C0CA1F-CD4B-43F7-A359-9DAAC5B86A85', 'Danny', 'Tek', 0, 0, 5, 1, 'MHC', 'Danny.Tek@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e8dc208b-277a-4f79-99e6-b0d7cbfc3a84', 'Data', 'Entry', 0, 0, 5, 1, 'MHC', 'Data.Entry@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('55df54e9-2307-42d4-8727-36017e6c71e3', 'Elshaday', 'Adamu', 0, 0, 5, 1, 'MHC', 'Elshaday.Adamu@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ac7b01d4-94f3-4e58-ad60-78b281602833', 'Elshaday', 'Adamu', 0, 0, 5, 1, 'MHC', 'Elshaday.Adamu@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('98746DAB-D076-4747-BB00-40D98A960514', 'Gideon', 'Solomon', 0, 0, 5, 1, 'MHC', 'Gideon.Solomon@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('06B81CE5-3107-48D2-9886-B92C1805AFC4', 'Hana', 'Zewde', 0, 0, 5, 1, 'MHC', 'Hana.Zewde@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('62F70EA9-4B3E-4022-9692-C2195311B1F8', 'Henok', 'Hailu', 0, 0, 5, 1, 'MHC', 'Henok.Hailu@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3db25c17-b0b5-49de-8207-1617476adc4e', 'Jote', 'Daniel', 0, 0, 5, 1, 'MHC', 'Jote.Daniel@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('FAA6EEFD-086D-45B6-8C02-B9962DED1873', 'Lidia', 'Debebe', 0, 0, 5, 1, 'MHC', 'Lidia.Debebe@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7FA348F6-0206-42E5-86AF-30965D82DEF6', 'Mahlet', 'Dentry', 0, 0, 5, 1, 'MHC', 'Mahlet.Dentry@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('09cd6292-e47c-4dab-bb94-9c1f05f9acea', 'Mekonnnen', 'True', 0, 0, 5, 1, 'MHC', 'Mekonnnen.True@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a156c2b3-2c94-4e97-afd7-fdef1e5897f1', 'Meron', 'Agegew', 0, 0, 5, 1, 'MHC', 'Meron.Agegew@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0C109D3A-5639-49E0-B2DE-9783FC424924', 'Michael', 'Behailu', 0, 0, 5, 1, 'MHC', 'Michael.Behailu@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a358716c-a0a8-4f7e-af76-813023685f42', 'Mikias', 'Leweyehu', 0, 0, 5, 1, 'MHC', 'Mikias.Leweyehu@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('981b1114-5962-4e9b-9108-d7e40b1adc44', 'Mikiyas', 'Shemsu', 0, 0, 5, 1, 'MHC', 'Mikiyas.Shemsu@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9421d689-c45c-4979-b8d8-ed0c54439ce3', 'Mikiyas', 'Tefera', 0, 0, 5, 1, 'MHC', 'Mikiyas.Tefera@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('CAED0E32-A28B-4825-832C-51C3C50D026C', 'Nani', 'Legesse', 0, 0, 5, 1, 'MHC', 'Nani.Legesse@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('480fb6d6-ecce-466f-aaa3-4d2a488c9eb0', 'Nathi', 'Nathi', 0, 0, 5, 1, 'MHC', 'Nathi.Nathi@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9206b972-b7f8-41e3-82f4-f469111f9363', 'Nati', 'Masonic', 0, 0, 5, 1, 'MHC', 'Nati.Masonic@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('23F5A574-13EC-450A-885B-0B155ADA14EF', 'Raey', 'Yohannes', 0, 0, 5, 1, 'MHC', 'Raey.Yohannes@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3E81F5AB-D385-4661-B5FA-1BBDE83A80D7', 'Rakeb', 'Chane', 0, 0, 5, 1, 'MHC', 'Rakeb.Chane@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('18562D4F-0899-4E02-9139-05392732EFC6', 'Roman', 'Taye', 0, 0, 5, 1, 'MHC', 'Roman.Taye@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cd64ebb1-536b-4d69-a9b5-6287ebe4667a', 'Samrawit', 'Goitom', 0, 0, 5, 1, 'MHC', 'Samrawit.Goitom@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5f715ddf-d8be-4c7e-a887-aacee2362b8a', 'Samrawit', 'Tesfaye', 0, 0, 5, 1, 'MHC', 'Samrawit.Tesfaye@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6079c9cc-d0aa-4c43-97aa-d660207ea71c', 'Samrawit', 'Tesfaye', 0, 0, 5, 1, 'MHC', 'Samrawit.Tesfaye@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('687dcbbe-298c-430f-8088-489e5b281136', 'Senit', 'Besepa', 0, 0, 5, 1, 'MHC', 'Senit.Besepa@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6c0290f9-4080-4da1-82f0-560a02f09a91', 'Swapna', 'Sawant', 0, 0, 5, 1, 'MHC', 'Swapna.Sawant@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d6d58e7f-e6e1-40e2-aea9-d27b246b8e31', 'Tiblets', 'Zewde', 0, 0, 5, 1, 'MHC', 'Tiblets.Zewde@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('33ac4afe-a304-4830-a4e3-d67230f9e834', 'True', 'Mekonnen', 0, 0, 5, 1, 'MHC', 'True.Mekonnen@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5e3c6127-acf9-495e-b78f-1e6f01f060c4', 'Tt', 'Mm', 0, 0, 5, 1, 'MHC', 'Tt.Mm@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('875ad310-3ee6-441c-a1da-dcedf13435de', 'Wintana', 'Gebremedhin', 0, 0, 5, 1, 'MHC', 'Wintana.Gebremedhin@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('FBDD943F-F289-4FCC-93A8-8766AD515027', 'Xavier', 'Cloudx', 0, 0, 5, 1, 'MHC', 'Xavier.Cloudx@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e3bab196-0e27-420c-a17a-97764a1605a2', 'Yonatan', 'Getamesay', 0, 0, 5, 1, 'MHC', 'Yonatan.Getamesay@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('096EB3D8-5CA8-4867-BFCF-2EB8E1FEC684', 'Yonathan', 'Tedla', 0, 0, 5, 1, 'MHC', 'Yonathan.Tedla@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('46020F9D-2A3E-44FD-98BC-1D198E9CCCE9', 'Yordanos', 'Zewde', 0, 0, 5, 1, 'MHC', 'Yordanos.Zewde@MHC-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('670ef1a4-b2d4-4ed5-b159-5eb51e244064', 'Abeba', 'Degefu', 0, 0, 15, 1, 'SRH', 'Abeba.Degefu@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c65ee42e-29b6-4147-9858-5532e826a724', 'Abraham', 'Teklay', 0, 0, 15, 1, 'SRH', 'Abraham.Teklay@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c158c371-64f0-45f1-976a-56fec93eefc1', 'Abraham', 'Teklay', 0, 0, 15, 1, 'SRH', 'Abraham.Teklay@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6d92546c-2113-41a6-ad29-59a80c5580a3', 'Addis', 'Getachew', 0, 0, 15, 1, 'SRH', 'Addis.Getachew@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('612bcb69-a29c-4821-9143-8a5c43c016af', 'Aklilu', 'Tesfaye', 0, 0, 15, 1, 'SRH', 'Aklilu.Tesfaye@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d11ff1df-c64d-48d2-8b00-7453f6547b76', 'Aklilu', 'Tesfaye', 0, 0, 15, 1, 'SRH', 'Aklilu.Tesfaye@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8da585f5-5870-4aaa-9ba7-5909a304dab9', 'Arsema', 'Abiy', 0, 0, 15, 1, 'SRH', 'Arsema.Abiy@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d8dfb29b-1dbe-4721-af6e-f29a329ae7a7', 'Ashenafi', 'Dejen', 0, 0, 15, 1, 'SRH', 'Ashenafi.Dejen@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f8f77b01-0551-47a5-9700-2f06f219d42a', 'Ashenafi', 'Dejen', 0, 0, 15, 1, 'SRH', 'Ashenafi.Dejen@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('19b60f05-8c3e-481e-a015-f8f3c9a99eb9', 'Beatriz', 'Rodriguez', 0, 0, 15, 1, 'SRH', 'Beatriz.Rodriguez@SRH-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c88ba921-913e-4e38-8430-8472b4cb4028', 'Biruk', 'Kenaw', 0, 0, 15, 1, 'SRH', 'Biruk.Kenaw@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('117c02ab-25ca-4a7e-b4d5-ef3ab3b4e7cf', 'Bro', 'Elias', 0, 0, 15, 1, 'SRH', 'Bro.Elias@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('23216dfa-bbc7-41ea-adc8-e3c37d5eed11', 'Dself', 'Dself', 0, 0, 15, 1, 'SRH', 'Dself.Dself@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fbefa7d9-6dde-4e36-a566-9280ba9742ce', 'Hana', 'Zewde', 0, 0, 15, 1, 'SRH', 'Hana.Zewde@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f216ed1c-287a-4f8b-8042-3fa7fe446eba', 'Jote', 'Daniel', 0, 0, 15, 1, 'SRH', 'Jote.Daniel@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9846c871-7cd2-4f26-9d13-2c2e014052b2', 'Raey', 'Yohannes', 0, 0, 15, 1, 'SRH', 'Raey.Yohannes@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('35442d6c-bff8-4c4a-ab9a-423e792aa384', 'Samrawit', 'Goitom', 0, 0, 15, 1, 'SRH', 'Samrawit.Goitom@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e59ac348-6c6a-4850-a87f-4418c22153b5', 'Samrawit', 'Tesfaye', 0, 0, 15, 1, 'SRH', 'Samrawit.Tesfaye@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5458787c-4060-4f4d-b8b9-8e0b8088d26b', 'Selam', 'Eshete', 0, 0, 15, 1, 'SRH', 'Selam.Eshete@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('556afbd3-68b8-4ad4-af3c-874791f82abe', 'Self', 'Validation', 1, 0, 15, 1, 'SRH', 'Admin@SRH-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('33c421d2-5426-4ca4-870b-811739263939', 'Senait', 'Besepa', 0, 0, 15, 1, 'SRH', 'Senait.Besepa@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7e1ae7d2-beaf-4f46-8194-4493b9f8fe43', 'Senait', 'Besepa', 0, 0, 15, 1, 'SRH', 'Senait.Besepa@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('07bd04ee-7312-4f70-85c4-010a163990f9', 'Tiruwork', 'Mekonnen', 0, 0, 15, 1, 'SRH', 'Tiruwork.Mekonnen@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e9de5e01-52d9-4acc-889e-6ecf3744fb8a', 'Wintana', 'Gebremedhin', 0, 0, 15, 1, 'SRH', 'Wintana.Gebremedhin@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a516559e-4736-44df-8c6b-db4b6b2e1b5e', 'Yafet', 'Abdo', 0, 0, 15, 1, 'SRH', 'Yafet.Abdo@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ff7717d8-b900-445d-b2e9-b0faa78e639e', 'Yonatan', 'Getamesay', 0, 0, 15, 1, 'SRH', 'Yonatan.Getamesay@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08f8cc91-bf9a-4bf5-b103-c9ef882bde23', 'Yonathan', 'Tedla', 0, 0, 15, 1, 'SRH', 'Yonathan.Tedla@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e3b3c33a-287f-4cef-8014-33da9a97d2dc', 'Yordanos', 'Zewde', 0, 0, 15, 1, 'SRH', 'Yordanos.Zewde@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('01350384-59a8-4393-a133-3c52e808f8c6', 'Abraham', 'Teklay', 0, 0, 18, 1, 'BradFord', 'Abraham.Teklay@BradFord-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0907ef70-1837-4771-8675-278b8624aae6', 'Accounting', 'Cloudx', 0, 0, 18, 1, 'BradFord', 'Accounting.Cloudx@BradFord-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8c8ad36a-1371-45ef-9caf-7bc8e617c934', 'Aklilu', 'Tesfaye', 0, 0, 18, 1, 'BradFord', 'Aklilu.Tesfaye@BradFord-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('71cd6063-7b81-44f8-af0b-18c7ad8509f0', 'Alexander', 'Michael', 0, 0, 18, 1, 'BradFord', 'Alexander.Michael@BradFord-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ad844be4-2963-401f-a7e8-7d795320ac5c', 'Arsema', 'Abiy', 0, 0, 18, 1, 'BradFord', 'Arsema.Abiy@BradFord-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('737cd811-746a-4b98-a6eb-4f8e7fe20bba', 'Hana', 'Zewde', 0, 0, 18, 1, 'BradFord', 'Hana.Zewde@BradFord-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('72e49ad4-9adc-4e81-ba13-a333d5c2cf07', 'Michael', 'Behailu', 0, 0, 18, 1, 'BradFord', 'Michael.Behailu@BradFord-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3c9ef677-1b49-432a-a04d-cb239f425f8e', 'Wintana', 'Gebremedhin', 0, 0, 18, 1, 'BradFord', 'Wintana.Gebremedhin@BradFord-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8beac58b-1a28-4990-a6cb-85622f6c8d13', 'Yonatan', 'Getsamesay', 0, 0, 18, 1, 'BradFord', 'Yonatan.Getsamesay@BradFord-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b378913f-abe1-440d-bdc3-2505edd9eba4', 'Yonathan', 'Tedla', 0, 0, 18, 1, 'BradFord', 'Yonathan.Tedla@BradFord-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ec782bd1-8e1b-494c-beac-2185b1b297a2', 'Yonathan', 'Tedla', 0, 0, 18, 1, 'BradFord', 'Yonathan.Tedla@BradFord-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('39611d8d-f5cf-4fd9-9b3b-1229dea6598e', 'Yordanos', 'Zewde', 0, 0, 18, 1, 'BradFord', 'Yordanos.Zewde@BradFord-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5579c135-456a-477a-8e4a-e1150c737bbc', 'Abeba', 'Degefu', 0, 0, 20, 1, 'DriveMedical', 'Abeba.Degefu@DriveMedical-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3acc3959-0731-455f-8d9b-44b9db3811d4', 'Soliana', 'Amdemariam', 0, 0, 20, 1, 'DriveMedical', 'Soliana.Amdemariam@DriveMedical-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('dcce299b-e3f3-4917-8fe1-4dc158a6c2c2', 'Arsema', 'Abiy', 0, 0, 20, 1, 'DriveMedical', 'Arsema.Abiy@DriveMedical-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c37f4c09-d2dd-41b4-b6b6-edb492a1cf2e', 'Ashenafi', 'Dejen', 0, 0, 20, 1, 'DriveMedical', 'Ashenafi.Dejen@DriveMedical-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bdf7af05-a398-4df4-84d9-f1fca0e54ebd', 'Beakal', 'Deribe', 0, 0, 20, 1, 'DriveMedical', 'Beakal.Deribe@DriveMedical-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('74455bee-561f-4029-96b3-773c22ff1e6c', 'Biruk', 'Kenaw', 0, 0, 20, 1, 'DriveMedical', 'Biruk.Kenaw@DriveMedical-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3ce97cd9-dd2b-46c2-93de-29530b1bf75c', 'Daniel', 'Jote', 0, 0, 20, 1, 'DriveMedical', 'Daniel.Jote@DriveMedical-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('D30AB3D1-E027-412F-9E4F-F02B06AED1B5', 'Drive', 'Operator', 0, 0, 20, 1, 'DriveMedical', 'Drive.Operator@DriveMedical-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d27ad233-c9b4-4943-8268-970c4e9cc14f', 'Hana', 'Zewde', 0, 0, 20, 1, 'DriveMedical', 'Hana.Zewde@DriveMedical-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('df0e6b55-0482-4aa3-a87e-fd6b3164f811', 'Samrawit', 'Tesfaye', 0, 0, 20, 1, 'DriveMedical', 'Samrawit.Tesfaye@DriveMedical-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f5400c34-79f2-47b9-9f47-9cabbf013971', 'Selam', 'Eshete', 0, 0, 20, 1, 'DriveMedical', 'Selam.Eshete@DriveMedical-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('399d7283-c172-4d61-9f76-45788a881142', 'Test', 'Drive', 0, 0, 20, 1, 'DriveMedical', 'Test.Drive@DriveMedical-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d3b28baa-02cc-456d-a78b-50089cafaddf', 'Wintana', 'Gebremedhin', 0, 0, 20, 1, 'DriveMedical', 'Wintana.Gebremedhin@DriveMedical-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('77750924-3f06-4f01-b55a-c617c40596a6', 'Yonatan', 'Getamesay', 0, 0, 20, 1, 'DriveMedical', 'Yonatan.Getamesay@DriveMedical-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3c92c52f-11fa-4878-8c8a-114aceb9c349', 'Yonathan', 'Tedla', 0, 0, 20, 1, 'DriveMedical', 'Yonathan.Tedla@DriveMedical-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('468D0FB3-A42F-4BC8-B8A2-4624106617B1', 'Yonathan', 'Tedla', 0, 0, 20, 1, 'DriveMedical', 'Yonathan.Tedla@DriveMedical-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fc455fb1-b3d3-4c48-b2ab-503ae4749d7e', 'Yordanos', 'Zewde', 0, 0, 20, 1, 'DriveMedical', 'Yordanos.Zewde@DriveMedical-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e40dcc30-5c08-4793-baf2-958188e75066', 'Abeba', 'Degefu', 0, 0, 22, 1, 'DWR', 'Abeba.Degefu@DWR-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('505123f1-b657-4793-a250-16c5480d68bf', 'Abraham', 'Teklay', 0, 0, 22, 1, 'DWR', 'Abraham.Teklay@DWR-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('15a1a66e-82c6-4237-ba99-9119d136add4', 'Addis', 'Getachew', 0, 0, 22, 1, 'DWR', 'Addis.Getachew@DWR-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('29d998ae-a9f9-4f31-8f36-6ee1e2d2aa65', 'Alexander', 'Michael', 0, 0, 22, 1, 'DWR', 'Alexander.Michael@DWR-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7a6c6f1f-6eef-4a40-9901-d2535a7c16eb', 'Arsema', 'Abiy', 0, 0, 22, 1, 'DWR', 'Arsema.Abiy@DWR-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c467352e-92cb-4d94-8625-f29f19ed498e', 'Christine', 'Uwase', 0, 0, 22, 1, 'DWR', 'Christine.Uwase@DWR-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b8578164-82c8-4c20-a25b-a0c2d67a2cbd', 'Hana', 'Zewde', 0, 0, 22, 1, 'DWR', 'Hana.Zewde@DWR-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('440ee553-c4ba-4174-942b-0788d6319b33', 'Mahlet', 'Tesfay', 0, 0, 22, 1, 'DWR', 'Mahlet.Tesfay@DWR-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('917474b0-879f-405f-a450-fa5e6a9e2de2', 'Samrawit', 'Goitom', 0, 0, 22, 1, 'DWR', 'Samrawit.Goitom@DWR-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f92e56af-f610-4770-80a3-00a03141308a', 'Samrawit', 'Tesfaye', 0, 0, 22, 1, 'DWR', 'Samrawit.Tesfaye@DWR-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3271b2d3-8314-4a48-bd41-1c44ec6cf7e7', 'Samrawit', 'Yohalashet', 0, 0, 22, 1, 'DWR', 'Samrawit.Yohalashet@DWR-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ec40b8e8-a68c-4fb2-bfe3-0df18027b64b', 'Samrawit', 'Yohalashet', 0, 0, 22, 1, 'DWR', 'Samrawit.Yohalashet@DWR-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('85fb2fe7-5273-405e-a36d-7f674d56f0b0', 'Senait', 'Besepa', 0, 0, 22, 1, 'DWR', 'Senait.Besepa@DWR-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3df7e905-43d6-47ea-a7e5-f220baabd5e5', 'Test', 'User', 0, 0, 22, 1, 'DWR', 'Test.User@DWR-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2199A0E5-6BFA-41A1-BA00-5F49105781CA', 'Tiruwork', 'Mekonnen', 0, 0, 22, 1, 'DWR', 'Tiruwork.Mekonnen@DWR-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('560d3772-78b8-423e-9972-c3ca23e58a19', 'Wintana', 'Gebremedhin', 0, 0, 22, 1, 'DWR', 'Wintana.Gebremedhin@DWR-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ab975c5c-c44e-4416-887b-d36954a21bae', 'Yaphet', 'G/Tsadik', 0, 0, 22, 1, 'DWR', 'Yaphet.G/Tsadik@DWR-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c96d52e9-7ccf-45fa-81dd-c63f0ab0215f', 'Yonatan', 'Getamesay', 0, 0, 22, 1, 'DWR', 'Yonatan.Getamesay@DWR-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9a8dd29e-1ba8-4c69-9b5a-0602ba28c181', 'Yordanos', 'Zewde', 0, 0, 22, 1, 'DWR', 'Yordanos.Zewde@DWR-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b08937d6-1f4c-4586-81a8-a4ba08e8cfa0', 'Abeba', 'Degefu', 0, 0, 23, 1, 'Bakkavor', 'Abeba.Degefu@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5d2d9f4e-8fb2-40f3-b215-45ada67f564f', 'Arsema', 'Abiy', 0, 0, 23, 1, 'Bakkavor', 'Arsema.Abiy@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('231e4d95-7dd6-4b62-b2f8-dcacd497ad82', 'Ashenafi', 'Dejen', 0, 0, 23, 1, 'Bakkavor', 'Ashenafi.Dejen@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('026c25e2-58ea-485c-bf59-414ead12329b', 'Ashenafi', 'Dejen', 0, 0, 23, 1, 'Bakkavor', 'Ashenafi.Dejen@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('48e9efa0-ae4e-4d3f-a0e7-3186a2210ea1', 'Atnatiwos', 'Solomon', 0, 0, 23, 1, 'Bakkavor', 'Atnatiwos.Solomon@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('abdfbe86-0170-4e2e-8bf7-2283db11ab89', 'Atnatiwos', 'Solomon', 0, 0, 23, 1, 'Bakkavor', 'Atnatiwos.Solomon@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a55cfdd6-26ac-4519-a51e-6a4419f45cab', 'Beakal', 'Deribe', 0, 0, 23, 1, 'Bakkavor', 'Beakal.Deribe@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2c0dae11-7866-43ac-92a8-c2c352fef8c7', 'Beatriz', 'Rodriguez', 0, 0, 23, 1, 'Bakkavor', 'Beatriz.Rodriguez@Bakkavor-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f00868cc-17e3-4d99-944b-a589dbb6416b', 'Bro', 'Elias', 1, 0, 23, 1, 'Bakkavor', 'Admin@Bakkavor-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f10868cc-17e3-4d99-944b-a589dbb6416b', 'Bro', 'Elias', 1, 0, 23, 1, 'Bakkavor', 'Admin@Bakkavor-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8900bb4f-fa04-48f6-b9fa-350ceeb3b002', 'Chris', 'Cosgrove', 0, 0, 23, 1, 'Bakkavor', 'Chris.Cosgrove@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('dfa1d086-e218-11ea-b8dc-22000ab67d3b', 'Cloudx', 'Test', 0, 0, 23, 1, 'Bakkavor', 'Cloudx.Test@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d7aedaa1-3828-438e-8899-c7ab9da98da9', 'Cloudx', 'Tester', 0, 0, 23, 1, 'Bakkavor', 'Cloudx.Tester@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('dfa1d892-e218-11ea-b8dc-22000ab67d3b', 'Daniel', 'Jote', 0, 0, 23, 1, 'Bakkavor', 'Daniel.Jote@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('dfa2054f-e218-11ea-b8dc-22000ab67d3b', 'Daniel', 'Jote', 0, 0, 23, 1, 'Bakkavor', 'Daniel.Jote@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bad428b7-e47a-477b-b301-8cb20f992250', 'Feven', 'Berhe', 0, 0, 23, 1, 'Bakkavor', 'Feven.Berhe@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4bb41d16-9f75-46ab-bf12-f128de822a11', 'Hana', 'Zewde', 0, 0, 23, 1, 'Bakkavor', 'Hana.Zewde@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f78838a9-0bac-4e6b-bf91-095cfd2087eb', 'Henok', 'Teshager', 0, 0, 23, 1, 'Bakkavor', 'Henok.Teshager@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ce26d6c4-ffcd-4fd2-9ad1-c2c2612b6c8a', 'Mikias', 'Leweyehu', 0, 0, 23, 1, 'Bakkavor', 'Mikias.Leweyehu@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('dfa20932-e218-11ea-b8dc-22000ab67d3b', 'Natanoy', 'Getamesay', 0, 0, 23, 1, 'Bakkavor', 'Natanoy.Getamesay@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c27b99ac-dfd5-4374-8501-9182a8ddf78a', 'Samrawit', 'Goitom', 0, 0, 23, 1, 'Bakkavor', 'Samrawit.Goitom@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('792ee338-e972-4cbd-a97e-02668a4b8be3', 'Samrawit', 'Tesfaye', 0, 0, 23, 1, 'Bakkavor', 'Samrawit.Tesfaye@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f4374b28-8905-43a6-9d88-5cc6be09efc2', 'Tamara', 'Ruel', 0, 0, 23, 1, 'Bakkavor', 'Tamara.Ruel@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('dfa20749-e218-11ea-b8dc-22000ab67d3b', 'Teblii', 'Teblii', 0, 0, 23, 1, 'Bakkavor', 'Teblii.Teblii@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('dfa165f5-e218-11ea-b8dc-22000ab67d3b', 'Teststaging', 'Staging', 0, 0, 23, 1, 'Bakkavor', 'Teststaging.Staging@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e940e159-4aa5-472a-b2c2-d94824ade136', 'Tiblets', 'Zewde', 0, 0, 23, 1, 'Bakkavor', 'Tiblets.Zewde@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('dfa1dc22-e218-11ea-b8dc-22000ab67d3b', 'Twochefs', 'Staging', 0, 0, 23, 1, 'Bakkavor', 'Twochefs.Staging@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b285d5e2-ad45-405e-ad0a-c9ac3941cade', 'Wintana', 'Gebremedhin', 0, 0, 23, 1, 'Bakkavor', 'Wintana.Gebremedhin@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('618fc84a-d414-4eee-bb73-1061a66bd448', 'Yonatan', 'Getamesay', 0, 0, 23, 1, 'Bakkavor', 'Yonatan.Getamesay@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f703f746-34f6-401e-9886-0d3c5335ad71', 'Yonatan', 'Getamesay', 0, 0, 23, 1, 'Bakkavor', 'Yonatan.Getamesay@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('34390029-14b5-47a7-9d92-91132fc5cb7c', 'Yonathan', 'Tedla', 1, 0, 23, 1, 'Bakkavor', 'Admin@Bakkavor-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3354d5de-7cff-40c1-9a8d-4b8876ba0b33', 'Yordanos', 'Zewde', 0, 0, 23, 1, 'Bakkavor', 'Yordanos.Zewde@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ab1d017c-3c35-46a6-9f8c-b54fae9f9446', 'Yordanos', 'Zewde', 0, 0, 23, 1, 'Bakkavor', 'Yordanos.Zewde@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f795697e-418f-4a89-9282-649c9218f77d', 'Yordanos', 'Zewde', 0, 0, 23, 1, 'Bakkavor', 'Yordanos.Zewde@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('10ec99ac-e753-4c98-b0b7-caa9dd5f6c1f', 'Abeba', 'Degefu', 0, 0, 26, 1, 'SteelTech', 'Abeba.Degefu@SteelTech-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('95698c5a-38cc-46f9-8477-b7ffc4539a47', 'Abraham', 'Teklay', 0, 0, 26, 1, 'SteelTech', 'Abraham.Teklay@SteelTech-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a58088ea-7060-11ec-b1f1-0a3b5527d91d', 'Admin', 'Steeltech', 1, 0, 26, 1, 'SteelTech', 'Admin@SteelTech-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('13c332a1-8e8e-444d-93d6-215eddbe46e5', 'Aklilu', 'Aklilu', 0, 0, 26, 1, 'SteelTech', 'Aklilu.Aklilu@SteelTech-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d12359ed-6cd4-4040-b563-4f365ac53db2', 'Beakal', 'Deriba', 0, 0, 26, 1, 'SteelTech', 'Beakal.Deriba@SteelTech-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('18e835ff-b551-4ab5-ba34-12823ff7ae96', 'Emebet', 'Tafese', 0, 0, 26, 1, 'SteelTech', 'Emebet.Tafese@SteelTech-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a374f01f-3cf0-4460-99f5-51998793b9bb', 'Hana', 'Zewde', 0, 0, 26, 1, 'SteelTech', 'Hana.Zewde@SteelTech-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('40ba85f6-592d-427f-820c-10a0f87b7d9b', 'Kaleab', 'Weldegebral', 0, 0, 26, 1, 'SteelTech', 'Kaleab.Weldegebral@SteelTech-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('998bc290-f580-488a-b76e-a95eeba8fa88', 'Mikias', 'Teferea', 0, 0, 26, 1, 'SteelTech', 'Mikias.Teferea@SteelTech-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ee4b37bf-2c6f-4488-bbb5-078f1765ddcb', 'Nathi', 'Nathi', 0, 0, 26, 1, 'SteelTech', 'Nathi.Nathi@SteelTech-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8d6fdcaf-ede1-46b1-9b39-2d2d4c273178', 'Samrawit', 'Goitom', 0, 0, 26, 1, 'SteelTech', 'Samrawit.Goitom@SteelTech-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bb2ca86d-6713-42d3-b0f0-40d475fd728b', 'Samrawit', 'Tesfaye', 0, 0, 26, 1, 'SteelTech', 'Samrawit.Tesfaye@SteelTech-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e4a74aa9-7850-4768-9aa4-8e79b1b9effc', 'Samrawit', 'Tesfaye', 0, 0, 26, 1, 'SteelTech', 'Samrawit.Tesfaye@SteelTech-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('39cd19bb-4e44-4122-b277-93477c4fa597', 'Selam', 'Eshete', 0, 0, 26, 1, 'SteelTech', 'Selam.Eshete@SteelTech-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a88d485a-3ed8-413b-ab3b-78ef8156cf65', 'Wintana', 'Gebremedhin', 0, 0, 26, 1, 'SteelTech', 'Wintana.Gebremedhin@SteelTech-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b2f06382-65b2-46d7-931c-647939b760a4', 'Yafet', 'Abdo', 0, 0, 26, 1, 'SteelTech', 'Yafet.Abdo@SteelTech-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f39957dc-6fcb-4d76-909c-c678890ac997', 'Yafet', 'Abdo', 0, 0, 26, 1, 'SteelTech', 'Yafet.Abdo@SteelTech-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('76667aaf-f4dc-41c1-a4ca-93665cf85dcf', 'Yaphet', 'G/Tsadik', 0, 0, 26, 1, 'SteelTech', 'Yaphet.G/Tsadik@SteelTech-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fae3d839-be9e-4b6b-8973-c152f3735c3b', 'Yaphet', 'G/Tsadik', 0, 0, 26, 1, 'SteelTech', 'Yaphet.G/Tsadik@SteelTech-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('32cffc11-6fde-4e95-b358-2619e27991e7', 'Yonathan', 'Tedla', 0, 0, 26, 1, 'SteelTech', 'Yonathan.Tedla@SteelTech-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('abf3426e-5d28-4ee5-8f30-8b6c7afb7542', 'Yonathan', 'Tedla', 0, 0, 26, 1, 'SteelTech', 'Yonathan.Tedla@SteelTech-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('44bd6a36-2212-488e-8801-5dc9211894f8', 'Yordanos', 'Zewde', 0, 0, 26, 1, 'SteelTech', 'Yordanos.Zewde@SteelTech-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d9c5db9e-b7a0-4b66-b5ca-a7f3d4eca797', 'Cloudxqc', 'Cloudxqc', 0, 0, 27, 1, 'Nestle', 'Cloudxqc.Cloudxqc@Nestle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ecc56184-8f09-4570-921d-ba7f43ddce3c', 'Tamara', 'Ruel', 0, 0, 27, 1, 'Nestle', 'Tamara.Ruel@Nestle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('63337076-f2ba-4487-86f6-25129afb9b98', 'Ashenafi', 'Dejen', 0, 0, 28, 1, 'AVGroup', 'Ashenafi.Dejen@AVGroup-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d98b2ea7-3a71-4e00-939e-d45a3fb312cf', 'Beakal', 'Deribe', 0, 0, 28, 1, 'AVGroup', 'Beakal.Deribe@AVGroup-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f11e96fd-ef94-4f75-b57b-852f72e29897', 'Cloudx', 'Support', 0, 0, 28, 1, 'AVGroup', 'Cloudx.Support@AVGroup-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('04e3d036-47ec-43cb-9118-b851080a5582', 'Kidist', 'Kibatu', 0, 0, 28, 1, 'AVGroup', 'Kidist.Kibatu@AVGroup-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('caa7fff2-e594-4d9d-a55a-d4682eac12dc', 'Solomon', 'Tesfaye', 0, 0, 28, 1, 'AVGroup', 'Solomon.Tesfaye@AVGroup-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f4d05a36-4869-4368-b51a-f6ce02021f81', 'Yonatan', 'Getamesay', 0, 0, 28, 1, 'AVGroup', 'Yonatan.Getamesay@AVGroup-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fed47688-9958-4afa-abc9-1c105d7d2bc9', 'Yonatan', 'Getamesay', 0, 0, 28, 1, 'AVGroup', 'Yonatan.Getamesay@AVGroup-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08b4f471-99d1-4c1f-9906-e88dfce87583', 'Yonathan', 'Tedla', 1, 0, 28, 1, 'AVGroup', 'Admin@AVGroup-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('37fbccbb-3465-4200-b4ba-c03cf17de3b2', 'Abraham', 'Teklay', 0, 0, 34, 1, 'Rosewood', 'Abraham.Teklay@Rosewood-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d1f6a55e-e65d-4d5d-be38-d2d7a7f0feda', 'Arsema', 'Abiy', 0, 0, 34, 1, 'Rosewood', 'Arsema.Abiy@Rosewood-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b88caece-2f8d-473d-89cc-4b6ae8291e3f', 'Kidist', 'Kibatu', 0, 0, 34, 1, 'Rosewood', 'Kidist.Kibatu@Rosewood-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7d060519-38ab-4b24-9cd1-9b24fca6d6c8', 'Samrawit', 'Goitom', 0, 0, 34, 1, 'Rosewood', 'Samrawit.Goitom@Rosewood-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1664922f-0774-4081-9c52-fb390eb1c117', 'Samrawit', 'Tesfaye', 0, 0, 34, 1, 'Rosewood', 'Samrawit.Tesfaye@Rosewood-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51810923-230e-4c28-b26c-a03ddf85932a', 'Samrawit', 'Yohalashet', 0, 0, 34, 1, 'Rosewood', 'Samrawit.Yohalashet@Rosewood-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2852798c-d7f1-4055-bd18-0d07ea984597', 'Test', 'User', 0, 0, 34, 1, 'Rosewood', 'Test.User@Rosewood-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c0115d8f-7975-4bee-ab88-9e2b80795404', 'Wintana', 'Gebremedhin', 0, 0, 34, 1, 'Rosewood', 'Wintana.Gebremedhin@Rosewood-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('90f1ad75-61fa-4760-9082-32ad91620269', 'Yafet', 'Abdo', 0, 0, 34, 1, 'Rosewood', 'Yafet.Abdo@Rosewood-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c3425d8a-4113-46d5-b107-f900bc9a583d', 'Yonathan', 'Tedla', 0, 0, 34, 1, 'Rosewood', 'Yonathan.Tedla@Rosewood-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6e125a1c-f334-4b5b-b903-6c5e055eb6bd', 'Yordanos', 'Zewde', 0, 0, 34, 1, 'Rosewood', 'Yordanos.Zewde@Rosewood-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('703e6ea7-f92e-40a2-83b4-f5255d07aad8', 'Abeba', 'Degefu', 0, 0, 35, 1, 'H&HAuto', 'Abeba.Degefu@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1898cbdb-1484-4c72-bc6d-741f582f182a', 'Abraham', 'Teklay', 0, 0, 35, 1, 'H&HAuto', 'Abraham.Teklay@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('20ffdfa3-14dc-4059-93e0-867767ec44c8', 'Admin', 'H&Hauto', 1, 0, 35, 1, 'H&HAuto', 'Admin@H&HAuto-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1ca75e06-d578-49bf-b8bc-52491c266370', 'Aklilu', 'Tesfaye', 0, 0, 35, 1, 'H&HAuto', 'Aklilu.Tesfaye@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2ae1af8e-ef61-43fd-9a3d-97902a37e70b', 'Alexander', 'Michael', 0, 0, 35, 1, 'H&HAuto', 'Alexander.Michael@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fcf83774-95f1-431a-90ae-5914ed01228f', 'Arsema', 'Abiy', 0, 0, 35, 1, 'H&HAuto', 'Arsema.Abiy@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a9118191-4a5c-4ebd-b29b-d6574e4ed8b1', 'Ashenafi', 'Dejen', 0, 0, 35, 1, 'H&HAuto', 'Ashenafi.Dejen@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8054cf57-6799-401a-82ae-0d9f63a27460', 'Biruk', 'Kenaw', 0, 0, 35, 1, 'H&HAuto', 'Biruk.Kenaw@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('715cf310-a3a8-4f3f-ba09-9707bec4858a', 'Chritsine', 'Uwase', 0, 0, 35, 1, 'H&HAuto', 'Chritsine.Uwase@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e201d991-e40a-49b0-b581-99dba546fa5b', 'Feven', 'Berhe', 0, 0, 35, 1, 'H&HAuto', 'Feven.Berhe@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('884c91be-bc1f-4e43-800b-d52c355e3d5c', 'Hana', 'Zewde', 0, 0, 35, 1, 'H&HAuto', 'Hana.Zewde@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('be036ce1-5ec9-4978-a611-f9664da62256', 'Kaleab', 'Weldegebrial', 0, 0, 35, 1, 'H&HAuto', 'Kaleab.Weldegebrial@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a808617c-4ef3-4a41-93ce-3500bdd16e80', 'Mahlet', 'Tesfay', 0, 0, 35, 1, 'H&HAuto', 'Mahlet.Tesfay@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fd5902e5-cac0-4466-a8b6-ba377bcdfe78', 'Samrawit', 'Goitom', 0, 0, 35, 1, 'H&HAuto', 'Samrawit.Goitom@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7755a7ba-59d0-45af-bbc1-5bf9f769bb1d', 'Samrawit', 'Tesfaye', 0, 0, 35, 1, 'H&HAuto', 'Samrawit.Tesfaye@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bb003cab-0676-483e-bca1-3be6adc97f31', 'Samrawit', 'Tesfaye', 0, 0, 35, 1, 'H&HAuto', 'Samrawit.Tesfaye@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c2ad11f3-550b-4f57-85b0-badbce7bd35e', 'Samrawit', 'Yohalashet', 0, 0, 35, 1, 'H&HAuto', 'Samrawit.Yohalashet@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ad617d98-f1a2-4545-988b-dc3e18e1aa41', 'Seble', 'Sisay', 0, 0, 35, 1, 'H&HAuto', 'Seble.Sisay@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a91d5176-d18a-44ef-a30b-210b1b01de69', 'Selam', 'Selam', 0, 0, 35, 1, 'H&HAuto', 'Selam.Selam@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f55dcb33-9d81-43b7-a747-af430420416b', 'Senait', 'Besepa', 0, 0, 35, 1, 'H&HAuto', 'Senait.Besepa@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1207ce94-b235-4fd3-bdab-c4ba4b5e665d', 'Wintana', 'Gebremedhin', 0, 0, 35, 1, 'H&HAuto', 'Wintana.Gebremedhin@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9c788e5b-8e0a-4fc0-9fe9-5c1d14aac52b', 'Yafet', 'Abdo', 0, 0, 35, 1, 'H&HAuto', 'Yafet.Abdo@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('943cf8b7-1986-4e59-8df1-29e9a9fda977', 'Yonatan', 'Getamesay', 0, 0, 35, 1, 'H&HAuto', 'Yonatan.Getamesay@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('aa45b837-4d71-44e0-bfdb-b42d73355b9f', 'Yonatan', 'Getamesay', 0, 0, 35, 1, 'H&HAuto', 'Yonatan.Getamesay@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('27b12abf-7453-4cd3-af52-7f0fc4c9bb1e', 'Yonathan', 'Tedla', 0, 0, 35, 1, 'H&HAuto', 'Yonathan.Tedla@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('57ef2bfe-72e2-4031-8a78-ba719b3579bd', 'Yordanos', 'Zewde', 0, 0, 35, 1, 'H&HAuto', 'Yordanos.Zewde@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b66bcb9-c0e3-11ec-a1cc-0a6af28071bd', 'Abeba', 'Degefu', 0, 0, 43, 1, 'H&Hauto-Staging', 'Abeba.Degefu@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b5e5506-c0e3-11ec-a1cc-0a6af28071bd', 'Abraham', 'Teklay', 0, 0, 43, 1, 'H&Hauto-Staging', 'Abraham.Teklay@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b5e57f6-c0e3-11ec-a1cc-0a6af28071bd', 'Admin', 'H&Hauto-Staging', 0, 0, 43, 1, 'H&Hauto-Staging', 'Admin.H&Hauto-Staging@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b5e626d-c0e3-11ec-a1cc-0a6af28071bd', 'Admin', 'H&Hauto-Staging', 1, 0, 43, 1, 'H&Hauto-Staging', 'Admin@H&Hauto-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b61dd65-c0e3-11ec-a1cc-0a6af28071bd', 'Aklilu', 'Aklil', 0, 0, 43, 1, 'H&Hauto-Staging', 'Aklilu.Aklil@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b5e5b91-c0e3-11ec-a1cc-0a6af28071bd', 'Aklilu', 'Tesfaye', 0, 0, 43, 1, 'H&Hauto-Staging', 'Aklilu.Tesfaye@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b62095c-c0e3-11ec-a1cc-0a6af28071bd', 'Alem', 'Gidey', 0, 0, 43, 1, 'H&Hauto-Staging', 'Alem.Gidey@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b5e8570-c0e3-11ec-a1cc-0a6af28071bd', 'Anathole', 'Niyongana', 0, 0, 43, 1, 'H&Hauto-Staging', 'Anathole.Niyongana@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b6015d8-c0e3-11ec-a1cc-0a6af28071bd', 'Arsema', 'Abiy', 0, 0, 43, 1, 'H&Hauto-Staging', 'Arsema.Abiy@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b66bf55-c0e3-11ec-a1cc-0a6af28071bd', 'Arsema', 'Abiy', 0, 0, 43, 1, 'H&Hauto-Staging', 'Arsema.Abiy@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b61dfda-c0e3-11ec-a1cc-0a6af28071bd', 'Ashenafi', 'Dejen', 0, 0, 43, 1, 'H&Hauto-Staging', 'Ashenafi.Dejen@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b5e8e42-c0e3-11ec-a1cc-0a6af28071bd', 'Atnatiwos', 'Solomon', 0, 0, 43, 1, 'H&Hauto-Staging', 'Atnatiwos.Solomon@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b5e89f1-c0e3-11ec-a1cc-0a6af28071bd', 'Beakal', 'Deriba', 0, 0, 43, 1, 'H&Hauto-Staging', 'Beakal.Deriba@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b6044e3-c0e3-11ec-a1cc-0a6af28071bd', 'Bereket', 'G/Hiwot', 0, 0, 43, 1, 'H&Hauto-Staging', 'Bereket.G/Hiwot@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b5eb408-c0e3-11ec-a1cc-0a6af28071bd', 'Biruk', 'Kenaw', 0, 0, 43, 1, 'H&Hauto-Staging', 'Biruk.Kenaw@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b607187-c0e3-11ec-a1cc-0a6af28071bd', 'Biruk', 'Kenaw', 0, 0, 43, 1, 'H&Hauto-Staging', 'Biruk.Kenaw@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b601485-c0e3-11ec-a1cc-0a6af28071bd', 'Brian', 'Gatete', 0, 0, 43, 1, 'H&Hauto-Staging', 'Brian.Gatete@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b61eed6-c0e3-11ec-a1cc-0a6af28071bd', 'Bro', 'Elias', 0, 0, 43, 1, 'H&Hauto-Staging', 'Bro.Elias@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b5e3b32-c0e3-11ec-a1cc-0a6af28071bd', 'Chris', 'Handh', 0, 0, 43, 1, 'H&Hauto-Staging', 'Chris.Handh@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b60206c-c0e3-11ec-a1cc-0a6af28071bd', 'Chritsine', 'Chris', 0, 0, 43, 1, 'H&Hauto-Staging', 'Chritsine.Chris@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b6050fd-c0e3-11ec-a1cc-0a6af28071bd', 'Chritsine', 'Uwase', 0, 0, 43, 1, 'H&Hauto-Staging', 'Chritsine.Uwase@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b6019f6-c0e3-11ec-a1cc-0a6af28071bd', 'Elshaday', 'Adamu', 0, 0, 43, 1, 'H&Hauto-Staging', 'Elshaday.Adamu@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b5ebe23-c0e3-11ec-a1cc-0a6af28071bd', 'Es', 'Handhauto', 0, 0, 43, 1, 'H&Hauto-Staging', 'Es.Handhauto@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b5e32a7-c0e3-11ec-a1cc-0a6af28071bd', 'Eyerusalem', 'Birhane', 0, 0, 43, 1, 'H&Hauto-Staging', 'Eyerusalem.Birhane@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b61cf64-c0e3-11ec-a1cc-0a6af28071bd', 'Feven', 'Berehe', 0, 0, 43, 1, 'H&Hauto-Staging', 'Feven.Berehe@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b63c4f9-c0e3-11ec-a1cc-0a6af28071bd', 'Feven', 'Berhe', 0, 0, 43, 1, 'H&Hauto-Staging', 'Feven.Berhe@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b63af64-c0e3-11ec-a1cc-0a6af28071bd', 'Gideon', 'Bereket', 0, 0, 43, 1, 'H&Hauto-Staging', 'Gideon.Bereket@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b60815c-c0e3-11ec-a1cc-0a6af28071bd', 'Hana', 'Zewde', 0, 0, 43, 1, 'H&Hauto-Staging', 'Hana.Zewde@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b603ac6-c0e3-11ec-a1cc-0a6af28071bd', 'Handh', 'Supervisor', 0, 0, 43, 1, 'H&Hauto-Staging', 'Handh.Supervisor@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b5ea0b5-c0e3-11ec-a1cc-0a6af28071bd', 'Jote', 'Daniel', 0, 0, 43, 1, 'H&Hauto-Staging', 'Jote.Daniel@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b60313f-c0e3-11ec-a1cc-0a6af28071bd', 'Juan', 'Jose', 1, 0, 43, 1, 'H&Hauto-Staging', 'Admin@H&Hauto-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b5e6d55-c0e3-11ec-a1cc-0a6af28071bd', 'Kalaeb', 'Weldegebrial', 0, 0, 43, 1, 'H&Hauto-Staging', 'Kalaeb.Weldegebrial@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b607dad-c0e3-11ec-a1cc-0a6af28071bd', 'Kaleab', 'Tariku', 0, 0, 43, 1, 'H&Hauto-Staging', 'Kaleab.Tariku@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b621795-c0e3-11ec-a1cc-0a6af28071bd', 'Kaleab', 'Weldegebrial', 0, 0, 43, 1, 'H&Hauto-Staging', 'Kaleab.Weldegebrial@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b63bc02-c0e3-11ec-a1cc-0a6af28071bd', 'Kenean', 'Esubalew', 0, 0, 43, 1, 'H&Hauto-Staging', 'Kenean.Esubalew@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b61ea8d-c0e3-11ec-a1cc-0a6af28071bd', 'Kidist', 'Kibatu', 0, 0, 43, 1, 'H&Hauto-Staging', 'Kidist.Kibatu@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b607c23-c0e3-11ec-a1cc-0a6af28071bd', 'Mahlet', 'Bekele', 0, 0, 43, 1, 'H&Hauto-Staging', 'Mahlet.Bekele@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b61d51a-c0e3-11ec-a1cc-0a6af28071bd', 'Mahlet', 'Tesfay', 0, 0, 43, 1, 'H&Hauto-Staging', 'Mahlet.Tesfay@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b5e4c25-c0e3-11ec-a1cc-0a6af28071bd', 'Melat', 'Mitiku', 0, 0, 43, 1, 'H&Hauto-Staging', 'Melat.Mitiku@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b6096f6-c0e3-11ec-a1cc-0a6af28071bd', 'Mikias', 'Leweyehu', 0, 0, 43, 1, 'H&Hauto-Staging', 'Mikias.Leweyehu@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b601156-c0e3-11ec-a1cc-0a6af28071bd', 'Mikiyas', 'Tefera', 0, 0, 43, 1, 'H&Hauto-Staging', 'Mikiyas.Tefera@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b63b68a-c0e3-11ec-a1cc-0a6af28071bd', 'Misker', 'Tsegaye', 0, 0, 43, 1, 'H&Hauto-Staging', 'Misker.Tsegaye@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b63b0a2-c0e3-11ec-a1cc-0a6af28071bd', 'Nati', 'Alex', 0, 0, 43, 1, 'H&Hauto-Staging', 'Nati.Alex@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b601293-c0e3-11ec-a1cc-0a6af28071bd', 'Nshimiyimana', 'Jean', 0, 0, 43, 1, 'H&Hauto-Staging', 'Nshimiyimana.Jean@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b66c174-c0e3-11ec-a1cc-0a6af28071bd', 'Samrawit', 'Goitom', 0, 0, 43, 1, 'H&Hauto-Staging', 'Samrawit.Goitom@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b6212ae-c0e3-11ec-a1cc-0a6af28071bd', 'Samrawit', 'Tesfaye', 0, 0, 43, 1, 'H&Hauto-Staging', 'Samrawit.Tesfaye@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b63ad8a-c0e3-11ec-a1cc-0a6af28071bd', 'Samrawit', 'Yohalashet', 0, 0, 43, 1, 'H&Hauto-Staging', 'Samrawit.Yohalashet@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b607939-c0e3-11ec-a1cc-0a6af28071bd', 'Seble', 'Sisay', 0, 0, 43, 1, 'H&Hauto-Staging', 'Seble.Sisay@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b61e70f-c0e3-11ec-a1cc-0a6af28071bd', 'Seble', 'Sisay', 0, 0, 43, 1, 'H&Hauto-Staging', 'Seble.Sisay@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b5eaf44-c0e3-11ec-a1cc-0a6af28071bd', 'Selam', 'Eshete', 0, 0, 43, 1, 'H&Hauto-Staging', 'Selam.Eshete@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b63d921-c0e3-11ec-a1cc-0a6af28071bd', 'Senait', 'Besepa', 0, 0, 43, 1, 'H&Hauto-Staging', 'Senait.Besepa@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b63dfee-c0e3-11ec-a1cc-0a6af28071bd', 'Solomon', 'Tesfaye', 0, 0, 43, 1, 'H&Hauto-Staging', 'Solomon.Tesfaye@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b63b493-c0e3-11ec-a1cc-0a6af28071bd', 'Tesfahun', 'Tsehaye', 0, 0, 43, 1, 'H&Hauto-Staging', 'Tesfahun.Tsehaye@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b5e744f-c0e3-11ec-a1cc-0a6af28071bd', 'Tiblets', 'Zewde', 0, 0, 43, 1, 'H&Hauto-Staging', 'Tiblets.Zewde@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b609571-c0e3-11ec-a1cc-0a6af28071bd', 'Tsedenya', 'Yohannes', 0, 0, 43, 1, 'H&Hauto-Staging', 'Tsedenya.Yohannes@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b5e41d9-c0e3-11ec-a1cc-0a6af28071bd', 'Wintana', 'Gebremedhin', 0, 0, 43, 1, 'H&Hauto-Staging', 'Wintana.Gebremedhin@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b63be32-c0e3-11ec-a1cc-0a6af28071bd', 'Wubit', 'Yitbarek', 0, 0, 43, 1, 'H&Hauto-Staging', 'Wubit.Yitbarek@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b607f84-c0e3-11ec-a1cc-0a6af28071bd', 'Yafet', 'Abdo', 0, 0, 43, 1, 'H&Hauto-Staging', 'Yafet.Abdo@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b609ff5-c0e3-11ec-a1cc-0a6af28071bd', 'Yafet', 'Abdo', 0, 0, 43, 1, 'H&Hauto-Staging', 'Yafet.Abdo@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b606a53-c0e3-11ec-a1cc-0a6af28071bd', 'Yaphet', 'G\Tsadik', 0, 0, 43, 1, 'H&Hauto-Staging', 'Yaphet.G\Tsadik@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b608b0c-c0e3-11ec-a1cc-0a6af28071bd', 'Yonatan', 'Getamesay', 0, 0, 43, 1, 'H&Hauto-Staging', 'Yonatan.Getamesay@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b61e335-c0e3-11ec-a1cc-0a6af28071bd', 'Yonatan', 'Getamesay', 0, 0, 43, 1, 'H&Hauto-Staging', 'Yonatan.Getamesay@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b5e70cc-c0e3-11ec-a1cc-0a6af28071bd', 'Yonathan', 'Tedla', 0, 0, 43, 1, 'H&Hauto-Staging', 'Yonathan.Tedla@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b602865-c0e3-11ec-a1cc-0a6af28071bd', 'Yordanos', 'Zewde', 0, 0, 43, 1, 'H&Hauto-Staging', 'Yordanos.Zewde@H&Hauto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9fd7d112-d5ec-41ed-93d7-48753b1c8fcd', 'Admin', '24M', 1, 0, 50, 1, '24M', 'Admin@24M-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d5a05c35-e805-45e7-9de6-16278a9d85a9', 'Abraham', 'Teklay', 0, 0, 50, 1, '24M', 'Abraham.Teklay@24M-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f9c6a3a8-3aa2-4b5d-95f5-1361090a009d', 'Arsema', 'Abiy', 0, 0, 50, 1, '24M', 'Arsema.Abiy@24M-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2d9d1546-b786-40b6-a99d-9e419ac38a75', 'Biruk', 'Kenaw', 0, 0, 50, 1, '24M', 'Biruk.Kenaw@24M-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('87a90054-a6bb-4db1-9d5a-cffc415e4339', 'Mikiyas', 'Tefera', 0, 0, 50, 1, '24M', 'Mikiyas.Tefera@24M-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3ba2ad8b-b986-4bee-ac3c-61649bfb17a4', 'Samrawit', 'Goitom', 0, 0, 50, 1, '24M', 'Samrawit.Goitom@24M-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1fd3ff60-3d45-47be-8ef9-a84cf6cf1a27', 'Samrawit', 'Tesfaye', 0, 0, 50, 1, '24M', 'Samrawit.Tesfaye@24M-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5fa003ad-751e-44ef-a823-ffb5a8666948', 'Samrawit', 'Yohalashet', 0, 0, 50, 1, '24M', 'Samrawit.Yohalashet@24M-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8a452761-a711-443a-ba5e-029a2667b83d', 'Selam', 'Eshete', 0, 0, 50, 1, '24M', 'Selam.Eshete@24M-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bd4e21a8-4e3b-401f-887b-8f62749da9ad', 'Selam', 'Eshete', 0, 0, 50, 1, '24M', 'Selam.Eshete@24M-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8f161a8c-8c25-4b4a-97a7-bc8ed130d88b', 'Testsearchuser', 'Testsearchuser', 0, 0, 50, 1, '24M', 'Testsearchuser.Testsearchuser@24M-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ae62bf23-321a-4926-93be-3df08e74c954', 'Wibit', 'Yitbarek', 0, 0, 50, 1, '24M', 'Wibit.Yitbarek@24M-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('91c94dcf-3bbf-46e3-8f64-c469afe4cc25', 'Yonatan', 'Getamesay', 0, 0, 50, 1, '24M', 'Yonatan.Getamesay@24M-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('99e5c0b7-555c-47a7-99a6-21c389d44048', 'Yonathan', 'Tedla', 0, 0, 50, 1, '24M', 'Yonathan.Tedla@24M-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('76dc9fee-d7c4-4cbd-8603-0d1328c4c6c6', 'Abraham', 'Teklay', 0, 0, 58, 1, 'Acacia', 'Abraham.Teklay@Acacia-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51301701-8df2-4847-95fb-494644021870', 'Test', 'User', 0, 0, 58, 1, 'Acacia', 'Test.User@Acacia-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8929109d-9637-4846-9eb3-fc78a055dc4f', 'Yaphet', 'G/Stadik', 0, 0, 58, 1, 'Acacia', 'Yaphet.G/Stadik@Acacia-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('17cdcf6c-37d5-404c-8c18-034ba6049cc2', 'Abraham', 'Teklay', 0, 0, 61, 1, 'NelsonAuto', 'Abraham.Teklay@NelsonAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('126a812e-2ddf-4b55-88a6-3f698377cc9a', 'Ashenafi', 'Dejen', 0, 0, 61, 1, 'NelsonAuto', 'Ashenafi.Dejen@NelsonAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2042b7f8-0503-4181-a89a-62ce072049da', 'Chritsine', 'Uwase', 0, 0, 61, 1, 'NelsonAuto', 'Chritsine.Uwase@NelsonAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d092d3c5-11aa-4e2f-9f80-665d0ce6378a', 'Mikias', 'Leweyehu', 0, 0, 61, 1, 'NelsonAuto', 'Mikias.Leweyehu@NelsonAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('334e0e09-d2b8-48d3-b04d-6a5920336559', 'Samrawit', 'Goitom', 0, 0, 61, 1, 'NelsonAuto', 'Samrawit.Goitom@NelsonAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('be4457db-54f4-4825-9e5b-453a27e34d0d', 'Samrawit', 'Tesfaye', 0, 0, 61, 1, 'NelsonAuto', 'Samrawit.Tesfaye@NelsonAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ea7691e8-3ec5-4af8-b6d7-3d20d3624634', 'Samrawit', 'Yohalashet', 0, 0, 61, 1, 'NelsonAuto', 'Samrawit.Yohalashet@NelsonAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f4d5b0ea-ff03-48e2-82fb-5b4cb3bb3a70', 'Selam', 'Eshete', 0, 0, 61, 1, 'NelsonAuto', 'Selam.Eshete@NelsonAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bc667f98-bf6c-4a5a-a216-9b0bdc50eba1', 'Yordanos', 'Zewde', 0, 0, 61, 1, 'NelsonAuto', 'Yordanos.Zewde@NelsonAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e3ae4139-e4a2-4860-ade1-ed963b540f51', 'Abeba', 'Degefu', 0, 0, 63, 1, 'HardyDiagnostics', 'Abeba.Degefu@HardyDiagnostics-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7fa321f3-3e58-4228-b6aa-0ac3777dd14c', 'Arsema', 'Abiy', 0, 0, 63, 1, 'HardyDiagnostics', 'Arsema.Abiy@HardyDiagnostics-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3959fae1-602a-4922-a836-4dd9de22fd0f', 'Biruk', 'Kenaw', 0, 0, 63, 1, 'HardyDiagnostics', 'Biruk.Kenaw@HardyDiagnostics-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b4d0d981-3e9b-404f-b990-0a02cbc71952', 'Bro', 'Elias', 0, 0, 63, 1, 'HardyDiagnostics', 'Bro.Elias@HardyDiagnostics-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e71e93c2-6497-4857-b672-291a25065c93', 'Feven', 'Berhe', 0, 0, 63, 1, 'HardyDiagnostics', 'Feven.Berhe@HardyDiagnostics-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9296881d-fccc-4054-af83-58f67a305c5f', 'Mikias', 'Leweyehu', 0, 0, 63, 1, 'HardyDiagnostics', 'Mikias.Leweyehu@HardyDiagnostics-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('598fd132-e72f-498c-b3cf-ed6c1185e5e8', 'Samrawit', 'Goitom', 0, 0, 63, 1, 'HardyDiagnostics', 'Samrawit.Goitom@HardyDiagnostics-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9012f4ff-4aad-44b3-a4d0-a9023d459261', 'Samrawit', 'Tesfaye', 0, 0, 63, 1, 'HardyDiagnostics', 'Samrawit.Tesfaye@HardyDiagnostics-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bda53d79-7a92-478d-9b2b-19f98df54968', 'Samrawit', 'Tesfaye', 0, 0, 63, 1, 'HardyDiagnostics', 'Samrawit.Tesfaye@HardyDiagnostics-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a7307296-7eeb-49cd-a22a-05b724331c6f', 'Test', 'Approver', 0, 0, 63, 1, 'HardyDiagnostics', 'Test.Approver@HardyDiagnostics-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5ffc4b37-4edd-4c9e-ac91-317ba0863cd0', 'Yonathan', 'Tedla', 0, 0, 63, 1, 'HardyDiagnostics', 'Yonathan.Tedla@HardyDiagnostics-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3815d804-9004-4981-9ce9-fe0f9aabda34', 'Yordanos', 'Zewde', 0, 0, 63, 1, 'HardyDiagnostics', 'Yordanos.Zewde@HardyDiagnostics-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b02a2173-7863-4fef-b27c-dea553aeeadc', 'Arsema', 'Abiy', 0, 0, 65, 1, 'SEHAmerica', 'Arsema.Abiy@SEHAmerica-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fbc690cf-280f-4dbd-84d4-6e6d014bae42', 'Ashenafi', 'Dejen', 0, 0, 65, 1, 'SEHAmerica', 'Ashenafi.Dejen@SEHAmerica-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('46e8c47b-108d-4255-b81b-8c8d77774c61', 'Ashenafi', 'Dejen', 0, 0, 65, 1, 'SEHAmerica', 'Ashenafi.Dejen@SEHAmerica-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ffc885bb-8192-4c79-b6b3-94303426d02f', 'Mikias', 'Lewyehu', 0, 0, 65, 1, 'SEHAmerica', 'Mikias.Lewyehu@SEHAmerica-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('482b87df-9775-488e-99fa-ea806b8fe371', 'Admin', 'Cloudx', 1, 0, 65, 1, 'SEHAmerica', 'Admin@SEHAmerica-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c0babfe2-59d9-11eb-b72e-0a4f383cd29b', 'Admin', 'Cloudx', 1, 0, 65, 1, 'SEHAmerica', 'Admin@SEHAmerica-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bf326a29-0a1b-4767-afd6-42991df8d986', 'Selam', 'Eshete', 0, 0, 65, 1, 'SEHAmerica', 'Selam.Eshete@SEHAmerica-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d46f7d41-7340-499d-a6ed-f0463d87f820', 'Selam', 'Eshete', 0, 0, 65, 1, 'SEHAmerica', 'Selam.Eshete@SEHAmerica-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3cfce9a2-7a45-4474-8237-fbedef75f2ca', 'Yonatan', 'Getamesay', 0, 0, 65, 1, 'SEHAmerica', 'Yonatan.Getamesay@SEHAmerica-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4332a7c8-d350-4927-949b-476467779611', 'Yonatan', 'Getamesay', 0, 0, 65, 1, 'SEHAmerica', 'Yonatan.Getamesay@SEHAmerica-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08ba4d3b-7eb6-48f1-a3f2-1d2b2360747b', 'Admin', 'Cloudx', 1, 0, 65, 1, 'SEHAmerica', 'Admin@SEHAmerica-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c0ede784-4b96-4e9c-8560-16129a310ef9', 'Abeba', 'Degefu', 0, 0, 66, 1, 'SteelTechPlex', 'Abeba.Degefu@SteelTechPlex-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2c479497-27c3-4a2e-bddb-1b6cf2d2620b', 'Abraham', 'Teklay', 0, 0, 66, 1, 'SteelTechPlex', 'Abraham.Teklay@SteelTechPlex-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e889ddad-d90d-4942-83aa-78fa963cbf23', 'Admin', 'Steeltechplex', 0, 0, 66, 1, 'SteelTechPlex', 'Admin.Steeltechplex@SteelTechPlex-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7c0aef8a-1246-43ec-8691-05228c383390', 'Hana', 'Zewde', 0, 0, 66, 1, 'SteelTechPlex', 'Hana.Zewde@SteelTechPlex-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ebd51626-d74d-4169-8917-97cb943a9f5a', 'Mikias', 'Lewyehu', 0, 0, 66, 1, 'SteelTechPlex', 'Mikias.Lewyehu@SteelTechPlex-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('720e9dea-298b-4193-b8f6-46e90393469b', 'Samrawit', 'Goitom', 0, 0, 66, 1, 'SteelTechPlex', 'Samrawit.Goitom@SteelTechPlex-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1dbf294c-338c-45d2-88b4-902cf892413a', 'Samrawit', 'Tesfaye', 0, 0, 66, 1, 'SteelTechPlex', 'Samrawit.Tesfaye@SteelTechPlex-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6899644f-de7e-4ebf-9efe-5dc7fa749adc', 'Wintana', 'Gebremedhin', 0, 0, 66, 1, 'SteelTechPlex', 'Wintana.Gebremedhin@SteelTechPlex-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a36c1907-6a28-40f3-90e8-1c70d390f8e5', 'Yonatan', 'Getamesay', 0, 0, 66, 1, 'SteelTechPlex', 'Yonatan.Getamesay@SteelTechPlex-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cb726a7b-5d98-4f6a-b22f-2d62c9c28750', 'Yonatan', 'Getamesay', 0, 0, 66, 1, 'SteelTechPlex', 'Yonatan.Getamesay@SteelTechPlex-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('17b14568-25ab-4351-82d4-67d865330107', 'Yonathan', 'Tedla', 0, 0, 66, 1, 'SteelTechPlex', 'Yonathan.Tedla@SteelTechPlex-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fb586383-849c-47a9-9c92-da04fb0c2b3f', 'Yonathan', 'Tedla', 0, 0, 66, 1, 'SteelTechPlex', 'Yonathan.Tedla@SteelTechPlex-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('55f335da-38b7-417f-a8fa-e749e0b5ad0b', 'Yordanos', 'Zewde', 0, 0, 66, 1, 'SteelTechPlex', 'Yordanos.Zewde@SteelTechPlex-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('17c55e23-f452-4e62-96f0-4880206b5042', 'Admin', 'Avgroup-Staging1', 1, 0, 67, 1, 'AVGroup-Staging1', 'Admin@AVGroup-Staging1-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a0cf816b-ee8d-4d07-9279-a9e78d4027b4', 'Avgsaptest', 'Avg', 0, 0, 67, 1, 'AVGroup-Staging1', 'Avgsaptest.Avg@AVGroup-Staging1-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8e48bf6b-ab6d-4794-ad59-7f9f740eb081', 'Yonathan', 'Tedla', 0, 0, 67, 1, 'AVGroup-Staging1', 'Yonathan.Tedla@AVGroup-Staging1-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('18a969c3-1fea-4d0d-a42d-41918ac42a13', 'Ashenafi', 'Dejen', 0, 0, 68, 1, 'MissionPharmacalCSI', 'Ashenafi.Dejen@MissionPharmacalCSI-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('19a78460-af9e-4220-b7cd-21f79573147f', 'Beakal', 'Deribe', 0, 0, 68, 1, 'MissionPharmacalCSI', 'Beakal.Deribe@MissionPharmacalCSI-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a5ded809-ebe8-4b59-9015-060373d3cfdb', 'Kenan', 'Esubalew', 0, 0, 68, 1, 'MissionPharmacalCSI', 'Kenan.Esubalew@MissionPharmacalCSI-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f5de11cf-f6b0-48e8-a1f9-b6a40a970edc', 'Yonatan', 'Getamesay', 0, 0, 68, 1, 'MissionPharmacalCSI', 'Yonatan.Getamesay@MissionPharmacalCSI-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f3cb811d-c40c-42cd-80ac-4d729a645182', 'Abeba', 'Degefu', 0, 0, 70, 1, 'KettleGreenBay', 'Abeba.Degefu@KettleGreenBay-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e076cb60-4697-4c83-b73d-3c88e5011e56', 'Ashenafi', 'Dejen', 0, 0, 70, 1, 'KettleGreenBay', 'Ashenafi.Dejen@KettleGreenBay-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5374dd8a-eedc-4717-b9a1-fccafd902e7f', 'Yonatan', 'Getamesay', 0, 0, 70, 1, 'KettleGreenBay', 'Yonatan.Getamesay@KettleGreenBay-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b2f036d-57d0-11e9-a438-22000a1f3f3d', 'Abeba', 'Degefu', 0, 0, 73, 1, 'AVG-Staging', 'Abeba.Degefu@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e5209a9-d61d-11ec-ab24-0a62e852177b', 'Aklilu', 'Tesfaye', 0, 0, 73, 1, 'AVG-Staging', 'Aklilu.Tesfaye@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b318d27-57d0-11e9-a438-22000a1f3f3d', 'Alemu', 'Merid', 0, 0, 73, 1, 'AVG-Staging', 'Alemu.Merid@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('940acb13-c7f4-11ec-986e-0a62e852177b', 'Apsmart', 'Ter', 0, 0, 73, 1, 'AVG-Staging', 'Apsmart.Ter@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e51940a-d61d-11ec-ab24-0a62e852177b', 'Arsema', 'Abiy', 0, 0, 73, 1, 'AVG-Staging', 'Arsema.Abiy@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e520bb0-d61d-11ec-ab24-0a62e852177b', 'Arsema', 'Abiy', 0, 0, 73, 1, 'AVG-Staging', 'Arsema.Abiy@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b32b9d5-57d0-11e9-a438-22000a1f3f3d', 'Atnatiwos', 'Solomon', 0, 0, 73, 1, 'AVG-Staging', 'Atnatiwos.Solomon@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b326c82-57d0-11e9-a438-22000a1f3f3d', 'Admin', 'Cloudx', 1, 0, 73, 1, 'AVG-Staging', 'Admin@AVG-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e51fed1-d61d-11ec-ab24-0a62e852177b', 'Beatriz', 'Rodriguez', 0, 0, 73, 1, 'AVG-Staging', 'Beatriz.Rodriguez@AVG-Staging-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b2f64a4-57d0-11e9-a438-22000a1f3f3d', 'Biruk', 'Kenaw', 0, 0, 73, 1, 'AVG-Staging', 'Biruk.Kenaw@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b330536-57d0-11e9-a438-22000a1f3f3d', 'Bro', 'Elias', 0, 0, 73, 1, 'AVG-Staging', 'Bro.Elias@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e521ea0-d61d-11ec-ab24-0a62e852177b', 'Chris', 'Avg', 0, 0, 73, 1, 'AVG-Staging', 'Chris.Avg@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b315a1a-57d0-11e9-a438-22000a1f3f3d', 'Es', 'Avg', 0, 0, 73, 1, 'AVG-Staging', 'Es.Avg@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e51fd92-d61d-11ec-ab24-0a62e852177b', 'Feven', 'Berhe', 0, 0, 73, 1, 'AVG-Staging', 'Feven.Berhe@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b3064fb-57d0-11e9-a438-22000a1f3f3d', 'Fiyameta', 'Birhanu', 0, 0, 73, 1, 'AVG-Staging', 'Fiyameta.Birhanu@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e51a0b2-d61d-11ec-ab24-0a62e852177b', 'Gega', 'Avg', 0, 0, 73, 1, 'AVG-Staging', 'Gega.Avg@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b2fea12-57d0-11e9-a438-22000a1f3f3d', 'Girum', 'Tesfaye', 0, 0, 73, 1, 'AVG-Staging', 'Girum.Tesfaye@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b306ea9-57d0-11e9-a438-22000a1f3f3d', 'Hana', 'Zewede', 0, 0, 73, 1, 'AVG-Staging', 'Hana.Zewede@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e5204d9-d61d-11ec-ab24-0a62e852177b', 'Helina', 'Gezahegn', 0, 0, 73, 1, 'AVG-Staging', 'Helina.Gezahegn@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b3274d1-57d0-11e9-a438-22000a1f3f3d', 'Henok', 'Hailu', 0, 0, 73, 1, 'AVG-Staging', 'Henok.Hailu@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b316512-57d0-11e9-a438-22000a1f3f3d', 'Jemila', 'Besher', 0, 0, 73, 1, 'AVG-Staging', 'Jemila.Besher@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b30ac97-57d0-11e9-a438-22000a1f3f3d', 'Jote', 'Daniel', 0, 0, 73, 1, 'AVG-Staging', 'Jote.Daniel@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e516c6e-d61d-11ec-ab24-0a62e852177b', 'Juan', 'Jose', 1, 0, 73, 1, 'AVG-Staging', 'Admin@AVG-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e5223bf-d61d-11ec-ab24-0a62e852177b', 'Kenean', 'Esubalew', 0, 0, 73, 1, 'AVG-Staging', 'Kenean.Esubalew@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b2efcf1-57d0-11e9-a438-22000a1f3f3d', 'Kidist', 'Kibatu', 0, 0, 73, 1, 'AVG-Staging', 'Kidist.Kibatu@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b2f0042-57d0-11e9-a438-22000a1f3f3d', 'Kidist', 'Kibatu', 0, 0, 73, 1, 'AVG-Staging', 'Kidist.Kibatu@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b333155-57d0-11e9-a438-22000a1f3f3d', 'Lilina', 'Tesfaye', 0, 0, 73, 1, 'AVG-Staging', 'Lilina.Tesfaye@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b2f2154-57d0-11e9-a438-22000a1f3f3d', 'Mahlet', 'Kornel', 0, 0, 73, 1, 'AVG-Staging', 'Mahlet.Kornel@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b31249e-57d0-11e9-a438-22000a1f3f3d', 'Mamaru', 'Seweuye', 0, 0, 73, 1, 'AVG-Staging', 'Mamaru.Seweuye@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b3009e2-57d0-11e9-a438-22000a1f3f3d', 'Mesay', 'Fikru', 0, 0, 73, 1, 'AVG-Staging', 'Mesay.Fikru@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e522299-d61d-11ec-ab24-0a62e852177b', 'Mikias', 'Leweyehu', 0, 0, 73, 1, 'AVG-Staging', 'Mikias.Leweyehu@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b30017f-57d0-11e9-a438-22000a1f3f3d', 'Mikiyas', 'Tefera', 0, 0, 73, 1, 'AVG-Staging', 'Mikiyas.Tefera@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b309bb9-57d0-11e9-a438-22000a1f3f3d', 'Mikiyas', 'Tefera', 0, 0, 73, 1, 'AVG-Staging', 'Mikiyas.Tefera@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b2f99b4-57d0-11e9-a438-22000a1f3f3d', 'Misker', 'Tsegaye', 0, 0, 73, 1, 'AVG-Staging', 'Misker.Tsegaye@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b302d82-57d0-11e9-a438-22000a1f3f3d', 'Mussie', 'Alemu', 0, 0, 73, 1, 'AVG-Staging', 'Mussie.Alemu@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b313585-57d0-11e9-a438-22000a1f3f3d', 'Nani', 'Legesse', 0, 0, 73, 1, 'AVG-Staging', 'Nani.Legesse@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e513b94-d61d-11ec-ab24-0a62e852177b', 'Natanoy', 'Getamesay', 0, 0, 73, 1, 'AVG-Staging', 'Natanoy.Getamesay@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b2fb6f7-57d0-11e9-a438-22000a1f3f3d', 'Natnael', 'Alemayehu', 0, 0, 73, 1, 'AVG-Staging', 'Natnael.Alemayehu@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b32ff77-57d0-11e9-a438-22000a1f3f3d', 'Raey', 'Yohannes', 0, 0, 73, 1, 'AVG-Staging', 'Raey.Yohannes@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b3269de-57d0-11e9-a438-22000a1f3f3d', 'Samrawit', 'Goitom', 0, 0, 73, 1, 'AVG-Staging', 'Samrawit.Goitom@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b3140e3-57d0-11e9-a438-22000a1f3f3d', 'Samrawit', 'Tesfaye', 0, 0, 73, 1, 'AVG-Staging', 'Samrawit.Tesfaye@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e51340c-d61d-11ec-ab24-0a62e852177b', 'Selam', 'Eshete', 0, 0, 73, 1, 'AVG-Staging', 'Selam.Eshete@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b33f7b0-57d0-11e9-a438-22000a1f3f3d', 'Senit', 'Besepa', 0, 0, 73, 1, 'AVG-Staging', 'Senit.Besepa@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e521c01-d61d-11ec-ab24-0a62e852177b', 'Solomon', 'Tesfaye', 0, 0, 73, 1, 'AVG-Staging', 'Solomon.Tesfaye@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e522147-d61d-11ec-ab24-0a62e852177b', 'Solomon', 'Tesfaye', 0, 0, 73, 1, 'AVG-Staging', 'Solomon.Tesfaye@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e520b03-d61d-11ec-ab24-0a62e852177b', 'Tafese', 'Emebet', 0, 0, 73, 1, 'AVG-Staging', 'Tafese.Emebet@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b2f96e2-57d0-11e9-a438-22000a1f3f3d', 'Tamara', 'Ruel', 0, 0, 73, 1, 'AVG-Staging', 'Tamara.Ruel@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b323481-57d0-11e9-a438-22000a1f3f3d', 'Tamara', 'Ruel', 0, 0, 73, 1, 'AVG-Staging', 'Tamara.Ruel@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b328f01-57d0-11e9-a438-22000a1f3f3d', 'Tamara', 'Ruel', 0, 0, 73, 1, 'AVG-Staging', 'Tamara.Ruel@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b329cd4-57d0-11e9-a438-22000a1f3f3d', 'Tamara', 'Ruel', 0, 0, 73, 1, 'AVG-Staging', 'Tamara.Ruel@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b32c522-57d0-11e9-a438-22000a1f3f3d', 'Tiblets', 'Zewde', 0, 0, 73, 1, 'AVG-Staging', 'Tiblets.Zewde@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e52090b-d61d-11ec-ab24-0a62e852177b', 'Tiblets', 'Zewde', 0, 0, 73, 1, 'AVG-Staging', 'Tiblets.Zewde@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b30df7b-57d0-11e9-a438-22000a1f3f3d', 'Waleligne', 'Cherinet', 0, 0, 73, 1, 'AVG-Staging', 'Waleligne.Cherinet@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e52194a-d61d-11ec-ab24-0a62e852177b', 'Wibit', 'Yitbarek', 0, 0, 73, 1, 'AVG-Staging', 'Wibit.Yitbarek@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b2ef45a-57d0-11e9-a438-22000a1f3f3d', 'Wintana', 'Gebremedhin', 0, 0, 73, 1, 'AVG-Staging', 'Wintana.Gebremedhin@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e518ff5-d61d-11ec-ab24-0a62e852177b', 'Yafet', 'Adbo', 0, 0, 73, 1, 'AVG-Staging', 'Yafet.Adbo@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b31a846-57d0-11e9-a438-22000a1f3f3d', 'Yaphet', 'G/Tsadik', 0, 0, 73, 1, 'AVG-Staging', 'Yaphet.G/Tsadik@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b2ffbdc-57d0-11e9-a438-22000a1f3f3d', 'Yonatan', 'Getamesay', 0, 0, 73, 1, 'AVG-Staging', 'Yonatan.Getamesay@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e522e1f-d61d-11ec-ab24-0a62e852177b', 'Yonatan', 'Getamesay', 0, 0, 73, 1, 'AVG-Staging', 'Yonatan.Getamesay@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b2fcada-57d0-11e9-a438-22000a1f3f3d', 'Yordanos', 'Zewde', 0, 0, 73, 1, 'AVG-Staging', 'Yordanos.Zewde@AVG-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00372e4-6777-11e9-9ece-22000a1f3f3d', 'Abeba', 'Degefu', 0, 0, 75, 1, 'BakkavorStaging', 'Abeba.Degefu@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00335ab-6777-11e9-9ece-22000a1f3f3d', 'Abeba', 'Degefu', 0, 0, 75, 1, 'BakkavorStaging', 'Abeba.Degefu@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fdfa0ab6-8967-11ea-bbe9-22000a7bd097', 'Abeba', 'Degefu', 0, 0, 75, 1, 'BakkavorStaging', 'Abeba.Degefu@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0027d33-6777-11e9-9ece-22000a1f3f3d', 'Adam', 'Cook', 0, 0, 75, 1, 'BakkavorStaging', 'Adam.Cook@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002a97b-6777-11e9-9ece-22000a1f3f3d', 'Aine', 'Chalmers', 0, 0, 75, 1, 'BakkavorStaging', 'Aine.Chalmers@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00257fa-6777-11e9-9ece-22000a1f3f3d', 'Ajitha', 'Manoj', 0, 0, 75, 1, 'BakkavorStaging', 'Ajitha.Manoj@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003b8eb-6777-11e9-9ece-22000a1f3f3d', 'Amy', 'Lynn', 0, 0, 75, 1, 'BakkavorStaging', 'Amy.Lynn@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00392fa-6777-11e9-9ece-22000a1f3f3d', 'Ana', 'Bashi', 0, 0, 75, 1, 'BakkavorStaging', 'Ana.Bashi@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0030606-6777-11e9-9ece-22000a1f3f3d', 'Ana', 'Guillen', 0, 0, 75, 1, 'BakkavorStaging', 'Ana.Guillen@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003de8f-6777-11e9-9ece-22000a1f3f3d', 'Andrew', 'Garza', 0, 0, 75, 1, 'BakkavorStaging', 'Andrew.Garza@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002e3a0-6777-11e9-9ece-22000a1f3f3d', 'Andrew', 'Wallace', 0, 0, 75, 1, 'BakkavorStaging', 'Andrew.Wallace@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003c8ca-6777-11e9-9ece-22000a1f3f3d', 'Anne', 'Cicilioni', 0, 0, 75, 1, 'BakkavorStaging', 'Anne.Cicilioni@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002fd52-6777-11e9-9ece-22000a1f3f3d', 'Annyatta', 'Gibbs', 0, 0, 75, 1, 'BakkavorStaging', 'Annyatta.Gibbs@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003dcf6-6777-11e9-9ece-22000a1f3f3d', 'Antonio', 'Fregoso', 0, 0, 75, 1, 'BakkavorStaging', 'Antonio.Fregoso@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fdf9b926-8967-11ea-bbe9-22000a7bd097', 'Arsema', 'Abiy', 0, 0, 75, 1, 'BakkavorStaging', 'Arsema.Abiy@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0035d89-6777-11e9-9ece-22000a1f3f3d', 'Ashley', 'Kremenak', 0, 0, 75, 1, 'BakkavorStaging', 'Ashley.Kremenak@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002c78f-6777-11e9-9ece-22000a1f3f3d', 'Atnatiwos', 'Solomon', 0, 0, 75, 1, 'BakkavorStaging', 'Atnatiwos.Solomon@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002cb66-6777-11e9-9ece-22000a1f3f3d', 'Atnatiwos', 'Solomon', 0, 0, 75, 1, 'BakkavorStaging', 'Atnatiwos.Solomon@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00368cf-6777-11e9-9ece-22000a1f3f3d', 'Atnatiwos', 'Solomon', 0, 0, 75, 1, 'BakkavorStaging', 'Atnatiwos.Solomon@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002b7b5-6777-11e9-9ece-22000a1f3f3d', 'Admin', 'Cloudx', 1, 0, 75, 1, 'BakkavorStaging', 'Admin@BakkavorStaging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002e1f6-6777-11e9-9ece-22000a1f3f3d', 'Barbara', 'Ferkile', 0, 0, 75, 1, 'BakkavorStaging', 'Barbara.Ferkile@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0032815-6777-11e9-9ece-22000a1f3f3d', 'Bertha', 'Caldera', 0, 0, 75, 1, 'BakkavorStaging', 'Bertha.Caldera@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fdfa30aa-8967-11ea-bbe9-22000a7bd097', 'Betty', 'Betty', 0, 0, 75, 1, 'BakkavorStaging', 'Betty.Betty@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003adab-6777-11e9-9ece-22000a1f3f3d', 'Bing', 'Tayag', 0, 0, 75, 1, 'BakkavorStaging', 'Bing.Tayag@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002d3f6-6777-11e9-9ece-22000a1f3f3d', 'Biruk', 'Kenaw', 0, 0, 75, 1, 'BakkavorStaging', 'Biruk.Kenaw@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0027b80-6777-11e9-9ece-22000a1f3f3d', 'Brenton', 'Kremenak', 0, 0, 75, 1, 'BakkavorStaging', 'Brenton.Kremenak@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002d217-6777-11e9-9ece-22000a1f3f3d', 'Bro', 'Elias', 0, 0, 75, 1, 'BakkavorStaging', 'Bro.Elias@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0036dc1-6777-11e9-9ece-22000a1f3f3d', 'Broderick', 'May', 0, 0, 75, 1, 'BakkavorStaging', 'Broderick.May@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0030f0f-6777-11e9-9ece-22000a1f3f3d', 'Carlos', 'Castro', 0, 0, 75, 1, 'BakkavorStaging', 'Carlos.Castro@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0035a52-6777-11e9-9ece-22000a1f3f3d', 'Admin', 'Cloudx', 1, 0, 75, 1, 'BakkavorStaging', 'Admin@BakkavorStaging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00365aa-6777-11e9-9ece-22000a1f3f3d', 'Admin', 'Cloudx', 1, 0, 75, 1, 'BakkavorStaging', 'Admin@BakkavorStaging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002efe1-6777-11e9-9ece-22000a1f3f3d', 'Christina', 'Bancala', 0, 0, 75, 1, 'BakkavorStaging', 'Christina.Bancala@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00270ef-6777-11e9-9ece-22000a1f3f3d', 'Christine', 'Figueroa', 0, 0, 75, 1, 'BakkavorStaging', 'Christine.Figueroa@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003facc-6777-11e9-9ece-22000a1f3f3d', 'Christopher', 'Cervantes', 0, 0, 75, 1, 'BakkavorStaging', 'Christopher.Cervantes@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003f927-6777-11e9-9ece-22000a1f3f3d', 'Claire', 'Kerr', 0, 0, 75, 1, 'BakkavorStaging', 'Claire.Kerr@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0038ba7-6777-11e9-9ece-22000a1f3f3d', 'Claudia', 'Beltran', 0, 0, 75, 1, 'BakkavorStaging', 'Claudia.Beltran@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00289c4-6777-11e9-9ece-22000a1f3f3d', 'Cloudx', 'Cloudx Inc', 0, 0, 75, 1, 'BakkavorStaging', 'Cloudx.Cloudx Inc@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00279d4-6777-11e9-9ece-22000a1f3f3d', 'Corisa', 'Jubinsky', 0, 0, 75, 1, 'BakkavorStaging', 'Corisa.Jubinsky@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0035759-6777-11e9-9ece-22000a1f3f3d', 'Crystal', 'Lascola', 0, 0, 75, 1, 'BakkavorStaging', 'Crystal.Lascola@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0024b49-6777-11e9-9ece-22000a1f3f3d', 'Curtis', 'Williams', 0, 0, 75, 1, 'BakkavorStaging', 'Curtis.Williams@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0038f89-6777-11e9-9ece-22000a1f3f3d', 'Cynthia', 'Flannery', 0, 0, 75, 1, 'BakkavorStaging', 'Cynthia.Flannery@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002b3ec-6777-11e9-9ece-22000a1f3f3d', 'Dan', 'Schlosser', 0, 0, 75, 1, 'BakkavorStaging', 'Dan.Schlosser@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00261e1-6777-11e9-9ece-22000a1f3f3d', 'Daniel', 'Jote', 0, 0, 75, 1, 'BakkavorStaging', 'Daniel.Jote@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fdfa02a9-8967-11ea-bbe9-22000a7bd097', 'Daniel', 'Jote', 0, 0, 75, 1, 'BakkavorStaging', 'Daniel.Jote@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002e729-6777-11e9-9ece-22000a1f3f3d', 'David', 'Weil', 0, 0, 75, 1, 'BakkavorStaging', 'David.Weil@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002e55c-6777-11e9-9ece-22000a1f3f3d', 'Deaundra', 'Dodd', 0, 0, 75, 1, 'BakkavorStaging', 'Deaundra.Dodd@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002f894-6777-11e9-9ece-22000a1f3f3d', 'Deborah', 'Osborne', 0, 0, 75, 1, 'BakkavorStaging', 'Deborah.Osborne@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0027ef8-6777-11e9-9ece-22000a1f3f3d', 'Devin', 'Mcdonald', 0, 0, 75, 1, 'BakkavorStaging', 'Devin.Mcdonald@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0028d52-6777-11e9-9ece-22000a1f3f3d', 'Donna', 'Layfiield', 0, 0, 75, 1, 'BakkavorStaging', 'Donna.Layfiield@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0027657-6777-11e9-9ece-22000a1f3f3d', 'Ed', 'Witt', 0, 0, 75, 1, 'BakkavorStaging', 'Ed.Witt@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003b5c1-6777-11e9-9ece-22000a1f3f3d', 'Edith', 'Tillett', 0, 0, 75, 1, 'BakkavorStaging', 'Edith.Tillett@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003a6fe-6777-11e9-9ece-22000a1f3f3d', 'Eldia', 'Santana', 0, 0, 75, 1, 'BakkavorStaging', 'Eldia.Santana@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002861a-6777-11e9-9ece-22000a1f3f3d', 'Elshaday', 'Adamu', 0, 0, 75, 1, 'BakkavorStaging', 'Elshaday.Adamu@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003f281-6777-11e9-9ece-22000a1f3f3d', 'Emma', 'Owen', 0, 0, 75, 1, 'BakkavorStaging', 'Emma.Owen@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0037a91-6777-11e9-9ece-22000a1f3f3d', 'Eric', 'Leonard', 0, 0, 75, 1, 'BakkavorStaging', 'Eric.Leonard@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003af54-6777-11e9-9ece-22000a1f3f3d', 'Es', 'Twochefs', 0, 0, 75, 1, 'BakkavorStaging', 'Es.Twochefs@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('91805653-3a32-4e10-a240-b2eede474cfd', 'Esbakkavor', 'Webservice', 0, 0, 75, 1, 'BakkavorStaging', 'Esbakkavor.Webservice@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00265b0-6777-11e9-9ece-22000a1f3f3d', 'Felecia', 'Young', 0, 0, 75, 1, 'BakkavorStaging', 'Felecia.Young@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003d5dd-6777-11e9-9ece-22000a1f3f3d', 'Fiyameta', 'Birhanu', 0, 0, 75, 1, 'BakkavorStaging', 'Fiyameta.Birhanu@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002e8e5-6777-11e9-9ece-22000a1f3f3d', 'Gautier', 'Galtero', 0, 0, 75, 1, 'BakkavorStaging', 'Gautier.Galtero@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fdfa25ec-8967-11ea-bbe9-22000a7bd097', 'Gega', 'Twochefs', 0, 0, 75, 1, 'BakkavorStaging', 'Gega.Twochefs@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00280a2-6777-11e9-9ece-22000a1f3f3d', 'Gerson', 'Espindola', 0, 0, 75, 1, 'BakkavorStaging', 'Gerson.Espindola@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003b758-6777-11e9-9ece-22000a1f3f3d', 'Girum', 'Tesfaye', 0, 0, 75, 1, 'BakkavorStaging', 'Girum.Tesfaye@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002ec48-6777-11e9-9ece-22000a1f3f3d', 'Gisela', 'Gomez', 0, 0, 75, 1, 'BakkavorStaging', 'Gisela.Gomez@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0033c6e-6777-11e9-9ece-22000a1f3f3d', 'Gladys', 'Maria Bornacelli', 0, 0, 75, 1, 'BakkavorStaging', 'Gladys.Maria Bornacelli@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003f5d7-6777-11e9-9ece-22000a1f3f3d', 'Grant', 'Simons', 0, 0, 75, 1, 'BakkavorStaging', 'Grant.Simons@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003bf4b-6777-11e9-9ece-22000a1f3f3d', 'Gregory', 'Santelises', 0, 0, 75, 1, 'BakkavorStaging', 'Gregory.Santelises@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002cd27-6777-11e9-9ece-22000a1f3f3d', 'Hana', 'Zewede', 0, 0, 75, 1, 'BakkavorStaging', 'Hana.Zewede@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0038850-6777-11e9-9ece-22000a1f3f3d', 'Henok', 'Hailu', 0, 0, 75, 1, 'BakkavorStaging', 'Henok.Hailu@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003ac04-6777-11e9-9ece-22000a1f3f3d', 'Hilda', 'Larez', 0, 0, 75, 1, 'BakkavorStaging', 'Hilda.Larez@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003bc11-6777-11e9-9ece-22000a1f3f3d', 'J.R.', 'Malena', 0, 0, 75, 1, 'BakkavorStaging', 'J.R..Malena@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0034f1d-6777-11e9-9ece-22000a1f3f3d', 'Jackson', 'Snader', 0, 0, 75, 1, 'BakkavorStaging', 'Jackson.Snader@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003bdab-6777-11e9-9ece-22000a1f3f3d', 'Jared', 'Stone', 0, 0, 75, 1, 'BakkavorStaging', 'Jared.Stone@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003ba79-6777-11e9-9ece-22000a1f3f3d', 'Javier', 'Romero', 0, 0, 75, 1, 'BakkavorStaging', 'Javier.Romero@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003cce4-6777-11e9-9ece-22000a1f3f3d', 'Jemila', 'Beshir', 0, 0, 75, 1, 'BakkavorStaging', 'Jemila.Beshir@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003a39a-6777-11e9-9ece-22000a1f3f3d', 'Admin', 'Cloudx', 1, 0, 75, 1, 'BakkavorStaging', 'Admin@BakkavorStaging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002b961-6777-11e9-9ece-22000a1f3f3d', 'Joe', 'Alonso', 0, 0, 75, 1, 'BakkavorStaging', 'Joe.Alonso@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00294bf-6777-11e9-9ece-22000a1f3f3d', 'Joeal01', 'Joe Alonso', 0, 0, 75, 1, 'BakkavorStaging', 'Joeal01.Joe Alonso@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0029826-6777-11e9-9ece-22000a1f3f3d', 'John', 'Hinson', 0, 0, 75, 1, 'BakkavorStaging', 'John.Hinson@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0026b6f-6777-11e9-9ece-22000a1f3f3d', 'Jonathan', 'Nicholson', 0, 0, 75, 1, 'BakkavorStaging', 'Jonathan.Nicholson@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002dc9d-6777-11e9-9ece-22000a1f3f3d', 'Jose', 'Alberto', 0, 0, 75, 1, 'BakkavorStaging', 'Jose.Alberto@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002bcd2-6777-11e9-9ece-22000a1f3f3d', 'Jose', 'Cervantes', 0, 0, 75, 1, 'BakkavorStaging', 'Jose.Cervantes@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003f420-6777-11e9-9ece-22000a1f3f3d', 'Jose', 'Morales', 0, 0, 75, 1, 'BakkavorStaging', 'Jose.Morales@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0029d55-6777-11e9-9ece-22000a1f3f3d', 'Joseph', 'Torres', 0, 0, 75, 1, 'BakkavorStaging', 'Joseph.Torres@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00397b8-6777-11e9-9ece-22000a1f3f3d', 'Jote', 'Daniel', 0, 0, 75, 1, 'BakkavorStaging', 'Jote.Daniel@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00346da-6777-11e9-9ece-22000a1f3f3d', 'Juanman', 'Juan Manzanarez', 0, 0, 75, 1, 'BakkavorStaging', 'Juanman.Juan Manzanarez@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00319e7-6777-11e9-9ece-22000a1f3f3d', 'Julie', 'Morrison', 0, 0, 75, 1, 'BakkavorStaging', 'Julie.Morrison@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0038163-6777-11e9-9ece-22000a1f3f3d', 'Julieta', 'De Clement', 0, 0, 75, 1, 'BakkavorStaging', 'Julieta.De Clement@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002a7a4-6777-11e9-9ece-22000a1f3f3d', 'Kaleab', 'Tariku', 0, 0, 75, 1, 'BakkavorStaging', 'Kaleab.Tariku@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003c412-6777-11e9-9ece-22000a1f3f3d', 'Kattie', 'Otto', 0, 0, 75, 1, 'BakkavorStaging', 'Kattie.Otto@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fdfb0454-8967-11ea-bbe9-22000a7bd097', 'Kenean', 'Esubalew', 0, 0, 75, 1, 'BakkavorStaging', 'Kenean.Esubalew@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002ab2d-6777-11e9-9ece-22000a1f3f3d', 'Kenneth', 'Jacoby', 0, 0, 75, 1, 'BakkavorStaging', 'Kenneth.Jacoby@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00333f5-6777-11e9-9ece-22000a1f3f3d', 'Kevin', 'Williams', 0, 0, 75, 1, 'BakkavorStaging', 'Kevin.Williams@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002b09b-6777-11e9-9ece-22000a1f3f3d', 'Kidist', 'Kibatu', 0, 0, 75, 1, 'BakkavorStaging', 'Kidist.Kibatu@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00259f1-6777-11e9-9ece-22000a1f3f3d', 'Kirt', 'Mehta', 0, 0, 75, 1, 'BakkavorStaging', 'Kirt.Mehta@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00290d2-6777-11e9-9ece-22000a1f3f3d', 'Kyle', 'Kerekes', 0, 0, 75, 1, 'BakkavorStaging', 'Kyle.Kerekes@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0031f5b-6777-11e9-9ece-22000a1f3f3d', 'Larry', 'Melzer', 0, 0, 75, 1, 'BakkavorStaging', 'Larry.Melzer@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003ed93-6777-11e9-9ece-22000a1f3f3d', 'Linda', 'Hakala', 0, 0, 75, 1, 'BakkavorStaging', 'Linda.Hakala@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0036278-6777-11e9-9ece-22000a1f3f3d', 'Liz', 'Atencio', 0, 0, 75, 1, 'BakkavorStaging', 'Liz.Atencio@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00358e8-6777-11e9-9ece-22000a1f3f3d', 'Lorenaa', 'Lorena Anguiano', 0, 0, 75, 1, 'BakkavorStaging', 'Lorenaa.Lorena Anguiano@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0038311-6777-11e9-9ece-22000a1f3f3d', 'Mahlet', 'Kornel', 0, 0, 75, 1, 'BakkavorStaging', 'Mahlet.Kornel@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002c242-6777-11e9-9ece-22000a1f3f3d', 'Mamar', 'Sewuye', 0, 0, 75, 1, 'BakkavorStaging', 'Mamar.Sewuye@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00331ab-6777-11e9-9ece-22000a1f3f3d', 'Marco', 'Juarez Cruz', 0, 0, 75, 1, 'BakkavorStaging', 'Marco.Juarez Cruz@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003cee3-6777-11e9-9ece-22000a1f3f3d', 'Maria', 'Castellanos', 0, 0, 75, 1, 'BakkavorStaging', 'Maria.Castellanos@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0034003-6777-11e9-9ece-22000a1f3f3d', 'Marion', 'Olivetti', 0, 0, 75, 1, 'BakkavorStaging', 'Marion.Olivetti@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0031619-6777-11e9-9ece-22000a1f3f3d', 'Mark', 'Rivera', 0, 0, 75, 1, 'BakkavorStaging', 'Mark.Rivera@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003ebf8-6777-11e9-9ece-22000a1f3f3d', 'Megan', 'Kozlowski', 0, 0, 75, 1, 'BakkavorStaging', 'Megan.Kozlowski@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00309cf-6777-11e9-9ece-22000a1f3f3d', 'Melanie', 'Raygada', 0, 0, 75, 1, 'BakkavorStaging', 'Melanie.Raygada@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00299d1-6777-11e9-9ece-22000a1f3f3d', 'Melissa', 'Garrison', 0, 0, 75, 1, 'BakkavorStaging', 'Melissa.Garrison@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003c73a-6777-11e9-9ece-22000a1f3f3d', 'Melissa', 'Hoppe', 0, 0, 75, 1, 'BakkavorStaging', 'Melissa.Hoppe@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00384b7-6777-11e9-9ece-22000a1f3f3d', 'Mesay', 'Fikru', 0, 0, 75, 1, 'BakkavorStaging', 'Mesay.Fikru@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003a89e-6777-11e9-9ece-22000a1f3f3d', 'Michael', 'Doyle', 0, 0, 75, 1, 'BakkavorStaging', 'Michael.Doyle@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002ee1c-6777-11e9-9ece-22000a1f3f3d', 'Michael', 'Tesfaye', 0, 0, 75, 1, 'BakkavorStaging', 'Michael.Tesfaye@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00282ab-6777-11e9-9ece-22000a1f3f3d', 'Mike', 'Mixon', 0, 0, 75, 1, 'BakkavorStaging', 'Mike.Mixon@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002aebf-6777-11e9-9ece-22000a1f3f3d', 'Mike', 'Yatzun', 0, 0, 75, 1, 'BakkavorStaging', 'Mike.Yatzun@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003b40e-6777-11e9-9ece-22000a1f3f3d', 'Mikiyas', 'Tefera', 0, 0, 75, 1, 'BakkavorStaging', 'Mikiyas.Tefera@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003e6e7-6777-11e9-9ece-22000a1f3f3d', 'Miroslava', 'Pestana', 0, 0, 75, 1, 'BakkavorStaging', 'Miroslava.Pestana@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00263cf-6777-11e9-9ece-22000a1f3f3d', 'Misker', 'Tsegaye', 0, 0, 75, 1, 'BakkavorStaging', 'Misker.Tsegaye@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0035f31-6777-11e9-9ece-22000a1f3f3d', 'Mussie', 'Alemu', 0, 0, 75, 1, 'BakkavorStaging', 'Mussie.Alemu@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0030b8f-6777-11e9-9ece-22000a1f3f3d', 'Myra', 'Gallegos', 0, 0, 75, 1, 'BakkavorStaging', 'Myra.Gallegos@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003213a-6777-11e9-9ece-22000a1f3f3d', 'Nani', 'Legesse', 0, 0, 75, 1, 'BakkavorStaging', 'Nani.Legesse@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fdfa49a2-8967-11ea-bbe9-22000a7bd097', 'Natanoy', 'Getamesay', 0, 0, 75, 1, 'BakkavorStaging', 'Natanoy.Getamesay@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00341c3-6777-11e9-9ece-22000a1f3f3d', 'Natnael', 'Alemayehu', 0, 0, 75, 1, 'BakkavorStaging', 'Natnael.Alemayehu@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002f34d-6777-11e9-9ece-22000a1f3f3d', 'Paul', 'Skarbowski', 0, 0, 75, 1, 'BakkavorStaging', 'Paul.Skarbowski@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0036c28-6777-11e9-9ece-22000a1f3f3d', 'Pilar', 'Smith', 0, 0, 75, 1, 'BakkavorStaging', 'Pilar.Smith@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002de7c-6777-11e9-9ece-22000a1f3f3d', 'Priscilla', 'Corrales', 0, 0, 75, 1, 'BakkavorStaging', 'Priscilla.Corrales@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0034bff-6777-11e9-9ece-22000a1f3f3d', 'Quamlea', 'Quantum Success Packaging Inc.', 0, 0, 75, 1, 'BakkavorStaging', 'Quamlea.Quantum Success Packaging Inc.@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0037c57-6777-11e9-9ece-22000a1f3f3d', 'Rachael', 'Tidwell', 0, 0, 75, 1, 'BakkavorStaging', 'Rachael.Tidwell@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0028b73-6777-11e9-9ece-22000a1f3f3d', 'Raey', 'Yohannes', 0, 0, 75, 1, 'BakkavorStaging', 'Raey.Yohannes@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0033e2c-6777-11e9-9ece-22000a1f3f3d', 'Ramiro', 'Diaz', 0, 0, 75, 1, 'BakkavorStaging', 'Ramiro.Diaz@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0039e63-6777-11e9-9ece-22000a1f3f3d', 'Ricordo', 'Spencer', 0, 0, 75, 1, 'BakkavorStaging', 'Ricordo.Spencer@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002ea93-6777-11e9-9ece-22000a1f3f3d', 'Robert', 'Becker', 0, 0, 75, 1, 'BakkavorStaging', 'Robert.Becker@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003db4e-6777-11e9-9ece-22000a1f3f3d', 'Rosmil', 'Rosa', 0, 0, 75, 1, 'BakkavorStaging', 'Rosmil.Rosa@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003d7af-6777-11e9-9ece-22000a1f3f3d', 'Ruben', 'Perez', 0, 0, 75, 1, 'BakkavorStaging', 'Ruben.Perez@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00287d7-6777-11e9-9ece-22000a1f3f3d', 'Sadie', 'Woodhouse', 0, 0, 75, 1, 'BakkavorStaging', 'Sadie.Woodhouse@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0034386-6777-11e9-9ece-22000a1f3f3d', 'Sam', 'Last', 0, 0, 75, 1, 'BakkavorStaging', 'Sam.Last@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003a1ac-6777-11e9-9ece-22000a1f3f3d', 'Samrawit', 'Goitom', 0, 0, 75, 1, 'BakkavorStaging', 'Samrawit.Goitom@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0031d7d-6777-11e9-9ece-22000a1f3f3d', 'Samrawit', 'Tesfaye', 0, 0, 75, 1, 'BakkavorStaging', 'Samrawit.Tesfaye@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003a55d-6777-11e9-9ece-22000a1f3f3d', 'Sara', 'Rivera', 0, 0, 75, 1, 'BakkavorStaging', 'Sara.Rivera@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00317f1-6777-11e9-9ece-22000a1f3f3d', 'Sarah', 'Turrell', 0, 0, 75, 1, 'BakkavorStaging', 'Sarah.Turrell@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003867b-6777-11e9-9ece-22000a1f3f3d', 'Sean', 'Runk', 0, 0, 75, 1, 'BakkavorStaging', 'Sean.Runk@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0039ffb-6777-11e9-9ece-22000a1f3f3d', 'Seble', 'Sisay', 0, 0, 75, 1, 'BakkavorStaging', 'Seble.Sisay@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fdfa375d-8967-11ea-bbe9-22000a7bd097', 'Selam', 'Eshete', 0, 0, 75, 1, 'BakkavorStaging', 'Selam.Eshete@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0034538-6777-11e9-9ece-22000a1f3f3d', 'Shane', 'Garinger', 0, 0, 75, 1, 'BakkavorStaging', 'Shane.Garinger@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003e1f1-6777-11e9-9ece-22000a1f3f3d', 'Shane', 'OConnor', 0, 0, 75, 1, 'BakkavorStaging', 'Shane.OConnor@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002c5c7-6777-11e9-9ece-22000a1f3f3d', 'Sharon', 'Lord', 0, 0, 75, 1, 'BakkavorStaging', 'Sharon.Lord@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fdfa6372-8967-11ea-bbe9-22000a7bd097', 'Solomon', 'Tesfaye', 0, 0, 75, 1, 'BakkavorStaging', 'Solomon.Tesfaye@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0034a43-6777-11e9-9ece-22000a1f3f3d', 'Stacey', 'Chovanec', 0, 0, 75, 1, 'BakkavorStaging', 'Stacey.Chovanec@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003c59f-6777-11e9-9ece-22000a1f3f3d', 'Stephanie', 'Broom', 0, 0, 75, 1, 'BakkavorStaging', 'Stephanie.Broom@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0031283-6777-11e9-9ece-22000a1f3f3d', 'Stephen', 'Young', 0, 0, 75, 1, 'BakkavorStaging', 'Stephen.Young@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0036a67-6777-11e9-9ece-22000a1f3f3d', 'Steven', 'Batcheller', 0, 0, 75, 1, 'BakkavorStaging', 'Steven.Batcheller@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0033adc-6777-11e9-9ece-22000a1f3f3d', 'Tamara', 'Ruel', 0, 0, 75, 1, 'BakkavorStaging', 'Tamara.Ruel@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003ef42-6777-11e9-9ece-22000a1f3f3d', 'Tamara', 'Ruel', 0, 0, 75, 1, 'BakkavorStaging', 'Tamara.Ruel@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003b0f6-6777-11e9-9ece-22000a1f3f3d', 'Tanja', 'Owen', 0, 0, 75, 1, 'BakkavorStaging', 'Tanja.Owen@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fdfa3e4c-8967-11ea-bbe9-22000a7bd097', 'Teblii', 'Teblii', 0, 0, 75, 1, 'BakkavorStaging', 'Teblii.Teblii@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fdf9f89a-8967-11ea-bbe9-22000a7bd097', 'Teshager', 'Mekuria', 0, 0, 75, 1, 'BakkavorStaging', 'Teshager.Mekuria@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('10cf745b-a77e-4d4e-bc62-45cbce8a9553', 'Teststaging', 'Staging', 0, 0, 75, 1, 'BakkavorStaging', 'Teststaging.Staging@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002d5ab-6777-11e9-9ece-22000a1f3f3d', 'Admin', 'Cloudx', 1, 0, 75, 1, 'BakkavorStaging', 'Admin@BakkavorStaging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002ff05-6777-11e9-9ece-22000a1f3f3d', 'Thomas', 'Hollenbeck', 0, 0, 75, 1, 'BakkavorStaging', 'Thomas.Hollenbeck@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fdfa12b8-8967-11ea-bbe9-22000a7bd097', 'Tiblet', 'Zewde', 0, 0, 75, 1, 'BakkavorStaging', 'Tiblet.Zewde@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003e027-6777-11e9-9ece-22000a1f3f3d', 'Tibletse', 'Zewde', 0, 0, 75, 1, 'BakkavorStaging', 'Tibletse.Zewde@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002e04f-6777-11e9-9ece-22000a1f3f3d', 'Tracy', 'Sweeney', 0, 0, 75, 1, 'BakkavorStaging', 'Tracy.Sweeney@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0038a0a-6777-11e9-9ece-22000a1f3f3d', 'Tsedenya', 'Yohannes', 0, 0, 75, 1, 'BakkavorStaging', 'Tsedenya.Yohannes@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f1322ec6-1387-425b-b861-e26cf6f195f7', 'Twochefs', 'Staging', 0, 0, 75, 1, 'BakkavorStaging', 'Twochefs.Staging@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e00395f3-6777-11e9-9ece-22000a1f3f3d', 'Vanessa', 'Holguin', 0, 0, 75, 1, 'BakkavorStaging', 'Vanessa.Holguin@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0033914-6777-11e9-9ece-22000a1f3f3d', 'Vinod', 'Narayanan', 0, 0, 75, 1, 'BakkavorStaging', 'Vinod.Narayanan@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0037fbd-6777-11e9-9ece-22000a1f3f3d', 'Violeta', 'Orozco', 0, 0, 75, 1, 'BakkavorStaging', 'Violeta.Orozco@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0036f7b-6777-11e9-9ece-22000a1f3f3d', 'Wendeliz', 'Berrios', 0, 0, 75, 1, 'BakkavorStaging', 'Wendeliz.Berrios@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003763f-6777-11e9-9ece-22000a1f3f3d', 'Wintana', 'Gebremedhin', 0, 0, 75, 1, 'BakkavorStaging', 'Wintana.Gebremedhin@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e003c0cf-6777-11e9-9ece-22000a1f3f3d', 'Yaphet', 'G/Tsadik', 0, 0, 75, 1, 'BakkavorStaging', 'Yaphet.G/Tsadik@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e002cede-6777-11e9-9ece-22000a1f3f3d', 'Yonatan', 'Getamesay', 0, 0, 75, 1, 'BakkavorStaging', 'Yonatan.Getamesay@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0036746-6777-11e9-9ece-22000a1f3f3d', 'Yordanos', 'Zewde', 0, 0, 75, 1, 'BakkavorStaging', 'Yordanos.Zewde@BakkavorStaging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88090d41-62e3-468b-9331-7aac9b776459', 'Ashenafi', 'Dejen', 0, 0, 76, 1, 'RGBarry', 'Ashenafi.Dejen@RGBarry-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('92862be3-7dcc-4157-9eb4-0255db3d6529', 'Soliana', 'Amdemariam', 0, 0, 77, 1, 'ContinentalBattery', 'Soliana.Amdemariam@ContinentalBattery-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f8ec9e68-c652-446c-a12c-e692268adc58', 'Ashenafi', 'Dejen', 0, 0, 77, 1, 'ContinentalBattery', 'Ashenafi.Dejen@ContinentalBattery-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('29948ef3-cbe3-46b8-bd06-ef300857ba1c', 'Beakal', 'Deribe', 0, 0, 77, 1, 'ContinentalBattery', 'Beakal.Deribe@ContinentalBattery-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('283eb4ec-8e21-4fc1-a2af-4ad7d49b99c9', 'Henok', 'Teshager', 0, 0, 77, 1, 'ContinentalBattery', 'Henok.Teshager@ContinentalBattery-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('869fc275-f287-4058-8e8a-9a7d30d41de1', 'Tsion', 'Habtamu', 0, 0, 77, 1, 'ContinentalBattery', 'Tsion.Habtamu@ContinentalBattery-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('17b2409a-c29a-43ed-817b-0f7f82dd44be', 'Yafet', 'Abdo', 0, 0, 77, 1, 'ContinentalBattery', 'Yafet.Abdo@ContinentalBattery-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('46f84ad4-350a-4434-aeca-063c7d503514', 'Yonatan', 'Getamesay', 0, 0, 77, 1, 'ContinentalBattery', 'Yonatan.Getamesay@ContinentalBattery-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('baea2d10-c7a2-432a-bf9f-f14098118f9c', 'Yonatan', 'Getamesay', 0, 0, 77, 1, 'ContinentalBattery', 'Yonatan.Getamesay@ContinentalBattery-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('efc2c59a-8ae3-4347-8542-c4e9c6124fc2', 'Yordanos', 'Zewde', 0, 0, 77, 1, 'ContinentalBattery', 'Yordanos.Zewde@ContinentalBattery-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('75348e0d-ebe6-11ec-ab24-0a62e852177b', 'Aklilu', 'Tesfaye', 0, 0, 78, 1, 'AM-Staging', 'Aklilu.Tesfaye@AM-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d359c2b6-4726-4fb4-8fea-95396a46c769', 'Amservice', 'Serviceuser', 0, 0, 78, 1, 'AM-Staging', 'Amservice.Serviceuser@AM-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('75347aaf-ebe6-11ec-ab24-0a62e852177b', 'Arsema', 'Abiy', 0, 0, 78, 1, 'AM-Staging', 'Arsema.Abiy@AM-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('753489d9-ebe6-11ec-ab24-0a62e852177b', 'Ashenafi', 'Dejen', 0, 0, 78, 1, 'AM-Staging', 'Ashenafi.Dejen@AM-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('75349092-ebe6-11ec-ab24-0a62e852177b', 'Ashenafi', 'Dejen', 0, 0, 78, 1, 'AM-Staging', 'Ashenafi.Dejen@AM-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('75349614-ebe6-11ec-ab24-0a62e852177b', 'Ashenafi', 'Dejen', 0, 0, 78, 1, 'AM-Staging', 'Ashenafi.Dejen@AM-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('75348a94-ebe6-11ec-ab24-0a62e852177b', 'Beakal', 'Deribe', 0, 0, 78, 1, 'AM-Staging', 'Beakal.Deribe@AM-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7534853f-ebe6-11ec-ab24-0a62e852177b', 'Biruk', 'Kenaw', 0, 0, 78, 1, 'AM-Staging', 'Biruk.Kenaw@AM-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('75349140-ebe6-11ec-ab24-0a62e852177b', 'Bro', 'Elias', 0, 0, 78, 1, 'AM-Staging', 'Bro.Elias@AM-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('75347bb2-ebe6-11ec-ab24-0a62e852177b', 'Bro', 'Elias', 0, 0, 78, 1, 'AM-Staging', 'Bro.Elias@AM-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('75349253-ebe6-11ec-ab24-0a62e852177b', 'Feven', 'Berhe', 0, 0, 78, 1, 'AM-Staging', 'Feven.Berhe@AM-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('75347879-ebe6-11ec-ab24-0a62e852177b', 'Hana', 'Zewde', 0, 0, 78, 1, 'AM-Staging', 'Hana.Zewde@AM-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('75348115-ebe6-11ec-ab24-0a62e852177b', 'Hilina', 'Gezahegn', 0, 0, 78, 1, 'AM-Staging', 'Hilina.Gezahegn@AM-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7534760d-ebe6-11ec-ab24-0a62e852177b', 'Jote', 'Daniel', 0, 0, 78, 1, 'AM-Staging', 'Jote.Daniel@AM-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('75347742-ebe6-11ec-ab24-0a62e852177b', 'Kenean', 'Esubalew', 0, 0, 78, 1, 'AM-Staging', 'Kenean.Esubalew@AM-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('75348927-ebe6-11ec-ab24-0a62e852177b', 'Natanoy', 'Getamesay', 0, 0, 78, 1, 'AM-Staging', 'Natanoy.Getamesay@AM-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7534805b-ebe6-11ec-ab24-0a62e852177b', 'Rajesh', 'Yadav', 0, 0, 78, 1, 'AM-Staging', 'Rajesh.Yadav@AM-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('753482c8-ebe6-11ec-ab24-0a62e852177b', 'Samrawit', 'Tesfaye', 0, 0, 78, 1, 'AM-Staging', 'Samrawit.Tesfaye@AM-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('753494f7-ebe6-11ec-ab24-0a62e852177b', 'Samrawit', 'Tesfaye', 0, 0, 78, 1, 'AM-Staging', 'Samrawit.Tesfaye@AM-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('75348edb-ebe6-11ec-ab24-0a62e852177b', 'Selam', 'Eshete', 0, 0, 78, 1, 'AM-Staging', 'Selam.Eshete@AM-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7534799f-ebe6-11ec-ab24-0a62e852177b', 'Solomon', 'Tesfaye', 0, 0, 78, 1, 'AM-Staging', 'Solomon.Tesfaye@AM-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('75346d9a-ebe6-11ec-ab24-0a62e852177b', 'Test', 'Ams', 0, 0, 78, 1, 'AM-Staging', 'Test.Ams@AM-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('75348207-ebe6-11ec-ab24-0a62e852177b', 'Test', 'Ams2', 0, 0, 78, 1, 'AM-Staging', 'Test.Ams2@AM-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('75348c5a-ebe6-11ec-ab24-0a62e852177b', 'Tiblets', 'Zewde', 0, 0, 78, 1, 'AM-Staging', 'Tiblets.Zewde@AM-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('753487a3-ebe6-11ec-ab24-0a62e852177b', 'Yafet', 'Nightshift', 0, 0, 78, 1, 'AM-Staging', 'Yafet.Nightshift@AM-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('75349302-ebe6-11ec-ab24-0a62e852177b', 'Yonatan', 'Getamesay', 0, 0, 78, 1, 'AM-Staging', 'Yonatan.Getamesay@AM-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bfacaa9e-9dfc-43e1-96a0-c1d2462f24cc', 'Ashenafi', 'Dejen', 0, 0, 79, 1, 'Keter', 'Ashenafi.Dejen@Keter-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('15364b77-228a-4eb6-82bb-f3e752cf022a', 'Beakal', 'Deribe', 0, 0, 79, 1, 'Keter', 'Beakal.Deribe@Keter-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fe467c56-ba3f-4d4b-a1b1-b4a0e40a6378', 'Girum', 'Tesfaye', 0, 0, 79, 1, 'Keter', 'Girum.Tesfaye@Keter-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7f76df87-34e0-4f4a-858d-e7673993f9a2', 'Samrawit', 'Tesfaye', 0, 0, 79, 1, 'Keter', 'Samrawit.Tesfaye@Keter-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e9b100d4-cc90-449c-b59c-41b26663382f', 'Samrawit', 'Tesfaye', 0, 0, 79, 1, 'Keter', 'Samrawit.Tesfaye@Keter-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e97dbf39-73a0-485e-a158-e74500b31dde', 'Yonatan', 'Getamesay', 0, 0, 79, 1, 'Keter', 'Yonatan.Getamesay@Keter-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a59e3592-5182-4e7a-9204-9b9d71dacb4a', 'Gega', 'Katke', 0, 0, 80, 1, 'Coffee', 'Gega.Katke@Coffee-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2778be94-9890-4057-8037-8eeb9783888a', 'Gega', 'Mansoori', 0, 0, 80, 1, 'Coffee', 'Gega.Mansoori@Coffee-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b9b5da41-75b7-4fef-940b-00dc6cdf2bff', 'Gega', 'Pawar', 0, 0, 80, 1, 'Coffee', 'Gega.Pawar@Coffee-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ef3ccf3f-84dd-4ad3-9ea2-1ca13c06f958', 'Yonathan', 'Tedla', 0, 0, 80, 1, 'Coffee', 'Yonathan.Tedla@Coffee-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6398b4fb-beb3-462e-836b-d7236ddd11bd', 'America', 'Messaging', 0, 0, 83, 1, 'AM', 'America.Messaging@AM-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('18b645c6-d0a4-11e9-b055-22000a1f3f3d', 'Amservice', 'Serviceuser', 0, 0, 83, 1, 'AM', 'Amservice.Serviceuser@AM-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c4738269-853d-496b-8c71-715b329a28a0', 'Ashenafi', 'Dejen', 0, 0, 83, 1, 'AM', 'Ashenafi.Dejen@AM-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('eb665dec-725a-478d-b96c-86e56eb3b85c', 'Ashenafi', 'Dejen', 0, 0, 83, 1, 'AM', 'Ashenafi.Dejen@AM-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c15c33f2-fccc-4404-b0d4-287b59385216', 'Beakal', 'Deribe', 0, 0, 83, 1, 'AM', 'Beakal.Deribe@AM-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0f8de029-e99d-43a7-814a-bd6d96f38fd9', 'Hana', 'Zewde', 0, 0, 83, 1, 'AM', 'Hana.Zewde@AM-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83a6bd2-2294-43b0-8f50-e72ddcab4fef', 'Samrawit', 'Tesfaye', 0, 0, 83, 1, 'AM', 'Samrawit.Tesfaye@AM-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4880304b-748e-44ac-8612-cc2620164d7d', 'Solomon', 'Tesfaye', 0, 0, 83, 1, 'AM', 'Solomon.Tesfaye@AM-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0771afe3-2b6f-43fa-bc2b-c9b6201db65a', 'Test', 'Ams', 0, 0, 83, 1, 'AM', 'Test.Ams@AM-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4221c661-d45a-4f12-afc1-5534970df8ad', 'Test', 'Ams2', 0, 0, 83, 1, 'AM', 'Test.Ams2@AM-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e1fbe60b-619d-4a24-bd7c-35299a0a441e', 'Aklilu', 'Tesfaye', 0, 0, 84, 1, 'StrategicSecurity', 'Aklilu.Tesfaye@StrategicSecurity-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9f76c498-d28d-45c2-abfd-4fd230d06eb2', 'Arsema', 'Abiy', 0, 0, 84, 1, 'StrategicSecurity', 'Arsema.Abiy@StrategicSecurity-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('866791b1-807a-4c9c-8026-509e0f8bab82', 'Ashenafi', 'Dejen', 0, 0, 84, 1, 'StrategicSecurity', 'Ashenafi.Dejen@StrategicSecurity-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0a919285-f0c2-4988-a23d-ecbd3cabf1d0', 'Beatriz', 'Rodriguez', 0, 0, 84, 1, 'StrategicSecurity', 'Beatriz.Rodriguez@StrategicSecurity-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('26b95008-4050-486e-98b2-8ee3f891831c', 'Biruk', 'Kenaw', 0, 0, 84, 1, 'StrategicSecurity', 'Biruk.Kenaw@StrategicSecurity-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4a62d01d-b490-4551-8541-e11a77efbc63', 'Solomon', 'Tesfaye', 0, 0, 84, 1, 'StrategicSecurity', 'Solomon.Tesfaye@StrategicSecurity-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('82a6a682-e652-429d-870c-10c181a6945a', 'Yafet', 'Abdo', 0, 0, 84, 1, 'StrategicSecurity', 'Yafet.Abdo@StrategicSecurity-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('353ca1a3-f6b4-4da5-90f4-2e44e938b2b0', 'Yonatan', 'Getamesay', 0, 0, 84, 1, 'StrategicSecurity', 'Yonatan.Getamesay@StrategicSecurity-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e35598d1-eacd-4b44-bc4f-eaaf7fb0aa77', 'Yonatan', 'Getamesay', 0, 0, 84, 1, 'StrategicSecurity', 'Yonatan.Getamesay@StrategicSecurity-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1f008c4b-6f70-4f27-bbe6-94d26c4d3e33', 'Abraham', 'Teklay', 0, 0, 86, 1, 'Nova', 'Abraham.Teklay@Nova-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('361c3fc8-a5ab-4b24-833c-f151cfd55d4f', 'Addis', 'Getachew', 0, 0, 86, 1, 'Nova', 'Addis.Getachew@Nova-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0f4fc916-c18a-449b-a064-0dab329f75fb', 'Alexander', 'Michael', 0, 0, 86, 1, 'Nova', 'Alexander.Michael@Nova-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f3c5c9bc-8dcb-4642-8917-aae4f0b739ee', 'Arsema', 'Abiy', 0, 0, 86, 1, 'Nova', 'Arsema.Abiy@Nova-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d06335be-8312-4c06-983d-c61851885d99', 'Ashenafi', 'Dejen', 0, 0, 86, 1, 'Nova', 'Ashenafi.Dejen@Nova-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1cc6c13d-fe37-4384-9979-92444b828941', 'Beakal', 'Deribe', 0, 0, 86, 1, 'Nova', 'Beakal.Deribe@Nova-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cbbf96b8-5620-4b02-b409-4bfe43e298dd', 'Bro', 'Elias', 0, 0, 86, 1, 'Nova', 'Bro.Elias@Nova-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7897e427-289d-4304-a8a6-44458038f389', 'Nova', 'Superadmin', 1, 0, 86, 1, 'Nova', 'Admin@Nova-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('11015363-b802-426b-84bb-e4bda135ca35', 'Selam', 'Selam', 0, 0, 86, 1, 'Nova', 'Selam.Selam@Nova-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('da1904c2-3dae-4125-ab44-df0cea5db039', 'Yafet', 'Abdo', 0, 0, 86, 1, 'Nova', 'Yafet.Abdo@Nova-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ab5a9297-12e5-48e3-8420-27a3d3d318b0', 'Yordanos', 'Zewde', 0, 0, 86, 1, 'Nova', 'Yordanos.Zewde@Nova-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('74cea3a6-ca67-452e-9647-96c9f451abe8', 'Abraham', 'Teklay', 0, 0, 88, 1, 'Bongards', 'Abraham.Teklay@Bongards-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fa49c76e-c6f6-4dc1-93ee-1bffdfad564c', 'Addis', 'Getachew', 0, 0, 88, 1, 'Bongards', 'Addis.Getachew@Bongards-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('201fd141-a920-4981-bc35-b642a4fab8bf', 'Alexander', 'Michael', 0, 0, 88, 1, 'Bongards', 'Alexander.Michael@Bongards-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8b1de111-e662-48e1-bb0f-08e41a694fdd', 'Juan', 'Jose', 0, 0, 88, 1, 'Bongards', 'Juan.Jose@Bongards-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a9d2edc0-5f4a-4052-9a1e-f71bf6ee345b', 'Arsema', 'Abiy', 0, 0, 89, 1, 'Coleman', 'Arsema.Abiy@Coleman-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c93f123d-b4be-4033-96e1-3afd37cd6227', 'Ashenafi', 'Dejen', 0, 0, 89, 1, 'Coleman', 'Ashenafi.Dejen@Coleman-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ddefc63f-e6d9-4d62-a88b-e0f34f1caaa1', 'Samrawit', 'Tesfaye', 0, 0, 89, 1, 'Coleman', 'Samrawit.Tesfaye@Coleman-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('87ca7755-a7df-43fb-a4fb-d86cfa5077b5', 'Bro', 'Elias', 0, 0, 90, 1, 'Bongards-Staging', 'Bro.Elias@Bongards-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bb3a1b55-42a3-11ea-84b1-22000a7bd097', 'Test Gega', 'Bai', 0, 0, 90, 1, 'Bongards-Staging', 'Test Gega.Bai@Bongards-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bb3a9783-42a3-11ea-84b1-22000a7bd097', 'Test Gega', 'Katke', 0, 0, 90, 1, 'Bongards-Staging', 'Test Gega.Katke@Bongards-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bb3aa205-42a3-11ea-84b1-22000a7bd097', 'Test Gega', 'Mansoori', 0, 0, 90, 1, 'Bongards-Staging', 'Test Gega.Mansoori@Bongards-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bb3aaf6b-42a3-11ea-84b1-22000a7bd097', 'Test Gega', 'Pawar', 0, 0, 90, 1, 'Bongards-Staging', 'Test Gega.Pawar@Bongards-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('152e5f45-63e4-4de6-9b7f-ef560aa7d968', 'Abeba', 'Degefu', 0, 0, 91, 1, 'AP', 'Abeba.Degefu@AP-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ed617877-b570-4672-9957-4eb170a6ca97', 'Arsema', 'Abiy', 0, 0, 91, 1, 'AP', 'Arsema.Abiy@AP-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('445f1923-b916-4335-b92a-ab12a6c1b4e5', 'Ashenafi', 'Dejen', 0, 0, 91, 1, 'AP', 'Ashenafi.Dejen@AP-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5fbecb7f-7693-4d28-9f9f-e081bfc9b769', 'Chritsine', 'Uwase', 0, 0, 91, 1, 'AP', 'Chritsine.Uwase@AP-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4af76326-6581-49f1-9ce9-90b4115ee3ce', 'Selam', 'Esheste', 0, 0, 91, 1, 'AP', 'Selam.Esheste@AP-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c8710896-f00d-42c7-8498-b18e05b0b4c1', 'Yonatan', 'Getamesay', 0, 0, 91, 1, 'AP', 'Yonatan.Getamesay@AP-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5327f392-5831-4168-974e-a7ed72bab9b7', 'Abraham', 'Teklay', 0, 0, 92, 1, 'CCare', 'Abraham.Teklay@CCare-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c2069127-237b-47ca-ad7d-0201a9146694', 'Juan', 'Jose', 0, 0, 92, 1, 'CCare', 'Juan.Jose@CCare-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ce8a43a3-07f0-11eb-b8dc-22000ab67d3b', 'Admin', 'Keter-Staging', 1, 0, 93, 1, 'Keter-Staging', 'Admin@Keter-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ce8c366d-07f0-11eb-b8dc-22000ab67d3b', 'Api', 'Keter', 0, 0, 93, 1, 'Keter-Staging', 'Api.Keter@Keter-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ce8c40a0-07f0-11eb-b8dc-22000ab67d3b', 'Arsema', 'Abiy', 0, 0, 93, 1, 'Keter-Staging', 'Arsema.Abiy@Keter-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ce8c18d3-07f0-11eb-b8dc-22000ab67d3b', 'Ashenafi', 'Dejen', 0, 0, 93, 1, 'Keter-Staging', 'Ashenafi.Dejen@Keter-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ce8c3d6b-07f0-11eb-b8dc-22000ab67d3b', 'Ashenafi', 'Dejen', 0, 0, 93, 1, 'Keter-Staging', 'Ashenafi.Dejen@Keter-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ce8c27ff-07f0-11eb-b8dc-22000ab67d3b', 'Beakal', 'Beakal', 0, 0, 93, 1, 'Keter-Staging', 'Beakal.Beakal@Keter-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ce8af42c-07f0-11eb-b8dc-22000ab67d3b', 'Beakal', 'Deribe', 0, 0, 93, 1, 'Keter-Staging', 'Beakal.Deribe@Keter-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ce8af5fd-07f0-11eb-b8dc-22000ab67d3b', 'Bro', 'Elias', 0, 0, 93, 1, 'Keter-Staging', 'Bro.Elias@Keter-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ce8c24bc-07f0-11eb-b8dc-22000ab67d3b', 'Kenean', 'Esubalew', 0, 0, 93, 1, 'Keter-Staging', 'Kenean.Esubalew@Keter-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ce8c02b5-07f0-11eb-b8dc-22000ab67d3b', 'Natanoy', 'Getamesay', 0, 0, 93, 1, 'Keter-Staging', 'Natanoy.Getamesay@Keter-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ce8bb9f8-07f0-11eb-b8dc-22000ab67d3b', 'Samrawit', 'Tesfaye', 0, 0, 93, 1, 'Keter-Staging', 'Samrawit.Tesfaye@Keter-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ce8c1c64-07f0-11eb-b8dc-22000ab67d3b', 'Samrawit', 'Tesfaye', 0, 0, 93, 1, 'Keter-Staging', 'Samrawit.Tesfaye@Keter-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ce8c4945-07f0-11eb-b8dc-22000ab67d3b', 'Samrawit', 'Tesfaye', 0, 0, 93, 1, 'Keter-Staging', 'Samrawit.Tesfaye@Keter-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ce8c009e-07f0-11eb-b8dc-22000ab67d3b', 'Selam', 'Eshet', 0, 0, 93, 1, 'Keter-Staging', 'Selam.Eshet@Keter-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ce8c049d-07f0-11eb-b8dc-22000ab67d3b', 'Solomon', 'Tesfaye', 0, 0, 93, 1, 'Keter-Staging', 'Solomon.Tesfaye@Keter-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ce8c4236-07f0-11eb-b8dc-22000ab67d3b', 'Tibilets', 'Zewde', 0, 0, 93, 1, 'Keter-Staging', 'Tibilets.Zewde@Keter-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ce8c0718-07f0-11eb-b8dc-22000ab67d3b', 'Yafet', 'Abdo', 0, 0, 93, 1, 'Keter-Staging', 'Yafet.Abdo@Keter-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ce8c0ca7-07f0-11eb-b8dc-22000ab67d3b', 'Yonatan', 'Getamesay', 0, 0, 93, 1, 'Keter-Staging', 'Yonatan.Getamesay@Keter-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08b0ccca-fb9a-11ed-bb71-02c102131f31', 'Abeba', 'Degefu', 0, 0, 94, 1, 'AP-Staging', 'Abeba.Degefu@AP-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08b0ce1f-fb9a-11ed-bb71-02c102131f31', 'Abeba', 'Degefu', 0, 0, 94, 1, 'AP-Staging', 'Abeba.Degefu@AP-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08b0cee7-fb9a-11ed-bb71-02c102131f31', 'Admin', 'Ap-Staging', 1, 0, 94, 1, 'AP-Staging', 'Admin@AP-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08b0d333-fb9a-11ed-bb71-02c102131f31', 'Anathole', 'Niyongana', 0, 0, 94, 1, 'AP-Staging', 'Anathole.Niyongana@AP-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08b0d44d-fb9a-11ed-bb71-02c102131f31', 'Arsema', 'Abiy', 0, 0, 94, 1, 'AP-Staging', 'Arsema.Abiy@AP-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08b0db55-fb9a-11ed-bb71-02c102131f31', 'Arsema', 'Abiy', 0, 0, 94, 1, 'AP-Staging', 'Arsema.Abiy@AP-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08b0d78e-fb9a-11ed-bb71-02c102131f31', 'Brian', 'Gatete', 0, 0, 94, 1, 'AP-Staging', 'Brian.Gatete@AP-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08b0d69d-fb9a-11ed-bb71-02c102131f31', 'Chris', 'Burton', 0, 0, 94, 1, 'AP-Staging', 'Chris.Burton@AP-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08b0d364-fb9a-11ed-bb71-02c102131f31', 'Chritsine', 'Cadeau', 0, 0, 94, 1, 'AP-Staging', 'Chritsine.Cadeau@AP-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08b0d307-fb9a-11ed-bb71-02c102131f31', 'Chritsine', 'Uwase', 1, 0, 94, 1, 'AP-Staging', 'Admin@AP-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08b0daf9-fb9a-11ed-bb71-02c102131f31', 'Kenan', 'Esubalew', 0, 0, 94, 1, 'AP-Staging', 'Kenan.Esubalew@AP-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08b0d939-fb9a-11ed-bb71-02c102131f31', 'Luke', 'James', 0, 0, 94, 1, 'AP-Staging', 'Luke.James@AP-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08b0d613-fb9a-11ed-bb71-02c102131f31', 'Mikias', 'Leweyehu', 0, 0, 94, 1, 'AP-Staging', 'Mikias.Leweyehu@AP-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08b0d8d6-fb9a-11ed-bb71-02c102131f31', 'Nshimiyimana', 'Jean', 0, 0, 94, 1, 'AP-Staging', 'Nshimiyimana.Jean@AP-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08b0cd7f-fb9a-11ed-bb71-02c102131f31', 'Samrawit', 'Tesfaye', 0, 0, 94, 1, 'AP-Staging', 'Samrawit.Tesfaye@AP-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08b0d1b4-fb9a-11ed-bb71-02c102131f31', 'Selam', 'Esheste', 0, 0, 94, 1, 'AP-Staging', 'Selam.Esheste@AP-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08b0d0ef-fb9a-11ed-bb71-02c102131f31', 'Wibit', 'Yitbarek', 0, 0, 94, 1, 'AP-Staging', 'Wibit.Yitbarek@AP-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08b0db29-fb9a-11ed-bb71-02c102131f31', 'Yaphet', 'G/Stadik', 0, 0, 94, 1, 'AP-Staging', 'Yaphet.G/Stadik@AP-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08b0d704-fb9a-11ed-bb71-02c102131f31', 'Yonatan', 'Getamesay', 0, 0, 94, 1, 'AP-Staging', 'Yonatan.Getamesay@AP-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('23c16039-fdd5-11ea-b8dc-22000ab67d3b', 'Abraham', 'Teklay', 0, 0, 96, 1, 'CCare-Staging', 'Abraham.Teklay@CCare-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('23c1bd75-fdd5-11ea-b8dc-22000ab67d3b', 'Admin', 'Ccare-Staging', 1, 0, 96, 1, 'CCare-Staging', 'Admin@CCare-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('23c1636a-fdd5-11ea-b8dc-22000ab67d3b', 'Api', 'Api', 0, 0, 96, 1, 'CCare-Staging', 'Api.Api@CCare-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('23c14d5e-fdd5-11ea-b8dc-22000ab67d3b', 'Arsema', 'Abiy', 0, 0, 96, 1, 'CCare-Staging', 'Arsema.Abiy@CCare-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('23c150c4-fdd5-11ea-b8dc-22000ab67d3b', 'Arsema', 'Abiy', 0, 0, 96, 1, 'CCare-Staging', 'Arsema.Abiy@CCare-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('23c14710-fdd5-11ea-b8dc-22000ab67d3b', 'Ashenafi', 'Dejen', 0, 0, 96, 1, 'CCare-Staging', 'Ashenafi.Dejen@CCare-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('23c12fe7-fdd5-11ea-b8dc-22000ab67d3b', 'Beakal', 'Deriba', 0, 0, 96, 1, 'CCare-Staging', 'Beakal.Deriba@CCare-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('23c1d155-fdd5-11ea-b8dc-22000ab67d3b', 'Beatriz', 'Rodriguez', 0, 0, 96, 1, 'CCare-Staging', 'Beatriz.Rodriguez@CCare-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('23c12caf-fdd5-11ea-b8dc-22000ab67d3b', 'Daniel', 'Teklehaimanot', 0, 0, 96, 1, 'CCare-Staging', 'Daniel.Teklehaimanot@CCare-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('23c20b62-fdd5-11ea-b8dc-22000ab67d3b', 'Juan', 'Ccare', 1, 0, 96, 1, 'CCare-Staging', 'Admin@CCare-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('23c1ced4-fdd5-11ea-b8dc-22000ab67d3b', 'Juan', 'Jose', 0, 0, 96, 1, 'CCare-Staging', 'Juan.Jose@CCare-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('23c2066e-fdd5-11ea-b8dc-22000ab67d3b', 'Kenean', 'Kenean', 0, 0, 96, 1, 'CCare-Staging', 'Kenean.Kenean@CCare-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('23c1ee17-fdd5-11ea-b8dc-22000ab67d3b', 'Paola', 'Beltran', 0, 0, 96, 1, 'CCare-Staging', 'Paola.Beltran@CCare-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('23c1c5c9-fdd5-11ea-b8dc-22000ab67d3b', 'Rossapiccare', 'Rossapiccare', 0, 0, 96, 1, 'CCare-Staging', 'Rossapiccare.Rossapiccare@CCare-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('23c15949-fdd5-11ea-b8dc-22000ab67d3b', 'Samrawit', 'Tesfaye', 0, 0, 96, 1, 'CCare-Staging', 'Samrawit.Tesfaye@CCare-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('23c16f4b-fdd5-11ea-b8dc-22000ab67d3b', 'Selam', 'Eshete', 0, 0, 96, 1, 'CCare-Staging', 'Selam.Eshete@CCare-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('23c132ee-fdd5-11ea-b8dc-22000ab67d3b', 'Tiblets', 'Zewde', 0, 0, 96, 1, 'CCare-Staging', 'Tiblets.Zewde@CCare-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('23c1eb56-fdd5-11ea-b8dc-22000ab67d3b', 'Yaphet', 'Abdo', 0, 0, 96, 1, 'CCare-Staging', 'Yaphet.Abdo@CCare-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('23c183d4-fdd5-11ea-b8dc-22000ab67d3b', 'Yonatan', 'Getamesay', 0, 0, 96, 1, 'CCare-Staging', 'Yonatan.Getamesay@CCare-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('723c66f0-a410-46db-8d09-28a8d6dfd44d', 'Abeba', 'Degefu', 0, 0, 97, 1, 'HarcoSemco', 'Abeba.Degefu@HarcoSemco-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3caf5561-0142-4683-a968-3bd7e8c02a9b', 'Arsema', 'Abiy', 0, 0, 97, 1, 'HarcoSemco', 'Arsema.Abiy@HarcoSemco-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3f877f7b-6cef-427c-bb4d-a5043631c11a', 'Ashenafi', 'Dejen', 0, 0, 97, 1, 'HarcoSemco', 'Ashenafi.Dejen@HarcoSemco-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('19ebf7c8-2d00-4aa1-93ef-73abfc1aeb44', 'Ashenafi', 'Dejen', 0, 0, 97, 1, 'HarcoSemco', 'Ashenafi.Dejen@HarcoSemco-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2aa70c54-2cbe-4c91-9e39-cd8c940f76ca', 'Scott', 'Sogge', 0, 0, 97, 1, 'HarcoSemco', 'Scott.Sogge@HarcoSemco-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c3c811bd-a38f-4e01-98e3-4a700210fc24', 'Wibit', 'Yitbarek', 0, 0, 97, 1, 'HarcoSemco', 'Wibit.Yitbarek@HarcoSemco-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0fa76718-0b4d-4e46-9c26-49cbf00cda90', 'Apsmartpass', 'Apsmartpass', 0, 0, 98, 1, 'UpstateNiagara', 'Apsmartpass.Apsmartpass@UpstateNiagara-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('eb470329-7809-453d-85f4-2b1b5e19e15b', 'Arsema', 'Abiy', 0, 0, 98, 1, 'UpstateNiagara', 'Arsema.Abiy@UpstateNiagara-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5d7ca1d9-5e10-47f1-a2fb-f8863ead080a', 'Biruk', 'Kenaw', 0, 0, 98, 1, 'UpstateNiagara', 'Biruk.Kenaw@UpstateNiagara-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e4dab903-abaf-480f-86ac-525d4638536d', 'Christine', 'Uwase', 0, 0, 98, 1, 'UpstateNiagara', 'Christine.Uwase@UpstateNiagara-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bd196b1-175e-11ed-ab24-0a62e852177b', 'Aklilu', 'Tesfaye', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Aklilu.Tesfaye@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bd197e6-175e-11ed-ab24-0a62e852177b', 'Arsema', 'Abiy', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Arsema.Abiy@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bd1b19a-175e-11ed-ab24-0a62e852177b', 'Arsema', 'Abiy', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Arsema.Abiy@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bd174e9-175e-11ed-ab24-0a62e852177b', 'Ashenafi', 'Dejen', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Ashenafi.Dejen@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('044998a4-9eb5-11ea-bbe9-22000a7bd097', 'Ayano', 'Hazel', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Ayano.Hazel@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bd13b16-175e-11ed-ab24-0a62e852177b', 'Beakal', 'Deriba', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Beakal.Deriba@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bd131f6-175e-11ed-ab24-0a62e852177b', 'Biruk', 'Kenaw', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Biruk.Kenaw@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bd18a1a-175e-11ed-ab24-0a62e852177b', 'Feven', 'Berehe', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Feven.Berehe@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('044a1b6a-9eb5-11ea-bbe9-22000a7bd097', 'Jean', 'Maffett', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Jean.Maffett@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0449ed01-9eb5-11ea-bbe9-22000a7bd097', 'Jeanette', 'Larsen', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Jeanette.Larsen@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('044b766e-9eb5-11ea-bbe9-22000a7bd097', 'Jeannie', 'Zaro', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Jeannie.Zaro@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bd18c9d-175e-11ed-ab24-0a62e852177b', 'Jote', 'Daniel', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Jote.Daniel@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bd1c19a-175e-11ed-ab24-0a62e852177b', 'Juan', 'Jose', 1, 0, 99, 1, 'SEHAmerica-Staging', 'Admin@SEHAmerica-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bd15701-175e-11ed-ab24-0a62e852177b', 'Kenan', 'Esubalew', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Kenan.Esubalew@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bd1d0db-175e-11ed-ab24-0a62e852177b', 'Kenean', 'Kenean', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Kenean.Kenean@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('044ba469-9eb5-11ea-bbe9-22000a7bd097', 'Meron', 'Bekele', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Meron.Bekele@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bd1a51c-175e-11ed-ab24-0a62e852177b', 'Mikias', 'Leweyehu', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Mikias.Leweyehu@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bd1df4f-175e-11ed-ab24-0a62e852177b', 'Mikias', 'Lewyehu', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Mikias.Lewyehu@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0449b63f-9eb5-11ea-bbe9-22000a7bd097', 'Cloudx', 'Integration', 0, 0, 99, 1, 'SEHAmerica-Staging', 'staging_esrossseha', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('99550f5e-aea3-11ed-8ddf-02c102131f31', 'Cloudx', 'Integration', 0, 0, 99, 1, 'SEHAmerica-Staging', 'staging_esseha', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bdbdd329-d790-11ed-a389-02c102131f31', 'Cloudx', 'Integration', 0, 0, 99, 1, 'SEHAmerica-Staging', 'staging_esseha2', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bd1cd50-175e-11ed-ab24-0a62e852177b', 'Samrawit', 'Tesfaye', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Samrawit.Tesfaye@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bd1bf50-175e-11ed-ab24-0a62e852177b', 'Admin', 'Cloudx', 1, 0, 99, 1, 'SEHAmerica-Staging', 'Admin@SEHAmerica-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('044ad269-9eb5-11ea-bbe9-22000a7bd097', 'Admin', 'Cloudx', 1, 0, 99, 1, 'SEHAmerica-Staging', 'Admin@SEHAmerica-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bd1be06-175e-11ed-ab24-0a62e852177b', 'Admin', 'Cloudx', 1, 0, 99, 1, 'SEHAmerica-Staging', 'Admin@SEHAmerica-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('044ba5e2-9eb5-11ea-bbe9-22000a7bd097', 'Admin', 'Cloudx', 1, 0, 99, 1, 'SEHAmerica-Staging', 'Admin@SEHAmerica-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bd18080-175e-11ed-ab24-0a62e852177b', 'Selam', 'Eshete', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Selam.Eshete@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bd1bcd0-175e-11ed-ab24-0a62e852177b', 'Selam', 'Eshete', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Selam.Eshete@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bd143ff-175e-11ed-ab24-0a62e852177b', 'Solomon', 'Tesfaye', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Solomon.Tesfaye@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bd19dd2-175e-11ed-ab24-0a62e852177b', 'Tiblets', 'Zewede', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Tiblets.Zewede@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bd1c402-175e-11ed-ab24-0a62e852177b', 'Wibit', 'Yitbarek', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Wibit.Yitbarek@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bd15bf3-175e-11ed-ab24-0a62e852177b', 'Wubit', 'Yitbarek', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Wubit.Yitbarek@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bd14ba8-175e-11ed-ab24-0a62e852177b', 'Yafet', 'Abdo', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Yafet.Abdo@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bd1665a-175e-11ed-ab24-0a62e852177b', 'Yonatan', 'Getamesay', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Yonatan.Getamesay@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bd16a4a-175e-11ed-ab24-0a62e852177b', 'Yonatan', 'Getamesay', 0, 0, 99, 1, 'SEHAmerica-Staging', 'Yonatan.Getamesay@SEHAmerica-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bd1374b-175e-11ed-ab24-0a62e852177b', 'Admin', 'Cloudx', 1, 0, 99, 1, 'SEHAmerica-Staging', 'Admin@SEHAmerica-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8b3f58d6-9301-4ab2-8c1b-c39ca466fca1', 'Juan', 'Jose', 1, 0, 100, 1, 'Deerland', 'Admin@Deerland-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('958770b2-52b4-4fa7-814c-8611e02f543d', 'Test', 'Test2', 0, 0, 100, 1, 'Deerland', 'Test.Test2@Deerland-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ed2b833f-c15b-4a50-b4e7-8f28981966c0', 'Admin', 'Cloudx', 1, 0, 102, 1, 'CoinStar', 'Admin@CoinStar-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9c9e37ad-7342-4511-a06b-ded5d74fce4a', 'Cloudx', 'Integration', 0, 0, 102, 1, 'CoinStar', 'escoinstar', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4eaf2ea5-2316-48a6-a97d-eba7c5bcb510', 'Selam', 'Eshete', 0, 0, 102, 1, 'CoinStar', 'Selam.Eshete@CoinStar-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('dd3c20e4-3199-4109-bd50-f5e73bebb803', 'Selam', 'Eshete', 0, 0, 102, 1, 'CoinStar', 'Selam.Eshete@CoinStar-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f8859da5-9687-438b-98bf-f744ca0c87fd', 'Selam', 'Eshete', 0, 0, 102, 1, 'CoinStar', 'Selam.Eshete@CoinStar-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c9be57cc-15ce-4859-bda6-868d79c7966f', 'Wibit', 'Yitbarek', 0, 0, 102, 1, 'CoinStar', 'Wibit.Yitbarek@CoinStar-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6e3218af-261a-41ab-ad8d-bdf0bb93da38', 'Yaphet', 'G/Stadik', 0, 0, 102, 1, 'CoinStar', 'Yaphet.G/Stadik@CoinStar-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fb6e0d69-318e-412a-a2f1-94033a4765aa', 'Alexandra', 'Esmeralda', 0, 0, 108, 1, 'SequoiaCapital', 'Alexandra.Esmeralda@SequoiaCapital-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0c7bdcce-7000-4918-9f30-c0665c128e9b', 'Bea', 'Rodriguez', 0, 0, 108, 1, 'SequoiaCapital', 'Bea.Rodriguez@SequoiaCapital-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e91be13a-b7c6-4add-966a-34c841b5db16', 'Beatriz', 'Rodriguez', 0, 0, 108, 1, 'SequoiaCapital', 'Beatriz.Rodriguez@SequoiaCapital-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0823f2dd-928e-476f-b44b-35c6174cb233', 'Dev_Test', 'Dev_Test', 0, 0, 108, 1, 'SequoiaCapital', 'Dev_Test.Dev_Test@SequoiaCapital-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f8fa6cf2-0743-4a33-bf6a-8e91084bdd99', 'Gaby', 'Portillo', 0, 0, 108, 1, 'SequoiaCapital', 'Gaby.Portillo@SequoiaCapital-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7ac4c539-b250-4baf-bdb1-66a672da6a64', 'Luis', 'Rodriguez', 0, 0, 108, 1, 'SequoiaCapital', 'Luis.Rodriguez@SequoiaCapital-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6932c324-b4ae-4c9e-baa9-1e5457f7b13b', 'Paola', 'Beltran', 0, 0, 108, 1, 'SequoiaCapital', 'Paola.Beltran@SequoiaCapital-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bab26fcf-1c44-469e-9f87-ff415006de47', 'Reinaldo', 'Cruz', 0, 0, 108, 1, 'SequoiaCapital', 'Reinaldo.Cruz@SequoiaCapital-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('829690ac-9769-4f9a-aa69-33acb535d213', 'Sandra', 'Cruz', 0, 0, 108, 1, 'SequoiaCapital', 'Sandra.Cruz@SequoiaCapital-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ff49cdac-04bd-11eb-b8dc-22000ab67d3b', 'Apsmartpass', 'Apsmartpass', 0, 0, 109, 1, 'UpstateNiagara-Staging', 'Apsmartpass.Apsmartpass@UpstateNiagara-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ff4a90e0-04bd-11eb-b8dc-22000ab67d3b', 'Buro', 'Elias', 0, 0, 109, 1, 'UpstateNiagara-Staging', 'Buro.Elias@UpstateNiagara-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ff49e1ac-04bd-11eb-b8dc-22000ab67d3b', 'Rossapiunc', 'Rossapiunc', 0, 0, 109, 1, 'UpstateNiagara-Staging', 'Rossapiunc.Rossapiunc@UpstateNiagara-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ff49f913-04bd-11eb-b8dc-22000ab67d3b', 'Samrawit', 'Tesfaye', 0, 0, 109, 1, 'UpstateNiagara-Staging', 'Samrawit.Tesfaye@UpstateNiagara-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ff4a6d1b-04bd-11eb-b8dc-22000ab67d3b', 'User', 'Approver2', 0, 0, 109, 1, 'UpstateNiagara-Staging', 'User.Approver2@UpstateNiagara-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d5d5cc3f-098f-11eb-b8dc-22000ab67d3b', 'Beatriz', 'Beltran', 0, 0, 110, 1, 'Deerland-Staging', 'Beatriz.Beltran@Deerland-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d5d6003b-098f-11eb-b8dc-22000ab67d3b', 'Juan', 'Jose', 0, 0, 110, 1, 'Deerland-Staging', 'Juan.Jose@Deerland-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d5d66302-098f-11eb-b8dc-22000ab67d3b', 'Paola', 'Rodriguez', 0, 0, 110, 1, 'Deerland-Staging', 'Paola.Rodriguez@Deerland-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d5d63949-098f-11eb-b8dc-22000ab67d3b', 'Cloudx', 'Integration', 0, 0, 110, 1, 'Deerland-Staging', 'Staging.apteandeerland', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496baa82-1228-11eb-b8dc-22000ab67d3b', 'Abeba', 'Degefu', 0, 0, 111, 1, 'DWR-Staging', 'Abeba.Degefu@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496bf9e1-1228-11eb-b8dc-22000ab67d3b', 'Abeba', 'Degefu', 0, 0, 111, 1, 'DWR-Staging', 'Abeba.Degefu@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496c00b3-1228-11eb-b8dc-22000ab67d3b', 'Abeba', 'Degefu', 0, 0, 111, 1, 'DWR-Staging', 'Abeba.Degefu@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496ab021-1228-11eb-b8dc-22000ab67d3b', 'Abraham', 'Teklay', 0, 0, 111, 1, 'DWR-Staging', 'Abraham.Teklay@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496a0573-1228-11eb-b8dc-22000ab67d3b', 'Addis', 'Getachew', 0, 0, 111, 1, 'DWR-Staging', 'Addis.Getachew@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496990a4-1228-11eb-b8dc-22000ab67d3b', 'Aklilu', 'Tesfaye', 0, 0, 111, 1, 'DWR-Staging', 'Aklilu.Tesfaye@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496abd87-1228-11eb-b8dc-22000ab67d3b', 'Alem', 'Gidey', 0, 0, 111, 1, 'DWR-Staging', 'Alem.Gidey@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496a5809-1228-11eb-b8dc-22000ab67d3b', 'Alexander', 'Michael', 0, 0, 111, 1, 'DWR-Staging', 'Alexander.Michael@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4969f9af-1228-11eb-b8dc-22000ab67d3b', 'Arsema', 'Abiy', 0, 0, 111, 1, 'DWR-Staging', 'Arsema.Abiy@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496afce0-1228-11eb-b8dc-22000ab67d3b', 'Arsema', 'Abiy', 0, 0, 111, 1, 'DWR-Staging', 'Arsema.Abiy@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496c0bbe-1228-11eb-b8dc-22000ab67d3b', 'Atnatiwos', 'Solomon', 0, 0, 111, 1, 'DWR-Staging', 'Atnatiwos.Solomon@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496adc1f-1228-11eb-b8dc-22000ab67d3b', 'Bereket', 'G/Hiwot', 0, 0, 111, 1, 'DWR-Staging', 'Bereket.G/Hiwot@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496a2a11-1228-11eb-b8dc-22000ab67d3b', 'Biruk', 'Kenaw', 0, 0, 111, 1, 'DWR-Staging', 'Biruk.Kenaw@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496aa23f-1228-11eb-b8dc-22000ab67d3b', 'Clx', 'Dwr', 0, 0, 111, 1, 'DWR-Staging', 'Clx.Dwr@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496b0fe5-1228-11eb-b8dc-22000ab67d3b', 'Admin', 'Cloudx', 1, 0, 111, 1, 'DWR-Staging', 'Admin@DWR-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496bfb9e-1228-11eb-b8dc-22000ab67d3b', 'Elshaday', 'Adamu', 0, 0, 111, 1, 'DWR-Staging', 'Elshaday.Adamu@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496bdba0-1228-11eb-b8dc-22000ab67d3b', 'Es', 'Dwr', 0, 0, 111, 1, 'DWR-Staging', 'Es.Dwr@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496ba306-1228-11eb-b8dc-22000ab67d3b', 'Eyerusalem', 'Birhane', 0, 0, 111, 1, 'DWR-Staging', 'Eyerusalem.Birhane@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496af80e-1228-11eb-b8dc-22000ab67d3b', 'Feven', 'Berhe', 0, 0, 111, 1, 'DWR-Staging', 'Feven.Berhe@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496bbc0f-1228-11eb-b8dc-22000ab67d3b', 'Hana', 'Zewede', 0, 0, 111, 1, 'DWR-Staging', 'Hana.Zewede@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496a5637-1228-11eb-b8dc-22000ab67d3b', 'Henok', 'Hailu', 0, 0, 111, 1, 'DWR-Staging', 'Henok.Hailu@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496b74f3-1228-11eb-b8dc-22000ab67d3b', 'Hoquba', 'Getahun', 0, 0, 111, 1, 'DWR-Staging', 'Hoquba.Getahun@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496ad3a8-1228-11eb-b8dc-22000ab67d3b', 'Jemila', 'Beshir', 0, 0, 111, 1, 'DWR-Staging', 'Jemila.Beshir@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496a0c12-1228-11eb-b8dc-22000ab67d3b', 'Jote', 'Daniel', 0, 0, 111, 1, 'DWR-Staging', 'Jote.Daniel@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496aae6e-1228-11eb-b8dc-22000ab67d3b', 'Kaleab', 'Tariku', 0, 0, 111, 1, 'DWR-Staging', 'Kaleab.Tariku@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496a17b9-1228-11eb-b8dc-22000ab67d3b', 'Kenan', 'Esubalewa', 0, 0, 111, 1, 'DWR-Staging', 'Kenan.Esubalewa@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496a5f56-1228-11eb-b8dc-22000ab67d3b', 'Kidist', 'Kibatu', 0, 0, 111, 1, 'DWR-Staging', 'Kidist.Kibatu@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496a285d-1228-11eb-b8dc-22000ab67d3b', 'Lilina', 'Tesfaye', 0, 0, 111, 1, 'DWR-Staging', 'Lilina.Tesfaye@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496befaf-1228-11eb-b8dc-22000ab67d3b', 'Lydia', 'Daniel', 0, 0, 111, 1, 'DWR-Staging', 'Lydia.Daniel@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496c1d6a-1228-11eb-b8dc-22000ab67d3b', 'Mahlet', 'Kornel', 0, 0, 111, 1, 'DWR-Staging', 'Mahlet.Kornel@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496a988d-1228-11eb-b8dc-22000ab67d3b', 'Mahlet', 'Tesfay', 0, 0, 111, 1, 'DWR-Staging', 'Mahlet.Tesfay@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496a4dc8-1228-11eb-b8dc-22000ab67d3b', 'Mamar', 'Sewuye', 0, 0, 111, 1, 'DWR-Staging', 'Mamar.Sewuye@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496b081e-1228-11eb-b8dc-22000ab67d3b', 'Mesay', 'Fikru', 0, 0, 111, 1, 'DWR-Staging', 'Mesay.Fikru@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496ba8e3-1228-11eb-b8dc-22000ab67d3b', 'Mikiyas', 'Tefera', 0, 0, 111, 1, 'DWR-Staging', 'Mikiyas.Tefera@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496b1324-1228-11eb-b8dc-22000ab67d3b', 'Misker', 'Tsegaye', 0, 0, 111, 1, 'DWR-Staging', 'Misker.Tsegaye@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496a8add-1228-11eb-b8dc-22000ab67d3b', 'Mussie', 'Alemu', 0, 0, 111, 1, 'DWR-Staging', 'Mussie.Alemu@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496a59c3-1228-11eb-b8dc-22000ab67d3b', 'Natnael', 'Alemayehu', 0, 0, 111, 1, 'DWR-Staging', 'Natnael.Alemayehu@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496c06b3-1228-11eb-b8dc-22000ab67d3b', 'Roman', 'Taye', 0, 0, 111, 1, 'DWR-Staging', 'Roman.Taye@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496b17e8-1228-11eb-b8dc-22000ab67d3b', 'Samr', 'Tesfaye', 0, 0, 111, 1, 'DWR-Staging', 'Samr.Tesfaye@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496b3c99-1228-11eb-b8dc-22000ab67d3b', 'Samrawit', 'Goitom', 0, 0, 111, 1, 'DWR-Staging', 'Samrawit.Goitom@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496c226a-1228-11eb-b8dc-22000ab67d3b', 'Samrawit', 'Tesfaye', 0, 0, 111, 1, 'DWR-Staging', 'Samrawit.Tesfaye@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496a6c72-1228-11eb-b8dc-22000ab67d3b', 'Samrawit', 'Yohalashet', 0, 0, 111, 1, 'DWR-Staging', 'Samrawit.Yohalashet@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496c0f3a-1228-11eb-b8dc-22000ab67d3b', 'Samrawit', 'Yohalashet', 0, 0, 111, 1, 'DWR-Staging', 'Samrawit.Yohalashet@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496b1992-1228-11eb-b8dc-22000ab67d3b', 'Senait', 'Besepa', 0, 0, 111, 1, 'DWR-Staging', 'Senait.Besepa@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496bb6b9-1228-11eb-b8dc-22000ab67d3b', 'Tamara', 'Ruel', 0, 0, 111, 1, 'DWR-Staging', 'Tamara.Ruel@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4969837b-1228-11eb-b8dc-22000ab67d3b', 'Tesfahun', 'Tsehaye', 0, 0, 111, 1, 'DWR-Staging', 'Tesfahun.Tsehaye@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496bb8ba-1228-11eb-b8dc-22000ab67d3b', 'Tibilet', 'Zewde', 0, 0, 111, 1, 'DWR-Staging', 'Tibilet.Zewde@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496a23d9-1228-11eb-b8dc-22000ab67d3b', 'Tiru', 'Mekonnen', 0, 0, 111, 1, 'DWR-Staging', 'Tiru.Mekonnen@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496b1cf3-1228-11eb-b8dc-22000ab67d3b', 'Tsedenya', 'Yohannes', 0, 0, 111, 1, 'DWR-Staging', 'Tsedenya.Yohannes@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496abbd9-1228-11eb-b8dc-22000ab67d3b', 'Wintana', 'Gebremedhin', 0, 0, 111, 1, 'DWR-Staging', 'Wintana.Gebremedhin@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496a8249-1228-11eb-b8dc-22000ab67d3b', 'Yafet', 'Abdo', 0, 0, 111, 1, 'DWR-Staging', 'Yafet.Abdo@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496addc3-1228-11eb-b8dc-22000ab67d3b', 'Yaphat', 'G\Tsadik', 0, 0, 111, 1, 'DWR-Staging', 'Yaphat.G\Tsadik@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496b599a-1228-11eb-b8dc-22000ab67d3b', 'Yaphet', 'G/Tsadik', 0, 0, 111, 1, 'DWR-Staging', 'Yaphet.G/Tsadik@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496ba174-1228-11eb-b8dc-22000ab67d3b', 'Yaphet', 'G/Tsadik', 0, 0, 111, 1, 'DWR-Staging', 'Yaphet.G/Tsadik@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496ae838-1228-11eb-b8dc-22000ab67d3b', 'Yonatan', 'Getamesay', 0, 0, 111, 1, 'DWR-Staging', 'Yonatan.Getamesay@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496bd38e-1228-11eb-b8dc-22000ab67d3b', 'Yonatan', 'Getamesay', 0, 0, 111, 1, 'DWR-Staging', 'Yonatan.Getamesay@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('496b53a2-1228-11eb-b8dc-22000ab67d3b', 'Yordanos', 'Zewde', 0, 0, 111, 1, 'DWR-Staging', 'Yordanos.Zewde@DWR-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b00c2e7c-5900-4fcc-b817-3cb698b116c0', 'Feven', 'Berhe', 0, 0, 114, 1, 'FranklinStreetBakery', 'Feven.Berhe@FranklinStreetBakery-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3eb6b76f-b4d7-11eb-9bd1-0a3b5527d91d', 'Es', 'Adimn', 0, 0, 117, 1, 'SequoiaCapital-Staging', 'Es.Adimn@SequoiaCapital-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3eb6b129-b4d7-11eb-9bd1-0a3b5527d91d', 'Samrawit', 'Tesfaye', 0, 0, 117, 1, 'SequoiaCapital-Staging', 'Samrawit.Tesfaye@SequoiaCapital-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('429a18f1-ba51-11eb-9bd1-0a3b5527d91d', 'Aklilu', 'Tesfaye', 0, 0, 120, 1, 'FranklinStreetBakery-Staging', 'Aklilu.Tesfaye@FranklinStreetBakery-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('429a10d7-ba51-11eb-9bd1-0a3b5527d91d', 'Feven', 'Berhe', 0, 0, 120, 1, 'FranklinStreetBakery-Staging', 'Feven.Berhe@FranklinStreetBakery-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('429a1d4c-ba51-11eb-9bd1-0a3b5527d91d', 'Feven', 'Berhe', 0, 0, 120, 1, 'FranklinStreetBakery-Staging', 'Feven.Berhe@FranklinStreetBakery-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('71e7f29b-4e4a-11ed-8ddf-02c102131f31', 'Aklilu', 'Tesfaye', 0, 0, 122, 1, 'CoinStar-Staging', 'Aklilu.Tesfaye@CoinStar-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83d4ef2-73db-b937-7b05-5159108474db', 'Aklilu', 'Tesfaye', 0, 0, 122, 1, 'CoinStar-Staging', 'Aklilu.Tesfaye@CoinStar-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('71e7b425-4e4a-11ed-8ddf-02c102131f31', 'Bro', 'Elias', 0, 0, 122, 1, 'CoinStar-Staging', 'Bro.Elias@CoinStar-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e08151f6-9516-150a-5cff-6467ec4a9771', 'Bro', 'Elias', 0, 0, 122, 1, 'CoinStar-Staging', 'Bro.Elias@CoinStar-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('71e7d6f9-4e4a-11ed-8ddf-02c102131f31', 'Cloudx', 'Integration', 0, 0, 122, 1, 'CoinStar-Staging', 'stagingescoinstar', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a39091ea-fafb-c4c7-5cd4-7db8b3b1e89d', 'Cloudx', 'Integration', 0, 0, 122, 1, 'CoinStar-Staging', 'prod.escoinstar', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('50c7963c-49f5-1a35-5c6c-573477a9ff86', 'Feven', 'Berhe', 0, 0, 122, 1, 'CoinStar-Staging', 'Feven.Berhe@CoinStar-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('71e7f503-4e4a-11ed-8ddf-02c102131f31', 'Feven', 'Berhe', 0, 0, 122, 1, 'CoinStar-Staging', 'Feven.Berhe@CoinStar-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('71e7c04c-4e4a-11ed-8ddf-02c102131f31', 'Mikiyas', 'Leweyehu', 0, 0, 122, 1, 'CoinStar-Staging', 'Mikiyas.Leweyehu@CoinStar-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('83789930-0ffd-079e-06bf-143ae4891235', 'Mikiyas', 'Leweyehu', 0, 0, 122, 1, 'CoinStar-Staging', 'Mikiyas.Leweyehu@CoinStar-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('31191b04-140d-b4f7-7505-cc085e6db5a4', 'Selam', 'Eshete', 0, 0, 122, 1, 'CoinStar-Staging', 'Selam.Eshete@CoinStar-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('71e7b116-4e4a-11ed-8ddf-02c102131f31', 'Selam', 'Eshete', 0, 0, 122, 1, 'CoinStar-Staging', 'Selam.Eshete@CoinStar-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('71e7fabd-4e4a-11ed-8ddf-02c102131f31', 'Selam', 'Eshete', 0, 0, 122, 1, 'CoinStar-Staging', 'Selam.Eshete@CoinStar-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e4afff77-9bb8-555e-e3fd-390d7aa36f55', 'Selam', 'Eshete', 0, 0, 122, 1, 'CoinStar-Staging', 'Selam.Eshete@CoinStar-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('39daadac-309d-998d-83c6-9e099fd04780', 'Wibit', 'Yitbarek', 0, 0, 122, 1, 'CoinStar-Staging', 'Wibit.Yitbarek@CoinStar-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('71e7f24c-4e4a-11ed-8ddf-02c102131f31', 'Wibit', 'Yitbarek', 0, 0, 122, 1, 'CoinStar-Staging', 'Wibit.Yitbarek@CoinStar-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('49ab9312-efe1-cec8-b644-21cea6d2ea5e', 'Wubit', 'Yitbarek', 0, 0, 122, 1, 'CoinStar-Staging', 'Wubit.Yitbarek@CoinStar-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('71e79e51-4e4a-11ed-8ddf-02c102131f31', 'Wubit', 'Yitbarek', 0, 0, 122, 1, 'CoinStar-Staging', 'Wubit.Yitbarek@CoinStar-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1c0817c4-3d7c-c25e-9971-25a9fb7cb803', 'Yaphet', 'G/Stadik', 0, 0, 122, 1, 'CoinStar-Staging', 'Yaphet.G/Stadik@CoinStar-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('71e7926d-4e4a-11ed-8ddf-02c102131f31', 'Yaphet', 'G/Stadik', 0, 0, 122, 1, 'CoinStar-Staging', 'Yaphet.G/Stadik@CoinStar-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('71e7be31-4e4a-11ed-8ddf-02c102131f31', 'Yaphet', 'G/Stadik', 0, 0, 122, 1, 'CoinStar-Staging', 'Yaphet.G/Stadik@CoinStar-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('dce79110-5240-f52d-68fb-edb49e4f9aed', 'Yaphet', 'G/Stadik', 0, 0, 122, 1, 'CoinStar-Staging', 'Yaphet.G/Stadik@CoinStar-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d80fbc-f55a-11eb-8402-0a3b5527d91d', 'Abeba', 'Degefu', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Abeba.Degefu@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d90d64-f55a-11eb-8402-0a3b5527d91d', 'Abeba', 'Degefu', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Abeba.Degefu@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d8842d-f55a-11eb-8402-0a3b5527d91d', 'Arsema', 'Abiy', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Arsema.Abiy@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d88af9-f55a-11eb-8402-0a3b5527d91d', 'Arsema', 'Abiy', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Arsema.Abiy@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a7ba2672-c197-11ee-93ed-0224fc0bdc19', 'Ashenafi', 'Dejen', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Ashenafi.Dejen@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a7b6ea8a-c197-11ee-93ed-0224fc0bdc19', 'Beakal', 'Deribe', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Beakal.Deribe@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d81323-f55a-11eb-8402-0a3b5527d91d', 'Betelehem', 'Mesfine', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Betelehem.Mesfine@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d7ed05-f55a-11eb-8402-0a3b5527d91d', 'Biruk', 'Kenaw', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Biruk.Kenaw@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d81186-f55a-11eb-8402-0a3b5527d91d', 'Biruk', 'Kenaw', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Biruk.Kenaw@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d8fec8-f55a-11eb-8402-0a3b5527d91d', 'Bro', 'Elias', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Bro.Elias@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d901b8-f55a-11eb-8402-0a3b5527d91d', 'Bro', 'Elias', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Bro.Elias@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d887b8-f55a-11eb-8402-0a3b5527d91d', 'Eshardy', 'Eshardy', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Eshardy.Eshardy@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d90494-f55a-11eb-8402-0a3b5527d91d', 'Feven', 'Berhe', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Feven.Berhe@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d90ed9-f55a-11eb-8402-0a3b5527d91d', 'Feven', 'Berhe', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Feven.Berhe@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d885eb-f55a-11eb-8402-0a3b5527d91d', 'Hardyapp', 'Hardy', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Hardyapp.Hardy@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d913ff-f55a-11eb-8402-0a3b5527d91d', 'Jote', 'Daniel', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Jote.Daniel@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d88a10-f55a-11eb-8402-0a3b5527d91d', 'Juan', 'Jose', 1, 0, 126, 1, 'HardyDiagnostics-Staging', 'Admin@HardyDiagnostics-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d9e65de6-f55d-11eb-8402-0a3b5527d91d', 'Juan', 'Jose', 1, 0, 126, 1, 'HardyDiagnostics-Staging', 'Admin@HardyDiagnostics-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d914a9-f55a-11eb-8402-0a3b5527d91d', 'Kenan', 'Esubalew', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Kenan.Esubalew@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d9112a-f55a-11eb-8402-0a3b5527d91d', 'Kenean', 'Esubalew', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Kenean.Esubalew@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a7b5ac65-c197-11ee-93ed-0224fc0bdc19', 'Meron', 'Agegew', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Meron.Agegew@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d81616-f55a-11eb-8402-0a3b5527d91d', 'Mikias', 'Leweyehu', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Mikias.Leweyehu@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d89125-f55a-11eb-8402-0a3b5527d91d', 'Mikias', 'Leweyehu', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Mikias.Leweyehu@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d884e9-f55a-11eb-8402-0a3b5527d91d', 'Misker', 'Tesgaye', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Misker.Tesgaye@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d818be-f55a-11eb-8402-0a3b5527d91d', 'Natanoy', 'Getamesay', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Natanoy.Getamesay@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d84b05-f55a-11eb-8402-0a3b5527d91d', 'Samrawit', 'Goitom', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Samrawit.Goitom@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d88f9d-f55a-11eb-8402-0a3b5527d91d', 'Samrawit', 'Tesfaye', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Samrawit.Tesfaye@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d9054f-f55a-11eb-8402-0a3b5527d91d', 'Samrawit', 'Tesfaye', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Samrawit.Tesfaye@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d87fae-f55a-11eb-8402-0a3b5527d91d', 'Selam', 'Eshet', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Selam.Eshet@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d80c98-f55a-11eb-8402-0a3b5527d91d', 'Solomon', 'Tesfaye', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Solomon.Tesfaye@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a7b9c067-c197-11ee-93ed-0224fc0bdc19', 'Test', 'Approver', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Test.Approver@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d912af-f55a-11eb-8402-0a3b5527d91d', 'Tibilets', 'Zewde', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Tibilets.Zewde@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a7b63e2c-c197-11ee-93ed-0224fc0bdc19', 'Tsion', 'Habtamu', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Tsion.Habtamu@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d88eaa-f55a-11eb-8402-0a3b5527d91d', 'Wibit', 'Yitbarek', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Wibit.Yitbarek@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d81553-f55a-11eb-8402-0a3b5527d91d', 'Yafet', 'Abdo', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Yafet.Abdo@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d8ff8a-f55a-11eb-8402-0a3b5527d91d', 'Yonatan', 'Getamesay', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Yonatan.Getamesay@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d86710-f55a-11eb-8402-0a3b5527d91d', 'Yonathan', 'Tedla', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Yonathan.Tedla@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d810ab-f55a-11eb-8402-0a3b5527d91d', 'Yordanos', 'Zewde', 0, 0, 126, 1, 'HardyDiagnostics-Staging', 'Yordanos.Zewde@HardyDiagnostics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2d68a860-ff6c-11eb-8402-0a3b5527d91d', 'Aklilu', 'Aklilu', 0, 0, 127, 1, 'RGBarry-Staging', 'Aklilu.Aklilu@RGBarry-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2d689f46-ff6c-11eb-8402-0a3b5527d91d', 'Arsema', 'Abiy', 0, 0, 127, 1, 'RGBarry-Staging', 'Arsema.Abiy@RGBarry-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2d68c748-ff6c-11eb-8402-0a3b5527d91d', 'Ashenafi', 'Dejen', 0, 0, 127, 1, 'RGBarry-Staging', 'Ashenafi.Dejen@RGBarry-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2d68af8a-ff6c-11eb-8402-0a3b5527d91d', 'Kenean', 'Esubalew', 0, 0, 127, 1, 'RGBarry-Staging', 'Kenean.Esubalew@RGBarry-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2d688c1b-ff6c-11eb-8402-0a3b5527d91d', 'Rgvendor', 'Rgvendor', 0, 0, 127, 1, 'RGBarry-Staging', 'Rgvendor.Rgvendor@RGBarry-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2d68d506-ff6c-11eb-8402-0a3b5527d91d', 'Samrawit', 'Tesfaye', 0, 0, 127, 1, 'RGBarry-Staging', 'Samrawit.Tesfaye@RGBarry-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2d690293-ff6c-11eb-8402-0a3b5527d91d', 'Selam', 'Eshete', 0, 0, 127, 1, 'RGBarry-Staging', 'Selam.Eshete@RGBarry-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2d68ed49-ff6c-11eb-8402-0a3b5527d91d', 'Solomon', 'Tesfaye', 0, 0, 127, 1, 'RGBarry-Staging', 'Solomon.Tesfaye@RGBarry-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2d68c2b5-ff6c-11eb-8402-0a3b5527d91d', 'Wibit', 'Yitbarek', 0, 0, 127, 1, 'RGBarry-Staging', 'Wibit.Yitbarek@RGBarry-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2d68b7f3-ff6c-11eb-8402-0a3b5527d91d', 'Wubit', 'Yitbarek', 0, 0, 127, 1, 'RGBarry-Staging', 'Wubit.Yitbarek@RGBarry-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2d68c07b-ff6c-11eb-8402-0a3b5527d91d', 'Yafet', 'Abdo', 0, 0, 127, 1, 'RGBarry-Staging', 'Yafet.Abdo@RGBarry-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2d68e71d-ff6c-11eb-8402-0a3b5527d91d', 'Yonatan', 'Getamesay', 0, 0, 127, 1, 'RGBarry-Staging', 'Yonatan.Getamesay@RGBarry-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('daf41ea5-3655-42ff-8651-9e82647a00c2', 'Arsema', 'Abiy', 0, 0, 128, 1, 'SummitAutomotive', 'Arsema.Abiy@SummitAutomotive-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('72332e88-95ab-49ef-acb8-8ba656bbadfd', 'Ashenafi', 'Dejen', 0, 0, 128, 1, 'SummitAutomotive', 'Ashenafi.Dejen@SummitAutomotive-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8446bf94-89a8-43e5-8930-7f61a2bda23c', 'Ashenafi', 'Dejen', 0, 0, 128, 1, 'SummitAutomotive', 'Ashenafi.Dejen@SummitAutomotive-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b197f501-88be-461c-b5f7-b8eb56f6841b', 'Beakal', 'Deribe', 0, 0, 128, 1, 'SummitAutomotive', 'Beakal.Deribe@SummitAutomotive-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f0a32467-ba0a-4571-b713-b1016b402f18', 'Bro', 'Elias', 0, 0, 128, 1, 'SummitAutomotive', 'Bro.Elias@SummitAutomotive-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9f28f0b7-2313-44b8-8358-3f9609dc5cff', 'Kal', 'Kal', 0, 0, 128, 1, 'SummitAutomotive', 'Kal.Kal@SummitAutomotive-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('40d0471f-0cd5-404a-96e0-be16682afc8f', 'Selam', 'Amare', 0, 0, 128, 1, 'SummitAutomotive', 'Selam.Amare@SummitAutomotive-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ddc40b53-7bea-44a6-9793-20c36e208138', 'Selam', 'Amare', 0, 0, 128, 1, 'SummitAutomotive', 'Selam.Amare@SummitAutomotive-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e29e2a27-1474-481f-a646-2f3a1a4cf7e6', 'Tester', 'Cloudx', 0, 0, 128, 1, 'SummitAutomotive', 'Tester.Cloudx@SummitAutomotive-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ae536db7-7c8f-47a6-a0ea-3d8344db1998', 'Yaphet', 'G/Stadik', 0, 0, 128, 1, 'SummitAutomotive', 'Yaphet.G/Stadik@SummitAutomotive-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b68964b6-84de-4a19-80e1-c74862163474', 'Yonatan', 'Getamesay', 0, 0, 128, 1, 'SummitAutomotive', 'Yonatan.Getamesay@SummitAutomotive-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ed705a0c-36af-46f5-8504-5a0c105f9ae5', 'Yonatan', 'Getamesay', 0, 0, 128, 1, 'SummitAutomotive', 'Yonatan.Getamesay@SummitAutomotive-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('40a2fd1f-4a61-46d1-99c7-c3c268b373ee', 'Yonathan', 'Tedla', 0, 0, 129, 1, 'GrandeRonde', 'Yonathan.Tedla@GrandeRonde-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fde573d0-fcd1-4ad5-8f2b-c5b56c9e6fe3', 'Yonathan', 'Cloudx', 0, 0, 130, 1, 'FermanAuto', 'Yonathan.Cloudx@FermanAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b4ab9b3e-ed2b-417f-baec-8d63dbf65b16', 'Abeba', 'Degefu', 0, 0, 132, 1, 'KeyAuto', 'Abeba.Degefu@KeyAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e53d6898-9249-11ec-b1f1-0a3b5527d91d', 'Abeba', 'Degefu', 0, 0, 135, 1, 'KeyAuto-Staging', 'Abeba.Degefu@KeyAuto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e53d6f9c-9249-11ec-b1f1-0a3b5527d91d', 'Admin', 'Keyauto-Staging', 1, 0, 135, 1, 'KeyAuto-Staging', 'Admin@KeyAuto-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e53d69fe-9249-11ec-b1f1-0a3b5527d91d', 'Feven', 'Berhe', 0, 0, 135, 1, 'KeyAuto-Staging', 'Feven.Berhe@KeyAuto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e53d6d29-9249-11ec-b1f1-0a3b5527d91d', 'Mikiyas', 'Leweyehu', 0, 0, 135, 1, 'KeyAuto-Staging', 'Mikiyas.Leweyehu@KeyAuto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e53d70be-9249-11ec-b1f1-0a3b5527d91d', 'Wubit', 'Yitbarek', 0, 0, 135, 1, 'KeyAuto-Staging', 'Wubit.Yitbarek@KeyAuto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51db2aba-e078-11ed-bb71-02c102131f31', 'Abeba', 'Degefu', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Abeba.Degefu@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dc80e3-e078-11ed-bb71-02c102131f31', 'Abeba', 'Degefu', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Abeba.Degefu@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51da930e-e078-11ed-bb71-02c102131f31', 'Abel', 'Kenaw', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Abel.Kenaw@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51da494c-e078-11ed-bb71-02c102131f31', 'Abel', 'Kenaw', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Abel.Kenaw@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51d90745-e078-11ed-bb71-02c102131f31', 'Abraham', 'Teklay', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Abraham.Teklay@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dd9e34-e078-11ed-bb71-02c102131f31', 'Addis', 'Getachew', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Addis.Getachew@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51db2a76-e078-11ed-bb71-02c102131f31', 'Admin', 'Kettlecuisine-Staging', 1, 0, 138, 1, 'KettleCuisine-Staging', 'Admin@KettleCuisine-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dc78bd-e078-11ed-bb71-02c102131f31', 'Aklilu', 'Tesfaye', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Aklilu.Tesfaye@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dbc165-e078-11ed-bb71-02c102131f31', 'Alem', 'Gidey', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Alem.Gidey@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dc0b59-e078-11ed-bb71-02c102131f31', 'Anathole', 'Niyongana', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Anathole.Niyongana@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51d935b3-e078-11ed-bb71-02c102131f31', 'Arsema', 'Abiy', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Arsema.Abiy@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dc2a8b-e078-11ed-bb71-02c102131f31', 'Arsema', 'Abiy', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Arsema.Abiy@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51da83f3-e078-11ed-bb71-02c102131f31', 'Ashenafi', 'Dejen', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Ashenafi.Dejen@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51db3275-e078-11ed-bb71-02c102131f31', 'Ashenafi', 'Dejen', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Ashenafi.Dejen@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dd9494-e078-11ed-bb71-02c102131f31', 'Ashenafi', 'Dejen', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Ashenafi.Dejen@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dd00b8-e078-11ed-bb71-02c102131f31', 'Ashenafi', 'Dejen', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Ashenafi.Dejen@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dcb2af-e078-11ed-bb71-02c102131f31', 'Atnatiwos', 'Solomon', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Atnatiwos.Solomon@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51d94a09-e078-11ed-bb71-02c102131f31', 'Bakal', 'Deriba', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Bakal.Deriba@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dc7e4c-e078-11ed-bb71-02c102131f31', 'Beakal', 'Deriba', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Beakal.Deriba@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dc0d52-e078-11ed-bb71-02c102131f31', 'Bereket', 'G/Hiwot', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Bereket.G/Hiwot@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51da4adb-e078-11ed-bb71-02c102131f31', 'Bezawit', 'Lewoyehu', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Bezawit.Lewoyehu@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51d8f8fd-e078-11ed-bb71-02c102131f31', 'Biruk', 'Kenaw', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Biruk.Kenaw@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51da9db1-e078-11ed-bb71-02c102131f31', 'Brian', 'Gatete', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Brian.Gatete@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dbe05c-e078-11ed-bb71-02c102131f31', 'Bro', 'Elias', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Bro.Elias@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dca45f-e078-11ed-bb71-02c102131f31', 'Bro', 'Elias', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Bro.Elias@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51d920ae-e078-11ed-bb71-02c102131f31', 'Christine', 'Uwase', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Christine.Uwase@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51d9ab9a-e078-11ed-bb71-02c102131f31', 'Elshaday', 'Adamu', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Elshaday.Adamu@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51db9614-e078-11ed-bb71-02c102131f31', 'Elshaday', 'Adamu', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Elshaday.Adamu@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dd2af0-e078-11ed-bb71-02c102131f31', 'Es', 'Kettle', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Es.Kettle@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dd1fe9-e078-11ed-bb71-02c102131f31', 'Feven', 'Berhe', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Feven.Berhe@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51db411c-e078-11ed-bb71-02c102131f31', 'Girum', 'Tesfaye', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Girum.Tesfaye@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dcf0da-e078-11ed-bb71-02c102131f31', 'Hana', 'Zewede', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Hana.Zewede@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51d95abb-e078-11ed-bb71-02c102131f31', 'Henok', 'Hailu', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Henok.Hailu@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dc9c05-e078-11ed-bb71-02c102131f31', 'Jote', 'Daniel', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Jote.Daniel@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dbac64-e078-11ed-bb71-02c102131f31', 'Juan', 'Jose', 1, 0, 138, 1, 'KettleCuisine-Staging', 'Admin@KettleCuisine-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dbceb2-e078-11ed-bb71-02c102131f31', 'Admin', 'Cloudx', 1, 0, 138, 1, 'KettleCuisine-Staging', 'Admin@KettleCuisine-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c7fe2edf-b765-11ec-a1cc-0a6af28071bd', 'Admin', 'Cloudx', 1, 0, 138, 1, 'KettleCuisine-Staging', 'Admin@KettleCuisine-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dce514-e078-11ed-bb71-02c102131f31', 'Kaleab', 'Tariku', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Kaleab.Tariku@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dc302f-e078-11ed-bb71-02c102131f31', 'Kenean', 'Esubalew', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Kenean.Esubalew@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d3351460-19cc-11ee-8962-02c102131f31', 'Kettle', 'Kettle', 1, 0, 138, 1, 'KettleCuisine-Staging', 'Admin@KettleCuisine-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51d9c456-e078-11ed-bb71-02c102131f31', 'Kidist', 'Kibatu', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Kidist.Kibatu@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dd8eee-e078-11ed-bb71-02c102131f31', 'Mahlet', 'Bekele', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Mahlet.Bekele@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51d94d2c-e078-11ed-bb71-02c102131f31', 'Mahlet', 'Tesfay', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Mahlet.Tesfay@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dcd376-e078-11ed-bb71-02c102131f31', 'Mahlet', 'Tesfay', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Mahlet.Tesfay@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51d9ea0a-e078-11ed-bb71-02c102131f31', 'Mamar', 'Sewuye', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Mamar.Sewuye@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dd476f-e078-11ed-bb71-02c102131f31', 'Mamar', 'Sewuye', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Mamar.Sewuye@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51db7b6e-e078-11ed-bb71-02c102131f31', 'Melat', 'Mitiku', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Melat.Mitiku@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dd3d81-e078-11ed-bb71-02c102131f31', 'Mesay', 'Fikru', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Mesay.Fikru@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51da4e05-e078-11ed-bb71-02c102131f31', 'Mikias', 'Leweyehu', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Mikias.Leweyehu@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51daf583-e078-11ed-bb71-02c102131f31', 'Mikias', 'Leweyehu', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Mikias.Leweyehu@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51da60a7-e078-11ed-bb71-02c102131f31', 'Mikiyas', 'Tefera', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Mikiyas.Tefera@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51d9e485-e078-11ed-bb71-02c102131f31', 'Milaaa', 'Mila', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Milaaa.Mila@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51d937e0-e078-11ed-bb71-02c102131f31', 'Misker', 'Tsegaye', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Misker.Tsegaye@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dc1756-e078-11ed-bb71-02c102131f31', 'Nani', 'Legesse', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Nani.Legesse@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dcafa2-e078-11ed-bb71-02c102131f31', 'Natnael', 'Alemayehu', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Natnael.Alemayehu@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dd3033-e078-11ed-bb71-02c102131f31', 'Nshimiyimana', 'Bosco', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Nshimiyimana.Bosco@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51d95029-e078-11ed-bb71-02c102131f31', 'Osman', 'Amare F', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Osman.Amare F@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51ddaf49-e078-11ed-bb71-02c102131f31', 'Raey', 'Yohannes', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Raey.Yohannes@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51ddb2a4-e078-11ed-bb71-02c102131f31', 'Samrawit', 'Goitom', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Samrawit.Goitom@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51da4eca-e078-11ed-bb71-02c102131f31', 'Samrawit', 'Tesfaye', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Samrawit.Tesfaye@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51d900eb-e078-11ed-bb71-02c102131f31', 'Samrawit', 'Yohalashet', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Samrawit.Yohalashet@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dd5f3d-e078-11ed-bb71-02c102131f31', 'Seble', 'Sisay', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Seble.Sisay@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51da9a3f-e078-11ed-bb71-02c102131f31', 'Selam', 'Eshete', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Selam.Eshete@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dc21c0-e078-11ed-bb71-02c102131f31', 'Selam', 'Selam', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Selam.Selam@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51d9774f-e078-11ed-bb71-02c102131f31', 'Senait', 'Besepa', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Senait.Besepa@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dd424d-e078-11ed-bb71-02c102131f31', 'Solomon', 'Tesfaye', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Solomon.Tesfaye@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dd525e-e078-11ed-bb71-02c102131f31', 'Tamara', 'Ruel', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Tamara.Ruel@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51ddad9f-e078-11ed-bb71-02c102131f31', 'Tamara', 'Ruel', 1, 0, 138, 1, 'KettleCuisine-Staging', 'Admin@KettleCuisine-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51db8e88-e078-11ed-bb71-02c102131f31', 'Tariku', 'Hode', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Tariku.Hode@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51d8f429-e078-11ed-bb71-02c102131f31', 'Tesfahun', 'Tsehaye', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Tesfahun.Tsehaye@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51d990a2-e078-11ed-bb71-02c102131f31', 'Tiblets', 'Zewde', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Tiblets.Zewde@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51da705d-e078-11ed-bb71-02c102131f31', 'Tiruwork', 'Mekonnen', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Tiruwork.Mekonnen@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dd95dd-e078-11ed-bb71-02c102131f31', 'Tsedenya', 'Yohannes', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Tsedenya.Yohannes@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dc5f5c-e078-11ed-bb71-02c102131f31', 'Wibit', 'Yitbarek', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Wibit.Yitbarek@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dbbef6-e078-11ed-bb71-02c102131f31', 'Wintana', 'Gebremedhin', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Wintana.Gebremedhin@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dd4734-e078-11ed-bb71-02c102131f31', 'Wubit', 'Yitbarek', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Wubit.Yitbarek@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dd0993-e078-11ed-bb71-02c102131f31', 'Yafet', 'Abdo', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Yafet.Abdo@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dd82b1-e078-11ed-bb71-02c102131f31', 'Yafet', 'Abdo', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Yafet.Abdo@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51ddbce6-e078-11ed-bb71-02c102131f31', 'Yafet', 'Abdo', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Yafet.Abdo@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51daf25d-e078-11ed-bb71-02c102131f31', 'Yaphet', 'Abdo', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Yaphet.Abdo@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51da313e-e078-11ed-bb71-02c102131f31', 'Yaphet', 'G/Tsadik', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Yaphet.G/Tsadik@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51d9168a-e078-11ed-bb71-02c102131f31', 'Yonatan', 'Getamesay', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Yonatan.Getamesay@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51d9e7b1-e078-11ed-bb71-02c102131f31', 'Yonatan', 'Getamesay', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Yonatan.Getamesay@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51d98e38-e078-11ed-bb71-02c102131f31', 'Yonathan', 'Tedla', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Yonathan.Tedla@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51dcba41-e078-11ed-bb71-02c102131f31', 'Yonathan', 'Tedla', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Yonathan.Tedla@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('51d921e0-e078-11ed-bb71-02c102131f31', 'Yordanos', 'Zewde', 0, 0, 138, 1, 'KettleCuisine-Staging', 'Yordanos.Zewde@KettleCuisine-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ba755d2e-aa39-48e7-876b-fbcf81e3be59', 'Yonatan', 'Getamesay', 0, 0, 140, 1, 'MurphyAuto', 'Yonatan.Getamesay@MurphyAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f236c522-4735-4844-8895-d73d3467f1d9', 'Bro', 'Elias', 0, 0, 141, 1, 'FermanMotor', 'Bro.Elias@FermanMotor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad369e-f2f8-11ec-ab24-0a62e852177b', 'Abeba', 'Degefu', 0, 0, 143, 1, 'H&HCSV', 'Abeba.Degefu@H&HCSV-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7acf66d-f2f8-11ec-ab24-0a62e852177b', 'Abraham', 'Teklay', 0, 0, 143, 1, 'H&HCSV', 'Abraham.Teklay@H&HCSV-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7acf9c6-f2f8-11ec-ab24-0a62e852177b', 'Admin', 'H&Hcsv', 1, 0, 143, 1, 'H&HCSV', 'Admin@H&HCSV-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7acf823-f2f8-11ec-ab24-0a62e852177b', 'Aklilu', 'Tesfaye', 0, 0, 143, 1, 'H&HCSV', 'Aklilu.Tesfaye@H&HCSV-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad016c-f2f8-11ec-ab24-0a62e852177b', 'Alexander', 'Michael', 0, 0, 143, 1, 'H&HCSV', 'Alexander.Michael@H&HCSV-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7adbd7e-f2f8-11ec-ab24-0a62e852177b', 'Arsema', 'Abiy', 0, 0, 143, 1, 'H&HCSV', 'Arsema.Abiy@H&HCSV-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad46a9-f2f8-11ec-ab24-0a62e852177b', 'Biruk', 'Kenaw', 0, 0, 143, 1, 'H&HCSV', 'Biruk.Kenaw@H&HCSV-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7aced9e-f2f8-11ec-ab24-0a62e852177b', 'Chris', 'Handh', 0, 0, 143, 1, 'H&HCSV', 'Chris.Handh@H&HCSV-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad3962-f2f8-11ec-ab24-0a62e852177b', 'Chritsine', 'Uwase', 0, 0, 143, 1, 'H&HCSV', 'Chritsine.Uwase@H&HCSV-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7adae48-f2f8-11ec-ab24-0a62e852177b', 'Feven', 'Berhe', 0, 0, 143, 1, 'H&HCSV', 'Feven.Berhe@H&HCSV-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad4ec9-f2f8-11ec-ab24-0a62e852177b', 'Hana', 'Zewde', 0, 0, 143, 1, 'H&HCSV', 'Hana.Zewde@H&HCSV-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad81b1-f2f8-11ec-ab24-0a62e852177b', 'Kaleab', 'Weldegebrial', 0, 0, 143, 1, 'H&HCSV', 'Kaleab.Weldegebrial@H&HCSV-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad6486-f2f8-11ec-ab24-0a62e852177b', 'Mahlet', 'Tesfay', 0, 0, 143, 1, 'H&HCSV', 'Mahlet.Tesfay@H&HCSV-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7adbe4f-f2f8-11ec-ab24-0a62e852177b', 'Samrawit', 'Goitom', 0, 0, 143, 1, 'H&HCSV', 'Samrawit.Goitom@H&HCSV-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad7dfe-f2f8-11ec-ab24-0a62e852177b', 'Samrawit', 'Tesfaye', 0, 0, 143, 1, 'H&HCSV', 'Samrawit.Tesfaye@H&HCSV-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ada262-f2f8-11ec-ab24-0a62e852177b', 'Samrawit', 'Yohalashet', 0, 0, 143, 1, 'H&HCSV', 'Samrawit.Yohalashet@H&HCSV-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad6bea-f2f8-11ec-ab24-0a62e852177b', 'Seble', 'Sisay', 0, 0, 143, 1, 'H&HCSV', 'Seble.Sisay@H&HCSV-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7adb871-f2f8-11ec-ab24-0a62e852177b', 'Senait', 'Besepa', 0, 0, 143, 1, 'H&HCSV', 'Senait.Besepa@H&HCSV-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7acf014-f2f8-11ec-ab24-0a62e852177b', 'Wintana', 'Gebremedhin', 0, 0, 143, 1, 'H&HCSV', 'Wintana.Gebremedhin@H&HCSV-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad5ea5-f2f8-11ec-ab24-0a62e852177b', 'Yafet', 'Abdo', 0, 0, 143, 1, 'H&HCSV', 'Yafet.Abdo@H&HCSV-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad693a-f2f8-11ec-ab24-0a62e852177b', 'Yonatan', 'Getamesay', 0, 0, 143, 1, 'H&HCSV', 'Yonatan.Getamesay@H&HCSV-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7acfd6e-f2f8-11ec-ab24-0a62e852177b', 'Yonathan', 'Tedla', 0, 0, 143, 1, 'H&HCSV', 'Yonathan.Tedla@H&HCSV-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad24f1-f2f8-11ec-ab24-0a62e852177b', 'Yordanos', 'Zewde', 0, 0, 143, 1, 'H&HCSV', 'Yordanos.Zewde@H&HCSV-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b5b90e61-3271-11ed-ab24-0a62e852177b', 'Aklilu', 'Tesfaye', 0, 0, 154, 1, 'FranklinStreetBakery-Staging', 'Aklilu.Tesfaye@FranklinStreetBakery-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b5b8e682-3271-11ed-ab24-0a62e852177b', 'Feven', 'Berhe', 0, 0, 154, 1, 'FranklinStreetBakery-Staging', 'Feven.Berhe@FranklinStreetBakery-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b5b921a1-3271-11ed-ab24-0a62e852177b', 'Feven', 'Berhe', 0, 0, 154, 1, 'FranklinStreetBakery-Staging', 'Feven.Berhe@FranklinStreetBakery-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b5b942a0-3271-11ed-ab24-0a62e852177b', 'Solomon', 'Tesfaye', 0, 0, 154, 1, 'FranklinStreetBakery-Staging', 'Solomon.Tesfaye@FranklinStreetBakery-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b5b8f43f-3271-11ed-ab24-0a62e852177b', 'Wibit', 'Yitbarek', 0, 0, 154, 1, 'FranklinStreetBakery-Staging', 'Wibit.Yitbarek@FranklinStreetBakery-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e6d6735f-4577-11ed-8ddf-02c102131f31', 'Abraham', 'Teklay', 0, 0, 155, 1, 'Acacia-Staging', 'Abraham.Teklay@Acacia-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e6d66a2f-4577-11ed-8ddf-02c102131f31', 'Admin', 'Acacia-Staging', 1, 0, 155, 1, 'Acacia-Staging', 'Admin@Acacia-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c26afd02-40c3-11ed-8087-02c102131f31', 'Admin', 'Acacia-Staging', 1, 0, 155, 1, 'Acacia-Staging', 'Admin@Acacia-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e6d68182-4577-11ed-8ddf-02c102131f31', 'Alem', 'Gidey', 0, 0, 155, 1, 'Acacia-Staging', 'Alem.Gidey@Acacia-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e6d66f46-4577-11ed-8ddf-02c102131f31', 'Bereket', 'G/Hiwot', 0, 0, 155, 1, 'Acacia-Staging', 'Bereket.G/Hiwot@Acacia-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e6d67651-4577-11ed-8ddf-02c102131f31', 'Bezawit', 'Leweyehu', 0, 0, 155, 1, 'Acacia-Staging', 'Bezawit.Leweyehu@Acacia-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e6d679ac-4577-11ed-8ddf-02c102131f31', 'Feven', 'Berhe', 0, 0, 155, 1, 'Acacia-Staging', 'Feven.Berhe@Acacia-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e6d67d4d-4577-11ed-8ddf-02c102131f31', 'Feven', 'Berhe', 0, 0, 155, 1, 'Acacia-Staging', 'Feven.Berhe@Acacia-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e6d67db0-4577-11ed-8ddf-02c102131f31', 'Gega', 'Acacia', 0, 0, 155, 1, 'Acacia-Staging', 'Gega.Acacia@Acacia-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e6d67511-4577-11ed-8ddf-02c102131f31', 'Jote', 'Daniel', 0, 0, 155, 1, 'Acacia-Staging', 'Jote.Daniel@Acacia-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e6d663fa-4577-11ed-8ddf-02c102131f31', 'Mahlet', 'Tesfay', 0, 0, 155, 1, 'Acacia-Staging', 'Mahlet.Tesfay@Acacia-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e6d67498-4577-11ed-8ddf-02c102131f31', 'Samrawit', 'Goitom', 0, 0, 155, 1, 'Acacia-Staging', 'Samrawit.Goitom@Acacia-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e6d666c9-4577-11ed-8ddf-02c102131f31', 'Samrawit', 'Yohalashet', 0, 0, 155, 1, 'Acacia-Staging', 'Samrawit.Yohalashet@Acacia-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e6d6647e-4577-11ed-8ddf-02c102131f31', 'Solomon', 'Tesfaye', 0, 0, 155, 1, 'Acacia-Staging', 'Solomon.Tesfaye@Acacia-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e6d6671c-4577-11ed-8ddf-02c102131f31', 'Tesfahun', 'Tsehaye', 0, 0, 155, 1, 'Acacia-Staging', 'Tesfahun.Tsehaye@Acacia-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e6d66e31-4577-11ed-8ddf-02c102131f31', 'Test', 'User', 0, 0, 155, 1, 'Acacia-Staging', 'Test.User@Acacia-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e6d673d8-4577-11ed-8ddf-02c102131f31', 'Thomasmezmur1@Gmail.Com', 'Thomasmezmur1@Gmail.Com', 0, 0, 155, 1, 'Acacia-Staging', 'Thomasmezmur1@Gmail.Com.Thomasmezmur1@Gmail.Com@Acacia-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e6d67972-4577-11ed-8ddf-02c102131f31', 'Wibit', 'Yitbarek', 0, 0, 155, 1, 'Acacia-Staging', 'Wibit.Yitbarek@Acacia-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e6d66da2-4577-11ed-8ddf-02c102131f31', 'Yafet', 'Abdo', 0, 0, 155, 1, 'Acacia-Staging', 'Yafet.Abdo@Acacia-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e6d664ce-4577-11ed-8ddf-02c102131f31', 'Yaphet', 'G/Stadik', 0, 0, 155, 1, 'Acacia-Staging', 'Yaphet.G/Stadik@Acacia-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e6d675d9-4577-11ed-8ddf-02c102131f31', 'Yaphet', 'G/Stadik', 0, 0, 155, 1, 'Acacia-Staging', 'Yaphet.G/Stadik@Acacia-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4d7855ff-ad37-4553-be87-26895501db08', 'Admin', 'Murphyauto-Staging', 1, 0, 156, 1, 'MurphyAuto-Staging', 'Admin@MurphyAuto-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d49e038c-52f9-4f38-ac5d-ff69e5787096', 'Bro', 'Elias', 0, 0, 156, 1, 'MurphyAuto-Staging', 'Bro.Elias@MurphyAuto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e88f08c2-5f14-4c6f-b6f7-c8b1a46b9933', 'Samri', 'Tesfaye', 0, 0, 156, 1, 'MurphyAuto-Staging', 'Samri.Tesfaye@MurphyAuto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ffaadb70-6dd4-41a4-977b-25496b8304cc', 'Wibit', 'Yitbarek', 0, 0, 156, 1, 'MurphyAuto-Staging', 'Wibit.Yitbarek@MurphyAuto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('06804674-7f5a-49cc-b52f-b6f45195197e', 'Yafet', 'Abdo', 0, 0, 156, 1, 'MurphyAuto-Staging', 'Yafet.Abdo@MurphyAuto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('511a270b-3e49-4808-88eb-4adb20471e89', 'Yaphet', 'G/Stadik', 0, 0, 156, 1, 'MurphyAuto-Staging', 'Yaphet.G/Stadik@MurphyAuto-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('926cc906-6a73-4d6a-b975-a6d0851ce8f5', 'Admin', 'Continentalbattery-Staging', 1, 0, 162, 1, 'ContinentalBattery-Staging', 'Admin@ContinentalBattery-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('01f6fc7c-d95e-11ed-bb71-02c102131f31', 'Alexandra', 'Esmeralda', 0, 0, 165, 1, 'RamarFoods-Staging', 'Alexandra.Esmeralda@RamarFoods-Staging-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('01f70090-d95e-11ed-bb71-02c102131f31', 'Beatriz', 'Rodriguez', 0, 0, 165, 1, 'RamarFoods-Staging', 'Beatriz.Rodriguez@RamarFoods-Staging-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('01f6ff18-d95e-11ed-bb71-02c102131f31', 'Gaby', 'Portillo', 0, 0, 165, 1, 'RamarFoods-Staging', 'Gaby.Portillo@RamarFoods-Staging-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('01f6fe5b-d95e-11ed-bb71-02c102131f31', 'Paola', 'Beltran', 0, 0, 165, 1, 'RamarFoods-Staging', 'Paola.Beltran@RamarFoods-Staging-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cbbf2176-79b2-4e6d-8e35-88cf5ee4cd06', 'Self', 'Staging', 0, 0, 166, 1, 'Self-Staging', 'Self.Staging@Self-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e6badfe1-8555-4cbf-a63f-93d0d38cf6b7', 'Tester', 'Cloudx', 0, 0, 170, 1, 'UCAL', 'Tester.Cloudx@UCAL-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f0fa0bfb-db14-4719-8188-d0656829b788', 'Tester', 'Cloudx', 0, 0, 170, 1, 'UCAL', 'Tester.Cloudx@UCAL-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('532ddb3a-10f0-11ee-8962-02c102131f31', 'Bea', 'Rodriguez', 0, 0, 173, 1, 'DigitalDynamics-Staging', 'Bea.Rodriguez@DigitalDynamics-Staging-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('532ddb08-10f0-11ee-8962-02c102131f31', 'Bro', 'Elias', 0, 0, 173, 1, 'DigitalDynamics-Staging', 'Bro.Elias@DigitalDynamics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('532ddbd2-10f0-11ee-8962-02c102131f31', 'Digital', 'Dynamics Es', 0, 0, 173, 1, 'DigitalDynamics-Staging', 'Digital.Dynamics Es@DigitalDynamics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('532ddd9e-10f0-11ee-8962-02c102131f31', 'Gaby', 'Portillo', 0, 0, 173, 1, 'DigitalDynamics-Staging', 'Gaby.Portillo@DigitalDynamics-Staging-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('532dd955-10f0-11ee-8962-02c102131f31', 'Luis', 'Rodriguez', 0, 0, 173, 1, 'DigitalDynamics-Staging', 'Luis.Rodriguez@DigitalDynamics-Staging-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('532dda71-10f0-11ee-8962-02c102131f31', 'Majo', 'Cruz', 0, 0, 173, 1, 'DigitalDynamics-Staging', 'Majo.Cruz@DigitalDynamics-Staging-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('532ddd6a-10f0-11ee-8962-02c102131f31', 'Paola', 'Beltran', 0, 0, 173, 1, 'DigitalDynamics-Staging', 'Paola.Beltran@DigitalDynamics-Staging-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('532dddcf-10f0-11ee-8962-02c102131f31', 'Reinaldo', 'Cruz', 0, 0, 173, 1, 'DigitalDynamics-Staging', 'Reinaldo.Cruz@DigitalDynamics-Staging-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('532dda44-10f0-11ee-8962-02c102131f31', 'Samrawit', 'Tesfaye', 0, 0, 173, 1, 'DigitalDynamics-Staging', 'Samrawit.Tesfaye@DigitalDynamics-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('380b2994-f81f-4e42-9527-6d46dc171c28', 'Test', 'Test', 0, 0, 176, 1, 'BobLoquercio', 'Test.Test@BobLoquercio-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('46350453-cd8c-4d37-92fb-63377f497414', 'Test', 'Test2', 0, 0, 176, 1, 'BobLoquercio', 'Test.Test2@BobLoquercio-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6d6953a0-6b3c-4acc-9fb0-07386e9a40ff', 'Test', 'One', 0, 0, 177, 1, 'P4Automotive', 'Test.One@P4Automotive-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b77207af-9bd2-4e28-9624-88065b1c2c39', 'Staging.Bea', 'Staging.Rodriguez', 0, 0, 178, 1, 'GroteAutomotive-Staging', 'Staging.Bea.Staging.Rodriguez@GroteAutomotive-Staging-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4449d260-2eed-4e3d-b9ea-6466a2b6e968', 'Staging.Daniel', 'Staging.Campos', 0, 0, 178, 1, 'GroteAutomotive-Staging', 'Staging.Daniel.Staging.Campos@GroteAutomotive-Staging-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08e51986-3b38-11ee-8962-02c102131f31', 'Abeba', 'Degefu', 0, 0, 180, 1, 'HarcoSemco-Staging', 'Abeba.Degefu@HarcoSemco-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08e519db-3b38-11ee-8962-02c102131f31', 'Abeba', 'Degefu', 0, 0, 180, 1, 'HarcoSemco-Staging', 'Abeba.Degefu@HarcoSemco-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08e51556-3b38-11ee-8962-02c102131f31', 'Arsema', 'Abiy', 0, 0, 180, 1, 'HarcoSemco-Staging', 'Arsema.Abiy@HarcoSemco-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08e51780-3b38-11ee-8962-02c102131f31', 'Arsema', 'Abiy', 0, 0, 180, 1, 'HarcoSemco-Staging', 'Arsema.Abiy@HarcoSemco-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08e516a4-3b38-11ee-8962-02c102131f31', 'Ashenafi', 'Dejen', 0, 0, 180, 1, 'HarcoSemco-Staging', 'Ashenafi.Dejen@HarcoSemco-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08e517a8-3b38-11ee-8962-02c102131f31', 'Ashenafi', 'Dejen', 0, 0, 180, 1, 'HarcoSemco-Staging', 'Ashenafi.Dejen@HarcoSemco-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08e51bd5-3b38-11ee-8962-02c102131f31', 'Bezawit', 'Lewoyehu', 0, 0, 180, 1, 'HarcoSemco-Staging', 'Bezawit.Lewoyehu@HarcoSemco-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08e51f15-3b38-11ee-8962-02c102131f31', 'Cloudx', 'Integration', 0, 0, 180, 1, 'HarcoSemco-Staging', 'staging.esharcosemco', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08e51f3e-3b38-11ee-8962-02c102131f31', 'Jote', 'Daniel', 0, 0, 180, 1, 'HarcoSemco-Staging', 'Jote.Daniel@HarcoSemco-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08e51e84-3b38-11ee-8962-02c102131f31', 'Kenan', 'Esubalew', 0, 0, 180, 1, 'HarcoSemco-Staging', 'Kenan.Esubalew@HarcoSemco-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08e51b59-3b38-11ee-8962-02c102131f31', 'Kenean', 'Esubalew', 0, 0, 180, 1, 'HarcoSemco-Staging', 'Kenean.Esubalew@HarcoSemco-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08e51a3d-3b38-11ee-8962-02c102131f31', 'Samrawit', 'Tesfaye', 0, 0, 180, 1, 'HarcoSemco-Staging', 'Samrawit.Tesfaye@HarcoSemco-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08e516f1-3b38-11ee-8962-02c102131f31', 'Scott', 'Sogge', 0, 0, 180, 1, 'HarcoSemco-Staging', 'Scott.Sogge@HarcoSemco-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08e51b82-3b38-11ee-8962-02c102131f31', 'Selam', 'Eshete', 0, 0, 180, 1, 'HarcoSemco-Staging', 'Selam.Eshete@HarcoSemco-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08e51f66-3b38-11ee-8962-02c102131f31', 'Solomon', 'Tesfaye', 0, 0, 180, 1, 'HarcoSemco-Staging', 'Solomon.Tesfaye@HarcoSemco-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08e51957-3b38-11ee-8962-02c102131f31', 'Tiblets', 'Zewde', 0, 0, 180, 1, 'HarcoSemco-Staging', 'Tiblets.Zewde@HarcoSemco-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08e51d41-3b38-11ee-8962-02c102131f31', 'Wibit', 'Yitbarek', 0, 0, 180, 1, 'HarcoSemco-Staging', 'Wibit.Yitbarek@HarcoSemco-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08e51d6e-3b38-11ee-8962-02c102131f31', 'Wibit', 'Yitbarek', 0, 0, 180, 1, 'HarcoSemco-Staging', 'Wibit.Yitbarek@HarcoSemco-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08e51aca-3b38-11ee-8962-02c102131f31', 'Yaphet', 'Abdo', 0, 0, 180, 1, 'HarcoSemco-Staging', 'Yaphet.Abdo@HarcoSemco-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08e5171d-3b38-11ee-8962-02c102131f31', 'Yonatan', 'Getamesay', 0, 0, 180, 1, 'HarcoSemco-Staging', 'Yonatan.Getamesay@HarcoSemco-Staging-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('67691a54-be1c-4204-93b7-e8d505fbb73a', 'Test', 'Mana', 0, 0, 183, 1, 'StepOneAutomotive', 'Test.Mana@StepOneAutomotive-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('896fa59b-68cc-435f-9a55-f2e2f8c50075', 'Test', 'Mana1', 0, 0, 183, 1, 'StepOneAutomotive', 'Test.Mana1@StepOneAutomotive-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d1e5f81d-d831-479c-8cc9-f4a094da1dbc', 'Yonathan', 'Tedla', 0, 0, 183, 1, 'StepOneAutomotive', 'Yonathan.Tedla@StepOneAutomotive-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('74b72d72-7d66-11ee-b46c-02c102131f31', 'Admin', 'Cloudx', 1, 0, 184, 1, 'StepOneAutomotive-Staging', 'Admin@StepOneAutomotive-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2f8ad71e-05c2-4f88-9db5-4f4040e18df7', 'Test', 'User', 0, 0, 189, 1, 'RocketIndustrial', 'Test.User@RocketIndustrial-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d55a8832-7fbf-483b-8e99-569878227099', 'Test', 'User2', 0, 0, 189, 1, 'RocketIndustrial', 'Test.User2@RocketIndustrial-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2b241833-c5a3-485e-95ab-d56f2c6c4375', 'Test', 'User3', 0, 0, 189, 1, 'RocketIndustrial', 'Test.User3@RocketIndustrial-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cdda1b05-ab0b-43dd-ac3c-a0515aab94f0', 'Test', 'User', 0, 0, 191, 1, 'HerbCo', 'Test.User@HerbCo-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('153f4c06-fd60-11ee-852f-0224fc0bdc19', 'Admin', 'Brandingiron-Staging', 1, 0, 193, 1, 'BrandingIron-Staging', 'Admin@BrandingIron-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('153f491c-fd60-11ee-852f-0224fc0bdc19', 'Anand', 'Rathod', 0, 0, 193, 1, 'BrandingIron-Staging', 'Anand.Rathod@BrandingIron-Staging-Disabled', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('153f4aab-fd60-11ee-852f-0224fc0bdc19', 'Dinesh', 'Pujari', 0, 0, 193, 1, 'BrandingIron-Staging', 'Dinesh.Pujari@BrandingIron-Staging-Disabled', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('153f4b74-fd60-11ee-852f-0224fc0bdc19', 'Kapil', 'Pujari', 0, 0, 193, 1, 'BrandingIron-Staging', 'Kapil.Pujari@BrandingIron-Staging-Disabled', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('153f49a1-fd60-11ee-852f-0224fc0bdc19', 'Prakas', 'Chandawat', 0, 0, 193, 1, 'BrandingIron-Staging', 'Prakas.Chandawat@BrandingIron-Staging-Disabled', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('153f4c46-fd60-11ee-852f-0224fc0bdc19', 'Prasad', 'Pujari', 0, 0, 193, 1, 'BrandingIron-Staging', 'Prasad.Pujari@BrandingIron-Staging-Disabled', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ef0a6d96-a8d5-11ef-ba35-02198e5bae4b', 'Cloudx', 'Integration', 1, 0, 194, 1, 'CountryPureFoods-Staging', 'staging.esadmin@countrypurefood', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a37ae80e-0385-11ef-852f-0224fc0bdc19', 'Mahadev', 'Bhabal', 0, 0, 194, 1, 'CountryPureFoods-Staging', 'Mahadev.Bhabal@CountryPureFoods-Staging-Disabled', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a37ae6a5-0385-11ef-852f-0224fc0bdc19', 'Prabhat', 'Verma', 0, 0, 194, 1, 'CountryPureFoods-Staging', 'Prabhat.Verma@CountryPureFoods-Staging-Disabled', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ef0a629b-a8d5-11ef-ba35-02198e5bae4b', 'Prabhat', 'Verma', 0, 0, 194, 1, 'CountryPureFoods-Staging', 'Prabhat.Verma@CountryPureFoods-Staging-Disabled', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a37ae4c0-0385-11ef-852f-0224fc0bdc19', 'Reena', 'Das', 0, 0, 194, 1, 'CountryPureFoods-Staging', 'Reena.Das@CountryPureFoods-Staging-Disabled', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ef0a51ec-a8d5-11ef-ba35-02198e5bae4b', 'Dinesh', 'Soni', 1, 0, 194, 1, 'CountryPureFoods-Staging', 'Admin@CountryPureFoods-Staging-Disabled', 'operations@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a37aebd7-0385-11ef-852f-0224fc0bdc19', 'Swapnali', 'Mistry', 0, 0, 194, 1, 'CountryPureFoods-Staging', 'Swapnali.Mistry@CountryPureFoods-Staging-Disabled', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ef0a5cb7-a8d5-11ef-ba35-02198e5bae4b', 'Swapnali', 'Mistry', 0, 0, 194, 1, 'CountryPureFoods-Staging', 'Swapnali.Mistry@CountryPureFoods-Staging-Disabled', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a37af11f-0385-11ef-852f-0224fc0bdc19', 'Yogesh', 'Khilari', 0, 0, 194, 1, 'CountryPureFoods-Staging', 'Yogesh.Khilari@CountryPureFoods-Staging-Disabled', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('98156765-8187-4c6b-a513-8de1d4f98db0', 'Ashenafi', 'Dejen', 0, 0, 195, 1, 'LongLewis', 'Ashenafi.Dejen@LongLewis-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b2602120-82a7-44f8-8039-869e3fdd4a55', 'Ashenafi', 'Dejen', 0, 0, 195, 1, 'LongLewis', 'Ashenafi.Dejen@LongLewis-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cc1810e6-b701-4d6d-9ba8-cc0deca3578d', 'Ashenafi', 'Dejen', 0, 0, 195, 1, 'LongLewis', 'Ashenafi.Dejen@LongLewis-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('eb992432-6fe2-4a0a-b612-54a835c8669e', 'Cloudxtesting', 'Apsmart', 0, 0, 195, 1, 'LongLewis', 'Cloudxtesting.Apsmart@LongLewis-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ddafc5e9-67d7-4ddf-999b-967e17edaed1', 'Eldana', 'Hadush', 0, 0, 195, 1, 'LongLewis', 'Eldana.Hadush@LongLewis-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('68f94d33-d371-482a-86ea-2af6f27cbaf6', 'Selam', 'Eshete', 0, 0, 195, 1, 'LongLewis', 'Selam.Eshete@LongLewis-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7c5242b5-1ef6-43a5-bd61-04bf09de8f57', 'Aptean', 'Check', 0, 0, 198, 1, 'CrownLaboratories', 'Aptean.Check@CrownLaboratories-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ccaf7feb-d054-4375-97b1-a61cf03e25c8', 'Test', 'User', 0, 0, 198, 1, 'CrownLaboratories', 'Test.User@CrownLaboratories-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6cd9fa81-9629-414a-9b41-5f025a3ab168', 'Ashenafi', 'Dejen', 0, 0, 199, 1, 'PaintersSupply', 'Ashenafi.Dejen@PaintersSupply-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('206960cc-d40d-43e2-a7be-559d4fd1fcb1', 'Eldana', 'Hadush', 0, 0, 199, 1, 'PaintersSupply', 'Eldana.Hadush@PaintersSupply-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('754c13f6-7728-11ef-ba35-02198e5bae4b', 'Admin', 'Pianterssupply-Staging', 1, 0, 200, 1, 'PaintersSupply-Staging', 'Admin@PaintersSupply-Staging-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('edfb2a91-a5c5-49f7-b34c-26017b3f60fd', 'Ashenafi', 'Dejen', 0, 0, 201, 1, 'SuntrupAutomotiveGroup', 'Ashenafi.Dejen@SuntrupAutomotiveGroup-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7adabd0a-2419-4aa6-80f8-6b2561a5a958', 'Abeba', 'Defefu', 0, 1, 1, 1, 'Kettle', 'Abeba.Defefu@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5c002afe-b56f-4941-b47b-3d2fd30d56e2', 'Abel', 'Kenaw', 0, 1, 1, 1, 'Kettle', 'Abel.Kenaw@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b6a7a8f8-8539-44e1-a900-d0f0e798bb04', 'Aklilu', 'Tesfaye', 0, 1, 1, 1, 'Kettle', 'Aklilu.Tesfaye@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('94cc540c-ead1-4116-9cfd-323628aa3f9b', 'Alem', 'Gidey', 0, 1, 1, 1, 'Kettle', 'Alem.Gidey@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a33b2580-36b6-44e4-a8c6-19a61ec39059', 'Anathole', 'Niyongana', 0, 1, 1, 1, 'Kettle', 'Anathole.Niyongana@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('156bdff9-3ba6-4f15-95e2-7ebc1426722f', 'Arsema', 'Abiy', 0, 1, 1, 1, 'Kettle', 'Arsema.Abiy@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5e0cd999-69b4-4c3c-b76d-a779a3e81c7c', 'Ashenafi', 'Dejen', 0, 1, 1, 1, 'Kettle', 'Ashenafi.Dejen@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c22b49fb-d2e5-47a5-8f85-bb2278d1282c', 'Atnatiwos', 'Solomon', 0, 1, 1, 1, 'Kettle', 'Atnatiwos.Solomon@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b7cc36cf-9ceb-4fea-9ea6-2b62ded02be1', 'Beakal', 'Deriba', 0, 0, 1, 1, 'Kettle', 'Beakal.Deriba@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a3a42142-ecfc-47ca-8a0c-b643a517119e', 'Bereket', 'G/Hiwot', 0, 1, 1, 1, 'Kettle', 'Bereket.G/Hiwot@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4edf0c13-19ad-4e1e-b697-6db63a92ae3e', 'Bezawit', 'Lewoyehu', 0, 1, 1, 1, 'Kettle', 'Bezawit.Lewoyehu@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('09839896-5438-4289-862e-a7293e87b7da', 'Biruk', 'Kenaw', 0, 1, 1, 1, 'Kettle', 'Biruk.Kenaw@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5ea38cba-9138-4767-9317-9cbcd4ba8931', 'Brian', 'Gatete', 0, 1, 1, 1, 'Kettle', 'Brian.Gatete@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9bdb7398-d94b-4dac-a408-6c0f24c09b9a', 'Bro', 'Elias', 0, 0, 1, 1, 'Kettle', 'Bro.Elias@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('10dc41c1-0b09-4923-b3e9-07e537d1f1da', 'Christine', 'Uwase', 0, 1, 1, 1, 'Kettle', 'Christine.Uwase@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef507', 'Cloudx', 'Integration', 1, 1, 1, 1, 'Kettle', 'esadmin@kettle', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2ee4902d-251e-44aa-a9fa-f7d5a56723ec', 'Elshaday', 'Adamu', 0, 1, 1, 1, 'Kettle', 'Elshaday.Adamu@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8def2604-94cc-455a-944a-8d063e56a939', 'Elshaday', 'Adamu', 0, 0, 1, 1, 'Kettle', 'Elshaday.Adamu@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d7a1ea7e-1ab1-46b1-a2bc-6195d019b012', 'Es', 'Kettle', 0, 1, 1, 1, 'Kettle', 'Es.Kettle@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d553a7b3-72d4-436f-8ac6-c5e65f5de9ab', 'Feven', 'Berhe', 0, 1, 1, 1, 'Kettle', 'Feven.Berhe@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7f21bdfe-0098-4412-9cab-acde540a14ba', 'Girum', 'Tesfaye', 0, 1, 1, 1, 'Kettle', 'Girum.Tesfaye@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('97d67671-1429-496b-a57d-8632998ac6b5', 'Admin', 'Kettle', 1, 0, 1, 1, 'Kettle', 'Admin@Kettle-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a9b32226-dea9-45f8-9f96-b3829bb2101c', 'Kenean', 'Esubalew', 0, 1, 1, 1, 'Kettle', 'Kenean.Esubalew@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2c92b404-048c-11ee-8962-02c102131f31', 'Admin', 'Kettle', 1, 0, 1, 1, 'Kettle', 'Admin@Kettle-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('33de76ad-6c67-4a76-acf1-aaf5055e25ac', 'Kidist', 'Kibatu', 0, 1, 1, 1, 'Kettle', 'Kidist.Kibatu@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4f6e31db-b39f-4cdf-9f67-69aa6dc3b9a4', 'Mikias', 'Leweyehu', 0, 1, 1, 1, 'Kettle', 'Mikias.Leweyehu@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c1861417-263f-4abd-9bc8-71fec97ca3ad', 'Natnael', 'Alemayehu', 0, 1, 1, 1, 'Kettle', 'Natnael.Alemayehu@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d7f9a3e2-a2c3-4559-a2c5-ff6955aaf1dc', 'Nshimiyimana', 'Bosco', 0, 1, 1, 1, 'Kettle', 'Nshimiyimana.Bosco@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5db7efe3-d98c-44e7-98bc-238c99c655b7', 'Selam', 'Eshete', 0, 1, 1, 1, 'Kettle', 'Selam.Eshete@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('dbcd031a-0a1b-453f-8904-38d6fddd75b0', 'Solomon', 'Tesfaye', 0, 1, 1, 1, 'Kettle', 'Solomon.Tesfaye@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8d587fe4-47ea-4a23-9015-66b3f28caeb2', 'Tariku', 'Hode', 0, 1, 1, 1, 'Kettle', 'Tariku.Hode@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('086ac7af-5920-49e9-9333-e508998ca0b1', 'Tesfahun', 'Tsehaye', 0, 1, 1, 1, 'Kettle', 'Tesfahun.Tsehaye@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2932f9e4-0f3e-41f5-8fc0-8dc20d7ee208', 'Tiblets', 'Zewde', 0, 1, 1, 1, 'Kettle', 'Tiblets.Zewde@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b22372ac-a4e6-436b-9663-017f1f4dc7c3', 'Wibit', 'Yitbarek', 0, 1, 1, 1, 'Kettle', 'Wibit.Yitbarek@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('dca38452-2f07-4d60-b6f6-8e071f30ffbd', 'Wibit', 'Yitbarek', 0, 0, 1, 1, 'Kettle', 'Wibit.Yitbarek@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6f1933cd-acbd-4667-abd2-d00541eb4544', 'Yafet', 'Abdo', 0, 0, 1, 1, 'Kettle', 'Yafet.Abdo@Kettle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3b9226cf-0c6e-437b-acf4-9a8e9c83417c', 'Yonatan', 'Getamesay', 0, 1, 1, 1, 'Kettle', 'Yonatan.Getamesay@Kettle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a6f3ffdd-008c-4929-8735-1b0dce10f23f', 'Abeba', 'Degefu', 0, 1, 5, 1, 'MHC', 'Abeba.Degefu@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4E190708-884F-427D-B7DA-B06F6EEB0AFA', 'Abel', 'Kenaw', 0, 1, 5, 1, 'MHC', 'Abel.Kenaw@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('286B38AA-DAD4-44B0-8AC7-462BCB06B44F', 'Admin', 'Mhc', 1, 1, 5, 1, 'MHC', 'Admin@MHC', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('dfd1f0c6-1707-4b27-8990-ea08f5cc4b80', 'Aklilu', 'Tesfaye', 0, 1, 5, 1, 'MHC', 'Aklilu.Tesfaye@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3f49318f-3456-4de2-8521-00213c76e03e', 'Arsema', 'Abiy', 0, 1, 5, 1, 'MHC', 'Arsema.Abiy@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('39600d6e-462b-4055-a20e-8e19577870dd', 'Ashenafi', 'Dejen', 0, 1, 5, 1, 'MHC', 'Ashenafi.Dejen@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b13f57f7-4d53-49c6-a387-ee46814c265d', 'Beakal', 'Deriba', 0, 1, 5, 1, 'MHC', 'Beakal.Deriba@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('85af2821-30f5-48bc-bf59-eb72beedab03', 'Betelehem', 'Mesfine', 0, 1, 5, 1, 'MHC', 'Betelehem.Mesfine@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3485827b-ef2b-486e-a395-ed3210588dd3', 'Bezawit', 'Lewoyehu', 0, 1, 5, 1, 'MHC', 'Bezawit.Lewoyehu@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7fa0ceb9-1e0d-4c24-b418-63d0bda9aeca', 'Biruk', 'Kenaw', 0, 1, 5, 1, 'MHC', 'Biruk.Kenaw@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef506', 'Cloudx', 'Integration', 1, 1, 5, 1, 'MHC', 'esadmin@masoniccare', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9464aa8b-aa67-476b-a80c-41bbfe280226', 'Es', 'Masoniccare', 0, 1, 5, 1, 'MHC', 'Es.Masoniccare@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('455B4B09-D509-49C9-927C-F6EDCE9F3CE2', 'Eyosias', 'Michael', 0, 1, 5, 1, 'MHC', 'Eyosias.Michael@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e10b4f06-c6e7-436e-8d06-abe2515682b5', 'Feven', 'Berhe', 0, 1, 5, 1, 'MHC', 'Feven.Berhe@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0bb47dd1-53f6-47ba-8b7a-5eab0f1e29c7', 'Getamesay', 'Yonatan', 0, 1, 5, 1, 'MHC', 'Getamesay.Yonatan@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('C550CB63-B963-442C-ADB4-2928FF4035CC', 'Girum', 'Tesfaye', 0, 1, 5, 1, 'MHC', 'Girum.Tesfaye@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('EFF679D4-9F58-4BEB-A635-7620DB949853', 'Jason', 'Bourne', 0, 1, 5, 0, 'MHC', 'Jason.Bourne@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('15041AEB-BD91-4A43-93A8-3D3E301F3F63', 'Jo', 'Jo', 0, 1, 5, 0, 'MHC', 'Jo.Jo@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ad4d5912-f7b9-4eea-946e-18373d80e0cc', 'Juan', 'Jose', 1, 0, 5, 1, 'MHC', 'Admin@MHC-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2202646a-7f7b-405f-8860-0ddf9b7fb3fc', 'Kenan', 'Esubalew', 0, 1, 5, 1, 'MHC', 'Kenan.Esubalew@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3fb12627-3bb6-42bb-8d1c-f7c4c2080984', 'Kenean', 'Esu', 0, 1, 5, 1, 'MHC', 'Kenean.Esu@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0e91bb91-f8f6-4ba4-b88b-faa755b9b7be', 'Mikiyas', 'Leweyehu', 0, 1, 5, 1, 'MHC', 'Mikiyas.Leweyehu@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3E95A41D-5BB1-49E6-849C-561FF27D8889', 'Misker', 'Tsegaye', 0, 1, 5, 1, 'MHC', 'Misker.Tsegaye@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('EFB29B07-184E-4B1C-8F1A-4785FDA5D8DE', 'Natnael', 'Alemayehu', 0, 1, 5, 1, 'MHC', 'Natnael.Alemayehu@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d0c1b919-05bb-4aa7-82a4-56a65abdf1c0', 'Selam', 'Eshete', 0, 1, 5, 1, 'MHC', 'Selam.Eshete@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d9c3598e-414e-47ef-a652-8e72affe63de', 'Solomon', 'Tesfaye', 0, 1, 5, 1, 'MHC', 'Solomon.Tesfaye@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('567005BF-37B4-4F80-9E41-AA0C8EEE8315', 'Tariku', 'Hode', 0, 1, 5, 1, 'MHC', 'Tariku.Hode@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('eddf3288-5ff6-481f-9bbf-653f91c415b6', 'Tibletse', 'Zewde', 0, 1, 5, 1, 'MHC', 'Tibletse.Zewde@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6d82e775-8e0f-49fa-87e5-baf9ca5f83d2', 'Wibit', 'Yitbarek', 0, 1, 5, 1, 'MHC', 'Wibit.Yitbarek@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('93020e70-295e-4b91-93e6-ed30bfa0d92a', 'Yafet', 'Abdo', 0, 1, 5, 1, 'MHC', 'Yafet.Abdo@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ed639afc-ee2c-4652-bf3c-e4225dc95f91', 'Yaphet', 'G/Tsadik', 0, 1, 5, 1, 'MHC', 'Yaphet.G/Tsadik@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d3a3155f-2c31-4a79-b53f-cfbe2b869c4a', 'Yonatan', 'Getamesay', 0, 1, 5, 1, 'MHC', 'Yonatan.Getamesay@MHC', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4228cb80-fa6c-4832-bd06-b8a500139d9b', 'Abeba', 'Degefu', 0, 1, 15, 1, 'SRH', 'Abeba.Degefu@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8a2e8d0d-2e06-45ad-be96-143d85ee4697', 'Abel', 'Kenaw', 0, 1, 15, 1, 'SRH', 'Abel.Kenaw@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('15275921-cca7-4ba0-bb2e-834cb1dc3da1', 'Elshaday', 'Adamu', 0, 1, 15, 1, 'SRH', 'Elshaday.Adamu@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('00a954d8-3ab0-4823-a176-c666ce6f011e', 'Aklilu', 'Tesfaye', 0, 0, 15, 1, 'SRH', 'Aklilu.Tesfaye@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6edd0449-d13d-4252-b807-af0907931f57', 'Arsema', 'Abiy', 0, 1, 15, 1, 'SRH', 'Arsema.Abiy@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ad3fe3cb-1752-4295-87b3-d343e02ce178', 'Ashenafi', 'Dejen', 0, 1, 15, 1, 'SRH', 'Ashenafi.Dejen@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9d458bf2-0c04-4eb4-92fe-48ffbb530232', 'Atnatiwos', 'Solomon', 0, 1, 15, 1, 'SRH', 'Atnatiwos.Solomon@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('39c414af-e787-4a36-8cd9-9de49334f246', 'Beakal', 'Deriba', 0, 1, 15, 1, 'SRH', 'Beakal.Deriba@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('212fad18-b42c-4a60-9187-f0ea064f3c1c', 'Betelehem', 'Mesfine', 0, 1, 15, 1, 'SRH', 'Betelehem.Mesfine@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('77b9575b-e392-483a-9a75-8a119791b81e', 'Bezawit', 'Lewoyehu', 0, 1, 15, 1, 'SRH', 'Bezawit.Lewoyehu@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e6cdd7bb-b707-4fee-ad8a-a3e7fdf880cf', 'Biruk', 'Kenaw', 0, 1, 15, 1, 'SRH', 'Biruk.Kenaw@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8230ea92-2e08-405a-b6a7-4aa624e100c6', 'Es', 'Self', 0, 0, 15, 1, 'SRH', 'Es.Self@SRH-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bfb1ae24-9435-49b2-a611-ed8a7253856b', 'Feven', 'Berhe', 0, 1, 15, 1, 'SRH', 'Feven.Berhe@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('94b577f0-b45e-4d18-883e-97edd2bb051d', 'Fiker', 'Self', 0, 1, 15, 1, 'SRH', 'Fiker.Self@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bf85fae-cd02-4997-b947-f4504fe3370c', 'Fiyameta', 'Birhanu', 0, 1, 15, 1, 'SRH', 'Fiyameta.Birhanu@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6860db54-9498-4ee9-a987-a8ace94f8da8', 'Girum', 'Tesfaye', 0, 1, 15, 1, 'SRH', 'Girum.Tesfaye@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e6a845d4-bb79-41f0-8a3b-d4e763a749f0', 'Henok', 'Teshager', 0, 1, 15, 1, 'SRH', 'Henok.Teshager@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('39b8c0e2-fd0c-4c0d-88a9-b099b60ed54f', 'Jote', 'Daniel', 0, 1, 15, 1, 'SRH', 'Jote.Daniel@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('339cfbdc-0cd5-408c-b8e9-11b40960ff9d', 'Juan', 'Jose', 1, 0, 15, 1, 'SRH', 'Admin@SRH-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f48e14da-2dd7-44e4-9271-6224a381a2fc', 'Kaleab', 'Tariku', 0, 1, 15, 1, 'SRH', 'Kaleab.Tariku@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5de8b812-e48d-49cc-8542-65d5ff487495', 'Kenan', 'Esubalew', 0, 1, 15, 1, 'SRH', 'Kenan.Esubalew@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e1c5b84b-8886-49f8-b843-e8a140d8c187', 'Keyel', 'Kebede', 0, 1, 15, 1, 'SRH', 'Keyel.Kebede@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('96bb1718-de93-406a-8b03-5d1f5003e505', 'Mamar', 'Sewyew', 0, 1, 15, 1, 'SRH', 'Mamar.Sewyew@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ff40f1ae-d2ca-4404-a001-0462bba8b190', 'Melat', 'Mitiku', 0, 1, 15, 1, 'SRH', 'Melat.Mitiku@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1c930c46-f004-4bd2-91d6-5fd14eb9ae65', 'Mesay', 'Fikru', 0, 1, 15, 1, 'SRH', 'Mesay.Fikru@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('27414795-219a-4196-9b15-848938a36219', 'Mikias', 'Leweyehu', 0, 1, 15, 1, 'SRH', 'Mikias.Leweyehu@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e8606476-fc56-4d12-9184-bed6d6a121f1', 'Mikiyas', 'Tefera', 0, 1, 15, 1, 'SRH', 'Mikiyas.Tefera@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c0b17eb6-28fb-4bf8-a305-e87bab6b07f3', 'Misker', 'Tsegaye', 0, 1, 15, 1, 'SRH', 'Misker.Tsegaye@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c77f62c8-6d6a-4556-9aa7-a50b8c3bd861', 'Nani', 'Legesse', 0, 1, 15, 1, 'SRH', 'Nani.Legesse@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8c8bff9a-db0e-4ff1-beb8-f7d98833c71e', 'Natanoy', 'Getamesay', 0, 1, 15, 1, 'SRH', 'Natanoy.Getamesay@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f9f3834d-e9ef-4c32-b8ce-a90d5b96bbc7', 'Nathi', 'Nathi', 0, 1, 15, 1, 'SRH', 'Nathi.Nathi@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4974e884-37b6-4758-9653-9375be3ce7ce', 'Natnael', 'Alemayehu', 0, 1, 15, 1, 'SRH', 'Natnael.Alemayehu@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('222d1bfb-72bc-4040-b99a-526ca24cb4c4', 'Raey', 'Yohannes', 0, 1, 15, 1, 'SRH', 'Raey.Yohannes@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e9a29bfe-b9ef-419f-aa74-761a0fb450aa', 'Seble', 'Sisay', 0, 1, 15, 1, 'SRH', 'Seble.Sisay@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5c15b212-0495-4785-87d2-edc3d79b4df7', 'Selam', 'Eshet', 0, 1, 15, 1, 'SRH', 'Selam.Eshet@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6988f5f9-2e57-4685-bddd-dcbf0d1250ac', 'Self', 'Administrator', 1, 0, 15, 1, 'SRH', 'Admin@SRH-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7b2ca279-bb22-4faa-8fb8-4f6208f0c008', 'Solomon', 'Tesfaye', 0, 1, 15, 1, 'SRH', 'Solomon.Tesfaye@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('38138e80-0082-4528-b85a-e18ca0553f37', 'Sosena', 'Sosena', 0, 1, 15, 1, 'SRH', 'Sosena.Sosena@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9453da57-7899-44d2-b9b7-4d170c9e03b6', 'Tariku', 'Hode', 0, 1, 15, 1, 'SRH', 'Tariku.Hode@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c6edeae1-3bf4-4c14-88c7-e42c0008ae0c', 'Tesfahun', 'Tsehaye', 0, 1, 15, 1, 'SRH', 'Tesfahun.Tsehaye@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('50b419ab-a8d8-4265-9dc1-9155ad155043', 'Tiblets', 'Zewde', 0, 1, 15, 1, 'SRH', 'Tiblets.Zewde@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('60fe8cb4-b6ee-4dc4-b7f3-c13ef2058f0f', 'Tsedenya', 'Yohannes', 0, 1, 15, 1, 'SRH', 'Tsedenya.Yohannes@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ef8db22f-b63f-4b09-b181-20bac6b3cb7c', 'Waleligne', 'Cherinet', 0, 1, 15, 1, 'SRH', 'Waleligne.Cherinet@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a4a91bc7-67fd-4142-9f0c-e33e376a06a8', 'Webite', 'Self', 0, 1, 15, 1, 'SRH', 'Webite.Self@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('87de450c-7dbf-4fac-b936-0c725982f79f', 'Wibit', 'Yitbarek', 0, 1, 15, 1, 'SRH', 'Wibit.Yitbarek@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3ad5a3ed-8872-435b-a561-fd5738240f07', 'Yafet', 'Abdo', 0, 1, 15, 1, 'SRH', 'Yafet.Abdo@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c673f729-3353-4e90-b1f5-b377da88ee88', 'Yaphet', 'G/Tsadik', 0, 1, 15, 1, 'SRH', 'Yaphet.G/Tsadik@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2adb5ba9-0e1a-4b4d-9a15-7a65d7ae0fb3', 'Yohanna', 'Daniel', 0, 1, 15, 1, 'SRH', 'Yohanna.Daniel@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('995ca27a-660f-497f-a0f1-bfa668801a45', 'Yonatan', 'Getamesay', 0, 1, 15, 1, 'SRH', 'Yonatan.Getamesay@SRH', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('add4bf9a-20f5-478e-9b4e-64b682d3fe99', '4521', 'Vega Americas, Inc.', 0, 0, 18, 1, 'BradFord', '4521.Vega Americas, Inc.@BradFord-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5117dc6b-8363-4495-810a-2144791e873b', 'Aklilu', 'Tesfaye', 0, 1, 18, 1, 'BradFord', 'Aklilu.Tesfaye@BradFord', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2ed2dc81-ee66-452f-9172-a09e3e2faab8', 'Arsema', 'Abiy', 0, 1, 18, 1, 'BradFord', 'Arsema.Abiy@BradFord', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('238501c5-a3a6-495d-9c10-b57eceea522f', 'Ashenafi', 'Dejen', 0, 1, 18, 1, 'BradFord', 'Ashenafi.Dejen@BradFord', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9c373c30-be5e-422a-924d-e12d624bd7db', 'Atnatiwos', 'Solomon', 0, 1, 18, 1, 'BradFord', 'Atnatiwos.Solomon@BradFord', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8b09783c-1381-44b1-b5ea-9e986e591f64', 'Bereket', 'G/Hiwot', 0, 1, 18, 1, 'BradFord', 'Bereket.G/Hiwot@BradFord', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a442270a-8910-44a5-8b27-700a396e5131', 'Admin', 'Cloudx', 1, 1, 18, 1, 'BradFord', 'Admin@BradFord', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5d50c1ef-1cd4-4108-90fe-2022bf6fb629', 'Bro', 'Elias', 0, 0, 18, 1, 'BradFord', 'Bro.Elias@BradFord-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef505', 'Cloudx', 'Integration', 1, 1, 18, 1, 'BradFord', 'esadmin@bradford', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bb914ca9-edad-4c96-93b2-09ff9276004f', 'Elshaday', 'Adamu', 0, 1, 18, 1, 'BradFord', 'Elshaday.Adamu@BradFord', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d8d814ae-0dab-4807-ae44-610f5fcadee8', 'Es', 'Bradford', 0, 1, 18, 1, 'BradFord', 'Es.Bradford@BradFord', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8a686ddd-75dd-4b23-9271-2b86c8ebfe60', 'Eyosias', 'Michael', 0, 1, 18, 1, 'BradFord', 'Eyosias.Michael@BradFord', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3c621a3a-0c46-4471-93f6-edbd36780343', 'Girum', 'Tesfaye', 0, 1, 18, 1, 'BradFord', 'Girum.Tesfaye@BradFord', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('dc6156be-3c0f-4cb2-a5a3-f35ef3cc2afc', 'Hoquba', 'Getahun', 0, 1, 18, 1, 'BradFord', 'Hoquba.Getahun@BradFord', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('40629125-23ce-4452-af1e-5860ce74a9dc', 'Kenean', 'Esubalew', 0, 1, 18, 1, 'BradFord', 'Kenean.Esubalew@BradFord', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6dec9d0b-b0f0-42a6-9b61-347b33088919', 'Kidist', 'Kibatu', 0, 1, 18, 1, 'BradFord', 'Kidist.Kibatu@BradFord', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a4dc243a-8dd8-405e-9d17-506d513d14b2', 'Mamar', 'Seweye', 0, 1, 18, 1, 'BradFord', 'Mamar.Seweye@BradFord', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('994824f9-1786-40a9-8c5a-e4105c16fc1f', 'Mikias', 'Leweyehu', 0, 1, 18, 1, 'BradFord', 'Mikias.Leweyehu@BradFord', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4d4c96e3-a47c-4338-a31c-f5f14810faef', 'Misker', 'Tsegaye', 0, 1, 18, 1, 'BradFord', 'Misker.Tsegaye@BradFord', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('afe3b3dd-648c-4f23-af52-abeb86039109', 'Natnael', 'Alemayehu', 0, 1, 18, 1, 'BradFord', 'Natnael.Alemayehu@BradFord', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('914095bf-ec9d-429a-94e2-5f64252069b7', 'O', 'Osman', 0, 1, 18, 1, 'BradFord', 'O.Osman@BradFord', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2cde154a-5394-4da7-923c-465460cc6741', 'Samrawit', 'Tesfaye', 0, 1, 18, 1, 'BradFord', 'Samrawit.Tesfaye@BradFord', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('36695fae-121e-43a7-9af2-cb804bea321a', 'Seble', 'Sisay', 0, 1, 18, 1, 'BradFord', 'Seble.Sisay@BradFord', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d0f1a689-bbea-4258-9438-60901999f74e', 'Selam', 'Eshete', 0, 1, 18, 1, 'BradFord', 'Selam.Eshete@BradFord', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('68510498-1f2a-4acf-b86e-fcd45a341fba', 'Sirak', 'Asres', 0, 1, 18, 1, 'BradFord', 'Sirak.Asres@BradFord', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('77c53819-69f9-4ede-a715-d7c935c5f87e', 'Tesfahun', 'Tsehaye', 0, 1, 18, 1, 'BradFord', 'Tesfahun.Tsehaye@BradFord', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('af470db0-1eb2-49f7-90f8-a7d65433e038', 'Wibit', 'Yitbarek', 0, 1, 18, 1, 'BradFord', 'Wibit.Yitbarek@BradFord', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2982686c-0c8a-4bae-b154-90035c985c7d', 'Yafet', 'Abdo', 0, 1, 18, 1, 'BradFord', 'Yafet.Abdo@BradFord', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0a75858b-76a7-470c-b5ca-02da928ce755', 'Yafet', 'Abdo', 0, 0, 18, 1, 'BradFord', 'Yafet.Abdo@BradFord-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('82c0a11b-5f43-4c3c-9328-c0677c06d9f1', 'Yonatan', 'Getamesay', 0, 1, 18, 1, 'BradFord', 'Yonatan.Getamesay@BradFord', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3b099e55-5d17-40e8-bd82-f7d0b2d6291d', 'Abeba', 'Degefu', 0, 1, 20, 1, 'DriveMedical', 'Abeba.Degefu@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e387546d-7e4d-4aba-bd42-613e311917a4', 'Arsema', 'Abiy', 0, 1, 20, 1, 'DriveMedical', 'Arsema.Abiy@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c572d2e4-95f4-46da-8fe6-a06dc3a8f678', 'Aklilu', 'Tesfaye', 0, 1, 20, 1, 'DriveMedical', 'Aklilu.Tesfaye@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cc88ad34-491f-45dd-be77-9e86cebf9365', 'Ashenafi', 'Dejen', 0, 1, 20, 1, 'DriveMedical', 'Ashenafi.Dejen@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bb3827fc-a93d-4a19-b5ee-9dbd06d2eafe', 'Beakal', 'Deriba', 0, 1, 20, 1, 'DriveMedical', 'Beakal.Deriba@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('32f49f99-9d06-4be1-9aed-f7db61e5427f', 'Biruk', 'Kenaw', 0, 1, 20, 1, 'DriveMedical', 'Biruk.Kenaw@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('492925CC-612C-4D24-A2E9-62A3F4134177', 'Bro', 'Elias', 0, 0, 20, 1, 'DriveMedical', 'Bro.Elias@DriveMedical-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef475', 'Cloudx', 'Integration', 1, 1, 20, 1, 'DriveMedical', 'esadmin@drive', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('337FA13C-B52E-4071-87A0-0149927F297B', 'Drive', 'Medical', 1, 0, 20, 1, 'DriveMedical', 'Admin@DriveMedical-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6b475128-d094-48ab-8154-4567ea41a2c9', 'Drivee', 'Test', 0, 1, 20, 1, 'DriveMedical', 'Drivee.Test@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d67b5557-4cbf-4556-868e-b8eb83369326', 'Elshaday', 'Adamu', 0, 1, 20, 1, 'DriveMedical', 'Elshaday.Adamu@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6c32f37e-16b6-43d1-b897-674e605d350c', 'Es', 'Drive', 0, 1, 20, 1, 'DriveMedical', 'Es.Drive@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4f2b1b5f-92c1-46ec-b1d4-0e84a0976ffe', 'Feven', 'Berhe', 0, 1, 20, 1, 'DriveMedical', 'Feven.Berhe@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('38a8014d-8c6c-4ac1-8d0c-7275c05ded7f', 'Fiker', 'Drive', 0, 1, 20, 1, 'DriveMedical', 'Fiker.Drive@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4d0865c4-85c6-48c1-921d-9252448277e3', 'G/Tsadik@Avg', 'Yaphet', 0, 1, 20, 1, 'DriveMedical', 'G/Tsadik@Avg.Yaphet@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('aa8955fc-2333-45c5-9500-d3ab2dedba41', 'Kidist', 'Kibatu', 0, 1, 20, 1, 'DriveMedical', 'Kidist.Kibatu@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('add28ae6-aed4-46cb-9e41-ff3ec8aa6181', 'Lilina', 'Tesfaye', 0, 1, 20, 1, 'DriveMedical', 'Lilina.Tesfaye@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5d15d834-4c8d-448c-9b5f-a9baba02e08f', 'Mahlet', 'Kornel', 0, 1, 20, 1, 'DriveMedical', 'Mahlet.Kornel@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('384a94ca-3db5-4d1a-af3f-1b2929ae53c8', 'Mikias', 'Leweyehu', 0, 1, 20, 1, 'DriveMedical', 'Mikias.Leweyehu@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('E6803E6E-E1F3-464C-8CEB-D251A1F42935', 'Mikiyas', 'Tefera', 0, 1, 20, 1, 'DriveMedical', 'Mikiyas.Tefera@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4f6f2f99-3311-4576-8fac-79cc768dbe94', 'Misker', 'Tsegaye', 0, 1, 20, 1, 'DriveMedical', 'Misker.Tsegaye@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f0d04c7c-c054-4b2a-a94c-79f7fb9740cb', 'Natnael', 'Fiseha', 0, 1, 20, 1, 'DriveMedical', 'Natnael.Fiseha@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('D2F7E50B-788C-42AE-A7FE-2B184FD7BBAF', 'Raey', 'Yohennes', 0, 1, 20, 1, 'DriveMedical', 'Raey.Yohennes@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('28abbf08-26a3-4e87-b9bf-2823058ca95b', 'Samrawit', 'Tesfaye', 0, 1, 20, 1, 'DriveMedical', 'Samrawit.Tesfaye@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5dadd264-d445-43ae-a4d6-941bb6378a79', 'Selam', 'Amare', 0, 1, 20, 1, 'DriveMedical', 'Selam.Amare@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('48046e95-9974-4d99-bb12-06439a6fca85', 'Sisay', 'Seble', 0, 1, 20, 1, 'DriveMedical', 'Sisay.Seble@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0559c492-94e7-4bb5-88ab-a4fefd622b59', 'Solomon', 'Tesfaye', 0, 1, 20, 1, 'DriveMedical', 'Solomon.Tesfaye@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('97C0C6A0-06E4-4B5F-B527-17115816742A', 'Tamara', 'Ruel', 0, 1, 20, 1, 'DriveMedical', 'Tamara.Ruel@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bc23ffa0-681f-4504-bf24-c210247ed7a6', 'Wibit', 'Yitibarek', 0, 1, 20, 1, 'DriveMedical', 'Wibit.Yitibarek@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e59d72db-4f7f-4d63-827a-984d911ff7fa', 'Yafet', 'Abdo', 0, 1, 20, 1, 'DriveMedical', 'Yafet.Abdo@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('112b657d-dea7-4b77-927c-f6683d3a89ae', 'Yaphet', 'G/Tsadik', 0, 1, 20, 1, 'DriveMedical', 'Yaphet.G/Tsadik@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0ef09a7f-e186-4d81-a82b-33c5cc27e7e8', 'Yonatan', 'Getamesay', 0, 1, 20, 1, 'DriveMedical', 'Yonatan.Getamesay@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bb70492-30c9-4c5a-b091-5c3091bb1921', 'Zewde', 'Tiblets', 0, 1, 20, 1, 'DriveMedical', 'Zewde.Tiblets@DriveMedical', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ad5e85d8-a5cc-4fe1-8bd5-cd206c79da04', 'Abeba', 'Degefu', 0, 1, 22, 1, 'DWR', 'Abeba.Degefu@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('019f725d-9fce-455e-bc57-bac1fe758cac', 'Aklilu', 'Tesfaye', 0, 1, 22, 1, 'DWR', 'Aklilu.Tesfaye@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('561b71c2-fa2d-40e2-939c-16dfad34e1cb', 'Alem', 'Gidey', 0, 1, 22, 1, 'DWR', 'Alem.Gidey@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a9828c49-6a9d-48e9-b2e6-d88dd117e1bc', 'Anathole', 'Niyongana', 0, 1, 22, 1, 'DWR', 'Anathole.Niyongana@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0f789132-0558-4ddd-9f3b-5e9d13a33ad3', 'Arsema', 'Abiy', 0, 1, 22, 1, 'DWR', 'Arsema.Abiy@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c674f4d6-0ee7-45ba-ad21-62d708317319', 'Ashenafi', 'Dejen', 0, 1, 22, 1, 'DWR', 'Ashenafi.Dejen@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e97503a5-2802-47df-a927-c37dc7d2fdd0', 'Atnatiwos', 'Solomon', 0, 1, 22, 1, 'DWR', 'Atnatiwos.Solomon@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6446f8b6-0796-4ed3-949c-b771e5eddca2', 'Bereket', 'G/Hiwot', 0, 1, 22, 1, 'DWR', 'Bereket.G/Hiwot@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e837f6cf-779f-4b10-9053-2088809aa9cb', 'Bezawit', 'Lewoyehu', 0, 1, 22, 1, 'DWR', 'Bezawit.Lewoyehu@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('220ef9e6-222e-4dde-bd98-1027ca60c489', 'Biruk', 'Kenaw', 0, 1, 22, 1, 'DWR', 'Biruk.Kenaw@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e1f4769-4b12-471b-8650-71ae7ac11160', 'Brian', 'Gatete', 0, 1, 22, 1, 'DWR', 'Brian.Gatete@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('17f7ba93-20e2-4544-b05b-2389b8ed76cb', 'Christine', 'Uwase', 0, 1, 22, 1, 'DWR', 'Christine.Uwase@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef476', 'Cloudx', 'Integration', 1, 1, 22, 1, 'DWR', 'esadmin@dwr', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4844351c-fc50-45ac-86a8-3107b2fafed6', 'Clx', 'Dwr', 0, 0, 22, 1, 'DWR', 'Clx.Dwr@DWR-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('817E93E3-29E8-409A-9805-5703484C7892', 'Admin', 'Cloudx', 1, 1, 22, 1, 'DWR', 'Admin@DWR', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e482b9ed-fcc6-4d6a-9e3a-50c43de4da3a', 'Elshaday', 'Adamu', 0, 1, 22, 1, 'DWR', 'Elshaday.Adamu@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cd9d2afe-4cb6-48c1-b8ea-eab4d2b5d688', 'Es', 'Dwr', 0, 0, 22, 1, 'DWR', 'Es.Dwr@DWR-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ac71a4e0-dfd8-4b6f-94f2-df554378b1bb', 'Eyerusalem', 'Birhane', 0, 1, 22, 1, 'DWR', 'Eyerusalem.Birhane@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7507dc38-3cc7-40e9-8f7c-4adddd5c6726', 'Feven', 'Berhe', 0, 1, 22, 1, 'DWR', 'Feven.Berhe@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2910F445-BDC2-4767-B3F0-53C52DAA3F7A', 'Henok', 'Hailu', 0, 1, 22, 1, 'DWR', 'Henok.Hailu@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a63f02c6-4301-47f6-8265-6cb470234609', 'Hoquba', 'Getahun', 0, 1, 22, 1, 'DWR', 'Hoquba.Getahun@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('60ed0978-929b-4d01-8d6d-9f4b02582b98', 'Jemila', 'Beshir', 0, 1, 22, 1, 'DWR', 'Jemila.Beshir@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('194e444c-9b38-4c34-be04-636003295fac', 'Jote', 'Daniel', 0, 1, 22, 1, 'DWR', 'Jote.Daniel@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('502bfd53-3fc5-4290-a68e-e274111d2201', 'Kaleab', 'Tariku', 0, 1, 22, 1, 'DWR', 'Kaleab.Tariku@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1c880f9e-47a5-49f9-8eb1-8d3750fb9c46', 'Kenan', 'Esubalewa', 0, 1, 22, 1, 'DWR', 'Kenan.Esubalewa@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2C9E7D4F-6CD1-4D69-A14B-E8DF6FDF1395', 'Kidist', 'Kibatu', 0, 1, 22, 1, 'DWR', 'Kidist.Kibatu@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('21db44d0-1282-4bb9-805a-934fdea1325a', 'Lilina', 'Tesfaye', 0, 1, 22, 1, 'DWR', 'Lilina.Tesfaye@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e018f609-461a-4db9-b796-77bee05748dd', 'Lydia', 'Daniel', 0, 1, 22, 1, 'DWR', 'Lydia.Daniel@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f5570af9-6b77-481d-a7e6-12d318737ca3', 'Mahlet', 'Kornel', 0, 1, 22, 1, 'DWR', 'Mahlet.Kornel@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2671c436-a810-4376-b2a0-951c13837e86', 'Mamar', 'Sewuye', 0, 1, 22, 1, 'DWR', 'Mamar.Sewuye@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('807b38a3-3c6b-4b50-ba14-9fb3a42e804b', 'Mesay', 'Fikru', 0, 1, 22, 1, 'DWR', 'Mesay.Fikru@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('36d49ed5-8584-4724-b6fe-572c1dd91164', 'Mikiyas', 'Leweyehu', 0, 1, 22, 1, 'DWR', 'Mikiyas.Leweyehu@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('83024E3A-DA91-4F74-B898-2F35E595BFD7', 'Misker', 'Tsegaye', 0, 1, 22, 1, 'DWR', 'Misker.Tsegaye@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3fc7f83d-5dc5-404f-aef9-315499874ca0', 'Mussie', 'Alemu', 0, 1, 22, 1, 'DWR', 'Mussie.Alemu@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('29df9b67-61ad-45cd-9fef-875526164009', 'Natnael', 'Alemayehu', 0, 1, 22, 1, 'DWR', 'Natnael.Alemayehu@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('63925e94-77d2-4859-aa09-f0e87e81421f', 'Nshimiyimana', 'Bosco', 0, 1, 22, 1, 'DWR', 'Nshimiyimana.Bosco@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('853dcd63-e7a2-471d-8065-d9e015d9b385', 'Samr', 'Tesfaye', 0, 1, 22, 1, 'DWR', 'Samr.Tesfaye@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ce6f0e26-bb1f-4a02-a942-44fb3de3da27', 'Solomon', 'Tesfaye', 0, 1, 22, 1, 'DWR', 'Solomon.Tesfaye@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('B66B6273-AEB2-4563-B0EF-DB51F78D18D0', 'Tamara', 'Ruel', 0, 1, 22, 1, 'DWR', 'Tamara.Ruel@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('019cd42a-e54a-48b1-bc69-9d917d8205db', 'Tesfahun', 'Tsehaye', 0, 1, 22, 1, 'DWR', 'Tesfahun.Tsehaye@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b81bf5ce-cba3-471f-a9cb-58529c071e14', 'Tibilet', 'Zewde', 0, 1, 22, 1, 'DWR', 'Tibilet.Zewde@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88f7c161-5dcb-4992-8e02-fa307999b8f8', 'Tsedenya', 'Yohannes', 0, 1, 22, 1, 'DWR', 'Tsedenya.Yohannes@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('21095ded-3f0e-47f2-9a27-e0bee158f87e', 'Wibit', 'Yitbarek', 0, 1, 22, 1, 'DWR', 'Wibit.Yitbarek@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e09ea13-206e-4f40-8856-1a8d438a5d3b', 'Yafet', 'Abdo', 0, 1, 22, 1, 'DWR', 'Yafet.Abdo@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('64c00c7b-b98d-4c70-baca-be30856a477a', 'Yaphet', 'G/Tsadik', 0, 1, 22, 1, 'DWR', 'Yaphet.G/Tsadik@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9bd75887-d32e-426c-9f30-485014b6a6a7', 'Yaphet', 'G/Tsadik', 0, 0, 22, 1, 'DWR', 'Yaphet.G/Tsadik@DWR-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6c2fe2fc-8f7e-435e-a9cc-73043f313b00', 'Yonatan', 'Getamesay', 0, 1, 22, 1, 'DWR', 'Yonatan.Getamesay@DWR', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f27a22cb-bbec-49b0-a468-f768634419c8', 'Abeba', 'Degefu', 0, 1, 23, 1, 'Bakkavor', 'Abeba.Degefu@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('062d135d-ca64-40c6-b9bb-3867802aaaac', 'Arsema', 'Abiy', 0, 1, 23, 1, 'Bakkavor', 'Arsema.Abiy@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1df6feed-2068-48da-bd23-9c2246e7f9d8', 'Ashenafi', 'Dejen', 0, 1, 23, 1, 'Bakkavor', 'Ashenafi.Dejen@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('475a2bdd-d9aa-4437-8984-6939bba4b98b', 'Atnatiwos', 'Solomon', 0, 1, 23, 1, 'Bakkavor', 'Atnatiwos.Solomon@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5c4ac877-39b3-4db1-b03b-0c17c78d3406', 'Beakal', 'Deriba', 0, 1, 23, 1, 'Bakkavor', 'Beakal.Deriba@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('426dc928-8951-4f4d-a4f3-8edebd73c312', 'Betelehem', 'Mesfine', 0, 1, 23, 1, 'Bakkavor', 'Betelehem.Mesfine@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4e4eb20e-8071-4925-b2aa-7f4f32134e60', 'Biruk', 'Kenaw', 0, 1, 23, 1, 'Bakkavor', 'Biruk.Kenaw@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4dcc9c81-a293-44f6-8064-12570bf96e71', 'Bro', 'Elias', 0, 0, 23, 1, 'Bakkavor', 'Bro.Elias@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('22dc68d0-7f11-44fd-858f-bc1ccff2a7c0', 'Cloudx', 'Cloudx Inc', 0, 0, 23, 1, 'Bakkavor', 'Cloudx.Cloudx Inc@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('22152bad-8ec8-4e8e-a291-1ed164dd0536', 'Elshaday', 'Adamu', 0, 1, 23, 1, 'Bakkavor', 'Elshaday.Adamu@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cbe8f50b-92d7-43e1-9532-fe7dc319b418', 'Es', 'Twochefs', 0, 0, 23, 1, 'Bakkavor', 'Es.Twochefs@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('dfa18475-e218-11ea-b8dc-22000ab67d3b', 'Esbakkavor', 'Webservice', 0, 1, 23, 1, 'Bakkavor', 'Esbakkavor.Webservice@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('651c13a3-3078-456c-b2e4-0f0f59c3b64e', 'Feven', 'Berhe', 0, 1, 23, 1, 'Bakkavor', 'Feven.Berhe@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cda30f36-1677-45b6-bb32-09d442250bda', 'Girum', 'Tesfaye', 0, 1, 23, 1, 'Bakkavor', 'Girum.Tesfaye@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bae9de8f-ef38-4daa-94e0-36cf6f5ca9c7', 'Henok', 'Hailu', 0, 1, 23, 1, 'Bakkavor', 'Henok.Hailu@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('dcffdb86-9fa3-43d8-8bb8-37195a7adb07', 'Jemila', 'Beshir', 0, 1, 23, 1, 'Bakkavor', 'Jemila.Beshir@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('be85bde0-35c3-4f15-a537-e6167e502b26', 'Jote', 'Daniel', 0, 1, 23, 1, 'Bakkavor', 'Jote.Daniel@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f0cee498-68bc-4032-b752-890fc7324efb', 'Juan', 'Jose', 1, 0, 23, 1, 'Bakkavor', 'Admin@Bakkavor-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8e387ea0-bdd0-45bb-9b8a-8c8fc42f42a6', 'Juanman', 'Juan Manzanarez', 0, 1, 23, 1, 'Bakkavor', 'Juanman.Juan Manzanarez@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2dfd9f9c-20b5-4c00-a019-58b6af650eb8', 'Kaleab', 'Tariku', 0, 1, 23, 1, 'Bakkavor', 'Kaleab.Tariku@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ef644177-27ee-4830-b2e7-1edcbaefab75', 'Kenean', 'Esubalew', 0, 1, 23, 1, 'Bakkavor', 'Kenean.Esubalew@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('357c4005-33c0-4669-b2d9-3222cbe92d75', 'Kidist', 'Kibatu', 0, 1, 23, 1, 'Bakkavor', 'Kidist.Kibatu@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('15b92d46-e77c-4fcc-9fc7-425ce68cc623', 'Kokeb', 'Hailemichael', 0, 1, 23, 1, 'Bakkavor', 'Kokeb.Hailemichael@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ae3548d5-005c-42af-972e-7104009ef3a4', 'Latarsha', 'Holmes', 0, 1, 23, 1, 'Bakkavor', 'Latarsha.Holmes@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9e96999d-1830-4a1a-b622-29bbe7b19f96', 'Lorenaa', 'Lorena Anguiano', 0, 1, 23, 0, 'Bakkavor', 'Lorenaa.Lorena Anguiano@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ba2e7c7d-0443-40fa-a3bb-4360c24c5b32', 'Mahlet', 'Kornel', 0, 1, 23, 1, 'Bakkavor', 'Mahlet.Kornel@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3fb38dd1-be6c-42fb-bca9-51c77be3efbd', 'Mamar', 'Sewuye', 0, 1, 23, 1, 'Bakkavor', 'Mamar.Sewuye@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('baa2c192-4c42-4c34-955f-d9cf26be2f74', 'Mesay', 'Fikru', 0, 1, 23, 1, 'Bakkavor', 'Mesay.Fikru@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5e509d2a-77e9-4df1-9c75-93038f7ceacc', 'Michael', 'Tesfaye', 0, 1, 23, 1, 'Bakkavor', 'Michael.Tesfaye@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('97a931fb-de74-4351-b385-2ac34fbe5681', 'Migrate', 'Test', 0, 1, 23, 1, 'Bakkavor', 'Migrate.Test@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7ce03116-8897-423e-a105-66f7c03e36cb', 'Miki', 'Cloudx', 0, 0, 23, 1, 'Bakkavor', 'Miki.Cloudx@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('140b33ed-fe6a-4186-b6ff-7b0d02ffafac', 'Mikias', 'Leweyehu', 0, 1, 23, 1, 'Bakkavor', 'Mikias.Leweyehu@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cd5ebcaa-02be-4023-a87b-87ed7bf588e3', 'Mikiyas', 'Tefera', 0, 1, 23, 1, 'Bakkavor', 'Mikiyas.Tefera@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0f9c1744-c254-4c08-9224-942595d48d8b', 'Misker', 'Tsegaye', 0, 1, 23, 1, 'Bakkavor', 'Misker.Tsegaye@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a7ea5e35-cabc-4ccd-a4a8-030b2460ef68', 'Mussie', 'Alemu', 0, 1, 23, 1, 'Bakkavor', 'Mussie.Alemu@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7b2dea38-5ed0-4ab7-a1cf-5ba64215fec4', 'Nani', 'Legesse', 0, 1, 23, 1, 'Bakkavor', 'Nani.Legesse@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7cc808be-b9b8-46b9-b1aa-121adea7efe0', 'Natanoy', 'Getamesay', 0, 1, 23, 1, 'Bakkavor', 'Natanoy.Getamesay@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4b065260-6649-487e-a7de-4e2c2dd16118', 'Natnael', 'Alemayehu', 0, 1, 23, 1, 'Bakkavor', 'Natnael.Alemayehu@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8bfafb96-17aa-4323-af59-b20f3ee97c94', 'Natnael', 'Alemayehu', 0, 0, 23, 1, 'Bakkavor', 'Natnael.Alemayehu@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('916d9e60-6a5d-4d24-87b9-16092198389f', 'Quamlea', 'Quantum Success Packaging Inc.', 0, 1, 23, 0, 'Bakkavor', 'Quamlea.Quantum Success Packaging Inc.@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('23596c56-98aa-4888-9f3b-16887b639d2f', 'Raey', 'Yohannes', 0, 1, 23, 1, 'Bakkavor', 'Raey.Yohannes@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c1047e23-3fa2-4e54-b757-88d12edfdd2f', 'Seble', 'Sisay', 0, 1, 23, 1, 'Bakkavor', 'Seble.Sisay@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5602097a-aaa6-4771-b524-67873b210da5', 'Selam', 'Eshete', 0, 1, 23, 1, 'Bakkavor', 'Selam.Eshete@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('984794f5-5d37-4831-b155-376474d23043', 'Solomon', 'Tesfaye', 0, 1, 23, 1, 'Bakkavor', 'Solomon.Tesfaye@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('89b36f86-60ef-4eaf-9b74-d8206646f5ea', 'Tamara', 'Ruel', 0, 1, 23, 1, 'Bakkavor', 'Tamara.Ruel@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('067d3500-3cff-4bde-871f-f4e7948165dd', 'Teshager', 'Mekuria', 0, 1, 23, 1, 'Bakkavor', 'Teshager.Mekuria@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('14b355d9-90db-46f9-a409-fab85aa7d86a', 'Tiblets', 'Zewde', 0, 1, 23, 1, 'Bakkavor', 'Tiblets.Zewde@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('dfa1da66-e218-11ea-b8dc-22000ab67d3b', 'Tiblets', 'Zewde', 0, 0, 23, 1, 'Bakkavor', 'Tiblets.Zewde@Bakkavor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('69053c63-e095-453c-9429-13e9393eb583', 'Tibli', 'Tibli', 0, 1, 23, 1, 'Bakkavor', 'Tibli.Tibli@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bb55b7a6-752d-460c-818d-cc8378edc1a1', 'Tsedenya', 'Yohannes', 0, 1, 23, 1, 'Bakkavor', 'Tsedenya.Yohannes@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('482b87df-9775-488e-99fa-ea806b8fe37e', 'Admin', 'Cloudx', 1, 1, 23, 1, 'Bakkavor', 'Admin@Bakkavor', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a14c0225-95cd-4dca-a113-f8fa4e38aa79', 'Wibit', 'Yitibarek', 0, 1, 23, 1, 'Bakkavor', 'Wibit.Yitibarek@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8f8153fc-b05d-4ae8-83c2-630db25032c2', 'Yafet', 'Abdo', 0, 1, 23, 1, 'Bakkavor', 'Yafet.Abdo@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d77f9d1e-1030-412b-9dd0-c3accb3e3229', 'Yaphet', 'G/Tsadik', 0, 1, 23, 1, 'Bakkavor', 'Yaphet.G/Tsadik@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4c9384d7-f7ed-46cf-8fd9-239f5c74846c', 'Yonatan', 'Getamesay', 0, 1, 23, 1, 'Bakkavor', 'Yonatan.Getamesay@Bakkavor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('09735e4b-47ba-4787-bc18-45aec0025fca', 'Abeba', 'Degefu', 0, 1, 26, 1, 'SteelTech', 'Abeba.Degefu@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0ce0de1d-49eb-464f-a9dc-36c8fe5bd356', 'Admin', 'Steeltech', 1, 1, 26, 1, 'SteelTech', 'Admin@SteelTech', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9ad4af92-2273-4b77-b0e5-8438a95d03b7', 'Aklilu', 'Tesfaye', 0, 1, 26, 1, 'SteelTech', 'Aklilu.Tesfaye@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2c98f79b-77b8-4d4a-9f7c-73e9e28466c9', 'Alem', 'Gidey', 0, 1, 26, 1, 'SteelTech', 'Alem.Gidey@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('358642da-4563-4a83-a0c7-e7f1889e26a2', 'Arsema', 'Abiy', 0, 1, 26, 1, 'SteelTech', 'Arsema.Abiy@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d8ca9d24-70b8-47e8-ab9c-05749ebb4e48', 'Arsema', 'Abiy', 0, 1, 26, 0, 'SteelTech', 'arsema@steel', 'smrawittesfaye2018@gmail.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f121c812-0818-4a9a-9dc6-e9d6c4f16d9a', 'Ashenafi', 'Dejen', 0, 1, 26, 1, 'SteelTech', 'Ashenafi.Dejen@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('427f25ee-2f2f-433c-b022-f464e909d7ff', 'Beakal', 'Deriba', 0, 1, 26, 1, 'SteelTech', 'Beakal.Deriba@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1087907b-36d5-4efb-8938-c340f9f4c5c2', 'Bezawit', 'Lewoyehu', 0, 1, 26, 1, 'SteelTech', 'Bezawit.Lewoyehu@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f76ac768-df44-43b8-8d51-6e14bedfa76a', 'Biruk', 'Kenaw', 0, 1, 26, 1, 'SteelTech', 'Biruk.Kenaw@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ff0b18eb-c3a5-408a-8452-259fb09afcc4', 'Bro', 'Elias', 0, 0, 26, 1, 'SteelTech', 'Bro.Elias@SteelTech-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef486', 'Cloudx', 'Integration', 1, 1, 26, 1, 'SteelTech', 'esadmin@steel', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e3448e5d-f607-440e-9583-d9ec251e9c5f', 'Elshaday', 'Adamu', 0, 1, 26, 1, 'SteelTech', 'Elshaday.Adamu@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('15508d60-dcf7-4b55-9016-a37a4dd4f7ce', 'Emebet', 'Emebet', 0, 1, 26, 1, 'SteelTech', 'Emebet.Emebet@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88d3522c-8f76-41e0-8ed0-dc8f9d300391', 'Es', 'Steel', 0, 0, 26, 1, 'SteelTech', 'Es.Steel@SteelTech-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4a91bfe4-d041-452f-80a4-709fec7a7557', 'Feven', 'Berhe', 0, 1, 26, 1, 'SteelTech', 'Feven.Berhe@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f518573e-178d-418f-b5a6-edb512517e9c', 'Fiker', 'Steel', 0, 1, 26, 1, 'SteelTech', 'Fiker.Steel@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('63b24a8f-a40f-4adb-90ac-1241d54ae0ff', 'Hoquba', 'Getahun', 0, 1, 26, 1, 'SteelTech', 'Hoquba.Getahun@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cfeea4fd-c4bd-4db8-abaa-90552e0524fb', 'Jote', 'Daniel', 0, 1, 26, 1, 'SteelTech', 'Jote.Daniel@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2e97d882-1162-4d78-af7e-e12fb60196d0', 'Kaleab', 'Tariku', 0, 1, 26, 1, 'SteelTech', 'Kaleab.Tariku@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1758186b-7bf5-4be1-9865-fc6a86302762', 'Kenan', 'Kenan', 0, 1, 26, 1, 'SteelTech', 'Kenan.Kenan@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f18811ca-9281-47fd-9de1-c9d0621a317c', 'Kenean', 'Esubalew', 0, 1, 26, 1, 'SteelTech', 'Kenean.Esubalew@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('edcb49f0-69ff-492f-8fe4-66935ec15a68', 'Kidist', 'Kibatu', 0, 1, 26, 1, 'SteelTech', 'Kidist.Kibatu@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a1f0302e-463c-4e18-ab48-9ebc8c7fc47c', 'Mamar', 'Seweyew', 1, 0, 26, 1, 'SteelTech', 'Admin@SteelTech-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('58785c90-1cf6-4ced-90ee-198d564d0939', 'Mikias', 'Leweyehu', 0, 1, 26, 1, 'SteelTech', 'Mikias.Leweyehu@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ffcfeb93-cbb5-45ef-8b5e-20114c8e790a', 'Mikiyas', 'Tefera', 0, 1, 26, 1, 'SteelTech', 'Mikiyas.Tefera@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6adf2a66-0875-4447-bb67-29ea39d9ee84', 'Misker', 'Tsegaye', 0, 1, 26, 1, 'SteelTech', 'Misker.Tsegaye@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cb200cd2-c8df-41c1-aa20-f4c2c737c713', 'Natanoy', 'Getameasy', 0, 1, 26, 1, 'SteelTech', 'Natanoy.Getameasy@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6fe7f567-c517-44b7-b1d4-a90993f7966f', 'Natnael', 'Alemayehu', 0, 1, 26, 1, 'SteelTech', 'Natnael.Alemayehu@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c0c7fe97-c795-4d28-83c2-bf8cb21d70c3', 'Seble', 'Sisay', 0, 1, 26, 1, 'SteelTech', 'Seble.Sisay@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1bfa608c-031f-40ed-b2c2-832a52386926', 'Selam', 'Eshete', 0, 1, 26, 1, 'SteelTech', 'Selam.Eshete@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8c232409-fb3d-489a-8a24-abc451660273', 'Solomon', 'Tesfaye', 0, 1, 26, 1, 'SteelTech', 'Solomon.Tesfaye@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cbfd5a7d-5f8f-42f0-bbce-0cd01c3e5a0c', 'Steel', 'Validation', 0, 1, 26, 1, 'SteelTech', 'Steel.Validation@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fbad6d1f-5394-41fd-a9db-4395a9dd7507', 'Steelbro', 'Elias', 0, 1, 26, 1, 'SteelTech', 'Steelbro.Elias@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0f17e789-4b86-4ad6-82aa-86d49220c691', 'Tiblets', 'Zewde', 0, 1, 26, 1, 'SteelTech', 'Tiblets.Zewde@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3d0ceadb-63b9-4a80-8ae9-2a509f6ff91a', 'Tesfahun', 'Tsehaye', 0, 1, 26, 1, 'SteelTech', 'Tesfahun.Tsehaye@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('aea2608a-fa85-49b2-a547-894eadfa400b', 'Tita', 'Steel', 0, 1, 26, 1, 'SteelTech', 'Tita.Steel@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e80808d5-bba6-4c50-8add-afc29aa41538', 'Tsedenya', 'Yohannes', 0, 1, 26, 1, 'SteelTech', 'Tsedenya.Yohannes@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b1c03fb-0fec-4c1c-b714-1f489b63f0a5', 'Webservice', 'Steel', 0, 1, 26, 1, 'SteelTech', 'Webservice.Steel@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7886efa3-ff31-44db-a663-28acdd4dafa7', 'Wibit', 'Yitibarek', 0, 1, 26, 1, 'SteelTech', 'Wibit.Yitibarek@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0e49999f-5e11-425b-8c02-9728995fb5c9', 'Wibit', 'Yitbarek', 0, 0, 26, 1, 'SteelTech', 'Wibit.Yitbarek@SteelTech-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6314483b-1f4a-4504-8a94-19f6b41366ef', 'Yafet', 'Abdo', 0, 1, 26, 1, 'SteelTech', 'Yafet.Abdo@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('700d1b29-29f2-4bbc-8175-b825d5be8540', 'Yaphet', 'G/Tsadik', 0, 1, 26, 1, 'SteelTech', 'Yaphet.G/Tsadik@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a0431eac-9c8b-4b32-aed7-a8d11abb9c5c', 'Yonatan', 'Getamesay', 0, 1, 26, 1, 'SteelTech', 'Yonatan.Getamesay@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c763f3db-3ffc-4063-af1a-7ad51b855e07', 'Zewde', 'Tiblets', 0, 1, 26, 1, 'SteelTech', 'Zewde.Tiblets@SteelTech', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d558873a-a358-4038-8739-5cc2766692ed', 'Admin', 'Cloudx', 1, 0, 27, 1, 'Nestle', 'Admin@Nestle-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('65d3311b-a976-4d59-80c9-c3db0c80f20a', 'Bro', 'Elias', 0, 0, 27, 1, 'Nestle', 'Bro.Elias@Nestle-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef504', 'Cloudx', 'Integration', 1, 1, 27, 1, 'Nestle', 'esadmin@nestle', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1116883f-f2ee-48ef-bdc8-fc661c546306', 'Elias', 'Wondimu', 0, 1, 27, 1, 'Nestle', 'Elias.Wondimu@Nestle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c3b2d6f8-faca-47e1-9699-a12b02f2bcd3', 'Fiyameta', 'Birhanu', 0, 1, 27, 1, 'Nestle', 'Fiyameta.Birhanu@Nestle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('547d8213-0770-40cc-a36d-31a5215c5213', 'Admin', 'Cloudx', 1, 1, 27, 1, 'Nestle', 'Admin@Nestle', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6e2462e8-d84e-4687-b482-7fcedee9043f', 'Girum', 'Tesfaye', 0, 1, 27, 1, 'Nestle', 'Girum.Tesfaye@Nestle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ee819716-07b4-4a75-8cc6-5a08d50ef579', 'Gutu', 'Bahiru', 0, 1, 27, 1, 'Nestle', 'Gutu.Bahiru@Nestle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9b2e4b73-6c39-4871-9b0c-bc041e591e60', 'Henok', 'Hailu', 0, 1, 27, 1, 'Nestle', 'Henok.Hailu@Nestle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6e473563-05f8-41d6-b2b7-107b44bee6b5', 'Kidus', 'Merid', 0, 1, 27, 1, 'Nestle', 'Kidus.Merid@Nestle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d3adb752-5f85-4271-86ce-49d5dd99ac5b', 'Raey', 'Yohannes', 0, 1, 27, 1, 'Nestle', 'Raey.Yohannes@Nestle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6a1b35f6-a2c4-40d8-bb34-be680149e39e', 'Tamara', 'Ruel', 0, 1, 27, 1, 'Nestle', 'Tamara.Ruel@Nestle', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e44a68d6-e018-11ec-ab24-0a62e852177b', '15002004', 'Cloudx Inc.', 0, 0, 28, 1, 'AVGroup', '15002004.Cloudx Inc.@AVGroup-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('058da8ab-58d1-4f18-93dc-ae7d11599e2d', 'Abeba', 'Degefu', 0, 1, 28, 1, 'AVGroup', 'Abeba.Degefu@AVGroup', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a594d9a5-25c1-4419-b831-13438c19f46d', 'Arsema', 'Abiy', 0, 1, 28, 1, 'AVGroup', 'Arsema.Abiy@AVGroup', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('05f64406-8fb3-4515-9db9-2f9e3a2e97ed', 'Ashenafi', 'Dejen', 0, 1, 28, 1, 'AVGroup', 'Ashenafi.Dejen@AVGroup', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8fc9173b-e783-486c-8161-b751781aca5c', 'Admin', 'Cloudx', 1, 1, 28, 1, 'AVGroup', 'Admin@AVGroup', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7578959d-6d8d-4a75-9f1d-0ab06bb10a9c', 'Beakal', 'Deriba', 0, 1, 28, 1, 'AVGroup', 'Beakal.Deriba@AVGroup', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('172f714b-c129-43da-8ebd-ff84b1fa7a67', 'Biruk', 'Kenaw', 0, 1, 28, 1, 'AVGroup', 'Biruk.Kenaw@AVGroup', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('afa71958-cdcc-4a3b-8b71-7b7313dd456f', 'Bro', 'Elias', 0, 0, 28, 1, 'AVGroup', 'Bro.Elias@AVGroup-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c6fcb1ad-2356-4638-a16a-594779a109bb', 'Chris', 'Avg', 1, 0, 28, 1, 'AVGroup', 'Admin@AVGroup', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef474', 'Cloudx', 'Integration', 1, 1, 28, 1, 'AVGroup', 'esadmin@avg', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6c4ca654-e31d-4524-b91a-bd3c750e0949', 'Es', 'Avg', 0, 0, 28, 1, 'AVGroup', 'Es.Avg@AVGroup-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8288d14c-0312-4c72-9581-bba7af918d1d', 'Feven', 'Berhe', 0, 1, 28, 1, 'AVGroup', 'Feven.Berhe@AVGroup', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2b6f137f-2d0f-43ca-b543-12b135d71e38', 'Girum', 'Tesfaye', 0, 1, 28, 1, 'AVGroup', 'Girum.Tesfaye@AVGroup', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4a15a7d4-1a13-4a99-a1da-0eae58947bad', 'Jote', 'Daniel', 0, 1, 28, 1, 'AVGroup', 'Jote.Daniel@AVGroup', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cced26c7-0182-4376-840d-d5a313f6f080', 'Kenean', 'Esubalew', 0, 1, 28, 1, 'AVGroup', 'Kenean.Esubalew@AVGroup', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('01f8e67a-eb32-4b04-9640-31840a95837c', 'Kidist', 'Kibatu', 0, 1, 28, 1, 'AVGroup', 'Kidist.Kibatu@AVGroup', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('edec4130-8ce3-4dbe-8358-5416f55aa50a', 'Kokeb', 'Hailemichael', 0, 1, 28, 1, 'AVGroup', 'Kokeb.Hailemichael@AVGroup', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('15a7b7e4-387a-4f71-b9aa-fcdb6f024ac5', 'Natanoy', 'Getamesay', 0, 1, 28, 1, 'AVGroup', 'Natanoy.Getamesay@AVGroup', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6798c7ec-f7e8-4de0-8c69-ccdfb9e8a37d', 'Samrawit', 'Tesfaye', 0, 1, 28, 1, 'AVGroup', 'Samrawit.Tesfaye@AVGroup', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('11850fc2-9eea-483e-995b-b0d935c74387', 'Solomon', 'Solomon', 0, 0, 28, 1, 'AVGroup', 'Solomon.Solomon@AVGroup-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ba99c324-c5c1-436f-b274-0036f360dadd', 'Solomon', 'Tesfaye', 0, 1, 28, 1, 'AVGroup', 'Solomon.Tesfaye@AVGroup', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a03b9000-31ed-4694-aeac-f0fe815f86de', 'Tiblets', 'Zewde', 0, 1, 28, 1, 'AVGroup', 'Tiblets.Zewde@AVGroup', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b607ee3f-69ff-4478-972b-8405787cd91c', 'Wibit', 'Yitbarek', 0, 1, 28, 1, 'AVGroup', 'Wibit.Yitbarek@AVGroup', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4d810cf0-de8b-45b9-9115-00bbb4a812b9', 'Yafet', 'Adbo', 0, 1, 28, 1, 'AVGroup', 'Yafet.Adbo@AVGroup', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('79fa5e1e-b4a5-453f-acb0-ff1cef9a9c14', 'Yaphet', 'G/Tsadik', 0, 1, 28, 1, 'AVGroup', 'Yaphet.G/Tsadik@AVGroup', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2dcd9539-6bde-4eae-8164-aa965e0a1fd3', 'Yonatan', 'Getamesay', 0, 1, 28, 1, 'AVGroup', 'Yonatan.Getamesay@AVGroup', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6118178b-a40c-42e4-aafb-52f31c880f5d', 'Abeba', 'Degefu', 0, 1, 34, 1, 'Rosewood', 'Abeba.Degefu@Rosewood', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7d042535-14f3-42ed-9ed1-a4a1d56aa989', 'Alem', 'Gidey', 0, 1, 34, 1, 'Rosewood', 'Alem.Gidey@Rosewood', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('21a909ad-d519-4955-a2be-97d8a9c2de6a', 'Arsema', 'Abiy', 0, 1, 34, 1, 'Rosewood', 'Arsema.Abiy@Rosewood', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f22a62bd-f616-40e2-82cd-576db9d2bcc1', 'Ashenafi', 'Dejen', 0, 1, 34, 1, 'Rosewood', 'Ashenafi.Dejen@Rosewood', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0441c9b-fe2c-4a76-9550-26a04cd422aa', 'Bereket', 'G/Hiwot', 0, 1, 34, 1, 'Rosewood', 'Bereket.G/Hiwot@Rosewood', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a0c8cfb1-2609-4b04-87a0-73ef5590fd4d', 'Biruk', 'Kenaw', 0, 1, 34, 1, 'Rosewood', 'Biruk.Kenaw@Rosewood', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e67220dd-402c-4e8f-8c7b-65d359b1ecb9', 'Bro', 'Elias', 0, 0, 34, 1, 'Rosewood', 'Bro.Elias@Rosewood-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef454', 'Cloudx', 'Integration', 1, 1, 34, 1, 'Rosewood', 'esadmin@rosewood', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cc0f43f4-d9ef-4c0f-b67b-b5ab37d1a2ff', 'Es', 'Rosewood', 0, 0, 34, 1, 'Rosewood', 'Es.Rosewood@Rosewood-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c2c09eb4-5c8b-4347-9c56-13e29c520488', 'Kenan', 'Esubalew', 0, 1, 34, 1, 'Rosewood', 'Kenan.Esubalew@Rosewood', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7f0d22e0-e14e-4f4f-b0bc-02cb2fd0d610', 'Kidist', 'Kibatu', 0, 1, 34, 1, 'Rosewood', 'Kidist.Kibatu@Rosewood', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e687855b-0fd5-412e-8e02-d33b6fbd6597', 'Mahlet', 'Tesfay', 0, 1, 34, 1, 'Rosewood', 'Mahlet.Tesfay@Rosewood', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('39406455-9623-4b9e-b3c8-6cce4446b70c', 'Melat', 'Mitiku', 0, 1, 34, 1, 'Rosewood', 'Melat.Mitiku@Rosewood', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bf050d5d-4ea3-4233-aa45-902d0d92ec8e', 'Mikiyas', 'Tefera', 0, 1, 34, 1, 'Rosewood', 'Mikiyas.Tefera@Rosewood', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('80112105-ED1E-4423-B2B5-639BD7404EC4', 'Admin', 'Cloudx', 1, 1, 34, 1, 'Rosewood', 'Admin@Rosewood', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('77025c8a-86b4-4c4c-97ff-d060f9244180', 'Tesfahun', 'Tsehaye', 0, 1, 34, 1, 'Rosewood', 'Tesfahun.Tsehaye@Rosewood', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0c6dc9f9-248d-4598-ba47-85068b19be64', 'Wibit', 'Yitbarek', 0, 1, 34, 1, 'Rosewood', 'Wibit.Yitbarek@Rosewood', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('65c5ceba-a986-4ea7-bd91-09bd4be9f3f4', 'Yafet', 'Abdo', 0, 1, 34, 1, 'Rosewood', 'Yafet.Abdo@Rosewood', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2a44623c-f2aa-4732-ba84-8e1dc514b23f', 'Yonatan', 'Getamesay', 0, 1, 34, 1, 'Rosewood', 'Yonatan.Getamesay@Rosewood', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fcbddfdb-77e6-4ba3-ae5c-a435ae2e37f0', 'Abeba', 'Degefu', 0, 1, 35, 1, 'H&HAuto', 'Abeba.Degefu@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1A431CE8-3F2F-4B6E-AFDE-FDFAA275B9A3', 'Admin', 'Cloudx', 1, 1, 35, 1, 'H&HAuto', 'Admin@H&HAuto', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a90c8a5e-5029-4318-8af5-d66d651d6ffa', 'Aklilu', 'Tesfaye', 0, 1, 35, 1, 'H&HAuto', 'Aklilu.Tesfaye@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b99514eb-8c9f-4d27-a234-c5706e462372', 'Alem', 'Gidey', 0, 1, 35, 1, 'H&HAuto', 'Alem.Gidey@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2b4600bb-3d78-4b5d-bd99-8b0a32166a7a', 'Anathole', 'Niyongana', 0, 1, 35, 1, 'H&HAuto', 'Anathole.Niyongana@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4b45bab5-98c0-4a95-8b8e-148cc5fce764', 'Arsema', 'Abiy', 0, 1, 35, 1, 'H&HAuto', 'Arsema.Abiy@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('04283043-a760-48d7-8456-1624a62c7f41', 'Ashenafi', 'Dejen', 0, 1, 35, 1, 'H&HAuto', 'Ashenafi.Dejen@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2f596019-5f47-4a92-ade1-03fb38cb29b4', 'Atnatiwos', 'Solomon', 0, 1, 35, 1, 'H&HAuto', 'Atnatiwos.Solomon@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2de13bdb-6bb6-4895-82ca-e4913b20769e', 'Beakal', 'Deriba', 0, 1, 35, 1, 'H&HAuto', 'Beakal.Deriba@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6d746d4e-31db-43a6-bb58-92844c5e5e00', 'Bereket', 'G/Hiwot', 0, 1, 35, 1, 'H&HAuto', 'Bereket.G/Hiwot@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3a4a5a07-7e42-4cac-bdbe-3e8d0a831f67', 'Biruk', 'Kenaw', 0, 1, 35, 1, 'H&HAuto', 'Biruk.Kenaw@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4b22f151-c970-4e7c-897e-24cc60951bbf', 'Brian', 'Gatete', 0, 1, 35, 1, 'H&HAuto', 'Brian.Gatete@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b32d878a-fb5c-4140-9c49-00be94e95209', 'Bro', 'Elias', 0, 0, 35, 1, 'H&HAuto', 'Bro.Elias@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0f002a01-99be-4581-9732-e7b2a652fe0f', 'Chris', 'Cosgrove', 0, 1, 35, 1, 'H&HAuto', 'Chris.Cosgrove@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('50322f0e-1d9e-4eee-b102-fb9e8e13a009', 'Chritsine', 'Chris', 0, 1, 35, 1, 'H&HAuto', 'Chritsine.Chris@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef451', 'Cloudx', 'Integration', 1, 1, 35, 1, 'H&HAuto', 'esadmin@handh', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4c77a7ff-02a3-4919-9575-c946066d1517', 'Elshaday', 'Adamu', 0, 1, 35, 1, 'H&HAuto', 'Elshaday.Adamu@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('416ea885-7e7b-48ba-a15e-09b766a147e7', 'Es', 'Handhauto', 0, 0, 35, 1, 'H&HAuto', 'Es.Handhauto@H&HAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0e34c28c-6536-4a3f-a7a6-b804849b53c7', 'Eyerusalem', 'Birhane', 0, 1, 35, 1, 'H&HAuto', 'Eyerusalem.Birhane@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a31bc548-b245-40c1-9a0b-951499837958', 'Feven', 'Berehe', 0, 1, 35, 1, 'H&HAuto', 'Feven.Berehe@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c818c205-d771-4ef4-b189-903ca73c8ea9', 'Gideon', 'Bereket', 0, 1, 35, 1, 'H&HAuto', 'Gideon.Bereket@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('66fd851f-42d0-4ae9-beb7-596923abb159', 'Handh', 'Supervisor', 0, 1, 35, 1, 'H&HAuto', 'Handh.Supervisor@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('35668820-2f8c-4e12-900e-501bd54b8e47', 'Jote', 'Daniel', 0, 1, 35, 1, 'H&HAuto', 'Jote.Daniel@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5d77cd6e-7481-4cb5-b739-441b72037cfe', 'Juan', 'Jose', 1, 0, 35, 1, 'H&HAuto', 'Admin@H&HAuto-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2762ae93-bbc0-4378-8936-2e5f1077b830', 'Kalaeb', 'Weldegebrial', 0, 1, 35, 1, 'H&HAuto', 'Kalaeb.Weldegebrial@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('86ac833f-0488-4e32-b76f-8699cb0ad032', 'Kaleab', 'Tariku', 0, 1, 35, 1, 'H&HAuto', 'Kaleab.Tariku@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('da92687d-fc6e-43cf-aacc-39321c7e3de9', 'Kenean', 'Esubalew', 0, 1, 35, 1, 'H&HAuto', 'Kenean.Esubalew@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b256f7d1-122f-4b88-abf7-3c9a423d92fb', 'Kidist', 'Kibatu', 0, 1, 35, 1, 'H&HAuto', 'Kidist.Kibatu@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('90b426d2-a599-4a0c-89ef-f65f8dd4251b', 'Kokeb', 'Hailemichael', 0, 1, 35, 1, 'H&HAuto', 'Kokeb.Hailemichael@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('85cb71d4-91a8-4e2d-a43b-8664a920c711', 'Mahlet', 'Bekele', 0, 1, 35, 1, 'H&HAuto', 'Mahlet.Bekele@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1569298b-1105-4028-a25e-1645c6b52d9f', 'Melat', 'Mitiku', 0, 1, 35, 1, 'H&HAuto', 'Melat.Mitiku@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('998b3b03-6d01-428d-bad3-4c5dd9d3dec6', 'Mikias', 'Leweyehu', 0, 1, 35, 1, 'H&HAuto', 'Mikias.Leweyehu@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4754bc9f-3b60-459d-8e98-7fb2204d392e', 'Mikiyas', 'Tefera', 0, 1, 35, 1, 'H&HAuto', 'Mikiyas.Tefera@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d3362bc5-9293-4f07-82c7-96813fff9b91', 'Misker', 'Tsegaye', 0, 1, 35, 1, 'H&HAuto', 'Misker.Tsegaye@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cc2b0f8f-c00f-4af3-a01a-e95c38a12e31', 'Natnael', 'Alemayehu', 0, 1, 35, 1, 'H&HAuto', 'Natnael.Alemayehu@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4a89ad63-c750-42eb-b0db-5eb02cfdb599', 'Nshimiyimana', 'Jean', 0, 1, 35, 1, 'H&HAuto', 'Nshimiyimana.Jean@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('838c2026-d719-4a07-9888-e3b13ae3222f', 'Seble', 'Sisay', 0, 1, 35, 1, 'H&HAuto', 'Seble.Sisay@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('38beedae-7078-4b44-b563-5261d6763dfa', 'Selam', 'Eshete', 0, 1, 35, 1, 'H&HAuto', 'Selam.Eshete@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f7715050-8996-44e0-875e-a1ea75edd964', 'Solomon', 'Tesfaye', 0, 1, 35, 1, 'H&HAuto', 'Solomon.Tesfaye@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d068ab13-d048-4ae1-9a0f-f0935a9722cc', 'Tesfahun', 'Tsehaye', 0, 1, 35, 1, 'H&HAuto', 'Tesfahun.Tsehaye@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('27cee257-aa38-45ad-8880-bd13fe1da728', 'Tiblets', 'Zewde', 0, 1, 35, 1, 'H&HAuto', 'Tiblets.Zewde@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('982184a2-fa7e-42f4-9a7b-1d59c6badae6', 'Tsedenya', 'Yohannes', 0, 1, 35, 1, 'H&HAuto', 'Tsedenya.Yohannes@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('db3e4817-7918-4328-a034-bd7a3a850b9b', 'Wibit', 'Yitbarek', 0, 1, 35, 1, 'H&HAuto', 'Wibit.Yitbarek@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8748d3de-d528-4064-8432-eedb797974d2', 'Yafet', 'Abdo', 0, 1, 35, 1, 'H&HAuto', 'Yafet.Abdo@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7dd2fcb1-6863-474f-9141-88a674554a3b', 'Yaphet', 'G/Tsadik', 0, 1, 35, 1, 'H&HAuto', 'Yaphet.G/Tsadik@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e640429-8fbe-4192-af6f-bcda9a767081', 'Yonatan', 'Getamesay', 0, 1, 35, 1, 'H&HAuto', 'Yonatan.Getamesay@H&HAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f396726c-332d-4aeb-baad-aebfc5022af6', 'Ross', 'Aptean', 0, 1, 37, 1, 'MissionPharmacal', 'Ross.Aptean@MissionPharmacal', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0fd7d112-d5ec-41ed-93d7-48753b1c8fcd', 'Admin', 'Cloudx', 1, 0, 50, 1, '24M', 'Admin@24M-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6cac0453-c224-413f-a674-ab7fd126f8a8', 'Abeba', 'Degefu', 0, 1, 50, 1, '24M', 'Abeba.Degefu@24M', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4f956bce-4da8-47c9-8b6c-60f6fbaaeed9', 'Aklilu', 'Tesfaye', 0, 1, 50, 1, '24M', 'Aklilu.Tesfaye@24M', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0847ecbb-0685-43fa-add5-1c621c2f4aa1', 'Alem', 'Gidey', 0, 1, 50, 1, '24M', 'Alem.Gidey@24M', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('aabf8c2e-1af5-4981-acf7-102ba29148bf', 'Arsema', 'Abiy', 0, 1, 50, 1, '24M', 'Arsema.Abiy@24M', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3b914c71-7c75-458d-a0d8-ec047d56128a', 'Ashenafi', 'Dejen', 0, 1, 50, 1, '24M', 'Ashenafi.Dejen@24M', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2c65dc6f-a626-48d4-9505-cc5442efd38a', 'Bereket', 'G/Hiwot', 0, 1, 50, 1, '24M', 'Bereket.G/Hiwot@24M', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9b8a9e55-6443-483c-a225-182bc362febb', 'Biruk', 'Kenaw', 0, 1, 50, 1, '24M', 'Biruk.Kenaw@24M', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e1b39a82-6efb-4f4e-8ed3-bbbd0a95fc40', 'Bro', 'Elias', 0, 0, 50, 1, '24M', 'Bro.Elias@24M-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef490', 'Cloudx', 'Integration', 1, 1, 50, 1, '24M', 'esadmin@24m', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b16c721e-36a4-4cf8-80c6-86240982a5bd', 'Dave', 'Solomon', 0, 1, 50, 1, '24M', 'Dave.Solomon@24M', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2ac535d1-a614-47cb-8d2a-172797889c00', 'Es', '24M', 0, 0, 50, 1, '24M', 'Es.24M@24M-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4b972106-7ad8-40aa-b2eb-5653063a2ad9', 'Feven', 'Berhe', 0, 1, 50, 1, '24M', 'Feven.Berhe@24M', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8d422a42-a37f-4447-b090-6489bedfe1a1', 'Fiker', 'Getachew', 0, 1, 50, 1, '24M', 'Fiker.Getachew@24M', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('20944b1b-3d1e-4ef7-878c-80aaca146cb8', 'Jote', 'Daniel', 0, 1, 50, 1, '24M', 'Jote.Daniel@24M', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('077a1fe1-f11f-45eb-82f6-a23f1f8ee743', 'Juan', 'Jose', 1, 0, 50, 1, '24M', 'Admin@24M-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e9664eda-295f-4907-b769-2a62b3579345', 'Kidist', 'Kibatu', 0, 1, 50, 1, '24M', 'Kidist.Kibatu@24M', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('eac2566f-76c4-4f87-9de2-3350968f7ea5', 'Mikias', 'Leweyehu', 0, 1, 50, 1, '24M', 'Mikias.Leweyehu@24M', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('38d60759-8f53-4b67-88c6-65866ea8fda6', 'Mikiyas', 'Leweyehu', 0, 1, 50, 1, '24M', 'Mikiyas.Leweyehu@24M', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0a8720a5-b9ea-47c6-88b4-247ae27b38f7', 'Philip', 'Daniel', 0, 1, 50, 1, '24M', 'Philip.Daniel@24M', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('54230d20-bbee-480b-b705-539ae7adad6e', 'Selam', 'Eshete', 0, 1, 50, 1, '24M', 'Selam.Eshete@24M', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('690f8fc0-d25c-441e-8c8d-3e4542ee6e1b', 'Tesfahun', 'Tsehaye', 0, 1, 50, 1, '24M', 'Tesfahun.Tsehaye@24M', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('62c19511-cc4a-4dae-af36-7c0db7a4125d', 'Wibit', 'Yitbarek', 0, 1, 50, 1, '24M', 'Wibit.Yitbarek@24M', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('873d9596-0bc1-428c-a2dd-af3f68cd47a8', 'Yonatan', 'Getamesay', 0, 1, 50, 1, '24M', 'Yonatan.Getamesay@24M', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('30DCE2B7-CDF6-452B-A88A-10413FFA5DB7', 'Admin', 'Acacia', 1, 1, 58, 1, 'Acacia', 'Admin@Acacia', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d88bce61-2f2e-457f-960c-7c96a79b6364', 'Alem', 'Gidey', 0, 1, 58, 1, 'Acacia', 'Alem.Gidey@Acacia', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ae7d2f49-bc47-456c-ab20-a43126275b84', 'Ashenafi', 'Dejen', 0, 1, 58, 1, 'Acacia', 'Ashenafi.Dejen@Acacia', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2c6e68ca-001f-4e24-a091-fa913979c34e', 'Beakal', 'Deriba', 0, 1, 58, 1, 'Acacia', 'Beakal.Deriba@Acacia', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7802fbe3-70d6-408a-ae0c-abfae788ac57', 'Bezawit', 'Lewoyehu', 0, 1, 58, 1, 'Acacia', 'Bezawit.Lewoyehu@Acacia', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('be222482-6f67-4e3b-aeca-103e2ca3ae84', 'Feven', 'Berhe', 0, 1, 58, 1, 'Acacia', 'Feven.Berhe@Acacia', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c018fbdd-ae6f-4c7e-9f46-0bb30c8ab506', 'Gega', 'Acacia', 0, 1, 58, 1, 'Acacia', 'Gega.Acacia@Acacia', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('814e7869-d9c1-4993-bc45-787e21d1b78b', 'Jote', 'Daniel', 0, 1, 58, 1, 'Acacia', 'Jote.Daniel@Acacia', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('07b3582f-6a5d-4019-9f7e-9d52d4b695fe', 'Mahlet', 'Tesfay', 0, 1, 58, 1, 'Acacia', 'Mahlet.Tesfay@Acacia', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('13a1e64f-6eb2-493f-917c-7899d998f255', 'Samrawit', 'Yohalashet', 0, 1, 58, 1, 'Acacia', 'Samrawit.Yohalashet@Acacia', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('829f287c-18cf-4b02-a4ea-2cee8f96b4fa', 'Selam', 'Amare', 0, 1, 58, 1, 'Acacia', 'Selam.Amare@Acacia', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0b546f42-f569-4c83-8c9d-03ce0977d024', 'Solomon', 'Tesfaye', 0, 1, 58, 1, 'Acacia', 'Solomon.Tesfaye@Acacia', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('16329d64-abee-42b1-90ae-4561950b85eb', 'Tesfahun', 'Tsehaye', 0, 1, 58, 1, 'Acacia', 'Tesfahun.Tsehaye@Acacia', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7c9d79bb-ea5e-45a9-a31b-fd62ccb5e64e', 'Thomas', 'Mezmur', 0, 1, 58, 1, 'Acacia', 'Thomas.Mezmur@Acacia', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a231cd57-3abf-4ec1-a2d4-b8525a030a01', 'Wibit', 'Yitbarek', 0, 1, 58, 1, 'Acacia', 'Wibit.Yitbarek@Acacia', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4f438f7a-387c-4bca-ad01-5cf0e7641bd9', 'Yafet', 'Abdo', 0, 1, 58, 1, 'Acacia', 'Yafet.Abdo@Acacia', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0c16ed15-fdb1-49dc-afdf-e2ebd7d7f97c', 'Yaphet', 'G/Tsadik', 0, 1, 58, 1, 'Acacia', 'Yaphet.G/Tsadik@Acacia', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6b829d1a-820d-45a3-972e-ae1a609048d2', 'Abeba', 'Degefu', 0, 1, 61, 1, 'NelsonAuto', 'Abeba.Degefu@NelsonAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c5ded325-5312-4f47-b9fc-57b86093fc21', 'Admin', 'Nelsonauto', 1, 1, 61, 1, 'NelsonAuto', 'Admin@NelsonAuto', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9bb52a08-4a68-4bfc-87fb-e5a124308fc9', 'Aklilu', 'Tesfaye', 0, 1, 61, 1, 'NelsonAuto', 'Aklilu.Tesfaye@NelsonAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('96af9b1d-cb36-418d-a8f0-4c6614d51b9c', 'Alem', 'Gidey', 0, 1, 61, 1, 'NelsonAuto', 'Alem.Gidey@NelsonAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a578abb0-ac06-436e-ae5c-30064315315f', 'Anathole', 'Niyonagana', 0, 1, 61, 1, 'NelsonAuto', 'Anathole.Niyonagana@NelsonAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('df449238-73a5-4660-b4a7-2d593fd51a23', 'Arsema', 'Abiy', 0, 1, 61, 1, 'NelsonAuto', 'Arsema.Abiy@NelsonAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3656653a-9c04-4da8-b42d-946117c0de27', 'Arsema', 'Abiy', 0, 0, 61, 1, 'NelsonAuto', 'Arsema.Abiy@NelsonAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1148f92a-12ca-4d8a-ae1d-001849ad7a40', 'Ashenafi', 'Dejen', 0, 1, 61, 1, 'NelsonAuto', 'Ashenafi.Dejen@NelsonAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a6ed66aa-efe9-4088-bdfa-73662f8b5d7e', 'Beakal', 'Deriba', 0, 1, 61, 1, 'NelsonAuto', 'Beakal.Deriba@NelsonAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('38817b85-ec08-4891-aef8-7862679b3baa', 'Bereket', 'G/Hiwot', 0, 1, 61, 1, 'NelsonAuto', 'Bereket.G/Hiwot@NelsonAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b2791f40-7901-4842-8bc0-bf0fc8121a5e', 'Biruk', 'Kenaw', 0, 1, 61, 1, 'NelsonAuto', 'Biruk.Kenaw@NelsonAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('85776b79-bcea-4911-b2a9-6c12f7c7d014', 'Brian', 'Gatete', 0, 1, 61, 1, 'NelsonAuto', 'Brian.Gatete@NelsonAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a46a0835-fc89-475c-ac2a-84ea406a9e4f', 'Chritsine', 'Chris', 0, 1, 61, 1, 'NelsonAuto', 'Chritsine.Chris@NelsonAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef466', 'Cloudx', 'Integration', 1, 1, 61, 1, 'NelsonAuto', 'esadmin@nelson', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f74be33a-37e4-4bc7-8e9d-5057472cc959', 'Dev', 'Dev', 0, 0, 61, 1, 'NelsonAuto', 'Dev.Dev@NelsonAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1c03627a-9418-401f-bd8e-2cae5737fc9a', 'Esnelson', 'Esnelso', 0, 1, 61, 1, 'NelsonAuto', 'Esnelson.Esnelso@NelsonAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('280657e2-0ef1-4527-a9d5-a039074cf546', 'Feven', 'Berhe', 0, 1, 61, 1, 'NelsonAuto', 'Feven.Berhe@NelsonAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9882070e-8c80-4e04-adda-e78e5a9a574e', 'Mahlet', 'Tesfay', 0, 1, 61, 1, 'NelsonAuto', 'Mahlet.Tesfay@NelsonAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0a7c5040-8478-440b-b9b9-54220d088a23', 'Mikias', 'Leweyehu', 0, 1, 61, 1, 'NelsonAuto', 'Mikias.Leweyehu@NelsonAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9cab90fc-c4be-4b40-80c5-8516152e4952', 'Misker', 'Tesgaye', 0, 1, 61, 1, 'NelsonAuto', 'Misker.Tesgaye@NelsonAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ab1a0bb0-4869-485a-8d63-e6cb5043c89e', 'Nshimiyimana', 'Jean', 0, 1, 61, 1, 'NelsonAuto', 'Nshimiyimana.Jean@NelsonAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a8bd9634-11dc-4f36-90fc-18899a6bfb40', 'Selam', 'Eshete', 0, 1, 61, 1, 'NelsonAuto', 'Selam.Eshete@NelsonAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7fb451f4-0c95-4749-bef1-a8dbbe8e2d8a', 'Solomon', 'Tesfaye', 0, 1, 61, 1, 'NelsonAuto', 'Solomon.Tesfaye@NelsonAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ce527932-4bc7-4abd-8605-69014f6b9c24', 'Tesfahun', 'Tsehaye', 0, 1, 61, 1, 'NelsonAuto', 'Tesfahun.Tsehaye@NelsonAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7eb0c939-968c-400c-92fd-ce4484384a4e', 'Wibit', 'Yitibarek', 0, 1, 61, 1, 'NelsonAuto', 'Wibit.Yitibarek@NelsonAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5c359022-1765-4b9f-a677-a93f586b48fb', 'Yafet', 'Abdo', 0, 1, 61, 1, 'NelsonAuto', 'Yafet.Abdo@NelsonAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c01ac6bd-7009-4d25-be9d-78b2da6b4b52', 'Yaphet', 'G/Tsadik', 0, 1, 61, 1, 'NelsonAuto', 'Yaphet.G/Tsadik@NelsonAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6afb302a-6a7c-4c99-971f-d5a6f8d8ddff', 'Yonatan', 'Getamesay', 0, 1, 61, 1, 'NelsonAuto', 'Yonatan.Getamesay@NelsonAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('36ae6f01-2fba-4641-ac7a-617041e09932', 'Abeba', 'Degefu', 0, 1, 63, 1, 'HardyDiagnostics', 'Abeba.Degefu@HardyDiagnostics', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6ef3bf00-8085-4278-929d-e0a388e87dec', 'Arsema', 'Abiy', 0, 1, 63, 1, 'HardyDiagnostics', 'Arsema.Abiy@HardyDiagnostics', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bc37c282-73db-46e8-9392-fad6545cdf69', 'Ashenafi', 'Dejen', 0, 1, 63, 1, 'HardyDiagnostics', 'Ashenafi.Dejen@HardyDiagnostics', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('793345dd-b4f7-4236-9fcb-363a2f6194d4', 'Beakal', 'Deriba', 0, 1, 63, 1, 'HardyDiagnostics', 'Beakal.Deriba@HardyDiagnostics', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('444a8baf-04b8-41ba-9340-48ba784675f0', 'Betelehem', 'Mesfine', 0, 1, 63, 1, 'HardyDiagnostics', 'Betelehem.Mesfine@HardyDiagnostics', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b6efe4e-f0e2-11e9-b055-22000a1f3f3d', 'Biruk', 'Kenaw', 0, 1, 63, 1, 'HardyDiagnostics', 'Biruk.Kenaw@HardyDiagnostics', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a6fb2992-1815-4052-ad78-eb989b430e96', 'Bro', 'Elias', 0, 0, 63, 1, 'HardyDiagnostics', 'Bro.Elias@HardyDiagnostics-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef503', 'Cloudx', 'Integration', 1, 1, 63, 1, 'HardyDiagnostics', 'esadmin@hardy', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7a5bf289-df93-430f-aa6c-84b561e1c91c', 'Eshardy', 'Eshardy', 0, 1, 63, 1, 'HardyDiagnostics', 'Eshardy.Eshardy@HardyDiagnostics', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bbc26837-1482-4e2d-b11f-21c630bb38e3', 'Feven', 'Berhe', 0, 1, 63, 1, 'HardyDiagnostics', 'Feven.Berhe@HardyDiagnostics', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('efcae08d-7f79-11ec-b1f1-0a3b5527d91d', 'Admin', 'Cloudx', 1, 1, 63, 1, 'HardyDiagnostics', 'Admin@HardyDiagnostics', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('756cc36e-9e8e-47e7-8bd7-e441af0a3d7b', 'Hardyapp', 'Hardy', 0, 1, 63, 1, 'HardyDiagnostics', 'Hardyapp.Hardy@HardyDiagnostics', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ed31b6e5-d65b-4947-b1d8-54bc2f4b530e', 'Jote', 'Daniel', 0, 1, 63, 1, 'HardyDiagnostics', 'Jote.Daniel@HardyDiagnostics', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7bc54451-86a9-4138-98c6-8b7e316453c6', 'Juan', 'Jose', 1, 0, 63, 1, 'HardyDiagnostics', 'Admin@HardyDiagnostics-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d9f9c2dd-0011-4c35-b936-d80ba5669d85', 'Kalkidan', 'Kefelegh', 0, 1, 63, 1, 'HardyDiagnostics', 'Kalkidan.Kefelegh@HardyDiagnostics', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('efeb361a-5816-4802-a754-3d7785de29ed', 'Kenan', 'Esubalew', 0, 1, 63, 1, 'HardyDiagnostics', 'Kenan.Esubalew@HardyDiagnostics', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e8ae56c0-a1b5-4075-9711-705c8b754ee5', 'Kenean', 'Esubalew', 0, 1, 63, 1, 'HardyDiagnostics', 'Kenean.Esubalew@HardyDiagnostics', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('97c777c6-b60a-44dd-9809-db1d239c5fed', 'Kokeb', 'Hailemichael', 0, 1, 63, 1, 'HardyDiagnostics', 'Kokeb.Hailemichael@HardyDiagnostics', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('036018cf-02f1-4ede-becc-2406e4c29b61', 'Meron', 'Agegew', 0, 1, 63, 1, 'HardyDiagnostics', 'Meron.Agegew@HardyDiagnostics', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4bf57b1c-614b-4da2-885b-d5bf79296822', 'Mikias', 'Leweyehu', 0, 1, 63, 1, 'HardyDiagnostics', 'Mikias.Leweyehu@HardyDiagnostics', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('70952ae7-26ca-44d0-9cd1-ec6ec0fd7c9a', 'Misker', 'Tesgaye', 0, 1, 63, 1, 'HardyDiagnostics', 'Misker.Tesgaye@HardyDiagnostics', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5417a313-a60c-4815-b8ba-5ee067b921ea', 'Natanoy', 'Getamesay', 0, 1, 63, 1, 'HardyDiagnostics', 'Natanoy.Getamesay@HardyDiagnostics', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('62962fcb-7793-4951-a38a-3eb83145194e', 'Selam', 'Eshet', 0, 1, 63, 1, 'HardyDiagnostics', 'Selam.Eshet@HardyDiagnostics', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('275ea61d-430e-4ba8-8e53-e46bb89518e2', 'Solomon', 'Tesfaye', 0, 1, 63, 1, 'HardyDiagnostics', 'Solomon.Tesfaye@HardyDiagnostics', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('eabbb2d2-62df-4db8-a9ad-8b2c8044bf70', 'Tiblets', 'Zewde', 0, 1, 63, 1, 'HardyDiagnostics', 'Tiblets.Zewde@HardyDiagnostics', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e8b782a-ea23-4139-80c4-b36771728c6d', 'Tsion', 'Habtamu', 0, 1, 63, 1, 'HardyDiagnostics', 'Tsion.Habtamu@HardyDiagnostics', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8f32fece-3793-4b92-9585-dac86c92b7d6', 'Wibit', 'Yitbarek', 0, 1, 63, 1, 'HardyDiagnostics', 'Wibit.Yitbarek@HardyDiagnostics', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4601cc0d-7e6f-4214-85d2-3412ad971097', 'Yafet', 'Abdo', 0, 1, 63, 1, 'HardyDiagnostics', 'Yafet.Abdo@HardyDiagnostics', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('af720ec8-cac8-44ab-8f62-71bea14c4fc3', 'Yonatan', 'Getamesay', 0, 1, 63, 1, 'HardyDiagnostics', 'Yonatan.Getamesay@HardyDiagnostics', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('73b6b4d9-54a4-4284-bb3e-881b4788d80f', 'Aklilu', 'Tesfaye', 0, 1, 65, 1, 'SEHAmerica', 'Aklilu.Tesfaye@SEHAmerica', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7433e3a9-a331-408c-98d3-63cbd2cf7fe3', 'Arsema', 'Abiy', 0, 1, 65, 1, 'SEHAmerica', 'Arsema.Abiy@SEHAmerica', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0546f08b-28ff-4b96-9df3-bacc9b9021c1', 'Ashenafi', 'Dejen', 0, 1, 65, 1, 'SEHAmerica', 'Ashenafi.Dejen@SEHAmerica', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0adf2209-6862-440d-98fc-1f796a3d8e3f', 'Beakal', 'Deriba', 0, 1, 65, 1, 'SEHAmerica', 'Beakal.Deriba@SEHAmerica', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cafc1ee6-bc73-4276-83ae-a064b8a3fde3', 'Bezawit', 'Lewoyehu', 0, 1, 65, 1, 'SEHAmerica', 'Bezawit.Lewoyehu@SEHAmerica', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('863c15f4-9d25-47dc-a80b-c5795f69d6a7', 'Bro', 'Elias', 0, 0, 65, 1, 'SEHAmerica', 'Bro.Elias@SEHAmerica-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef495', 'Cloudx', 'Integration', 1, 1, 65, 1, 'SEHAmerica', 'esadmin@sehamerica', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('64a2a0c0-b11e-4858-a19b-8c6e59388024', 'Feven', 'Berehe', 0, 1, 65, 1, 'SEHAmerica', 'Feven.Berehe@SEHAmerica', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('52a7485d-2304-42f0-b1f0-fdc2918db33d', 'Henok', 'Teshager', 0, 1, 65, 1, 'SEHAmerica', 'Henok.Teshager@SEHAmerica', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ed4259e2-4459-4c6a-95bf-87d433233504', 'Cloudx', 'Integration', 1, 0, 65, 1, 'SEHAmerica', 'Admin@SEHAmerica-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('658d5b41-8af1-4604-a437-68c1a4531630', 'Jote', 'Daniel', 0, 1, 65, 1, 'SEHAmerica', 'Jote.Daniel@SEHAmerica', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c9ee722c-86a0-44af-9381-4f3db03ff0e1', 'Juan', 'Jose', 1, 0, 65, 1, 'SEHAmerica', 'Admin@SEHAmerica-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('26baa19c-2144-47b8-8d67-57ffaf761761', 'Kenan', 'Esubalew', 0, 1, 65, 1, 'SEHAmerica', 'Kenan.Esubalew@SEHAmerica', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f11f10a7-7b29-46a5-84ec-4947a3e1b38d', 'Kenean', 'Kenean', 0, 1, 65, 1, 'SEHAmerica', 'Kenean.Kenean@SEHAmerica', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('98a2ff40-2309-42c4-9da3-443a6d885f4d', 'Mikias', 'Leweyehu', 0, 1, 65, 1, 'SEHAmerica', 'Mikias.Leweyehu@SEHAmerica', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2556ecc8-6aaf-11ea-8024-22000a7bd097', 'Cloudx', 'Integration', 0, 0, 65, 1, 'SEHAmerica', 'esrossseha', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e51bc650-44b1-4081-8fbd-001fa22153bb', 'Samrawit', 'Tesfaye', 0, 1, 65, 1, 'SEHAmerica', 'Samrawit.Tesfaye@SEHAmerica', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c1b20665-7891-11ec-b1f1-0a3b5527d91d', 'Admin', 'Cloudx', 1, 1, 65, 1, 'SEHAmerica', 'Admin@SEHAmerica', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bec0b636-2624-11ee-8962-02c102131f31', 'Admin', 'Cloudx', 1, 0, 65, 1, 'SEHAmerica', 'Admin@SEHAmerica-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('00d6d64f-05a1-4fe7-af72-5c85e3e61fbd', 'Admin', 'Cloudx', 1, 0, 65, 1, 'SEHAmerica', 'Admin@SEHAmerica-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ae172654-7e6c-11ea-86ce-22000a7bd097', 'Admin', 'Cloudx', 1, 0, 65, 1, 'SEHAmerica', 'Admin@SEHAmerica-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('56d41744-54a9-4e85-95a1-aa1aeac0dff7', 'Selam', 'Eshete', 0, 1, 65, 1, 'SEHAmerica', 'Selam.Eshete@SEHAmerica', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('12139f54-f132-4c2e-8aab-6bc1e0e28f21', 'Solomon', 'Tesfaye', 0, 1, 65, 1, 'SEHAmerica', 'Solomon.Tesfaye@SEHAmerica', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7f9b813e-72bd-4d04-ac57-0026579748ef', 'Tiblets', 'Zewde', 0, 1, 65, 1, 'SEHAmerica', 'Tiblets.Zewde@SEHAmerica', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('caa42ddc-10af-4b25-ad27-1a6cfd24ab07', 'Wibit', 'Yitbarek', 0, 1, 65, 1, 'SEHAmerica', 'Wibit.Yitbarek@SEHAmerica', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2a2b9fa1-759b-4f61-9311-350c796dc98e', 'Wibit', 'Yitbarek', 0, 0, 65, 1, 'SEHAmerica', 'Wibit.Yitbarek@SEHAmerica-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b1137db-f020-424d-912d-af1bd9adb114', 'Yafet', 'Abdo', 0, 1, 65, 1, 'SEHAmerica', 'Yafet.Abdo@SEHAmerica', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('35334458-dee0-4857-824b-379b70196bbb', 'Yonatan', 'Getamesay', 0, 1, 65, 1, 'SEHAmerica', 'Yonatan.Getamesay@SEHAmerica', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bd0900f9-8341-445c-a7a8-730b5229b738', 'Abeba', 'Degefu', 0, 1, 66, 1, 'SteelTechPlex', 'Abeba.Degefu@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4c100fec-e516-4d03-bd32-6cf18e69ee4b', 'Admin', 'Steeltechplex', 1, 1, 66, 1, 'SteelTechPlex', 'Admin@SteelTechPlex', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1c0817f1-fee2-4e8c-8be4-4c6a87b58bb6', 'Alem', 'Gidey', 0, 1, 66, 1, 'SteelTechPlex', 'Alem.Gidey@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('44534128-e92d-411e-9ee9-aa8943462af9', 'Arsema', 'Abiy', 0, 1, 66, 1, 'SteelTechPlex', 'Arsema.Abiy@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('47b9c385-6db1-4ffe-be8e-2c119c211b2b', 'Ashenafi', 'Dejen', 0, 1, 66, 1, 'SteelTechPlex', 'Ashenafi.Dejen@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ddc70253-937d-4fed-b353-215380fea6bf', 'Atnatiwos', 'Solomon', 0, 1, 66, 1, 'SteelTechPlex', 'Atnatiwos.Solomon@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9c343180-60f6-4afe-8480-fb51227339ef', 'Beakal', 'Deriba', 0, 1, 66, 1, 'SteelTechPlex', 'Beakal.Deriba@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('43a9e8b2-5bae-4c5a-8d40-4bfc9e27aef3', 'Bereket', 'G/Hiwot', 0, 1, 66, 1, 'SteelTechPlex', 'Bereket.G/Hiwot@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f168c3b8-043f-42e2-9b10-218e14d684fa', 'Biruk', 'Kenaw', 0, 1, 66, 1, 'SteelTechPlex', 'Biruk.Kenaw@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('717ea745-1472-4dea-b1dd-7215769158a7', 'Bro', 'Elias', 0, 0, 66, 1, 'SteelTechPlex', 'Bro.Elias@SteelTechPlex-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef485', 'Cloudx', 'Integration', 1, 1, 66, 1, 'SteelTechPlex', 'esadmin@steelplex', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('81af9230-2c55-4f4e-9178-21b4fa6f8e78', 'Eldana', 'Hadush', 0, 1, 66, 1, 'SteelTechPlex', 'Eldana.Hadush@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9df555fe-f840-4914-b3bf-9960bba0ce63', 'Elshaday', 'Adamu', 0, 1, 66, 1, 'SteelTechPlex', 'Elshaday.Adamu@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4933ec35-c0b7-4102-8d0f-318549b6084b', 'Es', 'Steel', 0, 0, 66, 1, 'SteelTechPlex', 'Es.Steel@SteelTechPlex-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7435c932-af99-4976-89a2-6ad5bfc09d72', 'Hoquba', 'Getahun', 0, 1, 66, 1, 'SteelTechPlex', 'Hoquba.Getahun@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fdd2f3b0-f2d6-4bab-ac83-e29fd3701e74', 'Jote', 'Daniel', 0, 1, 66, 1, 'SteelTechPlex', 'Jote.Daniel@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('877bd945-dbfe-474b-bf2d-57f0c5c32c19', 'Kenean', 'Esubalew', 0, 1, 66, 1, 'SteelTechPlex', 'Kenean.Esubalew@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('23d605ee-c4f0-4be2-b441-ee0d7cc06b44', 'Kidist', 'Kibatu', 0, 1, 66, 1, 'SteelTechPlex', 'Kidist.Kibatu@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('86f85dec-c32b-41df-a92d-8b485e3f15bf', 'Lidia', 'Debebe', 0, 1, 66, 1, 'SteelTechPlex', 'Lidia.Debebe@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0d994efe-0d7c-4f0f-8504-5ed01164df56', 'Mahlet', 'Tedfay', 0, 1, 66, 1, 'SteelTechPlex', 'Mahlet.Tedfay@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ec67b5d2-d882-426d-8dd7-3f293ba637ac', 'Mamar', 'Seweyew', 1, 0, 66, 1, 'SteelTechPlex', 'Admin@SteelTechPlex-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ed397dca-204c-40c4-9cfe-22eb8c6fa74a', 'Mikias', 'Leweyehu', 0, 1, 66, 1, 'SteelTechPlex', 'Mikias.Leweyehu@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('02fccb1d-4f96-4b0e-a607-f0a01c8bf6ae', 'Mikiyas', 'Tefera', 0, 1, 66, 1, 'SteelTechPlex', 'Mikiyas.Tefera@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6575b370-04a0-4cc7-a8ef-504f7928b3eb', 'Misker', 'Tsegaye', 0, 1, 66, 1, 'SteelTechPlex', 'Misker.Tsegaye@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('662aaefb-78ae-43a5-b5f9-1a2fa2e309cc', 'Natnael', 'Alemayehu', 0, 1, 66, 1, 'SteelTechPlex', 'Natnael.Alemayehu@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('91e24ad5-4e65-4447-bb28-2a30f7243489', 'Seble', 'Sisay', 0, 1, 66, 1, 'SteelTechPlex', 'Seble.Sisay@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e2bf2ba-f90c-4342-a912-36a99774f695', 'Selam', 'Eshete', 0, 1, 66, 1, 'SteelTechPlex', 'Selam.Eshete@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('63f5b3db-562f-4e2b-9185-402d6c35df64', 'Steelbro', 'Elias', 0, 1, 66, 1, 'SteelTechPlex', 'Steelbro.Elias@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9218ffbc-4217-415b-a8f5-04616ebb2914', 'Tesfahun', 'Tsehaye', 0, 1, 66, 1, 'SteelTechPlex', 'Tesfahun.Tsehaye@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('04481050-459d-412b-8ea6-914003203200', 'Tiblets', 'Zewde', 0, 1, 66, 1, 'SteelTechPlex', 'Tiblets.Zewde@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9290d7a5-09a0-4d87-8af7-9eb619fe817d', 'Tsedenya', 'Yohannes', 0, 1, 66, 1, 'SteelTechPlex', 'Tsedenya.Yohannes@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8c60f244-3530-4301-9492-f30642814399', 'Wsplexsteel', 'Plex', 0, 1, 66, 1, 'SteelTechPlex', 'Wsplexsteel.Plex@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0a79f13a-7835-4acf-96ba-567db11fd27a', 'Yaphet', 'G/Tsadik', 0, 1, 66, 1, 'SteelTechPlex', 'Yaphet.G/Tsadik@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9e9b6ade-170e-45a3-a133-863cb6692038', 'Yonatan', 'Getamesay', 0, 1, 66, 1, 'SteelTechPlex', 'Yonatan.Getamesay@SteelTechPlex', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0a6f2dbf-f5d9-49b6-8fbd-a03afacef0b4', 'Aklilu', 'Tesfaye', 0, 1, 68, 1, 'MissionPharmacalCSI', 'Aklilu.Tesfaye@MissionPharmacalCSI', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b69a0d0d-7c3d-4b27-91b1-9563682cbc4b', 'Aptean', 'Aptean', 0, 1, 68, 1, 'MissionPharmacalCSI', 'Aptean.Aptean@MissionPharmacalCSI', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('53fea310-0a5c-48b4-904e-385de228999e', 'Arsema', 'Abiy', 0, 0, 68, 1, 'MissionPharmacalCSI', 'Arsema.Abiy@MissionPharmacalCSI-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('13ffa332-1950-4ba8-87d3-6ca2b79f4c4e', 'Arsema', 'Abiy', 0, 1, 68, 1, 'MissionPharmacalCSI', 'Arsema.Abiy@MissionPharmacalCSI', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('998cfbcc-b8f8-479b-a8a1-f953d8ddec86', 'Ashenafi', 'Dejen', 0, 1, 68, 1, 'MissionPharmacalCSI', 'Ashenafi.Dejen@MissionPharmacalCSI', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b5a6d54f-da9c-4c1c-8f80-7abc36a07fc4', 'Beakal', 'Deriba', 0, 1, 68, 1, 'MissionPharmacalCSI', 'Beakal.Deriba@MissionPharmacalCSI', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ccec2b63-54e4-4f1d-b878-3f6a0eeaabd9', 'Bro', 'Elias', 0, 0, 68, 1, 'MissionPharmacalCSI', 'Bro.Elias@MissionPharmacalCSI-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7dc6142f-bcb2-4929-bebd-a07a2f6489c8', 'Dev', 'Dev', 0, 0, 68, 1, 'MissionPharmacalCSI', 'Dev.Dev@MissionPharmacalCSI-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7657d757-cb54-48fb-b888-f9700d54aaf5', 'Exportservice', 'Mission', 0, 1, 68, 1, 'MissionPharmacalCSI', 'Exportservice.Mission@MissionPharmacalCSI', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bd6440dd-4abc-4f83-b3fe-17be34c9f026', 'Kenan', 'Esubalew', 0, 1, 68, 1, 'MissionPharmacalCSI', 'Kenan.Esubalew@MissionPharmacalCSI', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('379cde0d-01a1-4fdb-bbfc-a215e3fbc7d5', 'Mission', 'Mission', 0, 1, 68, 1, 'MissionPharmacalCSI', 'Mission.Mission@MissionPharmacalCSI', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b99c07bb-7f97-4de4-a01d-1f4d0b8b24ca', 'Samrawit', 'Tesfaye', 0, 1, 68, 1, 'MissionPharmacalCSI', 'Samrawit.Tesfaye@MissionPharmacalCSI', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b18dbcb1-256d-4e18-9a62-b8e57016a881', 'Wibit', 'Yitbarek', 0, 1, 68, 1, 'MissionPharmacalCSI', 'Wibit.Yitbarek@MissionPharmacalCSI', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('326f6c0b-036c-456e-9bab-df8d1481b902', 'Yonatan', 'Getamesay', 0, 1, 68, 1, 'MissionPharmacalCSI', 'Yonatan.Getamesay@MissionPharmacalCSI', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4c362a77-a1da-4ad3-aa15-b15dd024d50f', 'Abeba', 'Degefu', 0, 1, 70, 1, 'KettleGreenBay', 'Abeba.Degefu@KettleGreenBay', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fbc92139-a63b-4c8e-9e85-8905a828b360', 'Arsema', 'Abiy', 0, 1, 70, 1, 'KettleGreenBay', 'Arsema.Abiy@KettleGreenBay', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0078f023-c721-4056-aab9-f19724fd4b35', 'Ashenafi', 'Dejen', 0, 1, 70, 1, 'KettleGreenBay', 'Ashenafi.Dejen@KettleGreenBay', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a539e977-748f-40f6-af61-706f249063a2', 'Beakal', 'Deriba', 0, 1, 70, 1, 'KettleGreenBay', 'Beakal.Deriba@KettleGreenBay', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f4408b68-bf25-410a-a8b6-4da2fe78e591', 'Bezawit', 'Lewoyehu', 0, 1, 70, 1, 'KettleGreenBay', 'Bezawit.Lewoyehu@KettleGreenBay', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a6e15d62-db3d-4c94-8ea8-fcfeb71f72ff', 'Emebet', 'Tafese', 0, 1, 70, 1, 'KettleGreenBay', 'Emebet.Tafese@KettleGreenBay', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3f66e7aa-2994-4c7b-9f70-128669efd194', 'Jote', 'Daniel', 0, 1, 70, 1, 'KettleGreenBay', 'Jote.Daniel@KettleGreenBay', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('830c5e4c-5524-480c-8da6-b566e933186f', 'Kenan', 'Kenan', 0, 1, 70, 1, 'KettleGreenBay', 'Kenan.Kenan@KettleGreenBay', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d2c7c3ac-0f05-4263-a564-5cfb9e6062a4', 'Kenaw', 'Biruk', 0, 1, 70, 1, 'KettleGreenBay', 'Kenaw.Biruk@KettleGreenBay', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7c409b7a-ead1-4f52-9112-8d7bfde76973', 'Kenean', 'Esubalew', 0, 1, 70, 1, 'KettleGreenBay', 'Kenean.Esubalew@KettleGreenBay', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f790aba0-0cd4-4964-91cc-8b21ecf09aaf', 'Meron', 'Agegew', 0, 1, 70, 1, 'KettleGreenBay', 'Meron.Agegew@KettleGreenBay', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('05d90ab4-9bed-4a4c-9847-d45474b72f42', 'Mikiyas', 'Leweyehu', 0, 1, 70, 1, 'KettleGreenBay', 'Mikiyas.Leweyehu@KettleGreenBay', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ebb361c8-dbf8-4d29-abef-eba3da19d771', 'Samrawit', 'Tesfaye', 0, 1, 70, 1, 'KettleGreenBay', 'Samrawit.Tesfaye@KettleGreenBay', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0bc29ae2-daac-4568-a4d1-830e2104d1e7', 'Selam', 'Eshete', 0, 1, 70, 1, 'KettleGreenBay', 'Selam.Eshete@KettleGreenBay', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4df65601-6fe6-4169-8b61-07c83029a462', 'Solomon', 'Tesfaye', 0, 1, 70, 1, 'KettleGreenBay', 'Solomon.Tesfaye@KettleGreenBay', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8a3e9bcb-64f9-49c2-a8eb-de58d2141687', 'Tiblets', 'Zewde', 0, 0, 70, 1, 'KettleGreenBay', 'Tiblets.Zewde@KettleGreenBay-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1980464f-4b37-41ac-9054-952636dec490', 'Tiblets', 'Zewde', 0, 1, 70, 1, 'KettleGreenBay', 'Tiblets.Zewde@KettleGreenBay', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a59be5dd-e0da-4288-be42-075926973ffe', 'Yafet', 'Abdo', 0, 1, 70, 1, 'KettleGreenBay', 'Yafet.Abdo@KettleGreenBay', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2be5c6bf-861c-44e0-b8e4-66c704bcd2ab', 'Yonatan', 'Getamesay', 0, 1, 70, 1, 'KettleGreenBay', 'Yonatan.Getamesay@KettleGreenBay', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e4d23ae-f66e-4b48-915d-925803c8593e', 'Aklilu', 'Tesfaye', 0, 1, 76, 1, 'RGBarry', 'Aklilu.Tesfaye@RGBarry', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('636da527-fd69-4525-9443-5df6ccc5bfe9', 'Arsema', 'Abiy', 0, 1, 76, 1, 'RGBarry', 'Arsema.Abiy@RGBarry', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('393d2d98-68c1-4d71-b0cd-6f0e5b17eb09', 'Arsema', 'Abiy', 0, 0, 76, 1, 'RGBarry', 'Arsema.Abiy@RGBarry-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('640e8814-89a3-4067-9fed-3d9c1c2d9e41', 'Ashenafi', 'Dejen', 0, 1, 76, 1, 'RGBarry', 'Ashenafi.Dejen@RGBarry', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('723dd129-7f6a-4c95-9627-1a37da20b482', 'Beakal', 'Deriba', 0, 1, 76, 1, 'RGBarry', 'Beakal.Deriba@RGBarry', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b94b8658-9839-4d9f-bd36-09f852fd95a7', 'Feven', 'Berhe', 0, 1, 76, 1, 'RGBarry', 'Feven.Berhe@RGBarry', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('07b72ea0-7269-4af1-b941-64d35913ca95', 'Biruk', 'Kenaw', 0, 1, 76, 1, 'RGBarry', 'Biruk.Kenaw@RGBarry', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef502', 'Cloudx', 'Integration', 1, 1, 76, 1, 'RGBarry', 'esadmin@rgbarry', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4ddc8aa9-d575-48f6-8920-cfa742f7d412', 'Kenean', 'Esubalew', 0, 1, 76, 1, 'RGBarry', 'Kenean.Esubalew@RGBarry', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('39b43224-1547-40ca-9eb1-9948ade108d0', 'Mikiyas', 'Leweyehu', 0, 1, 76, 1, 'RGBarry', 'Mikiyas.Leweyehu@RGBarry', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('19148a99-c21c-4e3d-9773-e88e41efbd2d', 'Rgvendor', 'Rgvendor', 0, 1, 76, 0, 'RGBarry', 'Rgvendor.Rgvendor@RGBarry', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7e31d008-4abb-4cf0-b50c-cdf3081fe2f6', 'Samrawit', 'Tesfaye', 0, 1, 76, 1, 'RGBarry', 'Samrawit.Tesfaye@RGBarry', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d0ecc3e0-caa9-4eeb-9c7f-3f9e5954d12f', 'Selam', 'Eshete', 0, 1, 76, 1, 'RGBarry', 'Selam.Eshete@RGBarry', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b5023fa6-595e-4740-b3fb-6318f9945dfa', 'Solomon', 'Tesfaye', 0, 1, 76, 1, 'RGBarry', 'Solomon.Tesfaye@RGBarry', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fd7b9215-cc9d-46df-a752-87b5aa13c4f8', 'Tiblets', 'Zewde', 0, 1, 76, 1, 'RGBarry', 'Tiblets.Zewde@RGBarry', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('62dd130e-b371-4050-a9a0-352bc8c87bd6', 'Wibit', 'Yitbarek', 0, 1, 76, 1, 'RGBarry', 'Wibit.Yitbarek@RGBarry', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('56c36273-db16-4bea-a307-9ae19564b318', 'Wibit', 'Yitbarek', 0, 0, 76, 1, 'RGBarry', 'Wibit.Yitbarek@RGBarry-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5e756153-fb2a-4a56-9d20-38e88b7c0d0b', 'Yafet', 'Abdo', 0, 1, 76, 1, 'RGBarry', 'Yafet.Abdo@RGBarry', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a70c2f23-d20c-43ae-bcb1-f6e237199914', 'Yonatan', 'Getamesay', 0, 1, 76, 1, 'RGBarry', 'Yonatan.Getamesay@RGBarry', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cc73d28c-4ea6-4379-adef-70a3ecaf85e3', 'Abeba', 'Degefu', 0, 1, 77, 1, 'ContinentalBattery', 'Abeba.Degefu@ContinentalBattery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6aef5022-4722-4d91-92cc-0577889238aa', 'Admin', 'Cloudx', 1, 0, 77, 1, 'ContinentalBattery', 'Admin@ContinentalBattery-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('17fc44c8-3a41-4b0b-b2a6-f346c87a9cc0', 'Anathole', 'Niyonagana', 0, 1, 77, 1, 'ContinentalBattery', 'Anathole.Niyonagana@ContinentalBattery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1cd38825-22f4-4b05-8555-f38577d95961', 'Arsema', 'Abiy', 0, 1, 77, 1, 'ContinentalBattery', 'Arsema.Abiy@ContinentalBattery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6c94a2ba-6002-46ea-a4e0-4f1c200a5102', 'Arsema', 'Abiy', 0, 0, 77, 1, 'ContinentalBattery', 'Arsema.Abiy@ContinentalBattery-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8166754a-0a6a-4b14-9a30-a88d7cb3a39c', 'Ashenafi', 'Dejen', 0, 1, 77, 1, 'ContinentalBattery', 'Ashenafi.Dejen@ContinentalBattery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1dd905cd-2357-4296-aeac-335c8e2a3632', 'Beakal', 'Deriba', 0, 1, 77, 1, 'ContinentalBattery', 'Beakal.Deriba@ContinentalBattery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('dda4488c-9ed9-4c4d-8f7c-fb3698f21c80', 'Biruk', 'Kenaw', 0, 1, 77, 1, 'ContinentalBattery', 'Biruk.Kenaw@ContinentalBattery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f4bafcae-1e73-4956-937f-27fabdb7dcb0', 'Bro', 'Elias', 0, 0, 77, 1, 'ContinentalBattery', 'Bro.Elias@ContinentalBattery-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f40f930b-a752-4ed9-9220-85fbc9d1ef5c', 'Christine', 'Uwase', 0, 1, 77, 1, 'ContinentalBattery', 'Christine.Uwase@ContinentalBattery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef483', 'Cloudx', 'Integration', 1, 1, 77, 1, 'ContinentalBattery', 'esadmin@cbattery', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('985ca368-d6ba-4ea8-a897-7fa736e91973', 'Escbattery', 'Cloudx', 0, 0, 77, 1, 'ContinentalBattery', 'Escbattery.Cloudx@ContinentalBattery-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('84027854-144f-4b29-b44a-58fa8e9ae619', 'Esubalew', 'Kenean', 0, 1, 77, 1, 'ContinentalBattery', 'Esubalew.Kenean@ContinentalBattery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d3deb32a-0ad9-4bfa-84fd-eaf7abbad5cf', 'Feven', 'Berhe', 0, 1, 77, 1, 'ContinentalBattery', 'Feven.Berhe@ContinentalBattery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3fa04943-5b54-457d-aa32-b90db39d0a4d', 'Henok', 'Henok', 0, 1, 77, 1, 'ContinentalBattery', 'Henok.Henok@ContinentalBattery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9d995cef-6562-48fa-914c-39155512275f', 'Joye', 'Daniel', 0, 1, 77, 1, 'ContinentalBattery', 'Joye.Daniel@ContinentalBattery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b85b4004-70bb-4bfe-9899-9ca0efadaa5d', 'Juan', 'Jose', 1, 0, 77, 1, 'ContinentalBattery', 'Admin@ContinentalBattery-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('898fa8d6-8cb7-4533-82d7-f15fb7dad11e', 'Kaleab', 'Weldegebrial', 0, 1, 77, 1, 'ContinentalBattery', 'Kaleab.Weldegebrial@ContinentalBattery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('94d46344-ea95-447c-8608-1dd684fa6c1b', 'Kokeb', 'Hailemichael', 0, 1, 77, 1, 'ContinentalBattery', 'Kokeb.Hailemichael@ContinentalBattery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('aedf2b5b-d766-4db4-b5f3-54d4a1be1047', 'Misker', 'Tesgaye', 0, 1, 77, 1, 'ContinentalBattery', 'Misker.Tesgaye@ContinentalBattery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9e5e44f4-0c66-45b4-8b89-af108042d70a', 'Nshimiyimana', 'Jean', 0, 1, 77, 1, 'ContinentalBattery', 'Nshimiyimana.Jean@ContinentalBattery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7f0fc421-ba44-407d-b2ba-e0b689d8f882', 'Samrawit', 'Tesfaye', 0, 1, 77, 1, 'ContinentalBattery', 'Samrawit.Tesfaye@ContinentalBattery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('be49e410-ead8-4d4a-bcaf-f176b67885a3', 'Selam', 'Eshete', 0, 1, 77, 1, 'ContinentalBattery', 'Selam.Eshete@ContinentalBattery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a30d8a71-11e3-4589-9129-f6bbcc5527f6', 'Solomon', 'Tesfaye', 0, 1, 77, 1, 'ContinentalBattery', 'Solomon.Tesfaye@ContinentalBattery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f8adc7e7-8009-4075-801c-2e3a163424a5', 'Sosena', 'Sosena', 0, 1, 77, 1, 'ContinentalBattery', 'Sosena.Sosena@ContinentalBattery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('34fb5b13-8bfb-4f2e-9370-c3614807811b', 'Tsion', 'Habtamu', 0, 1, 77, 1, 'ContinentalBattery', 'Tsion.Habtamu@ContinentalBattery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1fa630d4-2d34-4960-b0ec-4c9b0e757247', 'Wibit', 'Yitbark', 0, 1, 77, 1, 'ContinentalBattery', 'Wibit.Yitbark@ContinentalBattery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0b3c5abe-520c-4336-b143-1f3519119160', 'Yafet', 'Abdo', 0, 1, 77, 1, 'ContinentalBattery', 'Yafet.Abdo@ContinentalBattery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bac6f5d3-bcb1-4642-b94d-c7d56e7a282a', 'Yaphet', 'G/Tsadik', 0, 1, 77, 1, 'ContinentalBattery', 'Yaphet.G/Tsadik@ContinentalBattery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('105ab0d0-65b9-40ee-8ba1-6e03b3c12e47', 'Yonatan', 'Getamesay', 0, 1, 77, 1, 'ContinentalBattery', 'Yonatan.Getamesay@ContinentalBattery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('eb1f9fe5-64a4-4a35-b91a-2e6045265800', 'Yonatan', 'Getamesay', 0, 0, 77, 1, 'ContinentalBattery', 'Yonatan.Getamesay@ContinentalBattery-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('05182767-4134-4b10-ab22-aa71728c7204', 'Admin', 'Keter', 1, 1, 79, 1, 'Keter', 'Admin@Keter', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ce400bb1-d4cb-4535-9523-4a0f54ddd918', 'Arsema', 'Abiy', 0, 1, 79, 1, 'Keter', 'Arsema.Abiy@Keter', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7b4996f8-39c4-4c6a-b3ea-2e8e42b04fb9', 'Ashenafi', 'Dejen', 0, 1, 79, 1, 'Keter', 'Ashenafi.Dejen@Keter', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('947ef1de-b5d8-4a09-b2bd-c540de554285', 'Beakal', 'Deriba', 0, 1, 79, 1, 'Keter', 'Beakal.Deriba@Keter', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('39164d34-4122-4522-b9c7-602b86f91ccb', 'Bezawit', 'Lewoyehu', 0, 1, 79, 1, 'Keter', 'Bezawit.Lewoyehu@Keter', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('661f3ae3-88ad-466e-b9a3-532eef23504a', 'Biniyam', 'Mesfin', 0, 1, 79, 1, 'Keter', 'Biniyam.Mesfin@Keter', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('16433b10-a7f1-4664-8569-d2969667d140', 'Bro', 'Elias', 0, 0, 79, 1, 'Keter', 'Bro.Elias@Keter-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ae3cacee-aeb5-4318-bc92-b23bc253df97', 'Cloudx', 'Integration', 1, 1, 79, 1, 'Keter', 'esadmin@keter', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('865b1ba7-b3cf-41df-9408-be0899c8d28f', 'Feven', 'Berhe', 0, 1, 79, 1, 'Keter', 'Feven.Berhe@Keter', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2051a445-d1db-4dbc-ac10-1ff6e8be6b57', 'Girum', 'Tesfaye', 0, 1, 79, 1, 'Keter', 'Girum.Tesfaye@Keter', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9ae091d5-d0bb-4aa5-a365-86ba01ab42ea', 'Juan', 'Jose', 1, 0, 79, 1, 'Keter', 'Admin@Keter-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8f96eebd-a799-4f25-8dc0-b32e78d7f20a', 'Kenean', 'Esubalew', 0, 1, 79, 1, 'Keter', 'Kenean.Esubalew@Keter', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('aa959b8e-a247-457a-be3c-0299ea1f0c68', 'Keter', 'Developer', 0, 1, 79, 1, 'Keter', 'Keter.Developer@Keter', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3234cc6e-3a50-47db-8acf-d7160f39b2bf', 'Keterabbyy', 'Abbyy', 0, 1, 79, 1, 'Keter', 'Keterabbyy.Abbyy@Keter', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3e39eb0a-1a2f-48a7-9c33-4436b4b0c34b', 'Natanoy', 'Getamesay', 0, 1, 79, 1, 'Keter', 'Natanoy.Getamesay@Keter', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3527a56f-728d-4f6d-b5b0-30a3d1597a88', 'Samrawit', 'Tesfaye', 0, 1, 79, 1, 'Keter', 'Samrawit.Tesfaye@Keter', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3894f3d5-d695-4b5d-87c8-82090f26a71d', 'Selam', 'Eshet', 0, 1, 79, 1, 'Keter', 'Selam.Eshet@Keter', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('45bd4677-ef8f-4fdc-ab2c-280f48d69c5c', 'Solomon', 'Tesfaye', 0, 1, 79, 1, 'Keter', 'Solomon.Tesfaye@Keter', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d4248569-a480-427b-ab65-b17ae3c2c59f', 'Tiblets', 'Zewde', 0, 1, 79, 1, 'Keter', 'Tiblets.Zewde@Keter', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('16d2410c-574c-4377-998a-356c13d1cc5c', 'Wibit', 'Yitbarek', 0, 1, 79, 1, 'Keter', 'Wibit.Yitbarek@Keter', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d9a9d1d6-b71a-4faa-88e0-533eaf4e450f', 'Wibit', 'Yitbarek', 0, 0, 79, 1, 'Keter', 'Wibit.Yitbarek@Keter-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('46ecd4ee-70d9-43b6-8038-e1d0c00c1b7a', 'Yafet', 'Abdo', 0, 1, 79, 1, 'Keter', 'Yafet.Abdo@Keter', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0496e625-4619-4320-9809-f9ad22aa8b1c', 'Yaphet', 'G/Tsadik', 0, 1, 79, 1, 'Keter', 'Yaphet.G/Tsadik@Keter', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5eecd71f-683a-47a3-ab33-b276be8b60e7', 'Yonatan', 'Getamesay', 0, 1, 79, 1, 'Keter', 'Yonatan.Getamesay@Keter', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('501c11e2-7cd2-4ebc-9c51-a29e7e7907ec', 'Beakal', 'Deriba', 0, 1, 80, 1, 'Coffee', 'Beakal.Deriba@Coffee', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9797c679-0a62-419a-bac1-53bad5d4b398', 'Escoffeeregional', 'Coffee', 0, 1, 80, 1, 'Coffee', 'Escoffeeregional.Coffee@Coffee', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0408024e-51ff-4085-bbe2-6cb186a644f8', 'Gega', 'Bai', 0, 1, 80, 1, 'Coffee', 'Gega.Bai@Coffee', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a51827c5-7159-44ce-8ee9-19809303527c', 'Aklilu', 'Tesfaye', 0, 1, 83, 1, 'AM', 'Aklilu.Tesfaye@AM', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('14c2f239-bf3e-4d87-a101-0c99e127a937', 'Arsema', 'Abiy', 0, 1, 83, 1, 'AM', 'Arsema.Abiy@AM', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('80b1e95a-2921-4e0b-a07a-b3eb83ec53cf', 'Ashenafi', 'Dejen', 0, 1, 83, 1, 'AM', 'Ashenafi.Dejen@AM', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('85f10d13-aa49-4338-b1c3-c804e929a8e6', 'Beakal', 'Deriba', 0, 1, 83, 1, 'AM', 'Beakal.Deriba@AM', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5f55d894-7972-4e6b-ab8e-d355059696c6', 'Biruk', 'Kenaw', 0, 1, 83, 1, 'AM', 'Biruk.Kenaw@AM', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d2a5dd15-90c3-455b-a4a3-e35c276e4991', 'Bro', 'Elias', 0, 0, 83, 1, 'AM', 'Bro.Elias@AM-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('17af344b-c156-4ce5-a77d-178c6d9f2ad4', 'Bro', 'Elias', 0, 0, 83, 1, 'AM', 'Bro.Elias@AM-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef501', 'Cloudx', 'Integration', 1, 1, 83, 1, 'AM', 'esadmin@americanmessaging', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bdfc779f-0ef8-4372-a062-30cbba3eed50', 'Esamsprod', 'Ams', 0, 1, 83, 1, 'AM', 'Esamsprod.Ams@AM', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d314a8c5-569a-426a-aa24-e4f4a5e633d9', 'Feven', 'Berhe', 0, 1, 83, 1, 'AM', 'Feven.Berhe@AM', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('21a1b57f-faac-4478-a3ad-73856a703dcc', 'Gega', 'Operation', 0, 1, 83, 1, 'AM', 'Gega.Operation@AM', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('09ef6d85-19cf-42fc-9dce-53cc23b8263b', 'Henok', 'Teshager', 0, 1, 83, 1, 'AM', 'Henok.Teshager@AM', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3edc7a14-f349-4eb7-9c11-53f0335ac7ac', 'Hilina', 'Gezahegn', 0, 1, 83, 1, 'AM', 'Hilina.Gezahegn@AM', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0e6f67d4-59b2-40fa-9f59-ea8e4efe4527', 'Jote', 'Daniel', 0, 1, 83, 1, 'AM', 'Jote.Daniel@AM', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0f50adc1-207c-4045-8193-db031604ee28', 'Kenean', 'Esubalew', 0, 1, 83, 1, 'AM', 'Kenean.Esubalew@AM', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7d1276b6-a145-4594-8869-2f322e115956', 'Natanoy', 'Getamesay', 0, 1, 83, 1, 'AM', 'Natanoy.Getamesay@AM', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('303ceb02-618a-424e-a542-1a60685d0c45', 'Rajesh', 'Yadav', 0, 0, 83, 1, 'AM', 'Rajesh.Yadav@AM', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('42a9607c-e288-4864-9a32-e5db24195a46', 'Samrawit', 'Tesfaye', 0, 1, 83, 1, 'AM', 'Samrawit.Tesfaye@AM', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b51bd53f-3fba-4842-a965-537c52cf810f', 'Selam', 'Eshete', 0, 1, 83, 1, 'AM', 'Selam.Eshete@AM', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('12abe13f-016d-41e1-880f-4ae0cf57d413', 'Solomon', 'Tesfaye', 0, 1, 83, 1, 'AM', 'Solomon.Tesfaye@AM', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9aff9125-d84f-43c5-8647-598afacdbe6a', 'Tiblets', 'Zewde', 0, 1, 83, 1, 'AM', 'Tiblets.Zewde@AM', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('75c6a14b-58b7-40f7-b9f8-bd5abd31ad53', 'Yafet', 'Nightshift', 0, 1, 83, 1, 'AM', 'Yafet.Nightshift@AM', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d47d07f0-4119-4432-875c-829ebf6675db', 'Yonatan', 'Getamesay', 0, 1, 83, 1, 'AM', 'Yonatan.Getamesay@AM', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('62f7826b-1fb4-4629-98e1-ca342cc16587', 'Admin', 'Strategicsecurity', 1, 1, 84, 1, 'StrategicSecurity', 'Admin@StrategicSecurity', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4a0194c9-f073-4e23-8488-856f57903711', 'Aklilu', 'Tesfaye', 0, 1, 84, 1, 'StrategicSecurity', 'Aklilu.Tesfaye@StrategicSecurity', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5958004b-eea5-4d84-a988-97186854e9f3', 'Arsema', 'Abiy', 0, 1, 84, 1, 'StrategicSecurity', 'Arsema.Abiy@StrategicSecurity', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4f60d830-5158-4f0e-9240-acd4a5db49a1', 'Ashenafi', 'Dejen', 0, 1, 84, 1, 'StrategicSecurity', 'Ashenafi.Dejen@StrategicSecurity', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('762f076b-f1e4-4fc3-b1fa-2bf33a5b65e2', 'Beakal', 'Deriba', 0, 1, 84, 1, 'StrategicSecurity', 'Beakal.Deriba@StrategicSecurity', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('144ef4a1-7fff-47e5-ac7e-f7c4b34d93c8', 'Biruk', 'Kenaw', 0, 1, 84, 1, 'StrategicSecurity', 'Biruk.Kenaw@StrategicSecurity', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef500', 'Cloudx', 'Integration', 1, 1, 84, 1, 'StrategicSecurity', 'esadmin@s3', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('76aa542b-7b87-4955-8cd9-8482def7a1de', 'Feven', 'Berhe', 0, 1, 84, 1, 'StrategicSecurity', 'Feven.Berhe@StrategicSecurity', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f1a4f0e9-5c19-4daf-9865-ee58b5180296', 'Hilina', 'Gezahgn', 0, 1, 84, 1, 'StrategicSecurity', 'Hilina.Gezahgn@StrategicSecurity', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('49179bb3-db64-4ab6-919a-250b80ed78da', 'Juan', 'Jose', 1, 0, 84, 1, 'StrategicSecurity', 'Admin@StrategicSecurity-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cca4285d-347a-4832-8fcf-ffc80c5a3824', 'Kaleab', 'Weldegebrial', 0, 1, 84, 1, 'StrategicSecurity', 'Kaleab.Weldegebrial@StrategicSecurity', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a4aeea0c-9837-40d3-bc69-dbc627bd10b3', 'Kenan', 'Esubalew', 0, 1, 84, 1, 'StrategicSecurity', 'Kenan.Esubalew@StrategicSecurity', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('441c6409-3822-4259-8092-b494367b56da', 'Kokeb', 'Kokeb', 0, 1, 84, 1, 'StrategicSecurity', 'Kokeb.Kokeb@StrategicSecurity', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3b5b325d-aa74-4178-bca4-d0174c495a85', 'Mearg', 'Kidanu', 0, 1, 84, 1, 'StrategicSecurity', 'Mearg.Kidanu@StrategicSecurity', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f5ae2efe-1521-4d6f-86ba-c8ce1e06aed8', 'Samrawit', 'Tesfaye', 0, 1, 84, 1, 'StrategicSecurity', 'Samrawit.Tesfaye@StrategicSecurity', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d5e5cf90-99d2-4473-ab60-a531d650ef8c', 'Selam', 'Eshete', 0, 1, 84, 1, 'StrategicSecurity', 'Selam.Eshete@StrategicSecurity', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('191064b2-f256-417e-a484-b24f3f2c9011', 'Solomon', 'Tesfaye', 0, 1, 84, 1, 'StrategicSecurity', 'Solomon.Tesfaye@StrategicSecurity', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('87b06c25-29f4-499a-83ba-43f226996f17', 'Tiblest', 'Zewde', 0, 1, 84, 1, 'StrategicSecurity', 'Tiblest.Zewde@StrategicSecurity', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2b4c8a47-72e0-4c07-a614-9d17639ba5f3', 'Wibit', 'Yitbarek', 0, 1, 84, 1, 'StrategicSecurity', 'Wibit.Yitbarek@StrategicSecurity', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('452d77ad-c09f-4d4b-a1e1-77576c6539ab', 'Yafet', 'Abdo', 0, 1, 84, 1, 'StrategicSecurity', 'Yafet.Abdo@StrategicSecurity', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fac43840-667b-47a2-bb6e-9d545dc7f608', 'Yonatan', 'Getamesay', 0, 1, 84, 1, 'StrategicSecurity', 'Yonatan.Getamesay@StrategicSecurity', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1f2bb192-b9f3-4c20-8b79-b1e846f95eb8', 'Aklilu', 'Tesfaye', 0, 1, 86, 1, 'Nova', 'Aklilu.Tesfaye@Nova', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7f04670-70b8-4e24-8377-f53438980b56', 'Arsema', 'Abiy', 0, 1, 86, 1, 'Nova', 'Arsema.Abiy@Nova', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c0ff0337-b164-48c7-8a20-c24caedaf049', 'Ashenafi', 'Dejen', 0, 1, 86, 1, 'Nova', 'Ashenafi.Dejen@Nova', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d11e773a-600f-4241-bd43-6a8c811ec9a3', 'Beakal', 'Deriba', 0, 1, 86, 1, 'Nova', 'Beakal.Deriba@Nova', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('262466de-1439-4bdc-9a63-3c0ad1e0a534', 'Bereket', 'G/Hiwot', 0, 1, 86, 1, 'Nova', 'Bereket.G/Hiwot@Nova', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a5ec6404-c025-473f-b23f-f8b21cf5424a', 'Biruk', 'Kenaw', 0, 1, 86, 1, 'Nova', 'Biruk.Kenaw@Nova', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('175118ef-a4cf-4d17-b1b5-1f5a737648ee', 'Bro', 'Elias', 0, 0, 86, 1, 'Nova', 'Bro.Elias@Nova-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef499', 'Cloudx', 'Integration', 1, 1, 86, 1, 'Nova', 'esadmin@nova', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('dbeaf636-68e4-42ef-942d-429b827e4240', 'Feven', 'Berhe', 0, 1, 86, 1, 'Nova', 'Feven.Berhe@Nova', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('18437821-0692-4ada-918f-235aacb262bc', 'Henok', 'Teshage', 0, 1, 86, 1, 'Nova', 'Henok.Teshage@Nova', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f1e9e427-23e3-4207-aaa6-64e40e534d3f', 'Kenan', 'Esubalew', 0, 1, 86, 1, 'Nova', 'Kenan.Esubalew@Nova', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('22d21ac4-6348-4267-9387-91428cfdab84', 'Mahlet', 'Tesfay', 0, 1, 86, 1, 'Nova', 'Mahlet.Tesfay@Nova', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f03aa20e-7b56-42b5-ad88-2fcceb138363', 'Mikias', 'Lewyehu', 0, 1, 86, 1, 'Nova', 'Mikias.Lewyehu@Nova', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c0a1a105-0cbd-4b2c-b966-08292134bffc', 'Misker', 'Tsgaye', 0, 1, 86, 1, 'Nova', 'Misker.Tsgaye@Nova', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('06bae9a6-5fc6-4056-91d6-f46f4930a32e', 'Admin', 'Cloudx', 1, 1, 86, 1, 'Nova', 'Admin@Nova', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f836c3a3-57f6-4e95-ac88-18821951a48e', 'Selam', 'Eshete', 0, 1, 86, 1, 'Nova', 'Selam.Eshete@Nova', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('819360f6-98c1-4fb4-87e0-5cae14976212', 'Solomon', 'Tesfaye', 0, 1, 86, 1, 'Nova', 'Solomon.Tesfaye@Nova', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6a93b440-54ad-4d58-a878-8a758d1ed80b', 'Tiblets', 'Zewde', 0, 1, 86, 1, 'Nova', 'Tiblets.Zewde@Nova', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('82528940-11f3-434e-b59e-303ab2669540', 'Wibit', 'Yitbarek', 0, 1, 86, 1, 'Nova', 'Wibit.Yitbarek@Nova', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cb54bb7f-5ebd-4076-8041-d4dc2d26bdbd', 'Yafet', 'Abdo', 0, 1, 86, 1, 'Nova', 'Yafet.Abdo@Nova', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('22cb4a02-4413-4c4a-b137-2d8a879ea23f', 'Yonatan', 'Getamesay', 0, 1, 86, 1, 'Nova', 'Yonatan.Getamesay@Nova', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('18b61a24-d0a4-11e9-b055-22000a1f9f3d', 'Admin', 'Bongards', 1, 1, 88, 1, 'Bongards', 'Admin@Bongards', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('142a5a50-95f6-456f-b9c0-83aa8d6ea8bc', 'Alexandra', 'Esmeralda', 0, 1, 88, 1, 'Bongards', 'Alexandra.Esmeralda@Bongards', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('035f72dd-0c6a-4f2b-9d57-84591cf19f39', 'Beatriz', 'Rodriguez', 0, 1, 88, 1, 'Bongards', 'Beatriz.Rodriguez@Bongards', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8df8de9f-47f5-4bcf-a502-e08dd267621c', 'Bereket', 'G/Hiwot', 0, 1, 88, 1, 'Bongards', 'Bereket.G/Hiwot@Bongards', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b8e3bf59-cf24-4f9e-8a92-024e0e6efa36', 'Bro', 'Elias', 0, 0, 88, 1, 'Bongards', 'Bro.Elias@Bongards-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef498', 'Cloudx', 'Integration', 1, 1, 88, 1, 'Bongards', 'esadmin@bongards', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('eca5ba49-ece4-4243-b58c-02b2cd466f27', 'Concepcion', 'Miranda', 0, 1, 88, 1, 'Bongards', 'Concepcion.Miranda@Bongards', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6096c35b-6a85-4704-8b74-c05deaa5bae2', 'Daniel', 'Campos', 0, 1, 88, 1, 'Bongards', 'Daniel.Campos@Bongards', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c808338c-7bc6-4c80-8fbb-433c26210d37', 'Feven', 'Berhe', 0, 1, 88, 1, 'Bongards', 'Feven.Berhe@Bongards', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('311be2db-ad56-43cc-8941-c48b35401cb1', 'Juan', 'Jose', 1, 0, 88, 1, 'Bongards', 'Admin@Bongards-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1dc00b3b-6847-4d69-86fd-5056d88bac54', 'Luis', 'Rodriguez', 0, 1, 88, 1, 'Bongards', 'Luis.Rodriguez@Bongards', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a33aeda6-0167-4da8-8c6f-4fde5b8d62ae', 'Mahlet', 'Tesfay', 0, 1, 88, 1, 'Bongards', 'Mahlet.Tesfay@Bongards', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2d50fa1a-bb8c-47a1-a33f-57d27fd89b98', 'Majo', 'Cruz', 0, 1, 88, 1, 'Bongards', 'Majo.Cruz@Bongards', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('44734c5f-6d31-472b-8eaf-0a0f350a4375', 'Naty', 'Perez', 0, 1, 88, 1, 'Bongards', 'Naty.Perez@Bongards', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('67925e1d-a9b0-4a5f-8b5d-b5f161bf0ce5', 'Paola', 'Beltran', 0, 1, 88, 1, 'Bongards', 'Paola.Beltran@Bongards', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8e13cc74-91e2-4f57-9cea-1b112373cb86', 'Paola', 'Beltran', 0, 0, 88, 1, 'Bongards', 'Paola.Beltran@Bongards-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('90af948d-efdf-4efd-9e1b-19d105ed8f66', 'Reynaldo', 'Cruz', 0, 1, 88, 1, 'Bongards', 'Reynaldo.Cruz@Bongards', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('80256b06-50f8-4960-818d-f6bc48ab8d94', 'Rhina', 'Crespin', 0, 1, 88, 1, 'Bongards', 'Rhina.Crespin@Bongards', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('394f0265-62d5-460e-9443-e5a8769e0874', 'Tita', 'Bongards', 0, 1, 88, 1, 'Bongards', 'Tita.Bongards@Bongards', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0620c001-23cc-4867-9042-f08590115d4c', 'Arsema', 'Abiy', 0, 1, 89, 1, 'Coleman', 'Arsema.Abiy@Coleman', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7b967cd6-c858-4bbd-b3f7-64dc86044bfa', 'Ashenafi', 'Dejen', 0, 1, 89, 1, 'Coleman', 'Ashenafi.Dejen@Coleman', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('efb8ae14-ce03-4ba2-9ea1-82fb69ac5547', 'Bro', 'Elias', 0, 0, 89, 1, 'Coleman', 'Bro.Elias@Coleman-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef497', 'Cloudx', 'Integration', 1, 1, 89, 1, 'Coleman', 'esadmin@colman', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8e6ee975-22fc-4562-b1bc-1a46ca1b1126', 'Es', 'Coleman', 0, 0, 89, 1, 'Coleman', 'Es.Coleman@Coleman-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fdbe119e-b630-4422-bdfd-584f34bec415', 'Jote', 'Daniel', 0, 1, 89, 1, 'Coleman', 'Jote.Daniel@Coleman', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d13cd166-e9e5-45f1-ab48-c66a32448b07', 'Kenean', 'Kenean', 0, 1, 89, 1, 'Coleman', 'Kenean.Kenean@Coleman', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cd223af6-7203-4e53-9116-8afc4b0f262f', 'Mikias', 'Lewyehu', 0, 1, 89, 1, 'Coleman', 'Mikias.Lewyehu@Coleman', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d675ea04-fbcd-4e95-bdd0-11df30b3f85e', 'Samrawit', 'Tesfaye', 0, 1, 89, 1, 'Coleman', 'Samrawit.Tesfaye@Coleman', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1c933eb7-94c9-4a58-bd64-ee9571e7b1e4', 'Tiblets', 'Zewde', 0, 1, 89, 1, 'Coleman', 'Tiblets.Zewde@Coleman', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('37b192c4-5138-4536-9a17-11b0a28e55ef', 'Yonatan', 'Getamesay', 0, 1, 89, 1, 'Coleman', 'Yonatan.Getamesay@Coleman', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('008ec7e5-95fc-4db9-97a9-e3e557a69c3e', 'Abeba', 'Degefu', 0, 1, 91, 1, 'AP', 'Abeba.Degefu@AP', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2095f300-5835-4f1c-9a60-20a4ece5a5b6', 'Admin', 'Ap', 1, 0, 91, 1, 'AP', 'Admin@AP-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('627a6a37-a3c1-49bc-a374-d6b1dcfcfbd0', 'Anathole', 'Niyongana', 0, 1, 91, 1, 'AP', 'Anathole.Niyongana@AP', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7bf7a115-d8a5-448a-88df-bdd71456e6ed', 'Arsema', 'Abiy', 0, 1, 91, 1, 'AP', 'Arsema.Abiy@AP', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0723d031-2476-4298-8fc4-cd7bc5d5e67c', 'Ashenafi', 'Dejen', 0, 1, 91, 1, 'AP', 'Ashenafi.Dejen@AP', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('43d1b9bc-9636-4e91-a792-328e4ff3da07', 'Beakal', 'Deriba', 0, 1, 91, 1, 'AP', 'Beakal.Deriba@AP', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b4bc20fb-8e4a-40fc-a6ab-114b3e7118e0', 'Brian', 'Gatete', 0, 1, 91, 1, 'AP', 'Brian.Gatete@AP', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('62b58a3d-5388-489d-a4e1-9a7b94c92652', 'Chritsine', 'Cadeau', 0, 1, 91, 1, 'AP', 'Chritsine.Cadeau@AP', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef455', 'Cloudx', 'Integration', 1, 1, 91, 1, 'AP', 'esadmin@americanproducts', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6a9f7108-b31b-4ec1-9766-065a3b6b17a7', 'Export', 'Service', 0, 1, 91, 1, 'AP', 'Export.Service@AP', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ea09cdfd-572e-47c8-82f6-808fb3f198f1', 'Kenan', 'Esubalew', 0, 1, 91, 1, 'AP', 'Kenan.Esubalew@AP', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('55c70ab7-82b7-4ae1-8822-c4ca135f5272', 'Kenean', 'Kenean', 0, 1, 91, 1, 'AP', 'Kenean.Kenean@AP', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d1e3aa4b-8330-434b-a0c9-c4498c6d4721', 'Luke', 'James', 0, 1, 91, 0, 'AP', 'Luke.James@AP', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('95406654-4f72-440d-b760-710430e53afe', 'Mikias', 'Leweyehu', 0, 1, 91, 1, 'AP', 'Mikias.Leweyehu@AP', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cae1ea72-96a2-4f2a-92d9-9118835b1c07', 'Nshimiyimana', 'Jean', 0, 1, 91, 1, 'AP', 'Nshimiyimana.Jean@AP', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1182f791-b892-4e13-89a7-2e57f2575dbb', 'Nshimiyimana', 'Jean', 0, 0, 91, 1, 'AP', 'Nshimiyimana.Jean@AP-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('01e647cd-4c62-409c-9113-b9afd98ac764', 'Samrawit', 'Tesfaye', 0, 1, 91, 1, 'AP', 'Samrawit.Tesfaye@AP', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bc2e21eb-f5dd-4685-849f-3fc9fefb4d1f', 'Selam', 'Amare', 0, 1, 91, 1, 'AP', 'Selam.Amare@AP', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4506c7d9-c9af-4a60-99fe-a06021d4e23c', 'Tiblets', 'Zewde', 0, 1, 91, 1, 'AP', 'Tiblets.Zewde@AP', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('46aa118b-7ba7-41c6-9dea-bcc9c0e3e4c3', 'Wibit', 'Yitbarek', 0, 1, 91, 1, 'AP', 'Wibit.Yitbarek@AP', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('82af6bc4-61a7-4611-b534-e07693da1e30', 'Yafet', 'Abdo', 0, 1, 91, 1, 'AP', 'Yafet.Abdo@AP', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ed328ba1-67d2-4f2f-991a-21b0a393f2d2', 'Yaphet', 'G/Tsadik', 0, 1, 91, 1, 'AP', 'Yaphet.G/Tsadik@AP', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('aab03115-3950-4a35-b43e-a8f29884ae9b', 'Yonatan', 'Getamesay', 0, 1, 91, 1, 'AP', 'Yonatan.Getamesay@AP', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9f3d6d6b-f61b-4e0a-913f-04c2c25e08e0', 'Admin', 'Ccare', 1, 1, 92, 1, 'CCare', 'Admin@CCare', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f465dc1a-58df-46ad-aa39-7a85c4757da5', 'Alexandra', 'Esmeralda', 0, 1, 92, 1, 'CCare', 'Alexandra.Esmeralda@CCare', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3b4f9b6f-2a45-4861-baca-6cb470676176', 'Arsema', 'Abiy', 0, 1, 92, 1, 'CCare', 'Arsema.Abiy@CCare', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2f51bd62-32ed-4179-bb0d-50b87f82c97e', 'Ashenafi', 'Dejen', 0, 1, 92, 1, 'CCare', 'Ashenafi.Dejen@CCare', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('156bb5ff-ff3c-4302-8d7f-ad1ab7f1be73', 'Beakal', 'Deriba', 0, 1, 92, 1, 'CCare', 'Beakal.Deriba@CCare', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b29c89a0-bea2-4dd3-a912-8785074249f9', 'Beatriz', 'Rodriguez', 0, 1, 92, 1, 'CCare', 'Beatriz.Rodriguez@CCare', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c375b36a-8356-4af1-a145-5bb35a9c877d', 'Beatriz', 'Rodriguez', 0, 0, 92, 1, 'CCare', 'Beatriz.Rodriguez@CCare-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef496', 'Cloudx', 'Integration', 1, 1, 92, 1, 'CCare', 'esadmin@ccare', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f3c31c5e-04d6-49b4-8d94-f6fe6c580cc0', 'Juan', 'Ccare', 1, 0, 92, 1, 'CCare', 'Admin@CCare-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ab7b2b63-deb0-4743-9660-42361f7e3f39', 'Lisbeth', 'Paredes', 0, 1, 92, 1, 'CCare', 'Lisbeth.Paredes@CCare', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5be4cc17-f1ae-45a8-86ed-fd6a6a5d5cd9', 'Lula', 'Portillo', 0, 1, 92, 1, 'CCare', 'Lula.Portillo@CCare', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d0b2f546-68ed-4242-8d86-01a84e571055', 'Majo', 'Cruz', 0, 1, 92, 1, 'CCare', 'Majo.Cruz@CCare', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e64cd25f-ebad-42a5-b8c1-c1139bc39c9a', 'Paola', 'Beltran', 0, 1, 92, 1, 'CCare', 'Paola.Beltran@CCare', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ae9bb48c-fc8e-4272-8a71-35d557812932', 'Rossapiccare', 'Rossapiccare', 0, 1, 92, 1, 'CCare', 'Rossapiccare.Rossapiccare@CCare', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('421b8889-a016-4dd0-bc4e-aef4f7baeed4', 'Samrawit', 'Tesfaye', 0, 1, 92, 1, 'CCare', 'Samrawit.Tesfaye@CCare', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6302fab1-b12c-4fc2-acaf-86c398b295f2', 'Selam', 'Eshete', 0, 1, 92, 1, 'CCare', 'Selam.Eshete@CCare', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1b87c012-e4ea-471b-b4b7-6a4a6729b538', 'Tiblets', 'Zewde', 0, 1, 92, 1, 'CCare', 'Tiblets.Zewde@CCare', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e577eef0-22f2-4733-807d-f562813aeaa4', 'Yafet', 'Abdo', 0, 1, 92, 1, 'CCare', 'Yafet.Abdo@CCare', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6b76a92c-71b8-4471-a079-0c69fd5daf4c', 'Yonatan', 'Getamesay', 0, 1, 92, 1, 'CCare', 'Yonatan.Getamesay@CCare', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08b0d3c3-fb9a-11ed-bb71-02c102131f31', 'Export', 'Service', 0, 1, 94, 1, 'AP-Staging', 'Export.Service@AP-Staging', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('688757be-29b9-4a19-9c58-8dd3247bd19b', 'Abeba', 'Degefu', 0, 1, 97, 1, 'HarcoSemco', 'Abeba.Degefu@HarcoSemco', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('084e333d-a179-40f5-9185-1efb00b5155e', 'Arsema', 'Abiy', 0, 1, 97, 1, 'HarcoSemco', 'Arsema.Abiy@HarcoSemco', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('298da6b2-fc6f-4f4c-a140-4230b7a28e95', 'Ashenafi', 'Dejen', 0, 1, 97, 1, 'HarcoSemco', 'Ashenafi.Dejen@HarcoSemco', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('993ddd3b-247b-4faa-9ad6-79621c3d777b', 'Bezawit', 'Lewoyehu', 0, 1, 97, 1, 'HarcoSemco', 'Bezawit.Lewoyehu@HarcoSemco', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef494', 'Cloudx', 'Integration', 1, 1, 97, 1, 'HarcoSemco', 'esadmin@harcosemco', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7bd804d-d6cd-4f29-9e0b-7734c81ef4b2', 'Cloudx', 'Integration', 0, 0, 97, 1, 'HarcoSemco', 'esharcosemco', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7e0f2dc-8f72-4105-949f-9c9456b0201e', 'Jote', 'Daniel', 0, 1, 97, 1, 'HarcoSemco', 'Jote.Daniel@HarcoSemco', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d77c0849-5af6-4274-a389-d57fb68d8ebf', 'Kenan', 'Esubalew', 0, 1, 97, 1, 'HarcoSemco', 'Kenan.Esubalew@HarcoSemco', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8ec897e1-5d83-41e6-ac29-0611eebc7860', 'Kenean', 'Esubalew', 0, 1, 97, 1, 'HarcoSemco', 'Kenean.Esubalew@HarcoSemco', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0ba2391-e628-4c65-a577-e02dcfaf516b', 'Kokeb', 'H.Michael', 0, 1, 97, 1, 'HarcoSemco', 'Kokeb.H.Michael@HarcoSemco', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7643933b-cd99-444d-b554-3dd65b402ee2', 'Samrawit', 'Tesfaye', 0, 1, 97, 1, 'HarcoSemco', 'Samrawit.Tesfaye@HarcoSemco', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9391cfcc-f644-40d0-990b-5f7ed4f053e1', 'Selam', 'Eshete', 0, 1, 97, 1, 'HarcoSemco', 'Selam.Eshete@HarcoSemco', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f9ff0bff-5bc5-4c78-b9b3-539c6bb235cd', 'Solomon', 'Tesfaye', 0, 1, 97, 1, 'HarcoSemco', 'Solomon.Tesfaye@HarcoSemco', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('60ae2065-9498-4120-b699-12ac09f438cd', 'Tiblets', 'Zewde', 0, 1, 97, 1, 'HarcoSemco', 'Tiblets.Zewde@HarcoSemco', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bffcd4a2-eeac-41fe-ba00-b110e258f464', 'Wibit', 'Yitbarek', 0, 1, 97, 1, 'HarcoSemco', 'Wibit.Yitbarek@HarcoSemco', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7ba4ae3e-1b8b-4ac9-a1e6-6cb3c5ed3adf', 'Yafet', 'Abdo', 0, 1, 97, 1, 'HarcoSemco', 'Yafet.Abdo@HarcoSemco', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('34a3a570-cb5a-448c-a156-3b4631c0096a', 'Yonatan', 'Getamesay', 0, 1, 97, 1, 'HarcoSemco', 'Yonatan.Getamesay@HarcoSemco', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4acc1acd-0e1c-4909-9d29-d567c3593a95', 'Aklilu', 'Tesfaye', 0, 1, 98, 1, 'UpstateNiagara', 'Aklilu.Tesfaye@UpstateNiagara', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1e113807-ab55-4d6e-adc4-c9be363bba3e', 'Anathole', 'Niyongana', 0, 1, 98, 1, 'UpstateNiagara', 'Anathole.Niyongana@UpstateNiagara', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('900e9c38-a991-4a24-af24-53212db119b2', 'Arsema', 'Abiy', 0, 1, 98, 1, 'UpstateNiagara', 'Arsema.Abiy@UpstateNiagara', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e38fe8c3-ae3d-4ba9-9a95-99e9a4a45be4', 'Ashenafi', 'Dejen', 0, 1, 98, 1, 'UpstateNiagara', 'Ashenafi.Dejen@UpstateNiagara', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('581dd20a-e749-48b6-8d67-7ee3018121f4', 'Biruk', 'Kenaw', 0, 1, 98, 1, 'UpstateNiagara', 'Biruk.Kenaw@UpstateNiagara', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6337bb5d-d71a-45bc-92af-18aeebd0d372', 'Brian', 'Gatete', 0, 1, 98, 1, 'UpstateNiagara', 'Brian.Gatete@UpstateNiagara', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b5f40471-436d-4788-8f6e-a48f1a394fc4', 'Bro', 'Elias', 0, 0, 98, 1, 'UpstateNiagara', 'Bro.Elias@UpstateNiagara-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fe5c2e07-d754-4c74-b994-7267bad6c439', 'Buro', 'Elias', 0, 1, 98, 1, 'UpstateNiagara', 'Buro.Elias@UpstateNiagara', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6e8384e3-5a11-4386-a3e1-f8ee227f07fb', 'Christine', 'Uwase', 0, 1, 98, 1, 'UpstateNiagara', 'Christine.Uwase@UpstateNiagara', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef493', 'Cloudx', 'Integration', 1, 1, 98, 1, 'UpstateNiagara', 'esadmin@upstate', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1ccb7cef-73ca-4ae1-b591-6f753e664ae3', 'Feven', 'Berhe', 0, 1, 98, 1, 'UpstateNiagara', 'Feven.Berhe@UpstateNiagara', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e66d5b06-8676-436e-911a-ba0f548c6909', 'Mikias', 'Leweyehu', 0, 1, 98, 1, 'UpstateNiagara', 'Mikias.Leweyehu@UpstateNiagara', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d833eb73-4a11-4ef8-aff3-b0a2855c3f51', 'Nshimiyimana', 'Jean', 0, 1, 98, 1, 'UpstateNiagara', 'Nshimiyimana.Jean@UpstateNiagara', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3d1663f1-ed5e-4ff5-a653-5488becf0497', 'Rossapiunc', 'Rossapiunc', 0, 1, 98, 1, 'UpstateNiagara', 'Rossapiunc.Rossapiunc@UpstateNiagara', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('64edab55-48b4-47de-a6ee-45e3cfe4108e', 'Samrawit', 'Tesfaye', 0, 1, 98, 1, 'UpstateNiagara', 'Samrawit.Tesfaye@UpstateNiagara', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f6c1e240-3762-4ec2-873e-f1757df952d9', 'Selam', 'Eshete', 0, 1, 98, 1, 'UpstateNiagara', 'Selam.Eshete@UpstateNiagara', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ac323dfc-2f50-45b3-baa7-b23684538973', 'Solomon', 'Tesfaye', 0, 1, 98, 1, 'UpstateNiagara', 'Solomon.Tesfaye@UpstateNiagara', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a0675c6d-467a-49e3-8e54-896c883fe943', 'User', 'Approver2', 0, 0, 98, 1, 'UpstateNiagara', 'User.Approver2@UpstateNiagara-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a07d1568-beee-4634-8a3d-98dcce45c25b', 'Wibit', 'Yitbarek', 0, 1, 98, 1, 'UpstateNiagara', 'Wibit.Yitbarek@UpstateNiagara', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2467ed3d-18ca-4a09-bc0b-323cb335d9b0', 'Yafet', 'Abdo', 0, 1, 98, 1, 'UpstateNiagara', 'Yafet.Abdo@UpstateNiagara', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7dacf5f8-2960-45cd-82e6-2f351d2582e9', 'Yonatan', 'Getamesay', 0, 1, 98, 1, 'UpstateNiagara', 'Yonatan.Getamesay@UpstateNiagara', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('001df79d-c7cc-4196-8ff2-5a20eab21c5a', 'Alexandra', 'Esmeralda', 0, 1, 100, 1, 'Deerland', 'Alexandra.Esmeralda@Deerland', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6bdf5b60-92f8-4790-ac3a-547989793471', 'Bea', 'Rodriguez', 0, 1, 100, 1, 'Deerland', 'Bea.Rodriguez@Deerland', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('07829e36-d2fd-4c42-8bc4-ccfc2b72f7c4', 'Beatriz', 'Beltran', 0, 1, 100, 1, 'Deerland', 'Beatriz.Beltran@Deerland', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef492', 'Cloudx', 'Integration', 1, 1, 100, 1, 'Deerland', 'esadmin@deerland', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cc2db797-79fa-4834-96e2-3814820e85eb', 'Concepcion', 'Miranda', 0, 1, 100, 1, 'Deerland', 'Concepcion.Miranda@Deerland', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('255c64d7-a75d-4152-844f-d4aa920c8cd4', 'Juan', 'Jose', 0, 1, 100, 1, 'Deerland', 'Juan.Jose@Deerland', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cceb2785-1344-4c2c-b4d4-90b062ee563c', 'Majo', 'Cruz', 0, 1, 100, 1, 'Deerland', 'Majo.Cruz@Deerland', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8df170ad-c373-4825-93fd-8cbc5e3121bc', 'Naty', 'Perez', 0, 1, 100, 1, 'Deerland', 'Naty.Perez@Deerland', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('950e2b9b-86ef-4e58-8e3e-66fe61a8d6aa', 'Paola', 'Rodriguez', 0, 1, 100, 1, 'Deerland', 'Paola.Rodriguez@Deerland', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8a3e400d-e952-413f-a702-a1f60f1504df', 'Reinaldo', 'Cruz', 0, 1, 100, 1, 'Deerland', 'Reinaldo.Cruz@Deerland', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('710d54ee-874d-4641-81a5-b3ea333be17d', 'Cloudx', 'Integration', 0, 0, 100, 1, 'Deerland', 'apteandeerland', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('77c26b49-7cf6-4fd4-a962-65fea662d9f4', 'Sandra', 'Cruz', 0, 1, 100, 1, 'Deerland', 'Sandra.Cruz@Deerland', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ca237fa1-5846-46e4-a6a2-46f3c462a305', 'Aklilu', 'Tesfaye', 0, 1, 102, 1, 'CoinStar', 'Aklilu.Tesfaye@CoinStar', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('54082364-b576-47df-ae53-769c9d3376aa', 'Ashenafi', 'Dejen', 0, 1, 102, 1, 'CoinStar', 'Ashenafi.Dejen@CoinStar', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e2926485-9cff-46ae-a122-bd50048971f7', 'Beakal', 'Deriba', 0, 1, 102, 1, 'CoinStar', 'Beakal.Deriba@CoinStar', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5579b56b-6479-45ed-bf6e-bd73daab1078', 'Bro', 'Elias', 0, 0, 102, 1, 'CoinStar', 'Bro.Elias@CoinStar-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef453', 'Cloudx', 'Integration', 1, 1, 102, 1, 'CoinStar', 'esadmin@coinstar', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6726c772-7e62-4127-8166-66d880e04877', 'Admin', 'Cloudx', 1, 1, 102, 1, 'CoinStar', 'Admin@CoinStar', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d24adad2-485d-4703-84d9-da32ac626804', 'Feven', 'Berhe', 0, 1, 102, 1, 'CoinStar', 'Feven.Berhe@CoinStar', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7642ef10-6a58-476d-a8be-ace07e1da1b7', 'Mikiyas', 'Leweyehu', 0, 1, 102, 1, 'CoinStar', 'Mikiyas.Leweyehu@CoinStar', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b780267c-efc1-4088-bce1-85a9abf9f274', 'Missing', 'Approver', 0, 0, 102, 1, 'CoinStar', 'Missing.Approver@CoinStar-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('aaf24701-47f6-4ab2-8074-37f270ab51b4', 'Samri', 'Samrawit', 0, 1, 102, 1, 'CoinStar', 'Samri.Samrawit@CoinStar', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('07268584-2097-4bba-9af6-1a0e09bc23ff', 'Selam', 'Eshete', 0, 1, 102, 1, 'CoinStar', 'Selam.Eshete@CoinStar', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fad8492b-aef8-4a63-9097-2c38ac2a49f9', 'Solomon', 'Tesfaye', 0, 1, 102, 1, 'CoinStar', 'Solomon.Tesfaye@CoinStar', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b598e927-37dd-4faa-a4e3-f6fc7912ffbe', 'Wibit', 'Yitbarek', 0, 1, 102, 1, 'CoinStar', 'Wibit.Yitbarek@CoinStar', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1bdd5f4a-23a6-471c-80ab-a900ffde8b29', 'Wibit', 'Yitbarek', 0, 0, 102, 1, 'CoinStar', 'Wibit.Yitbarek@CoinStar-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('00b2f355-fada-4581-aec5-36e33e34dadd', 'Yaphet', 'G/Tsadik', 0, 1, 102, 1, 'CoinStar', 'Yaphet.G/Tsadik@CoinStar', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('795682b8-b7ae-4b2f-aa50-a4cfc313c59e', 'Ale', 'Esmeralda', 0, 1, 103, 1, 'FuszProject', 'Ale.Esmeralda@FuszProject', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1d235d1c-571c-4999-907a-464cde5eb774', 'Bea', 'Rodriguez', 0, 1, 103, 1, 'FuszProject', 'Bea.Rodriguez@FuszProject', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8c2e732e-4ffa-48fe-8105-a8d4c5e59ac3', 'Beatriz', 'Rodriguez', 0, 1, 103, 1, 'FuszProject', 'Beatriz.Rodriguez@FuszProject', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef462', 'Cloudx', 'Integration', 1, 1, 103, 1, 'FuszProject', 'esadmin@fuse', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1d6165e9-0176-4b1f-871f-9e1a74d0aed5', 'Concepcion', 'Miranda', 0, 1, 103, 1, 'FuszProject', 'Concepcion.Miranda@FuszProject', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('acddf28e-e5c4-402c-8dfe-5921da847a50', 'Daniel', 'Campos', 0, 1, 103, 1, 'FuszProject', 'Daniel.Campos@FuszProject', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9ef7eaba-4461-45a6-84d1-8114e0ab0b4c', 'Development', 'Cloudx', 0, 0, 103, 1, 'FuszProject', 'Development.Cloudx@FuszProject-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d28f5850-6fea-4709-a1ec-a2b4e6d4c743', 'Admin', 'Cloudx', 1, 1, 103, 1, 'FuszProject', 'Admin@FuszProject', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9cde4eb2-fed9-40e8-8c62-61b6e5c67768', 'Gaby', 'Portillo', 0, 1, 103, 1, 'FuszProject', 'Gaby.Portillo@FuszProject', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9a8393a0-7544-45ca-bf10-91a5a1d9fbb1', 'Jackie', 'Cunningham', 0, 1, 103, 0, 'FuszProject', 'Jackie.Cunningham@FuszProject', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('72519a97-0e4b-11eb-b8dc-22000ab67d3b', 'Janet', 'Beye', 0, 1, 103, 0, 'FuszProject', 'Janet.Beye@FuszProject', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('45f1752d-f804-4d6d-ac99-0f0457d49a12', 'Juan', 'Escobar', 1, 0, 103, 1, 'FuszProject', 'Admin@FuszProject-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('70c3765d-83cd-4d3e-86a6-017eba09bc62', 'Juan', 'Escobar', 0, 0, 103, 1, 'FuszProject', 'Juan.Escobar@FuszProject-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('82af903d-ef67-464e-940b-31b1d72c2d31', 'Kevin', 'OConnell', 0, 1, 103, 1, 'FuszProject', 'Kevin.OConnell@FuszProject', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6dabc5b7-f87e-41fd-bad9-03928c5f97d6', 'Lisbeth', 'Paredes', 0, 1, 103, 1, 'FuszProject', 'Lisbeth.Paredes@FuszProject', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('afe47bc9-68f4-41b9-a329-18c7d0931c93', 'Luis', 'Rodriguez', 0, 1, 103, 1, 'FuszProject', 'Luis.Rodriguez@FuszProject', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cf15f725-1c08-45d7-be92-3d9d32417bf3', 'Majo', 'Cruz', 0, 1, 103, 1, 'FuszProject', 'Majo.Cruz@FuszProject', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('597f9a97-e94f-4700-b0ed-ec915f53f6c6', 'Naty', 'Perez', 0, 1, 103, 1, 'FuszProject', 'Naty.Perez@FuszProject', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e1636bb3-4429-4fb0-9d40-c576fac3a055', 'Paola', 'Beltran', 0, 1, 103, 1, 'FuszProject', 'Paola.Beltran@FuszProject', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2ae6088f-7d99-48e6-9d25-e5042f3f7445', 'Reinaldo', 'Cruz', 0, 1, 103, 1, 'FuszProject', 'Reinaldo.Cruz@FuszProject', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5983ae2c-a079-4641-8580-c8453991e80c', 'Rhina', 'Crespin', 0, 1, 103, 1, 'FuszProject', 'Rhina.Crespin@FuszProject', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8817df61-6858-40eb-bf32-a87a68e5f7a2', 'Sandra', 'Cruz', 0, 1, 103, 1, 'FuszProject', 'Sandra.Cruz@FuszProject', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f0e1349f-e3a0-4e3f-aa60-e6c8d327ed19', 'Es', 'Adimn', 0, 0, 108, 1, 'SequoiaCapital', 'Es.Adimn@SequoiaCapital-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0823f2dd-928e-476f-b44b-35c6174cb23b', 'Juan', 'Jose', 1, 0, 108, 1, 'SequoiaCapital', 'Admin@SequoiaCapital-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('db20d2e8-6b0d-4579-91d4-f8fd92eb1acc', 'Samrawit', 'Tesfaye', 0, 1, 108, 1, 'SequoiaCapital', 'Samrawit.Tesfaye@SequoiaCapital', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('429f9db2-bfaf-4523-944f-95ef7130ca5e', 'Cloudx', 'Integration', 0, 0, 108, 1, 'SequoiaCapital', 'sequoiacapitalintegration', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('86f58dd4-7cc4-4edb-b4f0-6f7ca0140577', 'Aklilu', 'Tesfaye', 0, 1, 114, 1, 'FranklinStreetBakery', 'Aklilu.Tesfaye@FranklinStreetBakery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6e34c7de-e0d1-4128-8e84-74a6853ba946', 'Ashenafi', 'Dejen', 0, 1, 114, 1, 'FranklinStreetBakery', 'Ashenafi.Dejen@FranklinStreetBakery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2bda1153-77d5-4809-91ad-b06b0f84bbe6', 'Beakal', 'Deriba', 0, 1, 114, 1, 'FranklinStreetBakery', 'Beakal.Deriba@FranklinStreetBakery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e5ba0f65-3152-4b35-be87-354958eabc52', 'Bezawit', 'Lewoyehu', 0, 1, 114, 1, 'FranklinStreetBakery', 'Bezawit.Lewoyehu@FranklinStreetBakery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef484', 'Cloudx', 'Integration', 1, 1, 114, 1, 'FranklinStreetBakery', 'esadmin@franklin', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1bc7c1b4-d286-4370-b809-1152d661e72e', 'Feven', 'Berhe', 0, 1, 114, 1, 'FranklinStreetBakery', 'Feven.Berhe@FranklinStreetBakery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e91f2358-d36a-4970-a990-b8c970b1b656', 'Solomon', 'Tesfaye', 0, 1, 114, 1, 'FranklinStreetBakery', 'Solomon.Tesfaye@FranklinStreetBakery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4eb9272f-aeba-4a18-a085-315d4f155d32', 'Wibit', 'Yitbarek', 0, 1, 114, 1, 'FranklinStreetBakery', 'Wibit.Yitbarek@FranklinStreetBakery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7a59e38d-9983-4f61-b473-72f345225678', 'Yonatan', 'Getamesay', 0, 1, 114, 1, 'FranklinStreetBakery', 'Yonatan.Getamesay@FranklinStreetBakery', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4f5bfb9a-b86b-11eb-9bd1-0a3b5527d91d', 'Admin', 'Andeanmotor', 1, 1, 119, 1, 'AndeanMotor', 'Admin@AndeanMotor', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b1f349ab-3939-45d1-bc6b-03bcd0d721e5', 'Alex', 'Donaldson', 0, 1, 119, 0, 'AndeanMotor', 'Alex.Donaldson@AndeanMotor', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('354382c7-8eb8-4e8d-8a9e-857fe1beb585', 'Alexandra', 'Esmeralda', 0, 1, 119, 1, 'AndeanMotor', 'Alexandra.Esmeralda@AndeanMotor', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('286985fc-c637-4749-bec5-3ce85dd8ff29', 'Beatriz', 'Rodriguez', 0, 1, 119, 1, 'AndeanMotor', 'Beatriz.Rodriguez@AndeanMotor', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef456', 'Cloudx', 'Integration', 1, 1, 119, 1, 'AndeanMotor', 'esadmin@andeanmototrs', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('affd1bbd-2e2a-47a8-9573-b3082ff6c16f', 'Concepcion', 'Miranda', 0, 1, 119, 1, 'AndeanMotor', 'Concepcion.Miranda@AndeanMotor', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('20982c4d-1f92-467c-a712-66057859b837', 'Gaby', 'Portillo', 0, 1, 119, 1, 'AndeanMotor', 'Gaby.Portillo@AndeanMotor', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8eb7e5f6-aa69-4578-9672-d22a443b75b7', 'Juan', 'Escobar', 0, 1, 119, 1, 'AndeanMotor', 'Juan.Escobar@AndeanMotor', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e231b122-84c9-4613-9b75-21fe9ac642d5', 'Luis', 'Rodriguez', 0, 1, 119, 1, 'AndeanMotor', 'Luis.Rodriguez@AndeanMotor', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d3a84073-7bab-4408-b698-cfd3cf91a73b', 'Majo', 'Cruz', 0, 1, 119, 1, 'AndeanMotor', 'Majo.Cruz@AndeanMotor', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ec536c5e-b68a-4cf1-96d6-ee53d85eb3b2', 'Naty', 'Perez', 0, 1, 119, 1, 'AndeanMotor', 'Naty.Perez@AndeanMotor', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('293f1c20-00cd-4e52-b895-57ab6ec887a5', 'Paola', 'Beltran', 0, 1, 119, 1, 'AndeanMotor', 'Paola.Beltran@AndeanMotor', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d2eb76da-045f-4ee4-8aa6-b7cb035b2dd4', 'Paola', 'Beltran', 0, 0, 119, 1, 'AndeanMotor', 'Paola.Beltran@AndeanMotor-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4eb7fe1c-f7d8-444a-a8c8-9b66c0c3bc88', 'Reinaldo', 'Cruz', 0, 1, 119, 1, 'AndeanMotor', 'Reinaldo.Cruz@AndeanMotor', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5966cba5-3e83-4298-8846-02965620dfcc', 'Alexandra', 'Esmeralda', 0, 1, 125, 1, 'RamarFoods', 'Alexandra.Esmeralda@RamarFoods', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6539b9ca-097d-489a-b2ae-81b7d6bbc483', 'Bea', 'Rodriguez', 0, 1, 125, 1, 'RamarFoods', 'Bea.Rodriguez@RamarFoods', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c5c9a7b1-2c88-4f88-9ec1-d5ed603bc7d7', 'Beatriz', 'Rodriguez', 0, 1, 125, 1, 'RamarFoods', 'Beatriz.Rodriguez@RamarFoods', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d53351e7-4a62-45d6-be3c-90f5c5274049', 'Bro', 'Elias', 0, 0, 125, 1, 'RamarFoods', 'Bro.Elias@RamarFoods-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2af47a11-9ac0-420e-8ae5-072586e742f3', 'Concepcion', 'Miranda', 0, 1, 125, 1, 'RamarFoods', 'Concepcion.Miranda@RamarFoods', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9fd191cf-af70-4284-9b84-ef3d0eef5a59', 'Gaby', 'Portillo', 0, 1, 125, 1, 'RamarFoods', 'Gaby.Portillo@RamarFoods', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6286b82b-0f9c-4c01-99aa-7da46b6d1632', 'Majo', 'Cruz', 0, 1, 125, 1, 'RamarFoods', 'Majo.Cruz@RamarFoods', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('94f615df-2eff-40ff-b2e5-cc8e159814b0', 'Paola', 'Beltran', 0, 1, 125, 1, 'RamarFoods', 'Paola.Beltran@RamarFoods', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f04e08bb-4f3d-4d8f-8c27-98079824c49f', 'Reinaldo', 'Cruz', 0, 1, 125, 1, 'RamarFoods', 'Reinaldo.Cruz@RamarFoods', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7c9ab763-9c04-4231-8114-22e40ded9891', 'Arsema', 'Abiy', 0, 1, 128, 1, 'SummitAutomotive', 'Arsema.Abiy@SummitAutomotive', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('661d01cf-2754-4abe-9e5a-7385a97cfc7a', 'Ashenafi', 'Dejen', 0, 1, 128, 1, 'SummitAutomotive', 'Ashenafi.Dejen@SummitAutomotive', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3b96c856-9536-4bd3-bce9-6f878a002886', 'Beakal', 'Deriba', 0, 1, 128, 1, 'SummitAutomotive', 'Beakal.Deriba@SummitAutomotive', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6fb1f3e7-e298-4eee-a1bd-21458c276eae', 'Bro', 'Elias', 0, 0, 128, 1, 'SummitAutomotive', 'Bro.Elias@SummitAutomotive-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef469', 'Cloudx', 'Integration', 1, 1, 128, 1, 'SummitAutomotive', 'esadmin@summitauto', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4cee78d3-0843-4d9b-bb1c-3d9e0184ab68', 'Feven', 'Berhe', 0, 1, 128, 1, 'SummitAutomotive', 'Feven.Berhe@SummitAutomotive', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d0be107b-8945-4867-bf5b-3eea3ed90ff0', 'Feven', 'Berhe', 0, 0, 128, 1, 'SummitAutomotive', 'Feven.Berhe@SummitAutomotive-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('59c269a9-2041-4382-8112-0820230d4e23', 'Getamesay', 'Yonatan', 0, 1, 128, 1, 'SummitAutomotive', 'Getamesay.Yonatan@SummitAutomotive', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a302bca6-dbeb-48ce-b308-0a9d713b63f8', 'Kalkidan', 'Kefelegh', 0, 1, 128, 1, 'SummitAutomotive', 'Kalkidan.Kefelegh@SummitAutomotive', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a2757a90-3c13-42bb-993c-3dbcea604b5a', 'Mikiyas', 'Leweyehu', 0, 1, 128, 1, 'SummitAutomotive', 'Mikiyas.Leweyehu@SummitAutomotive', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('09c330f2-7212-4238-ba7f-9258a8f32156', 'Samri', 'Tesfaye', 0, 1, 128, 1, 'SummitAutomotive', 'Samri.Tesfaye@SummitAutomotive', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('48bc53a0-fddc-43d0-9f84-a38c8d626542', 'Selam', 'Aamare', 0, 1, 128, 1, 'SummitAutomotive', 'Selam.Aamare@SummitAutomotive', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e8f3face-067e-11ec-8402-0a3b5527d91d', 'Admin', 'Cloudx', 1, 1, 128, 1, 'SummitAutomotive', 'Admin@SummitAutomotive', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('dd4ebebb-5e94-4cc8-9283-d31e41af2704', 'Tsion', 'Habtamu', 0, 1, 128, 1, 'SummitAutomotive', 'Tsion.Habtamu@SummitAutomotive', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('75c8ed54-de5d-4444-8dd5-cd46b3b07c09', 'Wibit', 'Yitbarek', 0, 1, 128, 1, 'SummitAutomotive', 'Wibit.Yitbarek@SummitAutomotive', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('54e7f95e-f5eb-47f7-9a6f-ad0bdeb26e4f', 'Yaphet', 'G/Tsadik', 0, 1, 128, 1, 'SummitAutomotive', 'Yaphet.G/Tsadik@SummitAutomotive', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('98a03816-8ce4-43a6-b827-be4e1f03bd7e', 'Yonatan', 'Getamesay', 0, 1, 128, 1, 'SummitAutomotive', 'Yonatan.Getamesay@SummitAutomotive', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0e20bf3d-0637-49a9-9fc7-86d93666decb', 'Zion', 'Habtamu', 0, 1, 128, 1, 'SummitAutomotive', 'Zion.Habtamu@SummitAutomotive', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d45d4530-dd18-40b7-a27d-4ae310a9b607', 'Bro', 'Elias', 0, 0, 129, 1, 'GrandeRonde', 'Bro.Elias@GrandeRonde-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef491', 'Cloudx', 'Integration', 1, 1, 129, 1, 'GrandeRonde', 'esadmin@grande', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3edaf515-5b82-4c2e-a7bd-4b5832e8e3f1', 'Esgrande', 'Esgrande', 0, 1, 129, 1, 'GrandeRonde', 'Esgrande.Esgrande@GrandeRonde', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('06bae9a6-5fc6-4056-91d6-f46f4930a43f', 'Admin', 'Cloudx', 1, 1, 129, 1, 'GrandeRonde', 'Admin@GrandeRonde', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9630f5e2-b0e9-41a1-9e4f-eb8c53607b6a', 'Hamida', 'Mansoori', 0, 1, 129, 1, 'GrandeRonde', 'Hamida.Mansoori@GrandeRonde', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('aa30a5b9-4572-4e86-9059-a3f334d348c5', 'Santosh', 'Warang', 0, 1, 129, 1, 'GrandeRonde', 'Santosh.Warang@GrandeRonde', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b2c7c308-dc46-424d-b16b-319bae7219e3', 'Swapna', 'Sawant', 0, 1, 129, 1, 'GrandeRonde', 'Swapna.Sawant@GrandeRonde', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6328665d-964b-46a9-b898-14d770a634cf', 'Admin', 'Fermanauto', 1, 1, 130, 1, 'FermanAuto', 'Admin@FermanAuto', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8b28378b-43e4-4279-8dc2-767de4b5484f', 'Alexandra', 'Esmeralda', 0, 1, 130, 1, 'FermanAuto', 'Alexandra.Esmeralda@FermanAuto', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ea5c5af1-2d34-45f4-a554-a4a9a6253bb6', 'Bea', 'Rodriguez', 0, 1, 130, 1, 'FermanAuto', 'Bea.Rodriguez@FermanAuto', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1742d360-1394-419c-a29a-cf34755cb3b9', 'Beatriz', 'Rodriguez', 0, 1, 130, 1, 'FermanAuto', 'Beatriz.Rodriguez@FermanAuto', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef459', 'Cloudx', 'Integration', 1, 1, 130, 1, 'FermanAuto', 'esadmin@ferman', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('794eb267-94d3-4abb-b06a-30e37bb7104e', 'Concepcion', 'Miranda', 0, 1, 130, 1, 'FermanAuto', 'Concepcion.Miranda@FermanAuto', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9ff6e8e8-eee6-4999-9ceb-77d2ae4b52e9', 'Fatima', 'Mendoza', 0, 1, 130, 1, 'FermanAuto', 'Fatima.Mendoza@FermanAuto', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('86bc3ae2-8ac0-4ba6-995d-5158f4617e39', 'Gaby', 'Portillo', 0, 1, 130, 1, 'FermanAuto', 'Gaby.Portillo@FermanAuto', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('69ef3490-fa1f-4886-8259-b1b2be639043', 'Luis', 'Rodriguez', 0, 1, 130, 1, 'FermanAuto', 'Luis.Rodriguez@FermanAuto', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('97c95d76-4fb3-438e-ae55-b40efb5253f8', 'Majo', 'Cruz', 0, 1, 130, 1, 'FermanAuto', 'Majo.Cruz@FermanAuto', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('68e3d529-b07b-46b4-9ef0-7ad05d5b7c68', 'Malu', 'Portillo', 0, 1, 130, 1, 'FermanAuto', 'Malu.Portillo@FermanAuto', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0ccde369-e789-470f-a2fb-91701e832252', 'Paola', 'Beltran', 0, 1, 130, 1, 'FermanAuto', 'Paola.Beltran@FermanAuto', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('351d5766-d1da-44a5-b581-f0d091feb806', 'Reinaldo', 'Cruz', 0, 1, 130, 1, 'FermanAuto', 'Reinaldo.Cruz@FermanAuto', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('90bb95f9-07b4-4bc2-8c88-00d4ba7a56ee', 'Sandra', 'Cruz', 0, 1, 130, 1, 'FermanAuto', 'Sandra.Cruz@FermanAuto', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('235076eb-12db-4e93-9082-aeb836a29a2c', 'Abeba', 'Degefu', 0, 1, 132, 1, 'KeyAuto', 'Abeba.Degefu@KeyAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('76e7c8a4-ccf7-462a-8205-f76d5323084a', 'Admin', 'Keyauto', 1, 1, 132, 1, 'KeyAuto', 'Admin@KeyAuto', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b090e93e-6670-436e-9f4d-5db4967c0f29', 'Aklilu', 'Tesfaye', 0, 1, 132, 1, 'KeyAuto', 'Aklilu.Tesfaye@KeyAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d706d07e-e385-4931-a510-4ae18af411be', 'Ashenafi', 'Dejen', 0, 1, 132, 1, 'KeyAuto', 'Ashenafi.Dejen@KeyAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f63b0e4a-ead3-4d5f-bc04-82b538b60dbb', 'Beakal', 'Deriba', 0, 1, 132, 1, 'KeyAuto', 'Beakal.Deriba@KeyAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7ff33257-fe7e-4f51-9452-09b00d3a85ec', 'Bezawit', 'Lewoyehu', 0, 1, 132, 1, 'KeyAuto', 'Bezawit.Lewoyehu@KeyAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88b85937-d0e3-45d4-9bfa-3e54bbebb957', 'Bro', 'Elias', 0, 0, 132, 1, 'KeyAuto', 'Bro.Elias@KeyAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef489', 'Cloudx', 'Integration', 1, 1, 132, 1, 'KeyAuto', 'esadmin@keyauto', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5280bd9d-5e7b-41a3-bfb4-affdd4d4796f', 'Feven', 'Berhe', 0, 1, 132, 1, 'KeyAuto', 'Feven.Berhe@KeyAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0b7bd459-47b5-4d6a-89f8-df8a3cea234f', 'Kalkidan', 'Ageghehu', 0, 1, 132, 1, 'KeyAuto', 'Kalkidan.Ageghehu@KeyAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('72f192c7-7b66-46b7-a8f4-2d40e28af9fe', 'Meron', 'Agegew', 0, 1, 132, 1, 'KeyAuto', 'Meron.Agegew@KeyAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('648aa430-805a-4f03-919e-ea90cae3486c', 'Mikiyas', 'Leweyehu', 0, 1, 132, 1, 'KeyAuto', 'Mikiyas.Leweyehu@KeyAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('33b79483-4720-48e6-b39c-71bb27f3c8ad', 'Natnael', 'Alemayehu', 0, 1, 132, 1, 'KeyAuto', 'Natnael.Alemayehu@KeyAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('488a43af-292b-4cdd-94e8-39491fcbad35', 'Solomon', 'Tesfaye', 0, 1, 132, 1, 'KeyAuto', 'Solomon.Tesfaye@KeyAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('818f7b80-9b85-42a0-8a6d-12d8cc9dca41', 'Wibit', 'Yitbarek', 0, 1, 132, 1, 'KeyAuto', 'Wibit.Yitbarek@KeyAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('06cd9b9c-a513-4c95-b7b7-1d7671a0fc2d', 'Yafet', 'Abdo', 0, 1, 132, 1, 'KeyAuto', 'Yafet.Abdo@KeyAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('06f6ac19-4c3a-4e84-911a-5abd58fa96ea', 'Komal', 'Kandu', 0, 1, 133, 1, 'ACF', 'Komal.Kandu@ACF', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cad0784d-4457-4110-827d-c4cafc26486e', 'Manoj', 'Bhati', 0, 1, 133, 1, 'ACF', 'Manoj.Bhati@ACF', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d10dc5ed-bba2-4b5b-9c75-cc9e70611991', 'Poonam', 'Bhati', 0, 1, 133, 1, 'ACF', 'Poonam.Bhati@ACF', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3090635d-be10-4199-8ec0-cf599655cbe3', 'Riyan', 'Pujari', 0, 1, 133, 1, 'ACF', 'Riyan.Pujari@ACF', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('66683576-f9a1-4a65-9e30-532844a3489b', 'Srikanth', 'Rai', 0, 1, 133, 1, 'ACF', 'Srikanth.Rai@ACF', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('87568afa-a8e2-48c1-88e3-031e5af36f56', 'Subhash', 'Soni', 0, 1, 133, 1, 'ACF', 'Subhash.Soni@ACF', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9506e6d4-779b-11ec-b1f1-0a3b5527d91d', 'Admin', 'Cloudx', 1, 1, 134, 1, 'CDK', 'Admin@CDK', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e727c557-6c8e-4a73-811b-a2ee93e4916d', 'Admin', 'Homerskelton', 1, 1, 137, 1, 'HomerSkelton', 'Admin@HomerSkelton', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef464', 'Cloudx', 'Integration', 1, 1, 137, 1, 'HomerSkelton', 'esadmin@homer', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a3bd9e8b-8824-44bb-b860-3d3deca062ed', 'Komal', 'Kandu', 0, 1, 137, 1, 'HomerSkelton', 'Komal.Kandu@HomerSkelton', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0e0f21ba-9f10-416c-b18a-caa77e2c5663', 'Manoj', 'Bhati', 0, 1, 137, 1, 'HomerSkelton', 'Manoj.Bhati@HomerSkelton', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('154e216f-a445-4636-8c39-4a147fe0a2db', 'Poonam', 'Bhati', 0, 1, 137, 1, 'HomerSkelton', 'Poonam.Bhati@HomerSkelton', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1ffbfe36-18eb-49d9-ac37-3601330ee692', 'Priya', 'Shetty', 0, 1, 137, 1, 'HomerSkelton', 'Priya.Shetty@HomerSkelton', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cf9509fc-7aac-43f6-b4a5-77385d2801ed', 'Rai', 'Srikanth', 0, 1, 137, 1, 'HomerSkelton', 'Rai.Srikanth@HomerSkelton', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('37458cc5-c362-4114-a63a-9350ff39b4ea', 'Riyan', 'Pujari', 0, 1, 137, 1, 'HomerSkelton', 'Riyan.Pujari@HomerSkelton', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('304f2cd3-9c6a-484d-a4b7-b4d602a19553', 'Subhash', 'Soni', 0, 1, 137, 1, 'HomerSkelton', 'Subhash.Soni@HomerSkelton', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d6404e3f-f382-4d67-bde2-130bb34168ea', 'Tammy', 'Fletcher', 0, 1, 137, 0, 'HomerSkelton', 'Tammy.Fletcher@HomerSkelton', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('83a7c88b-5da1-4943-b868-6021f6794b7c', 'Yash', 'Chauhan', 0, 1, 137, 1, 'HomerSkelton', 'Yash.Chauhan@HomerSkelton', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b8505402-ca45-11ec-986e-0a62e852177b', 'Admin', 'Murphyauto', 1, 1, 140, 1, 'MurphyAuto', 'Admin@MurphyAuto', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2fa0f5aa-fbd8-4b8b-b2da-9c77f1d7a65c', 'Ashenafi', 'Dejen', 0, 1, 140, 1, 'MurphyAuto', 'Ashenafi.Dejen@MurphyAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('37017d36-ac52-4af5-be0a-ce587ecfe30b', 'Beakal', 'Deriba', 0, 1, 140, 1, 'MurphyAuto', 'Beakal.Deriba@MurphyAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0da0f1f6-930a-47e5-b8f7-cba7da0f77c9', 'Bro', 'Elias', 0, 0, 140, 1, 'MurphyAuto', 'Bro.Elias@MurphyAuto-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a73e3a86-d353-4740-9def-733ca959eac1', 'Samri', 'Tesfaye', 0, 1, 140, 1, 'MurphyAuto', 'Samri.Tesfaye@MurphyAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ab668f53-dc90-413b-a377-9bfd1b7cefaa', 'Selam', 'Amare', 0, 1, 140, 1, 'MurphyAuto', 'Selam.Amare@MurphyAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('91d85af6-7527-4199-bb1f-38fd3b9b5d6b', 'Wibit', 'Yitbarek', 0, 1, 140, 1, 'MurphyAuto', 'Wibit.Yitbarek@MurphyAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c3954bf3-b7de-41e3-b5bf-caa03effefae', 'Yafet', 'Abdo', 0, 1, 140, 1, 'MurphyAuto', 'Yafet.Abdo@MurphyAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5aa96970-6425-4c8e-9258-412d2c6f1437', 'Yaphet', 'G/Tsadik', 0, 1, 140, 1, 'MurphyAuto', 'Yaphet.G/Tsadik@MurphyAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('381b6b08-1609-4094-a20c-b6e3908fa355', 'Yonatan', 'Getamesay', 0, 1, 140, 1, 'MurphyAuto', 'Yonatan.Getamesay@MurphyAuto', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('53d53d3a-d2a5-11ec-ab24-0a62e852177b', 'Admin', 'Fermanmotor', 1, 1, 141, 1, 'FermanMotor', 'Admin@FermanMotor', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('47c4fc66-18a4-4369-a6bf-98569fb0b4f0', 'Bea', 'Rodriguez', 0, 1, 141, 1, 'FermanMotor', 'Bea.Rodriguez@FermanMotor', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e6c63e3d-da80-4632-801e-0fad1216910b', 'Beatriz', 'Rodriguez', 0, 1, 141, 1, 'FermanMotor', 'Beatriz.Rodriguez@FermanMotor', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bb49d0bd-55dd-4b58-9a4e-6ed636f95bbf', 'Bro', 'Elias', 0, 0, 141, 1, 'FermanMotor', 'Bro.Elias@FermanMotor-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef460', 'Cloudx', 'Integration', 1, 1, 141, 1, 'FermanMotor', 'esadmin@fermanmotors', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d349acab-de49-438f-b0ea-f9bfdb998f71', 'Concepcion', 'Miranda', 0, 1, 141, 1, 'FermanMotor', 'Concepcion.Miranda@FermanMotor', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('88ef292b-51f3-4380-b119-39616eacef12', 'Daniel', 'Campos', 0, 1, 141, 1, 'FermanMotor', 'Daniel.Campos@FermanMotor', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f362aa55-12d6-4e87-aeb4-df9ddced03fc', 'Fatima', 'Mendoza', 0, 1, 141, 1, 'FermanMotor', 'Fatima.Mendoza@FermanMotor', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1f016fd3-eb9a-459f-bdae-457481e8c5af', 'Gaby', 'Portillo', 0, 1, 141, 1, 'FermanMotor', 'Gaby.Portillo@FermanMotor', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b9acf804-a3de-4a2b-b136-c82dbae84667', 'Juan', 'Escobar', 0, 1, 141, 1, 'FermanMotor', 'Juan.Escobar@FermanMotor', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9cef8f34-95ee-401c-8803-69470051c024', 'Luis', 'Rodriguez', 0, 1, 141, 1, 'FermanMotor', 'Luis.Rodriguez@FermanMotor', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b3a7ef12-281f-4cfd-ab79-998e547b9719', 'Majo', 'Cruz', 0, 1, 141, 1, 'FermanMotor', 'Majo.Cruz@FermanMotor', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bc57ee30-63ff-4bd7-8b33-5de809780a3c', 'Naty', 'Perez', 0, 1, 141, 1, 'FermanMotor', 'Naty.Perez@FermanMotor', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4f598973-126d-4519-8eb2-8146ea1da18e', 'Paola', 'Beltran', 0, 1, 141, 1, 'FermanMotor', 'Paola.Beltran@FermanMotor', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d6e63f00-aca9-40f3-bafd-0129b840ab16', 'Reinaldo', 'Cruz', 0, 1, 141, 1, 'FermanMotor', 'Reinaldo.Cruz@FermanMotor', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3b652efa-4b46-4190-a304-e6b78e0d1381', 'Sandra', 'Cruz', 0, 1, 141, 1, 'FermanMotor', 'Sandra.Cruz@FermanMotor', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9866f039-00b8-4a84-9f35-e6e60b8d2e22', 'Ashenafi', 'Dejen', 0, 1, 142, 1, 'InterimHealthcare', 'Ashenafi.Dejen@InterimHealthcare', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef488', 'Cloudx', 'Integration', 1, 1, 142, 1, 'InterimHealthcare', 'esadmin@interim', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3899dd35-69cb-4e48-bc66-57cb18aaddc8', 'Mikiyas', 'Leweyehu', 0, 1, 142, 1, 'InterimHealthcare', 'Mikiyas.Leweyehu@InterimHealthcare', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('23e70feb-34fb-4f0d-86df-36758844c58a', 'Natnael', 'Alemayehu', 0, 1, 142, 1, 'InterimHealthcare', 'Natnael.Alemayehu@InterimHealthcare', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c0cec580-4f55-4b3a-a9b6-1f4ff22be551', 'Samri', 'Tesfaye', 0, 1, 142, 1, 'InterimHealthcare', 'Samri.Tesfaye@InterimHealthcare', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('31450998-e059-4c8f-a101-eb46804cc540', 'Solomon', 'Tesfaye', 0, 1, 142, 1, 'InterimHealthcare', 'Solomon.Tesfaye@InterimHealthcare', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8b1cfb5c-8b93-4dda-8475-689bd3977211', 'Webite', 'Self', 0, 1, 142, 1, 'InterimHealthcare', 'Webite.Self@InterimHealthcare', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('32662395-60d4-4f0d-858d-ebaaa5e2d130', 'Wibit', 'Yitbarek', 0, 1, 142, 1, 'InterimHealthcare', 'Wibit.Yitbarek@InterimHealthcare', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7adbcc4-f2f8-11ec-ab24-0a62e852177b', 'Abeba', 'Degefu', 0, 1, 143, 1, 'H&HCSV', 'Abeba.Degefu@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7acf731-f2f8-11ec-ab24-0a62e852177b', 'Admin', 'H&Hcsv', 0, 0, 143, 1, 'H&HCSV', 'Admin.H&Hcsv@H&HCSV-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad6730-f2f8-11ec-ab24-0a62e852177b', 'Aklilu', 'Tesfaye', 0, 1, 143, 1, 'H&HCSV', 'Aklilu.Tesfaye@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad7a7a-f2f8-11ec-ab24-0a62e852177b', 'Alem', 'Gidey', 0, 1, 143, 1, 'H&HCSV', 'Alem.Gidey@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad022c-f2f8-11ec-ab24-0a62e852177b', 'Anathole', 'Niyongana', 0, 1, 143, 1, 'H&HCSV', 'Anathole.Niyongana@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad1bda-f2f8-11ec-ab24-0a62e852177b', 'Arsema', 'Abiy', 0, 1, 143, 1, 'H&HCSV', 'Arsema.Abiy@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad67e2-f2f8-11ec-ab24-0a62e852177b', 'Ashenafi', 'Dejen', 0, 1, 143, 1, 'H&HCSV', 'Ashenafi.Dejen@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad0401-f2f8-11ec-ab24-0a62e852177b', 'Atnatiwos', 'Solomon', 0, 1, 143, 1, 'H&HCSV', 'Atnatiwos.Solomon@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad0324-f2f8-11ec-ab24-0a62e852177b', 'Beakal', 'Deriba', 0, 1, 143, 1, 'H&HCSV', 'Beakal.Deriba@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad33b5-f2f8-11ec-ab24-0a62e852177b', 'Bereket', 'G/Hiwot', 0, 1, 143, 1, 'H&HCSV', 'Bereket.G/Hiwot@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad0ca2-f2f8-11ec-ab24-0a62e852177b', 'Biruk', 'Kenaw', 0, 1, 143, 1, 'H&HCSV', 'Biruk.Kenaw@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad1b1e-f2f8-11ec-ab24-0a62e852177b', 'Brian', 'Gatete', 0, 1, 143, 1, 'H&HCSV', 'Brian.Gatete@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad6e66-f2f8-11ec-ab24-0a62e852177b', 'Bro', 'Elias', 0, 0, 143, 1, 'H&HCSV', 'Bro.Elias@H&HCSV-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad20e3-f2f8-11ec-ab24-0a62e852177b', 'Chritsine', 'Chris', 0, 1, 143, 1, 'H&HCSV', 'Chritsine.Chris@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad1def-f2f8-11ec-ab24-0a62e852177b', 'Elshaday', 'Adamu', 0, 1, 143, 1, 'H&HCSV', 'Elshaday.Adamu@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad0e21-f2f8-11ec-ab24-0a62e852177b', 'Es', 'Handhauto', 0, 0, 143, 1, 'H&HCSV', 'Es.Handhauto@H&HCSV-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ace927-f2f8-11ec-ab24-0a62e852177b', 'Eyerusalem', 'Birhane', 0, 1, 143, 1, 'H&HCSV', 'Eyerusalem.Birhane@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad62e4-f2f8-11ec-ab24-0a62e852177b', 'Feven', 'Berehe', 0, 1, 143, 1, 'H&HCSV', 'Feven.Berehe@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ada356-f2f8-11ec-ab24-0a62e852177b', 'Gideon', 'Bereket', 0, 1, 143, 1, 'H&HCSV', 'Gideon.Bereket@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad2e4f-f2f8-11ec-ab24-0a62e852177b', 'Handh', 'Supervisor', 0, 1, 143, 1, 'H&HCSV', 'Handh.Supervisor@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad074f-f2f8-11ec-ab24-0a62e852177b', 'Jote', 'Daniel', 0, 1, 143, 1, 'H&HCSV', 'Jote.Daniel@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad29a0-f2f8-11ec-ab24-0a62e852177b', 'Juan', 'Jose', 1, 0, 143, 1, 'H&HCSV', 'Admin@H&HCSV-Disabled', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7acfcac-f2f8-11ec-ab24-0a62e852177b', 'Kalaeb', 'Weldegebrial', 0, 1, 143, 1, 'H&HCSV', 'Kalaeb.Weldegebrial@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad4d6a-f2f8-11ec-ab24-0a62e852177b', 'Kaleab', 'Tariku', 0, 1, 143, 1, 'H&HCSV', 'Kaleab.Tariku@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7adabaf-f2f8-11ec-ab24-0a62e852177b', 'Kenean', 'Esubalew', 0, 1, 143, 1, 'H&HCSV', 'Kenean.Esubalew@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad6d27-f2f8-11ec-ab24-0a62e852177b', 'Kidist', 'Kibatu', 0, 1, 143, 1, 'H&HCSV', 'Kidist.Kibatu@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad4cb9-f2f8-11ec-ab24-0a62e852177b', 'Mahlet', 'Bekele', 0, 1, 143, 1, 'H&HCSV', 'Mahlet.Bekele@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7acf411-f2f8-11ec-ab24-0a62e852177b', 'Melat', 'Mitiku', 0, 1, 143, 1, 'H&HCSV', 'Melat.Mitiku@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad5b53-f2f8-11ec-ab24-0a62e852177b', 'Mikias', 'Leweyehu', 0, 1, 143, 1, 'H&HCSV', 'Mikias.Leweyehu@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad1964-f2f8-11ec-ab24-0a62e852177b', 'Mikiyas', 'Tefera', 0, 1, 143, 1, 'H&HCSV', 'Mikiyas.Tefera@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ada843-f2f8-11ec-ab24-0a62e852177b', 'Misker', 'Tsegaye', 0, 1, 143, 1, 'H&HCSV', 'Misker.Tsegaye@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ada544-f2f8-11ec-ab24-0a62e852177b', 'Natnael', 'Alemayehu', 0, 1, 143, 1, 'H&HCSV', 'Natnael.Alemayehu@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad1a5e-f2f8-11ec-ab24-0a62e852177b', 'Nshimiyimana', 'Jean', 0, 1, 143, 1, 'H&HCSV', 'Nshimiyimana.Jean@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad4ada-f2f8-11ec-ab24-0a62e852177b', 'Seble', 'Sisay', 0, 1, 143, 1, 'H&HCSV', 'Seble.Sisay@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad0bdd-f2f8-11ec-ab24-0a62e852177b', 'Selam', 'Eshete', 0, 1, 143, 1, 'H&HCSV', 'Selam.Eshete@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7adbb69-f2f8-11ec-ab24-0a62e852177b', 'Solomon', 'Tesfaye', 0, 1, 143, 1, 'H&HCSV', 'Solomon.Tesfaye@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ada787-f2f8-11ec-ab24-0a62e852177b', 'Tesfahun', 'Tsehaye', 0, 1, 143, 1, 'H&HCSV', 'Tesfahun.Tsehaye@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7acfe2b-f2f8-11ec-ab24-0a62e852177b', 'Tiblets', 'Zewde', 0, 1, 143, 1, 'H&HCSV', 'Tiblets.Zewde@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad5aab-f2f8-11ec-ab24-0a62e852177b', 'Tsedenya', 'Yohannes', 0, 1, 143, 1, 'H&HCSV', 'Tsedenya.Yohannes@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7adac76-f2f8-11ec-ab24-0a62e852177b', 'Wibit', 'Yitbarek', 0, 1, 143, 1, 'H&HCSV', 'Wibit.Yitbarek@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad4e0a-f2f8-11ec-ab24-0a62e852177b', 'Yafet', 'Abdo', 0, 1, 143, 1, 'H&HCSV', 'Yafet.Abdo@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad437b-f2f8-11ec-ab24-0a62e852177b', 'Yaphet', 'G/Tsadik', 0, 1, 143, 1, 'H&HCSV', 'Yaphet.G/Tsadik@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e7ad54fb-f2f8-11ec-ab24-0a62e852177b', 'Yonatan', 'N', 0, 1, 143, 1, 'H&HCSV', 'Yonatan.N@H&HCSV', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('84d1e7dd-ea14-4e58-ab82-ca2bed3616bf', 'Bea', 'Rodriguez', 0, 1, 147, 1, 'DigitalDynamics', 'Bea.Rodriguez@DigitalDynamics', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7f642d3e-5281-49ee-80fe-c254c49b9cc7', 'Bro', 'Elias', 0, 0, 147, 1, 'DigitalDynamics', 'Bro.Elias@DigitalDynamics-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef487', 'Cloudx', 'Integration', 1, 1, 147, 1, 'DigitalDynamics', 'esadmin@digitaldynamics', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('80088e4f-add6-4d1a-98e8-e6cc30a792d1', 'Concepcion', 'Miranda', 0, 1, 147, 1, 'DigitalDynamics', 'Concepcion.Miranda@DigitalDynamics', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b64bf4bd-d64a-4d71-9583-e335ffbc27fe', 'Daniel', 'Campos', 0, 1, 147, 1, 'DigitalDynamics', 'Daniel.Campos@DigitalDynamics', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9c947201-0298-40d5-b6d9-ee4945b63139', 'Digital', 'Dynamics Es', 0, 0, 147, 1, 'DigitalDynamics', 'Digital.Dynamics Es@DigitalDynamics-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cfd91648-35bd-4d79-8242-56917ee6f76f', 'Gaby', 'Portillo', 0, 1, 147, 1, 'DigitalDynamics', 'Gaby.Portillo@DigitalDynamics', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1647df6b-398b-4dc1-8f6c-0e74cc592112', 'Luis', 'Rodriguez', 0, 1, 147, 1, 'DigitalDynamics', 'Luis.Rodriguez@DigitalDynamics', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4492a592-8faf-4a0f-99ac-0aac4fdc2eb6', 'Lula', 'Portillo', 0, 1, 147, 1, 'DigitalDynamics', 'Lula.Portillo@DigitalDynamics', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5aace29c-ea79-4d11-b5e7-e45b7446cfd7', 'Majo', 'Cruz', 0, 1, 147, 1, 'DigitalDynamics', 'Majo.Cruz@DigitalDynamics', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cc1dcace-f4ec-4db2-a1ae-977202923bec', 'Paola', 'Beltran', 0, 1, 147, 1, 'DigitalDynamics', 'Paola.Beltran@DigitalDynamics', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('256a405f-5b21-4c05-be0b-6dff489a7015', 'Reinaldo', 'Cruz', 0, 1, 147, 1, 'DigitalDynamics', 'Reinaldo.Cruz@DigitalDynamics', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d8fee044-a2e3-4c3f-9482-1006e8242d0c', 'Reinaldo', 'Cruz', 0, 0, 147, 1, 'DigitalDynamics', 'Reinaldo.Cruz@DigitalDynamics-Disabled', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5526fcbe-fd8e-4425-926e-af65df5b7a16', 'Samrawit', 'Tesfaye', 0, 1, 147, 1, 'DigitalDynamics', 'Samrawit.Tesfaye@DigitalDynamics', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('57005625-1b59-468a-9028-77bf59e05786', 'Sandra', 'Cruz', 0, 1, 147, 1, 'DigitalDynamics', 'Sandra.Cruz@DigitalDynamics', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a2accb14-2474-11ed-ab24-0a62e852177b', 'Admin', 'Cloudx', 1, 1, 150, 1, 'Tekion', 'Admin@Tekion', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a8259295-5d95-4027-a657-8d7529cad14d', 'Admin', 'Keenanfarms', 1, 1, 159, 1, 'KeenanFarms', 'Admin@KeenanFarms', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d05f7708-c988-4fd7-bfc2-80ea7ae24d84', 'Admin', 'Billknightautomotive', 1, 1, 163, 1, 'BillKnightAutomotive', 'Admin@BillKnightAutomotive', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('95d34e9b-af1d-453e-b33b-1c00ad14138a', 'Bro', 'Elias', 0, 0, 163, 1, 'BillKnightAutomotive', 'Bro.Elias@BillKnightAutomotive-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef457', 'Cloudx', 'Integration', 1, 1, 163, 1, 'BillKnightAutomotive', 'esadmin@billknight', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('70e3e714-89c9-4f99-916b-fbf425737aea', 'Komal', 'Kandu', 0, 1, 163, 1, 'BillKnightAutomotive', 'Komal.Kandu@BillKnightAutomotive', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e0b62570-066a-4692-b6cd-caa55015ebef', 'Manoj', 'Bhati', 0, 1, 163, 1, 'BillKnightAutomotive', 'Manoj.Bhati@BillKnightAutomotive', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6dfff700-e5f3-438e-8b94-d3bfc03cf4a1', 'Poonam', 'Bhati', 0, 1, 163, 1, 'BillKnightAutomotive', 'Poonam.Bhati@BillKnightAutomotive', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f42d7455-d6db-41e7-8a27-b3bb1fdc2270', 'Riyan', 'Pujari', 0, 1, 163, 1, 'BillKnightAutomotive', 'Riyan.Pujari@BillKnightAutomotive', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5fecb524-7af5-417a-a4a7-e0986f842ffb', 'Satish', 'Lokhande', 0, 1, 163, 1, 'BillKnightAutomotive', 'Satish.Lokhande@BillKnightAutomotive', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9b0ade3a-306b-4339-98c0-017777c3fe2d', 'Shravan', 'Chauhan', 0, 1, 163, 1, 'BillKnightAutomotive', 'Shravan.Chauhan@BillKnightAutomotive', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('45a8da1b-bf39-4b05-bfd9-d53a6d11c4ab', 'Srikanth', 'Pujari', 0, 1, 163, 1, 'BillKnightAutomotive', 'Srikanth.Pujari@BillKnightAutomotive', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('46946e51-ce7d-4ee8-80b3-a2c84e08ef4b', 'Bea', 'Rodriguez', 0, 1, 164, 1, 'FermanFAM', 'Bea.Rodriguez@FermanFAM', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef461', 'Cloudx', 'Integration', 1, 1, 164, 1, 'FermanFAM', 'esadmin@fermanfam', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d555c024-0022-4a69-b543-14f6bc63bf55', 'Concepcion', 'Miranda', 0, 1, 164, 1, 'FermanFAM', 'Concepcion.Miranda@FermanFAM', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('372b064a-d70e-4ded-acbd-ecfa8c9aaa4f', 'Daniel', 'Campos', 0, 1, 164, 1, 'FermanFAM', 'Daniel.Campos@FermanFAM', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8fb628cc-b25c-4af7-b8eb-ef374c37221b', 'Juan', 'Escobar', 0, 1, 164, 1, 'FermanFAM', 'Juan.Escobar@FermanFAM', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('db75022c-a5f6-4c3f-bb9e-619bf021f92f', 'Lula', 'Portillo', 0, 1, 164, 1, 'FermanFAM', 'Lula.Portillo@FermanFAM', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('204f376d-0f41-457c-a422-2649191a7ec5', 'Majo', 'Cruz', 0, 1, 164, 1, 'FermanFAM', 'Majo.Cruz@FermanFAM', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a31ef679-0f46-4bea-bc9a-3a48eb63ee94', 'Reinaldo', 'Cruz', 0, 1, 164, 1, 'FermanFAM', 'Reinaldo.Cruz@FermanFAM', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4ac2a5e7-b4bf-4be9-a18a-ecac04a84cad', 'Sandra', 'Cruz', 0, 1, 164, 1, 'FermanFAM', 'Sandra.Cruz@FermanFAM', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('015b5ea0-b605-4435-bd95-478dd96dc749', 'Admin', 'Lewaamerica', 1, 1, 167, 1, 'LewaAmerica', 'Admin@LewaAmerica', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('49ff6d73-a71a-4ea8-88a4-e21625ebd4fb', 'Beatriz', 'Rodriguez', 0, 1, 170, 1, 'UCAL', 'Beatriz.Rodriguez@UCAL', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef481', 'Cloudx', 'Integration', 1, 1, 170, 1, 'UCAL', 'esadmin@ucal', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6608b4fa-a4a6-4766-b514-421dab756ee9', 'Concepcion', 'Miranda', 0, 1, 170, 1, 'UCAL', 'Concepcion.Miranda@UCAL', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d498b252-c96e-4cbc-9bb4-607870a210fa', 'Lula', 'Portillo', 0, 1, 170, 1, 'UCAL', 'Lula.Portillo@UCAL', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('58698d01-3ad3-4528-8b90-f7b4947b8771', 'Majo', 'Cruz', 0, 1, 170, 1, 'UCAL', 'Majo.Cruz@UCAL', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('11735726-d8e3-4646-a3dd-2f6ec0b9d19a', 'Reinaldo', 'Cruz', 0, 1, 170, 1, 'UCAL', 'Reinaldo.Cruz@UCAL', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5e83f803-8c85-416f-b657-40c032b8f6a7', 'Sandra', 'Cruz', 0, 1, 170, 1, 'UCAL', 'Sandra.Cruz@UCAL', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('477fa0dd-8678-463c-ac62-8abe50273526', 'Web', 'Admin', 0, 0, 170, 1, 'UCAL', 'Web.Admin@UCAL-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cd5acce7-bceb-440c-851c-c86a4146f294', 'Bea', 'Rodriguez', 0, 1, 171, 1, 'GroteAutomotive', 'Bea.Rodriguez@GroteAutomotive', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef463', 'Cloudx', 'Integration', 1, 1, 171, 1, 'GroteAutomotive', 'esadmin@grote', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('89441698-e6d3-4519-8412-841c2d4f35d2', 'Concepcion', 'Miranda', 0, 1, 171, 1, 'GroteAutomotive', 'Concepcion.Miranda@GroteAutomotive', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('20b6ed6e-afc9-4fe9-b2dd-71da80a7a05c', 'Daniel', 'Campos', 0, 1, 171, 1, 'GroteAutomotive', 'Daniel.Campos@GroteAutomotive', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ee8765e8-59e4-410c-83d5-1f714187b70b', 'Gabriela', 'Portillo', 0, 1, 171, 1, 'GroteAutomotive', 'Gabriela.Portillo@GroteAutomotive', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('281f0721-9bdd-4908-bb86-3ae585d17194', 'Grote', 'Testing', 0, 1, 171, 1, 'GroteAutomotive', 'Grote.Testing@GroteAutomotive', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7ff4db6f-1d13-449b-b9be-c01178082f8d', 'Luis', 'Rodriguez', 0, 1, 171, 1, 'GroteAutomotive', 'Luis.Rodriguez@GroteAutomotive', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('216a4353-451a-4050-953b-32a2b93ef269', 'Majo', 'Cruz', 0, 1, 171, 1, 'GroteAutomotive', 'Majo.Cruz@GroteAutomotive', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('62ff2457-165c-4b98-b563-3b9b6e62ff87', 'Reinaldo', 'Cruz', 0, 1, 171, 1, 'GroteAutomotive', 'Reinaldo.Cruz@GroteAutomotive', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b24216c0-fc52-4a9e-9353-a218f06cb381', 'Sandra', 'Cruz', 0, 1, 171, 1, 'GroteAutomotive', 'Sandra.Cruz@GroteAutomotive', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c6a6b87c-c7cb-4cd9-95a5-e74608102dd4', 'Anand', 'Rathod', 0, 1, 174, 1, 'MikeBell', 'Anand.Rathod@MikeBell', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef508', 'Cloudx', 'Integration', 1, 1, 174, 1, 'MikeBell', 'esadmin@mikebell', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('499fbd21-87cd-4da8-8c51-6a613b889f40', 'Dinesh', 'Pujari', 0, 1, 174, 1, 'MikeBell', 'Dinesh.Pujari@MikeBell', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a3ecbae0-d264-4867-a5c3-f5c40c6c8a5b', 'Kapil', 'Pujari', 0, 1, 174, 1, 'MikeBell', 'Kapil.Pujari@MikeBell', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('bd84ad2a-8ee7-4c2c-b473-449b74c315cb', 'Prakas', 'Chandawat', 0, 1, 174, 1, 'MikeBell', 'Prakas.Chandawat@MikeBell', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3ed2b683-a6f9-4e79-a2b8-2e783a93ef64', 'Prasad', 'Pujari', 0, 1, 174, 1, 'MikeBell', 'Prasad.Pujari@MikeBell', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3cc47f94-75cc-4461-9302-a71fef229407', 'Subash', 'Soni', 0, 1, 174, 1, 'MikeBell', 'Subash.Soni@MikeBell', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e9f956d5-3245-4e26-8b0d-a2ee5b07a84e', 'Anand', 'Rathod', 0, 1, 176, 1, 'BobLoquercio', 'Anand.Rathod@BobLoquercio', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef458', 'Cloudx', 'Integration', 1, 1, 176, 1, 'BobLoquercio', 'esadmin@bobloquerio', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c0831498-e08f-4a72-ba61-349425d5b297', 'Dinesh', 'Pujari', 0, 1, 176, 1, 'BobLoquercio', 'Dinesh.Pujari@BobLoquercio', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('8bac35bf-6450-442d-8dcb-46fb9828d24e', 'Kapil', 'Pujari', 0, 1, 176, 1, 'BobLoquercio', 'Kapil.Pujari@BobLoquercio', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('609b9c19-9ad6-46b4-8355-860cf6f972f7', 'Prakas', 'Chandawat', 0, 1, 176, 1, 'BobLoquercio', 'Prakas.Chandawat@BobLoquercio', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c45847b8-eda0-4c62-bf79-d14815c21281', 'Prasad', 'Pujari', 0, 1, 176, 1, 'BobLoquercio', 'Prasad.Pujari@BobLoquercio', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('05eb250d-5752-46b1-b5c9-8935a7ebdb96', 'Satish', 'Lokhande', 0, 1, 176, 1, 'BobLoquercio', 'Satish.Lokhande@BobLoquercio', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef467', 'Cloudx', 'Integration', 1, 1, 177, 1, 'P4Automotive', 'esadmin@p4', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c976a9bd-b8f4-467f-8e65-8ecbe8d6ff56', 'Isha', 'Vankar', 0, 1, 177, 1, 'P4Automotive', 'Isha.Vankar@P4Automotive', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f633138d-8f77-46d4-ad98-120cf300a28a', 'Priyanka', 'Amrite', 0, 1, 177, 1, 'P4Automotive', 'Priyanka.Amrite@P4Automotive', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2fdd2b29-b158-47b5-9979-eba798d60306', 'Sarika', 'More', 0, 1, 177, 1, 'P4Automotive', 'Sarika.More@P4Automotive', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('21666276-9c85-4459-9822-4f1e57b73d47', 'Seema', 'Katkar', 0, 1, 177, 1, 'P4Automotive', 'Seema.Katkar@P4Automotive', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('49d4100f-b6fd-459b-81a5-f570ddcc69db', 'Admin', 'Cavenderauto', 1, 1, 179, 1, 'CavenderAuto', 'Admin@CavenderAuto', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('efb5a4f7-76f4-4291-8ae2-f95302dd68f6', 'Admin', 'Brandingiron', 1, 1, 181, 1, 'BrandingIron', 'Admin@BrandingIron', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2d03e16c-751b-454f-b70e-f59eceb9b5a9', 'Anand', 'Rathod', 0, 1, 181, 1, 'BrandingIron', 'Anand.Rathod@BrandingIron', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('86aa62cf-cc38-41dc-845a-43a91fe34f5a', 'Branding', 'Cloudx', 0, 0, 181, 1, 'BrandingIron', 'Branding.Cloudx@BrandingIron-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef482', 'Cloudx', 'Integration', 1, 1, 181, 1, 'BrandingIron', 'esadmin@branding', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a75bf9fe-5644-4d08-a805-7a542cdd8a02', 'Dinesh', 'Pujari', 0, 1, 181, 1, 'BrandingIron', 'Dinesh.Pujari@BrandingIron', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('039eca6a-63d7-48b8-b5a8-3d305c84e6c4', 'Export', 'Service', 0, 1, 181, 1, 'BrandingIron', 'Export.Service@BrandingIron', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e18243fd-2505-4f94-a85c-7c3443eaa524', 'Kapil', 'Pujari', 0, 1, 181, 1, 'BrandingIron', 'Kapil.Pujari@BrandingIron', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('688110f1-d0bb-479b-af6d-0ca4f267d2c5', 'Prakas', 'Chandawat', 0, 1, 181, 1, 'BrandingIron', 'Prakas.Chandawat@BrandingIron', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f89905dd-999c-45bc-82e1-1b68b2d6ca2d', 'Prasad', 'Pujari', 0, 1, 181, 1, 'BrandingIron', 'Prasad.Pujari@BrandingIron', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('aa28c921-ebfd-4cf3-b983-1d5c3adcb41e', 'Kapil', 'Pujari', 0, 1, 182, 1, 'ToyotaofDecatur', 'Kapil.Pujari@ToyotaofDecatur', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f73e621b-e199-4244-b886-bfaf12788617', 'Manoj', 'Bhati', 0, 1, 182, 1, 'ToyotaofDecatur', 'Manoj.Bhati@ToyotaofDecatur', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('accf7acc-934e-4624-9d48-8ed1ae105a1c', 'Poonam', 'Bhati', 0, 1, 182, 1, 'ToyotaofDecatur', 'Poonam.Bhati@ToyotaofDecatur', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e2eea2ba-7c48-44df-9be4-a7b9bed2ef84', 'Satish', 'Lokhande', 0, 1, 182, 1, 'ToyotaofDecatur', 'Satish.Lokhande@ToyotaofDecatur', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('6f7f1e42-526a-11ee-944c-02c102131f31', 'Admin', 'Cloudx', 1, 1, 182, 1, 'ToyotaofDecatur', 'Admin@ToyotaofDecatur', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9e527445-b799-4e0d-be04-ef8077fb8363', 'Shravan', 'Chauhan', 0, 1, 182, 1, 'ToyotaofDecatur', 'Shravan.Chauhan@ToyotaofDecatur', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('784b0068-3c43-431d-a883-9dd3d8a35f49', 'Srikanth', 'Pujari', 0, 1, 182, 1, 'ToyotaofDecatur', 'Srikanth.Pujari@ToyotaofDecatur', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('27d65be3-891a-4e8c-b7eb-83a676136386', 'Yuvraj', 'Chauhan', 0, 1, 182, 1, 'ToyotaofDecatur', 'Yuvraj.Chauhan@ToyotaofDecatur', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e1fcc510-66c5-4a92-9c53-b5b47f17d133', 'Ajay', 'Singh', 0, 1, 183, 1, 'StepOneAutomotive', 'Ajay.Singh@StepOneAutomotive', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f59bc556-676b-4fb7-865a-1b6460d2d17e', 'Amol', 'Rane', 0, 1, 183, 1, 'StepOneAutomotive', 'Amol.Rane@StepOneAutomotive', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2dcc7fe7-c872-44d9-b51b-54b5160e7f85', 'Anand', 'Babar', 0, 1, 183, 1, 'StepOneAutomotive', 'Anand.Babar@StepOneAutomotive', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef468', 'Cloudx', 'Integration', 1, 1, 183, 1, 'StepOneAutomotive', 'esadmin@stepone', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3008ee5a-8be5-47fe-8873-5fc56d93c4df', 'Sarika', 'More', 0, 1, 183, 1, 'StepOneAutomotive', 'Sarika.More@StepOneAutomotive', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1e50e942-61ba-4c47-9fcf-d3271c0e4ce2', 'Saurabh', 'Parab', 0, 1, 183, 1, 'StepOneAutomotive', 'Saurabh.Parab@StepOneAutomotive', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('07abff92-5ed8-11ee-bd83-02c102131f31', 'Admin', 'Cloudx', 1, 1, 183, 1, 'StepOneAutomotive', 'Admin@StepOneAutomotive', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('231fb48a-c0fe-43df-8616-6a6d0d5df3b5', 'Sushil', 'Shinde', 0, 1, 183, 1, 'StepOneAutomotive', 'Sushil.Shinde@StepOneAutomotive', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0944f59b-dc69-4a56-8b92-20f9162c5500', 'Yunus', 'Shaikh', 0, 1, 183, 1, 'StepOneAutomotive', 'Yunus.Shaikh@StepOneAutomotive', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef470', 'Cloudx', 'Integration', 1, 1, 187, 1, 'PedersenToyota', 'esadmin@pederson', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4e21d2a1-865f-490f-a518-b5a661c16bbb', 'Deepak', 'Bhattt', 0, 1, 187, 1, 'PedersenToyota', 'Deepak.Bhattt@PedersenToyota', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('32e1b948-fcd8-4ea3-9f9b-b52a2b7c8b3e', 'Kailash', 'Khedekar', 0, 1, 187, 1, 'PedersenToyota', 'Kailash.Khedekar@PedersenToyota', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7fcfbf88-7fb8-11ee-b46c-02c102131f31', 'Admin', 'Cloudx', 1, 1, 187, 1, 'PedersenToyota', 'Admin@PedersenToyota', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4b2afa6b-dfb3-4f96-b291-b9352e330d08', 'Pooja', 'Rawate', 0, 1, 187, 1, 'PedersenToyota', 'Pooja.Rawate@PedersenToyota', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c9a30e70-8025-4b61-94d4-1c47cd515382', 'Savita', 'Mahimkar', 0, 1, 187, 1, 'PedersenToyota', 'Savita.Mahimkar@PedersenToyota', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5fa44249-efaa-45ef-b965-df2ee60f73b0', 'Seema', 'Asolkar', 0, 1, 187, 1, 'PedersenToyota', 'Seema.Asolkar@PedersenToyota', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('47e3c56f-d752-4d4e-9a94-f3cb0c3d4cae', 'Swati', 'Supe', 0, 1, 187, 1, 'PedersenToyota', 'Swati.Supe@PedersenToyota', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9d9b8e6e-f024-4d91-be06-0173f5095ea8', 'Admin', 'Chesapeake', 1, 1, 188, 1, 'Chesapeake', 'Admin@Chesapeake', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('540c9857-dd20-4393-b974-6d228784f731', 'Anand', 'Rathod', 0, 1, 188, 1, 'Chesapeake', 'Anand.Rathod@Chesapeake', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef480', 'Cloudx', 'Integration', 1, 1, 188, 1, 'Chesapeake', 'esadmin@chesapeakregional', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9db9268f-37cb-4d25-9c75-600e75368f14', 'Dinesh', 'Pujari', 0, 1, 188, 1, 'Chesapeake', 'Dinesh.Pujari@Chesapeake', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('38a50c85-93a5-49d7-a756-9a4140d9546a', 'Kapil', 'Pujari', 0, 1, 188, 1, 'Chesapeake', 'Kapil.Pujari@Chesapeake', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('62b90664-ab3d-4e7d-9e67-f81a02e87b57', 'Prakas', 'Chandawat', 0, 1, 188, 1, 'Chesapeake', 'Prakas.Chandawat@Chesapeake', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5a8458e9-8d88-470e-957c-c3d2af2c9c7a', 'Prasad', 'Pujari', 0, 1, 188, 1, 'Chesapeake', 'Prasad.Pujari@Chesapeake', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a56716cd-ab78-4db3-979f-6b6921d062fe', 'Admin', 'Rocketindustrial', 1, 1, 189, 1, 'RocketIndustrial', 'Admin@RocketIndustrial', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1347bf08-08d1-4ec6-b1e7-76a1d80d52f9', 'Beatriz', 'Rodriguez', 0, 1, 189, 1, 'RocketIndustrial', 'Beatriz.Rodriguez@RocketIndustrial', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef473', 'Cloudx', 'Integration', 1, 1, 189, 1, 'RocketIndustrial', 'esadmin@rocket', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c154e323-33e8-4dee-8814-7fa3fe8d1b6c', 'Concepcion', 'Miranda', 0, 1, 189, 1, 'RocketIndustrial', 'Concepcion.Miranda@RocketIndustrial', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2ec207e8-b5c5-492d-84c7-288f0920996d', 'Export', 'Service', 0, 1, 189, 1, 'RocketIndustrial', 'Export.Service@RocketIndustrial', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('c06b339e-1958-4076-809f-b0dccacf03d6', 'Majo', 'Cruz', 0, 1, 189, 1, 'RocketIndustrial', 'Majo.Cruz@RocketIndustrial', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('62da9be4-dd66-4f75-bbcb-9d0f639e00d7', 'Reinaldo', 'Cruz', 0, 1, 189, 1, 'RocketIndustrial', 'Reinaldo.Cruz@RocketIndustrial', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a3618874-fc15-4e96-b7bf-875cacdd60ab', 'Sandra', 'Miranda', 0, 1, 189, 1, 'RocketIndustrial', 'Sandra.Miranda@RocketIndustrial', 'qc-ElSalvador@cloudxdpo.com', 'ElSalvador');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('5cb39a62-2424-4f0a-9d80-123c7e810b58', 'Admin', 'Cloudx', 1, 1, 190, 1, 'CountryPureFoods', 'Admin@CountryPureFoods', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef452', 'Cloudx', 'Integration', 1, 1, 190, 1, 'CountryPureFoods', 'esadmin@countrypurefood', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('44113cbc-bed7-4bce-80fe-ff381216c267', 'Mahadev', 'Bhabal', 0, 1, 190, 1, 'CountryPureFoods', 'Mahadev.Bhabal@CountryPureFoods', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2700f8f3-eb9c-4ba0-90d4-4d713d0b8195', 'Prabhat', 'Verma', 0, 1, 190, 1, 'CountryPureFoods', 'Prabhat.Verma@CountryPureFoods', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9c0fbe4a-cfc1-4d4c-a8ab-9b8bea706254', 'Prabhat', 'Verma', 0, 0, 190, 1, 'CountryPureFoods', 'Prabhat.Verma@CountryPureFoods-Disabled', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('096558a1-676c-4721-b36e-ca96cddaa926', 'Reena', 'Das', 0, 1, 190, 1, 'CountryPureFoods', 'Reena.Das@CountryPureFoods', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1925825f-480b-4440-9216-ed403c63fbf9', 'Subash', 'Soni', 1, 0, 190, 1, 'CountryPureFoods', 'Admin@CountryPureFoods-Disabled', 'operations@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('734280ca-edb0-486f-ad01-3a506ad055e2', 'Swapnali', 'Mistry', 0, 1, 190, 1, 'CountryPureFoods', 'Swapnali.Mistry@CountryPureFoods', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('830f6c96-a6ff-431e-98a8-5d525618eec5', 'Swapnali', 'Mistry', 0, 0, 190, 1, 'CountryPureFoods', 'Swapnali.Mistry@CountryPureFoods-Disabled', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d0a02561-2108-4a80-a962-a998c42e9ff1', 'Yogesh', 'Khailari', 0, 1, 190, 1, 'CountryPureFoods', 'Yogesh.Khailari@CountryPureFoods', 'qc-RsdIndia@cloudxdpo.com', 'RsdIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef509', 'Cloudx', 'Integration', 1, 1, 191, 1, 'HerbCo', 'esadmin@herbco', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7d79ec60-e09b-45be-8df6-0ea5fb5262f1', 'Gufran', 'Shaikh', 0, 1, 191, 1, 'HerbCo', 'Gufran.Shaikh@HerbCo', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0b2d0b87-eea6-495e-b624-3089db227c64', 'Admin', 'Cloudx', 1, 1, 191, 1, 'HerbCo', 'Admin@HerbCo', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('080fddce-5b92-43aa-8ea8-9f20a0c1d814', 'Parvati', 'Singh', 0, 1, 191, 1, 'HerbCo', 'Parvati.Singh@HerbCo', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ed52f1eb-e011-4034-91a5-c020a38e5a3f', 'Ramnath', 'Patil', 0, 1, 191, 1, 'HerbCo', 'Ramnath.Patil@HerbCo', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('dfdb700b-0990-4088-9734-caee3599f401', 'Satish', 'Palaya', 0, 1, 191, 1, 'HerbCo', 'Satish.Palaya@HerbCo', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9d0b8e6e-f024-4d91-be06-0173f5095ea8', 'Admin', 'Pbstest', 0, 1, 192, 1, 'PBSTest', 'Admin.Pbstest@PBSTest', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('153f47d6-fd60-11ee-852f-0224fc0bdc19', 'Export', 'Service', 0, 1, 193, 1, 'BrandingIron-Staging', 'Export.Service@BrandingIron-Staging', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1eb2f803-1cf9-4b30-958d-158859f5f6b4', 'Admin', 'Longlewis', 1, 1, 195, 1, 'LongLewis', 'Admin@LongLewis', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('877f3840-c855-480f-9be1-6e23b514c996', 'Ashenafi', 'Dejen', 0, 1, 195, 1, 'LongLewis', 'Ashenafi.Dejen@LongLewis', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('d810a492-ee6f-47f2-bc8d-5b24c1349dea', 'Beakal', 'Deriba', 0, 1, 195, 1, 'LongLewis', 'Beakal.Deriba@LongLewis', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef465', 'Cloudx', 'Integration', 1, 1, 195, 1, 'LongLewis', 'esadmin@longlewis', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7dae49c9-209e-43a7-8c8d-775107a98fdf', 'Eldana', 'Hadush', 0, 1, 195, 1, 'LongLewis', 'Eldana.Hadush@LongLewis', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9fa266d1-3170-4b7f-9f99-5389c7066b04', 'Henok', 'Henok', 0, 1, 195, 1, 'LongLewis', 'Henok.Henok@LongLewis', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('492de42a-5916-42c2-aaf2-db9a611fb5d6', 'Longlewis', 'Abbyy', 0, 1, 195, 1, 'LongLewis', 'Longlewis.Abbyy@LongLewis', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0ac84df8-4d7c-4777-a9b7-0307048c38e6', 'Selam', 'Amare', 0, 1, 195, 1, 'LongLewis', 'Selam.Amare@LongLewis', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('fedba5ca-aaf1-4f17-82df-5fdd5980cf6a', 'Yafet', 'Abdo', 0, 1, 195, 1, 'LongLewis', 'Yafet.Abdo@LongLewis', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('08509fb7-b6ab-4a1d-bc2a-1308ee0ecf86', 'Yonatan', 'Getamesay', 0, 1, 195, 1, 'LongLewis', 'Yonatan.Getamesay@LongLewis', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef477', 'Cloudx', 'Integration', 1, 1, 197, 1, 'CrystalGeyser', 'esadmin@crystalgeyser', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('f0986be6-585a-4aa8-8b33-37a9ac4334ff', 'Admin', 'Crystal', 1, 1, 197, 1, 'CrystalGeyser', 'Admin@CrystalGeyser', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('b6225784-39c0-4973-be87-a2e33ba4b514', 'Aptean', 'Admin', 0, 0, 198, 1, 'CrownLaboratories', 'Aptean.Admin@CrownLaboratories-Disabled', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef479', 'Cloudx', 'Integration', 1, 1, 198, 1, 'CrownLaboratories', 'esadmin@crownlabratories', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('2c18404d-55c3-42fb-83e4-270c11017748', 'Imtiyaz', 'Shaikh', 0, 1, 198, 1, 'CrownLaboratories', 'Imtiyaz.Shaikh@CrownLaboratories', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('9f1f80df-9b4a-4c70-89a7-e907553c63fc', 'Prarthana', 'Sawant', 0, 1, 198, 1, 'CrownLaboratories', 'Prarthana.Sawant@CrownLaboratories', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('dbbc3a75-33a8-483a-a3cb-2c26b1d776a0', 'Sameer', 'Sawant', 0, 1, 198, 1, 'CrownLaboratories', 'Sameer.Sawant@CrownLaboratories', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('4e9d8cc7-bfc2-4476-a72f-b1f343f9988e', 'Sanjay', 'Parab', 0, 1, 198, 1, 'CrownLaboratories', 'Sanjay.Parab@CrownLaboratories', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('ba5c2434-899d-429a-94cc-c534b2f2195a', 'Seema', 'Asolkar', 0, 1, 198, 1, 'CrownLaboratories', 'Seema.Asolkar@CrownLaboratories', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('715b98e3-5980-43be-9616-38f88e5da033', 'Suraj', 'Gupta', 0, 1, 198, 1, 'CrownLaboratories', 'Suraj.Gupta@CrownLaboratories', 'qc-GegaIndia@cloudxdpo.com', 'GegaIndia');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('61b35fdb-2e8b-4ac2-8d95-d31a528f8050', 'Ashenafi', 'Dejen', 0, 1, 199, 1, 'PaintersSupply', 'Ashenafi.Dejen@PaintersSupply', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef478', 'Cloudx', 'Integration', 1, 1, 199, 1, 'PaintersSupply', 'esadmin@painters', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a48ecd48-0650-4d19-b168-f6dc87de966f', 'Eldana', 'Hadush', 0, 1, 199, 1, 'PaintersSupply', 'Eldana.Hadush@PaintersSupply', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('7e266fe4-b642-4326-8677-0a12497c25f2', 'Admin', 'Painterssupply', 1, 1, 199, 1, 'PaintersSupply', 'Admin@PaintersSupply', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('032cd12c-0672-4993-b128-1d72b6c58acc', 'Selam', 'Amare', 0, 1, 199, 1, 'PaintersSupply', 'Selam.Amare@PaintersSupply', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('cfcc39c7-6535-4ae3-a981-09dcdbacb4ea', 'Admin', 'Suntrupautomotivegroup', 1, 1, 201, 1, 'SuntrupAutomotiveGroup', 'Admin@SuntrupAutomotiveGroup', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('3ff0a97a-c584-4d43-a25c-a730a2021507', 'Ashenafi', 'Dejen', 0, 1, 201, 1, 'SuntrupAutomotiveGroup', 'Ashenafi.Dejen@SuntrupAutomotiveGroup', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef471', 'Cloudx', 'Integration', 1, 1, 201, 1, 'SuntrupAutomotiveGroup', 'esadmin@suntrup', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('1d7951fa-879e-49fe-80f9-926b2bd16702', 'Selam', 'Amare', 0, 1, 201, 1, 'SuntrupAutomotiveGroup', 'Selam.Amare@SuntrupAutomotiveGroup', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('a0d84ab2-b47a-4a66-bd84-42835ab2a1b4', 'Sosena', 'Sosena', 0, 1, 201, 1, 'SuntrupAutomotiveGroup', 'Sosena.Sosena@SuntrupAutomotiveGroup', 'qc-Addis@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('0949b10a-722a-414b-82b0-d2fec2046ac6', 'Admin', 'Billpearcemotors', 1, 1, 202, 1, 'BillPearceMotors', 'Admin@BillPearceMotors', 'operations@cloudxdpo.com', 'Addis');
insert into myWork (UserId, FN, LN, isAdmin, isActive, ClientId, isCloudXUser, ShortName, UserName, Email, Site) Values ('e83cc7ee-686e-4199-821c-abc21c4ef472', 'Cloudx', 'Integration', 1, 1, 202, 1, 'BillPearceMotors', 'esadmin@billpearce', 'operations@cloudxdpo.com', 'Addis');

	Update	myWork SET LN = 'CloudX'
	where 	isCloudXUser = 1 and isActive = 1 AND isAdmin = 1 and FN = 'Admin' and LN <> 'CloudX';

	Update 	Client as Data 
			inner join (select DISTINCT ClientId, ShortName from myWork) drvtbl on drvtbl.ClientId = Data.ClientId
			SET 	Data.CustomerShortName 	= drvtbl.ShortName;


	if pConfirm <> 'Confirm' then
		SELECT	'Numbers IN name:', w.*
		FROM 	myWork w
		WHERE 	isActive = 1 AND (FN REGEXP '[0-9]' OR LN REGEXP '[0-9]');
	
		SELECT	'Client user with a CloudX role:', w.*
		FROM 	myWork w
		WHERE 	isActive = 1 AND w.isCloudXUser = 0
				AND EXISTS (select 1 FROM UserRoles ur WHERE ur.UserId = w.UserId AND ur.RoleId IN (0,4));
	
		SELECT	'CloudX user with a client role:', w.*
		FROM 	myWork w
		WHERE 	isActive = 1 AND w.isCloudXUser = 1
				AND EXISTS (select 1 FROM UserRoles ur WHERE ur.UserId = w.UserId AND ur.RoleId IN (1,2,3,5,6,7,8,9,10,11,12,13));
	
		drop TEMPORARY TABLE IF EXISTS myDups;
		CREATE TEMPORARY TABLE IF NOT EXISTS myDups AS (
			select 	ln, ClientId
			from	myWork w
			where 	isCloudxUser = 1 and isActive = 1
			group 	by ln, ClientId
			having 	count(distinct fn) > 1
			);
	
		SELECT 	'More than one user with same last name', w.*
		from	myWork w
		where 	isCloudxUser = 1 and isActive = 1
				and exists  (select * FROM myDups where myDups.ln = w.ln AND myDups.ClientId = w.ClientId)
		order by ln, fn;
	
		drop TEMPORARY TABLE IF EXISTS myDups;
		CREATE TEMPORARY TABLE IF NOT EXISTS myDups AS (
				select 	fn, ClientId
				from	myWork w
				where 	isCloudxUser = 1 and isActive = 1
				group 	by fn, ClientId
				having 	count(distinct ln) > 1
			);
	
		SELECT 	'More than one user with same first name', w.*
		from	myWork w
		where 	isCloudxUser = 1 and isActive = 1
				and exists (select * FROM myDups where myDups.fn = w.fn AND myDups.ClientId = w.ClientId)
		order by ln, fn;
	
	
		SELECT 	'More than one user with same first/Lastname name', 
				ln, fn, ClientId
		from	myWork w
		where 	isCloudxUser = 1 and isActive = 1
		group 	by ln, fn, ClientId
		having	COUNT(*) > 1
		ORDER 	by ln, fn, ClientId;
	
	
		SELECT	'Integration Users with a changed username', w.*, User.Username as CurrentUserName
		FROM	myWork w
				inner JOIN User on User.UserId = w.UserId
		WHERE 	w.LN = 'Integration'
				and w.isActive = 1
				AND User.Username <> w.Username;
	
		SELECT	'Duplicate usernames', username, count(*)
		from 	myWork
		where 	isActive = 1
		group by username
		having count(*) > 1
		order	by 1, 2;
	
	end if;



	SELECT	Site, ln, fn, myWork.username as NEW,  User.Username as OLD
	from 	myWork
			inner JOIN User on User.UserId = myWork.UserId
	where 	myWork.isCloudxUser = 1
			and myWork.isActive = 1
	order	by 1, 2, 3;
/*
Update User set UserIdCard = null where isCloudXUser = 1;
UPDATE 	User as Data
		inner JOIN  myWork	on myWork.UserId = Data.UserId
		SET	Data.UserIdCard 	= myWork.Site;	
*/

	if ifnull(pConfirm, '') <> 'Confirm' then 
		Leave Thisproc;
	end if;


	SELECT	Data.UserId, Data.Firstname, Data.LastName, Data.UserName, Data.isActive, Data.isCloudxUser, Data.Email, Data.UseridCard
	from	User as Data
			inner JOIN  myWork	on myWork.UserId = Data.UserId
	ORDER	by Data.UserName;

	select count(*) from UserRoles;

	start transaction;
					-- Update User Data
					UPDATE 	User as Data
							inner JOIN  myWork	on myWork.UserId = Data.UserId
							SET	Data.UserName 		= myWork.UserName,
								Data.Firstname 		= myWork.FN,
								Data.LastName 		= myWork.LN,
								Data.isActive 		= myWork.isActive,
								Data.isCloudxUser 	= myWork.isCloudxUser,
								Data.Email 			= myWork.Email,
								Data.UserIdCard 	= myWork.Site;	

					Update 	Client as Data 
							inner join (select DISTINCT ClientId, ShortName from myWork) drvtbl on drvtbl.ClientId = Data.ClientId
							SET 	Data.CustomerShortName 	= drvtbl.ShortName;

					select * from Client where isActive = 1 AND CustomerShortName <> '';


					DELETE 	Data
					FROM	UserRoles as Data
							inner JOIN 	myWork	on myWork.UserId = Data.UserId
													AND Data.RoleId IN (0,4)
					WHERE 	myWork.isActive = 1 AND myWork.isCloudXUser = 0;
				
					-- 'CloudX user with a client role:'
					DELETE 	Data
					FROM	UserRoles as Data
							inner JOIN 	myWork	on myWork.UserId = Data.UserId
													AND RoleId IN (1,2,3,5,6,7,8,9,10,11,12,13)
					WHERE 	myWork.isActive = 1 AND myWork.isCloudXUser = 1;

		SELECT	Data.UserId, Data.Firstname, Data.LastName, Data.UserName, Data.isActive, Data.isCloudxUser, Data.Email, Data.UserIdCard
		from	User as Data
				inner JOIN  myWork	on myWork.UserId = Data.UserId
		ORDER	by Data.UserName;
		
		select count(*) from UserRoles;


	commit;



-- 

/*
CALL _x_zzzz_StandardizeCloudxUsers('confirm1');
*/

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ZZZ_ADJUST_SCRIPT_1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ZZZ_ADJUST_SCRIPT_1`()
ThisProc:
	BEGIN

	/*


		
		DROP TABLE IF EXISTS _x_ClientParameters;
		
		CREATE TABLE _x_ClientParameters (
			ClientId 			int NOT NULL,
			ParamKey 			varchar(100),
			ParamValue 			text,
			PRIMARY KEY (ClientId, ParamKey)
		)
		ENGINE = INNODB,
		AVG_ROW_LENGTH = 16384,
		CHARACTER SET utf8mb4,
		COLLATE utf8mb4_general_ci,
		ROW_FORMAT = DYNAMIC;		

		insert into _x_ClientParameters values (88, 'Timezone', 				'US/Central');
		insert into _x_ClientParameters values (88, 'GLCodeMask', 				'_[OrgId]_____[DepartmentName]');
		insert into _x_ClientParameters values (88, 'GLCodeMaskRequired', 		'No');


		
	*/



	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ZZZ_ADJUST_SCRIPT_2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ZZZ_ADJUST_SCRIPT_2`()
ThisProc:
	BEGIN

	/*

	Insert into SystemFunctions values ('InvoiceNew', 'Allow New Submission', '1=Yes; -1=No; DEFAULT=-1', 'Invoice', 3, 0, 0, 'Approver;Supervisor;Administrator');

		INSERT INTO ClientRoleFunctions (RoleId, FunctionKey, Access)
		SELECT	cr.RoleId,
				ss.FunctionKey,
				CASE WHEN cr.RoleName = 'Auditor' THEN CASE WHEN ss.FunctionOptions LIKE '%=0%' THEN 0 ELSE 1 END ELSE 1 END
		FROM	ClientRoles cr
				CROSS JOIN SystemFunctions ss
		WHERE	(ss.Migrate LIKE CONCAT('%', cr.RoleName, '%') OR ss.Migrate = '')
				AND cr.RoleName <> 'Super Administrator'
				and not exists (select 1 
							from ClientRoleFunctions crf
								where crf.RoleId = cr.RoleId 
										and crf.FunctionKey = ss.FunctionKey)
		ORDER BY 1, 2;

select distinct ParamKey from _x_ClientParameters


	insert into _x_ClientParameters
		select	Distinct ClientId, ParamKey, ParamValue
		from 	ClientRoles	
				cross join (			Select 'CodePosition' 				as ParamKey,	'2' 					as ParamValue
							union all	Select 'InvoiceNewDelayForCapture'	as ParamKey,	'60' 					as ParamValue
							union all	Select 'ArchiveReasonSource'		as ParamKey,	'Data' 					as ParamValue	-- Data/List
							union all	Select 'ArchiveReasonAllowAny'		as ParamKey,	'Yes' 					as ParamValue	-- Yes/No
							union all	Select 'GLCodeMask'					as ParamKey,	'%' 					as ParamValue	-- Filtering for codes
							union all	Select 'GLCodeMaskRequired'			as ParamKey,	'Yes' 					as ParamValue	-- Yes/No
							) NewParms
		where not exists (select 1 from _x_ClientParameters ex where ex.ClientId = ClientRoles.ClientId and ex.ParamKey = NewParms.ParamKey);


		DROP TABLE IF EXISTS _x_ClientCompany;
		CREATE TABLE _x_ClientCompany (
			Id 						int 		NOT NULL,
			PaymentEnabled 			tinyint,
			PaymentProvider			varchar(20),
			PaymentCustomerCode 	varchar(50),
			PRIMARY KEY (Id)
		)
		ENGINE = INNODB,
		CHARACTER SET utf8mb4,
		COLLATE utf8mb4_general_ci,
		ROW_FORMAT = DYNAMIC;		
		
		ALTER TABLE _x_ClientCompany
		ADD CONSTRAINT _x_ClientCompany_ClientCompany_ID FOREIGN KEY (Id)
		REFERENCES ClientCompany (Id);


	Update _x_ClientParameters set ParamValue = 'No' where ClientId = 88 and ParamKey = 'ArchiveReasonAllowAny';
	Update _x_ClientParameters set ParamValue = 'List' where ClientId = 88 and ParamKey = 'ArchiveReasonSource';
	delete from ArchiveReason ar where ClientId = 88;
	insert into ArchiveReason(ArchiveReason, ClientId) values ('Already Processed', 88);
	insert into ArchiveReason(ArchiveReason, ClientId) values ('PO – Processed in Ross', 88);
	insert into ArchiveReason(ArchiveReason, ClientId) values ('Invoice Rejected', 88);
	insert into ArchiveReason(ArchiveReason, ClientId) values ('Incorrect Invoice-Rebill', 88);
	insert into ArchiveReason(ArchiveReason, ClientId) values ('CREDIT APPLIED TO INVOICE', 88);
	insert into ArchiveReason(ArchiveReason, ClientId) values ('INFORMATION ONLY', 88);
	insert into ArchiveReason(ArchiveReason, ClientId) values ('MULTIPLE INVOICES', 88);
	insert into ArchiveReason(ArchiveReason, ClientId) values ('PAID BY ACH', 88);
	insert into ArchiveReason(ArchiveReason, ClientId) values ('STATEMENT', 88);
	insert into ArchiveReason(ArchiveReason, ClientId) values ('ZERO DOLLAR INVOICE', 88);
	select * from ArchiveReason ar where ClientId = 88;


	insert into _x_ClientCompany(Id, PaymentEnabled, PaymentProvider, PaymentCustomerCode)
		select	cc.Id,
				case when nullif(cc.UserField1, '') is null then 0 else 1 end,
				case when nullif(cc.UserField1, '') is null then null else 'REPAY' end,
				case when nullif(cc.UserField1, '') is null then null else cc.UserField1 end
		from ClientCompany cc
			inner join (select distinct ClientId from ClientRoles cr) Migrated on Migrated.ClientId = cc.ClientId
		where not exists (select 1 from _x_ClientCompany chk where chk.Id = cc.Id);


		Alter Table _x_UserParameters add DisableSourceNotifications varchar (1000) null; 



	drop table IF EXISTS UserActivity;
	
	CREATE TABLE UserActivity (
		ActivityID					int 		NOT NULL AUTO_INCREMENT PRIMARY KEY,
		UserId 						varchar(36) NOT NULL,
		Activity					varchar(50) NULL,
		Info	 					mediumtext 	NULL,
		ActivityDate				datetime 	not NULL DEFAULT(UTC_TIMESTAMP())
		);
	
	ALTER TABLE UserActivity
		ADD CONSTRAINT UserActivity_User FOREIGN KEY (UserId)
		REFERENCES User (UserId) ON DELETE NO ACTION ON UPDATE NO ACTION;




select 	count(*)
-- delete 	InvoiceHistory
from	InvoiceHistory 
		left join 	Invoice i on i.InvoiceId = InvoiceHistory.InvoiceId
where 	i.InvoiceId is null;

select 	count(*)
-- delete 	InvoiceDocs
from	InvoiceDocs 
		left join 	Invoice i on i.InvoiceId = InvoiceDocs.InvoiceId
where 	i.InvoiceId is null;

		
	*/






	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ZZZ_ADJUST_SCRIPT_3` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ZZZ_ADJUST_SCRIPT_3`()
ThisProc:
	BEGIN

	/*

-- DROP TABLE IF EXISTS ClientPaymentTerms;
-- 
-- CREATE TABLE ClientPaymentTerms (
--     ClientId 		INT 			NOT NULL,
--     TermCode 		VARCHAR(30) 	NOT NULL,
--     Discount 		DECIMAL(5,2) 	not null	DEFAULT 0.0,
--     DiscountDays 	INT 			not null	DEFAULT 0,
--     Due		 		VARCHAR(20)		not null	DEFAULT 'Net',
--     DueDays 		INT				not null	DEFAULT 30,
-- 	isDefault 		bit 			not NULL	default 0,
--     TermLabel VARCHAR(255) AS (
-- 										ifnull(nullif(
-- 														rtrim(CONCAT(
-- 																		replace(ifnull(concat(nullif(Discount, 0), '%', case when Due <> 'EOM' then concat('/', nullif(DiscountDays, 0)) else '' end, ' '), ''), '.00%', '%'),
-- 																		Case 
-- 																			When Due = 'Net'		then 'Net'
-- 																			When Due = 'EOM'		then 'EOM'
-- 																			When Due = 'EOM NET'	then 'EOM Net'
-- 																			else '' end, 
-- 																		' ', 
-- 																		ifnull(nullif(DueDays, 0), '')
-- 																	))
-- 														, 'Net'), 'Upon Receipt')
-- 								    ),
--     PRIMARY KEY (ClientId, TermCode)
-- )
-- ENGINE = INNODB,
-- AVG_ROW_LENGTH = 16384,
-- default CHARACTER SET utf8mb4,
-- COLLATE utf8mb4_general_ci,
-- ROW_FORMAT = DYNAMIC;
-- 
-- 
-- ALTER TABLE ClientPaymentTerms
-- ADD CONSTRAINT ClientPaymentTerms_ClientID FOREIGN KEY (ClientId)
-- REFERENCES Client (ClientId);
-- 
-- insert into ClientPaymentTerms(ClientId, TermCode, Discount, DiscountDays, Due, DueDays)
-- 	select 	Distinct 
-- 			ClientId, v.VendorTerm ,
-- 			0,
-- 			0,
-- 			'Net',
-- 			case	when VendorTerm Like 'Net%' 		then 
-- 							case 
-- 									when rtrim(ltrim(replace(VendorTerm, 'Net', ''))) REGEXP '^[0-9]+$'		then rtrim(ltrim(replace(VendorTerm, 'Net', '')))
-- 									else 30 end
-- 					when VendorTerm Like '%Receipt%' 	then 0
-- 					else 0 end
-- 	from 	Vendor v 
-- 	where 	ClientId in (Select Distinct ClientId from ClientRoles)
-- 			and nullif(VendorTerm, '') is not null
-- 			and not exists (select 1 
-- 							from ClientPaymentTerms x
-- 							where x.ClientId = v.ClientId
-- 									and x.TermCode = v.VendorTerm);



	insert into _x_ClientParameters
		select	Distinct ClientId, ParamKey, ParamValue
		from 	ClientRoles	
				cross join (			Select 'ApprovedPossibleException' 				as ParamKey,	'60' 					as ParamValue
							union all	Select 'ExportApprovedInvoices' 				as ParamKey,	'No' 					as ParamValue
							union all	Select 'ExportApprovedInvoicesAutomatically' 	as ParamKey,	'No' 					as ParamValue
							union all	Select 'WorkStatusRefreshRate'	 				as ParamKey,	'60' 					as ParamValue
							union all	Select 'DashboardRefreshRate'	 				as ParamKey,	'60' 					as ParamValue
							) NewParms
		where not exists (select 1 from _x_ClientParameters ex where ex.ClientId = ClientRoles.ClientId and ex.ParamKey = NewParms.ParamKey);

	Update _x_ClientParameters set ParamValue = '10' 	where ClientId = 1 and ParamKey = 'ApprovedPossibleException';
	Update _x_ClientParameters set ParamValue = 'Yes' 	where ClientId = 1 and ParamKey = 'ExportApprovedInvoices';
	update _x_ClientParameters set ParamValue = '10'	where ParamKey = 'InvoiceNewDelayForCapture';



	Insert into SystemFunctions values ('InvoiceAuditor', 'Allow Audit', '1=Yes; -1=No; DEFAULT=-1', 'Invoice', 3, 0, 0, 'Auditor');
	Insert into SystemFunctions values ('InvoiceReject', 'Allow Reject', '1=Yes; -1=No; DEFAULT=-1', 'Invoice', 3, 0, 0, 'Administrator');
	INSERT INTO ClientRoleFunctions (RoleId, FunctionKey, Access)
		SELECT	cr.RoleId,
				ss.FunctionKey,
				CASE WHEN cr.RoleName = 'Auditor' THEN CASE WHEN ss.FunctionOptions LIKE '%=0%' THEN 0 ELSE 1 END 
					ELSE 1
				END
		FROM	ClientRoles cr
				CROSS JOIN SystemFunctions ss
		WHERE	(ss.Migrate LIKE CONCAT('%', cr.RoleName, '%') OR ss.Migrate = '')
				AND cr.RoleName <> 'Super Administrator'
				AND cr.isAdmin = 0
				and not exists (select 1 
							from ClientRoleFunctions crf
								where crf.RoleId = cr.RoleId 
										and crf.FunctionKey = ss.FunctionKey)
		ORDER BY 1, 2;

	Update  ClientRoles set isLocked = 1 where RoleName = 'Auditor';


	insert into SystemAdvanceSearchFields(SearchType, Field, Label, DataType, FieldOrder, DependencyField)
					select 'AuditSearch', 	'InvoiceNo', 		'Invoice number', 		'text', 			10,		null
		union all 	select 'AuditSearch', 	'CompanyCode', 		'Company/Store', 		'Select', 			15,		null
		union all 	select 'AuditSearch', 	'Department', 		'Department', 			'MultiSelect', 		20,		'CompanyCode'
		union all 	select 'AuditSearch', 	'Vendor', 			'Vendor', 				'Select', 			25,		'CompanyCode'
		union all 	select 'AuditSearch', 	'Comment', 			'Comment', 				'text', 			30,		null
		union all 	select 'AuditSearch', 	'InvoiceAmount#', 	'Invoice total', 		'currency', 		35,		null
		union all 	select 'AuditSearch', 	'InvoiceType', 		'Invoice Type', 		'MultiSelect', 		40,		null
		union all 	select 'AuditSearch', 	'POorNonPO', 		'Is PO Invoice', 		'Radio', 			45,		null		
		union all 	select 'AuditSearch', 	'PONumber', 		'PO Number', 			'text', 			50,		null
		union all 	select 'AuditSearch', 	'CheckNumber', 		'Check Number', 		'text', 			55,		null
		union all 	select 'AuditSearch', 	'isConfidential', 	'Is confidential', 		'Check', 			60,		null
		union all 	select 'AuditSearch', 	'GLCode', 			'GL Code', 				'Select', 			65,		null
		union all 	select 'AuditSearch', 	'InvoiceStatus', 	'Status', 				'MultiSelect', 		70,		null
		union all 	select 'AuditSearch', 	'InvoiceDate#', 	'Invoice date',		'date', 			75,		null
		union all 	select 'AuditSearch', 	'ScanDate#', 		'Scan', 				'date', 			80,		null
		union all 	select 'AuditSearch', 	'LastActionDate#', 	'Last action', 			'date', 		   999,		null;

	insert into SystemAdvanceSearchFields(SearchType, Field, Label, DataType, FieldOrder, DependencyField)
					select 'ReportHistorySearch', 	'ReportKey', 		'Report', 				'MultiSelect', 		10,		null
		union all 	select 'ReportHistorySearch', 	'RunDate#', 		'Generated#', 			'date', 			15,		null
		union all 	select 'ReportHistorySearch', 	'User', 			'Employee', 			'MultiSelect', 		20,		null
		union all 	select 'ReportHistorySearch', 	'isScheduled', 		'Scheduled', 			'Radio', 			25,		null

	insert into SystemAdvanceSearchFields(SearchType, Field, Label, DataType, FieldOrder, DependencyField)
					select 'GlobalSearch', 			'OnHold', 			'Is on hold', 				'Radio', 		25,		null





drop table if exists AuditorReviewHistory;

CREATE TABLE AuditorReviewHistory (
	Id 						int 		NOT NULL AUTO_INCREMENT,
	ClientId 				int 		not null,
	ClosedDate				datetime 	DEFAULT (utc_timestamp()),
	ClosedBy 				char(36) 	not null,
	AuditorID 				char(36) 	NOT NULL,
	EntryDate 				datetime 	NOT NULL,
	Comment 				longtext	NOT NULL,
	InvoiceID 				int 		NOT NULL,
	PRIMARY KEY (Id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 6,
AVG_ROW_LENGTH = 3276,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
ROW_FORMAT = DYNAMIC;

ALTER TABLE AuditorReviewHistory
ADD CONSTRAINT AuditorReviewHistory_InvoiceId FOREIGN KEY (InvoiceID)
REFERENCES Invoice (InvoiceId);

ALTER TABLE AuditorReviewHistory
ADD CONSTRAINT AuditorReviewHistory_ClientId FOREIGN KEY (AuditorID)
REFERENCES User (UserId);

ALTER TABLE AuditorReviewHistory
ADD CONSTRAINT AuditorReviewHistory_AuditorId FOREIGN KEY (ClientId)
REFERENCES Client (ClientId);


-- Correct Data
Update ApprovalStep set ClientCompanyId = 405 where ClientId = 86 and ClientCompanyId is null;


Alter Table _x_UserParameters add DefaultGridSize int null default (10); 



drop table if exists ExportProcess;

CREATE TABLE ExportProcess (
	Id 						int 		NOT NULL AUTO_INCREMENT,
	ClientId 				int 		not null,
	RequestedDate			datetime 	not null DEFAULT (utc_timestamp()),
	CompletedDate			datetime 	null,
	UserId	 				char(36) 	not null,
	AdditionalUserIds		mediumtext	null,
	isNotifyAll 			tinyint 	NOT NULL,
	PRIMARY KEY (Id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 6,
AVG_ROW_LENGTH = 3276,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
ROW_FORMAT = DYNAMIC;

ALTER TABLE ExportProcess
ADD CONSTRAINT ExportProcess_ClientID FOREIGN KEY (ClientId)
REFERENCES Client (ClientId);


drop table if exists _x_PaymentStatus;

CREATE TABLE _x_PaymentStatus (
	Id 						int 			NOT NULL,
	PaymentDate				date,
	PaymentAmount			decimal(18,2)	not null,
	PaymentProvider			Varchar(20)		not null,
	PaymentMethod			varchar(50),
	PaymentReference		varchar(50),
	PaymentNumber			varchar(50),
	PaymentExternalId		varchar(100),
	PRIMARY KEY (Id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 6,
AVG_ROW_LENGTH = 3276,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci,
ROW_FORMAT = DYNAMIC;


	*/





	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ZZZ_ADJUST_SCRIPT_4_Reports` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ZZZ_ADJUST_SCRIPT_4_Reports`()
ThisProc:
	BEGIN

	/*

	drop table IF EXISTS ReportRunRecipients;
	drop table IF EXISTS ReportRun;
	drop table IF EXISTS ReportClientScheduleFieldOutput;
	drop table IF EXISTS ReportClientScheduleFieldValues;
	drop table IF EXISTS ReportClientScheduleRecipients;
	drop table IF EXISTS ReportClientSchedule;
	drop table IF EXISTS ReportClientRestrictions;
	drop table IF EXISTS ReportClient;
	drop table IF EXISTS ReportFields;
	drop table IF EXISTS ReportFieldOutput;
	drop TABLE IF EXISTS Report;

	CREATE TABLE Report (
		ReportKey 					varchar(20) 	NOT NULL PRIMARY KEY,
		ReportName 					varchar(50) 	NULL,
		ReportGrouping				varchar(50)		NULL,
		StoredProc					varchar(100) 	NULL,
		SortOrderGrouping			int 			not null default 0,
		SortOrderName				int 			not null default 0,
		isActive 					bit 			NOT NULL DEFAULT(0),
		isInternal					bit 			NULL
		);

	CREATE TABLE ReportFields (
		ReportKey 					varchar(20) 	NOT NULL,
		Field 						varchar(20) 	NOT NULL,
		Label 						varchar(50) 	NOT NULL,
		DataType					varchar(20) 	NOT NULL,
		FieldOrder					int 			not NULL,
		DependencyField				varchar(20) 	NULL,
		ShowOn						tinyint 		not NULL,			-- 0=Both 1=GenerateOnlyField  2=ScheduleOnlyField
		PRIMARY KEY (ReportKey, Field, ShowOn)
		);


	CREATE TABLE ReportFieldOutput (
		ReportKey 					varchar(20) 	NOT NULL,
		Field 						varchar(50) 	NOT NULL,
		Label 						varchar(50) 	NOT NULL,
		Type						varchar(20) 	NOT NULL,			-- Text | Date | DateTime | Number | Currency
		Width						int				not null,
		FieldOrder					int 			not NULL,
		SortOrder					int 			NULL,
		LinkPage 					varchar(50) 	default null,
		LinkPageValue				varchar(50) 	default null,
		PRIMARY KEY (ReportKey, Field)
		);




	CREATE TABLE ReportClient (
		ReportKey 					varchar(20) 	NOT NULL,
		ClientId 					int 			NOT NULL,
		isActive 					bit 			NOT NULL DEFAULT(0),
		PRIMARY KEY (ReportKey, ClientId)
		);

	CREATE TABLE ReportClientRestrictions (
		ReportKey 					varchar(20) 	NOT NULL,
		ClientId 					int 			NOT NULL,
		RoleId	 					int 			NOT NULL,
		PRIMARY KEY (ReportKey, ClientId, RoleId)
		);

	CREATE TABLE ReportClientSchedule (
		ReportScheduleId 			int 			AUTO_INCREMENT PRIMARY KEY,
		ReportKey 					varchar(20) 	NOT NULL,
		ClientId 					int 			NOT NULL,
		UserId 						char(36)		Not NUll,
		ReportName 					varchar(50) 	NULL,
		isScheduled					bit 			NOT NULL,
		isActive 					bit 			NOT NULL DEFAULT(0),
		MailSubject 				varchar(100)	null,
		MailBody	 				mediumtext		null,
		isHideRecipients			bit				NULL,
		Frequency 					varchar(10)		null, 	-- Daily, Weekly, Monthly, Quarterly, Yearly
		FrequencyWeekly 			int				null, 	-- bits 010 1010	(mon,Wed,Sat)		DAYOFWEEK 1 for Sunday, 2 for Monday, 3 for Tuesday, 4 for Wednesday, 5 for Thursday, 6 for Friday, 7 for Saturday
		TimeOfTheDay				int 			null,
		ScheduleStartDate 			varchar(10)		null,
		OutputFormat 				int				null	-- 0=Tab delimited	1=CSV  2=HTML	
		);
	CREATE TABLE ReportClientScheduleRecipients (
		ReportScheduleId 			int				not null,
		UserId 						char(36),
		RoleId 						int 						
		);

	CREATE TABLE ReportClientScheduleFieldValues (
		ReportScheduleId 			int 			NOT NULL,
		ReportKey 					varchar(20) 	NOT NULL,
		Field 						varchar(20) 	NOT NULL,
		Value					 	mediumtext 		NOT null,
		PRIMARY KEY (ReportScheduleId, ReportKey, Field)
		);

	CREATE TABLE ReportClientScheduleFieldOutput (
		ReportScheduleId 			int 			NOT NULL,
		ReportKey 					varchar(20) 	NOT NULL,
		Field 						varchar(50) 	NOT NULL,
		Label 						varchar(50) 	NULL,
		FieldOrder					int 			NULL,
		SortOrder					int 			NULL,
		PRIMARY KEY (ReportScheduleId, ReportKey, Field)
		);


	
	CREATE TABLE ReportRun (
		ReportRunId					int				AUTO_INCREMENT PRIMARY KEY,
		ReportKey 					varchar(20) 	NOT NULL,
		ClientId 					int 			NOT NULL,
		RunDateTime 				datetime 		NOT NULL DEFAULT(UTC_TIMESTAMP()),
		isScheduled 				bit				not null,
		Criteria 					mediumtext		null,
		FieldOutput					mediumtext		null,
		TotalRecords				int				not null,
		RunSeconds					int				not null
		);

	CREATE TABLE ReportRunRecipients (
		ReportRunId					int,
		UserID	 					char(36)	 	NULL,
		Email 						varchar(100)	null
		);
	
	
	
	ALTER TABLE ReportFields
		ADD CONSTRAINT ReportFields_ReportKey FOREIGN KEY (ReportKey)
		REFERENCES Report (ReportKey) ON DELETE NO ACTION ON UPDATE NO ACTION;
	ALTER TABLE ReportFieldOutput
		ADD CONSTRAINT ReportFieldOutput_ReportKey FOREIGN KEY (ReportKey)
		REFERENCES Report (ReportKey) ON DELETE NO ACTION ON UPDATE NO ACTION;

	
	
	ALTER TABLE ReportClient
		ADD CONSTRAINT ReportClient_Report FOREIGN KEY (ReportKey)
		REFERENCES Report (ReportKey) ON DELETE NO ACTION ON UPDATE NO ACTION;
	ALTER TABLE ReportClient
		ADD CONSTRAINT ReportClient_ClientId FOREIGN KEY (ClientId)
		REFERENCES Client (ClientId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	
	ALTER TABLE ReportClientRestrictions
		ADD CONSTRAINT ReportClientRestrictions_Report FOREIGN KEY (ReportKey)
		REFERENCES Report (ReportKey) ON DELETE NO ACTION ON UPDATE NO ACTION;
	ALTER TABLE ReportClientRestrictions
		ADD CONSTRAINT ReportClientRestrictions_ClientId FOREIGN KEY (ClientId)
		REFERENCES Client (ClientId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	ALTER TABLE ReportClientRestrictions
		ADD CONSTRAINT ReportClientRestrictions_RoleId FOREIGN KEY (RoleId)
		REFERENCES ClientRoles (RoleId) ON DELETE NO ACTION ON UPDATE NO ACTION;



	
	
	ALTER TABLE ReportClientSchedule
		ADD CONSTRAINT ReportClientSchedule_User FOREIGN KEY (UserId)
		REFERENCES User (UserId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	ALTER TABLE ReportClientSchedule
		ADD CONSTRAINT ReportClientSchedule_ReportClient FOREIGN KEY (ReportKey, ClientId)
		REFERENCES ReportClient (ReportKey, ClientId) ON DELETE NO ACTION ON UPDATE NO ACTION;

	ALTER TABLE ReportClientScheduleRecipients
		ADD CONSTRAINT ReportClientScheduleRecipients_ReportScheduleId FOREIGN KEY (ReportScheduleId)
		REFERENCES ReportClientSchedule (ReportScheduleId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	ALTER TABLE ReportClientScheduleRecipients
		ADD CONSTRAINT ReportClientScheduleRecipients_UserId FOREIGN KEY (UserId)
		REFERENCES User (UserId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	ALTER TABLE ReportClientScheduleRecipients
		ADD CONSTRAINT ReportClientScheduleRecipients_RoleId FOREIGN KEY (RoleId)
		REFERENCES ClientRoles (RoleId) ON DELETE NO ACTION ON UPDATE NO ACTION;

	ALTER TABLE ReportClientScheduleFieldValues
		ADD CONSTRAINT ReportClientScheduleFieldValues_ReportScheduleId FOREIGN KEY (ReportScheduleId)
		REFERENCES ReportClientSchedule (ReportScheduleId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	ALTER TABLE ReportClientScheduleFieldValues
		ADD CONSTRAINT ReportClientScheduleFieldValues_ReportKeyField FOREIGN KEY (ReportKey, Field)
		REFERENCES ReportFields (ReportKey, Field) ON DELETE NO ACTION ON UPDATE NO ACTION;

	ALTER TABLE ReportClientScheduleFieldOutput
		ADD CONSTRAINT ReportClientScheduleFieldOutput_ReportScheduleId FOREIGN KEY (ReportScheduleId)
		REFERENCES ReportClientSchedule (ReportScheduleId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	ALTER TABLE ReportClientScheduleFieldOutput
		ADD CONSTRAINT ReportClientScheduleFieldOutput_ReportKeyField FOREIGN KEY (ReportKey, Field)
		REFERENCES ReportFields (ReportKey, Field) ON DELETE NO ACTION ON UPDATE NO ACTION;





	ALTER TABLE ReportRun
		ADD CONSTRAINT ReportRun_ReportKey FOREIGN KEY (ReportKey)
		REFERENCES Report (ReportKey) ON DELETE NO ACTION ON UPDATE NO ACTION;
	ALTER TABLE ReportRun
		ADD CONSTRAINT ReportRun_ClientId FOREIGN KEY (ClientId)
		REFERENCES Client (ClientId) ON DELETE NO ACTION ON UPDATE NO ACTION;

	
	
	ALTER TABLE ReportRunRecipients
		ADD CONSTRAINT ReportRunRecipients_ReportRunId FOREIGN KEY (ReportRunId)
		REFERENCES ReportRun (ReportRunId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	ALTER TABLE ReportRunRecipients
		ADD CONSTRAINT ReportRunRecipients_UserId FOREIGN KEY (UserId)
		REFERENCES User (UserId) ON DELETE NO ACTION ON UPDATE NO ACTION;


	insert into Report (ReportKey, ReportName, ReportGrouping, SortOrderGrouping, SortOrderName, isInternal, StoredProc) values ('InvoiceStatus', 			'Status', 				'Invoice',		1,					1, 				0,			'_x_ReportGenerate_InvoiceStatus');
	insert into Report (ReportKey, ReportName, ReportGrouping, SortOrderGrouping, SortOrderName, isInternal, StoredProc) values ('DocumentTimeFlow', 		'Time Flow', 			'Invoice',		1,					2, 				0,			'_x_ReportGenerate_DocumentTimeFlow');
	insert into Report (ReportKey, ReportName, ReportGrouping, SortOrderGrouping, SortOrderName, isInternal, StoredProc) values ('InvoiceAccrual', 			'Accrual', 				'Invoice',		1,					3, 				0,			'_x_ReportGenerate_InvoiceAccrual');
	insert into Report (ReportKey, ReportName, ReportGrouping, SortOrderGrouping, SortOrderName, isInternal, StoredProc) values ('InvoiceAccrualSUM', 		'Accrual (Summary)', 	'Invoice',		1,					4, 				0,			'_x_ReportGenerate_InvoiceAccrualSUM');

	insert into Report (ReportKey, ReportName, ReportGrouping, SortOrderGrouping, SortOrderName, isInternal, StoredProc) values ('ApproverVolume', 			'Approver Volume', 		'Statistics',	8,					1, 				0,			'_x_ReportGenerate_ApproverVolume');
	insert into Report (ReportKey, ReportName, ReportGrouping, SortOrderGrouping, SortOrderName, isInternal, StoredProc) values ('DocumentProcessing', 		'Processing', 			'Statistics',	8,					2, 				0,			'_x_ReportGenerate_DocumentProcessing');
	insert into Report (ReportKey, ReportName, ReportGrouping, SortOrderGrouping, SortOrderName, isInternal, StoredProc) values ('DocumentProcessingSM', 	'Processing (Summary)',	'Statistics',	8,					3, 				0,			'_x_ReportGenerate_DocumentProcessingSUM');




	Insert into ReportFields (	ReportKey,				Field,					Label, 					DataType, 			FieldOrder,	DependencyField,	ShowOn)
					SELECT 		'InvoiceStatus', 		'CompanyCode', 			'Company/Store',		'Select', 			10,			NULL,				0
		UNION ALL	SELECT 		'InvoiceStatus', 		'Department', 			'Department', 			'MultiSelect', 		20,			'CompanyCode',		0
		union all	SELECT 		'InvoiceStatus',	 	'Vendor', 				'Vendor', 				'MultiSelect', 		30,			'CompanyCode',		0
		UNION ALL	SELECT 		'InvoiceStatus', 		'InvoiceType', 			'Invoice Type', 		'MultiSelect', 		40,			NULL,				0
		UNION ALL	SELECT 		'InvoiceStatus', 		'POorNonPO', 			'is PO Invoice', 		'Radio', 			50,			NULL,				0
		UNION ALL	SELECT 		'InvoiceStatus', 		'InvoiceStatus', 		'Invoice Status', 		'MultiSelect', 		60,			NULL,				0
		UNION ALL	SELECT 		'InvoiceStatus', 		'InvoiceAmount#', 		'Invoice Total', 		'Currency', 		70,			NULL,				0
		UNION ALL	SELECT 		'InvoiceStatus', 		'Approver', 			'Approver', 			'MultiSelect', 		80,			NULL,				0
		UNION ALL	SELECT 		'InvoiceStatus', 		'Comment', 				'Comment', 				'Text', 			90,			NULL,				0
		UNION ALL	SELECT 		'InvoiceStatus', 		'GLCode', 				'GL Code', 				'Select', 			100,		NULL,				0
		UNION ALL	SELECT 		'InvoiceStatus', 		'PaymentDueDate#', 		'Due', 					'Date', 			200,		NULL,				1
		UNION ALL	SELECT 		'InvoiceStatus', 		'LastActionDate#', 		'Last Action', 			'Date', 			210,		NULL,				1
		UNION ALL	SELECT 		'InvoiceStatus', 		'ScanDate#', 			'Scanned', 				'Date', 			220,		NULL,				1
		UNION ALL	SELECT 		'InvoiceStatus', 		'InvoiceDate#', 		'Invoice', 				'Date', 			230,		NULL,				1
		UNION ALL	SELECT 		'InvoiceStatus', 		'PaymentDueDateSEL#', 	'Due', 					'Select', 			200,		NULL,				2
		UNION ALL	SELECT 		'InvoiceStatus', 		'LastActionDateSEL#', 	'Last Action', 			'Select', 			210,		NULL,				2
		UNION ALL	SELECT 		'InvoiceStatus', 		'ScanDateSEL#', 		'Scanned', 				'Select', 			220,		NULL,				2
		UNION ALL	SELECT 		'InvoiceStatus', 		'InvoiceDateSEL#', 		'Invoice', 				'Select', 			230,		NULL,				2;
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)							values ('InvoiceStatus', 	'Company', 			'Company/Store',	'Text',		140, 1, 1);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)							values ('InvoiceStatus', 	'VendorName', 		'Vendor Name',		'Text',		200, 2, 2);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('InvoiceStatus', 	'VendorNo', 		'Vendor No',		'Text',		120, 3);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder, LinkPage, LinkPageValue)	values ('InvoiceStatus', 	'InvoiceNo', 		'Invoice No',		'Text',		120, 4, 3,	'Invoice?Id=', 'InvoiceId');
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('InvoiceStatus', 	'InvoiceDate', 		'Date',				'Date',		120, 5);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('InvoiceStatus', 	'InvoiceType', 		'Type',				'Text',		140, 6);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('InvoiceStatus', 	'InvoiceTotal',		'Total',			'Currency',	100, 7);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('InvoiceStatus', 	'InvoiceStatus',	'Status',			'Text',		100, 8);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('InvoiceStatus', 	'Comment',			'Comment',			'Text',		200, 9);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('InvoiceStatus', 	'ScannedDate',		'Scanned',			'DateTime',	140, 10);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('InvoiceStatus', 	'LastActionDate',	'Last Action',		'DateTime',	140, 11);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('InvoiceStatus', 	'LastActionBy',		'By',				'Text',		200, 12);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('InvoiceStatus',	'_InvoiceId',		'InvoiceId',		'number',	0, 		999);
	call _x_ReportActivate ('InvoiceStatus', 1, 'Confirm');




	Insert into ReportFields (	ReportKey,				Field,					Label, 					DataType, 			FieldOrder,	DependencyField,	ShowOn)
					SELECT 		'DocumentProcessing', 	'ScanDate#', 			'Scanned', 				'Date', 			10,			NULL,					1
		UNION ALL	SELECT 		'DocumentProcessing', 	'ScanDateSEL#', 		'Scanned', 				'Select', 			10,			NULL,					2
		UNION ALL	SELECT 		'DocumentProcessing', 	'CompanyCode', 			'Company/Store',		'Select', 			100,		NULL,					0
		UNION ALL	SELECT 		'DocumentProcessing', 	'InvoiceType', 			'Invoice Type', 		'MultiSelect', 		110,		NULL,					0;
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)							values ('DocumentProcessing',	'Company', 			'Company/Store',	'Text',		140, 	1, 1);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)							values ('DocumentProcessing',	'VendorName', 		'Vendor Name',		'Text',		200, 	2, 2);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('DocumentProcessing',	'VendorNo', 		'Vendor No',		'Text',		120, 	3);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder, LinkPage, LinkPageValue)	values ('DocumentProcessing',	'InvoiceNo', 		'Invoice No',		'Text',		120, 	4, 4,'Invoice?Id=', 'InvoiceId');
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('DocumentProcessing',	'InvoiceDate', 		'Date',				'Date',		120, 	5);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('DocumentProcessing',	'InvoiceType', 		'Type',				'Text',		140, 	6);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('DocumentProcessing',	'InvoiceTotal',		'Total',			'Currency',	100, 	7);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('DocumentProcessing',	'Invoice1099',		'1099',				'Currency',	100, 	8);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('DocumentProcessing',	'InvoiceStatus',	'Status',			'Text',		100, 	9);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)							values ('DocumentProcessing',	'ScannedDate',		'Scanned',			'DateTime',	140, 	10, 3);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('DocumentProcessing',	'_InvoiceId',		'InvoiceId',		'number',	0, 		999);
	call _x_ReportActivate ('DocumentProcessing', 1, 'Confirm');








	Insert into ReportFields (	ReportKey,				Field,					Label, 					DataType, 			FieldOrder,	DependencyField,	ShowOn)
					SELECT 		'DocumentProcessingSM', 	'ScanDate#', 			'Scanned', 				'Date', 			10,			NULL,					1
		UNION ALL	SELECT 		'DocumentProcessingSM', 	'ScanDateSEL#', 		'Scanned', 				'Select', 			10,			NULL,					2
		UNION ALL	SELECT 		'DocumentProcessingSM', 	'CompanyCode', 			'Company/Store',		'Select', 			100,		NULL,					0
		UNION ALL	SELECT 		'DocumentProcessingSM', 	'InvoiceType', 			'Invoice Type', 		'MultiSelect', 		110,		NULL,					0;

	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)							values ('DocumentProcessingSM',	'Company', 			'Company/Store',	'Text',		140, 	1, 1);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)							values ('DocumentProcessingSM',	'ScannedDate',		'Scanned',			'Date',		120, 	2, 2);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)							values ('DocumentProcessingSM',	'InvoiceType', 		'Type',				'Text',		140, 	3, 3);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)							values ('DocumentProcessingSM',	'InvoiceStatus', 	'Status',			'Text',		100, 	4, 4);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('DocumentProcessingSM',	'TotalCount',		'Count',			'Number',	100, 	5);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('DocumentProcessingSM',	'TotalAmount',		'Total',			'Currency',	100, 	6);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('DocumentProcessingSM',	'Total1099',		'1099',				'Currency',	100, 	7);
	call _x_ReportActivate ('DocumentProcessingSM', 1, 'Confirm');









	Insert into ReportFields (	ReportKey,					Field,					Label, 					DataType, 			FieldOrder,	DependencyField,	ShowOn)
					SELECT 		'DocumentTimeFlow', 		'CompanyCode', 			'Company/Store',		'Select', 			10,			NULL,				0
		UNION ALL	SELECT 		'DocumentTimeFlow', 		'InvoiceType', 			'Invoice Type', 		'MultiSelect', 		40,			NULL,				0
		UNION ALL	SELECT 		'DocumentTimeFlow', 		'POorNonPO', 			'is PO Invoice', 		'Radio', 			50,			NULL,				0
		UNION ALL	SELECT 		'DocumentTimeFlow', 		'InvoiceStatus', 		'Invoice Status', 		'MultiSelect', 		60,			NULL,				0
		UNION ALL	SELECT 		'DocumentTimeFlow', 		'Approver', 			'Approver', 			'MultiSelect', 		80,			NULL,				0
		UNION ALL	SELECT 		'DocumentTimeFlow', 		'ScanDate#', 			'Scanned', 				'Date', 			220,		NULL,				1
		UNION ALL	SELECT 		'DocumentTimeFlow', 		'InvoiceDate#', 		'Invoice', 				'Date', 			230,		NULL,				1
		UNION ALL	SELECT 		'DocumentTimeFlow', 		'ScanDateSEL#', 		'Scanned', 				'Select', 			220,		NULL,				2
		UNION ALL	SELECT 		'DocumentTimeFlow', 		'InvoiceDateSEL#', 		'Invoice', 				'Select', 			230,		NULL,				2;

	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)							values ('DocumentTimeFlow',	'Company', 			'Company/Store',	'Text',		140, 	1, 1);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)							values ('DocumentTimeFlow',	'VendorName', 		'Vendor Name',		'Text',		200, 	2, 2);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('DocumentTimeFlow',	'VendorNo', 		'Vendor No',		'Text',		120, 	3);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder, LinkPage, LinkPageValue)	values ('DocumentTimeFlow',	'InvoiceNo', 		'Invoice No',		'Text',		120, 	4, 3,'Invoice?Id=', 'InvoiceId');
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('DocumentTimeFlow',	'InvoiceDate', 		'Date',				'Date',		120, 	5);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('DocumentTimeFlow',	'InvoiceType', 		'Type',				'Text',		140, 	6);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('DocumentTimeFlow',	'InvoiceTotal',		'Total',			'Currency',	100, 	7);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('DocumentTimeFlow',	'Invoice1099',		'1099',				'Currency',	100, 	8);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('DocumentTimeFlow',	'InvoiceStatus',	'Status',			'Text',		100, 	9);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('DocumentTimeFlow',	'InvoicePaused',	'Paused',			'Text',		80, 	10);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('DocumentTimeFlow',	'ScannedDate',		'Scanned',			'DateTime',	140, 	11);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('DocumentTimeFlow',	'DaysInCapture',	'In Capture',		'Number',	100, 	12);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('DocumentTimeFlow',	'DaysInException',	'In Exception',		'Number',	100, 	13);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('DocumentTimeFlow',	'DaysInPause',		'In Pause',			'Number',	100, 	14);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('DocumentTimeFlow',	'DaysInApproval',	'In Approval',		'Number',	100, 	15);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('DocumentTimeFlow',	'DaysToAccepted',	'To Accepted',		'Number',	100, 	16);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('DocumentTimeFlow',	'Approvers',		'Approver/Days',	'Text',		0, 		17);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('DocumentTimeFlow',	'_InvoiceId',		'InvoiceId',		'number',	0, 		999);
	call _x_ReportActivate ('DocumentTimeFlow', 1, 'Confirm');







	Insert into ReportFields (	ReportKey,					Field,					Label, 					DataType, 			FieldOrder,	DependencyField,	ShowOn)
					SELECT 		'InvoiceAccrual', 			'CompanyCode', 			'Company/Store',		'Select', 			10,			NULL,				0
		UNION ALL	SELECT 		'InvoiceAccrual', 			'InvoiceType', 			'Invoice Type', 		'MultiSelect', 		40,			NULL,				0
		UNION ALL	SELECT 		'InvoiceAccrual', 			'POorNonPO', 			'is PO Invoice', 		'Radio', 			50,			NULL,				0
		UNION ALL	SELECT 		'InvoiceAccrual', 			'AcceptedDate#', 		'Posted', 				'Date', 			110,		NULL,				1
		UNION ALL	SELECT 		'InvoiceAccrual', 			'AcceptedDateSEL#', 	'Posted', 				'Select', 			110,		NULL,				2
		UNION ALL	SELECT 		'InvoiceAccrual', 			'YesNo', 				'Current Month Only', 	'Select', 			120,		NULL,				0;

	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)							values ('InvoiceAccrual',	'Company', 			'Company/Store',	'Text',		140, 	1, 1);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)							values ('InvoiceAccrual',	'VendorName', 		'Vendor Name',		'Text',		200, 	2, 2);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('InvoiceAccrual',	'VendorNo', 		'Vendor No',		'Text',		120, 	3);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder, LinkPage, LinkPageValue)	values ('InvoiceAccrual',	'InvoiceNo', 		'Invoice No',		'Text',		120, 	4, 5,'Invoice?Id=', 'InvoiceId');
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('InvoiceAccrual',	'InvoiceDate', 		'Date',				'Date',		120, 	5);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)							values ('InvoiceAccrual',	'InvoiceType', 		'Type',				'Text',		140, 	6, 4);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('InvoiceAccrual',	'InvoiceTotal',		'Total',			'Currency',	100, 	7);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)							values ('InvoiceAccrual',	'PostedDate',		'Posted',			'Date',		100, 	8, 3);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('InvoiceAccrual',	'TotalMonths',		'Months',			'Number',	80, 	9);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('InvoiceAccrual',	'Entity',			'Entity',			'Number',	100, 	10);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('InvoiceAccrual',	'_InvoiceId',		'InvoiceId',		'Number',	0, 		999);
	call _x_ReportActivate ('InvoiceAccrual', 1, 'Confirm');


	Insert into ReportFields (	ReportKey,					Field,					Label, 					DataType, 			FieldOrder,	DependencyField,	ShowOn)
					SELECT 		'InvoiceAccrualSUM', 		'CompanyCode', 			'Company/Store',		'Select', 			10,			NULL,				0
		UNION ALL	SELECT 		'InvoiceAccrualSUM', 		'InvoiceType', 			'Invoice Type', 		'MultiSelect', 		40,			NULL,				0
		UNION ALL	SELECT 		'InvoiceAccrualSUM', 		'POorNonPO', 			'is PO Invoice', 		'Radio', 			50,			NULL,				0
		UNION ALL	SELECT 		'InvoiceAccrualSUM', 		'AcceptedDate#', 		'Posted', 				'Date', 			110,		NULL,				1
		UNION ALL	SELECT 		'InvoiceAccrualSUM', 		'AcceptedDateSEL#', 	'Posted', 				'Select', 			110,		NULL,				2
		UNION ALL	SELECT 		'InvoiceAccrualSUM', 		'YesNo', 				'Current Month Only', 	'Select', 			120,		NULL,				0;
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)							values ('InvoiceAccrualSUM',	'Company', 			'Company/Store',	'Text',		140, 	1, 1);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)							values ('InvoiceAccrualSUM',	'Entity', 			'Entity',			'Text',		200, 	2, 2);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)							values ('InvoiceAccrualSUM',	'PostedDate', 		'Posted',			'Date',		120, 	3, 3);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)							values ('InvoiceAccrualSUM',	'Category', 		'Category',			'Text',		200, 	4, -4);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('InvoiceAccrualSUM',	'TotalCount', 		'Type',				'Number',	80, 	5);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('InvoiceAccrualSUM',	'TotalAmount',		'Total',			'Currency',	100, 	6);
	call _x_ReportActivate ('InvoiceAccrualSUM', 1, 'Confirm');



	Insert into ReportFields (	ReportKey,					Field,					Label, 					DataType, 			FieldOrder,	DependencyField,	ShowOn)
					SELECT 		'ApproverVolume', 			'Year', 				'Year',					'Number', 			10,			NULL,				1
		UNION ALL	SELECT 		'ApproverVolume', 			'Month', 				'Month',				'Number', 			20,			NULL,				1
		UNION ALL	SELECT 		'ApproverVolume', 			'YearSel', 				'Year',					'Select', 			10,			NULL,				2
		UNION ALL	SELECT 		'ApproverVolume', 			'MonthSel', 			'Month',				'Select', 			20,			NULL,				2
		UNION ALL	SELECT 		'ApproverVolume', 			'Approver', 			'Approver', 			'MultiSelect', 		100,		NULL,				0;
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder, SortOrder)							values ('ApproverVolume',	'Employee', 	'Employee',		'Text',		220, 1, 1);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('ApproverVolume',	'Total',		'Total',		'Number',	80, 2);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('ApproverVolume',	'January',		'Jan',			'Number',	80, 3);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('ApproverVolume',	'February',		'Feb',			'Number',	80, 4);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('ApproverVolume',	'March',		'Mar',			'Number',	80, 5);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('ApproverVolume',	'April',		'Apr',			'Number',	80, 6);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('ApproverVolume',	'May',			'May',			'Number',	80, 7);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('ApproverVolume',	'June',			'June',			'Number',	80, 8);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('ApproverVolume',	'July',			'July',			'Number',	80, 9);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('ApproverVolume',	'August',		'Aug',			'Number',	80, 10);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('ApproverVolume',	'September',	'Sept',			'Number',	80, 11);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('ApproverVolume',	'October',		'Oct',			'Number',	80, 12);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('ApproverVolume',	'November',		'Nov',			'Number',	80, 13);
	insert 	into ReportFieldOutput (ReportKey, Field, Label, Type, Width, FieldOrder)										values ('ApproverVolume',	'December',		'Dec',			'Number',	80, 14);
	call _x_ReportActivate ('ApproverVolume', 1, 'Confirm');	

	*/






	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ZZZ_ADJUST_SCRIPT_4_Security` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ZZZ_ADJUST_SCRIPT_4_Security`()
ThisProc:
	BEGIN

	/*
	drop table IF EXISTS UserPasswordHistory;
	drop table IF EXISTS UserAuthenticatedLocation;
	drop table IF EXISTS _x_Client;

	CREATE TABLE UserPasswordHistory (
		UserId 						char(36) 		NOT NULL,
		DateAdded					datetime 		not NULL,
		Password					varchar(50)		not null,
		PRIMARY KEY (UserId, DateAdded)
		);


	CREATE TABLE UserAuthenticatedLocation (
		UserId 						char(36) 		NOT NULL,
		DateAdded					datetime 		not NULL		default(UTC_TIMESTAMP()),
		IPAddress 					varchar(15)		null,
		Location					varchar(500)	null,
		UserAgent					varchar(500)	null,
		ValidUntil 					datetime		null,			-- This is used if there a new location accessed and how long it is kept for validation
		LocationOnetimeKey			char(36)		null,
		PRIMARY KEY (UserId, DateAdded)
		);

	CREATE TABLE _x_Client (
		ClientId									int 			NOT NULL,
		Security_Password_MinLength 				int				not null default(8),
		Security_Password_RequireNumbers			bit				not null default(1),
		Security_Password_RequireUppercase			bit				not null default(1),
		Security_Password_RequireLowercase			bit				not null default(1),
		Security_Password_RequireSpecialChar		bit				not null default(1),
		Security_Password_RestrictRepeatingChar		bit				not null default(0),
	
		Security_Password_Attempts					tinyint			not null default(7),
		Security_Password_ExpirationDays			int				not null default(60),
		Security_Password_History					tinyint			not null default(-1),			-- -1 = Always
		
		Security_Authentication_Locations			tinyint			not null default(3),			-- -1 = Always		0 = Never
		Security_Authentication_Check				tinyint			not null default(3),			-- 1 = UserAgent only 2=UserAgent/IPAddress 3=UserAgent/Location
		Security_Deactivate_InactiveUsersDays		int				not null default(60),			-- 0 = Never
		Security_Deactivate_NotifyAdminsDays		tinyint			not null default(3),			-- 0 = Never		

		PRIMARY KEY (ClientId)
		);

	
	ALTER TABLE UserPasswordHistory
		ADD CONSTRAINT UserPasswordHistory_UserId FOREIGN KEY (UserId)
		REFERENCES User (UserId) ON DELETE NO ACTION ON UPDATE NO ACTION;

	ALTER TABLE UserAuthenticatedLocation
		ADD CONSTRAINT UserAuthenticatedLocation_UserId FOREIGN KEY (UserId)
		REFERENCES User (UserId) ON DELETE NO ACTION ON UPDATE NO ACTION;

	-- set up CloudX
	insert into _x_Client (ClientId) values (0);
	Update _x_Client set Security_Authentication_Locations = 0, Security_Deactivate_NotifyAdminsDays = 14 where ClientId = 0;



	insert into _x_Client (ClientId)
		select 	Distinct ClientId 
		from	ClientRoles
		where 	not exists (select 1 from _x_Client where _x_Client.ClientId = ClientRoles.ClientId);

UPDATE _x_Client SET Security_Authentication_Locations = 0;

	*/






	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ZZZ_CheckIfClientIsWithNextGen` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ZZZ_CheckIfClientIsWithNextGen`(in pClientId int, out pResult varchar(3))
ThisProc:
	BEGIN	
-- noformat
	set pResult = 'No';

	if exists (
				select	1
				from 	ClientRoles cr
				Where	ClientId = pClientId
				limit 	1) THEN
		set pResult = 'Yes';
	end if;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ZZZ_DeleteOrphanedAddresses` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ZZZ_DeleteOrphanedAddresses`(in pBatchCount int)
ThisProc:
	BEGIN
	-- noFormat

	DROP TEMPORARY TABLE IF EXISTS _x_ZZZ_ToDelete;
	DROP TEMPORARY TABLE IF EXISTS _x_ZZZ_UniqueAddresses;
	DROP TEMPORARY TABLE IF EXISTS _x_ZZZ_DeleteOrphanedAddresses;
	CREATE TEMPORARY TABLE IF NOT EXISTS _x_ZZZ_ToDelete (Id int Primary key)			ENGINE = INNODB, CHARACTER SET utf8mb4;
	CREATE TEMPORARY TABLE IF NOT EXISTS _x_ZZZ_UniqueAddresses (Id int) 				ENGINE = INNODB, CHARACTER SET utf8mb4;
	CREATE TEMPORARY TABLE IF NOT EXISTS _x_ZZZ_DeleteOrphanedAddresses (Id int)		ENGINE = INNODB, CHARACTER SET utf8mb4;



	insert into _x_ZZZ_UniqueAddresses(Id)
		Select DISTINCT BillToAddressId as Id from AVGINV where BillToAddressId is not null
		union all Select DISTINCT RemitToAddressId as Id from AVGINV where RemitToAddressId is not null
		union all Select DISTINCT ShippedToAddressId as Id from AVGINV where ShippedToAddressId is not null
		union all Select DISTINCT BillToAddressId as Id from AcceptedNonPOInvoicesHardy where nullif(BillToAddressId, 'NULL') is not null
		union all Select DISTINCT RemitToAddressId as Id from AcceptedNonPOInvoicesHardy where nullif(RemitToAddressId, 'NULL') is not null
		union all Select DISTINCT ShippedToAddressId as Id from AcceptedNonPOInvoicesHardy where nullif(ShippedToAddressId, 'NULL') is not null
		union all Select DISTINCT BillToAddressId as Id from CSVInvoice where BillToAddressId is not null
		union all Select DISTINCT RemitToAddressId as Id from CSVInvoice where RemitToAddressId is not null
		union all Select DISTINCT ShippedToAddressId as Id from CSVInvoice where ShippedToAddressId is not null
		union all Select DISTINCT AddressId as Id from Client where AddressId is not null
		union all Select DISTINCT AddressId as Id from Customer where AddressId is not null
		union all Select DISTINCT AddressId as Id from CustomerLocation where AddressId is not null
		union all Select DISTINCT AddressId as Id from CustomerSite where AddressId is not null
		union all Select DISTINCT AddressId as Id from Department where AddressId is not null
		union all Select DISTINCT RemitToAddressId as Id from Department where RemitToAddressId is not null
		union all Select DISTINCT BillToAddressId as Id from Invoice where BillToAddressId is not null
		union all Select DISTINCT RemitToAddressId as Id from Invoice where RemitToAddressId is not null
		union all Select DISTINCT ShippedToAddressId as Id from Invoice where ShippedToAddressId is not null
		union all Select DISTINCT AddressId as Id from Location where AddressId is not null
		union all Select DISTINCT DeliveryAddressId as Id from POHeader where DeliveryAddressId is not null
		union all Select DISTINCT AddressId as Id from User where AddressId is not null
		union all Select DISTINCT AddressId as Id from Vendor where AddressId is not null
		union all Select DISTINCT AddressId as Id from VendorLocation where AddressId is not null;
	CREATE INDEX idx_x_ZZZ_UniqueAddresses ON _x_ZZZ_UniqueAddresses (Id);
		


	insert into _x_ZZZ_DeleteOrphanedAddresses(Id)
		Select 	DISTINCT 	
				a.AddressId
		from 	Address a
				left join _x_ZZZ_UniqueAddresses d on d.Id = a.AddressID
		where 	d.Id is null;




	DeleteLoop:Loop		
		Truncate table _x_ZZZ_ToDelete;

		insert into _x_ZZZ_ToDelete(Id)
			Select	DISTINCT 	
					AddressId
			from 	_x_ZZZ_DeleteOrphanedAddresses 
					inner join 	Address	on Address.AddressId = _x_ZZZ_DeleteOrphanedAddresses.Id
			limit	pBatchCount;

		delete 	a
		from 	_x_ZZZ_ToDelete d
				inner join  Address a on a.AddressId = d.Id;

		if ROW_COUNT() <= 0 then
			Leave DeleteLoop;
		end if;

		do sleep(1);
		end loop;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ZZZ_ExpenseSmartTable` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb3 */ ;
/*!50003 SET character_set_results = utf8mb3 */ ;
/*!50003 SET collation_connection  = utf8mb3_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ZZZ_ExpenseSmartTable`()
ThisProc:
	BEGIN
	/*
	DROP TABLE IF EXISTS ClientExpenseCategoryByEmployeeType;
	DROP TABLE IF EXISTS ClientExpenseCategory;
	DROP TABLE IF EXISTS ClientEmployeeType;
	DROP TABLE IF EXISTS ClientExpenseCurrency;
	CREATE TABLE ClientExpenseCurrency (
		ClientId 				Int,
		Currency 				varchar(3) 		NOT NULL,
		isActive 				bit 			NOT NULL DEFAULT(1)
	)
	ENGINE = INNODB,
	AVG_ROW_LENGTH = 16,
	CHARACTER SET utf8mb4,
	COLLATE utf8mb4_general_ci,
	ROW_FORMAT = DYNAMIC;
	ALTER TABLE ClientExpenseCurrency
		ADD CONSTRAINT ClientExpenseCurrency_ClientId FOREIGN KEY (ClientId)
		REFERENCES Client (ClientId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	
	CREATE TABLE ClientEmployeeType (
		EmployeeTypeId 			int 			AUTO_INCREMENT PRIMARY KEY,
		ClientId 				Int,
		TypeName 				varchar(30) 	DEFAULT NULL,
		isActive 				bit 			NOT NULL DEFAULT(1)
	)
	ENGINE = INNODB,
	AVG_ROW_LENGTH = 256,
	CHARACTER SET utf8mb4,
	COLLATE utf8mb4_general_ci,
	ROW_FORMAT = DYNAMIC;
	ALTER TABLE ClientEmployeeType
		ADD CONSTRAINT ClientEmployeeType_ClientId FOREIGN KEY (ClientId)
		REFERENCES Client (ClientId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	
	CREATE TABLE ClientExpenseCategory (
		ExpenseCategoryId 		int 			AUTO_INCREMENT PRIMARY KEY,
		ClientId 				Int				not null,
		CategoryName 			varchar(30) 	NULL,
		EntryLabel 				varchar(30) 	NULL,
		Tooltip		 			varchar(200) 	NULL,
		AllowQtyOrAmount		Char(1) 		NULL 	DEFAULT ('Q'),
		GLCode 					varchar(100)	null,
		isReceiptRequired 		bit 			NOT NULL DEFAULT(1),
		isActive 				bit 			NOT NULL DEFAULT(1)
	)
	ENGINE = INNODB,
	AVG_ROW_LENGTH = 512,
	CHARACTER SET utf8mb4,
	COLLATE utf8mb4_general_ci,
	ROW_FORMAT = DYNAMIC;
	ALTER TABLE ClientExpenseCategory
		ADD CONSTRAINT ClientExpenseCategory_ClientId FOREIGN KEY (ClientId)
		REFERENCES Client (ClientId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	
	CREATE TABLE ClientExpenseCategoryByEmployeeType (
		ExpenseCategoryId 		int 			,
		EmployeeTypeId 			Int				not null,
		QtyMin					int 			null,
		QtyMax					int 			null,
		QtyRate					decimal(18,2)	null,
		AmountMin				decimal(18,2)	null,
		AmountMax				decimal(18,2)	null,
		isActive 				bit 			NOT NULL DEFAULT(1),
		Primary key (ExpenseCategoryId, EmployeeTypeId)
	)
	ENGINE = INNODB,
	AVG_ROW_LENGTH = 128,
	CHARACTER SET utf8mb4,
	COLLATE utf8mb4_general_ci,
	ROW_FORMAT = DYNAMIC;
	ALTER TABLE ClientExpenseCategoryByEmployeeType
		ADD CONSTRAINT ClientExpenseCategoryByEmployeeType_ExpenseCategoryId FOREIGN KEY (ExpenseCategoryId)
		REFERENCES ClientExpenseCategory (ExpenseCategoryId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	ALTER TABLE ClientExpenseCategoryByEmployeeType
		ADD CONSTRAINT ClientExpenseCategoryByEmployeeType_EmployeeTypeId FOREIGN KEY (EmployeeTypeId)
		REFERENCES ClientEmployeeType (EmployeeTypeId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	Alter table _x_UserParameters	ADD COLUMN EmployeeTypeId 			int NULL;
	Alter table _x_UserParameters	ADD COLUMN EmployeeVendorId 		int NULL;
	Alter table _x_UserParameters	ADD COLUMN EmployeeDevice 			varchar(100) 	NULL;
	Alter table _x_UserParameters	ADD COLUMN ExpenseSMARTVersion 		varchar(50) 	NULL;
	Alter table _x_UserParameters	ADD COLUMN ExpenseSMARTLastAccess 	Datetime 		NULL;
	Alter table _x_UserParameters	ADD COLUMN OTP					 	varchar(10)		NULL;
	
	ALTER TABLE _x_UserParameters
		ADD CONSTRAINT _x_UserParameters_EmployeeTypeId FOREIGN KEY (EmployeeTypeId)
		REFERENCES ClientEmployeeType (EmployeeTypeId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	ALTER TABLE _x_UserParameters
		ADD CONSTRAINT _x_UserParameters_EmployeeVendorId FOREIGN KEY (EmployeeVendorId)
		REFERENCES Vendor (VendorId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	DROP TABLE IF EXISTS ExpenseSmart_UserExpenseAttachment;
	DROP TABLE IF EXISTS ExpenseSmart_UserExpenseLine;
	DROP TABLE IF EXISTS ExpenseSmart_UserExpenseHeader;
	CREATE TABLE ExpenseSmart_UserExpenseHeader (
		ExpenseId 				int 			AUTO_INCREMENT PRIMARY KEY,
		UniqueId 				varchar(100)	null,
		Version					varchar(50)		not null,
		UserId 					char(36)		not null,
		Description				varchar(100) 	null,
		PeriodDate1				char(10)		null,
		PeriodDate2				char(10)		null,
		CreatedDatetime			datetime 		not null default(now()),
		InvoiceId				int				null,
		InvoiceTotal			decimal(18,2)	null,
		index idxUserExpenseHeader_UserId (UserId)
	)
	ENGINE = INNODB,
	AVG_ROW_LENGTH = 256,
	CHARACTER SET utf8mb4,
	COLLATE utf8mb4_general_ci,
	ROW_FORMAT = DYNAMIC;
	ALTER TABLE ExpenseSmart_UserExpenseHeader
		ADD CONSTRAINT UserExpenseHeader_UserId FOREIGN KEY (UserId)
		REFERENCES User (UserId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	CREATE TABLE ExpenseSmart_UserExpenseLine (
		ExpenseLineId 			int 			AUTO_INCREMENT PRIMARY KEY,
		ExpenseId 				int 			not null,
		ExpenseCategoryId 		int				not null,
		EntryDate				char(10)		null,
		Qty 					int 			null,
		QtyRate					decimal(18,2)	null,
		Currency				char(3)			null,
		CurrencyAmount			decimal(18,2)	null,
		EXRRate 				decimal(10,5)	null,
		CurrencyFinal			char(3)			null,
		FinalAmount				decimal(18,2)	null,
		LineInfo 				varchar(30) 	null,
		INDEX idxUserExpenseLine_ExpenseId (ExpenseId)
	)
	ENGINE = INNODB,
	AVG_ROW_LENGTH = 256,
	CHARACTER SET utf8mb4,
	COLLATE utf8mb4_general_ci,
	ROW_FORMAT = DYNAMIC;
	ALTER TABLE ExpenseSmart_UserExpenseLine
		ADD CONSTRAINT UserExpenseLine_ExpenseId FOREIGN KEY (ExpenseId)
		REFERENCES ExpenseSmart_UserExpenseHeader (ExpenseId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	CREATE TABLE ExpenseSmart_UserExpenseAttachment (
		UserExpenseAttachmentId int 			AUTO_INCREMENT PRIMARY KEY,
		ExpenseId 				int				not null,
		ImageUrl 				varchar(200) 	not null,
		INDEX idxUserExpenseAttachment_ExpenseId (ExpenseId)
	)
	ENGINE = INNODB,
	AVG_ROW_LENGTH = 256,
	CHARACTER SET utf8mb4,
	COLLATE utf8mb4_general_ci,
	ROW_FORMAT = DYNAMIC;
	ALTER TABLE ExpenseSmart_UserExpenseAttachment
		ADD CONSTRAINT UserExpenseAttachment_ExpenseId FOREIGN KEY (ExpenseId)
		REFERENCES ExpenseSmart_UserExpenseHeader (ExpenseId) ON DELETE NO ACTION ON UPDATE NO ACTION;
		
	*/
	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ZZZ_ExtractTemplateVariables` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ZZZ_ExtractTemplateVariables`()
ThisProc:
	BEGIN	
-- noformat
	DECLARE eof int 		DEFAULT 0;
	DECLARE dataValue		varchar(655535);
	DECLARE curTemplates CURSOR FOR 
			SELECT	Body
			FROM 	EmailTemplates et
			WHERE 	Body like '%[%'
			union all
			SELECT	Subject
			FROM 	EmailTemplates et
			WHERE 	Subject like '%[%';
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET eof = 1;


	CREATE TEMPORARY TABLE IF NOT EXISTS zzz_Keywords (
		KeyWord 		varchar(250)
	);


	OPEN curTemplates;
NoMoreData:
	LOOP
		FETCH curTemplates INTO dataValue;
		IF eof = 1 THEN
			LEAVE NoMoreData;
		END IF;
-- 		if dataValue like '%]%' then 
-- 			select dataValue;
-- 		end if;

 		CALL _x_StringToRows(dataValue, '[');
		insert into zzz_Keywords (KeyWord)
 			select	distinct rtrim(convert(left(SearchValue, instr(SearchValue, ']')-1), char(250)))
			from	tSearchList 
			where	SearchValue like '%]%';

	END LOOP;
	CLOSE curTemplates;	
	
	select distinct KeyWord from zzz_Keywords order by 1;

	drop TEMPORARY table zzz_Keywords;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ZZZ_GOLIVE_SCRIPT` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ZZZ_GOLIVE_SCRIPT`()
ThisProc:
	BEGIN

	/*

		ALTER TABLE EmailRecipients
		  DROP FOREIGN KEY EmailRecipients_ibfk_2;
		
		
		ALTER TABLE EmailRecipients DROP PRIMARY KEY;
		
		delete from EmailRecipients where not exists (select 1 from Email where Id = EmailId);
		
		alter table EmailRecipients add primary key(EmailId, EmailAddress);
		
		ALTER TABLE EmailRecipients
		ADD CONSTRAINT EmailRecipients_ibfk_2 FOREIGN KEY (EmailId)
		REFERENCES Email (Id)  ON DELETE CASCADE;
		
		DROP TABLE IF EXISTS _x_ClientParameters;
		
		CREATE TABLE _x_ClientParameters (
			ClientId 			int NOT NULL,
			TimeZone 			varchar(100) DEFAULT 'US/Eastern',
			PRIMARY KEY (ClientId)
		)
		ENGINE = INNODB,
		AVG_ROW_LENGTH = 16384,
		CHARACTER SET utf8mb4,
		COLLATE utf8mb4_general_ci,
		ROW_FORMAT = DYNAMIC;		


		
		--
		-- Drop table `_x_UserParameters`
		--
		DROP TABLE IF EXISTS _x_UserParameters;
		
		--
		-- Create table `_x_UserParameters`
		--
		CREATE TABLE _x_UserParameters (
			UserId 					char(36) NOT NULL,
			LaunchPage 				varchar(50) DEFAULT 'Home',
			UseSmartSearch 			int DEFAULT 0,
			DisableNotifications 	tinyint default 0,
			IsExceptionHandler 		tinyint default 0,
			AccessCode 				varchar(50) DEFAULT NULL,
			AccessTail 				char(2) DEFAULT NULL,
			AccessDate 				datetime DEFAULT NULL,
			FailCount 				tinyint DEFAULT 0,
			PRIMARY KEY (UserId)
		)
		ENGINE = INNODB,
		AVG_ROW_LENGTH = 16384,
		CHARACTER SET utf8mb4,
		COLLATE utf8mb4_general_ci,
		ROW_FORMAT = DYNAMIC;
















	drop table IF EXISTS SystemAdvanceSearchFieldsUserStats;
	drop table IF EXISTS SystemAdvanceSearchFieldsHiddenUser;
	drop table IF EXISTS SystemAdvanceSearchFieldsClient;
	drop table IF EXISTS SystemAdvanceSearchFields;
	
	CREATE TABLE SystemAdvanceSearchFields (
		SearchType 					varchar(20) NOT NULL,
		Field 						varchar(20) NOT NULL,
		Label 						varchar(50) NOT NULL,
		DataType					varchar(20) NOT NULL,
		FieldOrder					int not null,
		DependencyField				varchar(20) NULL,
		PRIMARY KEY (SearchType, Field)
		);
	
	CREATE TABLE SystemAdvanceSearchFieldsHiddenUser (
		SearchType 					varchar(20) NOT NULL,
		Field 						varchar(20) NOT NULL,
		UserId 						varchar(36) NOT NULL,
		PRIMARY KEY (SearchType, Field, UserId)
		);
	
	CREATE TABLE SystemAdvanceSearchFieldsClient (
		SearchType 					varchar(20) NOT NULL,
		Field 						varchar(20) NOT NULL,
		ClientId 					integer 	NOT NULL,
		ClientFieldOrder 			integer 	NULL,
		ClientHidden	 			bit 		NULL,
		PRIMARY KEY (SearchType, Field, ClientId)
		);
	
	CREATE TABLE SystemAdvanceSearchFieldsUserStats (
		SearchType 					varchar(20) NOT NULL,
		Field 						varchar(20) NOT NULL,
		UserId 						varchar(36) NOT NULL,
		TotalUsed					integer NOT NULL,
		PRIMARY KEY (SearchType, Field, UserId)
		);
	
	
	
	ALTER TABLE SystemAdvanceSearchFieldsHiddenUser
		ADD CONSTRAINT SystemAdvanceSearchFieldsHiddenUser_Parent FOREIGN KEY (SearchType, Field)
		REFERENCES SystemAdvanceSearchFields (SearchType, Field) ON DELETE NO ACTION ON UPDATE NO ACTION;
	
	ALTER TABLE SystemAdvanceSearchFieldsHiddenUser
		ADD CONSTRAINT SystemAdvanceSearchFieldsHiddenUser_UserId FOREIGN KEY (UserId)
		REFERENCES User (UserId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	
	
	ALTER TABLE SystemAdvanceSearchFieldsClient
		ADD CONSTRAINT SystemAdvanceSearchFieldsClient_Parent FOREIGN KEY (SearchType, Field)
		REFERENCES SystemAdvanceSearchFields (SearchType, Field) ON DELETE NO ACTION ON UPDATE NO ACTION;
	
	ALTER TABLE SystemAdvanceSearchFieldsClient
		ADD CONSTRAINT SystemAdvanceSearchFieldsClient_ClientId FOREIGN KEY (ClientId)
		REFERENCES Client (ClientId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	
	
	
	ALTER TABLE SystemAdvanceSearchFieldsUserStats
		ADD CONSTRAINT SystemAdvanceSearchFieldsUserStats_Parent FOREIGN KEY (SearchType, Field)
		REFERENCES SystemAdvanceSearchFields (SearchType, Field) ON DELETE NO ACTION ON UPDATE NO ACTION;
	
	ALTER TABLE SystemAdvanceSearchFieldsUserStats
		ADD CONSTRAINT SystemAdvanceSearchFieldsUserStats_UserId FOREIGN KEY (UserId)
		REFERENCES User (UserId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	
	insert into SystemAdvanceSearchFields(SearchType, Field, Label, DataType, FieldOrder, DependencyField)
					select 'GlobalSearch', 'MyInvoices', 		'Only my invoices', 'Check', 			5,		null		
		union all	select 'GlobalSearch', 'InvoiceNo', 		'Invoice number', 	'text', 			10,		null
		union all 	select 'GlobalSearch', 'CompanyCode', 		'Company/Store', 	'Select', 			15,		null
		union all 	select 'GlobalSearch', 'Department', 		'Department', 		'MultiSelect', 		15,		'CompanyCode'
		union all 	select 'GlobalSearch', 'Vendor', 			'Vendor', 			'Select', 			20,		'CompanyCode'
		union all 	select 'GlobalSearch', 'Comment', 			'Comment', 			'text', 			25,		null
		union all 	select 'GlobalSearch', 'InvoiceAmount#', 	'Invoice total', 	'currency', 		30,		null
		union all 	select 'GlobalSearch', 'InvoiceType', 		'Invoice Type', 	'MultiSelect', 		35,		null
		union all 	select 'GlobalSearch', 'POorNonPO', 		'Is PO Invoice', 	'Radio', 			36,		null		
		union all 	select 'GlobalSearch', 'PONumber', 			'PO Number', 		'text', 			37,		null
		union all 	select 'GlobalSearch', 'CheckNumber', 		'Check Number', 'text', 				45,		null
		union all 	select 'GlobalSearch', 'isConfidential', 	'Is confidential', 'Check', 			50,		null
		union all 	select 'GlobalSearch', 'GLCode', 			'GL Code', 	'Select', 					55,		null
		union all 	select 'GlobalSearch', 'InvoiceStatus', 	'Status', 			'MultiSelect', 		80,		null
		union all 	select 'GlobalSearch', 'InvoiceDate#', 		'Invoice date',		'date', 			90,		null
		union all 	select 'GlobalSearch', 'ScanDate#', 		'Scan', 			'date', 			95,		null
		union all 	select 'GlobalSearch', 'LastActionDate#', 	'Last action', 		'date', 		   100,		null;	
	
	insert into SystemAdvanceSearchFields(SearchType, Field, Label, DataType, FieldOrder, DependencyField)
					select 'IssuePayment', 'DiscountOnly', 		'Discount applicable only', 'Check', 			5,		null		
		union all 	select 'IssuePayment', 'DocumentType', 		'Document type',			'Select', 			10,		null		
		union all	select 'IssuePayment', 'InvoiceNo', 		'Invoice number', 			'text', 			15,		null
		union all 	select 'IssuePayment', 'CompanyCode', 		'Company/Store', 			'Select', 			20,		null
		union all 	select 'IssuePayment', 'Vendor', 			'Vendor', 					'Select', 			25,		'CompanyCode'
		union all 	select 'IssuePayment', 'InvoiceAmount#', 	'Invoice total', 			'currency', 		30,		null
		union all 	select 'IssuePayment', 'InvoiceDueDate#', 	'Due date',					'date', 			35,		null
		union all 	select 'IssuePayment', 'InvoiceDate#', 		'Invoice date',				'date', 			40,		null	;	
	
	insert into SystemAdvanceSearchFields(SearchType, Field, Label, DataType, FieldOrder, DependencyField)
					select 'PaymentHistory', 'PaymentDate#', 	'Payment date',				'date', 			5,		null		
		union all 	select 'PaymentHistory', 'PaymentInfo', 	'Payment information',		'text', 			10,		null		
		union all	select 'PaymentHistory', 'InvoiceNo', 		'Invoice number', 			'text', 			15,		null
		union all 	select 'PaymentHistory', 'InvoiceDate#', 	'Invoice date',				'date', 			20,		null		
		union all 	select 'PaymentHistory', 'CompanyCode', 	'Company/Store', 			'Select', 			25,		null
		union all 	select 'PaymentHistory', 'Vendor', 			'Vendor', 					'Select', 			30,		'CompanyCode'
		union all 	select 'PaymentHistory', 'DocumentType', 	'Document type',			'Select', 			35,		null;		
	





	
	
	
	
	
	
	
	
	
	
	DROP TABLE IF EXISTS ClientUserRoles;
	DROP TABLE IF EXISTS ClientRoleFunctions;
	DROP TABLE IF EXISTS ClientRoles;
	DROP table IF EXISTS SystemFunctions;
			
	CREATE TABLE SystemFunctions (
		FunctionKey 		varchar(50) NOT NULL PRIMARY KEY,
		FunctionName 		varchar(50) NULL,
		FunctionOptions 	varchar(1000) NULL,
		FunctionGrouping	varchar(50) NULL,
		SortOrderGrouping	int null default 0,
		SortOrderName		int null default 0,
		isInternal 			smallint default 0,
		Migrate				varchar(1000) null
		);
		
	Insert into SystemFunctions values ('DashBoard', 'Allow access to Dashboard Screen', '1=Yes; -1=No; DEFAULT=-1', 'General', 1, 1, 0, 'Approver;Supervisor;Vendor;Administrator;Buyer;Procurement');
	Insert into SystemFunctions values ('BatchStatus', 'Allow access to Batch Status Screen', '1=Yes; -1=No; DEFAULT=-1', 'General', 1, 2, 0, 'Approver;Supervisor;Exception Handler;Administrator');
	Insert into SystemFunctions values ('Auditor', 'Allow access to Auditor Screen', '1=Yes; -1=No; DEFAULT=-1', 'General', 1, 3, 0, 'Administrator');
	Insert into SystemFunctions values ('Workflow', 'Workflows', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'General', 1, 4, 0, 'Administrator');
	Insert into SystemFunctions values ('Alert', 'Alerts', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'General', 1, 5, 0, 'Administrator');
	Insert into SystemFunctions values ('UserRole', 'Roles', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'User', 2, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('User', 'Users', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'User', 2, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('Invoice', 'Allow access to Invoice Screen', '1=Yes; -1=No; DEFAULT=-1', 'Invoice', 3, 0, 0, 'Approver;Supervisor;Exception Handler;Administrator;Search User;Auditor');
	Insert into SystemFunctions values ('InvoiceApprove', 'Allow Approve', '1=Yes; -1=No; DEFAULT=-1', 'Invoice', 3, 0, 0, 'Approver');
	Insert into SystemFunctions values ('InvoiceAssignUser', 'Allow Assign a User', '1=Yes; -1=No; DEFAULT=-1', 'Invoice', 3, 0, 0, 'Approver;Supervisor;Exception Handler;Administrator');
	Insert into SystemFunctions values ('InvoiceDelete', 'Allow Delete', '1=Yes; -1=No; DEFAULT=-1', 'Invoice', 3, 0, 0, 'Supervisor;Exception Handler;Administrator');
	Insert into SystemFunctions values ('InvoicePause', 'Allow Pause', '1=Yes; -1=No; DEFAULT=-1', 'Invoice', 3, 0, 0, 'Supervisor;Exception Handler;Administrator');
	Insert into SystemFunctions values ('InvoiceReset', 'Allow Reset', '1=Yes; -1=No; DEFAULT=-1', 'Invoice', 3, 0, 0, 'Supervisor;Exception Handler;Administrator');
	Insert into SystemFunctions values ('InvoiceUpdate', 'Allow Update', '1=Yes; -1=No; DEFAULT=-1', 'Invoice', 3, 0, 0, 'Supervisor;Exception Handler;Administrator');
	Insert into SystemFunctions values ('PaymentIssue', 'Allow Issue', '1=Yes; -1=No; DEFAULT=-1', 'Payment', 4, 1, 0, 'Supervisor;');
	Insert into SystemFunctions values ('PaymentApprove', 'Allow Approve', '1=Yes; -1=No; DEFAULT=-1', 'Payment', 4, 2, 0, 'Approver');
	Insert into SystemFunctions values ('PaymentCancel', 'Allow Cancel', '1=Yes; -1=No; DEFAULT=-1', 'Payment', 4, 3, 0, 'Supervisor');
	Insert into SystemFunctions values ('PaymentHistory', 'Consult History', '1=Yes; -1=No; DEFAULT=-1', 'Payment', 4, 4, 0, 'Supervisor;Auditor');
	Insert into SystemFunctions values ('ExportCategory', 'Allow export for Category', '1=Yes; -1=No; DEFAULT=-1', 'Export', 5, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('ExportCompany', 'Allow export for Company', '1=Yes; -1=No; DEFAULT=-1', 'Export', 5, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('ExportDepartment', 'Allow export for Department', '1=Yes; -1=No; DEFAULT=-1', 'Export', 5, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('ExportEmailCapture', 'Allow export for Email Caputre', '1=Yes; -1=No; DEFAULT=-1', 'Export', 5, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('ExportGL', 'Allow export for GL Accounts', '1=Yes; -1=No; DEFAULT=-1', 'Export', 5, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('ExportInvoice', 'Allow export for Invoice', '1=Yes; -1=No; DEFAULT=-1', 'Export', 5, 0, 0, 'Supervisor;Auditor;Administrator');
	Insert into SystemFunctions values ('ExportOrgData', 'Allow export for Org Data', '1=Yes; -1=No; DEFAULT=-1', 'Export', 5, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('ExportPayment', 'Allow export for Payment', '1=Yes; -1=No; DEFAULT=-1', 'Export', 5, 0, 0, 'Supervisor;Auditor;Administrator');
	Insert into SystemFunctions values ('ExportPOData', 'Allow export for PO Data', '1=Yes; -1=No; DEFAULT=-1', 'Export', 5, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('ExportUser', 'Allow export for User', '1=Yes; -1=No; DEFAULT=-1', 'Export', 5, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('ExportVendor', 'Allow export for Vendor', '1=Yes; -1=No; DEFAULT=-1', 'Export', 5, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('ExportVendorDepartment', 'Allow export for Vendor Department', '1=Yes; -1=No; DEFAULT=-1', 'Export', 5, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('DataLoadCategory', 'Category', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'DataLoad', 6, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('DataLoadClosingDate', 'ClosingDate', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'DataLoad', 6, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('DataLoadCompany', 'Company', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'DataLoad', 6, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('DataLoadDepartment', 'Department', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'DataLoad', 6, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('DataLoadEmailCapture', 'Email Caputre', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'DataLoad', 6, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('DataLoadGL', 'GL', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'DataLoad', 6, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('DataLoadOrgData', 'Org Data', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'DataLoad', 6, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('DataLoadPOData', 'PO Data', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'DataLoad', 6, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('DataLoadVendor', 'Vendor', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'DataLoad', 6, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('DataLoadVendorDepartment', 'Vendor Department', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'DataLoad', 6, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('SystemDataEntry', 'Data Entry', '1=Yes; -1=No; DEFAULT=-1', 'General', 1, 0, 1, 'Data Entry');
	Insert into SystemFunctions values ('SystemDashBoard', 'Allow access to Dashboard Screen', '1=Yes; -1=No; DEFAULT=-1', 'Client', 2, 1, 1, 'XXX');
	Insert into SystemFunctions values ('SystemClient', 'Client Management', '1=Yes; -1=No; DEFAULT=-1', 'Client', 2, 2, 1, 'XXX');
	Insert into SystemFunctions values ('SystemReleaseOpen', 'Allow to Open and Complete', '1=Yes; -1=No; DEFAULT=-1', 'Release Management', 3, 1, 1, 'XXX');
	Insert into SystemFunctions values ('SystemReleaseReview', 'Allow Review', '1=Yes; -1=No; DEFAULT=-1', 'Release Management', 3, 2, 1, 'XXX');
	Insert into SystemFunctions values ('SystemReleaseRelease', 'Allow Release', '1=Yes; -1=No; DEFAULT=-1', 'Release Management', 3, 3, 1, 'XXX');
	Insert into SystemFunctions values ('SystemReleaseHistory', 'Allow access to History', '1=Yes; -1=No; DEFAULT=-1', 'Release Management', 3, 4, 1, 'XXX');	
	Insert into SystemFunctions values ('InvoiceUnpause', 'Allow Unpause', '1=Yes; -1=No; DEFAULT=-1', 'Invoice', 	3, 0, 0, 'Supervisor;Exception Handler;Administrator');
	Insert into SystemFunctions values ('InvoiceHold', 'Allow Hold', '1=Yes; -1=No; DEFAULT=-1', 'Invoice', 	3, 0, 0, 'Approver;Supervisor;Exception Handler;Administrator');
	Insert into SystemFunctions values ('InvoiceUnhold', 'Allow Unhold', '1=Yes; -1=No; DEFAULT=-1', 'Invoice', 	3, 0, 0, 'Approver;Supervisor;Exception Handler;Administrator');


	CREATE TABLE ClientRoles(
		RoleId 		int AUTO_INCREMENT,
		RoleName 	varchar(50),
		ClientId 	int,
		isAdmin 	tinyint,
		isInternal 	tinyint,
		isLocked	tinyint,
		PRIMARY KEY (RoleId)
		);
	ALTER TABLE ClientRoles
	ADD CONSTRAINT ClientRoles_ClientId FOREIGN KEY (ClientId)
	REFERENCES Client (ClientId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	
	
	
	CREATE TABLE ClientRoleFunctions (
		RoleId 		int NOT NULL,
		FunctionKey 	varchar(50) NOT NULL,
		Access 		tinyint,
		PRIMARY KEY (RoleId, FunctionKey)
		);
	ALTER TABLE ClientRoleFunctions
	ADD CONSTRAINT ClientRoleFunctions_FunctionKey FOREIGN KEY (FunctionKey)
	REFERENCES SystemFunctions (FunctionKey) ON DELETE NO ACTION ON UPDATE NO ACTION;
	
	Create TABLE ClientUserRoles (
		UserId 	char(36) NOT NULL,
		RoleId	int NOT NULL,
		PRIMARY KEY (UserId, RoleId)
		);
	
	ALTER TABLE ClientUserRoles
	ADD CONSTRAINT ClientUserRoles_RoleId FOREIGN KEY (RoleId)
	REFERENCES ClientRoles (RoleId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	ALTER TABLE ClientUserRoles
	ADD CONSTRAINT ClientUserRoles_UserId FOREIGN KEY (UserId)
	REFERENCES User (UserId) ON DELETE NO ACTION ON UPDATE NO ACTION;		
	
	
	
	
	








	
	
	
	
	
	drop table IF EXISTS SystemReleases;
	drop table IF EXISTS SystemReleasesClient;
	
	CREATE TABLE SystemReleases (
		ReleaseID			int AUTO_INCREMENT PRIMARY KEY,
		ReleaseNotes		MEDIUMTEXT NULL,
		InternalNotes 		MEDIUMTEXT NULL,
		JiraReference		varchar(20) null,
		CompletedDate 		Datetime null,
		ReviewedDate 		Datetime null,
		ReleaseDate 		Date null,
		SentDate			Datetime null,
		UpdatedDate 		Datetime null,
		Status 				varchar(20) as (case 
												when ReleaseDate is not null and SentDate is not null 		then 'Released'
												when ReleaseDate is not null and SentDate is null 			then 'Released-Not Sent'
												when ReviewedDate is not null 								then 'Reviewed'
												when CompletedDate is not null 								then 'Completed'
												else 'Open' end)
		);
	
	
	CREATE TABLE SystemReleasesClient (
		ReleaseID			int,
		ClientId 			int
		);
	
	ALTER TABLE SystemReleasesClient
		ADD CONSTRAINT SystemReleasesClient_ClientId FOREIGN KEY (ClientId)
		REFERENCES Client (ClientId) ON DELETE NO ACTION ON UPDATE NO ACTION;
		
		
		

















	drop table IF EXISTS AlertClientInstanceHit;
	drop table IF EXISTS AlertClientInstanceFields;
	drop table IF EXISTS AlertClientInstance;
	drop table IF EXISTS AlertClient;
	drop table IF EXISTS AlertFields;
	drop TABLE IF EXISTS Alert;
	
	CREATE TABLE Alert (
		AlertKey 					varchar(20) 	NOT NULL PRIMARY KEY,
		AlertName 					varchar(50) 	NULL,
		AlertGrouping				varchar(50)		NULL,
		Frequency 					int 			NOT NULL 				default(0),	-- 0 = Morning
		StoredProc					varchar(100) 	NULL,
		SortOrderGrouping			int 			not null default 0,
		SortOrderName				int 			not null default 0,
		isActive 					bit 			NOT NULL 				DEFAULT(0),
		isInternal					bit 			NULL
		);

	CREATE TABLE AlertFields (
		AlertKey 					varchar(20) 	NOT NULL,
		Field 						varchar(20) 	NOT NULL,
		Label 						varchar(50) 	NOT NULL,
		DataType					varchar(20) 	NOT NULL,
		FieldOrder					int 			not NULL,
		DependencyField				varchar(20) 	NULL,
		PRIMARY KEY (AlertKey, Field)
		);

	CREATE TABLE AlertClient (
		AlertKey 					varchar(20) 	NOT NULL,
		ClientId 					int 			NOT NULL,
		isActive 					bit 			NOT NULL DEFAULT(0),
		LastRunDateTime 			datetime 		NULL DEFAULT(now()),
		PRIMARY KEY (AlertKey, ClientId)
		);

	CREATE TABLE AlertClientInstance (
		AlertId 					int 			AUTO_INCREMENT PRIMARY KEY,
		AlertKey 					varchar(20) 	NOT NULL,
		ClientId 					int 			NOT NULL
		);

	CREATE TABLE AlertClientInstanceFields (
		AlertId 					int 			NOT NULL,
		Field 						varchar(20) 	NOT NULL,
		Value					 	mediumtext 		NOT null,
		PRIMARY KEY (AlertId, Field)
		);
	
	CREATE TABLE AlertClientInstanceHit (
		AlertId 					int 			NOT NULL,
		DataValue 					varchar(100)	NOT NULL, 
		RunDateTime 				datetime 		NOT NULL DEFAULT(now()),
		Primary Key (AlertId, DataValue, RunDateTime)
		);
	
	
	
	ALTER TABLE AlertFields
		ADD CONSTRAINT AlertFields_Alert FOREIGN KEY (AlertKey)
		REFERENCES Alert (AlertKey) ON DELETE NO ACTION ON UPDATE NO ACTION;

	ALTER TABLE AlertClient
		ADD CONSTRAINT AlertClient_Alert FOREIGN KEY (AlertKey)
		REFERENCES Alert (AlertKey) ON DELETE NO ACTION ON UPDATE NO ACTION;
	
	ALTER TABLE AlertClient
		ADD CONSTRAINT AlertClient_ClientId FOREIGN KEY (ClientId)
		REFERENCES Client (ClientId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	
	ALTER TABLE AlertClientInstance
		ADD CONSTRAINT AlertClientInstance_AlertClient FOREIGN KEY (AlertKey, ClientId)
		REFERENCES AlertClient (AlertKey, ClientId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	
	ALTER TABLE AlertClientInstanceFields
		ADD CONSTRAINT AlertClientInstanceFields_AlertClientInstance FOREIGN KEY (AlertId)
		REFERENCES AlertClientInstance (AlertId) ON DELETE NO ACTION ON UPDATE NO ACTION;

	ALTER TABLE AlertClientInstanceHit
		ADD CONSTRAINT AlertClientInstanceHit_AlertClient FOREIGN KEY (AlertId)
		REFERENCES AlertClientInstance (AlertId) ON DELETE NO ACTION ON UPDATE NO ACTION;


	Insert into Alert (		AlertKey,			AlertName,											AlertGrouping, 			Frequency,	StoredProc,								isInternal)
					select	'DiscountDate',		'Approaching net terms discount date', 				'Invoices',				0,			'_x_AlertProcess_NetTerms',				0
		union all 	select	'DueDate',			'Approaching their due date', 						'Invoices',				0,			'_x_AlertProcess_DueDate',				0
		union all 	select	'InvoiceFlag',		'Requiring possible attention', 					'Invoices',				0,			'_x_AlertProcess_InvoiceFlag',			0;

	Insert into AlertFields (	AlertKey,			Field,				Label, 						DataType, 			FieldOrder,	DependencyField)
					SELECT 		'DiscountDate', 	'ClientRole', 		'Roles to alert', 			'Multiselect', 		1,			NULL
		UNION ALL	SELECT 		'DiscountDate', 	'DiscountAmount#', 	'Discount amount', 			'Currency', 		5,			NULL
		UNION ALL	SELECT 		'DiscountDate', 	'WarningDays', 		'Warning days', 			'Radio', 			9,			NULL
		UNION ALL	SELECT 		'DueDate', 			'ClientRole', 		'Roles to alert', 			'Multiselect', 		1,			NULL
		UNION ALL	SELECT 		'DueDate', 			'InvoiceAmount#', 	'Invoice amount', 			'Currency', 		5,			NULL
		UNION ALL	SELECT 		'DueDate', 			'WarningDays', 		'Warning days', 			'Radio', 			9,			NULL


		union all	SELECT 		'InvoiceFlag', 		'ClientRole', 		'Roles to alert', 			'Multiselect', 		1,			'Employee'
		union all	SELECT 		'InvoiceFlag', 		'Employee', 		'Users to alert', 			'Multiselect', 		5,			'ClientRole'
		union all 	select 		'InvoiceFlag', 		'CompanyCode', 		'Company/Store', 			'Select', 			10,			null
		union all 	select 		'InvoiceFlag', 		'Department', 		'Department', 				'MultiSelect', 		15,			'CompanyCode'
		union all 	select 		'InvoiceFlag', 		'Vendor', 			'Vendor', 					'MultiSelect', 		20,			'CompanyCode'
		union all 	select 		'InvoiceFlag', 		'Comment', 			'Comment', 					'text', 			25,			null
		union all 	select 		'InvoiceFlag', 		'InvoiceAmount#', 	'Invoice total', 			'currency', 		30,			null
		union all 	select 		'InvoiceFlag', 		'InvoiceType', 		'Type', 					'Radio', 			35,			null
		union all 	select 		'InvoiceFlag', 		'InvoiceStatus', 	'Status', 					'MultiSelect', 		40,			null;






	drop table IF EXISTS UserNotification;
	
	CREATE TABLE UserNotification (
		NotificationID				int 		NOT NULL AUTO_INCREMENT PRIMARY KEY,
		UserId 						varchar(36) NOT NULL,
		Source 						varchar(20) NULL,
		Message 					mediumtext 	NOT NULL,
		LinkPage					varchar(20) NULL,
		LinkValue					varchar(20) NULL,
		ReceivedDate				datetime 	not NULL DEFAULT(UTC_TIMESTAMP()),
		ReadDate					datetime 	NULL,
		ReadStatus 					smallint NOT NULL DEFAULT (0),
		INDEX UserNotification_idx (UserId, NotificationID)
		);

	
	ALTER TABLE UserNotification
		ADD CONSTRAINT UserNotification_User FOREIGN KEY (UserId)
		REFERENCES User (UserId) ON DELETE NO ACTION ON UPDATE NO ACTION;












	-- truncate table InvoiceArchiveReason;
	drop table IF EXISTS InvoiceArchiveReason;
	CREATE TABLE InvoiceArchiveReason (
		Id int 							NOT NULL AUTO_INCREMENT,
		ClientId 		int 			NOT NULL,
		ArchiveReason 	varchar(200) 	NOT NULL,
		TotalCount 		int				NOT NULL,
		LastUsed 		Date 			not null,
		UNIQUE KEY InvoiceArchiveReason_idx (ClientId, ArchiveReason),
		Primary key (Id)
	)
	ENGINE = INNODB,
	AUTO_INCREMENT = 2200,
	AVG_ROW_LENGTH = 60,
	CHARACTER SET utf8mb4,
	COLLATE utf8mb4_general_ci,
	ROW_FORMAT = DYNAMIC;
		

		
	*/



	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Final view structure for view `Coinstar-ApproverByAmountWithVendor`
--

/*!50001 DROP VIEW IF EXISTS `Coinstar-ApproverByAmountWithVendor`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8mb4 */;
/*!50001 SET character_set_results     = utf8mb4 */;
/*!50001 SET collation_connection      = utf8mb4_0900_ai_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`cloudxuser`@`%` SQL SECURITY DEFINER */
/*!50001 VIEW `Coinstar-ApproverByAmountWithVendor` AS select concat(`u`.`FirstName`,' ',`u`.`LastName`) AS `FullName`,`u`.`Email` AS `Email`,`ap`.`MaximumAllowedAmount` AS `MaximumAllowedAmount`,concat(`v`.`VendorNo`,' - ',`v`.`VendorName`) AS `Vendor`,`u2`.`Email` AS `SecondApprover` from (((`ApproverByAmount` `ap` join `User` `u` on((`u`.`UserId` = `ap`.`UserId`))) left join `Vendor` `v` on((`ap`.`VendorId` = `v`.`VendorId`))) left join `User` `u2` on((`u2`.`UserId` = `ap`.`SecondApproverId`))) where ((`u`.`ClientId` = 102) and (`ap`.`UserId` = `u`.`UserId`)) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `keterPageCount`
--

/*!50001 DROP VIEW IF EXISTS `keterPageCount`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8mb4 */;
/*!50001 SET character_set_results     = utf8mb4 */;
/*!50001 SET collation_connection      = utf8mb4_0900_ai_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`cloudxuser`@`%` SQL SECURITY DEFINER */
/*!50001 VIEW `keterPageCount` AS select count(`InvoiceDocs`.`InvoiceId`) AS `PageCount` from `InvoiceDocs` where `InvoiceDocs`.`InvoiceId` in (select `Invoice`.`InvoiceId` from `Invoice` where ((`Invoice`.`ClientId` = 79) and (`Invoice`.`InvoiceType` = 'HaulerInvoice') and (`Invoice`.`ScannedDate` >= '2024-02-01') and (`Invoice`.`ScannedDate` < '2024-03-01'))) group by `InvoiceDocs`.`InvoiceId` */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;
SET @@SESSION.SQL_LOG_BIN = @MYSQLDUMP_TEMP_LOG_BIN;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2025-01-26 21:42:44
