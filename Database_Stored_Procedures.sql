-- MySQL dump 10.13  Distrib 8.0.41, for Win64 (x86_64)
--
-- Host: apsmart-main-db-mysql8.c6jssxf3a4wt.us-east-1.rds.amazonaws.com    Database: dbStagingCoinStar
-- ------------------------------------------------------
-- Server version	8.0.36

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
SET @MYSQLDUMP_TEMP_LOG_BIN = @@SESSION.SQL_LOG_BIN;
SET @@SESSION.SQL_LOG_BIN= 0;

--
-- GTID state at the beginning of the backup 
--

SET @@GLOBAL.GTID_PURGED=/*!80000 '+'*/ '';

--
-- Dumping routines for database 'dbStagingCoinStar'
--
/*!50003 DROP FUNCTION IF EXISTS `AddDays` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `AddDays`(dateToadd datetime, numberOfDays int) RETURNS datetime
BEGIN
  DECLARE dt datetime;
  SET dt = DATE_ADD(dateToadd, INTERVAL numberOfDays DAY);
  RETURN dt;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `BusinessDays` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `BusinessDays`(startDate DATE, endDate DATE) RETURNS int
    DETERMINISTIC
BEGIN
    DECLARE totalDays INT;
    DECLARE weekendDays INT;
    
    -- Get total days between the two dates
    SET totalDays = DATEDIFF(endDate, startDate) + 1;
    
    -- Calculate weekends (Saturday, Sunday)
    SET weekendDays = 
        (WEEKDAY(endDate) - WEEKDAY(startDate) + totalDays) DIV 7 * 2 +
        (CASE
            WHEN WEEKDAY(startDate) = 5 THEN 1
            WHEN WEEKDAY(startDate) = 6 AND WEEKDAY(endDate) <> 6 THEN 1
            ELSE 0
        END) +
        (CASE
            WHEN WEEKDAY(endDate) = 5 THEN 1
            ELSE 0
        END);
    
    RETURN totalDays - weekendDays;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `ConvertToDecimal` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `ConvertToDecimal`(stringValue varchar(256)) RETURNS decimal(18,2)
BEGIN
  DECLARE decimalValue decimal(18, 2);
  SET decimalValue = CAST(stringValue AS decimal(18, 2));
  RETURN decimalValue;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `CountWeekDays` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `CountWeekDays`(date1 datetime, date2 datetime) RETURNS int
BEGIN
  DECLARE result int;
  SET result =
  ((date2 - date1) - 2 * FLOOR((date2 - date1) / 7) - (SIGN((date2, 'D') -
  (date1, 'D')), -1, 2, 0) + ((date1, 'D'), 7, 1, 0) -
  ((date2, 'D'), 7, 1, 0));
  RETURN result;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `DiffDays` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `DiffDays`(dateFrom datetime, dateTo datetime) RETURNS int
BEGIN
  DECLARE dif int;
  SELECT
    DATEDIFF(dateTo, dateFrom) INTO dif;
  RETURN dif;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `dvrt_GetBuyerName` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `dvrt_GetBuyerName`(invoiceId int) RETURNS varchar(255) CHARSET utf8mb3
BEGIN
  RETURN (SELECT
      CONCAT(u.FirstName, ' ', u.LastName)
    FROM `PO` AS p
      INNER JOIN Invoice i
        ON i.PONumber = p.PONumber
      INNER JOIN `User` AS u
        ON u.UserId = p.PurchaserId
    WHERE i.InvoiceId = invoiceId LIMIT 1);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `ExistsInApprovalHistory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `ExistsInApprovalHistory`(paramInvoiceId int, paramFieldName char(17), paramSearchValue varchar(100), likeStartParam char(1)) RETURNS tinyint(1)
BEGIN

  IF (paramFieldName = 'GLCode') THEN
    RETURN (
    EXISTS (SELECT
        *
      FROM ApprovalHistory ah
      USE INDEX (IX_InvoiceId, IX_GLCodeId)
        INNER JOIN GLCode gl
          ON ah.GLCodeId = gl.GLCodeId
      WHERE ah.InvoiceId = paramInvoiceId
      AND (gl.GLCodeName LIKE CONCAT(likeStartParam, paramSearchValue, '%')
      OR gl.Desccription LIKE CONCAT(likeStartParam, paramSearchValue, '%'))) OR
    EXISTS (SELECT
        *
      FROM PendingApprovalHistory pah
      USE INDEX (IX_InvoiceId, IX_GLCodeId)
        INNER JOIN GLCode gl
          ON pah.GLCodeId = gl.GLCodeId
      WHERE pah.InvoiceId = paramInvoiceId
      AND (gl.GLCodeName LIKE CONCAT(likeStartParam, paramSearchValue, '%')
      OR gl.Desccription LIKE CONCAT(likeStartParam, paramSearchValue, '%'))));

  ELSEIF (paramFieldName = 'ProjectType') THEN
    RETURN (
    EXISTS (SELECT
        *
      FROM ApprovalHistory ah
      USE INDEX (IX_InvoiceId, IX_ProjectId)
        INNER JOIN ProjectType p
          ON ah.ProjectId = p.Id
      WHERE ah.InvoiceId = paramInvoiceId
      AND (p.ProjectName LIKE CONCAT(likeStartParam, paramSearchValue, '%')
      OR p.Description LIKE CONCAT(likeStartParam, paramSearchValue, '%'))) OR
    EXISTS (SELECT
        *
      FROM PendingApprovalHistory pah
      USE INDEX (IX_InvoiceId, IX_ProjectId)
        INNER JOIN ProjectType p
          ON pah.ProjectId = p.Id
      WHERE pah.InvoiceId = paramInvoiceId
      AND (p.ProjectName LIKE CONCAT(likeStartParam, paramSearchValue, '%')
      OR p.Description LIKE CONCAT(likeStartParam, paramSearchValue, '%'))));

  ELSEIF (paramFieldName = 'GLDescription') THEN
    RETURN (
    EXISTS (SELECT
        *
      FROM ApprovalHistory ah
        INNER JOIN Invoice i
          ON i.InvoiceId = ah.InvoiceId
      WHERE i.InvoiceId = paramInvoiceId
      AND ah.InvoiceId = paramInvoiceId
      AND i.Description LIKE CONCAT(likeStartParam, paramSearchValue, '%')));

  ELSEIF (paramFieldName = 'CompanyCode') THEN
    RETURN (
    EXISTS (SELECT
        *
      FROM ApprovalHistory ah
        INNER JOIN Invoice i
          ON ah.InvoiceId = i.InvoiceId
      WHERE i.InvoiceId = paramInvoiceId
      AND ah.InvoiceId = paramInvoiceId
      AND (ah.CompanyCode LIKE CONCAT(likeStartParam, paramSearchValue, '%')
      OR i.CompanyCode LIKE CONCAT(likeStartParam, paramSearchValue, '%'))));

  ELSEIF (paramFieldName = 'Department') THEN
    RETURN (
    EXISTS (SELECT
        *
      FROM ApprovalHistory ah
      USE INDEX (IX_InvoiceId, IX_DepartmentId)
        INNER JOIN Department d
          ON ah.DepartmentId = d.Id
      WHERE ah.InvoiceId = paramInvoiceId
      AND (d.DepartmentName LIKE CONCAT(likeStartParam, paramSearchValue, '%')
      OR d.Description LIKE CONCAT(likeStartParam, paramSearchValue, '%'))));
  ELSE
    RETURN FALSE;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetActiveTemporaryAssignorForAssignee` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetActiveTemporaryAssignorForAssignee`(paramUserId char(36), paramCurrentDate datetime, paramWorkflowType int) RETURNS char(36) CHARSET latin1
BEGIN
  RETURN (SELECT
      UserReassignmentHistory.SourceUserId
    FROM `UserReassignmentHistory`
    WHERE UserReassignmentHistory.TargetUserId = paramUserId
    AND UserReassignmentHistory.IsPermanent = FALSE
    AND (paramWorkflowType = 2
    OR UserReassignmentHistory.WorkflowType = 2
    OR UserReassignmentHistory.WorkflowType = paramWorkflowType)
    AND (UserReassignmentHistory.DateFrom <= paramCurrentDate
    AND (UserReassignmentHistory.DateTo IS NULL
    OR UserReassignmentHistory.DateTo > paramCurrentDate)) LIMIT 1);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetActiveTemporaryAssignorForAssigneeList` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetActiveTemporaryAssignorForAssigneeList`(paramUserId char(36), paramCurrentDate datetime, paramWorkflowType int) RETURNS char(36) CHARSET latin1
BEGIN
  RETURN (SELECT
      UserReassignmentHistory.SourceUserId
    FROM `UserReassignmentHistory`
    WHERE UserReassignmentHistory.TargetUserId = paramUserId
    AND UserReassignmentHistory.IsPermanent = FALSE
    AND (paramWorkflowType = 2
    OR UserReassignmentHistory.WorkflowType = 2
    OR UserReassignmentHistory.WorkflowType = paramWorkflowType)
    AND (UserReassignmentHistory.DateFrom <= paramCurrentDate
    AND (UserReassignmentHistory.DateTo IS NULL
    OR UserReassignmentHistory.DateTo > paramCurrentDate)));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetAssignedTosString` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetAssignedTosString`(invoiceId int) RETURNS varchar(255) CHARSET utf8mb3
BEGIN

  RETURN (SELECT
      GROUP_CONCAT(DISTINCT CONCAT(LastName, ', ', FirstName) SEPARATOR '; ')
    FROM (SELECT
        u.`FirstName`,
        u.`LastName`
      FROM UserInvoiceAssignment uia
        INNER JOIN `User` u
          ON uia.UserId = u.UserId
      WHERE uia.InvoiceId = invoiceId
      UNION
      SELECT
        tu.`FirstName`,
        tu.`LastName`
      FROM UserInvoiceAssignment uia2
        INNER JOIN UserReassignmentHistory urh
          ON uia2.UserId = urh.SourceUserId
        INNER JOIN `User` tu
          ON urh.TargetUserId = tu.UserId
      WHERE uia2.InvoiceId = invoiceId
      AND urh.IsPermanent <> TRUE
      AND (urh.WorkflowType = 3
      OR urh.WorkflowType = 0)
      AND urh.DateFrom <= NOW()
      AND (urh.DateTo IS NULL
      OR urh.DateTo > NOW())) AS InvoiceAssignment2
    GROUP BY NULL);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetBuyerName` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetBuyerName`(invoiceId int) RETURNS varchar(255) CHARSET utf8mb3
BEGIN
  RETURN (SELECT
      CONCAT(u.FirstName, ' ', u.LastName)
    FROM `PO` AS p
      INNER JOIN `LineItemDetail` AS l
        ON l.POId = p.Id
      INNER JOIN `User` AS u
        ON u.UserId = p.PurchaserId
    WHERE l.InvoiceId = invoiceId
    GROUP BY l.InvoiceId);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetBuyerNameNew` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetBuyerNameNew`(invoiceId int) RETURNS varchar(255) CHARSET utf8mb3
BEGIN
  RETURN (SELECT
      CONCAT(u.FirstName, ' ', u.LastName)
    FROM `PO` AS p
      INNER JOIN `LineItemDetail` AS l
        ON l.POId = p.Id
      INNER JOIN `User` AS u
        ON u.UserId = p.PurchaserId
    WHERE l.InvoiceId = invoiceId
    GROUP BY l.InvoiceId);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetDaysFromInvoiceHisory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetDaysFromInvoiceHisory`(invoiceId int, approvalStatusId int, daysAction varchar(250)) RETURNS int
BEGIN
  DECLARE retval int;
  IF (daysAction = 'DaysInCaptured') THEN
    IF EXISTS (SELECT
          *
        FROM InvoiceHistory ih
        WHERE ih.InvoiceId = invoiceId
        AND (ih.Field = "Invoice Status"
        OR ih.Field = "ApprovalStatusId")
        AND ih.InitialStatus <> NULL
        AND ih.InitialStatus = 1
        AND approvalStatusId <> 1) THEN
      RETURN (1);
    ELSE
      RETURN (9);
    END IF;

  ELSEIF (daysAction = 'DaysInException') THEN
    RETURN (1);
  ELSEIF (daysAction = 'DaysInInApproval') THEN
    RETURN (1);
  ELSEIF (daysAction = 'DaysToAccepted') THEN
    RETURN (1);
  ELSE
    RETURN 1;
  END IF;

  RETURN 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetGLDescriptionsFromApprovalHistory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetGLDescriptionsFromApprovalHistory`(invoiceId int) RETURNS varchar(255) CHARSET utf8mb3
BEGIN
  CASE
    WHEN EXISTS (SELECT
          *
        FROM ApprovalHistory ah
        WHERE ah.InvoiceId = invoiceId) THEN RETURN (SELECT
            GROUP_CONCAT(DISTINCT ah.SpecialNote SEPARATOR ';') AS GLDescription
          FROM ApprovalHistory ah
          WHERE ah.InvoiceId = invoiceId
          GROUP BY NULL);
    WHEN EXISTS (SELECT
          *
        FROM PendingApprovalHistory pah
        WHERE pah.InvoiceId = invoiceId) THEN RETURN (SELECT
            GROUP_CONCAT(DISTINCT ah.SpecialNote SEPARATOR ';') AS GLDescription
          FROM PendingApprovalHistory ah
          WHERE ah.InvoiceId = invoiceId
          GROUP BY NULL);
    ELSE RETURN "";
  END CASE;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetGLNumbersFromApprovalHistory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetGLNumbersFromApprovalHistory`(invoiceId int) RETURNS varchar(255) CHARSET utf8mb3
BEGIN
  CASE
    WHEN EXISTS (SELECT
          *
        FROM ApprovalHistory ah
        WHERE ah.InvoiceId = invoiceId) THEN RETURN (SELECT
            GROUP_CONCAT(DISTINCT gl.GLCodeName SEPARATOR ';') AS GLCodeName
          FROM ApprovalHistory ah
          USE INDEX (IX_InvoiceId, IX_GLCodeId)
            INNER JOIN GLCode gl
              ON ah.GLCodeId = gl.GLCodeId
          WHERE ah.InvoiceId = invoiceId
          GROUP BY NULL);
    WHEN EXISTS (SELECT
          *
        FROM PendingApprovalHistory pah
        WHERE pah.InvoiceId = invoiceId) THEN RETURN (SELECT
            GROUP_CONCAT(DISTINCT gl.GLCodeName SEPARATOR ';') AS GLCodeName
          FROM PendingApprovalHistory ah
          USE INDEX (IX_InvoiceId, IX_GLCodeId)
            INNER JOIN GLCode gl
              ON ah.GLCodeId = gl.GLCodeId
          WHERE ah.InvoiceId = invoiceId
          GROUP BY NULL);
    ELSE RETURN "";
  END CASE;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetGLNumbersFromLineItemDetail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetGLNumbersFromLineItemDetail`(invoiceId INT) RETURNS varchar(255) CHARSET utf8mb3
BEGIN  
CASE
    WHEN EXISTS (SELECT
          *
        FROM LineItemDetail lid
        WHERE lid.InvoiceId = invoiceId) THEN RETURN (SELECT
            GROUP_CONCAT(DISTINCT lid.GLCode SEPARATOR ';') AS GLCodeName
          FROM LineItemDetail lid
          WHERE lid.InvoiceId = invoiceId);
    ELSE RETURN "";
  END CASE;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetInvoiceComment` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetInvoiceComment`(invoiceId int, isPaused bit) RETURNS varchar(2048) CHARSET utf8mb3
BEGIN
  DECLARE COMMENT varchar(2048);
  IF (isPaused = TRUE) THEN
    SET COMMENT = (SELECT
        CONCAT(CONVERT(i.Comment USING utf8mb4),
        ', ',
        CONVERT(p.Comment USING utf8mb4))
      FROM Invoice i
        LEFT OUTER JOIN PausedInvoice p
          ON i.InvoiceId = p.InvoiceId
      WHERE i.InvoiceId = invoiceId);
  ELSE
    SET COMMENT = (SELECT
        CONVERT(i.Comment USING utf8mb4)
      FROM Invoice i
      WHERE i.InvoiceId = invoiceId);
  END IF;
  RETURN COMMENT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetNextLevelManager` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetNextLevelManager`(deptId int, userId char(36), fieldName varchar(50)) RETURNS varchar(255) CHARSET utf8mb3
BEGIN
  IF (fieldName = 'Email') THEN
    RETURN (SELECT
        u.Email
      FROM ApproverByAmount aba
        INNER JOIN User u
          ON u.UserId = aba.SecondApproverId
      WHERE aba.UserId = userId
      AND deptId IN (aba.CostCenters) LIMIT 1);

  ELSEIF (fieldName = 'Amount') THEN

    RETURN (SELECT
        aba.MaximumAllowedAmount
      FROM ApproverByAmount aba
        INNER JOIN User u
          ON u.UserId = aba.SecondApproverId
      WHERE aba.UserId = userId
      AND deptId IN (aba.CostCenters) LIMIT 1);

  ELSEIF (fieldName = 'UserId') THEN

    RETURN (SELECT
        u.UserId
      FROM ApproverByAmount aba
        INNER JOIN User u
          ON u.UserId = aba.SecondApproverId
      WHERE aba.UserId = userId
      AND deptId IN (aba.CostCenters) LIMIT 1);

  ELSEIF (fieldName = 'Name') THEN

    RETURN (SELECT
        CONCAT(u.FirstName, ' ', u.LastName) AS FullName
      FROM ApproverByAmount aba
        INNER JOIN User u
          ON u.UserId = aba.SecondApproverId
      WHERE aba.UserId = userId
      AND deptId IN (aba.CostCenters) LIMIT 1);

  ELSE
    RETURN '';
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetNextLevelManagerByUserOnly` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetNextLevelManagerByUserOnly`(userId char(36), fieldName varchar(50)) RETURNS varchar(255) CHARSET utf8mb3
BEGIN
  IF (fieldName = 'Email') THEN
    RETURN (SELECT
        u.Email
      FROM ApproverByAmount aba
        INNER JOIN User u
          ON u.UserId = aba.SecondApproverId
      WHERE aba.UserId = userId LIMIT 1);
  ELSEIF (fieldName = 'Amount') THEN
    RETURN (SELECT
        aba.MaximumAllowedAmount
      FROM ApproverByAmount aba
        INNER JOIN User u
          ON u.UserId = aba.SecondApproverId
      WHERE aba.UserId = userId LIMIT 1);
  ELSEIF (fieldName = 'UserId') THEN
    RETURN (SELECT
        u.UserId
      FROM ApproverByAmount aba
        INNER JOIN User u
          ON u.UserId = aba.SecondApproverId
      WHERE aba.UserId = userId LIMIT 1);
  ELSEIF (fieldName = 'Name') THEN
    RETURN (SELECT
        CONCAT(u.FirstName, ' ', u.LastName) AS FullName
      FROM ApproverByAmount aba
        INNER JOIN User u
          ON u.UserId = aba.SecondApproverId
      WHERE aba.UserId = userId LIMIT 1);
  ELSE
    RETURN '';
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetNextLevelManagerEmail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetNextLevelManagerEmail`(deptId int, userId char(36)) RETURNS varchar(255) CHARSET utf8mb3
BEGIN
  RETURN (SELECT
      u.Email
    FROM ApproverByAmount aba
      INNER JOIN User u
        ON u.UserId = aba.SecondApproverId
    WHERE aba.UserId = userId
    AND deptId IN (aba.CostCenters) LIMIT 1);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetNextLevelManagerLimit` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetNextLevelManagerLimit`(deptId int, userId char(36)) RETURNS varchar(255) CHARSET utf8mb3
BEGIN
  RETURN (SELECT
      aba.MaximumAllowedAmount
    FROM ApproverByAmount aba
      INNER JOIN User u
        ON u.UserId = aba.SecondApproverId
    WHERE aba.UserId = userId
    AND deptId IN (aba.CostCenters) LIMIT 1);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetProjectNamesFromApprovalHistory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `GetProjectNamesFromApprovalHistory`(invoiceId int, isPOInvoice bit) RETURNS varchar(255) CHARSET utf8mb3
BEGIN
  IF isPOInvoice = FALSE THEN
    RETURN (SELECT
        GROUP_CONCAT(DISTINCT p.ProjectName SEPARATOR ';') AS ProjectName
      FROM ApprovalHistory ah
      USE INDEX (IX_InvoiceId, IX_ProjectId)
        INNER JOIN ProjectType p
          ON ah.ProjectId = p.Id
      WHERE ah.InvoiceId = invoiceId
      GROUP BY NULL);
  ELSE

    RETURN (SELECT
        GROUP_CONCAT(DISTINCT p.ProjectName SEPARATOR ';') AS ProjectName
      FROM PendingApprovalHistory ah
      USE INDEX (IX_InvoiceId, IX_ProjectId)
        INNER JOIN ProjectType p
          ON ah.ProjectId = p.Id
      WHERE ah.InvoiceId = invoiceId
      GROUP BY NULL);
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `InvoiceExistsInUserCompanies` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `InvoiceExistsInUserCompanies`(clientId int, userId char(36), invoiceCompanyCode varchar(255)) RETURNS tinyint(1)
BEGIN
  RETURN (
  EXISTS (SELECT
      cc.CompanyCode
    FROM User u
      INNER JOIN UserClientCompanies ucc
        ON ucc.UserId = u.UserId
      INNER JOIN ClientCompany cc
        ON cc.Id = ucc.ClientCompanyId
    WHERE u.ClientId = clientId
    AND u.userId = userId
    AND cc.CompanyCode = invoiceCompanyCode));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `IsInvoiceAndUserCompanyMatch` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `IsInvoiceAndUserCompanyMatch`(paramUserId char(36), paramInvoiceId int) RETURNS tinyint(1)
BEGIN
  IF ((SELECT
        `User`.ClientCompanyId
      FROM `User`
      WHERE `User`.`UserId` = paramUserId) IS NULL
    AND (SELECT
        COUNT(*)
      FROM UserClientCompanies
      WHERE UserClientCompanies.UserId = paramUserId) = 0) THEN
    RETURN TRUE;
  ELSEIF ((SELECT
        ClientCompany.CompanyCode
      FROM `User`
        INNER JOIN ClientCompany
          ON ClientCompany.`Id` = `User`.`ClientCompanyId`
      WHERE `User`.`UserId` = paramUserId) = (SELECT
        CompanyCode
      FROM Invoice
      WHERE Invoice.`InvoiceId` = paramInvoiceId)) THEN
    RETURN TRUE;
  ELSEIF ((SELECT
        Invoice.`CompanyCode`
      FROM Invoice
      WHERE Invoice.`InvoiceId` = paramInvoiceId) IN (SELECT
        ClientCompany.`CompanyCode`
      FROM UserClientCompanies
        INNER JOIN ClientCompany
          ON UserClientCompanies.`UserId` = paramUserId
          AND UserClientCompanies.`ClientCompanyId` = ClientCompany.`Id`)) THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
  RETURN TRUE;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `IsInvoiceDepartmentInUserDepartments` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `IsInvoiceDepartmentInUserDepartments`(paramUserId char(36), paramInvoiceId int) RETURNS tinyint(1)
BEGIN
  RETURN (EXISTS (SELECT
      *
    FROM Invoice
    WHERE Invoice.`InvoiceId` = paramInvoiceId
    AND EXISTS (SELECT
        *
      FROM UserDepartment
      USE INDEX (IX_DepartmentId, IX_UserId)
      WHERE UserDepartment.UserId = paramUserId
      AND UserDepartment.`DepartmentId` = Invoice.`VendorSiteId`)));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `IsInvoiceTypeStatement` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `IsInvoiceTypeStatement`(paramInvoiceId int) RETURNS tinyint(1)
BEGIN
  RETURN (EXISTS (SELECT
      *
    FROM Invoice
    WHERE Invoice.`InvoiceId` = paramInvoiceId
    AND Invoice.`InvoiceType` = 'Statement'));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `IsPOHeaderDepartmentInUserDepartments` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `IsPOHeaderDepartmentInUserDepartments`(paramUserId char(36), paramPOHeaderId int) RETURNS tinyint(1)
BEGIN
  RETURN (EXISTS (SELECT
      *
    FROM POHeader
    WHERE POHeader.`POHeaderId` = paramPOHeaderId
    AND ((EXISTS (SELECT
        *
      FROM UserDepartment
      WHERE UserDepartment.UserId = paramUserId
      AND UserDepartment.`DepartmentId` = POHeader.`DepartmentId`))

    OR EXISTS (SELECT
        *
      FROM ApprovalStep
        INNER JOIN ApprovalSubStep
          ON ApprovalStep.`ApprovalStepId` = ApprovalSubStep.`ApprovalStepId`
        INNER JOIN ApprovalSubStepUser
          ON ApprovalSubStepUser.`ApprovalSubStepId` = `ApprovalSubStep`.`ApprovalSubStepId`
          AND ApprovalSubStepUser.`UserId` = paramUserId
        INNER JOIN ApprovalSubStepUserDepartment
          ON ApprovalSubStepUserDepartment.`ApprovalSubStepId` = ApprovalSubStep.`ApprovalSubStepId`
          AND ApprovalSubStepUserDepartment.`UserId` = ApprovalSubStepUser.`UserId`
        INNER JOIN POHeader
          ON `ApprovalSubStepUserDepartment`.`DepartmentId` = POHeader.`DepartmentId`
          AND POHeader.`POHeaderId` = paramPOHeaderId
      WHERE ApprovalStep.`ClientId` = POHeader.`ClientId`
      AND ApprovalStep.`WorkflowType` = 1))));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `PatIndex` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `PatIndex`(stringPattern varchar(250), target varchar(250)) RETURNS int
BEGIN
  RETURN POSITION(stringPattern IN target);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `SPLIT_STRING` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `SPLIT_STRING`(
	str VARCHAR(255) ,
	delim VARCHAR(12) ,
	pos INT
) RETURNS varchar(255) CHARSET utf8mb3
RETURN REPLACE(
	SUBSTRING(
		SUBSTRING_INDEX(str , delim , pos) ,
		CHAR_LENGTH(
			SUBSTRING_INDEX(str , delim , pos - 1)
		) + 1
	) ,
	delim ,
	''
) ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `TCASE` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `TCASE`(str text) RETURNS text CHARSET utf8mb3
    DETERMINISTIC
BEGIN
  DECLARE _result text DEFAULT '';
  DECLARE _space int DEFAULT 0;
  DECLARE last_space int DEFAULT 0;
  # handle NULL
  IF (str IS NULL) THEN
    RETURN NULL;
  END IF;
  # if 0 length string given
  IF (CHAR_LENGTH(str) = 0) THEN
    RETURN '';
  END IF;
  # upper case the first letter
  SET _result = UPPER(LEFT(str, 1));
  SET _space = LOCATE(' ', str);
  # loop through remaining spaces
  WHILE _space > 0 DO
    # add everything up to that space
    SET _result = CONCAT(_result, SUBSTRING(str, last_space + 2, _space - last_space - 1));
    # upper case the letter after the found space
    SET _result = CONCAT(_result, UPPER(SUBSTRING(str, _space + 1, 1)));
    # find next space
    SET last_space = _space;
    SET _space = LOCATE(' ', str, _space + 2);
  END WHILE;
  # add final section
  SET _result = CONCAT(_result, SUBSTRING(str, last_space + 2));
  RETURN _result;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `TruncateTime` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `TruncateTime`(dateValue datetime) RETURNS date
BEGIN
  RETURN DATE(dateValue);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `_x_AdvancedSearchFieldValuesDependency` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `_x_AdvancedSearchFieldValuesDependency`(
		Dependency 				MEDIUMTEXT,
		DependencyKeyValue 		varchar(100)
		) RETURNS varchar(1000) CHARSET utf8mb4 COLLATE utf8mb4_general_ci
BEGIN
	set Dependency = concat('■', Dependency, '■');
	set DependencyKeyValue = concat('■', DependencyKeyValue, '■');
	Set @DependencyKeyValueLocation = instr(Dependency, DependencyKeyValue);
	set @DependencyValue = null;
	if @DependencyKeyValueLocation > 0 THEN
		set Dependency 			= substring(Dependency, @DependencyKeyValueLocation + char_length(DependencyKeyValue), 9999);
		set @DependencyValue 	= substring_index(Dependency, '■', 1);
	end if;


	RETURN @DependencyValue;
	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `_x_GetInvoiceStatusName` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `_x_GetInvoiceStatusName`(ApprovalStatusId int) RETURNS varchar(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci
BEGIN

	IF ApprovalStatusId = 1 THEN
		RETURN 'Captured';
	END IF;
	IF ApprovalStatusId = 2 THEN
		RETURN 'Verified';
	END IF;
	IF ApprovalStatusId = 3 THEN
		RETURN 'InApproval';
	END IF;
	IF ApprovalStatusId = 4 THEN
		RETURN 'Approved';
	END IF;
	IF ApprovalStatusId = 5 THEN
		RETURN 'Accepted';
	END IF;
	IF ApprovalStatusId = 6 THEN
		RETURN 'Exception';
	END IF;
	IF ApprovalStatusId = 7 THEN
		RETURN 'Paid';
	END IF;
	IF ApprovalStatusId = 8 THEN
		RETURN 'Rejected';
	END IF;
	IF ApprovalStatusId = 9 THEN
		RETURN 'Failed';
	END IF;
	IF ApprovalStatusId = 10 THEN
		RETURN 'PaymentInitiated';
	END IF;
	IF ApprovalStatusId = 11 THEN
		RETURN 'FundRecieved';
	END IF;
	IF ApprovalStatusId = 12 THEN
		RETURN 'PaymentApproved';
	END IF;
	IF ApprovalStatusId = 13 THEN
		RETURN 'EFTSynced';
	END IF;
	IF ApprovalStatusId = 99 THEN
		RETURN 'POException';
	END IF;

	RETURN '';


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `_x_SPLIT_STRING` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` FUNCTION `_x_SPLIT_STRING`(str varchar(60000),
delim varchar(12),
pos int) RETURNS mediumtext CHARSET utf8mb4 COLLATE utf8mb4_general_ci
RETURN REPLACE(
	SUBSTRING(
	SUBSTRING_INDEX (str, delim, pos),
	CHAR_LENGTH(
	SUBSTRING_INDEX (str, delim, pos - 1)
	) + 1
	),
	delim,
	''
	) ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AddSplitAccounts` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `AddSplitAccounts`(IN sourceGL nvarchar(240), IN curGL nvarchar(240), IN perc double)
BEGIN
  IF EXISTS (SELECT
        *
      FROM GLCode
      WHERE ClientId = 72
      AND SourceGLCodeId IS NOT NULL
      AND Percentage IS NOT NULL
      AND (GLCodeName = curGL
      OR GLCodeName = CONCAT('*', curGL)
      OR GLCodeName = CONCAT('0', curGL)
      OR GLCodeName = CONCAT('*0', curGL))) THEN
    INSERT INTO GLCode (`ClientId`, `GLCodeId`, `GLCodeName`, `Desccription`, `ActivityRequired`, `SubAccount`, `IsProjectTypeRequred`, `IsSubProjectTypeRequired`, `ProjectType`, `SubProjectType`, `ClientCompanyId`, `IsActive`, `SourceGLCodeId`, `GLShortCode`, `LastActionDate`, `LastActionBy`, `ExternalId`, `GLCodeType`, `Percentage`)
      SELECT
        `ClientId`,
        (SELECT
            GLCodeId + 1
          FROM GLCode
          ORDER BY GLCodeId DESC LIMIT 1),
        `GLCodeName`,
        `Desccription`,
        `ActivityRequired`,
        `SubAccount`,
        `IsProjectTypeRequred`,
        `IsSubProjectTypeRequired`,
        `ProjectType`,
        `SubProjectType`,
        `ClientCompanyId`,
        `IsActive`,
        (SELECT
            GLCodeId
          FROM (SELECT
              GLCodeId
            FROM GLCode
            WHERE ClientId = 72
            AND GLCodeName = sourceGL
            GROUP BY GLCodeName) AS myTbl),
        `GLShortCode`,
        `LastActionDate`,
        `LastActionBy`,
        `ExternalId`,
        `GLCodeType`,
        perc
      FROM GLCode
      WHERE ClientId = 72
      AND SourceGLCodeId IS NOT NULL
      AND Percentage IS NOT NULL
      AND (GLCodeName = curGL
      OR GLCodeName = CONCAT('*', curGL)
      OR GLCodeName = CONCAT('0', curGL)
      OR GLCodeName = CONCAT('*0', curGL))
      ORDER BY GLCodeId DESC LIMIT 1;
  ELSE
    UPDATE GLCode
    SET GLCode.SourceGLCodeId = (SELECT
            GLCodeId
          FROM (SELECT
              GLCodeId
            FROM GLCode
            WHERE ClientId = 72
            AND GLCodeName = sourceGL
            GROUP BY GLCodeName) AS myTbl),
        Percentage = perc
    WHERE ClientId = 72
    AND (SourceGLCodeId IS NULL
    OR Percentage IS NULL)
    AND (GLCodeName = curGL
    OR GLCodeName = CONCAT('*', curGL)
    OR GLCodeName = CONCAT('0', curGL)
    OR GLCodeName = CONCAT('*0', curGL));
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AddUserReassignmentHistory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `AddUserReassignmentHistory`(IN newUserReassignmentHistoryId int, IN supportedWorkflowType int, IN clientId int)
BEGIN
  DECLARE AssignorUserId char(36) CHARSET utf8mb4 COLLATE utf8mb4_general_ci;
  DECLARE AssigneeUserId char(36) CHARSET utf8mb4 COLLATE utf8mb4_general_ci;
  DECLARE ReassignmentHistoryDate datetime;
  DECLARE CreatedByUserId char(36) CHARSET utf8mb4 COLLATE utf8mb4_general_ci;
  DECLARE AssignmentWorkflowType tinyint(4);
  DECLARE CreatedByFullName varchar(250) CHARSET utf8mb4 COLLATE utf8mb4_general_ci;
  DECLARE AssignorUserFullName varchar(250) CHARSET utf8mb4 COLLATE utf8mb4_general_ci;
  DECLARE AssigneeUserFullName varchar(250) CHARSET utf8mb4 COLLATE utf8mb4_general_ci;


  SELECT
    URAH.SourceUserId,
    URAH.TargetUserId,
    URAH.WorkflowType,
    URAH.CreatedDate,
    URAH.UserId,
    CONCAT(CBUser.LastName, ', ', CBUser.FirstName),
    CONCAT(ARUser.LastName, ', ', ARUser.FirstName),
    CONCAT(AEUser.LastName, ', ', AEUser.FirstName) INTO AssignorUserId, AssigneeUserId, AssignmentWorkflowType, ReassignmentHistoryDate, CreatedByUserId, CreatedByFullName, AssignorUserFullName, AssigneeUserFullName
  FROM UserReassignmentHistory URAH
    INNER JOIN `User` ARUser
      ON ARUser.UserId = URAH.SourceUserId
    INNER JOIN `User` AEUser
      ON AEUser.UserId = URAH.TargetUserId
    INNER JOIN `User` CBUser
      ON CBUser.UserId = URAH.UserId
  WHERE URAH.`ReassignUserHistoryId` = newUserReassignmentHistoryId;

  -- SET AssignorUserId = (SELECT URAH.SourceUserId FROM UserReassignmentHistory URAH WHERE URAH.`ReassignUserHistoryId` = newUserReassignmentHistoryId);
  -- SET AssigneeUserId = (SELECT URAH.TargetUserId FROM UserReassignmentHistory URAH WHERE URAH.`ReassignUserHistoryId` = newUserReassignmentHistoryId);
  -- SET AssignmentWorkflowType = (SELECT URAH.WorkflowType FROM UserReassignmentHistory URAH WHERE URAH.`ReassignUserHistoryId` = newUserReassignmentHistoryId);
  -- SET ReassignmentHistoryDate = (SELECT URAH.CreatedDate FROM UserReassignmentHistory URAH WHERE URAH.`ReassignUserHistoryId` = newUserReassignmentHistoryId);
  -- SET CreatedByUserId = (SELECT URAH.UserId FROM UserReassignmentHistory URAH WHERE URAH.`ReassignUserHistoryId` = newUserReassignmentHistoryId);





  DROP TEMPORARY TABLE IF EXISTS UserReassignmentHistoryWorkflowApprovalSubStepIds;
  CREATE TEMPORARY TABLE UserReassignmentHistoryWorkflowApprovalSubStepIds
  SELECT
    ApprovalSubStep.`ApprovalSubStepId`
  FROM ApprovalStep
    INNER JOIN ApprovalSubStep
      ON ApprovalStep.`ApprovalStepId` = ApprovalSubStep.`ApprovalStepId`
  WHERE ApprovalStep.`ClientId` = ClientId
  AND (AssignmentWorkflowType = 2
  OR ApprovalStep.`WorkflowType` = AssignmentWorkflowType);

  -- MOVE USER ROLES TO NEW USER
  INSERT INTO UserRoles (UserId, RoleId)
    SELECT
      AssigneeUserId,
      RoleId
    FROM UserRoles t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        RoleId,
        UserId
      FROM UserRoles t2
      WHERE t2.RoleId = t1.RoleId
      AND t2.UserId = AssigneeUserId);

  IF (AssignmentWorkflowType = supportedWorkflowType) THEN
    DELETE
      FROM UserRoles
    WHERE UserId = AssignorUserId;
  END IF;
  -- END OF MOVE USER ROLES

  -- MOVE APPROVER GLCODE
  INSERT INTO ApproverGLCode (UserId, GLCodeId)
    SELECT
      AssigneeUserId,
      GLCodeId
    FROM ApproverGLCode t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        GLCodeId,
        UserId
      FROM ApproverGLCode t2
      WHERE t2.GLCodeId = t1.GLCodeId
      AND t2.UserId = AssigneeUserId);

  IF (AssignmentWorkflowType = supportedWorkflowType) THEN
    DELETE
      FROM ApproverGLCode
    WHERE UserId = AssignorUserId;
  END IF;
  -- END OF MOVE APPROVER GLCODES

  -- MOVE USER DEPARTMENT
  INSERT INTO UserDepartment (UserId, DepartmentId, IsHomeDepartment)
    SELECT
      AssigneeUserId,
      DepartmentId,
      IsHomeDepartment
    FROM UserDepartment t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        DepartmentId
      FROM UserDepartment t2
      WHERE t2.DepartmentId = t1.DepartmentId
      AND t2.UserId = AssigneeUserId);

  IF (AssignmentWorkflowType = supportedWorkflowType) THEN
    DELETE
      FROM UserDepartment
    WHERE UserId = AssignorUserId;
  END IF;
  -- END OF MOVE USER DEPARTMENT	


  -- MOVE USER CLIENT COMPANIES
  INSERT INTO UserClientCompanies (UserId, ClientCompanyId)
    SELECT
      AssigneeUserId,
      ClientCompanyId
    FROM UserClientCompanies t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        ClientCompanyId
      FROM UserClientCompanies t2
      WHERE t2.ClientCompanyId = t1.ClientCompanyId
      AND t2.UserId = AssigneeUserId);

  IF (AssignmentWorkflowType = supportedWorkflowType) THEN
    DELETE
      FROM UserClientCompanies
    WHERE UserId = AssignorUserId;
  END IF;
  -- END OF MOVE USER CLIENT COMPANIES

  -- Select 'Top';
  -- MOVE CATCHALL SUB STEPS
  INSERT INTO ApprovalSubStepCatchAllUsers (UserId, ApprovalSubStepId, Alphabets, PickupFolderName)
    SELECT
      AssigneeUserId,
      ApprovalSubStepId,
      Alphabets,
      PickupFolderName
    FROM ApprovalSubStepCatchAllUsers t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        ApprovalSubStepCatchAllUserId,
        ApprovalSubStepId
      FROM ApprovalSubStepCatchAllUsers t2
      WHERE t2.ApprovalSubStepCatchAllUserId = t1.ApprovalSubStepCatchAllUserId
      AND t2.ApprovalSubStepId = t1.ApprovalSubStepId
      AND t2.UserId = AssigneeUserId)
    AND t1.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);

  DELETE
    FROM ApprovalSubStepCatchAllUsers
  WHERE UserId = AssignorUserId
    AND `ApprovalSubStepCatchAllUsers`.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);
  -- END OF MOVE CATCHALL SUB STEPS

  -- MOVE SUBSTEPUSER
  INSERT INTO ApprovalSubStepUser (UserId, ApprovalSubStepId, ManualAssignmentOnly, CompareByFilterIntersection)
    SELECT
      AssigneeUserId,
      ApprovalSubStepId,
      ManualAssignmentOnly,
      CompareByFilterIntersection
    FROM ApprovalSubStepUser t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        ApprovalSubStepId
      FROM ApprovalSubStepUser t2
      WHERE t2.ApprovalSubStepId = t1.ApprovalSubStepId
      AND t2.UserId = AssigneeUserId)
    AND t1.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);
  -- END MOVE SUBSTEPUSER

  -- MOVE APPROVALSUBSTEPUSERDEPARTMENT
  INSERT INTO ApprovalSubStepUserDepartment (UserId, ApprovalSubStepId, DepartmentId)
    SELECT
      AssigneeUserId,
      ApprovalSubStepId,
      DepartmentId
    FROM ApprovalSubStepUserDepartment t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        ApprovalSubStepId,
        DepartmentId
      FROM ApprovalSubStepUserDepartment t2
      WHERE t2.ApprovalSubStepId = t1.ApprovalSubStepId
      AND t2.DepartmentId = t1.DepartmentId
      AND t2.UserId = AssigneeUserId)
    AND t1.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);

  DELETE
    FROM ApprovalSubStepUserDepartment
  WHERE UserId = AssignorUserId
    AND `ApprovalSubStepUserDepartment`.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);
  -- END MOVE APPROVALSUBSTEPUSERDEPARTMENT


  -- MOVE APPROVALSUBSTEPUSERGL
  INSERT INTO ApprovalSubStepUserGL (UserId, ApprovalSubStepId, GLCodeId)
    SELECT
      AssigneeUserId,
      ApprovalSubStepId,
      GLCodeId
    FROM ApprovalSubStepUserGL t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        ApprovalSubStepId,
        GLCodeId
      FROM ApprovalSubStepUserGL t2
      WHERE t2.ApprovalSubStepId = t1.ApprovalSubStepId
      AND t2.GLCodeId = t1.GLCodeId
      AND t2.UserId = AssigneeUserId)
    AND t1.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);

  DELETE
    FROM ApprovalSubStepUserGL
  WHERE UserId = AssignorUserId
    AND ApprovalSubStepUserGL.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);
  -- END OF MOVE APPROVALSUBSTEPUSERGL

  -- MOVE APPROVALSUBSTEPUSERORGDATA
  INSERT INTO `ApprovalSubStepUserOrgData` (UserId, ApprovalSubStepId, OrgId)
    SELECT
      AssigneeUserId,
      ApprovalSubStepId,
      OrgId
    FROM ApprovalSubStepUserOrgData t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        ApprovalSubStepId,
        OrgId
      FROM ApprovalSubStepUserOrgData t2
      WHERE t2.ApprovalSubStepId = t1.ApprovalSubStepId
      AND t2.OrgId = t1.OrgId
      AND t2.UserId = AssigneeUserId)
    AND t1.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);

  DELETE
    FROM ApprovalSubStepUserOrgData
  WHERE UserId = AssignorUserId
    AND ApprovalSubStepUserOrgData.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);
  -- END OF MOVE APPROVALSUBSTEPUSERORGDATA

  -- MOVE APPROVALSUBSTEPUSERPROJECT
  INSERT INTO ApprovalSubStepUserProject (UserId, ApprovalSubStepId, ProjectTypeId)
    SELECT
      AssigneeUserId,
      ApprovalSubStepId,
      ProjectTypeId
    FROM ApprovalSubStepUserProject t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        ApprovalSubStepId,
        ProjectTypeId
      FROM ApprovalSubStepUserProject t2
      WHERE t2.ApprovalSubStepId = t1.ApprovalSubStepId
      AND t2.ProjectTypeId = t1.ProjectTypeId
      AND t2.UserId = AssigneeUserId)
    AND t1.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);

  DELETE
    FROM ApprovalSubStepUserProject
  WHERE UserId = AssignorUserId
    AND ApprovalSubStepUserProject.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);
  -- END OF MOVE APPROVALSUBSTEPUSERPROJECT


  -- MOVE APPROVALSUBSTEPUSERVENDOR
  INSERT INTO ApprovalSubStepUserVendor (UserId, VendorId, ApprovalSubStepId, FirstEscalationManagerId, SecondEscalationManagerId, ThirdEscalationManagerId, Duration)
    SELECT
      AssigneeUserId,
      VendorId,
      ApprovalSubStepId,
      FirstEscalationManagerId,
      SecondEscalationManagerId,
      ThirdEscalationManagerId,
      Duration
    FROM ApprovalSubStepUserVendor t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        VendorId,
        ApprovalSubStepId
      FROM ApprovalSubStepUserVendor t2
      WHERE t2.VendorId = t1.VendorId
      AND t2.ApprovalSubStepId = t1.ApprovalSubStepId
      AND t2.UserId = AssigneeUserId)
    AND t1.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);


  DELETE
    FROM ApprovalSubStepUserVendor
  WHERE UserId = AssignorUserId
    AND ApprovalSubStepUserVendor.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);

  -- END OF MOVE APPROVALSUBSTEPUSERVENDOR	

  -- MOVE APPROVALSUBSTEPUSERVENDORACCOUNTNUMBER
  INSERT INTO `ApprovalSubStepUserVendorAccountNumber` (UserId, VendorId, AccountNumber, ApprovalSubStepId, FirstEscalationManagerId, SecondEscalationManagerId, ThirdEscalationManagerId, Duration)
    SELECT
      AssigneeUserId,
      VendorId,
      AccountNumber,
      ApprovalSubStepId,
      FirstEscalationManagerId,
      SecondEscalationManagerId,
      ThirdEscalationManagerId,
      Duration
    FROM `ApprovalSubStepUserVendorAccountNumber` t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        VendorId,
        AccountNumber,
        ApprovalSubStepId
      FROM `ApprovalSubStepUserVendorAccountNumber` t2
      WHERE t2.VendorId = t1.VendorId
      AND t2.ApprovalSubStepId = t1.ApprovalSubStepId
      AND t2.AccountNumber = t1.AccountNumber
      AND t2.UserId = AssigneeUserId)
    AND t1.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);

  DELETE
    FROM ApprovalSubStepUserVendorAccountNumber
  WHERE UserId = AssignorUserId
    AND ApprovalSubStepUserVendorAccountNumber.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);
  -- END OF MOVE APPROVALSUBSTEPUSERVENDORACCOUNTNUMBER

  -- MOVE APPROVALSUBSTEPUSERVENDORALPHABET
  INSERT INTO `ApprovalSubStepUserVendorAlphabet` (UserId, ApprovalSubStepId, Alphabets)
    SELECT
      AssigneeUserId,
      ApprovalSubStepId,
      Alphabets
    FROM `ApprovalSubStepUserVendorAlphabet` t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        ApprovalSubStepId
      FROM `ApprovalSubStepUserVendorAlphabet` t2
      WHERE t2.ApprovalSubStepId = t1.ApprovalSubStepId
      AND t2.UserId = AssigneeUserId)
    AND t1.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);

  DELETE
    FROM ApprovalSubStepUserVendorAlphabet
  WHERE UserId = AssignorUserId
    AND ApprovalSubStepUserVendorAlphabet.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);
  -- END OF MOVE APPROVALSUBSTEPUSERVENDORALPHABET

  -- MOVE APPROVALSUBSTEPUSERVENDORDEPARTMENT
  INSERT INTO `ApprovalSubStepUserVendorDepartment` (UserId, VendorId, DepartmentId, ApprovalSubStepId, FirstEscalationManagerId, SecondEscalationManagerId, ThirdEscalationManagerId, Duration)
    SELECT
      AssigneeUserId,
      VendorId,
      DepartmentId,
      ApprovalSubStepId,
      FirstEscalationManagerId,
      SecondEscalationManagerId,
      ThirdEscalationManagerId,
      Duration
    FROM `ApprovalSubStepUserVendorDepartment` t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        VendorId,
        DepartmentId,
        ApprovalSubStepId
      FROM `ApprovalSubStepUserVendorDepartment` t2
      WHERE t2.VendorId = t1.VendorId
      AND t2.ApprovalSubStepId = t1.ApprovalSubStepId
      AND t2.DepartmentId = t1.DepartmentId
      AND t2.UserId = AssigneeUserId)
    AND t1.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);

  DELETE
    FROM ApprovalSubStepUserVendorDepartment
  WHERE UserId = AssignorUserId
    AND ApprovalSubStepUserVendorDepartment.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);
  -- END MOVE APPROVALSUBSTEPUSERVENDORDEPARTMENT

  -- MOVE APPROVALSUBSTEPUSERVENDORGL
  INSERT INTO `ApprovalSubStepUserVendorGL` (UserId, VendorId, GLCodeId, ApprovalSubStepId, FirstEscalationManagerId, SecondEscalationManagerId, ThirdEscalationManagerId, Duration)
    SELECT
      AssigneeUserId,
      VendorId,
      GLCodeId,
      ApprovalSubStepId,
      FirstEscalationManagerId,
      SecondEscalationManagerId,
      ThirdEscalationManagerId,
      Duration
    FROM `ApprovalSubStepUserVendorGL` t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        VendorId,
        GLCodeId,
        ApprovalSubStepId
      FROM `ApprovalSubStepUserVendorGL` t2
      WHERE t2.VendorId = t1.VendorId
      AND t2.ApprovalSubStepId = t1.ApprovalSubStepId
      AND t2.GLCodeId = t1.GLCodeId
      AND t2.UserId = AssigneeUserId)
    AND t1.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);

  DELETE
    FROM ApprovalSubStepUserVendorGL
  WHERE UserId = AssignorUserId
    AND ApprovalSubStepUserVendorGL.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);
  -- END OF MOVE APPROVALSUBSTEPUSERVENDORGL	

  -- MOVE APPROVALSUBSTEPUSERVENDORORGDATA
  INSERT INTO `ApprovalSubStepUserVendorOrgData` (UserId, VendorId, OrgId, ApprovalSubStepId)
    SELECT
      AssigneeUserId,
      VendorId,
      OrgId,
      ApprovalSubStepId
    FROM `ApprovalSubStepUserVendorOrgData` t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        VendorId,
        OrgId,
        ApprovalSubStepId
      FROM `ApprovalSubStepUserVendorOrgData` t2
      WHERE t2.VendorId = t1.VendorId
      AND t2.ApprovalSubStepId = t1.ApprovalSubStepId
      AND t2.OrgId = t1.OrgId
      AND t2.UserId = AssigneeUserId)
    AND t1.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);

  DELETE
    FROM ApprovalSubStepUserVendorOrgData
  WHERE UserId = AssignorUserId
    AND ApprovalSubStepUserVendorOrgData.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);
  -- END OF MOVE APPROVALSUBSTEPUSERVENDORORGDATA	


  -- START OF REMOVE APPROVALSUBSTEPUSER

  DELETE
    FROM ApprovalSubStepUser
  WHERE UserId = AssignorUserId
    AND `ApprovalSubStepUser`.`ApprovalSubStepId` IN (SELECT
        *
      FROM UserReassignmentHistoryWorkflowApprovalSubStepIds);

  -- END OF REMOVE

  -- MOVE APPROVALWORKFLOW
  INSERT INTO `ApprovalWorkFlow` (UserId, VendorId, Title, ExceptionHandlerId, CurrentLevelUserId, FirstEscalationManagerId, SeondEscalationManagerId, ThirdEscalationManagerId, Duration, `Type`)
    SELECT
      AssigneeUserId,
      VendorId,
      Title,
      ExceptionHandlerId,
      CurrentLevelUserId,
      FirstEscalationManagerId,
      SeondEscalationManagerId,
      ThirdEscalationManagerId,
      Duration,
      `Type`
    FROM `ApprovalWorkFlow` t1
    WHERE UserId = AssignorUserId
    AND NOT EXISTS (SELECT
        UserId,
        VendorId
      FROM `ApprovalWorkFlow` t2
      WHERE t2.VendorId = t1.VendorId
      AND t2.UserId = AssigneeUserId);

  IF (AssignmentWorkflowType = 0
    OR AssignmentWorkflowType = 2) THEN
    DELETE
      FROM ApprovalWorkFlow
    WHERE UserId = AssignorUserId;
  END IF;
  -- END OF MOVE APPROVALWORKFLOW


  -- MOVE APPROVER BY AMOUNT
  -- delete any existing approver by amount from the assignee before reassigning
  -- DELETE FROM `ApproverByAmount` WHERE UserId = AssigneeUserId;

  -- FIRST APPROVER
  INSERT INTO `ApproverByAmount` (UserId, VendorId, MaximumAllowedAmount, SecondApproverId, AuthCode, IsPOIsNoPOIsBoth, WorkflowType, CostCenters)
    SELECT
      AssigneeUserId,
      VendorId,
      MaximumAllowedAmount,
      SecondApproverId,
      AuthCode,
      IsPOIsNoPOIsBoth,
      WorkflowType,
      CostCenters
    FROM `ApproverByAmount` t1
    WHERE UserId = AssignorUserId
    AND (AssignmentWorkflowType = 2
    OR t1.WorkflowType = AssignmentWorkflowType)
    AND NOT EXISTS (SELECT
        UserId,
        VendorId
      FROM `ApproverByAmount` t2
      WHERE t2.VendorId = t1.VendorId
      AND t2.CostCenters = t1.CostCenters
      AND t2.UserId = AssigneeUserId
      AND t2.WorkflowType = t1.WorkflowType);

  -- SECOND APPROVER
  INSERT INTO `ApproverByAmount` (UserId, VendorId, MaximumAllowedAmount, SecondApproverId, AuthCode, IsPOIsNoPOIsBoth, WorkflowType, CostCenters)
    SELECT
      UserId,
      VendorId,
      MaximumAllowedAmount,
      AssigneeUserId,
      AuthCode,
      IsPOIsNoPOIsBoth,
      WorkflowType,
      CostCenters
    FROM `ApproverByAmount` t1
    WHERE SecondApproverId = AssignorUserId
    AND (AssignmentWorkflowType = 2
    OR t1.WorkflowType = AssignmentWorkflowType)
    AND NOT EXISTS (SELECT
        UserId,
        VendorId
      FROM `ApproverByAmount` t2
      WHERE t2.VendorId = t1.VendorId
      AND t2.CostCenters = t1.CostCenters
      AND t2.SecondApproverId = AssigneeUserId
      AND t2.WorkflowType = t1.WorkflowType);

  DELETE
    FROM ApproverByAmount
  WHERE (UserId = AssignorUserId
    OR SecondApproverId = AssignorUserId)
    AND (AssignmentWorkflowType = 2
    OR ApproverByAmount.WorkflowType = AssignmentWorkflowType);
  -- END OF MOVE APPROVER BY AMOUNT


  IF (AssignmentWorkflowType = 0
    OR AssignmentWorkflowType = 2) THEN
    -- ADD Reassignment History

    INSERT INTO InvoiceHistory (InvoiceId, Actor, `Action`, ActionDate, PreviousData, NewData, `Field`, ActorId)
      SELECT
        t1.InvoiceId,
        CreatedByFullName,
        'Premanent Reassignment',
        ReassignmentHistoryDate,
        AssignorUserFullName,
        AssigneeUserFullName,
        'Approver',
        CreatedByUserId
      FROM `UserInvoiceAssignment` t1
        INNER JOIN Invoice
          ON t1.`InvoiceId` = Invoice.`InvoiceId`
      WHERE t1.UserId = AssignorUserId
      AND NOT EXISTS (SELECT
          UserId,
          InvoiceId
        FROM `UserInvoiceAssignment` t2
        WHERE t2.InvoiceId = t1.InvoiceId
        AND t2.UserId = AssigneeUserId)
      AND Invoice.`ApprovalStatusId` IN (3, 6);

    -- END OF ADD REASSIGNMENT HISTORY

    -- MOVE USERINVOICEASSIGNMENT
    INSERT INTO `UserInvoiceAssignment` (UserId, InvoiceId, `Type`, State, ApprovalSubStepId, HoldStartDate, HoldEndDate, DateCreated, AssignBackToUserId)
      SELECT
        AssigneeUserId,
        t1.InvoiceId,
        `Type`,
        State,
        ApprovalSubStepId,
        HoldStartDate,
        HoldEndDate,
        DateCreated,
        AssignBackToUserId
      FROM `UserInvoiceAssignment` t1
        INNER JOIN Invoice
          ON t1.`InvoiceId` = Invoice.`InvoiceId`
      WHERE t1.UserId = AssignorUserId
      AND NOT EXISTS (SELECT
          UserId,
          InvoiceId
        FROM `UserInvoiceAssignment` t2
        WHERE t2.InvoiceId = t1.InvoiceId
        AND t2.UserId = AssigneeUserId)
      AND Invoice.`ApprovalStatusId` IN (3, 6);

    UPDATE `UserInvoiceAssignment`
    SET AssignBackTouserId = AssigneeUserId
    WHERE AssignBackToUserId = AssignorUserId;

    DELETE
      FROM UserInvoiceAssignment
    WHERE UserId = AssignorUserId;
  -- END OF MOVE USERINVOICEASSIGNMENT
  END IF;

  IF (AssignmentWorkflowType = 1
    OR AssignmentWorkflowType = 2) THEN

    -- ADD Reassignment History

    INSERT INTO POHeaderHistory (POHeaderId, Actor, `Action`, ActionDate, PreviousData, NewData, `Field`, ActorId)
      SELECT
        t1.POHeaderId,
        CreatedByFullName,
        'Premanent Reassignment',
        ReassignmentHistoryDate,
        AssignorUserFullName,
        AssigneeUserFullName,
        'Approver',
        CreatedByUserId
      FROM `UserPOAssignment` t1
        INNER JOIN POHeader
          ON t1.POHeaderId = POHeader.`POHeaderId`
      WHERE t1.UserId = AssignorUserId
      AND NOT EXISTS (SELECT
          UserId,
          POHeaderId
        FROM `UserPOAssignment` t2
        WHERE t2.POHeaderId = t1.POHeaderId
        AND t2.UserId = AssigneeUserId)
      AND POHeader.`POStatus` IN (2, 9);

    -- END OF ADD REASSIGNMENT HISTORY

    -- MOVE USERPOASSIGNMENT
    INSERT INTO `UserPOAssignment` (UserId, POHeaderId, `Type`, State, ApprovalSubStepId, HoldStartDate, HoldEndDate, DateCreated, DelegationFromDate, DelegationToDate, DelegateUntil)
      SELECT
        AssigneeUserId,
        t1.POHeaderId,
        `Type`,
        State,
        ApprovalSubStepId,
        HoldStartDate,
        HoldEndDate,
        DateCreated,
        DelegationFromDate,
        DelegationToDate,
        DelegateUntil
      FROM `UserPOAssignment` t1
        INNER JOIN POHeader
          ON t1.POHeaderId = POHeader.`POHeaderId`
      WHERE t1.UserId = AssignorUserId
      AND NOT EXISTS (SELECT
          UserId,
          `POHeaderId`
        FROM `UserPOAssignment` t2
        WHERE t2.POHeaderId = t1.POHeaderId
        AND t2.UserId = AssigneeUserId)
      AND POHeader.`POStatus` IN (2, 9);

    DELETE
      FROM UserPOAssignment
    WHERE UserId = AssignorUserId;
    -- END OF MOVE USERINVOICEASSIGNMENT


    -- ADD Reassignment History (Change Created By)

    INSERT INTO POHeaderHistory (POHeaderId, Actor, `Action`, ActionDate, PreviousData, NewData, `Field`, ActorId)
      SELECT
        POHeader.POHeaderId,
        CreatedByFullName,
        'Premanent Reassignment',
        ReassignmentHistoryDate,
        AssignorUserFullName,
        AssigneeUserFullName,
        'Created By',
        CreatedByUserId
      FROM POHeader
      WHERE POHeader.`UserId` = AssignorUserId
      AND POHeader.`POStatus` IN (2, 4);

    -- END OF ADD REASSIGNMENT HISTORY (Change Created By)

    UPDATE POHeader
    SET POHeader.`UserId` = AssigneeUserId
    WHERE POHeader.`UserId` = AssignorUserId
    AND POHeader.`POStatus` IN (2, 4);

  END IF;

  DROP TEMPORARY TABLE UserReassignmentHistoryWorkflowApprovalSubStepIds;

  SELECT
    TRUE;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AdvancedSearchHoldInvoice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `AdvancedSearchHoldInvoice`(IN clientId INT,
IN userId CHAR(36),
IN assignorUserId CHAR(36),
IN isPausedFiltered BIT,
IN invoiceId INT,
IN scannedDateFrom DATE,
IN scannedDateTo DATE,
IN invoiceDateFrom DATE,
IN invoiceDateTo DATE,
IN paymentDueDateFrom DATE,
IN paymentDueDateTo DATE,
IN approvedDateFrom DATE,
IN approvedDateTo DATE,
IN rejectedDateFrom DATE,
IN rejectedDateTo DATE,
IN lastActionDateFrom DATE,
IN lastActionDateTo DATE,
IN invoiceNo VARCHAR(255),
IN voucherNumber VARCHAR(255),
IN accountCode VARCHAR(255),
IN FilterByApprover BIT,
IN searchMyInvoice BIT,
IN approverIds CHAR(255),
IN vendor VARCHAR(255),
IN currency VARCHAR(255),
IN currencies VARCHAR(255),
IN invoiceTotalFrom DECIMAL(18, 2),
IN invoiceTotalTo DECIMAL(18, 2),
IN taxFrom DECIMAL(18, 2),
IN taxTo DECIMAL(18, 2),
IN project VARCHAR(255),
IN projects VARCHAR(255),
IN companies CHAR(255),
IN department VARCHAR(255),
IN departments VARCHAR(255),
IN poNo VARCHAR(255),
IN checkNo VARCHAR(255),
IN paymentmethod VARCHAR(255),
IN paymentspec VARCHAR(255),
IN vendbank VARCHAR(255),
IN filterbyGLContent BIT,
IN glCode VARCHAR(255),
IN glprojectType VARCHAR(255),
IN gldescription VARCHAR(255),
IN companyCode VARCHAR(255),
IN isPOInvoice BIT,
IN isFactoryVendor BIT,
IN customerName VARCHAR(255),
IN TransactionIdentifer VARCHAR(255),
IN CheckDate DATE,
IN customerAddress VARCHAR(255),
IN capitalProjectNo VARCHAR(255),
IN paymentTypes VARCHAR(255),
IN groupCode VARCHAR(255),
IN coilNo VARCHAR(255),
IN isAutoApproved BIT,
IN tranIdentifier VARCHAR(255), -- transactionIdentifier
IN isExpiredPayment BIT,
IN paymentDateFrom DATE,
IN paymentDateTo DATE,
IN netTermDateFrom DATE,
IN netTermDateTo DATE,
IN invoiceStatuses VARCHAR(255),
IN assignedTos VARCHAR(255),
IN restrictToUser BIT,
IN locations VARCHAR(255),
IN isHoldInvoice BIT,
IN isFilterViewForSupervisorByDepartmentEnabled BIT,
IN invoiceTypes VARCHAR(255),
IN userClientCompanyCodes VARCHAR(255),
IN isUserAdministrator BIT,
IN isFilterByDepartmentEnabled BIT,
IN isConfidential BIT,
IN searchInvoiceArgument1FieldasWhole BIT,
IN userField1 VARCHAR(255),
IN userField2 VARCHAR(255),
IN userField3 VARCHAR(255),
IN userField4 VARCHAR(255),
IN userField5 VARCHAR(255),
IN userField6 VARCHAR(255),
IN userField7 VARCHAR(255),
IN userField8 VARCHAR(255),
IN userField9 VARCHAR(255),
IN userField10 VARCHAR(255),
IN wholeArgs VARCHAR(255),
IN lineItemDescription VARCHAR(255),
IN vendorSite VARCHAR(255),
IN deliveryNumber VARCHAR(255),
IN checkDateFrom DATE,
IN checkDateTo DATE,
IN invoiceSources VARCHAR(255),
IN invoiceSender VARCHAR(255),
IN jpyToUSD DOUBLE,
IN cadToUSD DOUBLE,
IN rmbToUSD DOUBLE,
IN filterOneTimeVendor VARCHAR(255),
IN showGLDesciriptionForExportEnabled BIT,
IN isUrgentInvoice BIT,
IN orgIdentifier VARCHAR(255),
IN descriptions VARCHAR(255))
BEGIN
  SET @negativeCurrency = "-1";
  SET @usdEquivalent = 0;
  SET @emptyUUID = '00000000-0000-0000-0000-000000000000';
  SET @likeStartParamForGL = (CASE WHEN filterbyGLContent = FALSE THEN '' ELSE '%' END);
  SELECT
    i.InvoiceId,
    v.PaymentMethod,
    v.PaymentSpec,
    v.VendBankId,
    i.InvoiceNo,
    i.VoucherNumber,
    v.VendorId,
    v.VendorName,
    v.VendorNo,
    v.IsConfidential AS IsConfidential_v,
    i.IsConfidential AS IsConfidential_i,
    i.PONumber,
    i.CompanyCode,
    i.ScannedDate,
    i.InvoiceDate,
    i.PaymentDueDate,
    i.RejectedDate,
    i.NetTermDate,
    i.InvoiceTotal,
    i.ApprovalStatusId,
    ist.StateName AS InvoiceStatusName,
    i.InvoiceType,
    UserField3,
    UserField4,
    od.OrgName AS Division,
    i.LastActionBy,
    i.LastActionDate,
    i.CheckNumber,
    i.Description,
    CONCAT(approver.LastName, ', ', approver.FirstName) AS ApprovedBy,
    i.AprovedDate,
    i.ApproverId,
    -- TransactionIdentifier FROM PaymentStatus -- QUESTION OUT??
    i.DeliveryNumber,
    b.Source AS InvoiceSource,
    GetAssignedTosString(i.InvoiceId) AS AssignedTo,
    (SELECT
        uia.DateCreated
      FROM UserInvoiceAssignment uia
      WHERE uia.InvoiceId = i.InvoiceId LIMIT 1) AS AssignedDate,
    GetInvoiceComment(i.InvoiceId, i.IsPaused) AS `Comment`,
    (SELECT
        lid.POType
      FROM LineItemDetail lid
      WHERE lid.InvoiceId = i.InvoiceId LIMIT 1) AS POType,
    i.Currency,
    @usdEquivalent AS USDEquvalent,
    -- USDEquvalent = calculated on Code internal
    d.DepartmentName AS Department,
    GetGLNumbersFromApprovalHistory(i.InvoiceId) AS GLNumber,
    -- " " as GLDescription,
    (CASE WHEN showGLDesciriptionForExportEnabled = FALSE THEN " " ELSE GetGLDescriptionsFromApprovalHistory(i.InvoiceId) END) AS GLDescription,
    (SELECT
        GROUP_CONCAT(DISTINCT org.OrgId SEPARATOR ',') AS OrgId
      FROM ApprovalHistory ah
      USE INDEX (IX_InvoiceId, OrgId)
        INNER JOIN OrgData org
          ON ah.OrgId = org.Id
      WHERE ah.InvoiceId = invoiceId
      GROUP BY NULL) AS Location,
    b.Sender AS InvoiceSender, -- This needs to be verified
    i.TransactionIdentifer, -- check with the above txn identifier - related with payment status
    i.ArchiveReason,
    i.CheckDate,
    i.AccountCode,
    i.SubCategoryType,
    GetProjectNamesFromApprovalHistory(i.InvoiceId, i.IsPOInvoice) AS ProjectType,
    i.VoucherNumber,
    i.UserField6,
    GetBuyerNameNew(i.InvoiceId) AS BuyerName,
    v.UserField1 AS IsUrgentInvoice,
    CASE WHEN ih.Action = 'hold' THEN ih.Actor ELSE '' END AS InvoiceHolder,
    CASE WHEN ih.Action = 'hold' THEN ih.ActionDate ELSE NULL END AS ActionDate,
    CASE WHEN ih.Action = 'hold' THEN ih.NewData ELSE '' END AS HoldDate
  FROM Invoice i
    LEFT OUTER JOIN InvoiceHistory ih
      ON i.InvoiceId = ih.InvoiceId
    LEFT OUTER JOIN InvoiceStatus ist
      ON i.ApprovalStatusId = ist.StateId
    LEFT OUTER JOIN Batch b
      ON i.BatchID = b.ID
    LEFT OUTER JOIN Vendor v
      ON i.VendorId = v.VendorId
    LEFT OUTER JOIN Department d
      ON i.VendorSiteId = d.Id
    LEFT OUTER JOIN ProjectType p
      ON i.ProjectTypeId = p.Id
    LEFT OUTER JOIN CustomerLocation cl
      ON i.CustomerLocationId = cl.CustomerLocationId
    LEFT OUTER JOIN Customer c
      ON cl.CustomerId = c.CustomerId
    LEFT OUTER JOIN Address ca
      ON cl.AddressId = ca.AddressId
    LEFT OUTER JOIN OrgData od
      ON i.OrgId = od.Id
    LEFT OUTER JOIN `User` AS approver
      ON i.ApproverId = approver.UserId

  WHERE i.ClientId = clientId
  AND i.IsDeleted = 0
  AND (isHoldInvoice IS NULL
  OR (isHoldInvoice = TRUE
  AND ih.Action = 'hold')
  OR isHoldInvoice = FALSE)
  AND (isPausedFiltered IS NULL
  OR i.IsPaused = isPausedFiltered)
  AND (orgIdentifier IS NULL
  OR orgIdentifier = ''
  OR i.OrgId = orgIdentifier)
  AND (invoiceId IS NULL
  OR i.InvoiceId = invoiceId)
  AND (scannedDateFrom IS NULL
  OR i.ScannedDate >= scannedDateFrom)
  AND (scannedDateTo IS NULL
  OR i.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
  AND (invoiceDateFrom IS NULL
  OR i.InvoiceDate >= invoiceDateFrom)
  AND (invoiceDateTo IS NULL
  OR i.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))
  AND (paymentDueDateFrom IS NULL
  OR i.PaymentDueDate >= paymentDueDateFrom)
  AND (paymentDueDateTo IS NULL
  OR i.PaymentDueDate < DATE_ADD(paymentDueDateTo, INTERVAL 1 DAY))
  AND (approvedDateFrom IS NULL
  OR i.AprovedDate >= approvedDateFrom)
  AND (approvedDateTo IS NULL
  OR i.AprovedDate < DATE_ADD(approvedDateTo, INTERVAL 1 DAY))
  AND (rejectedDateFrom IS NULL
  OR i.RejectedDate >= rejectedDateFrom)
  AND (rejectedDateTo IS NULL
  OR i.RejectedDate < DATE_ADD(rejectedDateTo, INTERVAL 1 DAY))
  AND (lastActionDateFrom IS NULL
  OR i.LastActionDate >= lastActionDateFrom)
  AND (lastActionDateTo IS NULL
  OR i.LastActionDate < DATE_ADD(lastActionDateTo, INTERVAL 1 DAY))
  AND (invoiceNo IS NULL
  OR invoiceNo = ''
  OR i.InvoiceNo LIKE CONCAT('', invoiceNo, '%'))
  AND (descriptions IS NULL
  OR descriptions = ''
  OR i.Description LIKE CONCAT('', descriptions, '%'))
  AND (voucherNumber IS NULL
  OR voucherNumber = ''
  OR i.VoucherNumber LIKE CONCAT('', voucherNumber, '%'))
  AND (accountCode IS NULL
  OR accountCode = ''
  OR i.AccountCode LIKE CONCAT('', accountCode, '%'))
  AND (FilterByApprover = FALSE
  OR (i.ApproverId = userId
  OR i.ApproverId = assignorUserId))
  AND (searchMyInvoice = FALSE
  OR i.ApproverId = userId)
  AND (isUrgentInvoice = FALSE
  OR (isUrgentInvoice = TRUE
  AND v.UserField1 = 'True'))
  AND ((approverIds IS NULL
  OR approverIds = '')
  OR (i.ApproverId IS NOT NULL
  AND FIND_IN_SET(i.ApproverId, approverIds))
  OR EXISTS (SELECT
      *
    FROM UserInvoiceAssignment uia
    WHERE uia.InvoiceId = i.InvoiceId
    AND FIND_IN_SET(uia.UserId, approverIds))
  OR EXISTS (SELECT
      *
    FROM UserInvoiceAssignmentHistory uiah
    WHERE uiah.InvoiceId = i.InvoiceId
    AND uiah.FromApprovalSubStepUserId IS NOT NULL
    AND FIND_IN_SET(uiah.FromApprovalSubStepUserId, approverIds))
  OR EXISTS (SELECT
      *
    FROM UserInvoiceAssignmentHistory uiah
    WHERE uiah.InvoiceId = i.InvoiceId
    AND uiah.ToApprovalSubStepUserId IS NOT NULL
    AND FIND_IN_SET(uiah.ToApprovalSubStepUserId, approverIds)))
  AND (vendor IS NULL
  OR vendor = ''
  OR v.VendorName LIKE CONCAT('', vendor, '%')
  OR v.VendorNo LIKE CONCAT('', vendor, '%'))
  AND ((currencies IS NULL
  OR currencies = '')
  OR (i.Currency IS NOT NULL
  AND FIND_IN_SET(i.Currency, currencies))
  OR (!FIND_IN_SET(@negativeCurrency, currencies)))
  AND (invoiceTotalFrom IS NULL
  OR (!FIND_IN_SET(@negativeCurrency, currencies)
  AND i.InvoiceTotal >= invoiceTotalFrom)
  OR (FIND_IN_SET(@negativeCurrency, currencies)
  AND (CASE WHEN i.Currency = 'JPY' THEN i.InvoiceTotal * jpyToUSD >= invoiceTotalFrom WHEN i.Currency = 'CAD' THEN i.InvoiceTotal * cadToUSD >= invoiceTotalFrom WHEN i.Currency = 'RMB' THEN i.InvoiceTotal * rmbToUSD >= invoiceTotalFrom ELSE i.InvoiceTotal >= invoiceTotalFrom END)
  ))
  AND (invoiceTotalTo IS NULL
  OR (!FIND_IN_SET(@negativeCurrency, currencies)
  AND i.InvoiceTotal <= invoiceTotalTo)
  OR (FIND_IN_SET(@negativeCurrency, currencies)
  AND (CASE WHEN i.Currency = 'JPY' THEN i.InvoiceTotal * jpyToUSD <= invoiceTotalTo WHEN i.Currency = 'CAD' THEN i.InvoiceTotal * cadToUSD <= invoiceTotalTo WHEN i.Currency = 'RMB' THEN i.InvoiceTotal * rmbToUSD >= invoiceTotalTo ELSE i.InvoiceTotal >= invoiceTotalTo END)
  ))
  AND (taxFrom IS NULL
  OR taxFrom = ''
  OR ConvertToDecimal(i.UserField7) >= taxFrom)
  AND (taxTo IS NULL
  OR taxTo = ''
  OR ConvertToDecimal(i.UserField7) >= taxTo)
  AND ((project IS NULL
  OR project = '')
  AND (projects IS NULL
  OR projects = '')
  OR (project IS NOT NULL
  AND project <> ''
  AND (p.ProjectName LIKE CONCAT('', project, '%')
  OR p.Description LIKE CONCAT('', project, '%')))
  OR (projects IS NOT NULL
  AND projects <> ''
  AND FIND_IN_SET(p.Id, projects))
  )
  AND (companies IS NULL
  OR companies = ''
  OR FIND_IN_SET(i.CompanyCode, companies)
  OR FIND_IN_SET(i.Description, companies))
  AND ((department IS NULL
  OR department = '')
  AND (departments IS NULL
  OR departments = '')
  OR (department IS NOT NULL
  AND department <> ''
  AND (d.DepartmentName LIKE CONCAT('', DepartmentName, '%')
  OR d.Description LIKE CONCAT('', department, '%')))
  OR (departments IS NOT NULL
  AND departments <> ''
  AND (FIND_IN_SET(d.Id, departments)
  OR (i.IsPOInvoice = FALSE
  AND (SELECT
      COUNT(*)
    FROM ApprovalHistory ah
    WHERE ah.InvoiceId = i.InvoiceId
    AND FIND_IN_SET(ah.DepartmentId, departments)) > 0)
  ))
  )
  AND (poNo IS NULL
  OR poNo = ''
  OR i.PONumber LIKE CONCAT('%', poNo, '%'))
  AND (checkNo IS NULL
  OR checkNo = ''
  OR i.CheckNumber LIKE CONCAT('', checkNo, '%'))
  AND (paymentmethod IS NULL
  OR paymentmethod = ''
  OR v.PaymentMethod LIKE CONCAT('', paymentmethod, '%'))
  AND (paymentspec IS NULL
  OR paymentspec = ''
  OR v.PaymentSpec LIKE CONCAT('', paymentspec, '%'))
  AND (vendbank IS NULL
  OR vendbank = ''
  OR v.VendBankId LIKE CONCAT('', vendbank, '%'))
  AND (glCode IS NULL
  OR glCode = ''
  OR ExistsInApprovalHistory(i.InvoiceId, 'GLCode', glCode, @likeStartParamForGL) = TRUE)
  AND (glprojectType IS NULL
  OR glprojectType = ''
  OR ExistsInApprovalHistory(i.InvoiceId, 'ProjectType', glprojectType, '') = TRUE)
  -- AND (gldescription IS NULL OR gldescription = '' OR ExistsInApprovalHistory(i.InvoiceId, 'GLDescription', gldescription, '') = TRUE)
  AND (gldescription IS NULL
  OR gldescription = ''
  OR EXISTS (SELECT
      *
    FROM ApprovalHistory ah
    WHERE ah.InvoiceId = i.InvoiceId
    AND ah.SpecialNote LIKE CONCAT('', gldescription, '%')))
  AND (companyCode IS NULL
  OR companyCode = ''
  OR ExistsInApprovalHistory(i.InvoiceId, 'CompanyCode', companyCode, '') = TRUE
  OR i.CompanyCode LIKE CONCAT('', companyCode, '%'))
  AND (isPOInvoice IS NULL
  OR i.IsPOInvoice = isPOInvoice)
  AND (isFactoryVendor IS NULL OR v.IsFactoryVendor = isFactoryVendor)
  AND (customerName IS NULL
  OR customerName = ''
  OR c.CustomerName LIKE CONCAT('%', customerName, '%'))
  AND (TransactionIdentifer IS NULL
  OR TransactionIdentifer = ''
  OR i.TransactionIdentifer LIKE CONCAT('%', TransactionIdentifer, '%'))
  AND (CheckDate IS NULL
  -- OR CheckDate = ''
  OR i.UserField4 LIKE CONCAT('%', CheckDate, '%'))
  AND (customerAddress IS NULL
  OR customerAddress = ''
  OR ca.StreetName LIKE CONCAT('%', customerAddress, '%')
  OR ca.Address1 LIKE CONCAT('%', customerAddress, '%'))
  AND (capitalProjectNo IS NULL
  OR capitalProjectNo = ''
  OR (i.IsPOInvoice = TRUE
  AND (SELECT
      COUNT(*)
    FROM LineItemDetail lid
    WHERE lid.InvoiceId = i.InvoiceId
    AND lid.CapitalProjectNo = capitalProjectNo) > 0))
  AND (paymentTypes IS NULL
  OR paymentTypes = ''
  OR (i.VendorId IS NOT NULL
  AND FIND_IN_SET(v.PaymentType, paymentTypes)))
  AND (groupCode IS NULL
  OR groupCode = ''
  OR (i.CustomerLocationId IS NOT NULL
  AND c.CustomerNo LIKE CONCAT('', groupCode, '%')))
  AND (coilNo IS NULL
  OR coilNo = ''
  OR (SELECT
      COUNT(*)
    FROM LineItemDetail lid
    WHERE lid.InvoiceId = i.InvoiceId
    AND lid.ProductId LIKE CONCAT('', coilNo, '%')) > 0
  )
  -- AUTO APPROVE START
  AND (isAutoApproved IS NULL
  OR isAutoApproved = ''
  OR (isAutoApproved = TRUE
  AND (
  (i.ApprovalStatusId = 3
  AND EXISTS (SELECT
      *
    FROM AutoApproveReport ar
    WHERE ar.InvoiceId = i.InvoiceId))
  OR EXISTS (SELECT
      *
    FROM InvoiceHistory ih
    WHERE ih.InvoiceId = i.InvoiceId
    AND ih.ActorId = @emptyUUID
    AND ih.Field = 'Invoice Status'
    AND ih.InitialStatus = 'In Approval'
    AND ih.CurrentStatus = 'Approved'))
  )
  OR (isAutoApproved = FALSE
  AND NOT EXISTS (SELECT
      *
    FROM AutoApproveReport ar
    WHERE ar.InvoiceId = i.InvoiceId)
  AND NOT EXISTS (SELECT
      *
    FROM InvoiceHistory ih
    WHERE ih.InvoiceId = i.InvoiceId
    AND ih.ActorId = @emptyUUID
    AND ih.Field = 'Invoice Status'
    AND ih.InitialStatus = 'In Approval'
    AND ih.CurrentStatus = 'Approved'))
  )
  -- AUTO APPROVE END
  AND (tranIdentifier IS NULL
  OR tranIdentifier = ''
  OR (SELECT
      COUNT(*)
    FROM PaymentStatus ps
    WHERE ps.InvoiceId = i.InvoiceId
    AND ps.TransactionIdentifier = tranIdentifier) > 0
  )
  AND (isExpiredPayment IS NULL
  OR isExpiredPayment = ''
  OR (isExpiredPayment = TRUE
  AND (i.Reissued = TRUE
  OR (SELECT
      COUNT(*)
    FROM PaymentStatus ps
    WHERE ps.InvoiceId = i.InvoiceId
    AND ps.TransactionIdentifier = "EXPIRED") > 0))
  OR (isExpiredPayment = FALSE
  AND (i.Reissued = FALSE
  OR (SELECT
      COUNT(*)
    FROM PaymentStatus ps
    WHERE ps.InvoiceId = i.InvoiceId
    AND ps.TransactionIdentifier = "EXPIRED") = 0))
  )
  AND (paymentDateFrom IS NULL
  -- OR paymentDateFrom = ''
  OR (SELECT
      COUNT(*)
    FROM PaymentStatus ps
    WHERE ps.InvoiceId = i.InvoiceId
    AND ps.ReceivedDate >= paymentDateFrom) > 0)
  AND (paymentDateTo IS NULL
  -- OR paymentDateTo = ''
  OR (SELECT
      COUNT(*)
    FROM PaymentStatus ps
    WHERE ps.InvoiceId = i.InvoiceId
    AND ps.ReceivedDate < DATE_ADD(paymentDateTo, INTERVAL 1 DAY)) > 0)
  AND (netTermDateFrom IS NULL
  -- OR netTermDateFrom = ''
  OR i.NetTermDate >= netTermDateFrom)
  AND (netTermDateTo IS NULL
  -- OR netTermDateTo = ''
  OR i.NetTermDate < DATE_ADD(netTermDateTo, INTERVAL 1 DAY))
  AND (invoiceStatuses IS NULL
  OR invoiceStatuses = ''
  OR (i.ApprovalStatusId IS NOT NULL
  AND FIND_IN_SET(i.ApprovalStatusId, invoiceStatuses)))
  AND (assignedTos IS NULL
  OR assignedTos = ''
  OR ((restrictToUser IS NULL
  OR restrictToUser <> TRUE)
  AND (SELECT
      COUNT(*)
    FROM UserInvoiceAssignment uia
    WHERE uia.InvoiceId = i.InvoiceId
    AND FIND_IN_SET(uia.UserId, assignedTos)) > 0)
  OR (restrictToUser = TRUE
  AND (SELECT
      COUNT(*)
    FROM UserInvoiceAssignment uia
    WHERE uia.InvoiceId = i.InvoiceId
    AND FIND_IN_SET(uia.UserId, assignedTos)) > 0
  AND (SELECT
      COUNT(*)
    FROM UserInvoiceAssignment uia
    WHERE uia.InvoiceId = i.InvoiceId
    AND FIND_IN_SET(uia.UserId, assignedTos)) = 0)
  )
  AND (locations IS NULL
  OR locations = ''
  OR i.OrgId IS NULL
  OR FIND_IN_SET(i.OrgId, locations)
  OR (SELECT
      COUNT(*)
    FROM ApprovalHistory ah
    WHERE ah.InvoiceId = i.InvoiceId
    AND FIND_IN_SET(ah.OrgId, locations)))
  AND (isHoldInvoice IS NULL
  OR (isHoldInvoice = TRUE
  AND (SELECT
      COUNT(*)
    FROM UserInvoiceAssignment uia
    WHERE uia.InvoiceId = i.InvoiceId
    AND uia.HoldEndDate IS NOT NULL
    AND uia.HoldEndDate > CURDATE()) > 0)
  OR (isHoldInvoice = FALSE
  AND (SELECT
      COUNT(*)
    FROM UserInvoiceAssignment uia
    WHERE uia.InvoiceId = i.InvoiceId
    AND uia.HoldEndDate IS NOT NULL
    AND uia.HoldEndDate > CURDATE()) = 0)
  )
  AND (isFilterViewForSupervisorByDepartmentEnabled = FALSE
  OR IsInvoiceDepartmentInUserDepartments(userId, i.InvoiceId)
  OR IsInvoiceDepartmentInUserDepartments(assignorUserId, i.InvoiceId))
  AND (invoiceTypes IS NULL
  OR invoiceTypes = ''
  OR FIND_IN_SET(i.InvoiceType, invoiceTypes)
  OR (i.Reissued = TRUE
  AND FIND_IN_SET("expired", invoiceTypes)))
  -- AND (userClientCompanyCodes IS NULL OR userClientCompanyCodes = '' OR i.CompanyCode IN("'" + userClientCompanyCodes + "'"))
  -- AND (userClientCompanyCodes IS NULL OR userClientCompanyCodes = '' OR FIND_IN_SET(REPLACE(i.CompanyCode, ',',''), userClientCompanyCodes))
  AND (userClientCompanyCodes IS NULL
  OR userClientCompanyCodes = ''
  OR InvoiceExistsInUserCompanies(clientId, userId, i.CompanyCode) = 1)
  AND (isUserAdministrator = TRUE
  OR isFilterByDepartmentEnabled = FALSE
  OR IsInvoiceDepartmentInUserDepartments(userId, i.InvoiceId))
  AND (department IS NULL
  OR department = ''
  OR ExistsInApprovalHistory(i.InvoiceId, 'Department', department, '') = TRUE)
  AND (isConfidential IS NULL
  OR isConfidential = ''
  OR (CASE WHEN i.VendorId IS NOT NULL AND
      v.IsConfidential THEN v.IsConfidential = isConfidential WHEN i.IsConfidential IS NULL THEN isConfidential = FALSE ELSE i.IsConfidential = isConfidential END)
  )
  AND (userField1 IS NULL
  OR userField1 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField1", wholeArgs) THEN i.UserField1 = UserField1 ELSE i.UserField1 LIKE CONCAT('', userField1, '%') END))
  AND (userField2 IS NULL
  OR userField2 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField2", wholeArgs) THEN i.UserField2 = UserField2 ELSE i.UserField2 LIKE CONCAT('', userField2, '%') END))
  AND (userField3 IS NULL
  OR userField3 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField3", wholeArgs) THEN i.UserField3 = UserField3 ELSE i.UserField3 LIKE CONCAT('', userField3, '%') END))
  AND (userField4 IS NULL
  OR userField4 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField4", wholeArgs) THEN i.UserField4 = UserField4 ELSE i.UserField4 LIKE CONCAT('', userField4, '%') END))
  AND (userField5 IS NULL
  OR userField5 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField5", wholeArgs) THEN i.UserField5 = UserField5 ELSE i.UserField5 LIKE CONCAT('', userField5, '%') END))
  AND (userField6 IS NULL
  OR userField6 = ''
  OR i.UserField6 = userField6)
  AND (filterOneTimeVendor IS NULL
  OR filterOneTimeVendor = ''
  OR i.UserField6 LIKE CONCAT('%', filterOneTimeVendor, '%'))
  AND (userField7 IS NULL
  OR userField7 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField7", wholeArgs) THEN i.UserField7 = UserField7 ELSE i.UserField7 LIKE CONCAT('', userField7, '%') END))
  AND (userField8 IS NULL
  OR userField8 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField8", wholeArgs) THEN i.UserField8 = UserField8 ELSE i.UserField8 LIKE CONCAT('', userField8, '%') END))
  AND (userField9 IS NULL
  OR userField9 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField9", wholeArgs) THEN i.UserField9 = UserField9 ELSE i.UserField9 LIKE CONCAT('', userField9, '%') END))
  AND (userField10 IS NULL
  OR userField10 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField10", wholeArgs) THEN i.UserField10 = UserField10 ELSE i.UserField10 LIKE CONCAT('', userField10, '%') END))
  AND (currency IS NULL
  OR currency = ''
  OR i.Currency LIKE CONCAT('', currency, '%'))
  AND (lineItemDescription IS NULL
  OR lineItemDescription = ''
  OR (SELECT
      COUNT(*)
    FROM LineItemDetail lid
    WHERE lid.InvoiceId = i.InvoiceId
    AND (lid.Description LIKE CONCAT('', lineItemDescription, '%')
    OR lid.ProductDescription LIKE CONCAT('', lineItemDescription, '%'))) > 0)
  AND (vendorSite IS NULL
  OR vendorSite = ''
  OR d.DepartmentName LIKE CONCAT('', vendorSite, '%')
  OR d.Description LIKE CONCAT('', vendorSite, '%'))
  AND (deliveryNumber IS NULL
  OR deliveryNumber = ''
  OR i.DeliveryNumber LIKE CONCAT('', deliveryNumber, '%'))
  AND (checkDateFrom IS NULL
  -- OR checkDateFrom = ''
  OR i.CheckDate >= checkDateFrom)
  AND (checkDateTo IS NULL
  -- OR checkDateTo = ''
  OR i.CheckDate < DATE_ADD(checkDateTo, INTERVAL 1 DAY))
  AND (invoiceSources IS NULL
  OR invoiceSources = ''
  OR (i.BatchId IS NOT NULL
  AND FIND_IN_SET(b.Source, invoiceSources)))
  AND (invoiceSender IS NULL
  OR invoiceSender = ''
  OR (i.BatchId IS NOT NULL
  AND (SELECT
      COUNT(*)
    FROM `User` ut
    WHERE ut.ClientId = clientId
    AND FIND_IN_SET(ut.UserId, invoiceSender)
    AND b.Sender IS NOT NULL
    AND CONCAT(ut.LastName, '', ut.FirstName) = b.Sender) > 0
  ))
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AdvancedSearchInvoice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `AdvancedSearchInvoice`(
    -- [All your input parameters remain the same]
    IN clientId INT,
    IN userId CHAR(36) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN assignorUserId CHAR(36) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN isPausedFiltered BIT,
    IN invoiceId INT,
    IN scannedDateFrom DATE,
    IN scannedDateTo DATE,
    IN invoiceDateFrom DATE,
    IN invoiceDateTo DATE,
    IN paymentDueDateFrom DATE,
    IN paymentDueDateTo DATE,
    IN approvedDateFrom DATE,
    IN approvedDateTo DATE,
    IN rejectedDateFrom DATE,
    IN rejectedDateTo DATE,
    IN lastActionDateFrom DATE,
    IN lastActionDateTo DATE,
    IN invoiceNo VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN voucherNumber VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN accountCode VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN FilterByApprover BIT,
    IN searchMyInvoice BIT,
    IN approverIds CHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN vendor VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN currency VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN currencies VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN invoiceTotalFrom DECIMAL(18, 2),
    IN invoiceTotalTo DECIMAL(18, 2),
    IN taxFrom DECIMAL(18, 2),
    IN taxTo DECIMAL(18, 2),
    IN project VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN projects VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN companies CHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN department VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN departments VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN prepaymentNoteIds VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN poNo VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN checkNo VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN paymentmethod VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN paymentspec VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN vendbank VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN filterbyGLContent BIT,
    IN glCode VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN glprojectType VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN gldescription VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN companyCode VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN isPOInvoice BIT,
    IN isFactoryVendor BIT,
    IN customerName VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN TransactionIdentifer VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN CheckDate DATE,
    IN customerAddress VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN capitalProjectNo VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN paymentTypes VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN groupCode VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN coilNo VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN isAutoApproved BIT,
    IN tranIdentifier VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN isExpiredPayment BIT,
    IN paymentDateFrom DATE,
    IN paymentDateTo DATE,
    IN netTermDateFrom DATE,
    IN netTermDateTo DATE,
    IN invoiceStatuses VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN assignedTos VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN restrictToUser BIT,
    IN locations VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN isHoldInvoice BIT,
    IN isFilterViewForSupervisorByDepartmentEnabled BIT,
    IN invoiceTypes VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN userClientCompanyCodes VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN isUserAdministrator BIT,
    IN isFilterByDepartmentEnabled BIT,
    IN isConfidential BIT,
    IN searchInvoiceArgument1FieldasWhole BIT,
    IN userField1 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN userField2 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN userField3 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN userField4 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN userField5 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN userField6 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN userField7 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN userField8 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN userField9 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN userField10 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN wholeArgs VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN lineItemDescription VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN vendorSite VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN deliveryNumber VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN checkDateFrom DATE,
    IN checkDateTo DATE,
    IN invoiceSources VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN invoiceSender VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN jpyToUSD DOUBLE,
    IN cadToUSD DOUBLE,
    IN rmbToUSD DOUBLE,
    IN filterOneTimeVendor VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN showGLDesciriptionForExportEnabled BIT,
    IN isUrgentInvoice BIT,
    IN isDeletedInvoice BIT,
    IN orgIdentifier VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN allowDeletedInvoiceSearch BIT,
    IN batchName VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
    IN descriptions VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci)
BEGIN
  SET @negativeCurrency = "-1" COLLATE utf8mb4_general_ci;
  SET @usdEquivalent = 0;
  SET @emptyUUID = '00000000-0000-0000-0000-000000000000' COLLATE utf8mb4_general_ci;
  SET @likeStartParamForGL = (CASE WHEN filterbyGLContent = FALSE THEN '' ELSE '%' END);

  SELECT
    i.InvoiceId,
    v.PaymentMethod,
    v.PaymentSpec,
    v.VendBankId,
    i.InvoiceNo,
    i.VoucherNumber,
    v.VendorId,
    v.VendorName,
    v.VendorNo,
    v.IsConfidential AS IsConfidential_v,
    i.IsConfidential AS IsConfidential_i,
    i.PONumber,
    i.CompanyCode,
    i.ScannedDate,
    i.IsPaused,
    i.InvoiceDate,
    i.PaymentDueDate,
    i.RejectedDate,
    i.NetTermDate,
    i.InvoiceTotal,
    i.Description,
    i.ApprovalStatusId,
    ist.StateName AS InvoiceStatusName,
    i.InvoiceType,
    UserField3,
    UserField4,
    od.OrgName AS Division,
    i.LastActionBy,
    i.LastActionDate,
    i.CheckNumber,
    CONCAT(approver.LastName, ', ', approver.FirstName) AS ApprovedBy,
    i.AprovedDate,
    i.ApproverId,
    i.DeliveryNumber,
    b.Source AS InvoiceSource,
    GetAssignedTosString(i.InvoiceId) AS AssignedTo,
    (SELECT uia.DateCreated FROM UserInvoiceAssignment uia WHERE uia.InvoiceId = i.InvoiceId LIMIT 1) AS AssignedDate,
    GetInvoiceComment(i.InvoiceId, i.IsPaused) AS `Comment`,
    (SELECT lid.POType FROM LineItemDetail lid WHERE lid.InvoiceId = i.InvoiceId LIMIT 1) AS POType,
    i.Currency,
    @usdEquivalent AS USDEquvalent,
    d.DepartmentName AS Department,
    (CASE WHEN i.IsPOInvoice = FALSE THEN GetGLNumbersFromApprovalHistory(i.InvoiceId) ELSE GetGLNumbersFromLineItemDetail(i.InvoiceId) END) AS GLNumber,
    (CASE WHEN showGLDesciriptionForExportEnabled = FALSE THEN " " ELSE GetGLDescriptionsFromApprovalHistory(i.InvoiceId) END) AS GLDescription,
    (SELECT GROUP_CONCAT(DISTINCT org.OrgId SEPARATOR ',') AS OrgId FROM ApprovalHistory ah USE INDEX (IX_InvoiceId, OrgId)
     INNER JOIN OrgData org ON ah.OrgId = org.Id WHERE ah.InvoiceId = invoiceId GROUP BY NULL) AS Location,
    b.Sender AS InvoiceSender,
    b.Receiver AS InvoiceReceiver,
    i.TransactionIdentifer,
    i.ArchiveReason,
    i.CheckDate,
    i.AccountCode,
    i.SubCategoryType,
    GetProjectNamesFromApprovalHistory(i.InvoiceId, i.IsPOInvoice) AS ProjectType,
    i.VoucherNumber,
    i.UserField6,
    GetBuyerNameNew(i.InvoiceId) AS BuyerName,
    v.UserField1 AS IsUrgentInvoice,
    i.UserField1 AS UserField1,
    i.IsDeleted AS isDeletedInvoice,
    i.Tax
  FROM Invoice i
    LEFT OUTER JOIN InvoiceStatus ist ON i.ApprovalStatusId = ist.StateId
    LEFT OUTER JOIN Batch b ON i.BatchID = b.ID
    LEFT OUTER JOIN Vendor v ON i.VendorId = v.VendorId
    LEFT OUTER JOIN Department d ON i.VendorSiteId = d.Id
    LEFT OUTER JOIN ProjectType p ON i.ProjectTypeId = p.Id
    LEFT OUTER JOIN CustomerLocation cl ON i.CustomerLocationId = cl.CustomerLocationId
    LEFT OUTER JOIN Customer c ON cl.CustomerId = c.CustomerId
    LEFT OUTER JOIN Address ca ON cl.AddressId = ca.AddressId
    LEFT OUTER JOIN OrgData od ON i.OrgId = od.Id
    LEFT OUTER JOIN `User` AS approver ON i.ApproverId = approver.UserId
  WHERE i.ClientId = clientId
    AND ((isDeletedInvoice = FALSE AND i.IsDeleted = 0) OR (isDeletedInvoice = TRUE AND i.IsDeleted = 1) OR allowDeletedInvoiceSearch = TRUE)
    AND (isPausedFiltered IS NULL OR i.IsPaused = isPausedFiltered)
    AND (orgIdentifier IS NULL OR orgIdentifier = '' OR i.OrgId = orgIdentifier)
    AND (invoiceId IS NULL OR i.InvoiceId = invoiceId)
    AND (scannedDateFrom IS NULL OR i.ScannedDate >= scannedDateFrom)
    AND (scannedDateTo IS NULL OR i.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
    AND (invoiceDateFrom IS NULL OR i.InvoiceDate >= invoiceDateFrom)
    AND (invoiceDateTo IS NULL OR i.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))
    AND (paymentDueDateFrom IS NULL OR i.PaymentDueDate >= paymentDueDateFrom)
    AND (paymentDueDateTo IS NULL OR i.PaymentDueDate < DATE_ADD(paymentDueDateTo, INTERVAL 1 DAY))
    AND (approvedDateFrom IS NULL OR i.AprovedDate >= approvedDateFrom)
    AND (approvedDateTo IS NULL OR i.AprovedDate < DATE_ADD(approvedDateTo, INTERVAL 1 DAY))
    AND (rejectedDateFrom IS NULL OR i.RejectedDate >= rejectedDateFrom)
    AND (rejectedDateTo IS NULL OR i.RejectedDate < DATE_ADD(rejectedDateTo, INTERVAL 1 DAY))
    AND (lastActionDateFrom IS NULL OR i.LastActionDate >= lastActionDateFrom)
    AND (lastActionDateTo IS NULL OR i.LastActionDate < DATE_ADD(lastActionDateTo, INTERVAL 1 DAY))
    AND (invoiceNo IS NULL OR invoiceNo = '' OR i.InvoiceNo LIKE CONCAT('', invoiceNo, '%'))
    AND (descriptions IS NULL OR descriptions = '' OR i.Description LIKE CONCAT('', descriptions, '%'))
    AND (voucherNumber IS NULL OR voucherNumber = '' OR i.VoucherNumber LIKE CONCAT('', voucherNumber, '%'))
    AND (accountCode IS NULL OR accountCode = '' OR i.AccountCode LIKE CONCAT('', accountCode, '%'))
    AND (FilterByApprover = FALSE OR (i.ApproverId = userId OR i.ApproverId = assignorUserId))
    AND (searchMyInvoice = FALSE OR i.ApproverId = userId)
    AND (isUrgentInvoice = FALSE OR (isUrgentInvoice = TRUE AND v.UserField1 = 'True'))
    AND ((approverIds IS NULL OR approverIds = '')
         OR (i.ApproverId IS NOT NULL AND FIND_IN_SET(i.ApproverId COLLATE utf8mb4_general_ci, approverIds))
         OR EXISTS (SELECT * FROM UserInvoiceAssignment uia WHERE uia.InvoiceId = i.InvoiceId AND FIND_IN_SET(uia.UserId COLLATE utf8mb4_general_ci, approverIds))
         OR EXISTS (SELECT * FROM UserInvoiceAssignmentHistory uiah WHERE uiah.InvoiceId = i.InvoiceId AND uiah.FromApprovalSubStepUserId IS NOT NULL AND FIND_IN_SET(uiah.FromApprovalSubStepUserId COLLATE utf8mb4_general_ci, approverIds))
         OR EXISTS (SELECT * FROM UserInvoiceAssignmentHistory uiah WHERE uiah.InvoiceId = i.InvoiceId AND uiah.ToApprovalSubStepUserId IS NOT NULL AND FIND_IN_SET(uiah.ToApprovalSubStepUserId COLLATE utf8mb4_general_ci, approverIds)))
    AND (vendor IS NULL OR vendor = '' OR v.VendorName LIKE CONCAT('', vendor, '%') OR v.VendorNo LIKE CONCAT('', vendor, '%'))
    AND ((currencies IS NULL OR currencies = '')
         OR (i.Currency IS NOT NULL AND FIND_IN_SET(i.Currency COLLATE utf8mb4_general_ci, currencies))
         OR (!FIND_IN_SET(@negativeCurrency COLLATE utf8mb4_general_ci, currencies)))
    AND (invoiceTotalFrom IS NULL
         OR (!FIND_IN_SET(@negativeCurrency COLLATE utf8mb4_general_ci, currencies) AND i.InvoiceTotal >= invoiceTotalFrom)
         OR (FIND_IN_SET(@negativeCurrency COLLATE utf8mb4_general_ci, currencies) AND
            (CASE
                WHEN i.Currency = 'JPY' THEN i.InvoiceTotal * jpyToUSD >= invoiceTotalFrom
                WHEN i.Currency = 'CAD' THEN i.InvoiceTotal * cadToUSD >= invoiceTotalFrom
                WHEN i.Currency = 'RMB' THEN i.InvoiceTotal * rmbToUSD >= invoiceTotalFrom
                ELSE i.InvoiceTotal >= invoiceTotalFrom
             END)))
    AND (invoiceTotalTo IS NULL
         OR (!FIND_IN_SET(@negativeCurrency COLLATE utf8mb4_general_ci, currencies) AND i.InvoiceTotal <= invoiceTotalTo)
         OR (FIND_IN_SET(@negativeCurrency COLLATE utf8mb4_general_ci, currencies) AND
            (CASE
                WHEN i.Currency = 'JPY' THEN i.InvoiceTotal * jpyToUSD <= invoiceTotalTo
                WHEN i.Currency = 'CAD' THEN i.InvoiceTotal * cadToUSD <= invoiceTotalTo
                WHEN i.Currency = 'RMB' THEN i.InvoiceTotal * rmbToUSD >= invoiceTotalTo
                ELSE i.InvoiceTotal >= invoiceTotalTo
             END)))
    AND (taxFrom IS NULL OR taxFrom = '' OR ConvertToDecimal(i.UserField7) >= taxFrom)
    AND (taxTo IS NULL OR taxTo = '' OR ConvertToDecimal(i.UserField7) >= taxTo)
    AND ((project IS NULL OR project = '') AND (projects IS NULL OR projects = '')
         OR (project IS NOT NULL AND project <> '' AND (p.ProjectName LIKE CONCAT('', project, '%') OR p.Description LIKE CONCAT('', project, '%')))
         OR (projects IS NOT NULL AND projects <> '' AND FIND_IN_SET(p.Id, projects)))
    AND (companies IS NULL OR companies = '' OR FIND_IN_SET(i.CompanyCode COLLATE utf8mb4_general_ci, companies) OR FIND_IN_SET(i.Description COLLATE utf8mb4_general_ci, companies))
    AND ((department IS NULL OR department = '') AND (departments IS NULL OR departments = '')
         OR (department IS NOT NULL AND department <> '' AND (d.DepartmentName LIKE CONCAT('', department, '%') OR d.Description LIKE CONCAT('', department, '%')))
         OR (departments IS NOT NULL AND departments <> '' AND
            (FIND_IN_SET(CAST(d.Id AS CHAR) COLLATE utf8mb4_general_ci, departments)
             OR (i.IsPOInvoice = FALSE AND (SELECT COUNT(*) FROM ApprovalHistory ah WHERE ah.InvoiceId = i.InvoiceId AND FIND_IN_SET(CAST(ah.DepartmentId AS CHAR) COLLATE utf8mb4_general_ci, departments)) > 0))))
    AND (prepaymentNoteIds IS NULL OR prepaymentNoteIds = '' OR FIND_IN_SET(CAST(i.PrepaymentNoteId AS CHAR) COLLATE utf8mb4_general_ci, prepaymentNoteIds) > 0)
    AND (userField1 IS NULL OR userField1 = '' OR i.UserField1 LIKE CONCAT('%', userField1, '%'))
    AND (poNo IS NULL OR poNo = '' OR i.PONumber LIKE CONCAT('%', poNo, '%'))
    AND (checkNo IS NULL OR checkNo = '' OR i.CheckNumber LIKE CONCAT('', checkNo, '%'))
    AND (paymentmethod IS NULL OR paymentmethod = '' OR v.PaymentMethod LIKE CONCAT('', paymentmethod, '%'))
    AND (paymentspec IS NULL OR paymentspec = '' OR v.PaymentSpec LIKE CONCAT('', paymentspec, '%'))
    AND (vendbank IS NULL OR vendbank = '' OR v.VendBankId LIKE CONCAT('', vendbank, '%'))
    AND (glCode IS NULL OR glCode = '' OR ExistsInApprovalHistory(i.InvoiceId, 'GLCode', glCode, @likeStartParamForGL) = TRUE)
    AND (glprojectType IS NULL OR glprojectType = '' OR ExistsInApprovalHistory(i.InvoiceId, 'ProjectType', glprojectType, '') = TRUE)
    AND (gldescription IS NULL OR gldescription = '' OR EXISTS (SELECT * FROM ApprovalHistory ah WHERE ah.InvoiceId = i.InvoiceId AND ah.SpecialNote LIKE CONCAT('', gldescription, '%')))
    AND (companyCode IS NULL OR companyCode = '' OR ExistsInApprovalHistory(i.InvoiceId, 'CompanyCode', companyCode, '') = TRUE OR i.CompanyCode LIKE CONCAT('', companyCode, '%'))
    AND (isPOInvoice IS NULL OR i.IsPOInvoice = isPOInvoice)
    AND (isFactoryVendor IS NULL OR v.IsFactoryVendor = isFactoryVendor)
    AND (customerName IS NULL OR customerName = '' OR c.CustomerName LIKE CONCAT('%', customerName, '%'))
    AND (TransactionIdentifer IS NULL OR TransactionIdentifer = '' OR i.TransactionIdentifer LIKE CONCAT('%', TransactionIdentifer, '%'))
    AND (CheckDate IS NULL OR i.UserField4 LIKE CONCAT('%', CheckDate, '%'))
    AND (customerAddress IS NULL OR customerAddress = '' OR ca.StreetName LIKE CONCAT('%', customerAddress, '%') OR ca.Address1 LIKE CONCAT('%', customerAddress, '%'))
    AND (capitalProjectNo IS NULL OR capitalProjectNo = '' OR (i.IsPOInvoice = TRUE AND (SELECT COUNT(*) FROM LineItemDetail lid WHERE lid.InvoiceId = i.InvoiceId AND lid.CapitalProjectNo = capitalProjectNo) > 0))
    AND (paymentTypes IS NULL OR paymentTypes = '' OR (i.VendorId IS NOT NULL AND FIND_IN_SET(v.PaymentType COLLATE utf8mb4_general_ci, paymentTypes)))
    AND (groupCode IS NULL OR groupCode = '' OR (i.CustomerLocationId IS NOT NULL AND c.CustomerNo LIKE CONCAT('', groupCode, '%')))
    AND (coilNo IS NULL OR coilNo = '' OR (SELECT COUNT(*) FROM LineItemDetail lid WHERE lid.InvoiceId = i.InvoiceId AND lid.ProductId LIKE CONCAT('', coilNo, '%')) > 0)
    -- Fixed isAutoApproved Condition
    AND (
        isAutoApproved IS NULL OR isAutoApproved = '' OR 
        (
            isAutoApproved = TRUE AND 
            (
                (i.ApprovalStatusId = 3 AND EXISTS (SELECT * FROM AutoApproveReport ar WHERE ar.InvoiceId = i.InvoiceId)) OR 
                EXISTS (SELECT * FROM InvoiceHistory ih WHERE ih.InvoiceId = i.InvoiceId AND ih.ActorId = @emptyUUID AND ih.Field = 'Invoice Status' AND ih.InitialStatus = 'In Approval' AND ih.CurrentStatus = 'Approved')
            )
        ) OR 
        (
            isAutoApproved = FALSE AND 
            NOT EXISTS (SELECT * FROM AutoApproveReport ar WHERE ar.InvoiceId = i.InvoiceId) AND 
            NOT EXISTS (SELECT * FROM InvoiceHistory ih WHERE ih.InvoiceId = i.InvoiceId AND ih.ActorId = @emptyUUID AND ih.Field = 'Invoice Status' AND ih.InitialStatus = 'In Approval' AND ih.CurrentStatus = 'Approved')
        )
    )
    AND (tranIdentifier IS NULL OR tranIdentifier = '' OR (SELECT COUNT(*) FROM PaymentStatus ps WHERE ps.InvoiceId = i.InvoiceId AND ps.TransactionIdentifier = tranIdentifier) > 0)
    AND (isExpiredPayment IS NULL OR isExpiredPayment = '' OR (isExpiredPayment = TRUE AND (i.Reissued = TRUE OR (SELECT COUNT(*) FROM PaymentStatus ps WHERE ps.InvoiceId = i.InvoiceId AND ps.TransactionIdentifier = 'EXPIRED') > 0))
         OR (isExpiredPayment = FALSE AND (i.Reissued = FALSE OR (SELECT COUNT(*) FROM PaymentStatus ps WHERE ps.InvoiceId = i.InvoiceId AND ps.TransactionIdentifier = 'EXPIRED') = 0)))
    AND (paymentDateFrom IS NULL OR (SELECT COUNT(*) FROM PaymentStatus ps WHERE ps.InvoiceId = i.InvoiceId AND ps.ReceivedDate >= paymentDateFrom) > 0)
    AND (paymentDateTo IS NULL OR (SELECT COUNT(*) FROM PaymentStatus ps WHERE ps.InvoiceId = i.InvoiceId AND ps.ReceivedDate < DATE_ADD(paymentDateTo, INTERVAL 1 DAY)) > 0)
    AND (netTermDateFrom IS NULL OR i.NetTermDate >= netTermDateFrom)
    AND (netTermDateTo IS NULL OR i.NetTermDate < DATE_ADD(netTermDateTo, INTERVAL 1 DAY))
    AND (invoiceStatuses IS NULL OR invoiceStatuses = '' OR (i.ApprovalStatusId IS NOT NULL AND FIND_IN_SET(CAST(i.ApprovalStatusId AS CHAR) COLLATE utf8mb4_general_ci, invoiceStatuses)))
    AND (assignedTos IS NULL OR assignedTos = ''
         OR ((restrictToUser IS NULL OR restrictToUser <> TRUE) AND (SELECT COUNT(*) FROM UserInvoiceAssignment uia WHERE uia.InvoiceId = i.InvoiceId AND FIND_IN_SET(uia.UserId COLLATE utf8mb4_general_ci, assignedTos)) > 0)
         OR (restrictToUser = TRUE AND (SELECT COUNT(*) FROM UserInvoiceAssignment uia WHERE uia.InvoiceId = i.InvoiceId AND FIND_IN_SET(uia.UserId COLLATE utf8mb4_general_ci, assignedTos)) > 0
             AND (SELECT COUNT(*) FROM UserInvoiceAssignment uia WHERE uia.InvoiceId = i.InvoiceId AND FIND_IN_SET(uia.UserId COLLATE utf8mb4_general_ci, assignedTos)) = 0))
    AND (locations IS NULL OR locations = '' OR FIND_IN_SET(CAST(i.OrgId AS CHAR) COLLATE utf8mb4_general_ci, locations) OR (SELECT COUNT(*) FROM ApprovalHistory ah WHERE ah.InvoiceId = i.InvoiceId AND FIND_IN_SET(CAST(ah.OrgId AS CHAR) COLLATE utf8mb4_general_ci, locations)))
    AND (isHoldInvoice IS NULL
         OR (isHoldInvoice = TRUE AND (SELECT COUNT(*) FROM UserInvoiceAssignment uia WHERE uia.InvoiceId = i.InvoiceId AND uia.HoldEndDate IS NOT NULL AND uia.HoldEndDate > CURDATE()) > 0)
         OR (isHoldInvoice = FALSE AND (SELECT COUNT(*) FROM UserInvoiceAssignment uia WHERE uia.InvoiceId = i.InvoiceId AND uia.HoldEndDate IS NOT NULL AND uia.HoldEndDate > CURDATE()) = 0))
    AND (isFilterViewForSupervisorByDepartmentEnabled = FALSE OR IsInvoiceDepartmentInUserDepartments(userId, i.InvoiceId) OR IsInvoiceDepartmentInUserDepartments(assignorUserId, i.InvoiceId))
    AND (invoiceTypes IS NULL OR invoiceTypes = '' OR FIND_IN_SET(i.InvoiceType COLLATE utf8mb4_general_ci, invoiceTypes) OR (i.Reissued = TRUE AND FIND_IN_SET('expired' COLLATE utf8mb4_general_ci, invoiceTypes)))
    AND (userClientCompanyCodes IS NULL OR userClientCompanyCodes = '' OR InvoiceExistsInUserCompanies(clientId, userId, i.CompanyCode) = 1)
    AND (isUserAdministrator = TRUE OR isFilterByDepartmentEnabled = FALSE OR IsInvoiceDepartmentInUserDepartments(userId, i.InvoiceId))
    AND (department IS NULL OR department = '' OR ExistsInApprovalHistory(i.InvoiceId, 'Department', department, '') = TRUE)
    AND (isConfidential IS NULL OR isConfidential = '' OR
        (CASE
            WHEN i.VendorId IS NOT NULL AND v.IsConfidential THEN v.IsConfidential = isConfidential
            WHEN i.IsConfidential IS NULL THEN isConfidential = FALSE
            ELSE i.IsConfidential = isConfidential
         END))
    AND (userField1 IS NULL OR userField1 = '' OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND FIND_IN_SET('UserField1', wholeArgs) THEN i.UserField1 = UserField1 ELSE i.UserField1 LIKE CONCAT('', userField1, '%') END))
    AND (userField2 IS NULL OR userField2 = '' OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND FIND_IN_SET('UserField2', wholeArgs) THEN i.UserField2 = UserField2 ELSE i.UserField2 LIKE CONCAT('', userField2, '%') END))
    AND (userField3 IS NULL OR userField3 = '' OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND FIND_IN_SET('UserField3', wholeArgs) THEN i.UserField3 = UserField3 ELSE i.UserField3 LIKE CONCAT('', userField3, '%') END))
    AND (userField4 IS NULL OR userField4 = '' OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND FIND_IN_SET('UserField4', wholeArgs) THEN i.UserField4 = UserField4 ELSE i.UserField4 LIKE CONCAT('', userField4, '%') END))
    AND (userField5 IS NULL OR userField5 = '' OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND FIND_IN_SET('UserField5', wholeArgs) THEN i.UserField5 = UserField5 ELSE i.UserField5 LIKE CONCAT('', userField5, '%') END))
    AND (userField6 IS NULL OR userField6 = '' OR i.UserField6 = userField6)
    AND (filterOneTimeVendor IS NULL OR filterOneTimeVendor = '' OR i.UserField6 LIKE CONCAT('%', filterOneTimeVendor, '%'))
    AND (userField7 IS NULL OR userField7 = '' OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND FIND_IN_SET('UserField7', wholeArgs) THEN i.UserField7 = UserField7 ELSE i.UserField7 LIKE CONCAT('', userField7, '%') END))
    AND (userField8 IS NULL OR userField8 = '' OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND FIND_IN_SET('UserField8', wholeArgs) THEN i.UserField8 = UserField8 ELSE i.UserField8 LIKE CONCAT('', userField8, '%') END))
    AND (userField9 IS NULL OR userField9 = '' OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND FIND_IN_SET('UserField9', wholeArgs) THEN i.UserField9 = UserField9 ELSE i.UserField9 LIKE CONCAT('', userField9, '%') END))
    AND (userField10 IS NULL OR userField10 = '' OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND FIND_IN_SET('UserField10', wholeArgs) THEN i.UserField10 = UserField10 ELSE i.UserField10 LIKE CONCAT('', userField10, '%') END))
    AND (currency IS NULL OR currency = '' OR i.Currency LIKE CONCAT('', currency, '%'))
    AND (lineItemDescription IS NULL OR lineItemDescription = '' OR (SELECT COUNT(*) FROM LineItemDetail lid WHERE lid.InvoiceId = i.InvoiceId AND (lid.Description LIKE CONCAT('', lineItemDescription, '%') OR lid.ProductDescription LIKE CONCAT('', lineItemDescription, '%'))) > 0)
    AND (vendorSite IS NULL OR vendorSite = '' OR d.DepartmentName LIKE CONCAT('', vendorSite, '%') OR d.Description LIKE CONCAT('', vendorSite, '%'))
    AND (deliveryNumber IS NULL OR deliveryNumber = '' OR i.DeliveryNumber LIKE CONCAT('', deliveryNumber, '%'))
    AND (checkDateFrom IS NULL OR i.CheckDate >= checkDateFrom)
    AND (checkDateTo IS NULL OR i.CheckDate < DATE_ADD(checkDateTo, INTERVAL 1 DAY))
    AND (invoiceSources IS NULL OR invoiceSources = '' OR (i.BatchId IS NOT NULL AND FIND_IN_SET(b.Source COLLATE utf8mb4_general_ci, invoiceSources)))
    AND (invoiceSender IS NULL OR invoiceSender = '' OR (i.BatchId IS NOT NULL AND (SELECT COUNT(*) FROM `User` ut WHERE ut.ClientId = clientId AND FIND_IN_SET(ut.UserId COLLATE utf8mb4_general_ci, invoiceSender) AND b.Sender IS NOT NULL AND CONCAT(ut.LastName, '', ut.FirstName) = b.Sender) > 0))
    AND (batchName IS NULL OR batchName = '' OR (i.BatchId IS NOT NULL AND b.BatchName LIKE CONCAT('%', batchName, '%')));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AdvancedSearchInvoice2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `AdvancedSearchInvoice2`(IN clientId INT,
IN userId CHAR(36) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN assignorUserId CHAR(36) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN isPausedFiltered BIT,
IN invoiceId INT,
IN scannedDateFrom DATE,
IN scannedDateTo DATE,
IN invoiceDateFrom DATE,
IN invoiceDateTo DATE,
IN paymentDueDateFrom DATE,
IN paymentDueDateTo DATE,
IN approvedDateFrom DATE,
IN approvedDateTo DATE,
IN rejectedDateFrom DATE,
IN rejectedDateTo DATE,
IN lastActionDateFrom DATE,
IN lastActionDateTo DATE,
IN invoiceNo VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN voucherNumber VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN accountCode VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN FilterByApprover BIT,
IN searchMyInvoice BIT,
IN approverIds CHAR(255),
IN vendor VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN currency VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN currencies VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN invoiceTotalFrom DECIMAL(18, 2),
IN invoiceTotalTo DECIMAL(18, 2),
IN taxFrom DECIMAL(18, 2),
IN taxTo DECIMAL(18, 2),
IN project VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN projects VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN companies CHAR(255),
IN department VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN departments VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN prepaymentNoteIds VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN poNo VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN checkNo VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN paymentmethod VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN paymentspec VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN vendbank VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN filterbyGLContent BIT,
IN glCode VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN glprojectType VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN gldescription VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN companyCode VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN isPOInvoice BIT,
IN isFactoryVendor BIT,
IN customerName VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN TransactionIdentifer VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN CheckDate DATE,
IN customerAddress VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN capitalProjectNo VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN paymentTypes VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN groupCode VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN coilNo VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN isAutoApproved BIT,
IN tranIdentifier VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci, -- transactionIdentifier
IN isExpiredPayment BIT,
IN paymentDateFrom DATE,
IN paymentDateTo DATE,
IN netTermDateFrom DATE,
IN netTermDateTo DATE,
IN invoiceStatuses VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN assignedTos VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN restrictToUser BIT,
IN locations VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN isHoldInvoice BIT,
IN isFilterViewForSupervisorByDepartmentEnabled BIT,
IN invoiceTypes VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN userClientCompanyCodes VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN isUserAdministrator BIT,
IN isFilterByDepartmentEnabled BIT,
IN isConfidential BIT,
IN searchInvoiceArgument1FieldasWhole BIT,
IN userField1 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN userField2 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN userField3 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN userField4 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN userField5 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN userField6 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN userField7 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN userField8 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN userField9 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN userField10 VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN wholeArgs VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN lineItemDescription VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN vendorSite VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN deliveryNumber VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN checkDateFrom DATE,
IN checkDateTo DATE,
IN invoiceSources VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN invoiceSender VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN jpyToUSD DOUBLE,
IN cadToUSD DOUBLE,
IN rmbToUSD DOUBLE,
IN filterOneTimeVendor VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN showGLDesciriptionForExportEnabled BIT,
IN isUrgentInvoice BIT,
IN isDeletedInvoice BIT,
IN orgIdentifier VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN allowDeletedInvoiceSearch BIT,
IN batchName VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci,
IN descriptions VARCHAR(255) CHARSET utf8mb4 COLLATE utf8mb4_general_ci)
BEGIN
  SET @negativeCurrency = "-1";
  SET @usdEquivalent = 0;
  SET @emptyUUID = '00000000-0000-0000-0000-000000000000';
  SET @likeStartParamForGL = (CASE WHEN filterbyGLContent = FALSE THEN '' ELSE '%' END);
  SELECT
    i.InvoiceId,
    v.PaymentMethod,
    v.PaymentSpec,
    v.VendBankId,
    i.InvoiceNo,
    i.VoucherNumber,
    v.VendorId,
    v.VendorName,
    v.VendorNo,
    v.IsConfidential AS IsConfidential_v,
    i.IsConfidential AS IsConfidential_i,
    i.PONumber,
    i.CompanyCode,
    i.ScannedDate,
    i.IsPaused,
    i.InvoiceDate,
    i.PaymentDueDate,
    i.RejectedDate,
    i.NetTermDate,
    i.InvoiceTotal,
    i.Description,
    i.ApprovalStatusId,
    ist.StateName AS InvoiceStatusName,
    i.InvoiceType,
    UserField3,
    UserField4,
    od.OrgName AS Division,
    i.LastActionBy,
    i.LastActionDate,
    i.CheckNumber,
    CONCAT(approver.LastName, ', ', approver.FirstName) AS ApprovedBy,
    i.AprovedDate,
    i.ApproverId,
    -- TransactionIdentifier FROM PaymentStatus -- QUESTION OUT??
    i.DeliveryNumber,
    b.Source AS InvoiceSource,
    GetAssignedTosString(i.InvoiceId) AS AssignedTo,
    (SELECT
        uia.DateCreated
      FROM UserInvoiceAssignment uia
      WHERE uia.InvoiceId = i.InvoiceId LIMIT 1) AS AssignedDate,
    GetInvoiceComment(i.InvoiceId, i.IsPaused) AS `Comment`,
    (SELECT
        lid.POType
      FROM LineItemDetail lid
      WHERE lid.InvoiceId = i.InvoiceId LIMIT 1) AS POType,
    i.Currency,
    @usdEquivalent AS USDEquvalent,
    -- USDEquvalent = calculated on Code internal
    d.DepartmentName AS Department,
    (CASE WHEN i.IsPOInvoice = FALSE THEN GetGLNumbersFromApprovalHistory(i.InvoiceId) ELSE GetGLNumbersFromLineItemDetail(i.InvoiceId) END) AS GLNumber,
    -- " " as GLDescription,
    (CASE WHEN showGLDesciriptionForExportEnabled = FALSE THEN " " ELSE GetGLDescriptionsFromApprovalHistory(i.InvoiceId) END) AS GLDescription,
    (SELECT
        GROUP_CONCAT(DISTINCT org.OrgId SEPARATOR ',') AS OrgId
      FROM ApprovalHistory ah
      USE INDEX (IX_InvoiceId, OrgId)
        INNER JOIN OrgData org
          ON ah.OrgId = org.Id
      WHERE ah.InvoiceId = invoiceId
      GROUP BY NULL) AS Location,
    b.Sender AS InvoiceSender, -- This needs to be verified    
    b.Receiver AS InvoiceReceiver,
    i.TransactionIdentifer, -- check with the above txn identifier - related with payment status
    i.ArchiveReason,
    i.CheckDate,
    i.AccountCode,
    i.SubCategoryType,
    GetProjectNamesFromApprovalHistory(i.InvoiceId, i.IsPOInvoice) AS ProjectType,
    i.VoucherNumber,
    i.UserField6,
    GetBuyerNameNew(i.InvoiceId) AS BuyerName,
    v.UserField1 AS IsUrgentInvoice,
    i.UserField1 AS UserField1,
    i.IsDeleted AS isDeletedInvoice,
    i.Tax
  FROM Invoice i
    LEFT OUTER JOIN InvoiceStatus ist
      ON i.ApprovalStatusId = ist.StateId
    LEFT OUTER JOIN Batch b
      ON i.BatchID = b.ID
    LEFT OUTER JOIN Vendor v
      ON i.VendorId = v.VendorId
    LEFT OUTER JOIN Department d
      ON i.VendorSiteId = d.Id
    LEFT OUTER JOIN ProjectType p
      ON i.ProjectTypeId = p.Id
    LEFT OUTER JOIN CustomerLocation cl
      ON i.CustomerLocationId = cl.CustomerLocationId
    LEFT OUTER JOIN Customer c
      ON cl.CustomerId = c.CustomerId
    LEFT OUTER JOIN Address ca
      ON cl.AddressId = ca.AddressId
    LEFT OUTER JOIN OrgData od
      ON i.OrgId = od.Id
    LEFT OUTER JOIN `User` AS approver
      ON i.ApproverId = approver.UserId
  WHERE i.ClientId = clientId
  AND ((isDeletedInvoice = FALSE
  AND i.IsDeleted = 0)
  OR (isDeletedInvoice = TRUE
  AND i.IsDeleted = 1)
  OR allowDeletedInvoiceSearch = TRUE)
  AND (isPausedFiltered IS NULL
  OR i.IsPaused = isPausedFiltered)
  AND (orgIdentifier IS NULL
  OR orgIdentifier = ''
  OR i.OrgId = orgIdentifier)
  AND (invoiceId IS NULL
  OR i.InvoiceId = invoiceId)
  AND (scannedDateFrom IS NULL
  OR i.ScannedDate >= scannedDateFrom)
  AND (scannedDateTo IS NULL
  OR i.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
  AND (invoiceDateFrom IS NULL
  OR i.InvoiceDate >= invoiceDateFrom)
  AND (invoiceDateTo IS NULL
  OR i.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))
  AND (paymentDueDateFrom IS NULL
  OR i.PaymentDueDate >= paymentDueDateFrom)
  AND (paymentDueDateTo IS NULL
  OR i.PaymentDueDate < DATE_ADD(paymentDueDateTo, INTERVAL 1 DAY))
  AND (approvedDateFrom IS NULL
  OR i.AprovedDate >= approvedDateFrom)
  AND (approvedDateTo IS NULL
  OR i.AprovedDate < DATE_ADD(approvedDateTo, INTERVAL 1 DAY))
  AND (rejectedDateFrom IS NULL
  OR i.RejectedDate >= rejectedDateFrom)
  AND (rejectedDateTo IS NULL
  OR i.RejectedDate < DATE_ADD(rejectedDateTo, INTERVAL 1 DAY))
  AND (lastActionDateFrom IS NULL
  OR i.LastActionDate >= lastActionDateFrom)
  AND (lastActionDateTo IS NULL
  OR i.LastActionDate < DATE_ADD(lastActionDateTo, INTERVAL 1 DAY))
  AND (invoiceNo IS NULL
  OR invoiceNo = ''
  OR i.InvoiceNo LIKE CONCAT('', invoiceNo, '%'))
  AND (descriptions IS NULL
  OR descriptions = ''
  OR i.Description LIKE CONCAT('', descriptions, '%'))
  AND (voucherNumber IS NULL
  OR voucherNumber = ''
  OR i.VoucherNumber LIKE CONCAT('', voucherNumber, '%'))
  AND (accountCode IS NULL
  OR accountCode = ''
  OR i.AccountCode LIKE CONCAT('', accountCode, '%'))
  AND (FilterByApprover = FALSE
  OR (i.ApproverId = userId
  OR i.ApproverId = assignorUserId))
  AND (searchMyInvoice = FALSE
  OR i.ApproverId = userId)
  AND (isUrgentInvoice = FALSE
  OR (isUrgentInvoice = TRUE
  AND v.UserField1 = 'True'))
  AND ((approverIds IS NULL
  OR approverIds = '')
  OR (i.ApproverId IS NOT NULL
  AND FIND_IN_SET(i.ApproverId, approverIds))
  OR EXISTS (SELECT
      *
    FROM UserInvoiceAssignment uia
    WHERE uia.InvoiceId = i.InvoiceId
    AND FIND_IN_SET(uia.UserId, approverIds))
  OR EXISTS (SELECT
      *
    FROM UserInvoiceAssignmentHistory uiah
    WHERE uiah.InvoiceId = i.InvoiceId
    AND uiah.FromApprovalSubStepUserId IS NOT NULL
    AND FIND_IN_SET(uiah.FromApprovalSubStepUserId, approverIds))
  OR EXISTS (SELECT
      *
    FROM UserInvoiceAssignmentHistory uiah
    WHERE uiah.InvoiceId = i.InvoiceId
    AND uiah.ToApprovalSubStepUserId IS NOT NULL
    AND FIND_IN_SET(uiah.ToApprovalSubStepUserId, approverIds)))
  AND (vendor IS NULL
  OR vendor = ''
  OR v.VendorName LIKE CONCAT('', vendor, '%')
  OR v.VendorNo LIKE CONCAT('', vendor, '%'))
  AND ((currencies IS NULL
  OR currencies = '')
  OR (i.Currency IS NOT NULL
  AND FIND_IN_SET(i.Currency, currencies))
  OR (!FIND_IN_SET(@negativeCurrency, currencies)))
  AND (invoiceTotalFrom IS NULL
  OR (!FIND_IN_SET(@negativeCurrency, currencies)
  AND i.InvoiceTotal >= invoiceTotalFrom)
  OR (FIND_IN_SET(@negativeCurrency, currencies)
  AND (CASE WHEN i.Currency = 'JPY' THEN i.InvoiceTotal * jpyToUSD >= invoiceTotalFrom WHEN i.Currency = 'CAD' THEN i.InvoiceTotal * cadToUSD >= invoiceTotalFrom WHEN i.Currency = 'RMB' THEN i.InvoiceTotal * rmbToUSD >= invoiceTotalFrom ELSE i.InvoiceTotal >= invoiceTotalFrom END)
  ))
  AND (invoiceTotalTo IS NULL
  OR (!FIND_IN_SET(@negativeCurrency, currencies)
  AND i.InvoiceTotal <= invoiceTotalTo)
  OR (FIND_IN_SET(@negativeCurrency, currencies)
  AND (CASE WHEN i.Currency = 'JPY' THEN i.InvoiceTotal * jpyToUSD <= invoiceTotalTo WHEN i.Currency = 'CAD' THEN i.InvoiceTotal * cadToUSD <= invoiceTotalTo WHEN i.Currency = 'RMB' THEN i.InvoiceTotal * rmbToUSD >= invoiceTotalTo ELSE i.InvoiceTotal >= invoiceTotalTo END)
  ))
  AND (taxFrom IS NULL
  OR taxFrom = ''
  OR ConvertToDecimal(i.UserField7) >= taxFrom)
  AND (taxTo IS NULL
  OR taxTo = ''
  OR ConvertToDecimal(i.UserField7) >= taxTo)
  AND ((project IS NULL
  OR project = '')
  AND (projects IS NULL
  OR projects = '')
  OR (project IS NOT NULL
  AND project <> ''
  AND (p.ProjectName LIKE CONCAT('', project, '%')
  OR p.Description LIKE CONCAT('', project, '%')))
  OR (projects IS NOT NULL
  AND projects <> ''
  AND FIND_IN_SET(p.Id, projects))
  )
  AND (companies IS NULL
  OR companies = ''
  OR FIND_IN_SET(i.CompanyCode, companies)
  OR FIND_IN_SET(i.Description, companies))
  AND ((department IS NULL
  OR department = '')
  AND (departments IS NULL
  OR departments = '')
  OR (department IS NOT NULL
  AND department <> ''
  AND (d.DepartmentName LIKE CONCAT('', DepartmentName, '%')
  OR d.Description LIKE CONCAT('', department, '%')))
  OR (departments IS NOT NULL
  AND departments <> ''
  AND (FIND_IN_SET(d.Id, departments)
  OR (i.IsPOInvoice = FALSE
  AND (SELECT
      COUNT(*)
    FROM ApprovalHistory ah
    WHERE ah.InvoiceId = i.InvoiceId
    AND FIND_IN_SET(ah.DepartmentId, departments)) > 0)
  ))
  )
  and (prepaymentNoteIds is null or prepaymentNoteIds ='' or (FIND_IN_SET(i.PrepaymentNoteId, prepaymentNoteIds)>0))
  AND (userField1 IS NULL
  OR userField1 = ''
  OR i.UserField1 LIKE CONCAT('%', userField1, '%'))
  AND (poNo IS NULL
  OR poNo = ''
  OR i.PONumber LIKE CONCAT('%', poNo, '%'))
  AND (checkNo IS NULL
  OR checkNo = ''
  OR i.CheckNumber LIKE CONCAT('', checkNo, '%'))
  AND (paymentmethod IS NULL
  OR paymentmethod = ''
  OR v.PaymentMethod LIKE CONCAT('', paymentmethod, '%'))
  AND (paymentspec IS NULL
  OR paymentspec = ''
  OR v.PaymentSpec LIKE CONCAT('', paymentspec, '%'))
  AND (vendbank IS NULL
  OR vendbank = ''
  OR v.VendBankId LIKE CONCAT('', vendbank, '%'))
  AND (glCode IS NULL
  OR glCode = ''
  OR ExistsInApprovalHistory(i.InvoiceId, 'GLCode', glCode, @likeStartParamForGL) = TRUE)
  AND (glprojectType IS NULL
  OR glprojectType = ''
  OR ExistsInApprovalHistory(i.InvoiceId, 'ProjectType', glprojectType, '') = TRUE)
  -- AND (gldescription IS NULL OR gldescription = '' OR ExistsInApprovalHistory(i.InvoiceId, 'GLDescription', gldescription, '') = TRUE)
  AND (gldescription IS NULL
  OR gldescription = ''
  OR EXISTS (SELECT
      *
    FROM ApprovalHistory ah
    WHERE ah.InvoiceId = i.InvoiceId
    AND ah.SpecialNote LIKE CONCAT('', gldescription, '%')))
  AND (companyCode IS NULL
  OR companyCode = ''
  OR ExistsInApprovalHistory(i.InvoiceId, 'CompanyCode', companyCode, '') = TRUE
  OR i.CompanyCode LIKE CONCAT('', companyCode, '%'))
  AND (isPOInvoice IS NULL
  OR i.IsPOInvoice = isPOInvoice)
  AND (isFactoryVendor IS NULL OR v.IsFactoryVendor = isFactoryVendor)
  AND (customerName IS NULL
  OR customerName = ''
  OR c.CustomerName LIKE CONCAT('%', customerName, '%'))
  AND (TransactionIdentifer IS NULL
  OR TransactionIdentifer = ''
  OR i.TransactionIdentifer LIKE CONCAT('%', TransactionIdentifer, '%'))
  AND (CheckDate IS NULL
  -- OR CheckDate = ''
  OR i.UserField4 LIKE CONCAT('%', CheckDate, '%'))
  AND (customerAddress IS NULL
  OR customerAddress = ''
  OR ca.StreetName LIKE CONCAT('%', customerAddress, '%')
  OR ca.Address1 LIKE CONCAT('%', customerAddress, '%'))
  AND (capitalProjectNo IS NULL
  OR capitalProjectNo = ''
  OR (i.IsPOInvoice = TRUE
  AND (SELECT
      COUNT(*)
    FROM LineItemDetail lid
    WHERE lid.InvoiceId = i.InvoiceId
    AND lid.CapitalProjectNo = capitalProjectNo) > 0))
  AND (paymentTypes IS NULL
  OR paymentTypes = ''
  OR (i.VendorId IS NOT NULL
  AND FIND_IN_SET(v.PaymentType, paymentTypes)))
  AND (groupCode IS NULL
  OR groupCode = ''
  OR (i.CustomerLocationId IS NOT NULL
  AND c.CustomerNo LIKE CONCAT('', groupCode, '%')))
  AND (coilNo IS NULL
  OR coilNo = ''
  OR (SELECT
      COUNT(*)
    FROM LineItemDetail lid
    WHERE lid.InvoiceId = i.InvoiceId
    AND lid.ProductId LIKE CONCAT('', coilNo, '%')) > 0
  )
  -- AUTO APPROVE START
  AND (isAutoApproved IS NULL
  OR isAutoApproved = ''
  OR (isAutoApproved = TRUE
  AND (
  (i.ApprovalStatusId = 3
  AND EXISTS (SELECT
      *
    FROM AutoApproveReport ar
    WHERE ar.InvoiceId = i.InvoiceId))
  OR EXISTS (SELECT
      *
    FROM InvoiceHistory ih
    WHERE ih.InvoiceId = i.InvoiceId
    AND ih.ActorId = @emptyUUID
    AND ih.Field = 'Invoice Status'
    AND ih.InitialStatus = 'In Approval'
    AND ih.CurrentStatus = 'Approved'))
  )
  OR (isAutoApproved = FALSE
  AND NOT EXISTS (SELECT
      *
    FROM AutoApproveReport ar
    WHERE ar.InvoiceId = i.InvoiceId)
  AND NOT EXISTS (SELECT
      *
    FROM InvoiceHistory ih
    WHERE ih.InvoiceId = i.InvoiceId
    AND ih.ActorId = @emptyUUID
    AND ih.Field = 'Invoice Status'
    AND ih.InitialStatus = 'In Approval'
    AND ih.CurrentStatus = 'Approved'))
  )
  -- AUTO APPROVE END
  AND (tranIdentifier IS NULL
  OR tranIdentifier = ''
  OR (SELECT
      COUNT(*)
    FROM PaymentStatus ps
    WHERE ps.InvoiceId = i.InvoiceId
    AND ps.TransactionIdentifier = tranIdentifier) > 0
  )
  AND (isExpiredPayment IS NULL
  OR isExpiredPayment = ''
  OR (isExpiredPayment = TRUE
  AND (i.Reissued = TRUE
  OR (SELECT
      COUNT(*)
    FROM PaymentStatus ps
    WHERE ps.InvoiceId = i.InvoiceId
    AND ps.TransactionIdentifier = "EXPIRED") > 0))
  OR (isExpiredPayment = FALSE
  AND (i.Reissued = FALSE
  OR (SELECT
      COUNT(*)
    FROM PaymentStatus ps
    WHERE ps.InvoiceId = i.InvoiceId
    AND ps.TransactionIdentifier = "EXPIRED") = 0))
  )
  AND (paymentDateFrom IS NULL
  -- OR paymentDateFrom = ''
  OR (SELECT
      COUNT(*)
    FROM PaymentStatus ps
    WHERE ps.InvoiceId = i.InvoiceId
    AND ps.ReceivedDate >= paymentDateFrom) > 0)
  AND (paymentDateTo IS NULL
  -- OR paymentDateTo = ''
  OR (SELECT
      COUNT(*)
    FROM PaymentStatus ps
    WHERE ps.InvoiceId = i.InvoiceId
    AND ps.ReceivedDate < DATE_ADD(paymentDateTo, INTERVAL 1 DAY)) > 0)
  AND (netTermDateFrom IS NULL
  -- OR netTermDateFrom = ''
  OR i.NetTermDate >= netTermDateFrom)
  AND (netTermDateTo IS NULL
  -- OR netTermDateTo = ''
  OR i.NetTermDate < DATE_ADD(netTermDateTo, INTERVAL 1 DAY))
  AND (invoiceStatuses IS NULL
  OR invoiceStatuses = ''
  OR (i.ApprovalStatusId IS NOT NULL
  AND FIND_IN_SET(i.ApprovalStatusId, invoiceStatuses)))
  AND (assignedTos IS NULL
  OR assignedTos = ''
  OR ((restrictToUser IS NULL
  OR restrictToUser <> TRUE)
  AND (SELECT
      COUNT(*)
    FROM UserInvoiceAssignment uia
    WHERE uia.InvoiceId = i.InvoiceId
    AND FIND_IN_SET(uia.UserId, assignedTos)) > 0)
  OR (restrictToUser = TRUE
  AND (SELECT
      COUNT(*)
    FROM UserInvoiceAssignment uia
    WHERE uia.InvoiceId = i.InvoiceId
    AND FIND_IN_SET(uia.UserId, assignedTos)) > 0
  AND (SELECT
      COUNT(*)
    FROM UserInvoiceAssignment uia
    WHERE uia.InvoiceId = i.InvoiceId
    AND FIND_IN_SET(uia.UserId, assignedTos)) = 0)
  )
  AND (locations IS NULL
  OR locations = ''
  OR FIND_IN_SET(i.OrgId, locations)
  OR (SELECT
      COUNT(*)
    FROM ApprovalHistory ah
    WHERE ah.InvoiceId = i.InvoiceId
    AND FIND_IN_SET(ah.OrgId, locations)))
  AND (isHoldInvoice IS NULL
  OR (isHoldInvoice = TRUE
  AND (SELECT
      COUNT(*)
    FROM UserInvoiceAssignment uia
    WHERE uia.InvoiceId = i.InvoiceId
    AND uia.HoldEndDate IS NOT NULL
    AND uia.HoldEndDate > CURDATE()) > 0)
  OR (isHoldInvoice = FALSE
  AND (SELECT
      COUNT(*)
    FROM UserInvoiceAssignment uia
    WHERE uia.InvoiceId = i.InvoiceId
    AND uia.HoldEndDate IS NOT NULL
    AND uia.HoldEndDate > CURDATE()) = 0)
  )
  AND (isFilterViewForSupervisorByDepartmentEnabled = FALSE
  OR IsInvoiceDepartmentInUserDepartments(userId, i.InvoiceId)
  OR IsInvoiceDepartmentInUserDepartments(assignorUserId, i.InvoiceId))
  AND (invoiceTypes IS NULL
  OR invoiceTypes = ''
  OR FIND_IN_SET(i.InvoiceType, invoiceTypes)
  OR (i.Reissued = TRUE
  AND FIND_IN_SET("expired", invoiceTypes)))
  -- AND (userClientCompanyCodes IS NULL OR userClientCompanyCodes = '' OR i.CompanyCode IN("'" + userClientCompanyCodes + "'"))
  -- AND (userClientCompanyCodes IS NULL OR userClientCompanyCodes = '' OR FIND_IN_SET(REPLACE(i.CompanyCode, ',',''), userClientCompanyCodes))
  AND (userClientCompanyCodes IS NULL
  OR userClientCompanyCodes = ''
  OR InvoiceExistsInUserCompanies(clientId, userId, i.CompanyCode) = 1)
  AND (isUserAdministrator = TRUE
  OR isFilterByDepartmentEnabled = FALSE
  OR IsInvoiceDepartmentInUserDepartments(userId, i.InvoiceId))
  AND (department IS NULL
  OR department = ''
  OR ExistsInApprovalHistory(i.InvoiceId, 'Department', department, '') = TRUE)
  AND (isConfidential IS NULL
  OR isConfidential = ''
  OR (CASE WHEN i.VendorId IS NOT NULL AND
      v.IsConfidential THEN v.IsConfidential = isConfidential WHEN i.IsConfidential IS NULL THEN isConfidential = FALSE ELSE i.IsConfidential = isConfidential END)
  )
  AND (userField1 IS NULL
  OR userField1 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField1", wholeArgs) THEN i.UserField1 = UserField1 ELSE i.UserField1 LIKE CONCAT('', userField1, '%') END))
  AND (userField2 IS NULL
  OR userField2 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField2", wholeArgs) THEN i.UserField2 = UserField2 ELSE i.UserField2 LIKE CONCAT('', userField2, '%') END))
  AND (userField3 IS NULL
  OR userField3 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField3", wholeArgs) THEN i.UserField3 = UserField3 ELSE i.UserField3 LIKE CONCAT('', userField3, '%') END))
  AND (userField4 IS NULL
  OR userField4 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField4", wholeArgs) THEN i.UserField4 = UserField4 ELSE i.UserField4 LIKE CONCAT('', userField4, '%') END))
  AND (userField5 IS NULL
  OR userField5 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField5", wholeArgs) THEN i.UserField5 = UserField5 ELSE i.UserField5 LIKE CONCAT('', userField5, '%') END))
  AND (userField6 IS NULL
  OR userField6 = ''
  OR i.UserField6 = userField6)
  AND (filterOneTimeVendor IS NULL
  OR filterOneTimeVendor = ''
  OR i.UserField6 LIKE CONCAT('%', filterOneTimeVendor, '%'))
  AND (userField7 IS NULL
  OR userField7 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField7", wholeArgs) THEN i.UserField7 = UserField7 ELSE i.UserField7 LIKE CONCAT('', userField7, '%') END))
  AND (userField8 IS NULL
  OR userField8 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField8", wholeArgs) THEN i.UserField8 = UserField8 ELSE i.UserField8 LIKE CONCAT('', userField8, '%') END))
  AND (userField9 IS NULL
  OR userField9 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField9", wholeArgs) THEN i.UserField9 = UserField9 ELSE i.UserField9 LIKE CONCAT('', userField9, '%') END))
  AND (userField10 IS NULL
  OR userField10 = ''
  OR (CASE WHEN searchInvoiceArgument1FieldasWhole AND
      FIND_IN_SET("UserField10", wholeArgs) THEN i.UserField10 = UserField10 ELSE i.UserField10 LIKE CONCAT('', userField10, '%') END))
  AND (currency IS NULL
  OR currency = ''
  OR i.Currency LIKE CONCAT('', currency, '%'))
  AND (lineItemDescription IS NULL
  OR lineItemDescription = ''
  OR (SELECT
      COUNT(*)
    FROM LineItemDetail lid
    WHERE lid.InvoiceId = i.InvoiceId
    AND (lid.Description LIKE CONCAT('', lineItemDescription, '%')
    OR lid.ProductDescription LIKE CONCAT('', lineItemDescription, '%'))) > 0)
  AND (vendorSite IS NULL
  OR vendorSite = ''
  OR d.DepartmentName LIKE CONCAT('', vendorSite, '%')
  OR d.Description LIKE CONCAT('', vendorSite, '%'))
  AND (deliveryNumber IS NULL
  OR deliveryNumber = ''
  OR i.DeliveryNumber LIKE CONCAT('', deliveryNumber, '%'))
  AND (checkDateFrom IS NULL
  -- OR checkDateFrom = ''
  OR i.CheckDate >= checkDateFrom)
  AND (checkDateTo IS NULL
  -- OR checkDateTo = ''
  OR i.CheckDate < DATE_ADD(checkDateTo, INTERVAL 1 DAY))
  AND (invoiceSources IS NULL
  OR invoiceSources = ''
  OR (i.BatchId IS NOT NULL
  AND FIND_IN_SET(b.Source, invoiceSources)))
  AND (invoiceSender IS NULL
  OR invoiceSender = ''
  OR (i.BatchId IS NOT NULL
  AND (SELECT
      COUNT(*)
    FROM `User` ut
    WHERE ut.ClientId = clientId
    AND FIND_IN_SET(ut.UserId, invoiceSender)
    AND b.Sender IS NOT NULL
    AND CONCAT(ut.LastName, '', ut.FirstName) = b.Sender) > 0
  ))
  AND (batchName IS NULL
  OR batchName = ''
  OR (i.BatchId IS NOT NULL
  AND b.BatchName LIKE CONCAT('%', batchName, '%')))
  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `AlreadyCapturedInvoice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `AlreadyCapturedInvoice`(IN emailSender varchar(250),
IN emailReceiver varchar(250),
IN emailDate date,
IN emailSubject varchar(250),
IN emailAttachments text)
BEGIN
  SELECT
    COUNT(*)
  FROM EmailCaptureLog
  WHERE Sender = emailSender
  AND Receiver = emailReceiver
  AND Subject = emailSubject
  AND DATE(date) = DATE(emailDate)
  AND Attachments = emailAttachments
  AND emailSubject IN (SELECT
      ecce.EmailSubject
    FROM EmailCaptureClientEmails ecce
      INNER JOIN EmailCaptureAttachments eca
        ON eca.EmailCaptureClientEmailId = ecce.EmailCaptureClientEmailId
    WHERE ecce.EmailSource = emailSender
    AND DATE(ecce.ReceivedDateTime) = DATE(emailDate)
    AND emailAttachments LIKE CONCAT('%', eca.EmailAttachmentName, '%'));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ApprovalUserInvoiceAssignmentCount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ApprovalUserInvoiceAssignmentCount`(IN userIdP char(36),
IN vendorIdP int, IN lockedBeforeP datetime)
BEGIN
  SELECT
    COUNT(*)
  FROM UserInvoiceAssignment uia
  WHERE uia.UserId = userIdP
  AND uia.`Type` = 0
  AND (uia.HoldEndDate IS NULL
  OR uia.HoldEndDate < CURDATE())
  AND uia.InvoiceId IN (SELECT
      inv.InvoiceId
    FROM Invoice inv
    WHERE inv.VendorId = vendorIdP
    AND inv.IsPaused = 0
    AND (inv.ApprovalStatusId = 3
    OR inv.ApprovalStatusId = 4)
    AND inv.IsDeleted = 0
    AND (inv.IsLocked = 0
    OR inv.LockedAt < lockedBeforeP
    OR inv.LockedBy = userIdP));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ApproverPerformance` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ApproverPerformance`(startDate datetime, endDate datetime)
BEGIN
  DROP TABLE IF EXISTS T1;
  DROP TABLE IF EXISTS T2;
  DROP TABLE IF EXISTS T3;
  DROP TABLE IF EXISTS T4;
  DROP TABLE IF EXISTS T5;
  DROP TABLE IF EXISTS T6;
  DROP TABLE IF EXISTS T7;
  DROP TABLE IF EXISTS T8;

  CREATE TEMPORARY TABLE T1 (
    InvoiceId int NULL,
    `Actor` nvarchar(250) NULL,
    ActionDate datetime NULL,
    PreviousData nvarchar(500) NULL,
    NewData nvarchar(500) NULL,
    Field nvarchar(250) NULL,
    InitialStatus nvarchar(50) NULL,
    CurrentStatus nvarchar(50) NULL,
    ActorId char(36) NULL
  );

  CREATE TEMPORARY TABLE T2 (
    InvoiceId int NULL,
    Actor nvarchar(250) NULL,
    ActionDate datetime NULL,
    PreviousData nvarchar(500) NULL,
    NewData nvarchar(500) NULL,
    Field nvarchar(250) NULL,
    InitialStatus nvarchar(50) NULL,
    CurrentStatus nvarchar(50) NULL,
    ActorId char(36) NULL
  );

  CREATE TEMPORARY TABLE T5 (
    InvoiceId int NULL,
    `Actor` nvarchar(250) NULL,
    ActionDate datetime NULL,
    PreviousData nvarchar(500) NULL,
    NewData nvarchar(500) NULL,
    Field nvarchar(250) NULL,
    InitialStatus nvarchar(50) NULL,
    CurrentStatus nvarchar(50) NULL,
    ActorId char(36) NULL
  );

  CREATE TEMPORARY TABLE T6 (
    InvoiceId int NULL,
    Actor nvarchar(250) NULL,
    ActionDate datetime NULL,
    PreviousData nvarchar(500) NULL,
    NewData nvarchar(500) NULL,
    Field nvarchar(250) NULL,
    InitialStatus nvarchar(50) NULL,
    CurrentStatus nvarchar(50) NULL,
    ActorId char(36) NULL
  );

  INSERT INTO T1
    SELECT
      invoiceid,
      actor,
      actiondate,
      previousdata,
      newdata,
      field,
      initialstatus,
      currentstatus,
      actorid
    FROM InvoiceHistory
    WHERE actorid IN (SELECT
        userid
      FROM `User`
      WHERE clientid = 1)
    AND initialstatus = 'captured'
    AND currentstatus = 'in approval'
    AND actiondate >= startDate
    AND actiondate < endDate;

  -- select * from T1;

  INSERT INTO T2
    SELECT
      invoiceid,
      actor,
      actiondate,
      previousdata,
      newdata,
      field,
      initialstatus,
      currentstatus,
      actorid
    FROM InvoiceHistory
    WHERE actorid IN (SELECT
        userid
      FROM `User`
      WHERE clientid = 1)
    AND initialstatus = 'in approval'
    AND currentstatus = 'approved'
    AND actiondate >= startDate
    AND actiondate < endDate;

  INSERT INTO T5
    SELECT
      invoiceid,
      actor,
      actiondate,
      previousdata,
      newdata,
      field,
      initialstatus,
      currentstatus,
      actorid
    FROM InvoiceHistory
    WHERE actorid IN (SELECT
        userid
      FROM `User`
      WHERE clientid = 1)
    AND initialstatus = 'captured'
    AND currentstatus = 'in approval'
    AND actiondate >= DATE_FORMAT(NOW(), '%Y-01-01')
    AND actiondate < endDate;

  -- select * from T1;'2016-01-01'

  INSERT INTO T6
    SELECT
      invoiceid,
      actor,
      actiondate,
      previousdata,
      newdata,
      field,
      initialstatus,
      currentstatus,
      actorid
    FROM InvoiceHistory
    WHERE actorid IN (SELECT
        userid
      FROM `User`
      WHERE clientid = 1)
    AND initialstatus = 'in approval'
    AND currentstatus = 'approved'
    AND actiondate >= DATE_FORMAT(NOW(), '%Y-01-01')
    AND actiondate < endDate;


  CREATE TEMPORARY TABLE T3 (
    assignedOn datetime,
    approveddate datetime,
    invoiceid int,
    actor nvarchar(250),
    datedif float
  );

  CREATE TEMPORARY TABLE T4 (
    assignedOn datetime,
    approveddate datetime,
    invoiceid int,
    actor nvarchar(250),
    datedif float
  );

  CREATE TEMPORARY TABLE T7 (
    assignedOn datetime,
    approveddate datetime,
    invoiceid int,
    actor nvarchar(250),
    datedif float
  );

  CREATE TEMPORARY TABLE T8 (
    assignedOn datetime,
    approveddate datetime,
    invoiceid int,
    actor nvarchar(250),
    datedif float
  );

  INSERT INTO T3
    SELECT
      o.actiondate AS assignedOn,
      t.actiondate AS approvedDate,
      o.invoiceid,
      t.actor,
      DATEDIFF(t.actiondate, o.actiondate)
    FROM T1 o
      LEFT JOIN T2 t
        ON o.invoiceid = t.invoiceid;

  INSERT INTO T4
    SELECT
      o.actiondate AS assignedOn,
      t.actiondate AS approvedDate,
      o.invoiceid,
      t.actor,
      DATEDIFF(t.actiondate, o.actiondate)
    FROM T1 o
      LEFT JOIN T2 t
        ON o.invoiceid = t.invoiceid;

  INSERT INTO T7
    SELECT
      o.actiondate AS assignedOn,
      t.actiondate AS approvedDate,
      o.invoiceid,
      t.actor,
      DATEDIFF(t.actiondate, o.actiondate)
    FROM T5 o
      LEFT JOIN T6 t
        ON o.invoiceid = t.invoiceid;

  INSERT INTO T8
    SELECT
      o.actiondate AS assignedOn,
      t.actiondate AS approvedDate,
      o.invoiceid,
      t.actor,
      DATEDIFF(t.actiondate, o.actiondate)
    FROM T5 o
      LEFT JOIN T6 t
        ON o.invoiceid = t.invoiceid;

  -- select * from T3;

  SELECT
    T3.actor,
    ROUND(AVG(T3.datedif), 5) AS `Average`,
    MAX(T3.datedif) AS `Maximum`,
    ROUND(AVG(T7.datedif), 5) AS `YearlyAverage`,
    (SELECT
        COUNT(a.invoiceid)
      FROM T4 a
      WHERE a.actor = T3.actor) AS `Total`,
    (SELECT
        COUNT(b.invoiceid)
      FROM T8 b
      WHERE b.actor = T3.actor) AS `YearlyTotal`
  -- , avg(T13.datedif) as`YearlyAverage`
  FROM T3
    INNER JOIN T7
      ON T3.actor = T7.actor
  WHERE T3.actor IS NOT NULL
  GROUP BY T3.actor;

  DROP TABLE IF EXISTS T1;
  DROP TABLE IF EXISTS T2;
  DROP TABLE IF EXISTS T3;
  DROP TABLE IF EXISTS T4;
  DROP TABLE IF EXISTS T5;
  DROP TABLE IF EXISTS T6;
  DROP TABLE IF EXISTS T7;
  DROP TABLE IF EXISTS T8;

/*Select concat(u.LastName, ' ',  u.FiirstName) Actor , Average, Maximum, Total, YearlyAverage, YearlyTotal 
From ApproverPerformanceReport apr 
Inner Join User u on u.UserId = apr.ActorId
where WeekOf = startDate;*/
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CalculateAverages` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `CalculateAverages`(IN startdate date,
IN enddate date)
BEGIN
  -- YearlyAverage
  SELECT
    ToApprovalSubStepUserId,
    AVG(DATEDIFF(ApprovedDate, AssignDate)) AS YearlyAverage
  FROM (SELECT
      a.InvoiceId,
      a.ToApprovalSubStepUserId,
      a.AssignDate,
      b.InvoiceId AS ApprovedInvoiceId,
      b.FromApprovalSubStepUserId,
      b.ApprovedDate
    FROM (SELECT
        uih1.InvoiceId,
        uih1.ToApprovalSubStepUserId,
        uih1.ApprovedOn AS AssignDate,
        @row_number1 := IF(@prev1 = CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId), @row_number1 + 1, 1) AS RowNum,
        @prev1 := CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId)
      FROM UserInvoiceAssignmentHistory uih1
        CROSS JOIN (SELECT
            @row_number1 := 0,
            @prev1 := '') AS vars
      WHERE uih1.ToApprovalSubStepUserId IS NOT NULL
      AND uih1.ApprovedOn >= startdate
      AND uih1.ApprovedOn <= enddate
      ORDER BY uih1.InvoiceId, uih1.ToApprovalSubStepUserId, uih1.ApprovedOn) a
      JOIN (SELECT
          uih2.InvoiceId,
          uih2.FromApprovalSubStepUserId,
          uih2.ApprovedOn AS ApprovedDate,
          @row_number2 := IF(@prev2 = CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId), @row_number2 + 1, 1) AS RowNum,
          @prev2 := CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId)
        FROM UserInvoiceAssignmentHistory uih2
          CROSS JOIN (SELECT
              @row_number2 := 0,
              @prev2 := '') AS vars
        WHERE uih2.FromApprovalSubStepUserId IS NOT NULL
        AND uih2.ApprovedOn >= startdate
        AND uih2.ApprovedOn <= enddate
        ORDER BY uih2.InvoiceId, uih2.FromApprovalSubStepUserId, uih2.ApprovedOn) b
        ON a.InvoiceId = b.InvoiceId
        AND a.ToApprovalSubStepUserId = b.FromApprovalSubStepUserId
        AND a.RowNum = b.RowNum
    ORDER BY a.InvoiceId, a.AssignDate) AS UserApprovalData
  WHERE AssignDate >= startdate
  AND AssignDate <= enddate
  GROUP BY ToApprovalSubStepUserId;

  -- MonthlyAverage
  SELECT
    ToApprovalSubStepUserId,
    AVG(DATEDIFF(ApprovedDate, AssignDate)) AS MonthlyAverage
  FROM (SELECT
      a.InvoiceId,
      a.ToApprovalSubStepUserId,
      a.AssignDate,
      b.InvoiceId AS ApprovedInvoiceId,
      b.FromApprovalSubStepUserId,
      b.ApprovedDate
    FROM (SELECT
        uih1.InvoiceId,
        uih1.ToApprovalSubStepUserId,
        uih1.ApprovedOn AS AssignDate,
        @row_number1 := IF(@prev1 = CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId), @row_number1 + 1, 1) AS RowNum,
        @prev1 := CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId)
      FROM UserInvoiceAssignmentHistory uih1
        CROSS JOIN (SELECT
            @row_number1 := 0,
            @prev1 := '') AS vars
      WHERE uih1.ToApprovalSubStepUserId IS NOT NULL
      AND uih1.ApprovedOn >= startdate
      AND uih1.ApprovedOn <= enddate
      ORDER BY uih1.InvoiceId, uih1.ToApprovalSubStepUserId, uih1.ApprovedOn) a
      JOIN (SELECT
          uih2.InvoiceId,
          uih2.FromApprovalSubStepUserId,
          uih2.ApprovedOn AS ApprovedDate,
          @row_number2 := IF(@prev2 = CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId), @row_number2 + 1, 1) AS RowNum,
          @prev2 := CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId)
        FROM UserInvoiceAssignmentHistory uih2
          CROSS JOIN (SELECT
              @row_number2 := 0,
              @prev2 := '') AS vars
        WHERE uih2.FromApprovalSubStepUserId IS NOT NULL
        AND uih2.ApprovedOn >= startdate
        AND uih2.ApprovedOn <= enddate
        ORDER BY uih2.InvoiceId, uih2.FromApprovalSubStepUserId, uih2.ApprovedOn) b
        ON a.InvoiceId = b.InvoiceId
        AND a.ToApprovalSubStepUserId = b.FromApprovalSubStepUserId
        AND a.RowNum = b.RowNum
    ORDER BY a.InvoiceId, a.AssignDate) AS UserApprovalData
  WHERE AssignDate >= startdate
  AND AssignDate <= enddate
  GROUP BY ToApprovalSubStepUserId;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CalculateAverages1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `CalculateAverages1`(IN p_ClientId int,
IN p_YearDateFrom datetime,
IN p_DateTo datetime,
IN p_ApplicableInvoiceStatuses varchar(1000))
BEGIN
  SET @StartDateOfMonth = DATE_FORMAT(p_DateTo, '%Y-%m-01');
  SET @TotalMonths = TIMESTAMPDIFF(MONTH, p_YearDateFrom, p_DateTo);
  -- YearlyAverage and MonthlyAverage
  SELECT

    u.FromApprovalSubStepUserId AS ActorId,
    SUM(CASE WHEN MONTH(u.AssignDate) = MONTH(p_DateTo) AND
        YEAR(u.AssignDate) = YEAR(p_DateTo) THEN DATEDIFF(u.ApprovedDate, u.AssignDate) ELSE 0 END) AS test,
    COUNT(CASE WHEN MONTH(u.AssignDate) = MONTH(p_DateTo) AND
        YEAR(u.AssignDate) = YEAR(p_DateTo) THEN u.InvoiceId END) AS noofInvoices,
    (SUM(CASE WHEN MONTH(u.AssignDate) = MONTH(p_DateTo) AND
        YEAR(u.AssignDate) = YEAR(p_DateTo) THEN DATEDIFF(u.ApprovedDate, u.AssignDate) ELSE 0 END)) / (COUNT(DISTINCT CASE WHEN MONTH(u.AssignDate) = MONTH(p_DateTo) AND
        YEAR(u.AssignDate) = YEAR(p_DateTo) THEN u.InvoiceId ELSE 0 END)) AS PreviesMonthAverage,
    MAX(CASE WHEN MONTH(u.AssignDate) = MONTH(p_DateTo) AND
        YEAR(u.AssignDate) = YEAR(p_DateTo) THEN DATEDIFF(u.ApprovedDate, u.AssignDate) ELSE 0 END) AS MaximumDays,
    COUNT(DISTINCT u.InvoiceId) AS MonthlyTotal,
    SUM(DATEDIFF(u.ApprovedDate, u.AssignDate)) / COUNT(DISTINCT u.InvoiceId) / @TotalMonths AS MonthlyAverage,
    MAX(DATEDIFF(u.ApprovedDate, u.AssignDate)) AS MonthlyMaximumDays

  FROM (SELECT
      a.InvoiceId,
      a.ToApprovalSubStepUserId,
      a.AssignDate,
      b.FromApprovalSubStepUserId,
      b.ApprovedDate
    FROM (SELECT
        uih1.InvoiceId,
        uih1.ToApprovalSubStepUserId,
        uih1.ApprovedOn AS AssignDate,
        @row_number1 := IF(@prev1 = CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId), @row_number1 + 1, 1) AS RowNum,
        @prev1 := CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId)
      FROM UserInvoiceAssignmentHistory uih1
        CROSS JOIN (SELECT
            @row_number1 := 0,
            @prev1 := '') AS vars
      WHERE uih1.ToApprovalSubStepUserId IS NOT NULL
      AND uih1.ApprovedOn >= p_YearDateFrom
      AND uih1.ApprovedOn <= p_DateTo
      ORDER BY uih1.InvoiceId, uih1.ToApprovalSubStepUserId, uih1.ApprovedOn) a
      JOIN (SELECT
          uih2.InvoiceId,
          uih2.FromApprovalSubStepUserId,
          uih2.ApprovedOn AS ApprovedDate,
          @row_number2 := IF(@prev2 = CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId), @row_number2 + 1, 1) AS RowNum,
          @prev2 := CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId)
        FROM UserInvoiceAssignmentHistory uih2
          CROSS JOIN (SELECT
              @row_number2 := 0,
              @prev2 := '') AS vars
        WHERE uih2.FromApprovalSubStepUserId IS NOT NULL
        AND uih2.ApprovedOn >= p_YearDateFrom
        AND uih2.ApprovedOn <= p_DateTo
        ORDER BY uih2.InvoiceId, uih2.FromApprovalSubStepUserId, uih2.ApprovedOn) b
        ON a.InvoiceId = b.InvoiceId
        AND a.ToApprovalSubStepUserId = b.FromApprovalSubStepUserId
        AND a.RowNum = b.RowNum
    ORDER BY a.InvoiceId, a.AssignDate) AS u
    INNER JOIN Invoice i
      ON u.InvoiceId = i.InvoiceId
  WHERE u.AssignDate >= p_YearDateFrom
  AND u.AssignDate <= p_DateTo
  AND i.ClientId = p_ClientId
  AND FIND_IN_SET(i.ApprovalStatusId, p_ApplicableInvoiceStatuses) > 0
  GROUP BY u.FromApprovalSubStepUserId;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CalculateAverages4` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `CalculateAverages4`(IN startdate date,
IN enddate date)
BEGIN
  SET @StartDateOfMonth = DATE_FORMAT(enddate, '%Y-%m-01');

  -- Yearly Average Calculation
  SELECT
    ToApprovalSubStepUserId,
    AVG(DATEDIFF(ApprovedDate, AssignDate)) AS YearlyAverage,
    COUNT(DISTINCT UserApprovalData.InvoiceId) AS YearlyInvoiceCount
  FROM (SELECT
      a.InvoiceId,
      a.ToApprovalSubStepUserId,
      a.AssignDate,
      b.InvoiceId AS ApprovedInvoiceId,
      b.FromApprovalSubStepUserId,
      b.ApprovedDate
    FROM (SELECT
        uih1.InvoiceId,
        uih1.ToApprovalSubStepUserId,
        uih1.ApprovedOn AS AssignDate,
        @row_number1 := IF(@prev1 = CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId), @row_number1 + 1, 1) AS RowNum,
        @prev1 := CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId)
      FROM UserInvoiceAssignmentHistory uih1
        CROSS JOIN (SELECT
            @row_number1 := 0,
            @prev1 := '') AS vars
      WHERE uih1.ToApprovalSubStepUserId IS NOT NULL
      AND uih1.ApprovedOn >= startdate
      AND uih1.ApprovedOn <= enddate
      ORDER BY uih1.InvoiceId, uih1.ToApprovalSubStepUserId, uih1.ApprovedOn) a
      JOIN (SELECT
          uih2.InvoiceId,
          uih2.FromApprovalSubStepUserId,
          uih2.ApprovedOn AS ApprovedDate,
          @row_number2 := IF(@prev2 = CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId), @row_number2 + 1, 1) AS RowNum,
          @prev2 := CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId)
        FROM UserInvoiceAssignmentHistory uih2
          CROSS JOIN (SELECT
              @row_number2 := 0,
              @prev2 := '') AS vars
        WHERE uih2.FromApprovalSubStepUserId IS NOT NULL
        AND uih2.ApprovedOn >= startdate
        ORDER BY uih2.InvoiceId, uih2.FromApprovalSubStepUserId, uih2.ApprovedOn) b
        ON a.InvoiceId = b.InvoiceId
        AND a.ToApprovalSubStepUserId = b.FromApprovalSubStepUserId
        AND a.RowNum = b.RowNum
    ORDER BY a.InvoiceId, a.AssignDate) AS UserApprovalData
    INNER JOIN Invoice i
      ON UserApprovalData.InvoiceId = i.InvoiceId
  WHERE UserApprovalData.AssignDate >= startdate
  AND UserApprovalData.AssignDate <= enddate
  AND ClientId = 98
  GROUP BY ToApprovalSubStepUserId;

  -- Monthly Average Calculation
  SELECT
    ToApprovalSubStepUserId,
    AVG(DATEDIFF(ApprovedDate, AssignDate)) AS MonthlyAverage,
    COUNT(DISTINCT UserApprovalData.InvoiceId) AS MonthlyInvoiceCount
  FROM (SELECT
      a.InvoiceId,
      a.ToApprovalSubStepUserId,
      a.AssignDate,
      b.InvoiceId AS ApprovedInvoiceId,
      b.FromApprovalSubStepUserId,
      b.ApprovedDate
    FROM (SELECT
        uih1.InvoiceId,
        uih1.ToApprovalSubStepUserId,
        uih1.ApprovedOn AS AssignDate,
        @row_number1 := IF(@prev1 = CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId), @row_number1 + 1, 1) AS RowNum,
        @prev1 := CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId)
      FROM UserInvoiceAssignmentHistory uih1
        CROSS JOIN (SELECT
            @row_number1 := 0,
            @prev1 := '') AS vars
      WHERE uih1.ToApprovalSubStepUserId IS NOT NULL
      AND uih1.ApprovedOn >= startdate
      AND uih1.ApprovedOn <= enddate
      ORDER BY uih1.InvoiceId, uih1.ToApprovalSubStepUserId, uih1.ApprovedOn) a
      JOIN (SELECT
          uih2.InvoiceId,
          uih2.FromApprovalSubStepUserId,
          uih2.ApprovedOn AS ApprovedDate,
          @row_number2 := IF(@prev2 = CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId), @row_number2 + 1, 1) AS RowNum,
          @prev2 := CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId)
        FROM UserInvoiceAssignmentHistory uih2
          CROSS JOIN (SELECT
              @row_number2 := 0,
              @prev2 := '') AS vars
        WHERE uih2.FromApprovalSubStepUserId IS NOT NULL
        AND uih2.ApprovedOn >= startdate
        ORDER BY uih2.InvoiceId, uih2.FromApprovalSubStepUserId, uih2.ApprovedOn) b
        ON a.InvoiceId = b.InvoiceId
        AND a.ToApprovalSubStepUserId = b.FromApprovalSubStepUserId
        AND a.RowNum = b.RowNum
    ORDER BY a.InvoiceId, a.AssignDate) AS UserApprovalData
    INNER JOIN Invoice i
      ON UserApprovalData.InvoiceId = i.InvoiceId
  WHERE UserApprovalData.AssignDate >= @StartDateOfMonth
  AND UserApprovalData.AssignDate <= enddate
  AND i.ClientId = 98
  GROUP BY ToApprovalSubStepUserId;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CalculateAveragesWithInvoice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `CalculateAveragesWithInvoice`(IN startdate date,
IN enddate date)
BEGIN
  -- YearlyAverage and MonthlyAverage
  SELECT
    i.InvoiceId,
    u.ToApprovalSubStepUserId,
    AVG(DATEDIFF(u.ApprovedDate, u.AssignDate)) AS YearlyAverage,
    AVG(CASE WHEN MONTH(u.ApprovedDate) = MONTH(enddate) THEN DATEDIFF(u.ApprovedDate, u.AssignDate) END) AS MonthlyAverage
  FROM (SELECT
      a.InvoiceId,
      a.ToApprovalSubStepUserId,
      a.AssignDate,
      b.FromApprovalSubStepUserId,
      b.ApprovedDate
    FROM (SELECT
        uih1.InvoiceId,
        uih1.ToApprovalSubStepUserId,
        uih1.ApprovedOn AS AssignDate,
        @row_number1 := IF(@prev1 = CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId), @row_number1 + 1, 1) AS RowNum,
        @prev1 := CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId)
      FROM UserInvoiceAssignmentHistory uih1
        CROSS JOIN (SELECT
            @row_number1 := 0,
            @prev1 := '') AS vars
      WHERE uih1.ToApprovalSubStepUserId IS NOT NULL
      AND uih1.ApprovedOn >= startdate
      AND uih1.ApprovedOn <= enddate
      ORDER BY uih1.InvoiceId, uih1.ToApprovalSubStepUserId, uih1.ApprovedOn) a
      JOIN (SELECT
          uih2.InvoiceId,
          uih2.FromApprovalSubStepUserId,
          uih2.ApprovedOn AS ApprovedDate,
          @row_number2 := IF(@prev2 = CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId), @row_number2 + 1, 1) AS RowNum,
          @prev2 := CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId)
        FROM UserInvoiceAssignmentHistory uih2
          CROSS JOIN (SELECT
              @row_number2 := 0,
              @prev2 := '') AS vars
        WHERE uih2.FromApprovalSubStepUserId IS NOT NULL
        AND uih2.ApprovedOn >= startdate
        AND uih2.ApprovedOn <= enddate
        ORDER BY uih2.InvoiceId, uih2.FromApprovalSubStepUserId, uih2.ApprovedOn) b
        ON a.InvoiceId = b.InvoiceId
        AND a.ToApprovalSubStepUserId = b.FromApprovalSubStepUserId
        AND a.RowNum = b.RowNum
    ORDER BY a.InvoiceId, a.AssignDate) AS u
    INNER JOIN Invoice i
      ON u.InvoiceId = i.InvoiceId
  WHERE u.AssignDate >= startdate
  AND u.AssignDate <= enddate
  GROUP BY i.InvoiceId,
           u.ToApprovalSubStepUserId;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CheckUserHasAccessToGlAndDepartment` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `CheckUserHasAccessToGlAndDepartment`(IN theUser nvarchar(50),
IN theGLID int,
IN theDepartmentId int)
BEGIN
  IF NOT EXISTS (SELECT
        *
      FROM ApproverGLCode
      WHERE UserId = theUser
      AND GLCodeId = theGLID) THEN
    SELECT
      FALSE;
  ELSEIF NOT EXISTS (SELECT
        *
      FROM UserDepartment
      WHERE UserId = theUser
      AND DepartmentId = theDepartmentId) THEN
    SELECT
      FALSE;
  ELSE
    SELECT
      TRUE;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CleanBatch` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `CleanBatch`(IN myBatchID int)
BEGIN
  DELETE
    FROM Exception
  WHERE InvoiceId IN (SELECT
        InvoiceID
      FROM Invoice
      WHERE ApprovalStatusId <> 5
      AND ApprovalStatusId <> 4
      AND BatchID = myBatchID);

  DELETE
    FROM InvoiceHistory
  WHERE InvoiceId IN (SELECT
        InvoiceID
      FROM Invoice
      WHERE ApprovalStatusId <> 5
      AND ApprovalStatusId <> 4
      AND BatchID = myBatchID);

  DELETE
    FROM InvoiceDocs
  WHERE InvoiceId IN (SELECT
        InvoiceID
      FROM Invoice
      WHERE ApprovalStatusId <> 5
      AND ApprovalStatusId <> 4
      AND BatchID = myBatchID);

  DELETE
    FROM ExceptionHistory
  WHERE InvoiceId IN (SELECT
        InvoiceID
      FROM Invoice
      WHERE ApprovalStatusId <> 5
      AND ApprovalStatusId <> 4
      AND BatchID = myBatchID);

  DELETE
    FROM ApproverSetting
  WHERE InvoiceId IN (SELECT
        InvoiceID
      FROM Invoice
      WHERE ApprovalStatusId <> 5
      AND ApprovalStatusId <> 4
      AND BatchID = myBatchID);

  DELETE
    FROM ApprovalHistory
  WHERE InvoiceId IN (SELECT
        InvoiceID
      FROM Invoice
      WHERE ApprovalStatusId <> 5
      AND ApprovalStatusId <> 4
      AND BatchID = myBatchID);

  DELETE
    FROM Notification
  WHERE InvoiceId IN (SELECT
        InvoiceID
      FROM Invoice
      WHERE ApprovalStatusId <> 5
      AND ApprovalStatusId <> 4
      AND BatchID = myBatchID);

  DELETE
    FROM DelegationHistory
  WHERE InvoiceId IN (SELECT
        InvoiceID
      FROM Invoice
      WHERE ApprovalStatusId <> 5
      AND ApprovalStatusId <> 4
      AND BatchID = myBatchID);

  DELETE
    FROM UserInvoiceAssignment
  WHERE InvoiceId IN (SELECT
        InvoiceID
      FROM Invoice
      WHERE ApprovalStatusId <> 5
      AND ApprovalStatusId <> 4
      AND BatchID = myBatchID);

  DELETE
    FROM ExportList
  WHERE InvoiceId IN (SELECT
        InvoiceID
      FROM Invoice
      WHERE ApprovalStatusId <> 5
      AND ApprovalStatusId <> 4
      AND BatchID = myBatchID);

  DELETE
    FROM Invoice
  WHERE ApprovalStatusId <> 5
    AND ApprovalStatusId <> 4
    AND BatchID = myBatchID;

  DELETE
    FROM Batch
  WHERE ID = myBatchID;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CleanPOData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `CleanPOData`(IN POClientId int)
BEGIN
  DELETE
    FROM PO
  WHERE PO.ClientId = POClientId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ColemanGetUserLimitHierarchy` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ColemanGetUserLimitHierarchy`()
BEGIN

  SELECT
    CONCAT(d.`DepartmentName`, ' - ', d.`Description`) AS Department,
    FirstUser.Email AS FirstApprover,
    limit1.`MaximumAllowedAmount`,
    SecondUser.Email AS SecondApprover,
    GetNextLevelManager(d.Id, SecondUser.UserId, 'Amount') AS Amount,
    GetNextLevelManager(d.Id, SecondUser.UserId, 'Email') AS ThirdApprover,
    GetNextLevelManager(d.Id, GetNextLevelManager(d.Id, SecondUser.UserId, 'UserId'), 'Amount') AS Amount,
    GetNextLevelManager(d.Id, GetNextLevelManager(d.Id, SecondUser.UserId, 'UserId'), 'Email') AS FourthApprover,

    (SELECT
        t.Email
      FROM ApprovalSubStepUserDepartment asd
        INNER JOIN ApprovalSubStep ast
          ON ast.ApprovalSubStepId = asd.ApprovalSubStepId
        INNER JOIN User t
          ON t.UserId = asd.UserId
        INNER JOIN ApprovalStep st
          ON st.ApprovalStepId = ast.ApprovalStepId
      WHERE asd.DepartmentId = d.Id
      AND st.ClientCompanyId = 414
      AND st.OrderNo = 1 LIMIT 1) AS BusinessAdvisor

  FROM Department d

    LEFT OUTER JOIN ApproverByAmount limit1
      ON d.Id IN (limit1.CostCenters)
    LEFT OUTER JOIN User FirstUser
      ON FirstUser.UserId = limit1.UserId
    LEFT OUTER JOIN User SecondUser
      ON SecondUser.UserId = limit1.SecondApproverId

  WHERE d.ClientId = 89;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DataEntryPerformanceReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `DataEntryPerformanceReport`(IN startDate datetime,
IN endDate datetime)
BEGIN
  DROP TEMPORARY TABLE IF EXISTS DataEntryPerformanceTableResults;
  CREATE TEMPORARY TABLE DataEntryPerformanceTableResults (
    `Client` varchar(1000),
    `FullName` varchar(1000),
    `SubmitCount` int,
    `ValidationCount` int,
    `ExceptionUpdateCount` int
  );
  INSERT INTO DataEntryPerformanceTableResults
    SELECT
      UCASE(Client.`CustomerName`) `Client`,
      UCASE(CONCAT(FirstName, ' ', LastName)) `FullName`,
      (SELECT
          COUNT(DISTINCT Performance.InvoiceId)
        FROM Performance
        WHERE Performance.`UserId` = `User`.`UserId`
        AND Performance.`ActionDate` >= startDate
        AND Performance.`ActionDate` <= endDate
        AND Performance.`ActionType` = 0) `SubmitCount`,
      (SELECT
          COUNT(DISTINCT Performance.InvoiceId)
        FROM Performance
        WHERE Performance.`UserId` = `User`.`UserId`
        AND Performance.`ActionDate` >= startDate
        AND Performance.`ActionDate` <= endDate
        AND Performance.`ActionType` = 1) `ValidationCount`,
      (SELECT
          COUNT(DISTINCT Performance.InvoiceId)
        FROM Performance
        WHERE Performance.`UserId` = `User`.`UserId`
        AND Performance.`ActionDate` >= startDate
        AND Performance.`ActionDate` <= endDate
        AND Performance.`ActionType` = 2) `ExceptionUpdateCount`
    FROM `User`
      INNER JOIN `Client`
        ON User.`ClientId` = Client.`ClientId`
    WHERE (RoleId = 4
    OR EXISTS (SELECT
        *
      FROM UserRoles
      WHERE UserRoles.RoleId = 4
      AND `User`.`UserId` = UserRoles.`UserId`))
    AND `User`.IsActive = 1
    AND ((SELECT
        COUNT(DISTINCT Performance.InvoiceId)
      FROM Performance
      WHERE Performance.`UserId` = `User`.`UserId`
      AND Performance.`ActionDate` >= startDate
      AND Performance.`ActionDate` <= endDate
      AND Performance.`ActionType` = 0) > 0
    OR (SELECT
        COUNT(DISTINCT Performance.InvoiceId)
      FROM Performance
      WHERE Performance.`UserId` = `User`.`UserId`
      AND Performance.`ActionDate` >= startDate
      AND Performance.`ActionDate` <= endDate
      AND Performance.`ActionType` = 1) > 0
    OR (SELECT
        COUNT(DISTINCT Performance.InvoiceId)
      FROM Performance
      WHERE Performance.`UserId` = `User`.`UserId`
      AND Performance.`ActionDate` >= startDate
      AND Performance.`ActionDate` <= endDate
      AND Performance.`ActionType` = 2) > 0);
  SELECT
    `FullName`,
    GROUP_CONCAT(CONCAT(`Client`, ' Submit Count: ', `SubmitCount`, ', Validation Count: ', `ValidationCount`, ', Exception Update Count: ', `ExceptionUpdateCount`, '; ') SEPARATOR '') `Client`,
    SUM(`SubmitCount`) `SubmitCount`,
    SUM(`ValidationCount`) `ValidationCount`,
    SUM(`ExceptionUpdateCount`) `ExceptionUpdateCount`,
    (SUM(`SubmitCount`) + SUM(`ValidationCount`) + SUM(`ExceptionUpdateCount`)) AS TotalInvoioceProccessed
  FROM DataEntryPerformanceTableResults PerformanceR
  GROUP BY `FullName`
  ORDER BY `FullName` DESC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DiscountEarned` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `DiscountEarned`(startDate datetime, endDate datetime)
BEGIN
  -- DECLARE InvoiceTotal DECIMAL;
  -- DECLARE DiscountInvoiceTotal DECIMAL;
  -- DECLARE DiscountTotal DECIMAL;

  SET @InvoiceTotal = (SELECT
      SUM(InvoiceTotal)
    FROM Invoice
    WHERE ClientId = 1
    AND NetTermDate < endDate
    AND NetTermDate >= startDate
    AND (InvoiceType = 'Invoice')
    AND isdeleted = 0);

  SET @DiscountInvoiceTotal = (SELECT
      SUM(InvoiceTotal)
    FROM Invoice
    WHERE ClientId = 1
    AND NetTermDate < endDate
    AND NetTermDate >= startDate
    AND NetTermDiscount > 0
    AND (InvoiceType = 'Invoice'
    OR InvoiceType = 'Credit')
    AND isdeleted = 0);

  SET @DiscountTotal = (SELECT
      SUM(NetTermDiscount)
    FROM Invoice
    WHERE ClientId = 1
    AND NetTermDate < endDate
    AND NetTermDate >= startDate
    AND (InvoiceType = 'Invoice')
    AND isdeleted = 0);

  SELECT
    (CASE WHEN @DiscountInvoiceTotal IS NULL THEN 0 ELSE @DiscountInvoiceTotal END) AS
    AggrigateDiscountInvoiceTotal,
    (CASE WHEN @InvoiceTotal IS NULL THEN 0 ELSE @InvoiceTotal END) AS InvoiceTotal,
    (CASE WHEN @DiscountTotal IS NULL THEN 0 ELSE @DiscountTotal END) AS DiscountAvaliable,
    (SUM(CASE WHEN NetTermDiscount IS NULL THEN 0 ELSE NetTermDiscount END)) AS PaidOnTimeCount
  FROM Invoice
  WHERE ClientId = 1
  AND NetTermDate <= endDate
  AND NetTermDate >= startDate
  AND ApprovalStatusId = 7
  AND LastActionDate <= NetTermDate
  AND (InvoiceType = 'Invoice')
  AND isdeleted = 0;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `EmailCaptureStatus` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `EmailCaptureStatus`(IN clientId int,
IN logSubject varchar(255), IN logSender varchar(255), IN logDate date)
BEGIN
  SELECT
    COUNT(i.InvoiceId)
  FROM EmailCaptureClientEmails ecce
    INNER JOIN EmailCaptureClients ecc
      ON ecc.EmailCaptureClientId = ecce.EmailCaptureClientId
    INNER JOIN EmailCaptureAttachments eca
      ON eca.EmailCaptureClientEmailId = ecce.EmailCaptureClientEmailId
    INNER JOIN Batch b
      ON b.BatchName LIKE CONCAT('%', eca.NewAttachmentName, '%')
    INNER JOIN Invoice i
      ON i.BatchID = b.ID
  WHERE b.ClientID = clientId
  AND ecc.ClientId = clientId
  AND EmailSource = logSender
  AND DATE(ReceivedDateTime) = DATE(logDate)
  AND ecce.EmailSubject = logSubject;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `EmailCaptureStatusCaptured` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `EmailCaptureStatusCaptured`(IN clientId int, IN dateFrom date, IN dateTo date,
IN subject varchar(255), IN sender varchar(255))
BEGIN
  SELECT
    ecce.*
  FROM EmailCaptureClientEmails ecce
    INNER JOIN EmailCaptureAttachments eca
      ON eca.EmailCaptureClientEmailId = ecce.EmailCaptureClientEmailId
    INNER JOIN Batch b
      ON b.BatchName LIKE CONCAT('%', eca.NewAttachmentName, '%')

  WHERE DATE(ecce.ReceivedDateTime) >= dateFrom
  AND DATE(ecce.ReceivedDateTime) <= dateTo
  AND b.ClientID = clientId
  AND (sender IS NULL
  OR ecce.EmailSource LIKE CONCAT('%', sender, '%'))
  AND (subject IS NULL
  OR ecce.EmailSubject LIKE CONCAT('%', subject, '%'));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ExceptionUserInvoiceAssignmentCount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ExceptionUserInvoiceAssignmentCount`(IN userIdP char(36), IN typeP int, IN clientIdP int, IN lockedBeforeP datetime)
BEGIN
  SELECT
    COUNT(*)
  FROM UserInvoiceAssignment uia
  WHERE (uia.UserId = userIdP
  OR uia.UserId = '00000000-0000-0000-0000-000000000000')
  AND uia.`Type` = typeP
  AND uia.State = 1
  AND (uia.HoldEndDate IS NULL
  OR uia.HoldEndDate < CURDATE())
  AND uia.InvoiceId IN (SELECT
      inv.InvoiceId
    FROM Invoice inv
    WHERE inv.ClientId = clientIdP
    AND inv.IsPaused = 0
    AND inv.ApprovalStatusId = 6
    AND inv.IsDeleted = 0
    AND (inv.IsLocked = 0
    OR inv.LockedAt < lockedBeforeP
    OR inv.LockedBy = userIdP));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetActiveTemporaryAssignorListForAssignee` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetActiveTemporaryAssignorListForAssignee`(IN paramUserId char(36),
IN paramCurrentDate datetime,
IN paramWorkflowType int)
BEGIN
  SELECT
    UserReassignmentHistory.SourceUserId
  FROM `UserReassignmentHistory`
  WHERE UserReassignmentHistory.TargetUserId = paramUserId
  AND UserReassignmentHistory.IsPermanent = FALSE
  AND (paramWorkflowType = 2
  OR UserReassignmentHistory.WorkflowType = 2
  OR UserReassignmentHistory.WorkflowType = paramWorkflowType)
  AND (UserReassignmentHistory.DateFrom <= paramCurrentDate
  AND (UserReassignmentHistory.DateTo IS NULL
  OR UserReassignmentHistory.DateTo > paramCurrentDate));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetActiveTemporaryAssignorsForAssigneeList` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetActiveTemporaryAssignorsForAssigneeList`(IN paramUserId char(36),
IN paramCurrentDate datetime,
IN paramWorkflowType int)
BEGIN
  SELECT
    UserReassignmentHistory.SourceUserId
  FROM `UserReassignmentHistory`
  WHERE UserReassignmentHistory.TargetUserId = paramUserId
  AND UserReassignmentHistory.IsPermanent = FALSE
  AND (paramWorkflowType = 2
  OR UserReassignmentHistory.WorkflowType = 2
  OR UserReassignmentHistory.WorkflowType = paramWorkflowType)
  AND (UserReassignmentHistory.DateFrom <= paramCurrentDate
  AND (UserReassignmentHistory.DateTo IS NULL
  OR UserReassignmentHistory.DateTo > paramCurrentDate));
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetAdminInvoiceCount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetAdminInvoiceCount`(IN clientId int,
IN CountFor varchar(29))
BEGIN
  IF CountFor = 'Paused' THEN
    SELECT
      COUNT(*)
    FROM Invoice
    WHERE Invoice.clientId = clientId
    AND ispaused = 1
    AND isdeleted = 0;
  ELSEIF CountFor = 'Captured' THEN
    SELECT
      COUNT(*)
    FROM Invoice
    WHERE Invoice.clientId = clientId
    AND ApprovalStatusId = 1
    AND isdeleted = 0
    AND isPaused = 0;
  ELSEIF CountFor = 'Exception' THEN
    SELECT
      COUNT(*)
    FROM Invoice
    WHERE Invoice.clientId = clientId
    AND ApprovalStatusId = 6
    AND isdeleted = 0
    AND isPaused = 0;
  ELSEIF CountFor = 'PoApproval' THEN
    SELECT
      COUNT(*)
    FROM Invoice
    WHERE Invoice.clientId = clientId
    AND ApprovalStatusId = 3
    AND isdeleted = 0
    AND isPaused = 0
    AND isPOInvoice = 1
    AND Invoice.InvoiceId IN (SELECT
        invoiceid
      FROM UserInvoiceAssignment uia
      WHERE uia.InvoiceId = Invoice.InvoiceId
      AND (uia.HoldEndDate IS NULL
      OR uia.HoldEndDate < NOW()));
  ELSEIF CountFor = 'NoPoApproval' THEN
    SELECT
      COUNT(*)
    FROM Invoice
    WHERE Invoice.clientId = clientId
    AND ApprovalStatusId = 3
    AND isdeleted = 0
    AND isPaused = 0
    AND isPOInvoice = 0
    AND Invoice.InvoiceId IN (SELECT
        invoiceid
      FROM UserInvoiceAssignment uia
      WHERE uia.InvoiceId = Invoice.InvoiceId
      AND (uia.HoldEndDate IS NULL
      OR uia.HoldEndDate < NOW()));
  ELSEIF CountFor = 'HoldInvoices30Days' THEN
    SELECT
      COUNT(*)
    FROM Invoice
    WHERE Invoice.clientId = clientId
    AND ApprovalStatusId = 3
    AND isdeleted = 0
    AND isPaused = 0
    AND (Invoice.ScannedDate - NOW()) > 30
    AND Invoice.InvoiceId IN (SELECT
        invoiceid
      FROM UserInvoiceAssignment uia
      WHERE uia.InvoiceId = Invoice.InvoiceId
      AND uia.HoldStartDate <= NOW()
      AND uia.HoldEndDate >= NOW());
  ELSEIF CountFor = 'HoldInvoices15Days' THEN
    SELECT
      COUNT(*)
    FROM Invoice
    WHERE Invoice.clientId = clientId
    AND ApprovalStatusId = 3
    AND isdeleted = 0
    AND isPaused = 0
    AND (Invoice.ScannedDate - NOW()) <= 30
    AND (Invoice.ScannedDate - NOW()) > 15
    AND Invoice.InvoiceId IN (SELECT
        invoiceid
      FROM UserInvoiceAssignment uia
      WHERE uia.InvoiceId = Invoice.InvoiceId
      AND uia.HoldStartDate <= NOW()
      AND uia.HoldEndDate >= NOW());
  ELSEIF CountFor = 'HoldInvoices7Days' THEN
    SELECT
      COUNT(*)
    FROM Invoice
    WHERE Invoice.clientId = clientId
    AND ApprovalStatusId = 3
    AND isdeleted = 0
    AND isPaused = 0
    AND (Invoice.ScannedDate - NOW()) <= 15
    AND (Invoice.ScannedDate - NOW()) > 7
    AND Invoice.InvoiceId IN (SELECT
        invoiceid
      FROM UserInvoiceAssignment uia
      WHERE uia.InvoiceId = Invoice.InvoiceId
      AND uia.HoldStartDate <= NOW()
      AND uia.HoldEndDate >= NOW());
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetAllPaidInvoiceReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetAllPaidInvoiceReport`(IN clientId int, IN FromDate date, IN ToDate date)
BEGIN
  SELECT
    i.CompanyCode,
    v.VendorName AS Vendor,
    v.VendorNo,
    v.VendorType,
    i.InvoiceTotal AS Amount
  FROM Invoice i
    -- INNER JOIN InvoiceHistory ih ON ih.InvoiceId = i.InvoiceId
    INNER JOIN Vendor v
      ON v.VendorId = i.VendorId
  WHERE i.ClientId = clientId
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId IN (7, 11, 13)
  AND DATE(i.InvoiceDate) BETWEEN DATE(FromDate) AND DATE(ToDate)
  ORDER BY i.CompanyCode;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetApprovalInvoicesByCompanyandVendorFilterInQueue` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetApprovalInvoicesByCompanyandVendorFilterInQueue`(IN clientId int,
IN userId char(36),
IN sortOption int,
IN invoiceIndex int,
IN invoiceIdToBeUnlocked int,

IN companyCode nvarchar(50),
IN departmentId int,
IN vendorId int,
IN invoicePOType int,
IN approvalLevel int,
IN isNoPOOnly tinyint(1),
IN filterConfidential tinyint(1),
IN sortDirAsc tinyint(1),
IN sortField nvarchar(50),
IN lockedBefore datetime,
IN userIsAdministrator tinyint(1),
IN sortApproverQueueByIsPOInvoice tinyint(1),
IN sortApproverQueueByCompanyCode tinyint(1))
BEGIN
  SET @assignorUserId = GetActiveTemporaryAssignorForAssignee(userId, NOW(), 0);
  SET @isPOInvoicetype = (SELECT
      CASE WHEN (invoicePOType = -1 OR
          invoicePOType IS NULL) THEN NULL ELSE (CASE WHEN invoicePOType = 0 THEN FALSE ELSE TRUE END) END);

  -- UNLOCK ALL INVOICES (INVOICE WITH A SPECIFIC ID)
  UPDATE Invoice
  SET Invoice.`IsLocked` = 0
  WHERE Invoice.`ClientId` = clientId
  AND Invoice.`IsLocked` = TRUE
  AND Invoice.`IsDeleted` = FALSE
  AND ((invoiceIdToBeUnlocked <> 0
  AND Invoice.`InvoiceId` = invoiceIdToBeUnlocked)
  OR (invoiceIdToBeUnlocked = 0
  AND Invoice.`LockedBy` = userId
  AND (Invoice.`IsPOInvoice` = FALSE
  OR Invoice.`IsPOInvoice` = isNoPOOnly)));
  -- SELECT COUNT(*) FROM UserInvoiceAssignment UIA USE INDEX(IX_UserId) INNER JOIN Invoice ON (UIA.UserId = userId OR UIA.UserId = @assignorUserId) AND
  -- UIA.Type = 0 AND (@isPOInvoicetype IS NULL OR Invoice.`IsPOInvoice` = @isPOInvoicetype) AND UIA.InvoiceId = Invoice.`InvoiceId` AND Invoice.`IsPaused` = FALSE
  -- AND Invoice.`ApprovalStatusId` = 3 AND Invoice.`IsDeleted` = FALSE AND (Invoice.`IsLocked` = FALSE OR Invoice.`LockedAt` < lockedBefore OR Invoice.`LockedBy` = userId) AND
  -- (UIA.HoldEndDate IS NULL OR UIA.HoldEndDate < NOW()) AND
  -- (vendorId IS NULL OR vendorId = 0 OR Invoice.`VendorId` = vendorId) AND
  -- ((approvalLevel = 0 OR approvalLevel IS NULL OR EXISTS (SELECT * FROM ApprovalSubStep ASS WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId AND ASS.OrderNo = approvalLevel))) AND
  -- (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE)) INNER JOIN
  -- `Client` ON Invoice.`ClientId` = Client.`ClientId` INNER JOIN
  -- `User` ON UIA.UserId = `User`.`UserId` LEFT OUTER JOIN Vendor ON Vendor.`VendorId` = Invoice.`VendorId`
  -- WHERE filterConfidential = false OR (userIsAdministrator = TRUE or (CASE WHEN Invoice.VendorId IS NOT NULL AND Vendor.`IsConfidential` = TRUE then TRUE ELSE IFNULL(Invoice.`IsConfidential`, false) END) = FALSE);
  IF (sortApproverQueueByIsPOInvoice = TRUE) THEN
    SELECT
      UIA.*
    FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
      INNER JOIN Invoice
        ON (UIA.UserId = userId
        OR UIA.UserId = @assignorUserId)
        AND (UIA.Type = 0
        OR UIA.Type = 2)
        AND (@isPOInvoicetype IS NULL
        OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
        AND UIA.InvoiceId = Invoice.`InvoiceId`
        AND Invoice.`IsPaused` = FALSE
        AND Invoice.`ApprovalStatusId` = 3
        AND Invoice.`IsDeleted` = FALSE
        AND (Invoice.`IsLocked` = FALSE
        OR Invoice.`LockedAt` < lockedBefore
        OR Invoice.`LockedBy` = userId)
        AND (UIA.HoldEndDate IS NULL
        OR UIA.HoldEndDate < NOW())
        AND (vendorId IS NULL
        OR vendorId = 0
        OR Invoice.`VendorId` = vendorId)
        AND (companyCode IS NULL
        OR companyCode = ''
        OR Invoice.`CompanyCode` = companyCode)
        AND (departmentId IS NULL
        OR departmentId = 0
        OR Invoice.`VendorSiteId` = departmentId)
        AND ((approvalLevel = 0
        OR approvalLevel IS NULL
        OR EXISTS (SELECT
            *
          FROM ApprovalSubStep ASS
          WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId
          AND ASS.OrderNo = approvalLevel)))
        AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
        OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
      INNER JOIN `Client`
        ON Invoice.`ClientId` = Client.`ClientId`
      INNER JOIN `User`
        ON UIA.UserId = `User`.`UserId`
      LEFT OUTER JOIN Vendor
        ON Vendor.`VendorId` = Invoice.`VendorId`
    WHERE filterConfidential = FALSE
    OR (userIsAdministrator = TRUE
    OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
        Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE)

    ORDER BY UIA.State <> sortOption, UIA.State, Invoice.InvoiceDate
    LIMIT 1 OFFSET invoiceIndex;
  ELSEIF (sortApproverQueueByCompanyCode = TRUE) THEN
    SELECT
      UIA.*
    FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
      INNER JOIN Invoice
        ON (UIA.UserId = userId
        OR UIA.UserId = @assignorUserId)
        AND (UIA.Type = 0
        OR UIA.Type = 2)
        AND (@isPOInvoicetype IS NULL
        OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
        AND UIA.InvoiceId = Invoice.`InvoiceId`
        AND Invoice.`IsPaused` = FALSE
        AND Invoice.`ApprovalStatusId` = 3
        AND Invoice.`IsDeleted` = FALSE
        AND (Invoice.`IsLocked` = FALSE
        OR Invoice.`LockedAt` < lockedBefore
        OR Invoice.`LockedBy` = userId)
        AND (UIA.HoldEndDate IS NULL
        OR UIA.HoldEndDate < NOW())
        AND (vendorId IS NULL
        OR vendorId = 0
        OR Invoice.`VendorId` = vendorId)
        AND (companyCode IS NULL
        OR companyCode = ''
        OR Invoice.`CompanyCode` = companyCode)
        AND (departmentId IS NULL
        OR departmentId = 0
        OR Invoice.`VendorSiteId` = departmentId)
        AND ((approvalLevel = 0
        OR approvalLevel IS NULL
        OR EXISTS (SELECT
            *
          FROM ApprovalSubStep ASS
          WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId
          AND ASS.OrderNo = approvalLevel)))
        AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
        OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
      INNER JOIN `Client`
        ON Invoice.`ClientId` = Client.`ClientId`
      INNER JOIN `User`
        ON UIA.UserId = `User`.`UserId`
      LEFT OUTER JOIN Vendor
        ON Vendor.`VendorId` = Invoice.`VendorId`
    WHERE filterConfidential = FALSE
    OR (userIsAdministrator = TRUE
    OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
        Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE)

    ORDER BY Invoice.`CompanyCode`, UIA.State <> sortOption, UIA.State, Invoice.InvoiceDate
    LIMIT 1 OFFSET invoiceIndex;
  ELSE
    IF (sortOption = 1000) THEN
      SELECT
        UIA.*
      FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
        INNER JOIN Invoice
          ON (UIA.UserId = userId
          OR UIA.UserId = @assignorUserId)
          AND (UIA.Type = 0
          OR UIA.Type = 2)
          AND (@isPOInvoicetype IS NULL
          OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
          AND UIA.InvoiceId = Invoice.`InvoiceId`
          AND Invoice.`IsPaused` = FALSE
          AND Invoice.`ApprovalStatusId` = 3
          AND Invoice.`IsDeleted` = FALSE
          AND (Invoice.`IsLocked` = FALSE
          OR Invoice.`LockedAt` < lockedBefore
          OR Invoice.`LockedBy` = userId)
          AND (UIA.HoldEndDate IS NULL
          OR UIA.HoldEndDate < NOW())
          AND (vendorId IS NULL
          OR vendorId = 0
          OR Invoice.`VendorId` = vendorId)
          AND (companyCode IS NULL
          OR companyCode = ''
          OR Invoice.`CompanyCode` = companyCode)
          AND (departmentId IS NULL
          OR departmentId = 0
          OR Invoice.`VendorSiteId` = departmentId)
          AND ((approvalLevel = 0
          OR approvalLevel IS NULL
          OR EXISTS (SELECT
              *
            FROM ApprovalSubStep ASS
            WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId
            AND ASS.OrderNo = approvalLevel)))
          AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
          OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
        INNER JOIN `Client`
          ON Invoice.`ClientId` = Client.`ClientId`
        INNER JOIN `User`
          ON UIA.UserId = `User`.`UserId`
        LEFT OUTER JOIN Vendor
          ON Vendor.`VendorId` = Invoice.`VendorId`
      WHERE filterConfidential = FALSE
      OR (userIsAdministrator = TRUE
      OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
          Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE)

      ORDER BY Invoice.`ScannedDate`, Invoice.`InvoiceDate`
      LIMIT 1 OFFSET invoiceIndex;
    ELSE
      SELECT
        UIA.*
      FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
        INNER JOIN Invoice
          ON (UIA.UserId = userId
          OR UIA.UserId = @assignorUserId)
          AND (UIA.Type = 0
          OR UIA.Type = 2)
          AND (@isPOInvoicetype IS NULL
          OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
          AND UIA.InvoiceId = Invoice.`InvoiceId`
          AND Invoice.`IsPaused` = FALSE
          AND Invoice.`ApprovalStatusId` = 3
          AND Invoice.`IsDeleted` = FALSE
          AND (Invoice.`IsLocked` = FALSE
          OR Invoice.`LockedAt` < lockedBefore
          OR Invoice.`LockedBy` = userId)
          AND (UIA.HoldEndDate IS NULL
          OR UIA.HoldEndDate < NOW())
          AND (vendorId IS NULL
          OR vendorId = 0
          OR Invoice.`VendorId` = vendorId)
          AND (companyCode IS NULL
          OR companyCode = ''
          OR Invoice.`CompanyCode` = companyCode)
          AND (departmentId IS NULL
          OR departmentId = 0
          OR Invoice.`VendorSiteId` = departmentId)
          AND ((approvalLevel = 0
          OR approvalLevel IS NULL
          OR EXISTS (SELECT
              *
            FROM ApprovalSubStep ASS
            WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId
            AND ASS.OrderNo = approvalLevel)))
          AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
          OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
        INNER JOIN `Client`
          ON Invoice.`ClientId` = Client.`ClientId`
        INNER JOIN `User`
          ON UIA.UserId = `User`.`UserId`
        LEFT OUTER JOIN Vendor
          ON Vendor.`VendorId` = Invoice.`VendorId`
      WHERE filterConfidential = FALSE
      OR (userIsAdministrator = TRUE
      OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
          Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE)

      ORDER BY Invoice.`IsPOInvoice`, UIA.State <> sortOption, UIA.State, Invoice.InvoiceDate
      LIMIT 1 OFFSET invoiceIndex;
    END IF;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetApprovalInvoicesByCompanyandVendorFilterInQueueCount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetApprovalInvoicesByCompanyandVendorFilterInQueueCount`(IN clientId int,
IN userId char(36),
IN sortOption int,
IN invoiceIndex int,
IN invoiceIdToBeUnlocked int,
IN companyCode nvarchar(50),
IN departmentId int,
IN vendorId int,


IN invoicePOType int,
IN approvalLevel int,
IN isNoPOOnly tinyint(1),
IN filterConfidential tinyint(1),
IN sortDirAsc tinyint(1),
IN sortField nvarchar(50),
IN lockedBefore datetime,
IN userIsAdministrator tinyint(1),
IN sortApproverQueueByIsPOInvoice tinyint(1),
IN sortApproverQueueByCompanyCode tinyint(1))
BEGIN
  SET @assignorUserId = GetActiveTemporaryAssignorForAssignee(userId, NOW(), 0);
  SET @isPOInvoicetype = (SELECT
      CASE WHEN (invoicePOType = -1 OR
          invoicePOType IS NULL) THEN NULL ELSE (CASE WHEN invoicePOType = 0 THEN FALSE ELSE TRUE END) END);
  SELECT
    COUNT(*)
  FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
    INNER JOIN Invoice
      ON (UIA.UserId = userId
      OR UIA.UserId = @assignorUserId)
      AND (UIA.Type = 0
      OR UIA.Type = 2)
      AND (@isPOInvoicetype IS NULL
      OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
      AND UIA.InvoiceId = Invoice.`InvoiceId`
      AND Invoice.`IsPaused` = FALSE
      AND Invoice.`ApprovalStatusId` = 3
      AND Invoice.`IsDeleted` = FALSE
      AND (Invoice.`IsLocked` = FALSE
      OR Invoice.`LockedAt` < lockedBefore
      OR Invoice.`LockedBy` = userId)
      AND (UIA.HoldEndDate IS NULL
      OR UIA.HoldEndDate < NOW())
      AND (vendorId IS NULL
      OR vendorId = 0
      OR Invoice.`VendorId` = vendorId)
      AND (companyCode IS NULL
      OR companyCode = ''
      OR Invoice.`CompanyCode` = companyCode)
      AND (departmentId IS NULL
      OR departmentId = 0
      OR Invoice.`VendorSiteId` = departmentId)
      AND ((approvalLevel = 0
      OR approvalLevel IS NULL
      OR EXISTS (SELECT
          *
        FROM ApprovalSubStep ASS
        WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId
        AND ASS.OrderNo = approvalLevel)))
      AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
      OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
    INNER JOIN `Client`
      ON Invoice.`ClientId` = Client.`ClientId`
    INNER JOIN `User`
      ON UIA.UserId = `User`.`UserId`
    LEFT OUTER JOIN Vendor
      ON Vendor.`VendorId` = Invoice.`VendorId`
  WHERE filterConfidential = FALSE
  OR (userIsAdministrator = TRUE
  OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
      Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetApprovalInvoicesInQueue` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetApprovalInvoicesInQueue`(IN clientId int,
IN userId char(36),
IN sortOption int,
IN invoiceIndex int,
IN invoiceIdToBeUnlocked int,
IN vendorId int,
IN invoicePOType int,
IN approvalLevel int,
IN isNoPOOnly tinyint(1),
IN filterConfidential tinyint(1),
IN sortDirAsc tinyint(1),
IN sortField nvarchar(50),
IN lockedBefore datetime,
IN userIsAdministrator tinyint(1),
IN sortApproverQueueByIsPOInvoice tinyint(1),
IN sortApproverQueueByCompanyCode tinyint(1))
BEGIN
  SET @assignorUserId = GetActiveTemporaryAssignorForAssignee(userId, NOW(), 0);
  SET @isPOInvoicetype = (SELECT
      CASE WHEN (invoicePOType = -1 OR
          invoicePOType IS NULL) THEN NULL ELSE (CASE WHEN invoicePOType = 0 THEN FALSE ELSE TRUE END) END);

  -- UNLOCK ALL INVOICES (INVOICE WITH A SPECIFIC ID)
  UPDATE Invoice
  SET Invoice.`IsLocked` = 0
  WHERE Invoice.`ClientId` = clientId
  AND Invoice.`IsLocked` = TRUE
  AND Invoice.`IsDeleted` = FALSE
  AND ((invoiceIdToBeUnlocked <> 0
  AND Invoice.`InvoiceId` = invoiceIdToBeUnlocked)
  OR (invoiceIdToBeUnlocked = 0
  AND Invoice.`LockedBy` = userId
  AND (Invoice.`IsPOInvoice` = FALSE
  OR Invoice.`IsPOInvoice` = isNoPOOnly)));


  -- SELECT COUNT(*) FROM UserInvoiceAssignment UIA USE INDEX(IX_UserId) INNER JOIN Invoice ON (UIA.UserId = userId OR UIA.UserId = @assignorUserId) AND
  -- UIA.Type = 0 AND (@isPOInvoicetype IS NULL OR Invoice.`IsPOInvoice` = @isPOInvoicetype) AND UIA.InvoiceId = Invoice.`InvoiceId` AND Invoice.`IsPaused` = FALSE
  -- AND Invoice.`ApprovalStatusId` = 3 AND Invoice.`IsDeleted` = FALSE AND (Invoice.`IsLocked` = FALSE OR Invoice.`LockedAt` < lockedBefore OR Invoice.`LockedBy` = userId) AND
  -- (UIA.HoldEndDate IS NULL OR UIA.HoldEndDate < NOW()) AND
  -- (vendorId IS NULL OR vendorId = 0 OR Invoice.`VendorId` = vendorId) AND
  -- ((approvalLevel = 0 OR approvalLevel IS NULL OR EXISTS (SELECT * FROM ApprovalSubStep ASS WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId AND ASS.OrderNo = approvalLevel))) AND
  -- (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE)) INNER JOIN
  -- `Client` ON Invoice.`ClientId` = Client.`ClientId` INNER JOIN
  -- `User` ON UIA.UserId = `User`.`UserId` LEFT OUTER JOIN Vendor ON Vendor.`VendorId` = Invoice.`VendorId`
  -- WHERE filterConfidential = false OR (userIsAdministrator = TRUE or (CASE WHEN Invoice.VendorId IS NOT NULL AND Vendor.`IsConfidential` = TRUE then TRUE ELSE IFNULL(Invoice.`IsConfidential`, false) END) = FALSE);


  IF (sortApproverQueueByIsPOInvoice = TRUE) THEN
    SELECT
      UIA.*
    FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
      INNER JOIN Invoice
        ON (UIA.UserId = userId
        OR UIA.UserId = @assignorUserId)
        AND (UIA.Type = 0
        OR UIA.Type = 2)
        AND (@isPOInvoicetype IS NULL
        OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
        AND UIA.InvoiceId = Invoice.`InvoiceId`
        AND Invoice.`IsPaused` = FALSE
        AND Invoice.`ApprovalStatusId` = 3
        AND Invoice.`IsDeleted` = FALSE
        AND (Invoice.`IsLocked` = FALSE
        OR Invoice.`LockedAt` < lockedBefore
        OR Invoice.`LockedBy` = userId)
        AND (UIA.HoldEndDate IS NULL
        OR UIA.HoldEndDate < NOW())
        AND (vendorId IS NULL
        OR vendorId = 0
        OR Invoice.`VendorId` = vendorId)
        AND ((approvalLevel = 0
        OR approvalLevel IS NULL
        OR EXISTS (SELECT
            *
          FROM ApprovalSubStep ASS
          WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId
          AND ASS.OrderNo = approvalLevel)))
        AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
        OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
      INNER JOIN `Client`
        ON Invoice.`ClientId` = Client.`ClientId`
      INNER JOIN `User`
        ON UIA.UserId = `User`.`UserId`
      LEFT OUTER JOIN Vendor
        ON Vendor.`VendorId` = Invoice.`VendorId`
    WHERE filterConfidential = FALSE
    OR (userIsAdministrator = TRUE
    OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
        Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE)

    ORDER BY UIA.State <> sortOption, UIA.State, Invoice.InvoiceDate
    LIMIT 1 OFFSET invoiceIndex;
  ELSEIF (sortApproverQueueByCompanyCode = TRUE) THEN
    SELECT
      UIA.*
    FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
      INNER JOIN Invoice
        ON (UIA.UserId = userId
        OR UIA.UserId = @assignorUserId)
        AND (UIA.Type = 0
        OR UIA.Type = 2)
        AND (@isPOInvoicetype IS NULL
        OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
        AND UIA.InvoiceId = Invoice.`InvoiceId`
        AND Invoice.`IsPaused` = FALSE
        AND Invoice.`ApprovalStatusId` = 3
        AND Invoice.`IsDeleted` = FALSE
        AND (Invoice.`IsLocked` = FALSE
        OR Invoice.`LockedAt` < lockedBefore
        OR Invoice.`LockedBy` = userId)
        AND (UIA.HoldEndDate IS NULL
        OR UIA.HoldEndDate < NOW())
        AND (vendorId IS NULL
        OR vendorId = 0
        OR Invoice.`VendorId` = vendorId)
        AND ((approvalLevel = 0
        OR approvalLevel IS NULL
        OR EXISTS (SELECT
            *
          FROM ApprovalSubStep ASS
          WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId
          AND ASS.OrderNo = approvalLevel)))
        AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
        OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
      INNER JOIN `Client`
        ON Invoice.`ClientId` = Client.`ClientId`
      INNER JOIN `User`
        ON UIA.UserId = `User`.`UserId`
      LEFT OUTER JOIN Vendor
        ON Vendor.`VendorId` = Invoice.`VendorId`
    WHERE filterConfidential = FALSE
    OR (userIsAdministrator = TRUE
    OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
        Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE)

    ORDER BY Invoice.`CompanyCode`, UIA.State <> sortOption, UIA.State, Invoice.InvoiceDate
    LIMIT 1 OFFSET invoiceIndex;
  ELSE
    IF (sortOption = 1000) THEN
      SELECT
        UIA.*
      FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
        INNER JOIN Invoice
          ON (UIA.UserId = userId
          OR UIA.UserId = @assignorUserId)
          AND (UIA.Type = 0
          OR UIA.Type = 2)
          AND (@isPOInvoicetype IS NULL
          OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
          AND UIA.InvoiceId = Invoice.`InvoiceId`
          AND Invoice.`IsPaused` = FALSE
          AND Invoice.`ApprovalStatusId` = 3
          AND Invoice.`IsDeleted` = FALSE
          AND (Invoice.`IsLocked` = FALSE
          OR Invoice.`LockedAt` < lockedBefore
          OR Invoice.`LockedBy` = userId)
          AND (UIA.HoldEndDate IS NULL
          OR UIA.HoldEndDate < NOW())
          AND (vendorId IS NULL
          OR vendorId = 0
          OR Invoice.`VendorId` = vendorId)
          AND ((approvalLevel = 0
          OR approvalLevel IS NULL
          OR EXISTS (SELECT
              *
            FROM ApprovalSubStep ASS
            WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId
            AND ASS.OrderNo = approvalLevel)))
          AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
          OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
        INNER JOIN `Client`
          ON Invoice.`ClientId` = Client.`ClientId`
        INNER JOIN `User`
          ON UIA.UserId = `User`.`UserId`
        LEFT OUTER JOIN Vendor
          ON Vendor.`VendorId` = Invoice.`VendorId`
      WHERE filterConfidential = FALSE
      OR (userIsAdministrator = TRUE
      OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
          Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE)

      ORDER BY Invoice.`ScannedDate`, Invoice.`InvoiceDate`
      LIMIT 1 OFFSET invoiceIndex;
    ELSE
      SELECT
        UIA.*
      FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
        INNER JOIN Invoice
          ON (UIA.UserId = userId
          OR UIA.UserId = @assignorUserId)
          AND (UIA.Type = 0
          OR UIA.Type = 2)
          AND (@isPOInvoicetype IS NULL
          OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
          AND UIA.InvoiceId = Invoice.`InvoiceId`
          AND Invoice.`IsPaused` = FALSE
          AND Invoice.`ApprovalStatusId` = 3
          AND Invoice.`IsDeleted` = FALSE
          AND (Invoice.`IsLocked` = FALSE
          OR Invoice.`LockedAt` < lockedBefore
          OR Invoice.`LockedBy` = userId)
          AND (UIA.HoldEndDate IS NULL
          OR UIA.HoldEndDate < NOW())
          AND (vendorId IS NULL
          OR vendorId = 0
          OR Invoice.`VendorId` = vendorId)
          AND ((approvalLevel = 0
          OR approvalLevel IS NULL
          OR EXISTS (SELECT
              *
            FROM ApprovalSubStep ASS
            WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId
            AND ASS.OrderNo = approvalLevel)))
          AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
          OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
        INNER JOIN `Client`
          ON Invoice.`ClientId` = Client.`ClientId`
        INNER JOIN `User`
          ON UIA.UserId = `User`.`UserId`
        LEFT OUTER JOIN Vendor
          ON Vendor.`VendorId` = Invoice.`VendorId`
      WHERE filterConfidential = FALSE
      OR (userIsAdministrator = TRUE
      OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
          Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE)

      ORDER BY Invoice.`IsPOInvoice`, UIA.State <> sortOption, UIA.State, Invoice.InvoiceDate
      LIMIT 1 OFFSET invoiceIndex;
    END IF;
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetApprovalInvoicesInQueueCount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetApprovalInvoicesInQueueCount`(IN clientId INT,
IN userId CHAR(36),
IN sortOption INT,
IN invoiceIndex INT,
IN invoiceIdToBeUnlocked INT,
IN vendorId INT,
IN invoicePOType INT,
IN approvalLevel INT,
IN isNoPOOnly TINYINT(1),
IN filterConfidential TINYINT(1),
IN sortDirAsc TINYINT(1),
IN sortField NVARCHAR(50),
IN lockedBefore DATETIME,
IN userIsAdministrator TINYINT(1),
IN sortApproverQueueByIsPOInvoice TINYINT(1),
IN sortApproverQueueByCompanyCode TINYINT(1))
BEGIN
  SET @assignorUserId = GetActiveTemporaryAssignorForAssignee(userId, NOW(), 0);
  SET @isPOInvoicetype = (SELECT
      CASE WHEN (invoicePOType = -1 OR
          invoicePOType IS NULL) THEN NULL ELSE (CASE WHEN invoicePOType = 0 THEN FALSE ELSE TRUE END) END);
  SELECT
    COUNT(*)
  FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
    INNER JOIN Invoice
      ON (UIA.UserId = userId
      OR UIA.UserId = @assignorUserId)
      AND (UIA.Type = 0
      OR UIA.Type = 2)
      AND (@isPOInvoicetype IS NULL
      OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
      AND UIA.InvoiceId = Invoice.`InvoiceId`
      AND Invoice.`IsPaused` = FALSE
      AND Invoice.`ApprovalStatusId` = 3
      AND Invoice.`IsDeleted` = FALSE
      AND (Invoice.`IsLocked` = FALSE
      OR Invoice.`LockedAt` < lockedBefore
      OR Invoice.`LockedBy` = userId)
      AND (UIA.HoldEndDate IS NULL
      OR UIA.HoldEndDate < NOW())
      AND (vendorId IS NULL
      OR vendorId = 0
      OR Invoice.`VendorId` = vendorId)
      AND ((approvalLevel = 0
      OR approvalLevel IS NULL
      OR EXISTS (SELECT
          *
        FROM ApprovalSubStep ASS
        WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId
        AND ASS.OrderNo = approvalLevel)))
      AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
      OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
    INNER JOIN `Client`
      ON Invoice.`ClientId` = Client.`ClientId`
    INNER JOIN `User`
      ON UIA.UserId = `User`.`UserId`
    LEFT OUTER JOIN Vendor
      ON Vendor.`VendorId` = Invoice.`VendorId`
  WHERE filterConfidential = FALSE
  OR (userIsAdministrator = TRUE
  OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
      Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetApprovalPOHeadersInQueue` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetApprovalPOHeadersInQueue`(IN clientId int,
IN userId char(36),
IN sortOption int,
IN pOHeaderIndex int,
IN pOHeaderIdToBeUnlocked int,
IN vendorId int,
IN lockedBefore datetime)
BEGIN
  SET @assignorUserId = GetActiveTemporaryAssignorForAssignee(userId, NOW(), 1);
  -- UNLOCK ALL POs (POHeader WITH A SPECIFIC ID)
  UPDATE POHeader
  SET POHeader.`IsLocked` = 0
  WHERE POHeader.`ClientId` = clientId
  AND POHeader.`IsLocked` = TRUE
  AND POHeader.`IsDeleted` = FALSE
  AND ((pOHeaderIdToBeUnlocked <> 0
  AND POHeader.`POHeaderId` = pOHeaderIdToBeUnlocked)
  OR (pOHeaderIdToBeUnlocked = 0
  AND POHeader.`LockedById` = userId));
  SELECT
    UPA.*
  FROM `UserPOAssignment` UPA USE INDEX (IX_UserId)
    INNER JOIN POHeader
      ON (UPA.UserId = userId
      OR UPA.UserId = @assignorUserId)
      AND UPA.Type = 0
      AND UPA.POHeaderId = POHeader.`POHeaderId`
      AND POHeader.`POStatus` IN (2, 9)
      AND POHeader.`IsDeleted` = FALSE
      AND (POHeader.`IsLocked` = FALSE
      OR POHeader.`LockedAt` < lockedBefore
      OR POHeader.`LockedById` = userId)
      AND (UPA.HoldEndDate IS NULL
      OR UPA.HoldEndDate < NOW())
      AND (vendorId IS NULL
      OR vendorId = 0
      OR POHeader.`VendorId` = vendorId)
    INNER JOIN `Client`
      ON POHeader.`ClientId` = Client.`ClientId`
    INNER JOIN `User`
      ON UPA.UserId = `User`.`UserId`
    LEFT OUTER JOIN Vendor
      ON Vendor.`VendorId` = POHeader.`VendorId`
  ORDER BY CreatedDate DESC
  LIMIT 1 OFFSET pOHeaderIndex;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetApprovalPOHeadersInQueueCount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetApprovalPOHeadersInQueueCount`(IN clientId int,
IN userId char(36),
IN sortOption int,
IN pOHeaderIndex int,
IN pOHeaderIdToBeUnlocked int,
IN vendorId int,
IN lockedBefore datetime)
BEGIN
  SET @assignorUserId = GetActiveTemporaryAssignorForAssignee(userId, NOW(), 1);
  SELECT
    COUNT(*)
  FROM `UserPOAssignment` UPA USE INDEX (IX_UserId)
    INNER JOIN POHeader
      ON (UPA.UserId = userId
      OR UPA.UserId = @assignorUserId)
      AND UPA.Type = 0
      AND UPA.POHeaderId = POHeader.`POHeaderId`
      AND POHeader.`POStatus` IN (2, 9)
      AND POHeader.`IsDeleted` = FALSE
      AND (POHeader.`IsLocked` = FALSE
      OR POHeader.`LockedAt` < lockedBefore
      OR POHeader.`LockedById` = userId)
      AND (UPA.HoldEndDate IS NULL
      OR UPA.HoldEndDate < NOW())
      AND (vendorId IS NULL
      OR vendorId = 0
      OR POHeader.`VendorId` = vendorId)
    INNER JOIN `Client`
      ON POHeader.`ClientId` = Client.`ClientId`
    INNER JOIN `User`
      ON UPA.UserId = `User`.`UserId`
    LEFT OUTER JOIN Vendor
      ON Vendor.`VendorId` = POHeader.`VendorId`;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetApprovalWorkFlowReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetApprovalWorkFlowReport`(IN ClientId int)
BEGIN
  SELECT DISTINCT
    apres.CompanyCode,
    apres.VendorNo,
    apres.VendorName,
    abares.VendorType,
    apres.FullName,
    apres.Email,
    abares.MaximumAllowedAmount,
    abares.Manager,
    abares.`IsPOIsNoPOIsBoth`
  FROM (SELECT
      cc.`CompanyCode`,
      v.VendorNo,
      v.VendorName,
      CONCAT(u.FirstName, ' ', u.LastName) AS FullName,
      u.Email AS Email,
      asu.`SubStepName`,
      asv.`VendorId`,
      u.`UserId`,
      u.`ClientId`
    FROM ApprovalSubStepUserVendor asv
      INNER JOIN User u
        ON u.UserId = asv.UserId
      INNER JOIN Vendor v
        ON v.VendorId = asv.VendorId
      INNER JOIN ApprovalSubStep AS asu
        ON asu.`ApprovalSubStepId` = asv.`ApprovalSubStepId`
      INNER JOIN ApprovalStep st
        ON st.`ApprovalStepId` = asu.`ApprovalStepId`
      INNER JOIN ClientCompany cc
        ON cc.Id = st.`ClientCompanyId`
    WHERE u.ClientId = ClientId) AS apres
    LEFT OUTER JOIN (SELECT
        CONCAT(fa.FirstName, ' ', fa.LastName) AS FirstApprover,
        aba.`MaximumAllowedAmount`,
        v.`VendorName`,
        v.`VendorType`,
        CONCAT(sa.FirstName, ' ', sa.LastName) AS Manager,
        fa.UserId,
        v.VendorId,
        fa.ClientId,
        aba.`IsPOIsNoPOIsBoth`
      FROM ApproverByAmount AS aba
        INNER JOIN User AS fa
          ON aba.`UserId` = fa.`UserId`
        INNER JOIN User AS sa
          ON sa.`UserId` = aba.`SecondApproverId`
        INNER JOIN Vendor AS v
          ON v.`VendorId` = aba.`VendorId`
      WHERE fa.`ClientId` = ClientId) AS abares
      ON apres.UserId = abares.UserId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetBatchEmailSourceAndToAddressByNewAttachmentName` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetBatchEmailSourceAndToAddressByNewAttachmentName`(IN paramNewBatchName nvarchar(40))
BEGIN
  SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
  SELECT
    `EmailCaptureClientEmails`.EmailSource,
    `EmailCaptureClientEmails`.ToAddress
  FROM `EmailCaptureAttachments` USE INDEX (EmailCaptureAttachments_EmailAttachmentName)
    INNER JOIN `EmailCaptureClientEmails`
      ON `EmailCaptureAttachments`.`EmailCaptureClientEmailId` = `EmailCaptureClientEmails`.`EmailCaptureClientEmailId`
  WHERE EmailCaptureAttachments.`NewAttachmentName` = paramNewBatchName LIMIT 1;
  SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCatchAllDepartment` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetCatchAllDepartment`(IN DepartmentName nvarchar(50), IN ClientId int, IN ClientCompanyId int)
BEGIN
  IF EXISTS (SELECT
        *
      FROM `ApprovalSubStepCatchAllUsers`,
           `User`,
           UserDepartment,
           Department
      WHERE Department.`ClientId` = ClientId
      AND User.`ClientId` = ClientId
      AND Department.`DepartmentName` = DepartmentName
      AND Department.`Id` = UserDepartment.`DepartmentId`
      AND UserDepartment.`UserId` = User.`UserId`
      AND Department.`ClientCompanyId` = ClientCompanyId
      AND ApprovalSubStepCatchAllUsers.`UserId` = User.`UserId`
      AND User.`IsActive` = TRUE
      AND Department.`IsActive` = TRUE) THEN
    SELECT DISTINCT
      ApprovalSubStepCatchAllUsers.*
    FROM `ApprovalSubStepCatchAllUsers`,
         `User`,
         UserDepartment,
         Department
    WHERE Department.`ClientId` = ClientId
    AND User.`ClientId` = ClientId
    AND Department.`DepartmentName` = DepartmentName
    AND Department.`Id` = UserDepartment.`DepartmentId`
    AND UserDepartment.`UserId` = User.`UserId`
    AND Department.`ClientCompanyId` = ClientCompanyId
    AND ApprovalSubStepCatchAllUsers.`UserId` = User.`UserId`
    AND User.`IsActive` = TRUE
    AND Department.`IsActive` = TRUE;
  ELSE
    SELECT DISTINCT
      ApprovalSubStepCatchAllUsers.*
    FROM ApprovalSubStepCatchAllUsers,
         `User`
    WHERE ApprovalSubStepCatchAllUsers.`UserId` = User.`UserId`
    AND User.`IsActive` = TRUE
    AND User.`ClientId` = ClientId
    AND User.`UserId` NOT IN (SELECT
        UserDepartment.UserId
      FROM USER,
           UserDepartment
      WHERE User.`ClientId` = ClientId
      AND User.`UserId` = UserDepartment.`UserId`
      AND User.`IsActive` = TRUE);
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetClientCompanyById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetClientCompanyById`(IN id int)
BEGIN
  SELECT
    *
  FROM ClientCompany cc
  WHERE cc.Id = id LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompanyApprovalInvoicesInQueue` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetCompanyApprovalInvoicesInQueue`(IN clientId int,
IN userId char(36),
IN sortOption int,
IN invoiceIndex int,
IN invoiceIdToBeUnlocked int,

IN companyCode nvarchar(50),
IN invoicePOType int,
IN approvalLevel int,
IN isNoPOOnly tinyint(1),
IN filterConfidential tinyint(1),
IN sortDirAsc tinyint(1),
IN sortField nvarchar(50),
IN lockedBefore datetime,
IN userIsAdministrator tinyint(1),
IN sortApproverQueueByIsPOInvoice tinyint(1),
IN sortApproverQueueByCompanyCode tinyint(1))
BEGIN
  SET @assignorUserId = GetActiveTemporaryAssignorForAssignee(userId, NOW(), 0);
  SET @isPOInvoicetype = (SELECT
      CASE WHEN (invoicePOType = -1 OR
          invoicePOType IS NULL) THEN NULL ELSE (CASE WHEN invoicePOType = 0 THEN FALSE ELSE TRUE END) END);

  -- UNLOCK ALL INVOICES (INVOICE WITH A SPECIFIC ID)
  UPDATE Invoice
  SET Invoice.`IsLocked` = 0
  WHERE Invoice.`ClientId` = clientId
  AND Invoice.`IsLocked` = TRUE
  AND Invoice.`IsDeleted` = FALSE
  AND ((invoiceIdToBeUnlocked <> 0
  AND Invoice.`InvoiceId` = invoiceIdToBeUnlocked)
  OR (invoiceIdToBeUnlocked = 0
  AND Invoice.`LockedBy` = userId
  AND (Invoice.`IsPOInvoice` = FALSE
  OR Invoice.`IsPOInvoice` = isNoPOOnly)));


  -- SELECT COUNT(*) FROM UserInvoiceAssignment UIA USE INDEX(IX_UserId) INNER JOIN Invoice ON (UIA.UserId = userId OR UIA.UserId = @assignorUserId) AND
  -- UIA.Type = 0 AND (@isPOInvoicetype IS NULL OR Invoice.`IsPOInvoice` = @isPOInvoicetype) AND UIA.InvoiceId = Invoice.`InvoiceId` AND Invoice.`IsPaused` = FALSE
  -- AND Invoice.`ApprovalStatusId` = 3 AND Invoice.`IsDeleted` = FALSE AND (Invoice.`IsLocked` = FALSE OR Invoice.`LockedAt` < lockedBefore OR Invoice.`LockedBy` = userId) AND
  -- (UIA.HoldEndDate IS NULL OR UIA.HoldEndDate < NOW()) AND
  -- (vendorId IS NULL OR vendorId = 0 OR Invoice.`VendorId` = vendorId) AND
  -- ((approvalLevel = 0 OR approvalLevel IS NULL OR EXISTS (SELECT * FROM ApprovalSubStep ASS WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId AND ASS.OrderNo = approvalLevel))) AND
  -- (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE)) INNER JOIN
  -- `Client` ON Invoice.`ClientId` = Client.`ClientId` INNER JOIN
  -- `User` ON UIA.UserId = `User`.`UserId` LEFT OUTER JOIN Vendor ON Vendor.`VendorId` = Invoice.`VendorId`
  -- WHERE filterConfidential = false OR (userIsAdministrator = TRUE or (CASE WHEN Invoice.VendorId IS NOT NULL AND Vendor.`IsConfidential` = TRUE then TRUE ELSE IFNULL(Invoice.`IsConfidential`, false) END) = FALSE);


  IF (sortApproverQueueByIsPOInvoice = TRUE) THEN
    SELECT
      UIA.*
    FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
      INNER JOIN Invoice
        ON (UIA.UserId = userId
        OR UIA.UserId = @assignorUserId)
        AND (UIA.Type = 0
        OR UIA.Type = 2)
        AND (@isPOInvoicetype IS NULL
        OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
        AND UIA.InvoiceId = Invoice.`InvoiceId`
        AND Invoice.`IsPaused` = FALSE
        AND Invoice.`ApprovalStatusId` = 3
        AND Invoice.`IsDeleted` = FALSE
        AND (Invoice.`IsLocked` = FALSE
        OR Invoice.`LockedAt` < lockedBefore
        OR Invoice.`LockedBy` = userId)
        AND (UIA.HoldEndDate IS NULL
        OR UIA.HoldEndDate < NOW())
        AND (companyCode IS NULL
        OR Invoice.`CompanyCode` = companyCode)
        AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
        OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
      INNER JOIN `Client`
        ON Invoice.`ClientId` = Client.`ClientId`
      INNER JOIN `User`
        ON UIA.UserId = `User`.`UserId`
      LEFT OUTER JOIN Vendor
        ON Vendor.`VendorId` = Invoice.`VendorId`
    WHERE filterConfidential = FALSE
    OR (userIsAdministrator = TRUE
    OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
        Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE)

    ORDER BY UIA.State <> sortOption, UIA.State, Invoice.InvoiceDate
    LIMIT 1 OFFSET invoiceIndex;
  ELSEIF (sortApproverQueueByCompanyCode = TRUE) THEN
    SELECT
      UIA.*
    FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
      INNER JOIN Invoice
        ON (UIA.UserId = userId
        OR UIA.UserId = @assignorUserId)
        AND (UIA.Type = 0
        OR UIA.Type = 2)
        AND (@isPOInvoicetype IS NULL
        OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
        AND UIA.InvoiceId = Invoice.`InvoiceId`
        AND Invoice.`IsPaused` = FALSE
        AND Invoice.`ApprovalStatusId` = 3
        AND Invoice.`IsDeleted` = FALSE
        AND (Invoice.`IsLocked` = FALSE
        OR Invoice.`LockedAt` < lockedBefore
        OR Invoice.`LockedBy` = userId)
        AND (UIA.HoldEndDate IS NULL
        OR UIA.HoldEndDate < NOW())
        AND (companyCode IS NULL
        OR Invoice.`CompanyCode` = companyCode)
        AND ((approvalLevel = 0
        OR approvalLevel IS NULL
        OR EXISTS (SELECT
            *
          FROM ApprovalSubStep ASS
          WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId
          AND ASS.OrderNo = approvalLevel)))
        AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
        OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
      INNER JOIN `Client`
        ON Invoice.`ClientId` = Client.`ClientId`
      INNER JOIN `User`
        ON UIA.UserId = `User`.`UserId`
      LEFT OUTER JOIN Vendor
        ON Vendor.`VendorId` = Invoice.`VendorId`
    WHERE filterConfidential = FALSE
    OR (userIsAdministrator = TRUE
    OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
        Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE)

    ORDER BY Invoice.`CompanyCode`, UIA.State <> sortOption, UIA.State, Invoice.InvoiceDate
    LIMIT 1 OFFSET invoiceIndex;
  ELSE
    IF (sortOption = 1000) THEN
      SELECT
        UIA.*
      FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
        INNER JOIN Invoice
          ON (UIA.UserId = userId
          OR UIA.UserId = @assignorUserId)
          AND (UIA.Type = 0
          OR UIA.Type = 2)
          AND (@isPOInvoicetype IS NULL
          OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
          AND UIA.InvoiceId = Invoice.`InvoiceId`
          AND Invoice.`IsPaused` = FALSE
          AND Invoice.`ApprovalStatusId` = 3
          AND Invoice.`IsDeleted` = FALSE
          AND (Invoice.`IsLocked` = FALSE
          OR Invoice.`LockedAt` < lockedBefore
          OR Invoice.`LockedBy` = userId)
          AND (UIA.HoldEndDate IS NULL
          OR UIA.HoldEndDate < NOW())
          AND (companyCode IS NULL
          OR Invoice.`CompanyCode` = companyCode)
          AND ((approvalLevel = 0
          OR approvalLevel IS NULL
          OR EXISTS (SELECT
              *
            FROM ApprovalSubStep ASS
            WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId
            AND ASS.OrderNo = approvalLevel)))
          AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
          OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
        INNER JOIN `Client`
          ON Invoice.`ClientId` = Client.`ClientId`
        INNER JOIN `User`
          ON UIA.UserId = `User`.`UserId`
        LEFT OUTER JOIN Vendor
          ON Vendor.`VendorId` = Invoice.`VendorId`
      WHERE filterConfidential = FALSE
      OR (userIsAdministrator = TRUE
      OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
          Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE)

      ORDER BY Invoice.`ScannedDate`, Invoice.`InvoiceDate`
      LIMIT 1 OFFSET invoiceIndex;
    ELSE
      SELECT
        UIA.*
      FROM UserInvoiceAssignment UIA USE INDEX (IX_UserId)
        INNER JOIN Invoice
          ON (UIA.UserId = userId
          OR UIA.UserId = @assignorUserId)
          AND (UIA.Type = 0
          OR UIA.Type = 2)
          AND (@isPOInvoicetype IS NULL
          OR Invoice.`IsPOInvoice` = @isPOInvoicetype)
          AND UIA.InvoiceId = Invoice.`InvoiceId`
          AND Invoice.`IsPaused` = FALSE
          AND Invoice.`ApprovalStatusId` = 3
          AND Invoice.`IsDeleted` = FALSE
          AND (Invoice.`IsLocked` = FALSE
          OR Invoice.`LockedAt` < lockedBefore
          OR Invoice.`LockedBy` = userId)
          AND (UIA.HoldEndDate IS NULL
          OR UIA.HoldEndDate < NOW())
          AND (companyCode IS NULL
          OR Invoice.`CompanyCode` = companyCode)
          AND ((approvalLevel = 0
          OR approvalLevel IS NULL
          OR EXISTS (SELECT
              *
            FROM ApprovalSubStep ASS
            WHERE ASS.ApprovalSubStepId = UIA.ApprovalSubStepId
            AND ASS.OrderNo = approvalLevel)))
          AND (IsInvoiceAndUserCompanyMatch(userId, UIA.InvoiceId) = TRUE
          OR (IsInvoiceAndUserCompanyMatch(@assignorUserId, UIA.InvoiceId) = TRUE))
        INNER JOIN `Client`
          ON Invoice.`ClientId` = Client.`ClientId`
        INNER JOIN `User`
          ON UIA.UserId = `User`.`UserId`
        LEFT OUTER JOIN Vendor
          ON Vendor.`VendorId` = Invoice.`VendorId`
      WHERE filterConfidential = FALSE
      OR (userIsAdministrator = TRUE
      OR (CASE WHEN Invoice.VendorId IS NOT NULL AND
          Vendor.`IsConfidential` = TRUE THEN TRUE ELSE IFNULL(Invoice.`IsConfidential`, FALSE) END) = FALSE)

      ORDER BY Invoice.`IsPOInvoice`, UIA.State <> sortOption, UIA.State, Invoice.InvoiceDate
      LIMIT 1 OFFSET invoiceIndex;
    END IF;
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCompliantRateSummary` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetCompliantRateSummary`(
    IN client_id INT,
    IN scannedDateFrom DATE,
    IN scannedDateTo DATE
)
BEGIN
    WITH InvoiceDates AS (
        SELECT
            i.InvoiceId,
            i.ClientId,
            MIN(CASE WHEN ih1.CurrentStatus = 'Captured' THEN DATE(ih1.ActionDate) ELSE NULL END) AS CapturedDate,
            MAX(CASE 
                WHEN ih2.Action = 'Validation' AND ih2.Field = 'Validated' THEN DATE(ih2.ActionDate)
                WHEN ih3.Action = 'QC' AND ih3.InitialStatus = '' AND ih3.CurrentStatus = '' THEN DATE(ih3.ActionDate)
                WHEN ih4.Action = 'Approve' THEN DATE(ih4.ActionDate)
                ELSE NULL 
            END) AS LatestActionDate
        FROM
            Invoice i
            LEFT JOIN InvoiceHistory ih1 ON i.InvoiceId = ih1.InvoiceId AND ih1.CurrentStatus = 'Captured'
            LEFT JOIN InvoiceHistory ih2 ON i.InvoiceId = ih2.InvoiceId AND ih2.Action = 'Validation' AND ih2.Field = 'Validated'
            LEFT JOIN InvoiceHistory ih3 ON i.InvoiceId = ih3.InvoiceId AND ih3.Action = 'QC' AND ih3.InitialStatus = '' AND ih3.CurrentStatus = ''
            LEFT JOIN InvoiceHistory ih4 ON i.InvoiceId = ih4.InvoiceId AND ih4.Action = 'Approve'
        WHERE
            !i.IsDeleted AND (client_id IS NULL OR i.ClientId = client_id) 
            AND STR_TO_DATE(i.ScannedDate, '%Y-%m-%d') BETWEEN scannedDateFrom AND scannedDateTo
        GROUP BY i.InvoiceId, i.ClientId
    ),
    WorkingDaysDiff AS (
        SELECT
            InvoiceId,
            ClientId,
            CapturedDate,
            LatestActionDate,
            CASE
                WHEN LatestActionDate IS NOT NULL AND CapturedDate = LatestActionDate THEN 0
                WHEN LatestActionDate IS NOT NULL THEN (
                    SELECT COUNT(*)
                    FROM (
                        SELECT DATE_ADD(CapturedDate, INTERVAL seq.seq DAY) AS DATE
                        FROM (
                            SELECT 0 seq UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6
                        ) seq
                        WHERE DATE_ADD(CapturedDate, INTERVAL seq.seq DAY) < LatestActionDate
                    ) AS Dates
                    WHERE DAYOFWEEK(DATE) NOT IN (1, 7)
                )
                ELSE NULL
            END AS WorkingDaysDiff
        FROM
            InvoiceDates
    )
    SELECT
        cl.ClientId,
        cl.CustomerName,
        SUM(CASE 
            WHEN LatestActionDate IS NOT NULL AND (
                (CapturedDate = LatestActionDate AND DAYOFWEEK(CapturedDate) NOT IN (1, 7)) -- Same working day
                OR (CapturedDate = LatestActionDate AND DAYOFWEEK(CapturedDate) IN (1, 7)) -- Same weekend day
                OR (WorkingDaysDiff = 0 AND DAYOFWEEK(CapturedDate) IN (1, 7) AND DAYOFWEEK(LatestActionDate) IN (1, 7)) -- No working days in between, both dates are weekends
                OR (WorkingDaysDiff = 0 AND CapturedDate = LatestActionDate AND DAYOFWEEK(CapturedDate) NOT IN (1, 7)) -- Same weekday with 0 working days
            ) 
            THEN 1 
            ELSE 0 
        END) AS ZeroDays,
        SUM(CASE WHEN LatestActionDate IS NOT NULL AND WorkingDaysDiff = 1 THEN 1 ELSE 0 END) AS OneDay,
        SUM(CASE WHEN LatestActionDate IS NOT NULL AND WorkingDaysDiff = 2 THEN 1 ELSE 0 END) AS TwoDays,
        SUM(CASE WHEN LatestActionDate IS NOT NULL AND WorkingDaysDiff > 2 THEN 1 ELSE 0 END) AS ThreePlusDays,
        COUNT(CASE WHEN LatestActionDate IS NOT NULL THEN d.InvoiceId END) AS TotalInvoices,
        ROUND(IFNULL(SUM(CASE WHEN LatestActionDate IS NOT NULL AND WorkingDaysDiff <= 1 THEN 1 ELSE 0 END) / COUNT(CASE WHEN LatestActionDate IS NOT NULL THEN d.InvoiceId END) * 100, 0), 2) AS ComplianceRate
    FROM
        WorkingDaysDiff d
        LEFT JOIN Client cl ON d.ClientId = cl.ClientId
    WHERE
        cl.IsActive
    GROUP BY
        cl.ClientId;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCreditPOOutputKeenanFarms` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetCreditPOOutputKeenanFarms`(IN clientId int,
IN userId char(36),
IN invoiceType char(50))
BEGIN
  SELECT
    i.InvoiceId,
    i.InvoiceNo,
    v.VendorNo,
    v.VendorName,
    i.InvoiceTotal,
    DATE_FORMAT(i.GLDate, '%Y%m%d') AS ExpenseDate,
    DATE_FORMAT(i.InvoiceDate, '%Y%m%d') AS InvoiceDate,
    i.CompanyCode,
    DATE_FORMAT(i.ScannedDate, '%Y%m%d') AS ScannedDate,
    DATE_FORMAT(i.AprovedDate, '%Y%m%d') AS ApprovedDate,
    DATE_FORMAT(i.`PaymentDueDate`, '%Y%m%d') AS PaymentDueDate,
    DATE_FORMAT(lid.`DeliveryDate`, '%Y%m%d') AS POReceiptDate,
    i.PONumber,
    lid.`LineNo`,
    lid.ItemNo,
    lid.Quantity,
    lid.UnitPrice,
    lid.UnitOfPurchase AS UOM,
    lid.GLCode,
    lid.Description,
    d.`DepartmentName`,
    p.`ProjectName`,
    lid.RecievedTransactionId AS GRN
  FROM Invoice i
    LEFT OUTER JOIN Vendor v
      ON v.VendorId = i.VendorId
    LEFT OUTER JOIN LineItemDetail lid
      ON lid.InvoiceId = i.InvoiceId
    LEFT OUTER JOIN Department d
      ON d.Id = lid.DepartmentId
    LEFT OUTER JOIN ProjectType p
      ON p.Id = lid.`ProjectTypeId`
  WHERE i.ClientId = 159
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId = 4
  AND i.IsPoInvoice = 1
  AND lid.UserField8 = 'credit'
  ORDER BY i.InvoiceId, i.ScannedDate;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetCreditPOOutputTheragenics` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetCreditPOOutputTheragenics`(IN clientId int,
IN userId char(36),
IN invoiceType char(50))
BEGIN

  SELECT
    i.InvoiceId,
    i.InvoiceNo,
    v.VendorNo,
    v.VendorName,
    i.InvoiceTotal,
    DATE_FORMAT(i.GLDate, '%Y%m%d') AS ExpenseDate,
    DATE_FORMAT(i.InvoiceDate, '%Y%m%d') AS InvoiceDate,
    i.CompanyCode,
    DATE_FORMAT(i.ScannedDate, '%Y%m%d') AS ScannedDate,
    DATE_FORMAT(i.AprovedDate, '%Y%m%d') AS ApprovedDate,
    DATE_FORMAT(i.`PaymentDueDate`, '%Y%m%d') AS PaymentDueDate,
    DATE_FORMAT(lid.`DeliveryDate`, '%Y%m%d') AS POReceiptDate,
    i.PONumber,
    lid.LineNo AS VendorCatNumber,
    lid.`LineNo`,
    lid.ItemNo,
    lid.Quantity,
    lid.UnitPrice,
    lid.UnitOfPurchase AS UOM,
    lid.GLCode,
    lid.Description,
    d.`DepartmentName`,
    p.`ProjectName`,
    lid.RecievedTransactionId AS GRN
  FROM Invoice i
    LEFT OUTER JOIN Vendor v
      ON v.VendorId = i.VendorId
    LEFT OUTER JOIN LineItemDetail lid
      ON lid.InvoiceId = i.InvoiceId
    LEFT OUTER JOIN Department d
      ON d.Id = lid.DepartmentId
    LEFT OUTER JOIN ProjectType p
      ON p.Id = lid.`ProjectTypeId`
  WHERE i.ClientId = 139
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId = 4
  AND i.IsPoInvoice = 1
  AND lid.UserField8 = 'credit'
  ORDER BY i.InvoiceId, i.ScannedDate;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getDashBoard` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `getDashBoard`(IN clientId int)
BEGIN
  SELECT
    *
  FROM UserInvoiceAssignment
  WHERE `type` = 0
  AND invoiceid IN (SELECT
      invoiceid
    FROM Invoice inv
    WHERE inv.ClientId = clientId
    AND inv.ApprovalStatusId != 5
    AND inv.ApprovalStatusId != 7
    AND inv.ApprovalStatusId != 4
    AND inv.IsDeleted = 0
    AND inv.IsPaused = 0);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getDashBoardAggrigate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `getDashBoardAggrigate`(IN userIdPar char(36),
IN clientId int,
OUT inQueueAmount decimal(20),
OUT pausedAmount decimal(20),
OUT approverName varchar(50),
OUT inQueueInvoiceCount int,
OUT pausedInvoiceCount int,
OUT nonApprovedAmount decimal(20))
BEGIN
  -- Get INQueueAmount
  SELECT
    SUM(inv.InvoiceTotal) INTO inQueueAmount
  FROM Invoice inv
  WHERE inv.ClientId = clientId
  AND inv.ApprovalStatusId != 5
  AND inv.ApprovalStatusId != 7
  AND inv.ApprovalStatusId != 4
  AND inv.IsDeleted = 0
  AND inv.IsPaused = 0
  AND inv.InvoiceId IN (SELECT
      InvoiceId
    FROM UserInvoiceAssignment
    WHERE `type` = 0
    AND UserInvoiceAssignment.UserId = userIdPar);

  -- Get PausedAmount
  SELECT
    SUM(inv.InvoiceTotal) INTO pausedAmount
  FROM Invoice inv
  WHERE inv.ClientId = clientId
  AND inv.ApprovalStatusId != 5
  AND inv.ApprovalStatusId != 7
  AND inv.ApprovalStatusId != 4
  AND inv.IsDeleted = 0
  AND inv.IsPaused = 1
  AND inv.InvoiceId IN (SELECT
      InvoiceId
    FROM UserInvoiceAssignment
    WHERE `type` = 0
    AND UserInvoiceAssignment.UserId = userIdPar);

  -- Get Approver FullName
  SELECT
    CONCAT(usr.LastName, ' ', usr.FirstName) INTO approverName
  FROM User usr
  WHERE usr.UserId = userIdPar;

  -- Get InQueueInvoiceCount
  SELECT
    COUNT(*) INTO inQueueInvoiceCount
  FROM Invoice inv
  WHERE inv.ClientId = clientId
  AND inv.ApprovalStatusId != 5
  AND inv.ApprovalStatusId != 7
  AND inv.ApprovalStatusId != 4
  AND inv.IsDeleted = 0
  AND inv.IsPaused = 0
  AND inv.InvoiceId IN (SELECT
      InvoiceId
    FROM UserInvoiceAssignment
    WHERE `type` = 0
    AND UserInvoiceAssignment.UserId = userIdPar);

  -- Get PausedInvoiceCount
  SELECT
    COUNT(*) INTO pausedInvoiceCount
  FROM Invoice inv
  WHERE inv.ClientId = clientId
  AND inv.ApprovalStatusId != 5
  AND inv.ApprovalStatusId != 7
  AND inv.ApprovalStatusId != 4
  AND inv.IsDeleted = 0
  AND inv.IsPaused = 1
  AND inv.InvoiceId IN (SELECT
      InvoiceId
    FROM UserInvoiceAssignment
    WHERE `type` = 0
    AND UserInvoiceAssignment.UserId = userIdPar);

  -- Get NonApprovedAmount
  SELECT
    SUM(inv.InvoiceTotal) INTO nonApprovedAmount
  FROM Invoice inv
  WHERE inv.ClientId = clientId
  AND inv.ApprovalStatusId != 5
  AND inv.ApprovalStatusId != 7
  AND inv.ApprovalStatusId != 4
  AND inv.IsDeleted = 0
  AND inv.InvoiceId IN (SELECT
      InvoiceId
    FROM UserInvoiceAssignment
    WHERE `type` = 0
    AND UserInvoiceAssignment.UserId = userIdPar);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDepartmentGLCodesReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetDepartmentGLCodesReport`(IN ClientId int)
BEGIN
  SELECT
    cc.`CompanyCode`,
    d.`DepartmentName`,
    d.`Description` AS DepDescription,
    gl.`GLCodeName`,
    gl.`Desccription` AS GLDescription,
    gl.IsActive AS GLCodeStatus,
    d.IsActive AS DepStatus
  FROM GLCode AS gl
    INNER JOIN DepartmentGLCode AS dg
      ON gl.`GLCodeId` = dg.`GLCodeId`
    INNER JOIN Department AS d
      ON d.`Id` = dg.`DepartmentId`
    INNER JOIN ClientCompany AS cc
      ON d.`ClientCompanyId` = cc.`Id`
  WHERE cc.`ClientId` = ClientId
  AND gl.`ClientId` = ClientId
  AND d.`ClientId` = ClientId
  AND gl.`ClientCompanyId` = cc.`Id`;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDPOs` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetDPOs`(IN clientId INT)
BEGIN

  DROP TEMPORARY TABLE IF EXISTS DupPOs1;
  CREATE TEMPORARY TABLE IF NOT EXISTS DupPOs1 as (
  SELECT PONumber, LineNo, VendorId ,Description, RecievedTransactionId  FROM PO p WHERE p.ClientID=clientId 
  GROUP BY PONumber, LineNo, VendorId , RecievedTransactionId, Description HAVING COUNT(*) > 1);
  
  DROP TEMPORARY TABLE IF EXISTS DupPOs;
  CREATE TEMPORARY TABLE DupPOs (
    PONumber varchar(100),
    LineNo varchar(100),
    VendorId int,
    Description varchar(500),
    RecievedTransactionId varchar(100)
  );

  Insert Into DupPOs
  SELECT p.PONumber, p.LineNo, p.VendorId ,p.Description, p.RecievedTransactionId FROM PO p WHERE p.ClientID=clientId 
  GROUP BY PONumber, LineNo, VendorId , RecievedTransactionId, Description HAVING COUNT(*) > 1;

  select  min(p.Id), max(p.id)
  from PO p where p.ClientId = clientId 
  and p.VendorId in (select p.VendorId from DupPOs1)
  and p.PONumber in (select PONumber from DupPOs);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetDWRInvoiceData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetDWRInvoiceData`()
BEGIN
  SELECT
    Invoice.InvoiceId AS InvoiceID,
    Invoice.InvoiceNo AS InvoiceNo,
    Invoice.InvoiceDate AS InvoiceDate,
    Invoice.InvoiceTotal AS Total,
    Invoice.LastActionDate AS AccountDate,
    Vendor.VendorNo AS VendorNo,
    Vendor.VendorName AS VendorName,
    GLCode.GLCodeName AS GLCode,
    GLCode.Desccription AS GLDescription,
    ApprovalHistory.AmountAppoved AS GLAmount,
    ProjectType.ProjectName AS ProjectName,
    SubProjectType.SubProjectName AS SubProjectName,
    Department.DepartmentName AS Unit,
    ApprovalHistory.SpecialNote AS SpecialNote
  FROM Invoice
    INNER JOIN ApprovalHistory
      ON Invoice.InvoiceId = ApprovalHistory.InvoiceId
    INNER JOIN GLCode
      ON ApprovalHistory.GLCodeId = GLCode.GLCodeId
    INNER JOIN Vendor
      ON Invoice.VendorId = Vendor.VendorId
    -- INNER JOIN Department On Department.VendorId = Vendor.VendorId
    LEFT OUTER JOIN Department
      ON ApprovalHistory.DepartmentId = Department.Id
    LEFT OUTER JOIN SubProjectType
      ON ApprovalHistory.SubProjectId = SubProjectType.Id
    LEFT OUTER JOIN ProjectType
      ON ApprovalHistory.ProjectId = ProjectType.Id
  WHERE (Invoice.InvoiceType = 'Invoice')
  AND (Invoice.ApprovalStatusId = 4)
  AND (Invoice.ClientId = 22)
  AND (Invoice.IsDeleted = 0)
  AND (Invoice.IsPaused = 0)
  ORDER BY Invoice.InvoiceId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetErrorReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetErrorReport`(IN FromDate date, IN ToDate date,
IN Actor nvarchar(50), IN Client nvarchar(50))
BEGIN
  CREATE TEMPORARY TABLE TempInvoiceHistory (
    InvoiceId int,
    Actor nvarchar(50),
    ActionDate date
  );
  INSERT INTO TempInvoiceHistory
    SELECT
      Invoice.InvoiceId,
      Actor,
      ActionDate
    FROM InvoiceHistory
      INNER JOIN Invoice
        ON InvoiceHistory.InvoiceId = Invoice.InvoiceId
    WHERE ScannedDate > FromDate
    AND ScannedDate < ToDate;

  SELECT
    CustomerName,
    (SELECT
        Actor
      FROM TempInvoiceHistory a
      WHERE i.InvoiceId = a.invoiceid
      AND a.Actor <> 'System'
      ORDER BY ActionDate ASC LIMIT 1) Operator,
    ih.*,
    i.InvoiceNo,
    ScannedDate,
    b.Source,
    i.IsPOInvoice
  FROM InvoiceHistory ih,
       Invoice i,
       Batch b,
       Client c
  WHERE (Actor IS NULL
  OR (SELECT
      Actor
    FROM TempInvoiceHistory a
    WHERE i.InvoiceId = a.invoiceid
    AND a.Actor <> 'System'
    ORDER BY ActionDate ASC LIMIT 1) = Actor)
  AND (Client IS NULL
  OR c.CustomerName = Client)
  AND (Field = 'Invoice Total'
  OR Field = 'Invoice No')
  AND c.ClientId = i.ClientId
  AND (PreviousData <> ''
  OR (PreviousData = ''
  AND NewData <> ''
  AND CurrentStatus <> 'Captured'
  AND InitialStatus <> 'Captured'))
  AND ScannedDate > FromDate
  AND ScannedDate < ToDate
  AND ih.InvoiceId IN (SELECT
      InvoiceId
    FROM Invoice
    WHERE ClientId IN (SELECT
        ClientId
      FROM Client
      WHERE CustomerName IN (SELECT
          ClientName
        FROM DashboardActiveClients)))
  AND i.InvoiceId = ih.InvoiceId
  AND i.BatchID = b.ID
  AND (SELECT
      Actor
    FROM TempInvoiceHistory AS a
    WHERE i.InvoiceId = a.invoiceid
    AND a.Actor <> 'System'
    ORDER BY ActionDate ASC LIMIT 1) IN (SELECT
      ActorName
    FROM DashboardActiveActors
    WHERE Actor IS NULL
    OR ActorName = Actor)
  AND ih.Actor NOT IN (SELECT
      ActorName
    FROM DashboardActiveActors);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetFilteredInvoices` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetFilteredInvoices`(
    IN invoiceId INT,
    IN userId CHAR(36),
    IN invoiceClientId INT,
    IN invoiceCompanyCode VARCHAR(50),
    IN invoiceNo VARCHAR(50),
    IN invoiceVendorId INT,
    IN invoicePONumber VARCHAR(2000),
    IN showPaidInvoicesInSupDoc BIT,
    IN supportDocsByInvoiceNoOnly BIT
)
BEGIN
    DECLARE canViewConfidential BIT;
    DECLARE isAdmin BIT;
    
    -- Fetch user's permissions
    SELECT 
        IFNULL(CanViewConfidentialInvoice, 0),
        EXISTS (
            SELECT 1
            FROM UserRoles
            WHERE UserId = userId AND RoleId = 8 -- Assuming 8 represents RoleEnum.Administrator
        )
    INTO 
        canViewConfidential,
        isAdmin
    FROM 
        Users
    WHERE 
        UserId = userId;

    IF showPaidInvoicesInSupDoc = 1 AND invoiceType = 'STATEMENT' THEN
        -- Filtered invoices for showPaidInvoicesInSupDoc scenario
        SELECT 
            inv.InvoiceId,
            inv.InvoiceNo,
            v.VendorName,
            inv.InvoiceType,
            CASE 
                WHEN inv.ApprovalStatusId = 3 THEN 'InApproval'
                WHEN inv.ApprovalStatusId = 4 THEN 'Approved'
                ELSE ''
            END AS InvoiceStatusName
        FROM 
            Invoices inv
        LEFT JOIN 
            Vendor v ON inv.VendorId = v.VendorId
        WHERE 
            inv.ClientId = invoiceClientId 
            AND inv.ParentInvoiceId != invoiceId 
            AND NOT inv.IsDeleted 
            AND (inv.CompanyCode = invoiceCompanyCode OR invoiceCompanyCode IS NULL OR invoiceCompanyCode = '')
            AND inv.ApprovalStatusId >= 10;

    ELSEIF supportDocsByInvoiceNoOnly = 0 THEN
        -- Filtered invoices for !supportDocsByInvoiceNoOnly scenario
        SELECT 
            inv.InvoiceId,
            inv.InvoiceNo,
            v.VendorName,
            inv.InvoiceType,
            CASE 
                WHEN inv.ApprovalStatusId = 3 THEN 'InApproval'
                WHEN inv.ApprovalStatusId = 4 THEN 'Approved'
                ELSE ''
            END AS InvoiceStatusName
        FROM 
            Invoices inv
        LEFT JOIN 
            Vendor v ON inv.VendorId = v.VendorId
        WHERE 
            NOT inv.IsDeleted 
            AND (inv.CompanyCode = invoiceCompanyCode OR invoiceCompanyCode IS NULL OR invoiceCompanyCode = '')
            AND inv.ClientId = invoiceClientId
            AND (
                (inv.InvoiceNo = invoiceNo AND invoiceNo IS NOT NULL AND inv.VendorId = invoiceVendorId)
                OR
                (inv.IsPOInvoice 
                    AND inv.PONumber IS NOT NULL 
                    AND (
                        inv.PONumber = invoicePONumber 
                        OR inv.PONumber LIKE CONCAT(invoicePONumber, '|%') 
                        OR inv.PONumber LIKE CONCAT('%|', invoicePONumber) 
                        OR inv.PONumber LIKE CONCAT('%|', invoicePONumber, '|%')
                    ) 
                    AND (inv.VendorId = invoiceVendorId 
                        OR (invoiceVendorId IS NOT NULL 
                            AND inv.Vendor.VendorNo = (
                                SELECT 
                                    VendorNo 
                                FROM 
                                    Vendor 
                                WHERE 
                                    VendorId = invoiceVendorId
                            )
                        )
                    )
                )
            )
            AND inv.InvoiceId != invoiceId;
        
    ELSE
        -- Filtered invoices for supportDocsByInvoiceNoOnly scenario
        SELECT 
            inv.InvoiceId,
            inv.InvoiceNo,
            v.VendorName,
            inv.InvoiceType,
            CASE 
                WHEN inv.ApprovalStatusId = 3 THEN 'InApproval'
                WHEN inv.ApprovalStatusId = 4 THEN 'Approved'
                ELSE ''
            END AS InvoiceStatusName
        FROM 
            Invoices inv
        LEFT JOIN 
            Vendor v ON inv.VendorId = v.VendorId
        WHERE 
            inv.ClientId = invoiceClientId 
            AND inv.InvoiceId != invoiceId 
            AND NOT inv.IsDeleted 
            AND (inv.CompanyCode = invoiceCompanyCode OR invoiceCompanyCode IS NULL OR invoiceCompanyCode = '')
            AND (
                (inv.InvoiceNo = invoiceNo AND invoiceNo IS NOT NULL) 
                AND inv.VendorId = invoiceVendorId
            );
        
    END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetGLCodesByDeptId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetGLCodesByDeptId`(IN clientId int, IN userId char(36), IN deptId int,
IN gLCodeByGLCodeNameOrShortCode bit, IN term varchar(100))
BEGIN

  SELECT
    g.*,
    cc.CompanyCode
  FROM GLCode g
    INNER JOIN DepartmentGLCode dg
      ON dg.`GLCodeId` = g.`GLCodeId`
    INNER JOIN Department d
      ON d.Id = dg.`DepartmentId`
    LEFT OUTER JOIN ClientCompany cc
      ON cc.Id = g.ClientCompanyId
  WHERE g.ClientId = clientId
  AND d.Id = deptId
  AND g.IsActive = 1
  AND (term IS NULL
  OR term = ''
  OR (!gLCodeByGLCodeNameOrShortCode
  AND g.GLCodeName LIKE CONCAT('%', term, '%'))
  OR (gLCodeByGLCodeNameOrShortCode
  AND (g.GLCodeName LIKE CONCAT('', term, '%')
  OR g.GLCodeName LIKE CONCAT('%~|~', term, '%'))
  )
  OR !gLCodeByGLCodeNameOrShortCode
  AND g.Desccription LIKE CONCAT('%', term, '%')
  )
  ;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetGLsForExpService` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetGLsForExpService`(
IN clientId int, 
IN glCodeName varchar (255),
IN externalId varchar (255),
IN considerCompanyCode BIT, 
IN clientCompanyId int)
BEGIN

select * from GLCode g where g.ClientId = clientId and 
case when externalId is null 
then 
  (g.GLCodeName = glCodeName and (clientCompanyId is null or g.ClientCompanyId = clientCompanyId)) 
else 
 (case when considerCompanyCode = TRUE then g.ClientCompanyId = clientCompanyId else true END) END
 and (externalId is null or g.ExternalId = externalId);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetIndexOf` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetIndexOf`(IN stringPattern varchar(250),
IN target varchar(250))
BEGIN
  SELECT
    POSITION(stringPattern IN target);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getInvoiceByClient` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `getInvoiceByClient`(IN clientId int)
BEGIN
  SELECT
    *
  FROM Invoice inv
  WHERE inv.ClientId = clientId LIMIT 5;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInvoiceData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetInvoiceData`(
    IN p_ClientId INT,
    IN scannedDateFrom DATE,
    IN scannedDateTo DATE
)
BEGIN
    SELECT
	i.InvoiceId,
	v.VendorId,
	i.ClientId,
        i.InvoiceNo,
        i.ScannedDate,
        v.VendorName,
        i.IsPaused,
         i.IsPOInvoice,
        
        MIN(CASE
            WHEN ih1.CurrentStatus = 'Captured' THEN DATE(ih1.ActionDate)
            ELSE NULL
        END) AS CapturedDate,
        
        MAX(CASE
            WHEN ih2.Action = 'Validation' AND ih2.Field = 'Validated' THEN DATE(ih2.ActionDate)
            WHEN ih3.Action = 'QC' AND ih3.InitialStatus = '' AND ih3.CurrentStatus = '' THEN DATE(ih3.ActionDate)
            WHEN ih4.Action = 'Approve' THEN DATE(ih4.ActionDate)
            ELSE NULL
        END) AS CapturedPendingValidationDate,
        
        DATEDIFF(
            MAX(CASE 
                WHEN ih2.Action = 'Validation' AND ih2.Field = 'Validated' THEN DATE(ih2.ActionDate)
                WHEN ih3.Action = 'QC' AND ih3.InitialStatus = '' AND ih3.CurrentStatus = '' THEN DATE(ih3.ActionDate)
                WHEN ih4.Action = 'Approve' THEN DATE(ih4.ActionDate)
                ELSE NULL 
            END),
            MIN(CASE WHEN ih1.CurrentStatus = 'Captured' THEN DATE(ih1.ActionDate) ELSE NULL END)
        ) AS SLA,
        
        CASE
            WHEN DATEDIFF(
                MAX(CASE 
                    WHEN ih2.Action = 'Validation' AND ih2.Field = 'Validated' THEN DATE(ih2.ActionDate)
                    WHEN ih3.Action = 'QC' AND ih3.InitialStatus = '' AND ih3.CurrentStatus = '' THEN DATE(ih3.ActionDate)
                    WHEN ih4.Action = 'Approve' THEN DATE(ih4.ActionDate)
                    ELSE NULL 
                END),
                MIN(CASE WHEN ih1.CurrentStatus = 'Captured' THEN DATE(ih1.ActionDate) ELSE NULL END)
            ) > 1 THEN 'NonCompliant'
            ELSE 'Compliant'
        END AS Complaint
    FROM
        Invoice i
    LEFT JOIN
        Vendor v ON i.VendorId = v.VendorId
    LEFT JOIN
        InvoiceHistory ih1 ON i.InvoiceId = ih1.InvoiceId AND ih1.CurrentStatus = 'Captured'
    LEFT JOIN
        InvoiceHistory ih2 ON i.InvoiceId = ih2.InvoiceId AND ih2.Action = 'Validation' AND ih2.Field = 'Validated'
    LEFT JOIN
        InvoiceHistory ih3 ON i.InvoiceId = ih3.InvoiceId AND ih3.Action = 'QC' AND ih3.InitialStatus = '' AND ih3.CurrentStatus = ''
    LEFT JOIN
        InvoiceHistory ih4 ON i.InvoiceId = ih4.InvoiceId AND ih4.Action = 'Approve'
    WHERE
        i.ClientId = p_ClientId AND !i.IsDeleted
        AND STR_TO_DATE(`i`.`ScannedDate`, '%Y-%m-%d') BETWEEN scannedDateFrom AND scannedDateTo
    GROUP BY i.InvoiceId;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInvoiceGLsAndDepartments` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetInvoiceGLsAndDepartments`(IN theInvoiceId int)
BEGIN
  SELECT
    GLCodeId,
    DepartmentId
  FROM ApprovalHistory
  WHERE InvoiceId = theInvoiceId
  AND AmountAppoved <> 0.00;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInvoiceHistoriesByClient` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetInvoiceHistoriesByClient`(IN p_ClientId int,
IN p_YearDateFrom datetime,
IN p_DateTo datetime,
IN p_ApplicableInvoiceStatuses varchar(1000))
BEGIN

  SELECT
    ih.*
  FROM Invoice AS invoice
    INNER JOIN InvoiceHistory AS ih
      ON invoice.InvoiceId = ih.InvoiceId
  WHERE invoice.ClientId = p_ClientId
  AND (invoice.InvoiceType = 'Invoice'
  OR invoice.InvoiceType = 'Credit')
  AND FIND_IN_SET(invoice.ApprovalStatusId, p_ApplicableInvoiceStatuses) > 0
  AND invoice.IsDeleted = 0
  AND ih.ActionDate >= p_YearDateFrom
  AND ih.ActionDate < p_DateTo
  AND (
  (ih.Action IN ('Assignment', 'Notification', 'Escalation'))
  OR (ih.CurrentStatus = 'Approved'
  AND ih.InitialStatus = 'In Approval'
  AND ih.Field = 'Invoice Status')
  OR (ih.CurrentStatus = 'In Approval'
  AND ih.InitialStatus = 'Captured'
  AND ih.Field = 'Invoice Status')
  OR (ih.CurrentStatus = 'In Approval'
  AND ih.InitialStatus = 'Exception'
  AND ih.Field = 'Invoice Status')
  )
  AND (
  ih.ActorId IS NOT NULL
  AND ih.ActorId != '00000000-0000-0000-0000-000000000000' -- Exclude default GUID value
  )
  AND (
  (ih.CurrentStatus = 'Approved'
  AND ih.InitialStatus = 'In Approval'
  AND (ih.Field IN ('Invoice Status', 'Status')))
  OR (ih.Action IN ('Delegation', 'Notification', 'Escalation'))
  OR (ih.CurrentStatus = 'In Approval'
  AND ih.InitialStatus = 'Captured'
  AND (ih.Field IN ('Invoice Status', 'Status')))
  OR (ih.CurrentStatus = 'In Approval'
  AND ih.InitialStatus = 'Exception'
  AND (ih.Field IN ('Invoice Status', 'Status')))
  OR (ih.Action IN ('Pause', 'Unpause'))
  )
  GROUP BY ih.InvoiceId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInvoiceHistoriesByClienttest` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetInvoiceHistoriesByClienttest`(IN p_ClientId int,
IN p_YearDateFrom datetime,
IN p_DateTo datetime,
IN p_ApplicableInvoiceStatuses varchar(1000))
BEGIN
  -- Calculate the count, total approval days, and maximum approval day for each approver
  SELECT
    COUNT(ih.InvoiceId) AS ApprovedInvoicesCount,
    SUM(CASE WHEN ih.Action = 'Assignment' AND
        ih.ActionDate < (SELECT
            MIN(ActionDate)
          FROM InvoiceHistory
          WHERE InvoiceId = ih.InvoiceId
          AND Action = 'Assignment'
          AND ActionDate > ih.ActionDate) THEN DATEDIFF(ih.ActionDate, (SELECT
              MIN(ActionDate)
            FROM InvoiceHistory
            WHERE InvoiceId = ih.InvoiceId
            AND Action = 'Assignment'
            AND ActionDate > ih.ActionDate)) ELSE DATEDIFF(ih.ActionDate, (SELECT
            MIN(ActionDate)
          FROM InvoiceHistory
          WHERE InvoiceId = ih.InvoiceId
          AND Action != 'Assignment'
          AND ActionDate > ih.ActionDate)) END) AS TotalApproveDays,
    MAX(DATEDIFF(ih.ActionDate, i.InvoiceDate)) AS MaximumApproveDay,
    CASE WHEN DATEDIFF(p_DateTo, p_YearDateFrom) > 30 THEN (SUM(CASE WHEN ih.Action = 'Assignment' AND
              ih.ActionDate < (SELECT
                  MIN(ActionDate)
                FROM InvoiceHistory
                WHERE InvoiceId = ih.InvoiceId
                AND Action = 'Assignment'
                AND ActionDate > ih.ActionDate) THEN DATEDIFF(ih.ActionDate, (SELECT
                    MIN(ActionDate)
                  FROM InvoiceHistory
                  WHERE InvoiceId = ih.InvoiceId
                  AND Action = 'Assignment'
                  AND ActionDate > ih.ActionDate)) ELSE DATEDIFF(ih.ActionDate, (SELECT
                  MIN(ActionDate)
                FROM InvoiceHistory
                WHERE InvoiceId = ih.InvoiceId
                AND Action != 'Assignment'
                AND ActionDate > ih.ActionDate)) END) / MONTHS_BETWEEN(p_DateTo, p_YearDateFrom)) ELSE AVG(CASE WHEN ih.Action = 'Assignment' AND
            ih.ActionDate < (SELECT
                MIN(ActionDate)
              FROM InvoiceHistory
              WHERE InvoiceId = ih.InvoiceId
              AND Action = 'Assignment'
              AND ActionDate > ih.ActionDate) THEN DATEDIFF(ih.ActionDate, (SELECT
                  MIN(ActionDate)
                FROM InvoiceHistory
                WHERE InvoiceId = ih.InvoiceId
                AND Action = 'Assignment'
                AND ActionDate > ih.ActionDate)) ELSE DATEDIFF(ih.ActionDate, (SELECT
                MIN(ActionDate)
              FROM InvoiceHistory
              WHERE InvoiceId = ih.InvoiceId
              AND Action != 'Assignment'
              AND ActionDate > ih.ActionDate)) END) END AS MonthlyAverageApproveDays
  FROM Invoice AS i
    INNER JOIN InvoiceHistory AS ih
      ON i.InvoiceId = ih.InvoiceId
  WHERE i.ClientId = p_ClientId
  AND (i.InvoiceType = 'Invoice'
  OR i.InvoiceType = 'Credit')
  AND FIND_IN_SET(i.ApprovalStatusId, p_ApplicableInvoiceStatuses) > 0
  AND i.IsDeleted = 0
  AND ih.ActionDate >= p_YearDateFrom
  AND ih.ActionDate < p_DateTo
  AND (
  (ih.Action IN ('Assignment', 'Notification', 'Escalation'))
  OR (ih.CurrentStatus = 'Approved'
  AND ih.InitialStatus = 'In Approval'
  AND ih.Field = 'Invoice Status')
  OR (ih.CurrentStatus = 'In Approval'
  AND ih.InitialStatus = 'Captured'
  AND ih.Field = 'Invoice Status')
  OR (ih.CurrentStatus = 'In Approval'
  AND ih.InitialStatus = 'Exception'
  AND ih.Field = 'Invoice Status')
  )
  AND ih.ActorId IS NOT NULL
  AND ih.ActorId != '00000000-0000-0000-0000-000000000000';
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInvoiceProcessReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetInvoiceProcessReport`(IN clientId int,
IN scannedDateFrom date,
IN scannedDateTo date,
IN invoiceDateFrom date,
IN invoiceDateTo date,
IN lastActionDateFrom date,
IN lastActionDateTo date,
IN paymentDueDateFrom date,
IN paymentDueDateTo date,
IN invoiceStatuses varchar(255),
IN documentTypes varchar(255),
IN billingMonth varchar(255),
IN billingYear int,
IN approvers varchar(255),
IN step int,
IN vendorSiteIds varchar(255),
IN userField3 varchar(255),
IN userField4 varchar(255),
IN invoiceno varchar(255),
IN isBilling int)
BEGIN
  SELECT
    i.InvoiceId,
    i.InvoiceNo,
    i.InvoiceTotal,
    i.ScannedDate,
    i.InvoiceDate,
    v.VendorName,
    i.IsPaused,
    i.InvoiceType,
    si.StateName
  FROM Invoice i
    LEFT OUTER JOIN Vendor v
      ON i.VendorId = v.VendorId
    LEFT OUTER JOIN InvoiceStatus si
      ON i.ApprovalStatusId = si.StateId

  WHERE i.ClientId = clientId
  AND i.IsDeleted = FALSE
  AND (scannedDateFrom IS NULL
  OR i.ScannedDate >= scannedDateFrom)
  AND (scannedDateTo IS NULL
  OR i.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
  AND (invoiceDateFrom IS NULL
  OR i.InvoiceDate >= invoiceDateFrom)
  AND (invoiceDateTo IS NULL
  OR i.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))
  AND (lastActionDateFrom IS NULL
  OR i.LastActionDate >= lastActionDateFrom)
  AND (lastActionDateTo IS NULL
  OR i.LastActionDate < DATE_ADD(lastActionDateTo, INTERVAL 1 DAY))
  AND (paymentDueDateFrom IS NULL
  OR i.PaymentDueDate >= paymentDueDateFrom)
  AND (paymentDueDateTo IS NULL
  OR i.PaymentDueDate < DATE_ADD(paymentDueDateTo, INTERVAL 1 DAY))
  AND (invoiceStatuses IS NULL
  OR invoiceStatuses = ''
  OR (i.ApprovalStatusId IS NOT NULL
  AND FIND_IN_SET(i.ApprovalStatusId, invoiceStatuses)))
  AND (documentTypes IS NULL
  OR documentTypes = ''
  OR (i.ApprovalStatusId IS NOT NULL
  AND FIND_IN_SET(i.InvoiceType, documentTypes)))
  AND (billingMonth IS NULL
  OR billingMonth = ''
  OR (i.ScannedDate BETWEEN DATE_ADD(DATE_ADD(LAST_DAY(billingMonth), INTERVAL 1 DAY), INTERVAL -1 MONTH) AND LAST_DAY(billingMonth)))
  AND (billingYear IS NULL
  OR billingYear = ''
  OR (i.ScannedDate BETWEEN DATE_ADD(DATE_ADD(LAST_DAY(billingYear), INTERVAL 1 DAY), INTERVAL -1 MONTH) AND LAST_DAY(billingYear)))
  AND (approvers IS NULL
  OR approvers = ''
  OR (i.ApproverId IS NOT NULL
  AND FIND_IN_SET(i.ApproverId, approvers)))
  AND (invoiceNo IS NULL
  OR invoiceNo = ''
  OR i.InvoiceNo LIKE CONCAT('', invoiceNo, '%'))
  AND (vendorSiteIds IS NULL
  OR vendorSiteIds = ''
  OR (i.VendorSiteId IS NOT NULL
  AND FIND_IN_SET(i.VendorSiteId, vendorSiteIds)))
  AND (userField3 IS NULL
  OR userField3 = ''
  OR i.UserField3 LIKE CONCAT('', userField3, '%'))
  AND (userField4 IS NULL
  OR userField4 = ''
  OR i.UserField4 LIKE CONCAT('', userField4, '%'))

  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInvoiceRejectionReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetInvoiceRejectionReport`(IN clientId int,
IN userId char(36),
IN actionDateFrom varchar(50),
IN actionDateTo varchar(50),
IN invoiceNo varchar(50))
BEGIN
  SELECT
    "AutoApprove" AS Action,
    i.InvoiceId,
    i.InvoiceNo,
    i.InvoiceDate,
    i.InvoiceTotal,
    i.ScannedDate,
    v.VendorNo,
    aa.FailReason,
    aa.LastAttemptDate,
    aa.ItemLineItemDetailId,
    CONCAT(it.ItemNo, ' - ', cli.Description) AS CustItemNo,
    ilid.Quantity,
    ilid.UnitPrice,
    ilid.CustomerPrice,
    ilid.VendorItemNumber,
    ilid.VendorItemDescription,
    ilid.ExtPrice
  FROM AutoApproveReport aa USE INDEX (IX_AutoApproveReport_Filter),
       Invoice i,
       Vendor v,
       ItemLineItemDetail ilid,
       CustomerLocationItem cli,
       Item it
  WHERE i.ClientId = clientId
  AND i.Isdeleted = 0
  AND aa.InvoiceId = i.InvoiceId
  AND v.VendorId = i.VendorId
  AND aa.ItemLineItemDetailId = ilid.ItemLineItemDetailId
  AND cli.CustomerLocationItemId = ilid.CustomerLocationItemId
  AND it.ItemId = cli.ItemId
  AND (actionDateFrom IS NULL
  OR aa.ActionDate >= actionDateFrom)
  AND (actionDateTo IS NULL
  OR aa.ActionDate <= actionDateTo)
  AND (invoiceNo IS NULL
  OR invoiceNo = ''
  OR i.InvoiceNo LIKE CONCAT('', invoiceNo, '%'))
  AND aa.IsValid = FALSE;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInvoiceReviewReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetInvoiceReviewReport`(IN clientId int,
IN invoiceStatus int,
IN scannedDateFrom varchar(50),
IN scannedDateTo varchar(50))
BEGIN

  SELECT
    c.CustomerName,
    i.InvoiceId,
    i.InvoiceNo,
    i.InvoiceTotal,
    i.IsPoInvoice,
    i.PONumber,
    v.VendorNo,
    v.VendorName,
    i.ScannedDate,
    (SELECT
        MIN(ih.ActionDate)
      FROM InvoiceHistory ih
      WHERE ih.InvoiceId = i.InvoiceId
      AND ih.Action = 'QC') AS QCStart,
    (SELECT
        MAX(ih.ActionDate)
      FROM InvoiceHistory ih
      WHERE i.InvoiceId = ih.InvoiceId
      AND ih.Action = 'QC') AS QCEnd,
    (SELECT
        MIN(ih.ActionDate)
      FROM InvoiceHistory ih
      WHERE ih.InvoiceId = i.InvoiceId
      AND ih.Action = 'Validation') AS ValidationStart,
    (SELECT
        MAX(ih.ActionDate)
      FROM InvoiceHistory ih
      WHERE i.InvoiceId = ih.InvoiceId
      AND ih.Action = 'Validation') AS ValidationEnd
  FROM Invoice i
    INNER JOIN Client c
      ON i.ClientId = c.ClientId
    LEFT OUTER JOIN Vendor v
      ON i.VendorId = v.VendorId
  WHERE (clientId IS NULL
  OR clientId = 6
  OR i.ClientId = clientId)
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId IN (1, 3, 4)
  AND i.ValidationCompleted = 1
  AND (invoiceStatus IS NULL
  OR invoiceStatus = 0
  OR invoiceStatus = i.ApprovalStatusId)
  AND (scannedDateFrom IS NULL
  OR scannedDateFrom = ''
  OR i.ScannedDate >= scannedDateFrom)
  AND (scannedDateTo IS NULL
  OR scannedDateTo = ''
  OR i.ScannedDate <= scannedDateTo);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInvoiceStatusDashboard` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetInvoiceStatusDashboard`(IN filterClientId int,
IN filterDataType varchar(50), IN filterUserId char(36),
IN filterIsFilterViewForSupervisorByDepartmentEnabled bit,
IN filterShowPurchaserCityOnGrid bit,
IN filterUserIsAdministrator bit,
IN filterIsStatementActive bit)
BEGIN
  SET @isStatementActive = (SELECT
      COUNT(*)
    FROM `ClientSpecificConfig`
    WHERE `ClientId` = filterClientId) > 0;
  SET @filterCompanyCode = (SELECT
      ClientCompany.CompanyCode
    FROM `User`
      LEFT OUTER JOIN ClientCompany
        ON User.`ClientCompanyId` = ClientCompany.`Id`
    WHERE `User`.`UserId` = filterUserId);
  SET @filterUserCanViewConfidentialInvoice = (SELECT
      CASE WHEN User.`CanViewConfidentialInvoice` IS NOT NULL THEN User.`CanViewConfidentialInvoice` ELSE TRUE END
    FROM `User`
    WHERE `User`.`UserId` = filterUserId) OR filterUserIsAdministrator;
  SET @filterCanViewConfidentialInvoice = (SELECT
      (User.`CanViewConfidentialInvoice` = TRUE OR filterUserIsAdministrator = TRUE)
    FROM `User`
    WHERE `User`.`UserId` = filterUserId);

  SET @companyCodesExists = (SELECT
      COUNT(*)
    FROM `UserClientCompanies`
    WHERE `UserClientCompanies`.`UserId` = filterUserId);

  IF (filterDataType = 'CapturedInvoices'
    OR filterDataType = 'All') THEN
    SELECT
      Invoice.`InvoiceId`,
      Invoice.`InvoiceNo`,
      Vendor.`VendorNo`,
      Vendor.`VendorName`,
      DATE_FORMAT(Invoice.`InvoiceDate`, "%m/%d/%Y") AS InvoiceDate,
      DATE_FORMAT(Invoice.`LastActionDate`, "%m/%d/%Y") AS LastActionDate,
      Invoice.`InvoiceTotal`,
      Invoice.`InvoiceType`,
      InvoiceStatus.`StateName` AS InvoiceStatus,
      Invoice.`LastActionBy`,
      -- IsHold,
      Invoice.`IsPaused`,
      (SELECT
          GROUP_CONCAT(CONCAT(User.`LastName`, ', ', `User`.`FirstName`) SEPARATOR '; ')
        FROM `UserInvoiceAssignment`
          INNER JOIN `User`
            ON UserInvoiceAssignment.`UserId` = `User`.`UserId`
        WHERE UserInvoiceAssignment.`InvoiceId` = Invoice.`InvoiceId`) AS AssignedTo,
      '' ExceptionComments,
      Invoice.`Comment`,
      '' PauseComment,
      DATE_FORMAT(Invoice.`ScannedDate`, "%m/%d/%Y") AS ScannedDate,
      Invoice.`IsPOInvoice`,
      Batch.BatchName,
      Invoice.`ValidationCompleted`,
      Invoice.`PONumber`,
      -- POType
      Invoice.`DeliveryNumber`,
      -- FreightCenter,
      Invoice.`Tax`,
      (CASE WHEN filterShowPurchaserCityOnGrid = FALSE THEN '' ELSE (SELECT
              Department.`Description`
            FROM Department
            WHERE Department.`Id` = Invoice.`VendorSiteId`) END) AS BuyerCity,
      Invoice.`CompanyCode`,
      Batch.Sender InvoiceSender,
      IFNULL(Batch.Receiver, Batch.Source) InvoiceReceiver,
      Invoice.`AdjustmentAmount`,
      Department.`DepartmentName` AS 'Department',
      Invoice.`Currency`
    FROM Invoice
    USE INDEX (Invoice_InvoiceStatusDashboard, IX_BatchID, IX_VendorId)
      INNER JOIN Batch
        ON Invoice.`BatchID` = Batch.`ID`
      INNER JOIN InvoiceStatus
        ON Invoice.`ApprovalStatusId` = `InvoiceStatus`.`StateId`
      LEFT OUTER JOIN `Vendor`
        ON filterDataType <> 'All'
        AND Invoice.`VendorId` = Vendor.`VendorId`
      LEFT OUTER JOIN `Department`
        ON Invoice.`VendorSiteId` = Department.`Id`
    WHERE Invoice.`ClientId` = filterClientId
    AND `Invoice`.`IsDeleted` = FALSE
    AND `Invoice`.`IsPaused` = FALSE
    AND Invoice.`ApprovalStatusId` = 1
    AND (filterIsStatementActive = FALSE
    OR (filterIsStatementActive = TRUE
    AND Invoice.`InvoiceType` <> 'STATEMENT'))
    AND (filterUserIsAdministrator = TRUE
    OR filterIsFilterViewForSupervisorByDepartmentEnabled = FALSE
    OR (filterIsFilterViewForSupervisorByDepartmentEnabled = TRUE
    AND `IsInvoiceDepartmentInUserDepartments`(filterUserId, Invoice.`InvoiceId`) = TRUE))
    AND (filterUserIsAdministrator = TRUE
    OR @filterCompanyCode = ''
    OR @filterCompanyCode IS NULL
    OR Invoice.`CompanyCode` = @filterCompanyCode)
    AND (@companyCodesExists = 0
    OR Invoice.`CompanyCode` IN (SELECT
        ClientCompany.`CompanyCode`
      FROM UserClientCompanies,
           ClientCompany
      WHERE ClientCompany.`ClientId` = filterClientId
      AND ClientCompany.`Id` = UserClientCompanies.`ClientCompanyId`
      AND UserID = filterUserId))
    AND (@filterUserCanViewConfidentialInvoice = TRUE
    OR (CASE WHEN Vendor.`IsConfidential` IS NULL THEN (CASE WHEN Invoice.`IsConfidential` IS NULL THEN FALSE ELSE Invoice.`IsConfidential` END) ELSE Vendor.`IsConfidential` END) = FALSE);
  END IF;

  IF (filterDataType = 'CapturedStatements'
    OR filterDataType = 'All') THEN
    SELECT
      Invoice.`InvoiceId`,
      Invoice.`InvoiceNo`,
      Vendor.`VendorNo`,
      Vendor.`VendorName`,
      DATE_FORMAT(Invoice.`InvoiceDate`, "%m/%d/%Y") AS InvoiceDate,
      DATE_FORMAT(Invoice.`LastActionDate`, "%m/%d/%Y") AS LastActionDate,
      Invoice.`InvoiceTotal`,
      Invoice.`InvoiceType`,
      InvoiceStatus.`StateName` AS InvoiceStatus,
      Invoice.`LastActionBy`,
      -- IsHold,
      Invoice.`IsPaused`,
      (SELECT
          GROUP_CONCAT(CONCAT(User.`LastName`, ', ', `User`.`FirstName`) SEPARATOR '; ')
        FROM `UserInvoiceAssignment`
          INNER JOIN `User`
            ON UserInvoiceAssignment.`UserId` = `User`.`UserId`
        WHERE UserInvoiceAssignment.`InvoiceId` = Invoice.`InvoiceId`) AS AssignedTo,
      '' ExceptionComments,
      Invoice.`Comment`,
      '' PauseComment,
      DATE_FORMAT(Invoice.`ScannedDate`, "%m/%d/%Y") AS ScannedDate,
      Invoice.`IsPOInvoice`,
      Batch.BatchName,
      Invoice.`ValidationCompleted`,
      Invoice.`PONumber`,
      -- POType
      Invoice.`DeliveryNumber`,
      -- FreightCenter,
      Invoice.`Tax`,
      (CASE WHEN filterShowPurchaserCityOnGrid = FALSE THEN '' ELSE (SELECT
              Department.`Description`
            FROM Department
            WHERE Department.`Id` = Invoice.`VendorSiteId`) END) AS BuyerCity,
      Invoice.`CompanyCode`,
      Batch.Sender InvoiceSender,
      IFNULL(Batch.Receiver, Batch.Source) InvoiceReceiver,
      Invoice.`AdjustmentAmount`,
      Department.`DepartmentName` AS 'Department'
    FROM Invoice
    USE INDEX (Invoice_InvoiceStatusDashboard, IX_BatchID, IX_VendorId)
      INNER JOIN Batch
        ON Invoice.`BatchID` = Batch.`ID`
      INNER JOIN InvoiceStatus
        ON Invoice.`ApprovalStatusId` = `InvoiceStatus`.`StateId`
      LEFT OUTER JOIN `Vendor`
        ON filterDataType <> 'All'
        AND Invoice.`VendorId` = Vendor.`VendorId`
      LEFT OUTER JOIN `Department`
        ON Invoice.`VendorSiteId` = Department.`Id`
    WHERE Invoice.`ClientId` = filterClientId
    AND `Invoice`.`IsDeleted` = FALSE
    AND `Invoice`.`IsPaused` = FALSE
    AND Invoice.`ApprovalStatusId` = 1
    AND filterIsStatementActive = TRUE
    AND Invoice.`InvoiceType` = 'STATEMENT'
    AND (filterUserIsAdministrator = TRUE
    OR filterIsFilterViewForSupervisorByDepartmentEnabled = FALSE
    OR (filterIsFilterViewForSupervisorByDepartmentEnabled = TRUE
    AND `IsInvoiceDepartmentInUserDepartments`(filterUserId, Invoice.`InvoiceId`) = TRUE))
    AND (filterUserIsAdministrator = TRUE
    OR @filterCompanyCode = ''
    OR @filterCompanyCode IS NULL
    OR Invoice.`CompanyCode` = @filterCompanyCode)
    AND (@companyCodesExists = 0
    OR Invoice.`CompanyCode` IN (SELECT
        ClientCompany.`CompanyCode`
      FROM UserClientCompanies,
           ClientCompany
      WHERE ClientCompany.`ClientId` = filterClientId
      AND ClientCompany.`Id` = UserClientCompanies.`ClientCompanyId`
      AND UserID = filterUserId))
    AND (@filterUserCanViewConfidentialInvoice = TRUE
    OR (CASE WHEN Vendor.`IsConfidential` IS NULL THEN (CASE WHEN Invoice.`IsConfidential` IS NULL THEN FALSE ELSE Invoice.`IsConfidential` END) ELSE Vendor.`IsConfidential` END) = FALSE);
  END IF;

  IF (filterDataType = 'PausedInvoices'
    OR filterDataType = 'All') THEN
    SELECT
      Invoice.`InvoiceId`,
      Invoice.`InvoiceNo`,
      Vendor.`VendorNo`,
      Vendor.`VendorName`,
      DATE_FORMAT(Invoice.`InvoiceDate`, "%m/%d/%Y") AS InvoiceDate,
      DATE_FORMAT(Invoice.`LastActionDate`, "%m/%d/%Y") AS LastActionDate,
      DATE_FORMAT(Invoice.`PaymentDueDate`, "%m/%d/%Y") AS PaymentDueDate,
      Invoice.`InvoiceTotal`,
      Invoice.`InvoiceType`,
      InvoiceStatus.`StateName` AS InvoiceStatus,
      Invoice.`LastActionBy`,
      -- IsHold,
      Invoice.`IsPaused`,
      (SELECT
          GROUP_CONCAT(CONCAT(User.`LastName`, ', ', `User`.`FirstName`) SEPARATOR '; ')
        FROM `UserInvoiceAssignment`
          INNER JOIN `User`
            ON UserInvoiceAssignment.`UserId` = `User`.`UserId`
        WHERE UserInvoiceAssignment.`InvoiceId` = Invoice.`InvoiceId`) AS AssignedTo,
      '' ExceptionComments,
      Invoice.`Comment`,
      PausedInvoice.`Comment` AS PauseComment,
      DATE_FORMAT(Invoice.`ScannedDate`, "%m/%d/%Y") AS ScannedDate,
      Invoice.`IsPOInvoice`,
      Batch.BatchName,
      Invoice.`ValidationCompleted`,
      Invoice.`PONumber`,
      -- POType
      Invoice.`DeliveryNumber`,
      -- FreightCenter,
      Invoice.`Tax`,
      (CASE WHEN filterShowPurchaserCityOnGrid = FALSE THEN '' ELSE (SELECT
              Department.`Description`
            FROM Department
            WHERE Department.`Id` = Invoice.`VendorSiteId`) END) AS BuyerCity,
      Invoice.`CompanyCode`,
      Batch.Sender InvoiceSender,
      IFNULL(Batch.Receiver, Batch.Source) InvoiceReceiver,
      Invoice.`AdjustmentAmount`,
      Department.`DepartmentName` AS 'Department',
      Invoice.`Currency`
    FROM Invoice
    USE INDEX (Invoice_InvoiceStatusDashboard, IX_BatchID, IX_VendorId)
      INNER JOIN Batch
        ON Invoice.`BatchID` = Batch.`ID`
      INNER JOIN InvoiceStatus
        ON Invoice.`ApprovalStatusId` = `InvoiceStatus`.`StateId`
      LEFT OUTER JOIN `Vendor`
        ON filterDataType <> 'All'
        AND Invoice.`VendorId` = Vendor.`VendorId`
      LEFT OUTER JOIN `PausedInvoice`
        ON filterDataType <> 'All'
        AND Invoice.`InvoiceId` = PausedInvoice.`InvoiceId`
      LEFT OUTER JOIN `Department`
        ON Invoice.`VendorSiteId` = Department.`Id`
    WHERE Invoice.`ClientId` = filterClientId
    AND `Invoice`.`IsDeleted` = FALSE
    AND `Invoice`.`IsPaused` = TRUE
    AND (filterUserIsAdministrator = TRUE
    OR filterIsFilterViewForSupervisorByDepartmentEnabled = FALSE
    OR (filterIsFilterViewForSupervisorByDepartmentEnabled = TRUE
    AND `IsInvoiceDepartmentInUserDepartments`(filterUserId, Invoice.`InvoiceId`) = TRUE))
    AND (filterUserIsAdministrator = TRUE
    OR @filterCompanyCode = ''
    OR @filterCompanyCode IS NULL
    OR Invoice.`CompanyCode` = @filterCompanyCode)
    AND (@companyCodesExists = 0
    OR Invoice.`CompanyCode` IN (SELECT
        ClientCompany.`CompanyCode`
      FROM UserClientCompanies,
           ClientCompany
      WHERE ClientCompany.`ClientId` = filterClientId
      AND ClientCompany.`Id` = UserClientCompanies.`ClientCompanyId`
      AND UserID = filterUserId))
    AND (@filterUserCanViewConfidentialInvoice = TRUE
    OR (CASE WHEN Vendor.`IsConfidential` IS NULL THEN (CASE WHEN Invoice.`IsConfidential` IS NULL THEN FALSE ELSE Invoice.`IsConfidential` END) ELSE Vendor.`IsConfidential` END) = FALSE);
  END IF;

  IF (filterDataType = 'ExceptionInvoices'
    OR filterDataType = 'All') THEN
    SELECT
      Invoice.`InvoiceId`,
      Invoice.`InvoiceNo`,
      Vendor.`VendorNo`,
      Vendor.`VendorName`,
      DATE_FORMAT(Invoice.`InvoiceDate`, "%m/%d/%Y") AS InvoiceDate,
      DATE_FORMAT(Invoice.`LastActionDate`, "%m/%d/%Y") AS LastActionDate,
      DATE_FORMAT(Invoice.`PaymentDueDate`, "%m/%d/%Y") AS PaymentDueDate,
      Invoice.`InvoiceTotal`,
      Invoice.`InvoiceType`,
      InvoiceStatus.`StateName` AS InvoiceStatus,
      Invoice.`LastActionBy`,
      -- IsHold,
      Invoice.`IsPaused`,
      (SELECT
          GROUP_CONCAT(CONCAT(User.`LastName`, ', ', `User`.`FirstName`) SEPARATOR '; ')
        FROM `UserInvoiceAssignment`
          INNER JOIN `User`
            ON UserInvoiceAssignment.`UserId` = `User`.`UserId`
        WHERE UserInvoiceAssignment.`InvoiceId` = Invoice.`InvoiceId`) AS AssignedTo,
      (SELECT
          GROUP_CONCAT(`Exception`.`Comment` SEPARATOR ' | ')
        FROM `Exception`
        WHERE `Exception`.`InvoiceId` = Invoice.`InvoiceId`) AS ExceptionComments,
      Invoice.`Comment`,
      '' PauseComment,
      DATE_FORMAT(Invoice.`ScannedDate`, "%m/%d/%Y") AS ScannedDate,
      Invoice.`IsPOInvoice`,
      Batch.BatchName,
      Invoice.`ValidationCompleted`,
      Invoice.`PONumber`,
      -- POType
      Invoice.`DeliveryNumber`,
      -- FreightCenter,
      Invoice.`Tax`,
      (CASE WHEN filterShowPurchaserCityOnGrid = FALSE THEN '' ELSE (SELECT
              Department.`Description`
            FROM Department
            WHERE Department.`Id` = Invoice.`VendorSiteId`) END) AS BuyerCity,
      Invoice.`CompanyCode`,
      Batch.Sender InvoiceSender,
      IFNULL(Batch.Receiver, Batch.Source) InvoiceReceiver,
      Invoice.`AdjustmentAmount`,
      Department.`DepartmentName` AS 'Department'
    FROM Invoice
    USE INDEX (Invoice_InvoiceStatusDashboard, IX_BatchID, IX_VendorId)
      INNER JOIN Batch
        ON Invoice.`BatchID` = Batch.`ID`
      INNER JOIN InvoiceStatus
        ON Invoice.`ApprovalStatusId` = `InvoiceStatus`.`StateId`
      LEFT OUTER JOIN `Vendor`
        ON filterDataType <> 'All'
        AND Invoice.`VendorId` = Vendor.`VendorId`
      LEFT OUTER JOIN `Department`
        ON Invoice.`VendorSiteId` = Department.`Id`
    WHERE Invoice.`ClientId` = filterClientId
    AND `Invoice`.`IsDeleted` = FALSE
    AND `Invoice`.`IsPaused` = FALSE
    AND Invoice.`ApprovalStatusId` = 6
    AND (filterIsStatementActive = FALSE
    OR (filterIsStatementActive = TRUE
    AND Invoice.`InvoiceType` <> 'STATEMENT'))
    AND (filterUserIsAdministrator = TRUE
    OR filterIsFilterViewForSupervisorByDepartmentEnabled = FALSE
    OR (filterIsFilterViewForSupervisorByDepartmentEnabled = TRUE
    AND `IsInvoiceDepartmentInUserDepartments`(filterUserId, Invoice.`InvoiceId`) = TRUE))
    AND (filterUserIsAdministrator = TRUE
    OR @filterCompanyCode = ''
    OR @filterCompanyCode IS NULL
    OR Invoice.`CompanyCode` = @filterCompanyCode)
    AND (@companyCodesExists = 0
    OR Invoice.`CompanyCode` IN (SELECT
        ClientCompany.`CompanyCode`
      FROM UserClientCompanies,
           ClientCompany
      WHERE ClientCompany.`ClientId` = filterClientId
      AND ClientCompany.`Id` = UserClientCompanies.`ClientCompanyId`
      AND UserID = filterUserId))
    AND (@filterUserCanViewConfidentialInvoice = TRUE
    OR (CASE WHEN Vendor.`IsConfidential` IS NULL THEN (CASE WHEN Invoice.`IsConfidential` IS NULL THEN FALSE ELSE Invoice.`IsConfidential` END) ELSE Vendor.`IsConfidential` END) = FALSE);
  END IF;

  IF (filterDataType = 'ExceptionStatements'
    OR filterDataType = 'All') THEN
    SELECT
      Invoice.`InvoiceId`,
      Invoice.`InvoiceNo`,
      Vendor.`VendorNo`,
      Vendor.`VendorName`,
      DATE_FORMAT(Invoice.`InvoiceDate`, "%m/%d/%Y") AS InvoiceDate,
      DATE_FORMAT(Invoice.`LastActionDate`, "%m/%d/%Y") AS LastActionDate,
      Invoice.`InvoiceTotal`,
      Invoice.`InvoiceType`,
      InvoiceStatus.`StateName` AS InvoiceStatus,
      Invoice.`LastActionBy`,
      -- IsHold,
      Invoice.`IsPaused`,
      (SELECT
          GROUP_CONCAT(CONCAT(User.`LastName`, ', ', `User`.`FirstName`) SEPARATOR '; ')
        FROM `UserInvoiceAssignment`
          INNER JOIN `User`
            ON UserInvoiceAssignment.`UserId` = `User`.`UserId`
        WHERE UserInvoiceAssignment.`InvoiceId` = Invoice.`InvoiceId`) AS AssignedTo,
      '' ExceptionComments,
      Invoice.`Comment`,
      '' PauseComment,
      DATE_FORMAT(Invoice.`ScannedDate`, "%m/%d/%Y") AS ScannedDate,
      Invoice.`IsPOInvoice`,
      Batch.BatchName,
      Invoice.`ValidationCompleted`,
      Invoice.`PONumber`,
      -- POType
      Invoice.`DeliveryNumber`,
      -- FreightCenter,
      Invoice.`Tax`,
      (CASE WHEN filterShowPurchaserCityOnGrid = FALSE THEN '' ELSE (SELECT
              Department.`Description`
            FROM Department
            WHERE Department.`Id` = Invoice.`VendorSiteId`) END) AS BuyerCity,
      Invoice.`CompanyCode`,
      Batch.Sender InvoiceSender,
      IFNULL(Batch.Receiver, Batch.Source) InvoiceReceiver,
      Invoice.`AdjustmentAmount`,
      Department.`DepartmentName` AS 'Department'
    FROM Invoice
    USE INDEX (Invoice_InvoiceStatusDashboard, IX_BatchID, IX_VendorId)
      INNER JOIN Batch
        ON Invoice.`BatchID` = Batch.`ID`
      INNER JOIN InvoiceStatus
        ON Invoice.`ApprovalStatusId` = `InvoiceStatus`.`StateId`
      LEFT OUTER JOIN `Vendor`
        ON filterDataType <> 'All'
        AND Invoice.`VendorId` = Vendor.`VendorId`
      LEFT OUTER JOIN `Department`
        ON Invoice.`VendorSiteId` = Department.`Id`
    WHERE Invoice.`ClientId` = filterClientId
    AND `Invoice`.`IsDeleted` = FALSE
    AND `Invoice`.`IsPaused` = FALSE
    AND Invoice.`ApprovalStatusId` = 6
    AND filterIsStatementActive = TRUE
    AND Invoice.`InvoiceType` = 'STATEMENT'
    AND (filterUserIsAdministrator = TRUE
    OR filterIsFilterViewForSupervisorByDepartmentEnabled = FALSE
    OR (filterIsFilterViewForSupervisorByDepartmentEnabled = TRUE
    AND `IsInvoiceDepartmentInUserDepartments`(filterUserId, Invoice.`InvoiceId`) = TRUE))
    AND (filterUserIsAdministrator = TRUE
    OR @filterCompanyCode = ''
    OR @filterCompanyCode IS NULL
    OR Invoice.`CompanyCode` = @filterCompanyCode)
    AND (@companyCodesExists = 0
    OR Invoice.`CompanyCode` IN (SELECT
        ClientCompany.`CompanyCode`
      FROM UserClientCompanies,
           ClientCompany
      WHERE ClientCompany.`ClientId` = filterClientId
      AND ClientCompany.`Id` = UserClientCompanies.`ClientCompanyId`
      AND UserID = filterUserId))
    AND (@filterUserCanViewConfidentialInvoice = TRUE
    OR (CASE WHEN Vendor.`IsConfidential` IS NULL THEN (CASE WHEN Invoice.`IsConfidential` IS NULL THEN FALSE ELSE Invoice.`IsConfidential` END) ELSE Vendor.`IsConfidential` END) = FALSE);
  END IF;

  IF (filterDataType = 'POApprovalInvoices'
    OR filterDataType = 'All') THEN
    SELECT
      Invoice.`InvoiceId`,
      Invoice.`InvoiceNo`,
      Vendor.`VendorNo`,
      Vendor.`VendorName`,
      DATE_FORMAT(Invoice.`InvoiceDate`, "%m/%d/%Y") AS InvoiceDate,
      DATE_FORMAT(Invoice.`LastActionDate`, "%m/%d/%Y") AS LastActionDate,
      DATE_FORMAT(Invoice.`PaymentDueDate`, "%m/%d/%Y") AS PaymentDueDate,
      Invoice.`InvoiceTotal`,
      Invoice.`InvoiceType`,
      InvoiceStatus.`StateName` AS InvoiceStatus,
      Invoice.`LastActionBy`,
      -- IsHold,
      Invoice.`IsPaused`,
      (SELECT
          GROUP_CONCAT(CONCAT(User.`LastName`, ', ', `User`.`FirstName`) SEPARATOR '; ')
        FROM `UserInvoiceAssignment`
          INNER JOIN `User`
            ON UserInvoiceAssignment.`UserId` = `User`.`UserId`
        WHERE UserInvoiceAssignment.`InvoiceId` = Invoice.`InvoiceId`) AS AssignedTo,
      '' ExceptionComments,
      Invoice.`Comment`,
      '' PauseComment,
      DATE_FORMAT(Invoice.`ScannedDate`, "%m/%d/%Y") AS ScannedDate,
      Invoice.`IsPOInvoice`,
      Batch.BatchName,
      Invoice.`ValidationCompleted`,
      Invoice.`PONumber`,
      -- POType
      Invoice.`DeliveryNumber`,
      -- FreightCenter,
      Invoice.`Tax`,
      (CASE WHEN filterShowPurchaserCityOnGrid = FALSE THEN '' ELSE (SELECT
              Department.`Description`
            FROM Department
            WHERE Department.`Id` = Invoice.`VendorSiteId`) END) AS BuyerCity,
      Invoice.`CompanyCode`,
      Batch.Sender InvoiceSender,
      IFNULL(Batch.Receiver, Batch.Source) InvoiceReceiver,
      Invoice.`AdjustmentAmount`,
      Department.`DepartmentName` AS 'Department',
      Invoice.`UserField1`,
      Invoice.`Currency`
    FROM Invoice
    USE INDEX (Invoice_InvoiceStatusDashboard, IX_BatchID, IX_VendorId)
      INNER JOIN Batch
        ON Invoice.`BatchID` = Batch.`ID`
      INNER JOIN InvoiceStatus
        ON Invoice.`ApprovalStatusId` = `InvoiceStatus`.`StateId`
      LEFT OUTER JOIN `Vendor`
        ON filterDataType <> 'All'
        AND Invoice.`VendorId` = Vendor.`VendorId`
      LEFT OUTER JOIN `Department`
        ON Invoice.`VendorSiteId` = Department.`Id`
    WHERE Invoice.`ClientId` = filterClientId
    AND `Invoice`.`IsDeleted` = FALSE
    AND `Invoice`.`IsPaused` = FALSE
    AND Invoice.`ApprovalStatusId` = 3
    AND `Invoice`.`IsPOInvoice` = TRUE
    AND (filterUserIsAdministrator = TRUE
    OR filterIsFilterViewForSupervisorByDepartmentEnabled = FALSE
    OR (filterIsFilterViewForSupervisorByDepartmentEnabled = TRUE
    AND `IsInvoiceDepartmentInUserDepartments`(filterUserId, Invoice.`InvoiceId`) = TRUE))
    AND (filterUserIsAdministrator = TRUE
    OR @filterCompanyCode = ''
    OR @filterCompanyCode IS NULL
    OR Invoice.`CompanyCode` = @filterCompanyCode)
    AND (@companyCodesExists = 0
    OR Invoice.`CompanyCode` IN (SELECT
        ClientCompany.`CompanyCode`
      FROM UserClientCompanies,
           ClientCompany
      WHERE ClientCompany.`ClientId` = filterClientId
      AND ClientCompany.`Id` = UserClientCompanies.`ClientCompanyId`
      AND UserID = filterUserId))
    AND (@filterUserCanViewConfidentialInvoice = TRUE
    OR (CASE WHEN Vendor.`IsConfidential` IS NULL THEN (CASE WHEN Invoice.`IsConfidential` IS NULL THEN FALSE ELSE Invoice.`IsConfidential` END) ELSE Vendor.`IsConfidential` END) = FALSE)
    AND NOT EXISTS (SELECT
        *
      FROM UserInvoiceAssignment
      WHERE `UserInvoiceAssignment`.`InvoiceId` = Invoice.`InvoiceId`
      AND `UserInvoiceAssignment`.`HoldEndDate` IS NOT NULL
      AND `UserInvoiceAssignment`.`HoldEndDate` > NOW());
  END IF;

  IF (filterDataType = 'NoPOApprovalInvoices'
    OR filterDataType = 'All') THEN
    SELECT
      Invoice.`InvoiceId`,
      Invoice.`InvoiceNo`,
      Vendor.`VendorNo`,
      Vendor.`VendorName`,
      DATE_FORMAT(Invoice.`InvoiceDate`, "%m/%d/%Y") AS InvoiceDate,
      DATE_FORMAT(Invoice.`LastActionDate`, "%m/%d/%Y") AS LastActionDate,
      DATE_FORMAT(Invoice.`PaymentDueDate`, "%m/%d/%Y") AS PaymentDueDate,
      Invoice.`InvoiceTotal`,
      Invoice.`InvoiceType`,
      InvoiceStatus.`StateName` AS InvoiceStatus,
      Invoice.`LastActionBy`,
      -- IsHold,
      Invoice.`IsPaused`,
      (SELECT
          GROUP_CONCAT(CONCAT(User.`LastName`, ', ', `User`.`FirstName`) SEPARATOR '; ')
        FROM `UserInvoiceAssignment`
          INNER JOIN `User`
            ON UserInvoiceAssignment.`UserId` = `User`.`UserId`
        WHERE UserInvoiceAssignment.`InvoiceId` = Invoice.`InvoiceId`) AS AssignedTo,
      '' ExceptionComments,
      Invoice.`Comment`,
      '' PauseComment,
      DATE_FORMAT(Invoice.`ScannedDate`, "%m/%d/%Y") AS ScannedDate,
      Invoice.`IsPOInvoice`,
      Batch.BatchName,
      Invoice.`ValidationCompleted`,
      Invoice.`PONumber`,
      Invoice.`CheckNumber`,
      -- POType
      Invoice.`DeliveryNumber`,
      -- FreightCenter,
      Invoice.`Tax`,
      (CASE WHEN filterShowPurchaserCityOnGrid = FALSE THEN '' ELSE (SELECT
              Department.`Description`
            FROM Department
            WHERE Department.`Id` = Invoice.`VendorSiteId`) END) AS BuyerCity,
      Invoice.`CompanyCode`,
      Invoice.`UserField6`,
      Batch.Sender InvoiceSender,
      IFNULL(Batch.Receiver, Batch.Source) InvoiceReceiver,
      Invoice.`AdjustmentAmount`,
      Department.`DepartmentName` AS 'Department',
      Invoice.`Currency`,
      Invoice.`Description`
    FROM Invoice
    USE INDEX (Invoice_InvoiceStatusDashboard, IX_BatchID, IX_VendorId)
      INNER JOIN Batch
        ON Invoice.`BatchID` = Batch.`ID`
      INNER JOIN InvoiceStatus
        ON Invoice.`ApprovalStatusId` = `InvoiceStatus`.`StateId`
      LEFT OUTER JOIN `Vendor`
        ON filterDataType <> 'All'
        AND Invoice.`VendorId` = Vendor.`VendorId`
      LEFT OUTER JOIN `Department`
        ON Invoice.`VendorSiteId` = Department.`Id`
    WHERE Invoice.`ClientId` = filterClientId
    AND `Invoice`.`IsDeleted` = FALSE
    AND `Invoice`.`IsPaused` = FALSE
    AND `Invoice`.`ApprovalStatusId` = 3
    AND `Invoice`.`IsPOInvoice` = FALSE
    AND (filterUserIsAdministrator = TRUE
    OR filterIsFilterViewForSupervisorByDepartmentEnabled = FALSE
    OR (filterIsFilterViewForSupervisorByDepartmentEnabled = TRUE
    AND `IsInvoiceDepartmentInUserDepartments`(filterUserId, Invoice.`InvoiceId`) = TRUE))
    AND (filterUserIsAdministrator = TRUE
    OR @filterCompanyCode = ''
    OR @filterCompanyCode IS NULL
    OR Invoice.`CompanyCode` = @filterCompanyCode)
    AND (@companyCodesExists = 0
    OR Invoice.`CompanyCode` IN (SELECT
        ClientCompany.`CompanyCode`
      FROM UserClientCompanies,
           ClientCompany
      WHERE ClientCompany.`ClientId` = filterClientId
      AND ClientCompany.`Id` = UserClientCompanies.`ClientCompanyId`
      AND UserID = filterUserId))
    AND (@filterUserCanViewConfidentialInvoice = TRUE
    OR (CASE WHEN Vendor.`IsConfidential` IS NULL THEN (CASE WHEN Invoice.`IsConfidential` IS NULL THEN FALSE ELSE Invoice.`IsConfidential` END) ELSE Vendor.`IsConfidential` END) = FALSE);
  END IF;

  IF (filterDataType = 'HoldInvoices30Days'
    OR filterDataType = 'All') THEN
    SELECT
      Invoice.`InvoiceId`,
      Invoice.`InvoiceNo`,
      Vendor.`VendorNo`,
      Vendor.`VendorName`,
      DATE_FORMAT(Invoice.`InvoiceDate`, "%m/%d/%Y") AS InvoiceDate,
      DATE_FORMAT(Invoice.`LastActionDate`, "%m/%d/%Y") AS LastActionDate,
      Invoice.`InvoiceTotal`,
      Invoice.`InvoiceType`,
      InvoiceStatus.`StateName` AS InvoiceStatus,
      Invoice.`LastActionBy`,
      -- IsHold,
      Invoice.`IsPaused`,
      (SELECT
          GROUP_CONCAT(CONCAT(User.`LastName`, ', ', `User`.`FirstName`) SEPARATOR '; ')
        FROM `UserInvoiceAssignment`
          INNER JOIN `User`
            ON UserInvoiceAssignment.`UserId` = `User`.`UserId`
        WHERE UserInvoiceAssignment.`InvoiceId` = Invoice.`InvoiceId`) AS AssignedTo,
      '' ExceptionComments,
      Invoice.`Comment`,
      '' PauseComment,
      DATE_FORMAT(Invoice.`ScannedDate`, "%m/%d/%Y") AS ScannedDate,
      Invoice.`IsPOInvoice`,
      Batch.BatchName,
      Invoice.`ValidationCompleted`,
      Invoice.`PONumber`,
      -- POType
      Invoice.`DeliveryNumber`,
      -- FreightCenter,
      Invoice.`Tax`,
      (CASE WHEN filterShowPurchaserCityOnGrid = FALSE THEN '' ELSE (SELECT
              Department.`Description`
            FROM Department
            WHERE Department.`Id` = Invoice.`VendorSiteId`) END) AS BuyerCity,
      Invoice.`CompanyCode`,
      Batch.Sender InvoiceSender,
      IFNULL(Batch.Receiver, Batch.Source) InvoiceReceiver,
      Invoice.`AdjustmentAmount`,
      Department.`DepartmentName` AS 'Department'
    FROM Invoice
    USE INDEX (Invoice_InvoiceStatusDashboard, IX_BatchID, IX_VendorId)
      INNER JOIN Batch
        ON Invoice.`BatchID` = Batch.`ID`
      INNER JOIN InvoiceStatus
        ON Invoice.`ApprovalStatusId` = `InvoiceStatus`.`StateId`
      LEFT OUTER JOIN `Vendor`
        ON filterDataType <> 'All'
        AND Invoice.`VendorId` = Vendor.`VendorId`
      LEFT OUTER JOIN `Department`
        ON Invoice.`VendorSiteId` = Department.`Id`
    WHERE Invoice.`ClientId` = filterClientId
    AND `Invoice`.`IsDeleted` = FALSE
    AND `Invoice`.`IsPaused` = FALSE
    AND `Invoice`.`ApprovalStatusId` = 3
    AND `Invoice`.`IsPOInvoice` = TRUE
    AND (filterUserIsAdministrator = TRUE
    OR filterIsFilterViewForSupervisorByDepartmentEnabled = FALSE
    OR (filterIsFilterViewForSupervisorByDepartmentEnabled = TRUE
    AND `IsInvoiceDepartmentInUserDepartments`(filterUserId, Invoice.`InvoiceId`) = TRUE))
    AND (filterUserIsAdministrator = TRUE
    OR @filterCompanyCode = ''
    OR @filterCompanyCode IS NULL
    OR Invoice.`CompanyCode` = @filterCompanyCode)
    AND (@companyCodesExists = 0
    OR Invoice.`CompanyCode` IN (SELECT
        ClientCompany.`CompanyCode`
      FROM UserClientCompanies,
           ClientCompany
      WHERE ClientCompany.`ClientId` = filterClientId
      AND ClientCompany.`Id` = UserClientCompanies.`ClientCompanyId`
      AND UserID = filterUserId))
    AND (@filterUserCanViewConfidentialInvoice = TRUE
    OR (CASE WHEN Vendor.`IsConfidential` IS NULL THEN (CASE WHEN Invoice.`IsConfidential` IS NULL THEN FALSE ELSE Invoice.`IsConfidential` END) ELSE Vendor.`IsConfidential` END) = FALSE)
    AND EXISTS (SELECT
        *
      FROM UserInvoiceAssignment
      WHERE `UserInvoiceAssignment`.`InvoiceId` = Invoice.`InvoiceId`
      AND `UserInvoiceAssignment`.`HoldStartDate` IS NOT NULL
      AND `UserInvoiceAssignment`.`HoldEndDate` IS NOT NULL
      AND `UserInvoiceAssignment`.`HoldStartDate` <= NOW()
      AND `UserInvoiceAssignment`.`HoldEndDate` > NOW()
      AND DIFFDays(Invoice.`ScannedDate`, NOW()) > 30);
  END IF;

  IF (filterDataType = 'HoldInvoices15Days'
    OR filterDataType = 'All') THEN
    SELECT
      Invoice.`InvoiceId`,
      Invoice.`InvoiceNo`,
      Vendor.`VendorNo`,
      Vendor.`VendorName`,
      DATE_FORMAT(Invoice.`InvoiceDate`, "%m/%d/%Y") AS InvoiceDate,
      DATE_FORMAT(Invoice.`LastActionDate`, "%m/%d/%Y") AS LastActionDate,
      Invoice.`InvoiceTotal`,
      Invoice.`InvoiceType`,
      InvoiceStatus.`StateName` AS InvoiceStatus,
      Invoice.`LastActionBy`,
      -- IsHold,
      Invoice.`IsPaused`,
      (SELECT
          GROUP_CONCAT(CONCAT(User.`LastName`, ', ', `User`.`FirstName`) SEPARATOR '; ')
        FROM `UserInvoiceAssignment`
          INNER JOIN `User`
            ON UserInvoiceAssignment.`UserId` = `User`.`UserId`
        WHERE UserInvoiceAssignment.`InvoiceId` = Invoice.`InvoiceId`) AS AssignedTo,
      '' ExceptionComments,
      Invoice.`Comment`,
      '' PauseComment,
      DATE_FORMAT(Invoice.`ScannedDate`, "%m/%d/%Y") AS ScannedDate,
      Invoice.`IsPOInvoice`,
      Batch.BatchName,
      Invoice.`ValidationCompleted`,
      Invoice.`PONumber`,
      -- POType
      Invoice.`DeliveryNumber`,
      -- FreightCenter,
      Invoice.`Tax`,
      (CASE WHEN filterShowPurchaserCityOnGrid = FALSE THEN '' ELSE (SELECT
              Department.`Description`
            FROM Department
            WHERE Department.`Id` = Invoice.`VendorSiteId`) END) AS BuyerCity,
      Invoice.`CompanyCode`,
      Batch.Sender InvoiceSender,
      IFNULL(Batch.Receiver, Batch.Source) InvoiceReceiver,
      Invoice.`AdjustmentAmount`,
      Department.`DepartmentName` AS 'Department'
    FROM Invoice
    USE INDEX (Invoice_InvoiceStatusDashboard, IX_BatchID, IX_VendorId)
      INNER JOIN Batch
        ON Invoice.`BatchID` = Batch.`ID`
      INNER JOIN InvoiceStatus
        ON Invoice.`ApprovalStatusId` = `InvoiceStatus`.`StateId`
      LEFT OUTER JOIN `Vendor`
        ON filterDataType <> 'All'
        AND Invoice.`VendorId` = Vendor.`VendorId`
      LEFT OUTER JOIN `Department`
        ON Invoice.`VendorSiteId` = Department.`Id`
    WHERE Invoice.`ClientId` = filterClientId
    AND `Invoice`.`IsDeleted` = FALSE
    AND `Invoice`.`IsPaused` = FALSE
    AND `Invoice`.`ApprovalStatusId` = 3
    AND `Invoice`.`IsPOInvoice` = TRUE
    AND (filterUserIsAdministrator = TRUE
    OR filterIsFilterViewForSupervisorByDepartmentEnabled = FALSE
    OR (filterIsFilterViewForSupervisorByDepartmentEnabled = TRUE
    AND `IsInvoiceDepartmentInUserDepartments`(filterUserId, Invoice.`InvoiceId`) = TRUE))
    AND (filterUserIsAdministrator = TRUE
    OR @filterCompanyCode = ''
    OR @filterCompanyCode IS NULL
    OR Invoice.`CompanyCode` = @filterCompanyCode)
    AND (@companyCodesExists = 0
    OR Invoice.`CompanyCode` IN (SELECT
        ClientCompany.`CompanyCode`
      FROM UserClientCompanies,
           ClientCompany
      WHERE ClientCompany.`ClientId` = filterClientId
      AND ClientCompany.`Id` = UserClientCompanies.`ClientCompanyId`
      AND UserID = filterUserId))
    AND (@filterUserCanViewConfidentialInvoice = TRUE
    OR (CASE WHEN Vendor.`IsConfidential` IS NULL THEN (CASE WHEN Invoice.`IsConfidential` IS NULL THEN FALSE ELSE Invoice.`IsConfidential` END) ELSE Vendor.`IsConfidential` END) = FALSE)
    AND EXISTS (SELECT
        *
      FROM UserInvoiceAssignment
      WHERE `UserInvoiceAssignment`.`InvoiceId` = Invoice.`InvoiceId`
      AND `UserInvoiceAssignment`.`HoldStartDate` IS NOT NULL
      AND `UserInvoiceAssignment`.`HoldEndDate` IS NOT NULL
      AND `UserInvoiceAssignment`.`HoldStartDate` <= NOW()
      AND `UserInvoiceAssignment`.`HoldEndDate` > NOW()
      AND DIFFDays(Invoice.`ScannedDate`, NOW()) <= 30
      AND DIFFDays(Invoice.`ScannedDate`, NOW()) > 15);
  END IF;

  IF (filterDataType = 'HoldInvoices7Days'
    OR filterDataType = 'All') THEN
    SELECT
      Invoice.`InvoiceId`,
      Invoice.`InvoiceNo`,
      Vendor.`VendorNo`,
      Vendor.`VendorName`,
      DATE_FORMAT(Invoice.`InvoiceDate`, "%m/%d/%Y") AS InvoiceDate,
      DATE_FORMAT(Invoice.`LastActionDate`, "%m/%d/%Y") AS LastActionDate,
      Invoice.`InvoiceTotal`,
      Invoice.`InvoiceType`,
      InvoiceStatus.`StateName` AS InvoiceStatus,
      Invoice.`LastActionBy`,
      -- IsHold,
      Invoice.`IsPaused`,
      (SELECT
          GROUP_CONCAT(CONCAT(User.`LastName`, ', ', `User`.`FirstName`) SEPARATOR '; ')
        FROM `UserInvoiceAssignment`
          INNER JOIN `User`
            ON UserInvoiceAssignment.`UserId` = `User`.`UserId`
        WHERE UserInvoiceAssignment.`InvoiceId` = Invoice.`InvoiceId`) AS AssignedTo,
      '' ExceptionComments,
      Invoice.`Comment`,
      '' PauseComment,
      DATE_FORMAT(Invoice.`ScannedDate`, "%m/%d/%Y") AS ScannedDate,
      Invoice.`IsPOInvoice`,
      Batch.BatchName,
      Invoice.`ValidationCompleted`,
      Invoice.`PONumber`,
      -- POType
      Invoice.`DeliveryNumber`,
      -- FreightCenter,
      Invoice.`Tax`,
      (CASE WHEN filterShowPurchaserCityOnGrid = FALSE THEN '' ELSE (SELECT
              Department.`Description`
            FROM Department
            WHERE Department.`Id` = Invoice.`VendorSiteId`) END) AS BuyerCity,
      Invoice.`CompanyCode`,
      Batch.Sender InvoiceSender,
      IFNULL(Batch.Receiver, Batch.Source) InvoiceReceiver,
      Invoice.`AdjustmentAmount`,
      Department.`DepartmentName` AS 'Department'
    FROM Invoice
    USE INDEX (Invoice_InvoiceStatusDashboard, IX_BatchID, IX_VendorId)
      INNER JOIN Batch
        ON Invoice.`BatchID` = Batch.`ID`
      INNER JOIN InvoiceStatus
        ON Invoice.`ApprovalStatusId` = `InvoiceStatus`.`StateId`
      LEFT OUTER JOIN `Vendor`
        ON filterDataType <> 'All'
        AND Invoice.`VendorId` = Vendor.`VendorId`
      LEFT OUTER JOIN `Department`
        ON Invoice.`VendorSiteId` = Department.`Id`
    WHERE Invoice.`ClientId` = filterClientId
    AND `Invoice`.`IsDeleted` = FALSE
    AND `Invoice`.`IsPaused` = FALSE
    AND `Invoice`.`ApprovalStatusId` = 3
    AND `Invoice`.`IsPOInvoice` = TRUE
    AND (filterUserIsAdministrator = TRUE
    OR filterIsFilterViewForSupervisorByDepartmentEnabled = FALSE
    OR (filterIsFilterViewForSupervisorByDepartmentEnabled = TRUE
    AND `IsInvoiceDepartmentInUserDepartments`(filterUserId, Invoice.`InvoiceId`) = TRUE))
    AND (filterUserIsAdministrator = TRUE
    OR @filterCompanyCode = ''
    OR @filterCompanyCode IS NULL
    OR Invoice.`CompanyCode` = @filterCompanyCode)
    AND (@companyCodesExists = 0
    OR Invoice.`CompanyCode` IN (SELECT
        ClientCompany.`CompanyCode`
      FROM UserClientCompanies,
           ClientCompany
      WHERE ClientCompany.`ClientId` = filterClientId
      AND ClientCompany.`Id` = UserClientCompanies.`ClientCompanyId`
      AND UserID = filterUserId))
    AND (@filterUserCanViewConfidentialInvoice = TRUE
    OR (CASE WHEN Vendor.`IsConfidential` IS NULL THEN (CASE WHEN Invoice.`IsConfidential` IS NULL THEN FALSE ELSE Invoice.`IsConfidential` END) ELSE Vendor.`IsConfidential` END) = FALSE)
    AND EXISTS (SELECT
        *
      FROM UserInvoiceAssignment
      WHERE `UserInvoiceAssignment`.`InvoiceId` = Invoice.`InvoiceId`
      AND `UserInvoiceAssignment`.`HoldStartDate` IS NOT NULL
      AND `UserInvoiceAssignment`.`HoldEndDate` IS NOT NULL
      AND `UserInvoiceAssignment`.`HoldStartDate` <= NOW()
      AND `UserInvoiceAssignment`.`HoldEndDate` > NOW()
      AND DIFFDays(Invoice.`ScannedDate`, NOW()) <= 15
      AND DIFFDays(Invoice.`ScannedDate`, NOW()) > 7);
  END IF;

  IF (filterDataType = 'HoldInvoices0_7Days'
    OR filterDataType = 'All') THEN
    SELECT
      Invoice.`InvoiceId`,
      Invoice.`InvoiceNo`,
      Vendor.`VendorNo`,
      Vendor.`VendorName`,
      DATE_FORMAT(Invoice.`InvoiceDate`, "%m/%d/%Y") AS InvoiceDate,
      DATE_FORMAT(Invoice.`LastActionDate`, "%m/%d/%Y") AS LastActionDate,
      Invoice.`InvoiceTotal`,
      Invoice.`InvoiceType`,
      InvoiceStatus.`StateName` AS InvoiceStatus,
      Invoice.`LastActionBy`,
      -- IsHold,
      Invoice.`IsPaused`,
      (SELECT
          GROUP_CONCAT(CONCAT(User.`LastName`, ', ', `User`.`FirstName`) SEPARATOR '; ')
        FROM `UserInvoiceAssignment`
          INNER JOIN `User`
            ON UserInvoiceAssignment.`UserId` = `User`.`UserId`
        WHERE UserInvoiceAssignment.`InvoiceId` = Invoice.`InvoiceId`) AS AssignedTo,
      '' ExceptionComments,
      Invoice.`Comment`,
      '' PauseComment,
      DATE_FORMAT(Invoice.`ScannedDate`, "%m/%d/%Y") AS ScannedDate,
      Invoice.`IsPOInvoice`,
      Batch.BatchName,
      Invoice.`ValidationCompleted`,
      Invoice.`PONumber`,
      -- POType
      Invoice.`DeliveryNumber`,
      -- FreightCenter,
      Invoice.`Tax`,
      (CASE WHEN filterShowPurchaserCityOnGrid = FALSE THEN '' ELSE (SELECT
              Department.`Description`
            FROM Department
            WHERE Department.`Id` = Invoice.`VendorSiteId`) END) AS BuyerCity,
      Invoice.`CompanyCode`,
      Batch.Sender InvoiceSender,
      IFNULL(Batch.Receiver, Batch.Source) InvoiceReceiver,
      Invoice.`AdjustmentAmount`,
      Department.`DepartmentName` AS 'Department'
    FROM Invoice
    USE INDEX (Invoice_InvoiceStatusDashboard, IX_BatchID, IX_VendorId)
      INNER JOIN Batch
        ON Invoice.`BatchID` = Batch.`ID`
      INNER JOIN InvoiceStatus
        ON Invoice.`ApprovalStatusId` = `InvoiceStatus`.`StateId`
      LEFT OUTER JOIN `Vendor`
        ON filterDataType <> 'All'
        AND Invoice.`VendorId` = Vendor.`VendorId`
      LEFT OUTER JOIN `Department`
        ON Invoice.`VendorSiteId` = Department.`Id`
    WHERE Invoice.`ClientId` = filterClientId
    AND `Invoice`.`IsDeleted` = FALSE
    AND `Invoice`.`IsPaused` = FALSE
    AND `Invoice`.`ApprovalStatusId` = 3
    AND `Invoice`.`IsPOInvoice` = TRUE
    AND (filterUserIsAdministrator = TRUE
    OR filterIsFilterViewForSupervisorByDepartmentEnabled = FALSE
    OR (filterIsFilterViewForSupervisorByDepartmentEnabled = TRUE
    AND `IsInvoiceDepartmentInUserDepartments`(filterUserId, Invoice.`InvoiceId`) = TRUE))
    AND (filterUserIsAdministrator = TRUE
    OR @filterCompanyCode = ''
    OR @filterCompanyCode IS NULL
    OR Invoice.`CompanyCode` = @filterCompanyCode)
    AND (@companyCodesExists = 0
    OR Invoice.`CompanyCode` IN (SELECT
        ClientCompany.`CompanyCode`
      FROM UserClientCompanies,
           ClientCompany
      WHERE ClientCompany.`ClientId` = filterClientId
      AND ClientCompany.`Id` = UserClientCompanies.`ClientCompanyId`
      AND UserID = filterUserId))
    AND (@filterUserCanViewConfidentialInvoice = TRUE
    OR (CASE WHEN Vendor.`IsConfidential` IS NULL THEN (CASE WHEN Invoice.`IsConfidential` IS NULL THEN FALSE ELSE Invoice.`IsConfidential` END) ELSE Vendor.`IsConfidential` END) = FALSE)
    AND EXISTS (SELECT
        *
      FROM UserInvoiceAssignment
      WHERE `UserInvoiceAssignment`.`InvoiceId` = Invoice.`InvoiceId`
      AND `UserInvoiceAssignment`.`HoldStartDate` IS NOT NULL
      AND `UserInvoiceAssignment`.`HoldEndDate` IS NOT NULL
      AND `UserInvoiceAssignment`.`HoldStartDate` <= NOW()
      AND `UserInvoiceAssignment`.`HoldEndDate` > NOW()
      AND DIFFDays(Invoice.`ScannedDate`, NOW()) <= 7
      AND DIFFDays(Invoice.`ScannedDate`, NOW()) >= 0);
  END IF;

  IF (filterDataType = 'ApprovedInvoices'
    OR filterDataType = 'All') THEN
    SELECT
      Invoice.`InvoiceId`,
      Invoice.`InvoiceNo`,
      Vendor.`VendorNo`,
      Vendor.`VendorName`,
      DATE_FORMAT(Invoice.`InvoiceDate`, "%m/%d/%Y") AS InvoiceDate,
      DATE_FORMAT(Invoice.`LastActionDate`, "%m/%d/%Y") AS LastActionDate,
      Invoice.`InvoiceTotal`,
      Invoice.`InvoiceType`,
      InvoiceStatus.`StateName` AS InvoiceStatus,
      Invoice.`LastActionBy`,
      -- IsHold,
      Invoice.`IsPaused`,
      (SELECT
          GROUP_CONCAT(CONCAT(User.`LastName`, ', ', `User`.`FirstName`) SEPARATOR ';')
        FROM `UserInvoiceAssignment`
          INNER JOIN `User`
            ON UserInvoiceAssignment.`UserId` = `User`.`UserId`
        WHERE UserInvoiceAssignment.`InvoiceId` = Invoice.`InvoiceId`) AS AssignedTo,
      '' ExceptionComments,
      Invoice.`Comment`,
      '' PauseComment,
      DATE_FORMAT(Invoice.`ScannedDate`, "%m/%d/%Y") AS ScannedDate,
      Invoice.`IsPOInvoice`,
      Batch.BatchName,
      Invoice.`ValidationCompleted`,
      Invoice.`PONumber`,
      -- POType
      Invoice.`DeliveryNumber`,
      -- FreightCenter,
      Invoice.`Tax`,
      (CASE WHEN filterShowPurchaserCityOnGrid = FALSE THEN '' ELSE (SELECT
              Department.`Description`
            FROM Department
            WHERE Department.`Id` = Invoice.`VendorSiteId`) END) AS BuyerCity,
      Invoice.`CompanyCode`,
      Batch.Sender InvoiceSender,
      IFNULL(Batch.Receiver, Batch.Source) InvoiceReceiver,
      Invoice.`AdjustmentAmount`,
      Department.`DepartmentName` AS 'Department'
    FROM Invoice
    USE INDEX (Invoice_InvoiceStatusDashboard, IX_BatchID, IX_VendorId)
      INNER JOIN Batch
        ON Invoice.`BatchID` = Batch.`ID`
      INNER JOIN InvoiceStatus
        ON Invoice.`ApprovalStatusId` = `InvoiceStatus`.`StateId`
      LEFT OUTER JOIN `Vendor`
        ON filterDataType <> 'All'
        AND Invoice.`VendorId` = Vendor.`VendorId`
      LEFT OUTER JOIN `Department`
        ON Invoice.`VendorSiteId` = Department.`Id`
    WHERE Invoice.`ClientId` = filterClientId
    AND `Invoice`.`IsDeleted` = FALSE
    AND `Invoice`.`IsPaused` = FALSE
    AND `Invoice`.`ApprovalStatusId` = 4
    AND (filterUserIsAdministrator = TRUE
    OR filterIsFilterViewForSupervisorByDepartmentEnabled = FALSE
    OR (filterIsFilterViewForSupervisorByDepartmentEnabled = TRUE
    AND `IsInvoiceDepartmentInUserDepartments`(filterUserId, Invoice.`InvoiceId`) = TRUE))
    AND (filterUserIsAdministrator = TRUE
    OR @filterCompanyCode = ''
    OR @filterCompanyCode IS NULL
    OR Invoice.`CompanyCode` = @filterCompanyCode)
    AND (@companyCodesExists = 0
    OR Invoice.`CompanyCode` IN (SELECT
        ClientCompany.`CompanyCode`
      FROM UserClientCompanies,
           ClientCompany
      WHERE ClientCompany.`ClientId` = filterClientId
      AND ClientCompany.`Id` = UserClientCompanies.`ClientCompanyId`
      AND UserID = filterUserId))
    AND (@filterUserCanViewConfidentialInvoice = TRUE
    OR (CASE WHEN Vendor.`IsConfidential` IS NULL THEN (CASE WHEN Invoice.`IsConfidential` IS NULL THEN FALSE ELSE Invoice.`IsConfidential` END) ELSE Vendor.`IsConfidential` END) = FALSE);
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetInvoiceStatusVendorPortal` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetInvoiceStatusVendorPortal`(IN clientId int,
IN userId char(36),
IN searchTerm varchar(100),
IN invoiceStatus int,
IN invoiceDateFrom date,
IN invoiceDateTo date,
IN scannedDateFrom date,
IN scannedDateTo date,
IN invoiceTotalFrom decimal(18, 2),
IN invoiceTotalTo decimal(18, 2))
BEGIN

  SELECT
    i.InvoiceId,
    i.InvoiceDate,
    i.InvoiceNo,
    i.PONumber,
    i.InvoiceTotal,
    ist.StateName AS InvoiceStatu,
    (SELECT
        cc.Description
      FROM ClientCompany cc
      WHERE cc.ClientId = clientId
      AND cc.CompanyCode = i.CompanyCode) AS CompanyCode,
    i.CheckNumber,
    i.ScannedDate,
    i.ArchiveReason,
    i.Comment,
    i.CheckDate,
    b.Source
  FROM Invoice i

    LEFT OUTER JOIN InvoiceStatus ist
      ON i.ApprovalStatusId = ist.StateId
    LEFT OUTER JOIN Vendor v
      ON i.VendorId = v.VendorId
    LEFT OUTER JOIN Batch b
      ON i.BatchID = b.ID

  WHERE i.ClientId = clientId
  AND i.IsDeleted = 0
  AND (v.UserId = userId)
  AND (searchTerm IS NULL
  OR searchTerm = ''
  OR i.InvoiceNo LIKE CONCAT('', searchTerm, '%'))
  AND (invoiceDateFrom IS NULL
  OR i.InvoiceDate >= invoiceDateFrom)
  AND (invoiceDateTo IS NULL
  OR i.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))
  AND (scannedDateFrom IS NULL
  OR i.ScannedDate >= scannedDateFrom)
  AND (scannedDateTo IS NULL
  OR i.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
  AND (invoiceTotalFrom IS NULL
  OR i.InvoiceTotal >= invoiceTotalFrom)
  AND (invoiceTotalTo IS NULL
  OR i.InvoiceTotal <= invoiceTotalTo)
  AND (invoiceStatus IS NULL
  OR i.ApprovalStatusId = invoiceStatus);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetLineItemSumQuantity` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetLineItemSumQuantity`(
    IN p_invoiceId INT,
    IN p_vendorId INT,
    IN p_clientId INT,
    IN p_itemNumber VARCHAR(255),
    IN p_poNumber VARCHAR(255),
    IN p_poId INT,
    IN p_recievedTransactionId INT,
    IN p_lineNo INT,
    IN p_poLineId INT,
    IN p_matchItemNumberAndPONumber BOOLEAN,
    IN p_matchRecievedTransactionIdAndPONumber BOOLEAN,
    IN p_matchPOLine_GRN_LineNo BOOLEAN,
    IN p_matchLineNo BOOLEAN,
    IN p_considerUpdatedOnPOLines BOOLEAN
)
BEGIN
    SELECT SUM(lid.Quantity) AS SumQuantity
    FROM `LineItemDetail` lid
    JOIN Invoice inv ON lid.InvoiceId = inv.InvoiceId
    WHERE lid.InvoiceId != p_invoiceId
      AND inv.IsPOInvoice = 1
      AND inv.IsDeleted = 0
      AND lid.VendorId = p_vendorId
      AND inv.ApprovalStatusId NOT IN (CAST(6 AS UNSIGNED), CAST(3 AS UNSIGNED), CAST(1 AS UNSIGNED))
      AND inv.InvoiceType = 'Invoice'
      AND inv.ClientId = p_clientId
      AND (
          (p_matchItemNumberAndPONumber AND lid.ProductId = p_itemNumber AND lid.PONumber = p_poNumber) OR
          (!p_matchItemNumberAndPONumber AND lid.POId = p_poId)
      )
      AND (
          (p_matchRecievedTransactionIdAndPONumber AND lid.RecievedTransactionId = p_recievedTransactionId AND lid.PONumber = p_poNumber) OR
          (!p_matchRecievedTransactionIdAndPONumber)
      )
      AND (
          (p_matchPOLine_GRN_LineNo AND lid.RecievedTransactionId = p_recievedTransactionId AND lid.PONumber = p_poNumber AND lid.LineNo = p_lineNo AND lid.POLineId = p_poLineId) OR
          (!p_matchPOLine_GRN_LineNo)
      )
      AND (
          (p_matchLineNo AND lid.PONumber = p_poNumber AND lid.LineNo = p_lineNo) OR
          (!p_matchLineNo)
      )
      AND (
          (p_considerUpdatedOnPOLines AND (lid.UserField7 IS NOT NULL OR lid.UserField6 IS NOT NULL)) OR
          (!p_considerUpdatedOnPOLines)
      );
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetLineItemSumQuantity3` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetLineItemSumQuantity3`(
    IN p_invoiceId INT,
    IN p_vendorId INT,
    IN p_clientId INT,
    IN p_itemNumber VARCHAR(255),
    IN p_poNumber VARCHAR(255),
    IN p_poId INT,
    IN p_recievedTransactionId INT,
    IN p_lineNo INT,
    IN p_poLineId INT,
    IN p_matchItemNumberAndPONumber BOOLEAN,
    IN p_matchRecievedTransactionIdAndPONumber BOOLEAN,
    IN p_matchPOLine_GRN_LineNo BOOLEAN,
    IN p_matchLineNo BOOLEAN,
    IN p_considerUpdatedOnPOLines BOOLEAN
)
BEGIN
    SELECT SUM(lid.Quantity) AS SumQuantity
    FROM `LineItemDetail` lid
    JOIN Invoice inv ON lid.InvoiceId = inv.InvoiceId
    WHERE lid.InvoiceId != p_invoiceId
      AND inv.IsPOInvoice = 1
      AND inv.IsDeleted = 0
      AND lid.VendorId = p_vendorId
      AND inv.ApprovalStatusId NOT IN (1,3,6)
      AND inv.InvoiceType = 'Invoice'
      AND inv.ClientId = p_clientId
      AND (
          (p_matchItemNumberAndPONumber AND lid.ProductId = p_itemNumber AND lid.PONumber = p_poNumber) OR
          (!p_matchItemNumberAndPONumber AND lid.POId = p_poId)
      )
      AND (
          (p_matchRecievedTransactionIdAndPONumber AND lid.RecievedTransactionId = p_recievedTransactionId AND lid.PONumber = p_poNumber) OR
          (!p_matchRecievedTransactionIdAndPONumber)
      )
      AND (
          (p_matchPOLine_GRN_LineNo AND lid.RecievedTransactionId = p_recievedTransactionId AND lid.PONumber = p_poNumber AND lid.LineNo = p_lineNo AND lid.POLineId = p_poLineId) OR
          (!p_matchPOLine_GRN_LineNo)
      )
      AND (
          (p_matchLineNo AND lid.PONumber = p_poNumber AND lid.LineNo = p_lineNo) OR
          (!p_matchLineNo)
      )
      AND (
          (p_considerUpdatedOnPOLines AND (lid.UserField7 IS NOT NULL OR lid.UserField6 IS NOT NULL)) OR
          (!p_considerUpdatedOnPOLines)
      );
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetNewGLCodeId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetNewGLCodeId`()
BEGIN
  SET @ClientId = 5;
  SELECT
    APSHTMLGLCode.SourceGLCodeId AS SourceGLCodeId,
    APSHTMLGLCode.GLCodeId AS NewGLCodeId
  FROM APSMART.`ApprovalHistory` APSmartApprovalHistory
    INNER JOIN GLCode APSHTMLGLCode
      ON APSHTMLGLCode.SourceGLCodeId = APSmartApprovalHistory.GLCodeId
  WHERE APSHTMLGLCode.ClientId = @clientId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetNewInvoiceId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetNewInvoiceId`()
BEGIN
  SET @ClientId = 5;

  SELECT
    APSHTMLInvoice.SourceInvoiceId AS SourceInvoiceId,
    APSHTMLInvoice.InvoiceId AS NewInvoiceId
  FROM APSMART.`ApprovalHistory` APSmartApprovalHistory
    INNER JOIN Invoice APSHTMLInvoice
      ON APSHTMLInvoice.SourceInvoiceId = APSmartApprovalHistory.InvoiceId
  WHERE APSHTMLInvoice.ClientId = @clientId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetNextLevelManagerSP` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetNextLevelManagerSP`(IN deptId int, IN userId char(36))
BEGIN
  SELECT
    aba.*
  FROM ApproverByAmount aba
  WHERE aba.UserId = userId
  AND deptId IN (aba.CostCenters) LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetNoPOOutputDealerBuilt` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetNoPOOutputDealerBuilt`(IN clientId int,
IN userId char(36),
IN invoiceType char(50))
BEGIN
  SELECT
    i.InvoiceId,
    i.InvoiceNo,
    v.VendorNo,
    v.VendorName,
    i.InvoiceTotal,
    i.Comment AS Note,
    DATE_FORMAT(i.ShippingDate, '%Y%m%d') AS ShippingDate,
    DATE_FORMAT(i.InvoiceDate, '%Y/%m/%d') AS InvoiceDate,
    d.`DepartmentName`,
    DATE_FORMAT(i.ScannedDate, '%Y/%m/%d') AS ScannedDate,
    DATE_FORMAT(i.AprovedDate, '%Y/%m/%d') AS ApprovedDate,
    DATE_FORMAT(i.`PaymentDueDate`, '%Y/%m/%d') AS PaymentDueDate,
    i.CompanyCode,
    ah.`ImportDoc` AS Control2,
    gl.GLCodeName AS GLCode,
    gl.Desccription AS Description,
    ah.AmountAppoved AS Amount,
    vl.LocationName
  FROM Invoice i
    LEFT OUTER JOIN Vendor v
      ON v.VendorId = i.VendorId
    LEFT OUTER JOIN `VendorLocation` vl
      ON vl.VendorId = v.VendorId
    LEFT OUTER JOIN ApprovalHistory ah
      ON ah.InvoiceId = i.InvoiceId
    LEFT OUTER JOIN GLCode gl
      ON gl.GLCodeId = ah.GLCodeId
    LEFT OUTER JOIN Department d
      ON d.Id = ah.`DepartmentId`
  WHERE i.ClientId = clientId
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId = 4
  AND i.IsPoInvoice = 0
  ORDER BY i.InvoiceId, i.ScannedDate;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetNoPOOutputHandHAuto` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetNoPOOutputHandHAuto`(IN clientId int,
IN userId char(36),
IN invoiceType char(50),
IN companyCode varchar(50))
BEGIN

  SELECT
    i.InvoiceId,
    i.InvoiceNo,
    v.VendorNo,
    v.VendorName,
    i.InvoiceTotal,
    DATE_FORMAT(i.GLDate, '%Y%m%d') AS ExpenseDate,
    DATE_FORMAT(i.InvoiceDate, '%Y-%m-%d') AS InvoiceDate,
    i.CompanyCode,
    DATE_FORMAT(i.ScannedDate, '%Y-%m-%d') AS ScannedDate,
    DATE_FORMAT(i.AprovedDate, '%Y-%m-%d') AS ApprovedDate,
    DATE_FORMAT(i.`PaymentDueDate`, '%Y-%m-%d') AS PaymentDueDate,
    gl.GLCodeName,
    gl.Desccription AS Description,
    ah.SpecialNote,
    ah.AmountAppoved AS AmountApproved
  FROM Invoice i
    LEFT OUTER JOIN Vendor v
      ON v.VendorId = i.VendorId
    LEFT OUTER JOIN ApprovalHistory ah
      ON ah.InvoiceId = i.InvoiceId
    LEFT OUTER JOIN GLCode gl
      ON gl.GLCodeId = ah.GLCodeId
    LEFT OUTER JOIN Department d
      ON d.Id = ah.`DepartmentId`
    LEFT OUTER JOIN ProjectType p
      ON p.`Id` = ah.`ProjectId`
  WHERE i.ClientId = clientId
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId = 4
  AND i.IsPoInvoice = 0
  AND (companyCode IS NULL
  OR companyCode = ''
  OR i.CompanyCode = companyCode)
  ORDER BY i.InvoiceId, i.ScannedDate;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetNoPOOutputKeenanFarms` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetNoPOOutputKeenanFarms`(IN clientId int,
IN userId char(36),
IN invoiceType char(50))
BEGIN
  SELECT
    i.InvoiceId,
    i.InvoiceNo,
    v.VendorNo,
    v.VendorName,
    i.InvoiceTotal,
    DATE_FORMAT(i.GLDate, '%Y%m%d') AS ExpenseDate,
    DATE_FORMAT(i.InvoiceDate, '%Y/%m/%d') AS InvoiceDate,
    i.CompanyCode,
    d.`DepartmentName`,
    DATE_FORMAT(i.ScannedDate, '%Y/%m/%d') AS ScannedDate,
    DATE_FORMAT(i.AprovedDate, '%Y/%m/%d') AS ApprovedDate,
    DATE_FORMAT(i.`PaymentDueDate`, '%Y/%m/%d') AS PaymentDueDate,
    gl.GLCodeName,
    gl.Desccription AS Description,
    ah.AmountAppoved AS AmountApproved,
    p.ProjectName
  FROM Invoice i
    LEFT OUTER JOIN Vendor v
      ON v.VendorId = i.VendorId
    LEFT OUTER JOIN ApprovalHistory ah
      ON ah.InvoiceId = i.InvoiceId
    LEFT OUTER JOIN GLCode gl
      ON gl.GLCodeId = ah.GLCodeId
    LEFT OUTER JOIN Department d
      ON d.Id = ah.`DepartmentId`
    LEFT OUTER JOIN ProjectType p
      ON p.`Id` = ah.`ProjectId`
  WHERE i.ClientId = clientId
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId = 4
  AND i.IsPoInvoice = 0
  ORDER BY i.InvoiceId, i.ScannedDate;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetNoPOOutputTheragenics` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetNoPOOutputTheragenics`(IN clientId int,
IN userId char(36),
IN invoiceType char(50))
BEGIN

  SELECT
    i.InvoiceId,
    i.InvoiceNo,
    v.VendorNo,
    v.VendorName,
    i.InvoiceTotal,
    DATE_FORMAT(i.GLDate, '%Y%m%d') AS ExpenseDate,
    DATE_FORMAT(i.InvoiceDate, '%Y%m%d') AS InvoiceDate,
    i.CompanyCode,
    d.`DepartmentName`,
    DATE_FORMAT(i.ScannedDate, '%Y%m%d') AS ScannedDate,
    DATE_FORMAT(i.AprovedDate, '%Y%m%d') AS ApprovedDate,
    DATE_FORMAT(i.`PaymentDueDate`, '%Y%m%d') AS PaymentDueDate,
    gl.GLCodeName,
    gl.Desccription AS Description,
    ah.AmountAppoved AS AmountApproved,
    p.ProjectName
  FROM Invoice i
    LEFT OUTER JOIN Vendor v
      ON v.VendorId = i.VendorId
    LEFT OUTER JOIN ApprovalHistory ah
      ON ah.InvoiceId = i.InvoiceId
    LEFT OUTER JOIN GLCode gl
      ON gl.GLCodeId = ah.GLCodeId
    LEFT OUTER JOIN Department d
      ON d.Id = ah.`DepartmentId`
    LEFT OUTER JOIN ProjectType p
      ON p.`Id` = ah.`ProjectId`
  WHERE i.ClientId = clientId
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId = 4
  AND i.IsPoInvoice = 0
  ORDER BY i.InvoiceId, i.ScannedDate;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetPaidInvoiceReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetPaidInvoiceReport`(IN clientId int, IN FromDate date, IN ToDate date)
BEGIN
  SELECT
    i.CompanyCode,
    v.VendorName AS Vendor,
    v.VendorNo,
    v.VendorType,
    i.InvoiceTotal AS Amount
  FROM Invoice i
    INNER JOIN InvoiceHistory ih
      ON ih.InvoiceId = i.InvoiceId
    INNER JOIN Vendor v
      ON v.VendorId = i.VendorId
  WHERE i.ClientId = clientId
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId IN (7, 11, 13)
  AND ih.Action = 'Payment Second Approval'
  AND DATE(ih.ActionDate) BETWEEN DATE(FromDate) AND DATE(ToDate)
  ORDER BY i.CompanyCode;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetPaymentOutputKeenanFarms` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetPaymentOutputKeenanFarms`(IN clientId int,
IN userId char(36),
IN invoiceType char(50))
BEGIN
  SELECT
    i.InvoiceId,
    i.InvoiceNo,
    i.PONumber,
    v.VendorNo,
    v.VendorName,
    i.InvoiceTotal,
    DATE_FORMAT(i.InvoiceDate, '%Y%m%d') AS InvoiceDate,
    i.CompanyCode,
    CONCAT('CHECK', i.InvoiceId) AS CheckNumber,
    DATE_FORMAT(ps.ReceivedDate, '%Y%m%d') AS PaymentDate,
    'CHECK' AS PaymentType
  FROM Invoice i
    LEFT OUTER JOIN Vendor v
      ON v.VendorId = i.VendorId
    LEFT OUTER JOIN ApprovalHistory ah
      ON ah.InvoiceId = i.InvoiceId
    LEFT OUTER JOIN GLCode gl
      ON gl.GLCodeId = ah.GLCodeId
    LEFT OUTER JOIN Department d
      ON d.Id = ah.`DepartmentId`
    LEFT OUTER JOIN ProjectType p
      ON p.`Id` = ah.`ProjectId`
    LEFT OUTER JOIN PaymentStatus ps
      ON ps.InvoiceId = i.InvoiceId
  WHERE i.ClientId = 159
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId = 12
  GROUP BY i.InvoiceId
  ORDER BY ps.ReceivedDate;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetPaymentOutputTheragenics` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetPaymentOutputTheragenics`(IN clientId int,
IN userId char(36),
IN invoiceType char(50))
BEGIN

  SELECT
    i.InvoiceId,
    i.InvoiceNo,
    i.PONumber,
    v.VendorNo,
    v.VendorName,
    i.InvoiceTotal,
    DATE_FORMAT(i.InvoiceDate, '%Y%m%d') AS InvoiceDate,
    i.CompanyCode,
    CONCAT('CHECK', i.InvoiceId) AS CheckNumber,
    DATE_FORMAT(ps.ReceivedDate, '%Y%m%d') AS PaymentDate,
    'CHECK' AS PaymentType
  FROM Invoice i
    LEFT OUTER JOIN Vendor v
      ON v.VendorId = i.VendorId
    LEFT OUTER JOIN ApprovalHistory ah
      ON ah.InvoiceId = i.InvoiceId
    LEFT OUTER JOIN GLCode gl
      ON gl.GLCodeId = ah.GLCodeId
    LEFT OUTER JOIN Department d
      ON d.Id = ah.`DepartmentId`
    LEFT OUTER JOIN ProjectType p
      ON p.`Id` = ah.`ProjectId`
    LEFT OUTER JOIN PaymentStatus ps
      ON ps.InvoiceId = i.InvoiceId
  WHERE i.ClientId = 139
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId = 12
  GROUP BY i.InvoiceId
  ORDER BY ps.ReceivedDate;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetPOForExpService` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetPOForExpService`(IN clientId int, IN externalId varchar (255),
IN importByVendorConfig BIT, 
IN vendorId int, IN poNumber varchar (255), 
IN lineNo varchar (255), IN clientCompanyId int,
IN container varchar (255), IN poType varchar(255))
BEGIN
    select * from PO p where p.ClientId = clientId and p.PODetailId is NULL
    and case when externalId is null
    THEN 
      (
      (case when importByVendorConfig = TRUE and vendorId is not null then p.VendorId = vendorId else true END)
      and p.PONumber = poNumber
      and p.LineNo = lineNo
      and (clientCompanyId is null OR p.ClientCompanyId is null or  p.ClientCompanyId = clientCompanyId )
      and ((container is null and p.Container is null) or (container is not null and p.Container is not null and container = p.Container)) 
      and ((poType is null and p.POType is null) or (poType is not null and p.POType is not null and poType = p.POType)))
    ELSE
      p.ExternalId = externalId end;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetPONumbersByFilterCriteria` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetPONumbersByFilterCriteria`(IN ClientId int,
IN CommaSeparatedPoNumbersToMatch nvarchar(65535),
IN POLookupTerm nvarchar(50),
IN POReverseLookupTerm nvarchar(50),
IN POReverseLookupVariance int,
IN POLineItemsQuantityFilterVariance int,
IN InvoiceId int)
BEGIN
  DECLARE myCompanyCode int;
  DECLARE myCompanyCodeGroup int;
  DECLARE OrderQtyFrom int;
  DECLARE OrderQtyTo int;
  DECLARE str nvarchar(65535);
  DECLARE str1 nvarchar(65535);
  DECLARE varStr nvarchar(65535);
  DECLARE DocumentType nvarchar(50);

  SET str = CommaSeparatedPoNumbersToMatch;
  SET myCompanyCode = 0;
  SET myCompanyCodeGroup = NULL;
  DROP TABLE IF EXISTS PoNumbersToMatch;
  CREATE TEMPORARY TABLE PoNumbersToMatch (
    val varchar(50)
  );

  DROP TABLE IF EXISTS CompanyCodesToMatch;
  CREATE TEMPORARY TABLE CompanyCodesToMatch (
    val varchar(250)
  );


  WHILE CHAR_LENGTH(str) > 0
    AND str IS NOT NULL
    AND str <> '' DO
    SET varStr = SUBSTRING_INDEX (str, ',', 1);
    SET str = SUBSTRING(str, LENGTH(varStr) + 2);
    IF varStr <> ''
      AND varStr <> ' '
      AND varStr IS NOT NULL THEN
      INSERT INTO PoNumbersToMatch
        SELECT
          varStr;
    END IF;
  -- select varStr;
  END WHILE;

  IF InvoiceId IS NOT NULL
    OR InvoiceId <> 0 THEN
    SELECT
      Id,
      `Group` INTO myCompanyCode, myCompanyCodeGroup
    FROM ClientCompany cc
    WHERE cc.ClientId = ClientId
    AND cc.CompanyCode = (SELECT
        inv.CompanyCode
      FROM Invoice inv
      WHERE inv.InvoiceId = InvoiceId
      AND inv.ClientId = ClientId) LIMIT 1;

    SELECT
      UserField7
    FROM Invoice
    WHERE Invoice.InvoiceId = InvoiceId INTO DocumentType;
  END IF;

  IF myCompanyCode IS NULL
    OR myCompanyCode = 0 THEN
    SET myCompanyCode = 0;
  END IF;

  IF myCompanyCode <> 0
    AND myCompanyCodeGroup IS NOT NULL THEN

    INSERT INTO CompanyCodesToMatch
      (SELECT
          Id
        FROM ClientCompany
        WHERE ClientCompany.`ClientId` = ClientId
        AND `Group` IS NOT NULL
        AND `Group` = myCompanyCodeGroup);

  END IF;


  SET OrderQtyFrom = 0;
  SET OrderQtyTo = 0;

  IF pOReverseLookupTerm REGEXP '^[0-9]+$' THEN -- IF(ISNUMERIC(@pOReverseLookupTerm) = 1)
    IF POReverseLookupVariance IS NULL THEN
      SET POReverseLookupVariance = 5;
    END IF;
    IF POReverseLookupTerm IS NOT NULL
      AND POLineItemsQuantityFilterVariance IS NOT NULL THEN
      SET POReverseLookupVariance = POLineItemsQuantityFilterVariance;
    END IF;
    SET sql_mode = 'NO_UNSIGNED_SUBTRACTION';
    SET OrderQtyFrom = CAST(pOReverseLookupTerm AS UNSIGNED) - POReverseLookupVariance;
    SET OrderQtyTo = CAST(pOReverseLookupTerm AS UNSIGNED) + POReverseLookupVariance;
  END IF;

  DROP TEMPORARY TABLE IF EXISTS GetPONumbersByFilterCriteriaTempTable;
  CREATE TEMPORARY TABLE IF NOT EXISTS GetPONumbersByFilterCriteriaTempTable AS (SELECT
      *
    FROM PO
    WHERE PO.ClientId = ClientId
    AND (myCompanyCode = 0
    OR (ClientCompanyId = myCompanyCode
    OR ClientCompanyId IN (SELECT
        val
      FROM CompanyCodesToMatch))
    OR PO.`ClientCompanyId` IS NULL)
    AND (UserField1 IS NULL 
    OR UserField1 = '' OR UserField1 = '0'
    OR DocumentType IS NULL
    OR DocumentType = UserField1
    OR DocumentType LIKE CONCAT(UserField1, '|%')
    OR DocumentType LIKE CONCAT('%|', UserField1)
    OR DocumentType LIKE CONCAT('%|', UserField1, '|%'))
    AND (CommaSeparatedPoNumbersToMatch = ''
    OR CommaSeparatedPoNumbersToMatch IS NULL
    OR PONumber IN (SELECT
        *
      FROM PoNumbersToMatch))
    AND (POLookupTerm IS NULL
    OR POLookupTerm = ''
    OR ItemNumber LIKE CONCAT(POLookupTerm, '%')
    OR LineNo LIKE CONCAT(POLookupTerm, '%'))
    AND (POReverseLookupTerm IS NULL
    OR (
    ((POReverseLookupTerm IS NOT NULL
    AND POReverseLookupTerm != ''
    AND (VendorCatNumber LIKE CONCAT(POReverseLookupTerm, '%'))
    OR (GLCode LIKE CONCAT(POReverseLookupTerm, '%')))
    OR (pOReverseLookupTerm IS NOT NULL
    AND pOReverseLookupTerm != ''
    AND pOReverseLookupTerm REGEXP '^[0-9]+$')
    AND CAST(OrderQty AS decimal) >= OrderQtyFrom
    AND CAST(OrderQty AS decimal) <= OrderQtyTo))));


  IF EXISTS (SELECT
        *
      FROM `Client`
        INNER JOIN ClientSpecificConfig
          ON Client.`ClientId` = ClientSpecificConfig.`ClientId`
          AND ClientSpecificConfig.`ClientSpecificConfigType` = 107
      WHERE `Client`.`ClientId` = ClientId) THEN
    UPDATE GetPONumbersByFilterCriteriaTempTable
    SET DepartmentId = (SELECT
        POHeader.`DepartmentId`
      FROM `POHeader`
      WHERE `POHeader`.`ClientId` = ClientId
      AND `POHeader`.`ExternalPONumber` = GetPONumbersByFilterCriteriaTempTable.PONumber LIMIT 1)
    WHERE DepartmentId IS NULL;

  -- SET DepartmentId = (SELECT CASE WHEN PODetail.`DepartmentId` IS NOT NULL THEN PODetail.`DepartmentId` ELSE POHeader.`DepartmentId` END FROM `POHeader` INNER JOIN 
  -- PODetail ON PODetail.`POHeaderId` = POHeader.`POHeaderId`
  -- WHERE `POHeader`.`ClientId` = ClientId AND `POHeader`.`ExternalPONumber` = GetPONumbersByFilterCriteriaTempTable.PONumber AND GetPONumbersByFilterCriteriaTempTable.`LineNo` = PODetail.`LineId`)
  -- WHERE DepartmentId IS NULL;
  END IF;

  SELECT
    *
  FROM GetPONumbersByFilterCriteriaTempTable;

  DROP TABLE IF EXISTS CompanyCodesToMatch;
  DROP TEMPORARY TABLE IF EXISTS GetPONumbersByFilterCriteriaTempTable;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetPONumbersByFilterCriteria_Original` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetPONumbersByFilterCriteria_Original`(IN ClientId int,
IN CommaSeparatedPoNumbersToMatch nvarchar(65535),
IN POLookupTerm nvarchar(50),
IN POReverseLookupTerm nvarchar(50),
IN POReverseLookupVariance int,
IN POLineItemsQuantityFilterVariance int,
IN InvoiceId int,
IN isNextGen int)
BEGIN
  DECLARE myCompanyCode int;
  DECLARE myCompanyCodeGroup int;
  DECLARE OrderQtyFrom int;
  DECLARE OrderQtyTo int;
  DECLARE str nvarchar(65535);
  DECLARE str1 nvarchar(65535);
  DECLARE varStr nvarchar(65535);
  DECLARE DocumentType nvarchar(50);

  SET str = CommaSeparatedPoNumbersToMatch;
  SET myCompanyCode = 0;
  SET myCompanyCodeGroup = NULL;
  -- DROP TABLE IF EXISTS PoNumbersToMatch;
  CREATE TEMPORARY TABLE IF NOT EXISTS PoNumbersToMatch (
    val varchar(50)
  );

  -- DROP TABLE IF EXISTS CompanyCodesToMatch;
  CREATE TEMPORARY TABLE IF NOT EXISTS CompanyCodesToMatch (
    val varchar(250)
  );

  WHILE CHAR_LENGTH(str) > 0
    AND str IS NOT NULL
    AND str <> '' DO
    SET varStr = SUBSTRING_INDEX (str, ',', 1);
    SET str = SUBSTRING(str, LENGTH(varStr) + 2);
    IF varStr <> ''
      AND varStr <> ' '
      AND varStr IS NOT NULL THEN
      INSERT INTO PoNumbersToMatch
        SELECT
          varStr;
    END IF;
  -- select varStr;
  END WHILE;

  IF InvoiceId IS NOT NULL
    OR InvoiceId <> 0 THEN
    SELECT
      Id,
      `Group` INTO myCompanyCode, myCompanyCodeGroup
    FROM ClientCompany cc
    WHERE cc.ClientId = ClientId
    AND cc.CompanyCode = (SELECT
        inv.CompanyCode
      FROM Invoice inv
      WHERE inv.InvoiceId = InvoiceId
      AND inv.ClientId = ClientId) LIMIT 1;

    SELECT
      UserField7
    FROM Invoice
    WHERE Invoice.InvoiceId = InvoiceId INTO DocumentType;
  END IF;

  IF myCompanyCode IS NULL
    OR myCompanyCode = 0 THEN
    SET myCompanyCode = 0;
  END IF;

  IF myCompanyCode <> 0
    AND myCompanyCodeGroup IS NOT NULL THEN

    INSERT INTO CompanyCodesToMatch
      (SELECT
          Id
        FROM ClientCompany
        WHERE ClientCompany.`ClientId` = ClientId
        AND `Group` IS NOT NULL
        AND `Group` = myCompanyCodeGroup);

  END IF;


  SET OrderQtyFrom = 0;
  SET OrderQtyTo = 0;

  IF pOReverseLookupTerm REGEXP '^[0-9]+$' THEN -- IF(ISNUMERIC(@pOReverseLookupTerm) = 1)
    IF POReverseLookupVariance IS NULL THEN
      SET POReverseLookupVariance = 5;
    END IF;
    IF POReverseLookupTerm IS NOT NULL
      AND POLineItemsQuantityFilterVariance IS NOT NULL THEN
      SET POReverseLookupVariance = POLineItemsQuantityFilterVariance;
    END IF;
    SET sql_mode = 'NO_UNSIGNED_SUBTRACTION';
    SET OrderQtyFrom = CAST(pOReverseLookupTerm AS UNSIGNED) - POReverseLookupVariance;
    SET OrderQtyTo = CAST(pOReverseLookupTerm AS UNSIGNED) + POReverseLookupVariance;
  END IF;

  -- DROP TEMPORARY TABLE IF EXISTS GetPONumbersByFilterCriteriaTempTable;
  CREATE TEMPORARY TABLE IF NOT EXISTS GetPONumbersByFilterCriteriaTempTable AS (SELECT
      *
    FROM PO
    WHERE PO.ClientId = ClientId
    AND (myCompanyCode = 0
    OR (ClientCompanyId = myCompanyCode
    OR ClientCompanyId IN (SELECT
        val
      FROM CompanyCodesToMatch))
    OR PO.`ClientCompanyId` IS NULL)
    AND (UserField1 IS NULL
    OR UserField1 = ''
    OR DocumentType IS NULL
    OR DocumentType = UserField1
    OR DocumentType LIKE CONCAT(UserField1, '|%')
    OR DocumentType LIKE CONCAT('%|', UserField1)
    OR DocumentType LIKE CONCAT('%|', UserField1, '|%'))
    AND (CommaSeparatedPoNumbersToMatch = ''
    OR CommaSeparatedPoNumbersToMatch IS NULL
    OR PONumber IN (SELECT
        *
      FROM PoNumbersToMatch))
    AND (POLookupTerm IS NULL
    OR POLookupTerm = ''
    OR ItemNumber LIKE CONCAT(POLookupTerm, '%')
    OR LineNo LIKE CONCAT(POLookupTerm, '%'))
    AND (POReverseLookupTerm IS NULL
    OR (
    ((POReverseLookupTerm IS NOT NULL
    AND POReverseLookupTerm != ''
    AND (VendorCatNumber LIKE CONCAT(POReverseLookupTerm, '%'))
    OR (GLCode LIKE CONCAT(POReverseLookupTerm, '%')))
    OR (pOReverseLookupTerm IS NOT NULL
    AND pOReverseLookupTerm != ''
    AND pOReverseLookupTerm REGEXP '^[0-9]+$')
    AND CAST(OrderQty AS decimal) >= OrderQtyFrom
    AND CAST(OrderQty AS decimal) <= OrderQtyTo))));

  IF EXISTS (SELECT
        *
      FROM `Client`
        INNER JOIN ClientSpecificConfig
          ON Client.`ClientId` = ClientSpecificConfig.`ClientId`
          AND ClientSpecificConfig.`ClientSpecificConfigType` = 107
      WHERE `Client`.`ClientId` = ClientId) THEN
    UPDATE GetPONumbersByFilterCriteriaTempTable
    SET DepartmentId = (SELECT
        POHeader.`DepartmentId`
      FROM `POHeader`
      WHERE `POHeader`.`ClientId` = ClientId
      AND `POHeader`.`ExternalPONumber` = GetPONumbersByFilterCriteriaTempTable.PONumber LIMIT 1)
    WHERE DepartmentId IS NULL;

  -- SET DepartmentId = (SELECT CASE WHEN PODetail.`DepartmentId` IS NOT NULL THEN PODetail.`DepartmentId` ELSE POHeader.`DepartmentId` END FROM `POHeader` INNER JOIN 
  -- PODetail ON PODetail.`POHeaderId` = POHeader.`POHeaderId`
  -- WHERE `POHeader`.`ClientId` = ClientId AND `POHeader`.`ExternalPONumber` = GetPONumbersByFilterCriteriaTempTable.PONumber AND GetPONumbersByFilterCriteriaTempTable.`LineNo` = PODetail.`LineId`)
  -- WHERE DepartmentId IS NULL;
  END IF;


  IF isNextGen = 0 THEN
    SELECT
      *
    FROM GetPONumbersByFilterCriteriaTempTable;

  -- DROP TEMPORARY TABLE IF EXISTS CompanyCodesToMatch;
  -- DROP TEMPORARY TABLE IF EXISTS GetPONumbersByFilterCriteriaTempTable;
  -- 	ELSE
  -- 		DROP TEMPORARY TABLE IF EXISTS CompanyCodesToMatch;
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetPOOutputDealerBuilt` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetPOOutputDealerBuilt`(IN clientId int,
IN userId char(36),
IN invoiceType char(50))
BEGIN
  
SELECT
    i.InvoiceId,
    i.InvoiceNo,
    v.VendorNo,
    v.VendorName,
    v.DefaultGlCodeId AS GLCode,
    i.InvoiceTotal,
    i.Comment AS Note,
    DATE_FORMAT(i.ShippingDate, '%Y/%m/%d') AS ShippingDate,
    DATE_FORMAT(i.InvoiceDate, '%Y/%m/%d') AS InvoiceDate,
    DATE_FORMAT(i.ScannedDate, '%Y/%m/%d') AS ScannedDate,
    DATE_FORMAT(i.AprovedDate, '%Y/%m/%d') AS ApprovedDate,
    DATE_FORMAT(i.`PaymentDueDate`, '%Y/%m/%d') AS PaymentDueDate,
    lid.UserField10 AS Location,
    lid.PONumber,
    lid.`LineNo`,
    lid.ItemNo,
    lid.Quantity,
    lid.UnitPrice,
    lid.UnitOfPurchase AS UOM,
    lid.TotalAmount AS Amount,
    lid.GLCode AS Account,
    lid.Description AS LineDescription,
    lid.UserField9 AS Control,
    lid.UserField8 AS Control2
  FROM Invoice i
    LEFT OUTER JOIN Vendor v
      ON v.VendorId = i.VendorId
    LEFT OUTER JOIN LineItemDetail lid
      ON lid.InvoiceId = i.InvoiceId
  WHERE i.ClientId = 172
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId = 4
  AND i.IsPoInvoice = 1
  AND (lid.UserField8 IS NULL
  OR lid.UserField8 <> 'credit')
  ORDER BY i.InvoiceId, i.ScannedDate;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetPOOutputKeenanFarms` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetPOOutputKeenanFarms`(IN clientId int,
IN userId char(36),
IN invoiceType char(50))
BEGIN
  SELECT
    i.InvoiceId,
    i.InvoiceNo,
    v.VendorNo,
    v.VendorName,
    i.InvoiceTotal,
    DATE_FORMAT(i.GLDate, '%Y%m%d') AS ExpenseDate,
    DATE_FORMAT(i.InvoiceDate, '%Y%m%d') AS InvoiceDate,
    i.CompanyCode,
    DATE_FORMAT(i.ScannedDate, '%Y%m%d') AS ScannedDate,
    DATE_FORMAT(i.AprovedDate, '%Y%m%d') AS ApprovedDate,
    DATE_FORMAT(i.`PaymentDueDate`, '%Y%m%d') AS PaymentDueDate,
    DATE_FORMAT(lid.`DeliveryDate`, '%Y%m%d') AS POReceiptDate,
    lid.PONumber,
    lid.`LineNo`,
    lid.ItemNo,
    lid.Quantity,
    lid.UnitPrice,
    lid.UnitOfPurchase AS UOM,
    lid.GLCode,
    lid.Description,
    d.`DepartmentName`,
    p.`ProjectName`,
    lid.RecievedTransactionId AS GRN
  FROM Invoice i
    LEFT OUTER JOIN Vendor v
      ON v.VendorId = i.VendorId
    LEFT OUTER JOIN LineItemDetail lid
      ON lid.InvoiceId = i.InvoiceId
    LEFT OUTER JOIN Department d
      ON d.Id = lid.DepartmentId
    LEFT OUTER JOIN ProjectType p
      ON p.Id = lid.`ProjectTypeId`
  WHERE i.ClientId = clientId
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId = 4
  AND i.IsPoInvoice = 1
  AND (lid.UserField8 IS NULL
  OR lid.UserField8 <> 'credit')
  ORDER BY i.InvoiceId, i.ScannedDate;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetPOOutputTheragenics` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetPOOutputTheragenics`(IN clientId int,
IN userId char(36),
IN invoiceType char(50))
BEGIN

  SELECT
    i.InvoiceId,
    i.InvoiceNo,
    v.VendorNo,
    v.VendorName,
    i.InvoiceTotal,
    DATE_FORMAT(i.GLDate, '%Y%m%d') AS ExpenseDate,
    DATE_FORMAT(i.InvoiceDate, '%Y%m%d') AS InvoiceDate,
    i.CompanyCode,
    DATE_FORMAT(i.ScannedDate, '%Y%m%d') AS ScannedDate,
    DATE_FORMAT(i.AprovedDate, '%Y%m%d') AS ApprovedDate,
    DATE_FORMAT(i.`PaymentDueDate`, '%Y%m%d') AS PaymentDueDate,
    DATE_FORMAT(lid.`DeliveryDate`, '%Y%m%d') AS POReceiptDate,
    lid.PONumber,
    lid.LineNo AS VendorCatNumber,
    lid.LineNo,
    lid.ItemNo,
    lid.Quantity,
    lid.UnitPrice,
    lid.UnitOfPurchase AS UOM,
    lid.GLCode,
    lid.Description,
    d.`DepartmentName`,
    p.`ProjectName`,
    lid.RecievedTransactionId AS GRN
  FROM Invoice i
    LEFT OUTER JOIN Vendor v
      ON v.VendorId = i.VendorId
    LEFT OUTER JOIN LineItemDetail lid
      ON lid.InvoiceId = i.InvoiceId
    LEFT OUTER JOIN Department d
      ON d.Id = lid.DepartmentId
    LEFT OUTER JOIN ProjectType p
      ON p.Id = lid.`ProjectTypeId`
  WHERE i.ClientId = clientId
  AND i.IsDeleted = 0
  AND i.ApprovalStatusId = 4
  AND i.IsPoInvoice = 1
  AND (lid.UserField8 IS NULL
  OR lid.UserField8 <> 'credit')
  ORDER BY i.InvoiceId, i.ScannedDate;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetPRCycleReportForSEHA` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetPRCycleReportForSEHA`(IN pONo nvarchar(50),
IN fromDate datetime,
IN toDate datetime)
BEGIN
  SELECT
    `POHeader`.`POHeaderId`,
    `POHeader`.`PONumber`,
    IFNULL(`POHeader`.`ExternalPONumber`, '') 'ExternalPONumber',
    IFNULL(`Vendor`.`VendorNo`, '') 'VendorNo',
    IFNULL(`Vendor`.`VendorName`, '') 'VendorName',
    IFNULL(`POHeader`.`Title`, '') 'Title',
    CONCAT(User.`FirstName`, ' ', User.`LastName`) 'Requestor',
    IFNULL(`POHeader`.`CapitalProjectNo`, '') 'CapitalProjectNo',
    IFNULL(`Department`.`DepartmentName`, '') 'DepartmentName',
    IFNULL(`POHeader`.`Remark`, '') 'Remark',
    IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.FromApprovalSubStepId = 961
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.ToApprovalSubStepId = 961
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'SupervisorCycleTime',
    IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.FromApprovalSubStepId = 962
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.ToApprovalSubStepId = 962
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'ManagerCycleTime',
    IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.FromApprovalSubStepId = 969
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.ToApprovalSubStepId = 969
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) +
    IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.FromApprovalSubStepId = 970
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.ToApprovalSubStepId = 970
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'ProjectApprovalCycleTime',
    IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.FromApprovalSubStepId = 963
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.ToApprovalSubStepId = 963
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'VPApprovalCycleTime',
    IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.FromApprovalSubStepId = 964
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.ToApprovalSubStepId = 964
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'TreasurerCycleTime',
    IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.FromApprovalSubStepId = 965
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.ToApprovalSubStepId = 965
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'AccountingCycleTime',
    IFNULL(DATEDIFF(POHeader.`ApprovalDate`, (SELECT
        ApprovedOn
      FROM `UserPOAssignmentHistory` AS UIA
      WHERE UIA.POHeaderId = POHeader.`POHeaderId`
      AND UIA.ToApprovalSubStepId = 966
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'BuyerCycleTime'
  FROM `POHeader`
    LEFT OUTER JOIN Vendor
      ON `POHeader`.`VendorId` = `Vendor`.`VendorId`
    LEFT OUTER JOIN `User`
      ON `User`.`UserId` = `POHeader`.`PurchasedForUserId`
    LEFT OUTER JOIN `Department`
      ON `Department`.`Id` = `POHeader`.`DepartmentId`
  WHERE `POHeader`.ClientId = 65
  AND `POHeader`.`POStatus` IN (5, 7, 8, 9)
  AND `IsDeleted` = FALSE
  AND (fromDate IS NULL
  OR `POHeader`.`CreatedDate` >= fromDate)
  AND (toDate IS NULL
  OR `POHeader`.`CreatedDate` <= toDate)
  AND (pONo IS NULL
  OR pONo = ''
  OR `POHeader`.`PONumber` = pONo)
  ORDER BY `CreatedDate` DESC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetSRCycleReportForSEHA` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetSRCycleReportForSEHA`(IN sRNo nvarchar(50),
IN fromDate datetime,
IN toDate datetime)
BEGIN
  SELECT
    StockRequest.StockRequestId,
    StockRequest.SRNumber,
    IFNULL(Item.ItemNo, '') 'ItemNo',
    IFNULL(Item.ItemDescription, '') 'ItemDescription',
    IFNULL(Vendor.VendorNo, '') 'VendorNo',
    IFNULL(Vendor.VendorName, '') 'VendorName',
    CONCAT(User.FirstName, ' ', User.LastName) 'Requestor',
    IFNULL(Department.DepartmentName, '') 'DepartmentName',
    IFNULL(StockRequest.VendorItemDescription, '') 'VendorItemDescription',
    IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM UserSRAssignmentHistory AS UIA
      WHERE UIA.StockRequestId = StockRequest.`StockRequestId`
      AND UIA.FromApprovalSubStepId = 2890
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM UserSRAssignmentHistory AS UIA
      WHERE UIA.StockRequestId = StockRequest.`StockRequestId`
      AND UIA.ToApprovalSubStepId = 2890
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'SupervisorCycleTime',
    IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM UserSRAssignmentHistory AS UIA
      WHERE UIA.StockRequestId = StockRequest.`StockRequestId`
      AND UIA.FromApprovalSubStepId = 2891
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM UserSRAssignmentHistory AS UIA
      WHERE UIA.StockRequestId = StockRequest.`StockRequestId`
      AND UIA.ToApprovalSubStepId = 2891
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'ManagerCycleTime',
    IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM `UserSRAssignmentHistory` AS UIA
      WHERE UIA.StockRequestId = StockRequest.`StockRequestId`
      AND UIA.FromApprovalSubStepId = 2892
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM UserSRAssignmentHistory AS UIA
      WHERE UIA.StockRequestId = StockRequest.StockRequestId
      AND UIA.ToApprovalSubStepId = 2892
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'VPApprovalCycleTime',
    IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM UserSRAssignmentHistory AS UIA
      WHERE UIA.StockRequestId = StockRequest.StockRequestId
      AND UIA.FromApprovalSubStepId = 2893
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM `UserSRAssignmentHistory` AS UIA
      WHERE UIA.StockRequestId = StockRequest.StockRequestId
      AND UIA.ToApprovalSubStepId = 2893
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'TreasurerCycleTime',
    IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM `UserSRAssignmentHistory` AS UIA
      WHERE UIA.StockRequestId = StockRequest.StockRequestId
      AND UIA.FromApprovalSubStepId = 2894
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM UserSRAssignmentHistory AS UIA
      WHERE UIA.StockRequestId = StockRequest.StockRequestId
      AND UIA.ToApprovalSubStepId = 2894
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'AccountingCycleTime',
    IFNULL(DATEDIFF(StockRequest.ApprovalDate, (SELECT
        ApprovedOn
      FROM `UserSRAssignmentHistory` AS UIA
      WHERE UIA.StockRequestId = StockRequest.`StockRequestId`
      AND UIA.ToApprovalSubStepId = 2896
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'BuyerCycleTime',
    IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM `UserSRAssignmentHistory` AS UIA
      WHERE UIA.StockRequestId = StockRequest.StockRequestId
      AND UIA.FromApprovalSubStepId = 2897
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM UserSRAssignmentHistory AS UIA
      WHERE UIA.StockRequestId = StockRequest.StockRequestId
      AND UIA.ToApprovalSubStepId = 2897
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'StoresCompletion',
          IFNULL(DATEDIFF((SELECT
        ApprovedOn
      FROM `UserSRAssignmentHistory` AS UIA
      WHERE UIA.StockRequestId = StockRequest.StockRequestId
      AND UIA.FromApprovalSubStepId = 2898
      ORDER BY ApprovedOn LIMIT 1), (SELECT
        ApprovedOn
      FROM UserSRAssignmentHistory AS UIA
      WHERE UIA.StockRequestId = StockRequest.StockRequestId
      AND UIA.ToApprovalSubStepId = 2898
      AND UIA.ToApprovalSubStepId <> UIA.FromApprovalSubStepId
      ORDER BY ApprovedOn LIMIT 1)), 0) 'PurchasingFinalApproval'
  FROM StockRequest
    LEFT OUTER JOIN Item
      ON StockRequest.`ItemId` = Item.`ItemId`
     LEFT OUTER JOIN Vendor
      ON `StockRequest`.`VendorId` = `Vendor`.`VendorId`
    LEFT OUTER JOIN `User`
      ON `User`.`UserId` = `StockRequest`.`PurchasedForUserId`
    LEFT OUTER JOIN `Department`
      ON `Department`.`Id` = `StockRequest`.`DepartmentId`
  WHERE `StockRequest`.ClientId = 65
  AND `StockRequest`.`SRStatus` IN (5, 7, 8, 9)
  AND `IsDeleted` = FALSE
  AND (fromDate IS NULL
  OR `StockRequest`.`CreatedDate` >= fromDate)
  AND (toDate IS NULL
  OR `StockRequest`.`CreatedDate` <= toDate)
  AND (sRNo IS NULL
  OR sRNo = ''
  OR `StockRequest`.`SRNumber` = sRNo)
  ORDER BY `CreatedDate` DESC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetTurnAroundTimeReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetTurnAroundTimeReport`(IN clientId int,
IN reportMonth int,
IN reportYear int,
IN reportAutoApproved bool)
BEGIN

  DECLARE fromDate date;
  DECLARE toDate date;

  SET fromDate = CONCAT(reportYear, '-', reportMonth, '-01');
  SET toDate = DATE_ADD(fromDate, INTERVAL 1 MONTH);

  CREATE TEMPORARY TABLE TurnAroundReport
  SELECT
    DATE(Invoice.`ScannedDate`) ReportDate,
    COUNT(*) ScannedCount,
    COUNT(IF(DATEDIFF(CASE WHEN (Invoice.`AcceptedDate` IS NOT NULL AND
        Invoice.`AcceptedDate` < (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1)) OR
        (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1) IS NULL THEN Invoice.`AcceptedDate` ELSE (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1) END, `Invoice`.`ScannedDate`) < 30, 1, NULL)) CountLessThan30,

    -- GROUP_CONCAT(IF(DATEDIFF((SELECT InvoiceHistory.`ActionDate` FROM InvoiceHistory WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId` AND 

    COUNT(IF(DATEDIFF(CASE WHEN (Invoice.`AcceptedDate` IS NOT NULL AND
        Invoice.`AcceptedDate` < (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1)) OR
        (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1) IS NULL THEN Invoice.`AcceptedDate` ELSE (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1) END, `Invoice`.`ScannedDate`) BETWEEN 30 AND 45, 1, NULL)) CountLessThan45,

    GROUP_CONCAT(IF(DATEDIFF(CASE WHEN (Invoice.`AcceptedDate` IS NOT NULL AND
        Invoice.`AcceptedDate` < (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1)) OR
        (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1) IS NULL THEN Invoice.`AcceptedDate` ELSE (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1) END, `Invoice`.`ScannedDate`) BETWEEN 30 AND 45, Invoice.`InvoiceNo`, NULL) SEPARATOR ';') InvoiceNosLessThan45,

    COUNT(IF(DATEDIFF(CASE WHEN (Invoice.`AcceptedDate` IS NOT NULL AND
        Invoice.`AcceptedDate` < (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1)) OR
        (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1) IS NULL THEN Invoice.`AcceptedDate` ELSE (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1) END, `Invoice`.`ScannedDate`) > 45, 1, NULL)) CountGreaterThan45,

    GROUP_CONCAT(IF(DATEDIFF(CASE WHEN (Invoice.`AcceptedDate` IS NOT NULL AND
        Invoice.`AcceptedDate` < (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1)) OR
        (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1) IS NULL THEN Invoice.`AcceptedDate` ELSE (SELECT
            InvoiceHistory.`ActionDate`
          FROM InvoiceHistory
          WHERE InvoiceHistory.`InvoiceId` = Invoice.`InvoiceId`
          AND (InvoiceHistory.`Action` IN ('RMS Output', 'Delete', 'Reject Vendor Invoice')
          OR InvoiceHistory.`CurrentStatus` = 'Accepted')
          ORDER BY InvoiceHistory.`Id` LIMIT 1) END, `Invoice`.`ScannedDate`) > 45, `Invoice`.`InvoiceNo`, NULL) SEPARATOR ';') InvoiceNosGreaterThan45


  FROM Invoice
  WHERE Invoice.`ClientId` = clientId
  AND Invoice.`ScannedDate` >= fromDate
  AND Invoice.`ScannedDate` < toDate
  AND Invoice.IsDeleted = 0
  GROUP BY DATE(Invoice.`ScannedDate`);

  SELECT
    *
  FROM TurnAroundReport;
  DROP TEMPORARY TABLE TurnAroundReport;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUnprocessedInnvoice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetUnprocessedInnvoice`(
  IN client_id INT,
  IN date_from DATE,
  IN date_to DATE
)
BEGIN
  SELECT 
    c.CustomerName,
    i.ClientId,
    i.IsPaused,
    i.IsPOInvoice,
    i.InvoiceId,
    i.ScannedDate
  FROM 
    Invoice i
  INNER JOIN 
    Client c ON i.ClientId = c.ClientId
  WHERE 
    (client_id IS NULL OR i.ClientId = client_id)
    AND (date_from IS NULL OR i.ScannedDate >= date_from)
    AND (date_to IS NULL OR i.ScannedDate <= date_to)
    AND i.ApprovalStatusId = 1
    AND !i.IsDeleted
    AND !i.IsPaused;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUserByUserId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetUserByUserId`(IN userId char(36))
BEGIN
  SELECT
    *
  FROM User u
  WHERE u.UserId = userId LIMIT 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUserCompanies` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetUserCompanies`(IN clientId int, IN userId char(36), IN companyCode nvarchar(500))
BEGIN
  SELECT
    u.UserId,
    ucc.ClientCompanyId,
    cc.CompanyCode,
    cc.Description,
    CASE WHEN ucc.AllowPaymentApproval IS NULL THEN 1 ELSE ucc.AllowPaymentApproval END AS APA,
    cc.UserField1,
    u.Email
  FROM User u
    INNER JOIN UserClientCompanies ucc
      ON ucc.UserId = u.UserId
    INNER JOIN ClientCompany cc
      ON cc.Id = ucc.ClientCompanyId
  WHERE u.ClientId = clientId
  AND u.userId = userId
  AND (companyCode = ''
  OR companyCode IS NULL
  OR companyCode = 'null'
  OR cc.CompanyCode = companyCode);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUserInvoiceHistoriesByClient` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetUserInvoiceHistoriesByClient`(IN p_ClientId int,
IN p_YearDateFrom datetime,
IN p_DateTo datetime,
IN p_ApplicableInvoiceStatuses varchar(1000))
BEGIN
  SET @StartDateOfMonth = DATE_FORMAT(p_DateTo, '%Y-%m-01');
  SET @TotalMonths = TIMESTAMPDIFF(MONTH, p_YearDateFrom, p_DateTo);
  SELECT
    q1.ApproverUserId AS ActorId,
    q1.NumberOfInvoicesApproved AS noofInvoices,
    q1.AverageApprovalTimeInSeconds AS Average,
    q1.YearlyMaximumDays AS MaximumDays,
    q2.NumberOfInvoicesApproved AS MonthlyTotal,
    q2.AverageApprovalTimeInSeconds AS MonthlyAverage,
    q2.YearlyMaximumDays AS MonthlyMaximumDays
  FROM (SELECT DISTINCT
      uih.FromApprovalSubStepUserId AS ApproverUserId,
      COUNT(DISTINCT uih.InvoiceId) AS NumberOfInvoicesApproved,
      MAX(DATEDIFF(uih.ApprovedOn, uih2.ApprovedOn)) AS YearlyMaximumDays,
      SUM(DATEDIFF(uih.ApprovedOn, uih2.ApprovedOn)) / COUNT(DISTINCT uih.InvoiceId) AS AverageApprovalTimeInSeconds
    FROM UserInvoiceAssignmentHistory AS uih
      INNER JOIN UserInvoiceAssignmentHistory AS uih2
        ON uih.InvoiceId = uih2.InvoiceId
      INNER JOIN Invoice AS i
        ON uih.InvoiceId = i.InvoiceId
    WHERE uih2.ApprovedOn >= @StartDateOfMonth
    AND uih2.ApprovedOn <= p_DateTo
    AND FIND_IN_SET(i.ApprovalStatusId, p_ApplicableInvoiceStatuses) > 0
    AND uih.ToApprovalSubStepUserId IS NOT NULL
    AND uih.FromApprovalSubStepUserId = uih2.ToApprovalSubStepUserId
    AND i.ClientId = p_ClientId
    AND uih.InvoiceId = uih2.InvoiceId
    AND uih.AmountApproved IS NOT NULL
    GROUP BY uih.FromApprovalSubStepUserId) AS q1
    LEFT JOIN (SELECT DISTINCT
        uih.FromApprovalSubStepUserId AS ApproverUserId,
        COUNT(DISTINCT uih.InvoiceId) AS NumberOfInvoicesApproved,
        MAX(DATEDIFF(uih.ApprovedOn, uih2.ApprovedOn)) AS YearlyMaximumDays,
        SUM(DATEDIFF(uih.ApprovedOn, uih2.ApprovedOn)) / COUNT(DISTINCT uih.InvoiceId) / @TotalMonths AS AverageApprovalTimeInSeconds
      FROM UserInvoiceAssignmentHistory AS uih
        INNER JOIN UserInvoiceAssignmentHistory AS uih2
          ON uih.InvoiceId = uih2.InvoiceId
        INNER JOIN Invoice AS i
          ON uih.InvoiceId = i.InvoiceId
      WHERE uih2.ApprovedOn >= p_YearDateFrom
      AND uih2.ApprovedOn <= p_DateTo
      AND FIND_IN_SET(i.ApprovalStatusId, p_ApplicableInvoiceStatuses) > 0
      AND uih.ToApprovalSubStepUserId IS NOT NULL
      AND uih.FromApprovalSubStepUserId = uih2.ToApprovalSubStepUserId
      AND i.ClientId = p_ClientId
      AND uih.InvoiceId = uih2.InvoiceId
      AND uih.AmountApproved IS NOT NULL
      GROUP BY uih.FromApprovalSubStepUserId) AS q2
      ON q1.ApproverUserId = q2.ApproverUserId;



END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUserInvoiceHistoriesByClient1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetUserInvoiceHistoriesByClient1`(IN p_ClientId int,
IN p_YearDateFrom datetime,
IN p_DateTo datetime,
IN p_ApplicableInvoiceStatuses varchar(1000))
BEGIN
  SET @StartDateOfMonth = DATE_FORMAT(p_DateTo, '%Y-%m-01');
  SET @TotalMonths = TIMESTAMPDIFF(MONTH, p_YearDateFrom, p_DateTo);

  -- Monthly Query
  SELECT
    'Monthly' AS DateRangeType,
    UserInvoiceAssignmentHistoryId1,
    toApprovalSubStepUserId,
    noofInvoices,
    MaximumDays,
    Average,
    MonthlyAverage,
    UserInvoiceAssignmentHistoryId2,
    fromApprovalSubStepUserId,
    ApprovedDate
  FROM (SELECT
      d1.UserInvoiceAssignmentHistoryId AS UserInvoiceAssignmentHistoryId1,
      d1.ToApprovalSubStepUserId AS toApprovalSubStepUserId,
      COUNT(DISTINCT a1.InvoiceId) AS noofInvoices,
      MAX(DATEDIFF(a1.ApprovedDate, d1.AssignDate)) AS MaximumDays,
      SUM(DATEDIFF(a1.ApprovedDate, d1.AssignDate)) / COUNT(DISTINCT a1.InvoiceId) AS Average,
      SUM(DATEDIFF(a1.ApprovedDate, d1.AssignDate)) / COUNT(DISTINCT a1.InvoiceId) / @TotalMonths AS MonthlyAverage,
      d1.AssignDate,
      a1.UserInvoiceAssignmentHistoryId AS UserInvoiceAssignmentHistoryId2,
      a1.FromApprovalSubStepUserId AS fromApprovalSubStepUserId,
      a1.ApprovedDate
    FROM (SELECT
             d1.UserInvoiceAssignmentHistoryId,
             d1.InvoiceId,
             d1.ToApprovalSubStepUserId,
             d1.AmountApproved, -- Assuming AmountApproved is the correct field
             d1.ApprovedOn AS AssignDate,
             @rn1 := IF(@prev1 = d1.ToApprovalSubStepUserId, @rn1 + 1, 1) AS rn1,
             @prev1 := d1.ToApprovalSubStepUserId
           FROM UserInvoiceAssignmentHistory AS d1
             INNER JOIN Invoice AS i
               ON d1.InvoiceId = i.InvoiceId
           WHERE d1.ToApprovalSubStepUserId IS NOT NULL
           AND FIND_IN_SET(i.ApprovalStatusId, p_ApplicableInvoiceStatuses) > 0
           AND d1.ApprovedOn >= @StartDateOfMonth
           AND d1.ApprovedOn <= p_DateTo
           AND i.ClientId = 98
           ORDER BY d1.ToApprovalSubStepUserId, d1.ApprovedOn) AS d1,
         (SELECT
             @rn1 := 0,
             @prev1 := NULL) var1
           JOIN (SELECT
               a1.UserInvoiceAssignmentHistoryId,
               a1.InvoiceId,
               a1.FromApprovalSubStepUserId,
               a1.AmountApproved, -- Assuming AmountApproved is the correct field
               a1.ApprovedOn AS ApprovedDate,
               @rn2 := IF(@prev2 = a1.FromApprovalSubStepUserId, @rn2 + 1, 1) AS rn2,
               @prev2 := a1.FromApprovalSubStepUserId
             FROM UserInvoiceAssignmentHistory AS a1
               INNER JOIN Invoice AS i
                 ON a1.InvoiceId = i.InvoiceId
             WHERE a1.FromApprovalSubStepUserId IS NOT NULL
             AND FIND_IN_SET(i.ApprovalStatusId, p_ApplicableInvoiceStatuses) > 0
             AND a1.ApprovedOn >= @StartDateOfMonth
             AND a1.ApprovedOn <= p_DateTo
             AND i.ClientId = 98
             ORDER BY a1.FromApprovalSubStepUserId, a1.ApprovedOn) AS a1,
         (SELECT
             @rn2 := 0,
             @prev2 := NULL) var2
    WHERE d1.AssignDate < a1.ApprovedDate
    GROUP BY a1.FromApprovalSubStepUserId) AS MonthlyData

  UNION

  -- Yearly Query (corrected)
  SELECT
    'Yearly' AS DateRangeType,
    UserInvoiceAssignmentHistoryId1,
    toApprovalSubStepUserId,
    noofInvoices,
    MaximumDays,
    Average,
    MonthlyAverage,
    AssignDate,
    UserInvoiceAssignmentHistoryId2,
    fromApprovalSubStepUserId,
    ApprovedDate
  FROM (SELECT
      d1.UserInvoiceAssignmentHistoryId AS UserInvoiceAssignmentHistoryId1,
      d1.ToApprovalSubStepUserId AS toApprovalSubStepUserId,
      COUNT(DISTINCT a1.InvoiceId) AS noofInvoices,
      MAX(DATEDIFF(a1.ApprovedDate, d1.AssignDate)) AS MaximumDays,
      SUM(DATEDIFF(a1.ApprovedDate, d1.AssignDate)) / COUNT(DISTINCT a1.InvoiceId) AS Average,
      SUM(DATEDIFF(a1.ApprovedDate, d1.AssignDate)) / COUNT(DISTINCT a1.InvoiceId) / @TotalMonths AS MonthlyAverage,
      d1.AssignDate,
      a1.UserInvoiceAssignmentHistoryId AS UserInvoiceAssignmentHistoryId2,
      a1.FromApprovalSubStepUserId AS fromApprovalSubStepUserId,
      a1.ApprovedDate
    FROM (SELECT
             d1.UserInvoiceAssignmentHistoryId,
             d1.InvoiceId,
             d1.ToApprovalSubStepUserId,
             d1.AmountApproved, -- Assuming AmountApproved is the correct field
             d1.ApprovedOn AS AssignDate,
             @rn1 := IF(@prev1 = d1.ToApprovalSubStepUserId, @rn1 + 1, 1) AS rn1,
             @prev1 := d1.ToApprovalSubStepUserId
           FROM UserInvoiceAssignmentHistory AS d1
             INNER JOIN Invoice AS i
               ON d1.InvoiceId = i.InvoiceId
           WHERE d1.ToApprovalSubStepUserId IS NOT NULL
           AND FIND_IN_SET(i.ApprovalStatusId, p_ApplicableInvoiceStatuses) > 0
           AND d1.ApprovedOn >= p_YearDateFrom
           AND d1.ApprovedOn <= p_DateTo
           AND i.ClientId = 98
           ORDER BY d1.ToApprovalSubStepUserId, d1.ApprovedOn) AS d1,
         (SELECT
             @rn1 := 0,
             @prev1 := NULL) var1
           JOIN (SELECT
               a1.UserInvoiceAssignmentHistoryId,
               a1.InvoiceId,
               a1.FromApprovalSubStepUserId,
               a1.AmountApproved, -- Assuming AmountApproved is the correct field
               a1.ApprovedOn AS ApprovedDate,
               @rn2 := IF(@prev2 = a1.FromApprovalSubStepUserId, @rn2 + 1, 1) AS rn2,
               @prev2 := a1.FromApprovalSubStepUserId
             FROM UserInvoiceAssignmentHistory AS a1
               INNER JOIN Invoice AS i
                 ON a1.InvoiceId = i.InvoiceId
             WHERE a1.FromApprovalSubStepUserId IS NOT NULL
             AND FIND_IN_SET(i.ApprovalStatusId, p_ApplicableInvoiceStatuses) > 0
             AND a1.ApprovedOn >= p_YearDateFrom
             AND a1.ApprovedOn <= p_DateTo
             AND i.ClientId = 98
             ORDER BY a1.FromApprovalSubStepUserId, a1.ApprovedOn) AS a1,
         (SELECT
             @rn2 := 0,
             @prev2 := NULL) var2
    WHERE d1.AssignDate < a1.ApprovedDate
    GROUP BY a1.FromApprovalSubStepUserId) AS YearlyData

  ORDER BY toApprovalSubStepUserId,
  DateRangeType,
  AssignDate,
  fromApprovalSubStepUserId,
  ApprovedDate;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetUserRolesByUserId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetUserRolesByUserId`(IN userId char(36))
BEGIN
  SELECT
    r.*
  FROM UserRoles ur,
       Role r
  WHERE ur.UserId = userId
  AND ur.RoleId = r.RoleId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVendorByName` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetVendorByName`(IN VendorName nvarchar(50),
IN ClientId int)
BEGIN
  DECLARE VendorCount int;
  SET VendorCount = (SELECT
      COUNT(*)
    FROM Vendor v
    WHERE v.VendorName LIKE (VendorName + '%')
    AND v.ClientID = ClientId);
  IF VendorCount = 1 THEN
    SELECT
      VendorNo AS VendorNumber,
      VendorName
    FROM Vendor
    WHERE VendorName LIKE (VendorName + '%')
    AND ClientID = ClientId;
  ELSE
    SELECT
      '-1',
      'Vendor Not Found or Duplicate';
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVendorForExpService` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetVendorForExpService`(
IN clientId int, 
IN vendorNo varchar (255),
IN externalId varchar (255),
IN disablecompanycheckforVendorimportpoywhenloadingpoexportservice BIT, 
IN clientCompanyId int
)
BEGIN
  select * from Vendor v
  where v.clientId = clientId and
  case WHEN externalId is not null 
    then
      v.ExternalId = externalId
    ELSE
      (v.VendorNo = vendorNo and (disablecompanycheckforVendorimportpoywhenloadingpoexportservice = TRUE 
      or clientCompanyId is null or v.ClientCompanyId = ClientCompanyId))
  END
  and v.IsActive = 1 LIMIT 1;
       
  /*
  
                      Vendor CC = DbContext.Vendors.Where(w => w.ClientId == clientId && (!string.IsNullOrEmpty(po.VendorExternalId) 
                      ? po.VendorExternalId.Equals(w.ExternalId) : (w.VendorNo.ToLower().Trim().Equals(po.VendorNumber.ToLower().Trim()) 
                      && (disablecompanycheckforVendorimportpoywhenloadingpoexportservice || 
                      clientCompanyId == null || w.ClientCompanyId == clientCompanyId))) && w.IsActive == true).FirstOrDefault();
  */
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVendorInvoiceByDateReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetVendorInvoiceByDateReport`(IN clientId int,
IN fromDate date,
IN toDate date,
IN dateRange varchar(255),
IN vendorNameNo varchar(255))
BEGIN
  SELECT
    Invoice.`InvoiceId`,
    ItemLineItemDetail.ItemLineItemDetailId,
    Invoice.InvoiceNo,
    DATE_FORMAT(`Invoice`.`InvoiceDate`, '%m/%d/%Y') InvoiceDate,
    DATE_FORMAT(Invoice.`ScannedDate`, '%m/%d/%Y') InvoiceScannedDate,
    DATE_FORMAT(Invoice.`ShippingDate`, '%m/%d/%Y') InvoiceDeliveryDate,
    Vendor.`VendorName`,
    Vendor.`VendorNo` VendorNumber,
    CustomerLocation.`LocationName` CustomerLocationName,
    CustomerLocation.`LocationNumber` CustomerLocationNumber,
    CustomerLocation.`DBCode`,
    Item.`ItemNo` ItemNumber,
    Item.`ItemDescription` ItemDescription,
    (CASE WHEN ItemLineItemDetail.`CustomerPrice` IS NOT NULL THEN ItemLineItemDetail.`CustomerPrice` ELSE (SELECT
            (CASE WHEN `CustomerItemPrice`.`Price` IS NOT NULL THEN `CustomerItemPrice`.`Price` ELSE 0.0 END)
          FROM `CustomerItemPrice`
          WHERE CustomerItemPrice.`ItemID` = Item.`ItemId`
          AND CustomerItemPrice.`CustomerID` = CustomerLocationItemCustomerLocationCustomer.CustomerId
          AND CustomerLocationItemCustomerLocationCustomer.IsDeleted = FALSE LIMIT 1) END) CustomerPrice,
    (CASE WHEN ItemLineItemDetail.`UnitPrice` IS NOT NULL THEN ItemLineItemDetail.`UnitPrice` ELSE 0 END) VendorPrice,
    (SELECT
        `VendorItemContract`.`VendorPrice`
      FROM `VendorItemContract`
      WHERE VendorItemContract.`ItemId` = CustomerLocationItem.`ItemId`
      AND `VendorItemContract`.`VendorId` = `Vendor`.`VendorId`
      AND (`VendorItemContract`.`CustomerLocationId` IS NULL
      OR VendorItemContract.`CustomerLocationId` = Invoice.`CustomerLocationId`)
      ORDER BY (CASE WHEN VendorItemContract.CustomerLocationId IS NOT NULL THEN `VendorItemContract`.`CustomerLocationId` ELSE 0 END) DESC LIMIT 1) VendorContractedPrice,
    State.`StateNameShort` 'State',
    Address.ZipCode,
    (CASE WHEN `ItemLineItemDetail`.`Quantity` IS NOT NULL THEN `ItemLineItemDetail`.`Quantity` ELSE 0 END) 'VendorQty',
    (CASE WHEN CustomerLocation.`IsActive` IS NULL THEN 'N/K' ELSE (CASE WHEN CustomerLocation.`IsActive` = TRUE THEN 'Active' ELSE 'Disabled' END) END) 'CustomerLocationDisabled',
    CONCAT(Address.`Address1`, ' ', Address.`CityName`, ' ', State.`StateNameShort`, ' ', Address.`ZipCode`) CustomerAddress,
    (CASE WHEN Invoice.`ApproverId` = '00000000-0000-0000-0000-000000000000' THEN 'System' ELSE CONCAT(`User`.`LastName`, ', ', `User`.`FirstName`) END) ApprovedBy,
    InvoiceStatus.`StateName` 'InvoiceStatus',
    Invoice.`DeliveryNumber`,
    DATE_FORMAT(Invoice.`AprovedDate`, '%m/%d/%Y') ApprovedDate,
    Invoice.`Tax`,
    Customer.`CustomerNo` 'CustomerGroupCode'
  FROM Invoice
    INNER JOIN `ItemLineItemDetail`
      ON Invoice.`InvoiceId` = `ItemLineItemDetail`.`InvoiceId`
    LEFT OUTER JOIN `CustomerLocationItem`
      ON ItemLineItemDetail.`CustomerLocationItemId` = CustomerLocationItem.`CustomerLocationItemId`
    LEFT OUTER JOIN `CustomerLocation` CustomerLocationItemCustomerLocation
      ON `CustomerLocationItem`.`CustomerLocationId` = `CustomerLocationItemCustomerLocation`.`CustomerLocationId`
    LEFT OUTER JOIN `Customer` CustomerLocationItemCustomerLocationCustomer
      ON `CustomerLocationItemCustomerLocation`.`CustomerId` = `CustomerLocationItemCustomerLocationCustomer`.`CustomerId`
    LEFT OUTER JOIN `Item`
      ON CustomerLocationItem.`ItemId` = Item.`ItemId`
    LEFT OUTER JOIN `CustomerLocation`
      ON Invoice.CustomerLocationId = CustomerLocation.`CustomerLocationId`
    LEFT OUTER JOIN `Address`
      ON CustomerLocation.`AddressId` = Address.`AddressId`
    LEFT OUTER JOIN `State`
      ON Address.`StateId` = State.`StateId`
    LEFT OUTER JOIN `Vendor`
      ON Invoice.VendorId = Vendor.`VendorId`
    LEFT OUTER JOIN `Customer`
      ON CustomerLocation.`CustomerId` = Customer.`CustomerId`
    LEFT OUTER JOIN `User`
      ON Invoice.`ApproverId` = `User`.`UserId`
    INNER JOIN `InvoiceStatus`
      ON Invoice.`ApprovalStatusId` = InvoiceStatus.`StateId`
  WHERE Invoice.ClientId = clientId
  AND Invoice.ApprovalStatusId IN (5, 7)
  AND Invoice.InvoiceType = 'Invoice'
  AND ((dateRange = 'InvoiceDate'
  AND Invoice.InvoiceDate >= fromDate
  AND Invoice.InvoiceDate < toDate)
  OR (dateRange = 'ScanDate'
  AND Invoice.ScannedDate >= fromDate
  AND Invoice.ScannedDate < toDate)
  OR (dateRange = 'DeliveryDate'
  AND Invoice.ShippingDate >= fromDate
  AND Invoice.ShippingDate < toDate))
  AND Invoice.IsDeleted = FALSE
  AND Invoice.IsPaused = FALSE
  AND (vendorNameNo IS NULL
  OR vendorNameNo = ''
  OR Customer.`CustomerNo` LIKE CONCAT('%', vendorNameNo)
  OR `CustomerLocation`.`LocationName` LIKE CONCAT('%', vendorNameNo)
  OR `CustomerLocation`.`LocationNumber` LIKE CONCAT('%', vendorNameNo)
  OR Vendor.`VendorNo` LIKE CONCAT('%', vendorNameNo)
  OR Vendor.`VendorName` LIKE CONCAT('%', vendorNameNo));

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVendorsForExpService` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetVendorsForExpService`(
IN clientId int, 
IN vendorNo varchar (255),
IN externalId varchar (255),
IN ignoreCompanyCodeWhenImportingVendors BIT, 
IN considerCompanyCode BIT, 
IN clientCompanyId int
)
BEGIN
select * from Vendor v where 
v.clientId = clientId and
case when externalId is null 
then 
  (v.VendorNo = vendorNo and (ignoreCompanyCodeWhenImportingVendors = TRUE or v.ClientCompanyId = clientCompanyId))
else 
  (case when considerCompanyCode = TRUE then (v.ClientCompanyId is null or v.ClientCompanyId = clientCompanyId) else true END) END
and (externalId is null or v.ExternalId = externalId);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVolumeReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetVolumeReport`(IN clientId int,
IN reportYear int,
IN userIds nvarchar(65535))
BEGIN
  DECLARE fromYear varchar(4);
  DECLARE toYear varchar(4);
  DECLARE varStr nvarchar(65535);
  DECLARE nOUsersSelected bool;
  SET nOUsersSelected = (userIds IS NULL OR userIds = '');

  CREATE TEMPORARY TABLE UserIdsToMatch (
    val varchar(36)
  );

  WHILE userIds IS NOT NULL
    AND CHAR_LENGTH(userIds) > 0
    AND userIds <> '' DO
    SET varStr = SUBSTRING_INDEX (userIds, ',', 1);
    SET userIds = SUBSTRING(userIds, LENGTH(varStr) + 2);
    IF varStr <> ''
      AND varStr <> ' '
      AND varStr IS NOT NULL THEN
      INSERT INTO UserIdsToMatch
        SELECT
          varStr;
    END IF;
  -- select varStr;
  END WHILE;

  SET fromYear = reportYear;
  SET toYear = reportYear + 1;

  IF clientId = 27 THEN
    SELECT
      MONTH(Invoice.`AprovedDate`) ApprovalMonth,
      `ApproverId`,
      CASE WHEN CONCAT(`User`.`FirstName`, ' ', `User`.`LastName`) IS NOT NULL THEN CONCAT(`User`.`FirstName`, ' ', `User`.`LastName`) ELSE 'System (Auto Approval)' END FullName,
      COUNT(*) ApprovedCount
    FROM Invoice
      INNER JOIN `User`
        ON Invoice.`ApproverId` = `User`.`UserId`
    WHERE Invoice.`ClientId` = clientId
    AND Invoice.`AprovedDate` >= DATE(CONCAT(fromYear, '-01-01'))
    AND Invoice.`AprovedDate` < DATE(CONCAT(toYear, '-01-01'))
    AND (nOUsersSelected = 1
    OR Invoice.ApproverId IN (SELECT
        *
      FROM UserIdsToMatch))
    GROUP BY MONTH(Invoice.`AprovedDate`),
             `ApproverId`,
             `User`.`FirstName`,
             `User`.`LastName`
    UNION
    SELECT
      MONTH(ScannedDate) ApprovalMonth,
      '00000000-0000-0000-0000-000000000001' ApproverId,
      'Others (Deleted/Not an Invoice)' FullName,
      COUNT(*) ApprovedCount
    FROM Invoice
    WHERE nOUsersSelected = 1
    AND Invoice.`ClientId` = 27
    AND Invoice.`ScannedDate` >= DATE(CONCAT(fromYear, '-01-01'))
    AND Invoice.`ScannedDate` < DATE(CONCAT(toYear, '-01-01'))
    AND (IsDeleted = TRUE
    OR InvoiceType <> 'Invoice'
    OR ApprovalStatusId IN (1, 3, 6))
    AND ApproverId IS NULL
    GROUP BY MONTH(ScannedDate);
  ELSE
    SELECT
      MONTH(`InvoiceHistory`.`ActionDate`) ApprovalMonth,
      User.`UserId` AS `ApproverId`,
      CASE WHEN CONCAT(`User`.`FirstName`, ' ', `User`.`LastName`) IS NOT NULL THEN CONCAT(`User`.`FirstName`, ' ', `User`.`LastName`) ELSE 'System (Auto Approval)' END FullName,
      COUNT(*) ApprovedCount
    FROM Invoice
      INNER JOIN InvoiceHistory
        ON Invoice.`InvoiceId` = InvoiceHistory.`InvoiceId`
        AND `InvoiceHistory`.`Action` = 'Approve'
      INNER JOIN `User`
        ON InvoiceHistory.`ActorId` = `User`.`UserId`
    WHERE Invoice.`ClientId` = clientId
    AND `InvoiceHistory`.`ActionDate` >= DATE(CONCAT(fromYear, '-01-01'))
    AND `InvoiceHistory`.`ActionDate` < DATE(CONCAT(toYear, '-01-01'))
    AND (nOUsersSelected = 1
    OR InvoiceHistory.ActorId IN (SELECT
        *
      FROM UserIdsToMatch))
    GROUP BY MONTH(`InvoiceHistory`.`ActionDate`),
             User.`UserId`,
             `User`.`FirstName`,
             `User`.`LastName`;
  END IF;

  DROP TEMPORARY TABLE UserIdsToMatch;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVolumeReportByScannedDate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetVolumeReportByScannedDate`(IN clientId int,
IN scannedDateFrom date,
IN scannedDateTo date,
IN userIds nvarchar(65535))
BEGIN
  DECLARE fromDate varchar(4);
  DECLARE toDate varchar(4);
  DECLARE varStr nvarchar(65535);
  DECLARE nOUsersSelected bool;
  SET nOUsersSelected = (userIds IS NULL OR userIds = '');

  CREATE TEMPORARY TABLE UserIdsToMatch (
    val varchar(36)
  );

  WHILE userIds IS NOT NULL
    AND CHAR_LENGTH(userIds) > 0
    AND userIds <> '' DO
    SET varStr = SUBSTRING_INDEX (userIds, ',', 1);
    SET userIds = SUBSTRING(userIds, LENGTH(varStr) + 2);
    IF varStr <> ''
      AND varStr <> ' '
      AND varStr IS NOT NULL THEN
      INSERT INTO UserIdsToMatch
        SELECT
          varStr;
    END IF;
  -- select varStr;
  END WHILE;


  SELECT
    MONTH(`InvoiceHistory`.`ActionDate`) ApprovalMonth,
    User.`UserId` AS `ApproverId`,
    CASE WHEN CONCAT(`User`.`FirstName`, ' ', `User`.`LastName`) IS NOT NULL THEN CONCAT(`User`.`FirstName`, ' ', `User`.`LastName`) ELSE 'System (Auto Approval)' END FullName,
    COUNT(*) ApprovedCount
  FROM Invoice
    INNER JOIN InvoiceHistory
      ON Invoice.`InvoiceId` = InvoiceHistory.`InvoiceId`
      AND `InvoiceHistory`.`Action` = 'Approve'
    INNER JOIN `User`
      ON InvoiceHistory.`ActorId` = `User`.`UserId`
  WHERE Invoice.`ClientId` = clientId
  AND STR_TO_DATE(`Invoice`.`ScannedDate`, '%Y-%m-%d') BETWEEN scannedDateFrom AND scannedDateTo
  AND (nOUsersSelected = 1
  OR InvoiceHistory.ActorId IN (SELECT
      *
    FROM UserIdsToMatch))
  GROUP BY MONTH(`Invoice`.`ScannedDate`),
           User.`UserId`,
           `User`.`FirstName`,
           `User`.`LastName`;

  DROP TEMPORARY TABLE UserIdsToMatch;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetVolumeReportWithAssistance` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `GetVolumeReportWithAssistance`(IN clientId int,
IN reportYear int,
IN userId nvarchar(36))
BEGIN
  DECLARE fromYear varchar(4);
  DECLARE toYear varchar(4);

  SET fromYear = reportYear;
  SET toYear = reportYear + 1;

  SELECT
    MONTH(Invoice.`AprovedDate`) ApprovalMonth,
    `ApproverId`,
    CASE WHEN CONCAT(`User`.`FirstName`, ' ', `User`.`LastName`) IS NOT NULL THEN CONCAT(`User`.`FirstName`, ' ', `User`.`LastName`) ELSE 'System (Auto Approval)' END FullName,
    COUNT(*) ApprovedCount,
    (SELECT
        COUNT(*) > 0
      FROM AutoApproveReport
      WHERE AutoApproveReport.InvoiceId = Invoice.InvoiceId
      AND AutoApproveReport.Previous1ItemLineItemDetailId IS NOT NULL
      AND AutoApproveReport.IsValid = 1) Assisted
  FROM Invoice
    INNER JOIN `User`
      ON Invoice.`ApproverId` = `User`.`UserId`
  WHERE Invoice.`ClientId` = clientId
  AND Invoice.`AprovedDate` >= DATE(CONCAT(fromYear, '-01-01'))
  AND Invoice.`AprovedDate` < DATE(CONCAT(toYear, '-01-01'))
  AND (Invoice.ApproverId = '00000000-0000-0000-0000-000000000000'
  OR Invoice.ApproverId = userId)
  GROUP BY MONTH(Invoice.`AprovedDate`),
           `ApproverId`,
           `User`.`FirstName`,
           `User`.`LastName`,
           (SELECT
               COUNT(*) > 0
             FROM AutoApproveReport
             WHERE AutoApproveReport.InvoiceId = Invoice.InvoiceId
             AND AutoApproveReport.Previous1ItemLineItemDetailId IS NOT NULL
             AND AutoApproveReport.IsValid = 1)
  ORDER BY ApprovalMonth, `ApproverId` DESC;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportApproverToGL` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportApproverToGL`(IN ApproverUserID nvarchar(250),
IN ApproverGL int)
BEGIN
  DECLARE maxId int;

  SET maxId = NULL;

  IF (SELECT
        MAX(agl.Id)
      FROM ApproverGLCode agl) IS NOT NULL THEN
    SET maxId = (SELECT
        MAX(agl.Id)
      FROM ApproverGLCode agl) + 1;
  ELSE
    SET maxId = 1;
  END IF;
  IF NOT EXISTS (SELECT
        *
      FROM ApproverGLCode agl
      WHERE agl.UserId = ApproverUserID
      AND agl.GlCodeId = ApproverGL) THEN
    INSERT INTO ApproverGLCode (Id, UserId, GlCodeId)
      VALUES (maxId, ApproverUserID, ApproverGL);
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportAPSmartSLPO` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportAPSmartSLPO`(IN VendorNo nvarchar(65535),
IN PONumber nvarchar(65535),
IN ItemNumber nvarchar(65535),
IN VendorCatNumber nvarchar(65535),
IN UnitOfPurchase nvarchar(65535),
IN OrderQty nvarchar(65535),
IN UnitCost float,
IN ExtCost float,
IN RcvdQty nvarchar(65535),
IN ClientId int,
IN LineNo nvarchar(65535),
IN Description nvarchar(65535))
BEGIN
  DECLARE vendorId int;
  SELECT
    vendorId = VendorId
  FROM Vendor v
  WHERE v.VendorNo = VendorNo
  AND v.ClientId = ClientId;
  IF vendorId IS NOT NULL THEN
    IF LineNo = 1 THEN
      DELETE
        FROM PO
      WHERE v.PONumber = PONumber;
    END IF;
    INSERT INTO PO (vendorId, PONumber, ItemNumber, VendorCatNumber, UnitOfPurchase,
    OrderQty, UnitCost, ExtCost, RcvdQty, ClientId, LineNo, Description)
      VALUES (vendorId, PONumber, ItemNumber, VendorCatNumber, UnitOfPurchase, OrderQty, UnitCost, ExtCost, RcvdQty, ClientId, LineNo, Description);

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportAPSmartSLVendorAddress` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportAPSmartSLVendorAddress`(IN VendorName nvarchar(65535),
IN VendorNo nvarchar(65535),
IN Address1 nvarchar(65535),
IN Address2 nvarchar(65535),
IN City nvarchar(65535),
IN StateID int,
IN ClientID int)
BEGIN
  DECLARE addressId int;
  SELECT
    addressId = addressid
  FROM apshtm.Address adr
  WHERE adr.Address1 = Address1
  AND adr.CityName = City
  AND adr.StateId = StateID;
  IF addressId IS NULL THEN
    INSERT INTO Address (Address1, Address2, CityName, StateId)
      VALUES (Address1, Address2, City, StateID);

    SELECT
      addressId INTO addressid
    FROM Address adr
    WHERE adr.Address1 = Address1
    AND adr.CityName = City
    AND adr.StateId = StateID;
  END IF;
  UPDATE Vendor v
  SET v.AddressId = addressId
  WHERE v.VendorNo = VendorNo
  AND v.ClientId = ClientID;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportBradfordPOFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportBradfordPOFromScript`(IN PONumber nvarchar(250),
IN POLineNum nvarchar(250),
IN VendorNum nvarchar(250),
IN VendorClientId nvarchar(250),
IN POHeaderId nvarchar(250),
IN POLineId nvarchar(250),
IN POLineLocationId nvarchar(250),
IN Col1 nvarchar(250),
IN Col2 nvarchar(250),
IN ItemNo nvarchar(250),
IN VendorCatNum nvarchar(250),
IN ItemDescription nvarchar(250),
IN OrderedQuantity nvarchar(250),
IN UnitOfMeasurement nvarchar(250),
IN UnitPrice nvarchar(250),
IN RecievedTransactionId nvarchar(250),
IN Quantity nvarchar(250),
IN ExtAmount nvarchar(250),
IN GLAccount nvarchar(250),
IN Expense bit)
BEGIN
  DECLARE OutputString nvarchar(250);
  DECLARE c nvarchar(250);
  DECLARE l int;
  DECLARE p int;
  DECLARE vendorId int;
  DECLARE POId int;
  DECLARE ClientId int;

  SET ClientId = 18;
  SET vendorId = -1;
  IF PONumber != 'PO_NUMBER' THEN
    SELECT
      v.VendorId
    FROM Vendor v
    WHERE v.ClientId = ClientId
    AND LTRIM(RTRIM(LOWER(v.VendorNo))) = LTRIM(RTRIM(LOWER(vendorNum))) COLLATE utf8_unicode_ci INTO vendorId;

    IF vendorId != -1 THEN
      IF NOT EXISTS (SELECT
            *
          FROM Tax tx
          WHERE LTRIM(RTRIM(LOWER(tx.TaxCode))) = LTRIM(RTRIM(LOWER(GLAccount))) COLLATE utf8_unicode_ci
          AND tx.ClientId = ClientId
          AND LTRIM(RTRIM(LOWER(tx.OrgId))) = LTRIM(RTRIM(LOWER(PONumber))) COLLATE utf8_unicode_ci) THEN
        INSERT INTO Tax (ClientId, TaxCode, OrgId)
          VALUES (ClientId, LTRIM(RTRIM(GLAccount)), LTRIM(RTRIM(PONumber)));
      END IF;
      IF RecievedTransactionId IS NULL THEN
        SET @RecievedTransactionId = '';
      END IF;

      IF NOT EXISTS (SELECT
            *
          FROM PO p
          WHERE p.ClientId = ClientId
          AND LTRIM(RTRIM(LOWER(p.PONumber))) = LTRIM(RTRIM(LOWER(PONumber))) COLLATE utf8_unicode_ci
          AND p.VendorId = vendorId
          AND LTRIM(RTRIM(LOWER(p.LineNo))) = LTRIM(RTRIM(LOWER(POLineNum))) COLLATE utf8_unicode_ci
          AND LTRIM(RTRIM(LOWER(p.POLineId))) = LTRIM(RTRIM(LOWER(POLineId))) COLLATE utf8_unicode_ci
          AND LTRIM(RTRIM(LOWER(p.RecievedTransactionId))) = LTRIM(RTRIM(LOWER(RecievedTransactionId))) COLLATE utf8_unicode_ci) THEN

        INSERT INTO PO (ClientId,
        VendorId,
        PONumber,
        VendorCatNumber,
        UnitOfPurchase,
        RcvdQty,
        UnitCost,
        ExtCost,
        ItemNumber,
        OrderQty
        , LineNo
        , Description
        , POHeaderId
        , POLineId
        , POLineLocationId
        , RecievedTransactionId, GLCode, POType, IsExpense)

          VALUES (ClientId, vendorId, RTRIM(LTRIM(PONumber)), RTRIM(LTRIM(VendorCatNum)), UnitOfMeasurement, Quantity, UnitPrice, ExtAmount, ItemNo, OrderedQuantity, RTRIM(LTRIM(POLineNum)), RTRIM(LTRIM(ItemDescription)), RTRIM(LTRIM(POHeaderId)), RTRIM(LTRIM(POLineId)), RTRIM(LTRIM(POLineLocationId)), RTRIM(LTRIM(RecievedTransactionId)), LTRIM(RTRIM(GLAccount)), LTRIM(RTRIM(Col1)), Expense);

      END IF;
    END IF;
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportBradfordVendorFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportBradfordVendorFromScript`(IN vendorName nvarchar(1000),
IN vendorNo nvarchar(1000),
IN col1 nvarchar(1000),-- ClientVendorID of Dep
IN vendorSiteCode nvarchar(250),-- DepartmentName
IN col2 nvarchar(1000),-- Description of Dep
IN col3 nvarchar(1000), -- Not used
IN Address1 nvarchar(1000),
IN Address2 nvarchar(1000),
IN Address3 nvarchar(1000),

IN City nvarchar(1000),
IN State nvarchar(1000),
IN ZipCode nvarchar(1000),
IN col4 nvarchar(1000),
IN col5 nvarchar(1090))
BEGIN
  DECLARE maxVendordId int;
  DECLARE VendordSiteId int;
  DECLARE ClientId int;
  DECLARE AddressId int;
  DECLARE StateIdId int;

  SET ClientId = 18;
  SET StateIdId = NULL;
  SET VendordSiteId = NULL;

  IF (SELECT
        MAX(v.VendorId)
      FROM Vendor v) IS NOT NULL THEN
    SET maxVendordId = (SELECT
        MAX(v.VendorId)
      FROM Vendor v) + 1;
  ELSE
    SET maxVendordId = 1;
  END IF;

  IF (SELECT
        MAX(adr.AddressId)
      FROM Address adr) IS NOT NULL THEN
    SET AddressId = (SELECT
        MAX(adr.AddressId)
      FROM Address adr) + 1;
  ELSE
    SET AddressId = 1;
  END IF;

  IF (vendorName != 'VENDOR_NAME') THEN
    IF NOT EXISTS (SELECT
          *
        FROM Vendor v
        WHERE v.ClientId = ClientId
        AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci)
      AND (vendorName IS NOT NULL
      AND vendorNo IS NOT NULL) THEN
      INSERT INTO Vendor (VendorId, ClientId, VendorNo, VendorName, ClientVendorID)
        VALUES (maxVendordId, ClientId, RTRIM(LTRIM(vendorNo)), RTRIM(LTRIM(vendorName)), col1);
    ELSE
      SELECT
        VendorId INTO maxVendordId
      FROM Vendor v
      WHERE v.ClientId = ClientId
      AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci;
      UPDATE Vendor
      SET ClientVendorID = col1,
          VendorName = RTRIM(LTRIM(vendorName)),
          IsActive = 1
      WHERE VendorId = maxVendordId;
    END IF;

    IF NOT EXISTS (SELECT
          *
        FROM Department dep
        WHERE dep.ClientId = ClientId
        AND dep.VendorId = maxVendordId
        AND RTRIM(LTRIM(LOWER(dep.DepartmentName))) = RTRIM(LTRIM(LOWER(vendorSiteCode))) COLLATE utf8_unicode_ci)
      AND (vendorSiteCode IS NOT NULL) THEN
      IF EXISTS (SELECT
            *
          FROM State
          WHERE LOWER(StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
          OR LOWER(StateName) = LOWER(State) COLLATE utf8_unicode_ci)
        AND State IS NOT NULL THEN
        SELECT
          StateId INTO StateIdId
        FROM State
        WHERE LOWER(StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
        OR LOWER(StateName) = LOWER(State) COLLATE utf8_unicode_ci LIMIT 1;
        INSERT INTO Address (StateId, ZipCode, Address1, Address2, Address3, CityName)
          VALUES (StateIdId, ZipCode, Address1, Address2, Address3, City);

        INSERT INTO Department (VendorId, ClientId, Description, DepartmentName, AddressId)
          VALUES (maxVendordId, ClientId, RTRIM(LTRIM(col2)), RTRIM(LTRIM(vendorSiteCode)), AddressId);
      ELSE
        SELECT
          Id INTO VendordSiteId
        FROM Department dep
        WHERE dep.ClientId = ClientId
        AND VendorId = maxVendordId
        AND RTRIM(LTRIM(LOWER(DepartmentName))) = RTRIM(LTRIM(LOWER(vendorSiteCode))) COLLATE utf8_unicode_ci;

        UPDATE Department
        SET Description = RTRIM(LTRIM(col2))
        WHERE Id = VendordSiteId;
      END IF;
    END IF;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportDepartmentFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportDepartmentFromScript`(IN MyDepName nvarchar(240),
IN MyDepDescription nvarchar(500),
IN MyClientId int)
BEGIN
  IF NOT EXISTS (SELECT
        *
      FROM Department dep
      WHERE LTRIM(RTRIM(LOWER(dep.DepartmentName))) = LTRIM(RTRIM(LOWER(MyDepName))) COLLATE utf8_unicode_ci
      AND dep.ClientId = MyClientId)
    AND MyDepName IS NOT NULL THEN
    INSERT INTO Department (ClientId, DepartmentName, Description, IsActive)
      VALUES (MyClientId, LTRIM(RTRIM(MyDepName)), LTRIM(RTRIM(MyDepDescription)), TRUE);
  ELSE
    UPDATE Department
    SET IsActive = TRUE,
        Description = LTRIM(RTRIM(MyDepDescription))
    WHERE MyDepName IS NOT NULL
    AND LTRIM(RTRIM(LOWER(Department.DepartmentName))) = LTRIM(RTRIM(LOWER(MyDepName))) COLLATE utf8_unicode_ci
    AND Department.ClientId = MyClientId;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportDepartmentWithAddress` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportDepartmentWithAddress`(IN MyDepName nvarchar(240),
IN MyDepDescription nvarchar(200),
IN myStreet nvarchar(200),
IN myCity nvarchar(100),
IN myState nvarchar(50),
IN myZip nvarchar(15),
IN myCountry nvarchar(50),
IN myCompCode nvarchar(50),
IN MyClientId int)
BEGIN
  DECLARE myAddressId int;
  DECLARE myStateId int;
  DECLARE newDepDescription nvarchar(200);
  DECLARE isAddressNew bool;
  DECLARE myCompId int;
  DECLARE iStreetFound int;
  SET isAddressNew = FALSE;
  SELECT
    cc.Id
  FROM ClientCompany cc
  WHERE cc.ClientId = myClientId
  AND cc.CompanyCode = myCompCode INTO myCompId;
  -- select 'CompId is ' + myCompId;
  IF NOT EXISTS (SELECT
        *
      FROM Department dep
      WHERE LTRIM(RTRIM(LOWER(dep.DepartmentName))) = LTRIM(RTRIM(LOWER(MyDepName))) COLLATE utf8_unicode_ci
      AND dep.ClientId = MyClientId
      AND dep.ClientCompanyId = myCompId)
    AND MyDepName IS NOT NULL THEN
    -- select 'Dep fouund';              
    SET myAddressId = (SELECT
        MAX(adr.AddressId)
      FROM Address adr) + 1;
    SELECT
      st.StateId
    FROM State st
    WHERE LOWER(st.StateNameShort) = LOWER(myState)
    OR LOWER(st.StateName) = LOWER(myState) INTO myStateId;
    IF myStateId IS NULL THEN
      INSERT INTO Address (ZipCode, CityName, Address1, Country)
        VALUES (myZip, myCity, myStreet, myCountry);
    ELSE
      INSERT INTO Address (StateId, ZipCode, CityName, Address1, Country)
        VALUES (myStateId, myZip, myCity, myStreet, myCountry);
    END IF;


    INSERT INTO Department (ClientId, DepartmentName, Description, AddiressId, ClientCompanyId, IsActive)
      VALUES (MyClientId, LTRIM(RTRIM(MyDepName)), CONCAT(LTRIM(RTRIM(MyDepDescription)), '-', myStreet), AddressId, myCompId, TRUE);
  ELSE -- Existing Department
    -- Get the addressId and if null, create
    -- select 'Getting AddressID';
    SELECT
      d.AddressId
    FROM Department d
    WHERE MyDepName IS NOT NULL
    AND LTRIM(RTRIM(LOWER(d.DepartmentName))) = LTRIM(RTRIM(LOWER(MyDepName))) COLLATE utf8_unicode_ci
    AND d.ClientId = MyClientId
    AND d.ClientCompanyId = myCompId INTO myAddressId;
    -- Select 'AddressId is ' + myAddressId;
    -- If addressID is null, create new
    IF (myAddressId IS NULL) THEN
      SET isAddressNew = TRUE;
      SET myAddressId = (SELECT
          MAX(adr.AddressId)
        FROM Address adr) + 1;
      -- Select 'Address is from max taken ' + myAddressId;
      SELECT
        st.StateId
      FROM State st
      WHERE LOWER(st.StateNameShort) = LOWER(myState)
      OR LOWER(st.StateName) = LOWER(myState) INTO myStateId;
      IF myStateId IS NULL THEN
        INSERT INTO Address (ZipCode, CityName, Address1, Country)
          VALUES (myZip, myCity, myStreet, myCountry);
      -- Set myStateId = 1;
      ELSE
        INSERT INTO Address (StateId, ZipCode, CityName, Address1, Country)
          VALUES (myStateId, myZip, myCity, myStreet, myCountry);
      END IF;
    -- Select 'Address created';
    ELSE
      -- Select 'Address already exists as ' + myAddressId;
      SELECT
        st.StateId
      FROM State st
      WHERE LOWER(st.StateNameShort) = LOWER(myState)
      OR LOWER(st.StateName) = LOWER(myState) INTO myStateId;
      -- Select 'Updating Existing Address';
      IF myStateId IS NULL THEN
        UPDATE Address
        SET ZipCode = myZip,
            CityName = myCity,
            Address1 = myStreet,
            Country = myCountry
        WHERE AddressId = myAddressId;
      ELSE
        UPDATE Address
        SET ZipCode = myZip,
            StateId = myStateId,
            CityName = myCity,
            Address1 = myStreet,
            Country = myCountry
        WHERE AddressId = myAddressId;
      END IF;
    END IF;
    -- If incoming department is empty, don't update. Keep the existing one
    IF (MyDepDescription = ''
      OR MyDepDescription IS NULL) THEN
      SELECT
        d.Description
      FROM Department d
      WHERE MyDepName IS NOT NULL
      AND LTRIM(RTRIM(LOWER(d.DepartmentName))) = LTRIM(RTRIM(LOWER(MyDepName))) COLLATE utf8_unicode_ci
      AND d.ClientId = MyClientId
      AND d.ClientCompanyId = myCompId INTO newDepDescription;
    ELSE
      SET newDepDescription = MyDepDescription;
    END IF;
    -- We want to add address to description if it is missing
    -- Select myStreet;
    SET iStreetFound = LOCATE(myStreet, newDepDescription);
    -- Select iStreetFound;
    IF (iStreetFound < 1) THEN
      -- Select 'Adding';
      SET newDepDescription = CONCAT(LTRIM(RTRIM(newDepDescription)), ' - ', myStreet);
    END IF;
    -- Select newDepDescription;

    IF (isAddressNew = TRUE) THEN
      UPDATE Department
      SET IsActive = TRUE,
          Description = LTRIM(RTRIM(newDepDescription)),
          AddressID = myAddressId
      WHERE MyDepName IS NOT NULL
      AND LTRIM(RTRIM(LOWER(Department.DepartmentName))) = LTRIM(RTRIM(LOWER(MyDepName))) COLLATE utf8_unicode_ci
      AND Department.ClientId = MyClientId
      AND Department.ClientCompanyId = myCompId;
    ELSE
      UPDATE Department
      SET IsActive = TRUE,
          Description = LTRIM(RTRIM(newDepDescription))
      WHERE MyDepName IS NOT NULL
      AND LTRIM(RTRIM(LOWER(Department.DepartmentName))) = LTRIM(RTRIM(LOWER(MyDepName))) COLLATE utf8_unicode_ci
      AND Department.ClientId = MyClientId
      AND Department.ClientCompanyId = myCompId;
    END IF;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportDepartmentWithCompCode` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportDepartmentWithCompCode`(IN MyDepName nvarchar(240),
IN MyDepDescription nvarchar(500),
IN MyCompCode nvarchar(50),
IN MyClientId int)
BEGIN
  DECLARE myCompId int;
  SELECT
    cc.Id
  FROM ClientCompany cc
  WHERE cc.ClientId = myClientId
  AND cc.CompanyCode = myCompCode INTO myCompId;

  IF NOT EXISTS (SELECT
        *
      FROM Department dep
      WHERE LTRIM(RTRIM(LOWER(dep.DepartmentName))) = LTRIM(RTRIM(LOWER(MyDepName))) COLLATE utf8_unicode_ci
      AND dep.ClientId = MyClientId
      AND dep.ClientCompanyId = myCompId)
    AND MyDepName IS NOT NULL THEN
    INSERT INTO Department (ClientId, DepartmentName, Description, ClientCompanyId, IsActive)
      VALUES (MyClientId, LTRIM(RTRIM(MyDepName)), LTRIM(RTRIM(MyDepDescription)), myCompId, TRUE);
  ELSE
    UPDATE Department
    SET IsActive = TRUE,
        Description = LTRIM(RTRIM(MyDepDescription))
    WHERE MyDepName IS NOT NULL
    AND LTRIM(RTRIM(LOWER(Department.DepartmentName))) = LTRIM(RTRIM(LOWER(MyDepName))) COLLATE utf8_unicode_ci
    AND Department.ClientId = MyClientId
    AND Department.ClientCompanyId = myCompId;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportDWRData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportDWRData`(IN VendorNo nvarchar(250),
IN VendorName nvarchar(250),
IN BusinessUnitId nvarchar(250),
IN BusinessUnit nvarchar(250),
IN AccountNo nvarchar(250),
IN AccountDescription nvarchar(250),
IN ProjectType1 nvarchar(250),
IN ProjectId1 nvarchar(250),
IN ProjectType2 nvarchar(250),
IN ProjectId2 nvarchar(250),
IN Reviewer nvarchar(250),
IN ReviewerLast nvarchar(250),
IN ReviewerEmail nvarchar(250),
IN Reviewer2 nvarchar(250),
IN Reviewer2Last nvarchar(250),
IN ReviewerEmail2 nvarchar(250),
IN Reviewer3 nvarchar(250),
IN Reviewer3Last nvarchar(250),
IN ReviewerEmail3 nvarchar(250),
IN Approver nvarchar(250),
IN ApproverLast nvarchar(250),
IN ApproverEmail nvarchar(250),
IN Approver2 nvarchar(250),
IN Approver2Last nvarchar(250),
IN ApproverEmail2 nvarchar(250),
IN Approver3 nvarchar(250),
IN Approver3Last nvarchar(250),
IN ApproverEmail3 nvarchar(250))
BEGIN
  DECLARE ClientId int;
  DECLARE GLId int;
  DECLARE DepId int;
  DECLARE vendorId int;
  DECLARE ReviewerId char(36);
  DECLARE ReviewerId2 char(36);
  DECLARE ReviewerId3 char(36);
  DECLARE ApproverId char(36);
  DECLARE ApproverId2 char(36);
  DECLARE ApproverId3 char(36);
  DECLARE isProject1Required tinyint;
  DECLARE isProject2Required tinyint;

  SET ClientId = 22;
  IF (SELECT
        MAX(v.VendorId)
      FROM Vendor v) IS NOT NULL THEN
    SET vendorId = (SELECT
        MAX(v.VendorId)
      FROM Vendor v) + 1;
  ELSE
    SET vendorId = 1;
  END IF;

  IF (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) IS NOT NULL THEN
    SET GLId = (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) + 1;
  ELSE
    SET GLId = 1;
  END IF;

  IF (VendorNo IS NOT NULL) THEN
    -- INSERT VENDOR
    IF NOT EXISTS (SELECT
          *
        FROM Vendor v
        WHERE v.ClientId = ClientId
        AND LOWER(v.VendorNo) = LOWER(vendorNo))
      AND (v.vendorName IS NOT NULL
      AND v.VendorNo IS NOT NULL
      AND v.VendorNo != '') THEN
      INSERT INTO apsthml.Vendor (ClientId, VendorId, VendorName, VendorNo)
        VALUES (ClientId, vendorId, vendorName, vendorNo);
    ELSE
      SELECT
        v.VendorId INTO vendorId
      FROM Vendor v
      WHERE v.ClientId = ClientId
      AND LOWER(v.VendorNo) = LOWER(vendorNo);
    END IF;

    -- INSERT DEPARTMENT
    IF NOT EXISTS (SELECT
          *
        FROM Department dep
        WHERE dep.ClientId = ClientId
        AND LOWER(dep.DepartmentName) = LOWER(BusinessUnitId))
      AND (BusinessUnitId IS NOT NULL
      AND BusinessUnitId != '') THEN
      INSERT INTO Department (DepartmentName, Description, ClientId)
        VALUES (BusinessUnitId, BusinessUnit, ClientId);
    END IF;

    -- INSERT GL CODE
    IF NOT EXISTS (SELECT
          *
        FROM GLCode glc
        WHERE glc.ClientId = ClientId
        AND LOWER(glc.GLCodeName) =
        LOWER(AccountNo))
      AND (AccountNo IS NOT NULL
      AND AccountNo != '') THEN
      IF (ProjectType1 IS NULL
        OR ProjectType1 = '') THEN
        SET isProject1Required = 0;
      ELSE
        SET isProject1Required = 1;
      END IF;

      IF (ProjectType2 IS NULL
        OR ProjectType2 = '') THEN
        SET isProject2Required = 0;
      ELSE
        SET isProject2Required = 1;
      END IF;

      INSERT INTO GLCode (ClientId, GLCodeId, GLCodeName, Desccription, ProjectType,
      SubProjectType, IsProjectTypeRequred, IsSubProjectTypeRequired)
        VALUES (ClientId, GLId, AccountNo, AccountDescription, ProjectType1, ProjectType2, isProject1Required, isProject2Required);
    END IF; -- GL CODE END

    SELECT
      GLCodeId INTO GLId
    FROM GLCode glc
    WHERE glc.ClientId = ClientId
    AND LOWER(glc.GLCodeName) =
    LOWER(AccountNo)
    AND (AccountNo IS NOT NULL
    AND AccountNo != '');

    SELECT
      Id
    FROM Department dep
    WHERE dep.ClientId = ClientId
    AND LOWER(dep.DepartmentName) = LOWER(BusinessUnitId)
    AND (BusinessUnitId IS NOT NULL
    AND BusinessUnitId != '') INTO DepId;

    IF NOT EXISTS (SELECT
          *
        FROM VendorDepartment vdep
        WHERE vdep.VendorId = vendorId
        AND vdep.DepartmentId = DepId)
      AND (DepId IS NOT NULL
      AND vendorId IS NOT NULL) THEN
      INSERT INTO VendorDepartment (VendorId, DepartmentId)
        VALUES (vendorId, DepId);
    END IF;

    IF NOT EXISTS (SELECT
          *
        FROM DepartmentGLCode depglc
        WHERE depglc.GLCodeId = GLId
        AND depglc.DepartmentId =
        DepId)
      AND (DepId IS NOT NULL
      AND GLId IS NOT NULL) THEN
      INSERT INTO DepartmentGLCode (GLCodeId, DepartmentId)
        VALUES (GLId, DepId);
    END IF;

    IF NOT EXISTS (SELECT
          *
        FROM Vendor_Department_GL vdepglc
        WHERE vdepglc.VendorId = vendorId
        AND vdepglc.GLCodeId = GLId
        AND vdepglc.DepartmentId = DepId)
      AND (DepId IS NOT NULL
      AND GLId IS NOT NULL
      AND vendorId IS NOT NULL) THEN
      INSERT INTO Vendor_Department_GL (VendorId, GLCodeId, DepartmentId)
        VALUES (vendorId, GLId, DepId);
    END IF;

    -- get reviewer if exists
    IF EXISTS (SELECT
          *
        FROM user usr
        WHERE LOWER(usr.UserName) = LOWER(ReviewerEmail)
        AND usr.ClientId = ClientId)
      AND ReviewerEmail IS NOT NULL
      AND ReviewerEmail != '' THEN
      SELECT
        UserId
      FROM user usr
      WHERE LOWER(usr.UserName) = LOWER(ReviewerEmail)
      AND usr.ClientId = ClientId
      AND usr.IsActive = 1 INTO ReviewerId;
    END IF;

    -- insert reviewer if not exists
    IF (ReviewerId IS NULL
      AND ReviewerEmail IS NOT NULL
      AND ReviewerEmail != '') THEN
      SET ReviewerId = UUID();
      INSERT INTO user (ClientId, userid, UserName, Email, FirstName, LastName, `Password`,
      UserIdCard, RoleId, IsActive, LoggedIn)
        VALUES (ClientId, ReviewerId, ReviewerEmail, ReviewerEmail, Reviewer, ReviewerLast, '', ReviewerEmail, 1, 1, 0);
    END IF;

    IF EXISTS (SELECT
          *
        FROM user usr
        WHERE LOWER(usr.UserName) = LOWER(ReviewerEmail2)
        AND usr.ClientId = ClientId)
      AND ReviewerEmail2 IS NOT NULL
      AND ReviewerEmail2 != '' THEN
      SELECT
        UserId
      FROM user usr
      WHERE LOWER(usr.UserName) = LOWER(ReviewerEmail2)
      AND usr.ClientId = ClientId
      AND usr.IsActive = 1 INTO ReviewerId2;
    END IF;

    IF (ReviewerId2 IS NULL
      AND ReviewerEmail2 IS NOT NULL
      AND ReviewerEmail2 != '') THEN
      SET ReviewerId2 = UUID();
      INSERT INTO user (ClientId, userid, UserName, Email, FirstName, LastName, `Password`, UserIdCard, RoleId, IsActive, LoggedIn)
        VALUES (ClientId, ReviewerId2, ReviewerEmail2, ReviewerEmail2, Reviewer2, Reviewer2Last, '', ReviewerEmail2, 1, 1, 0);
    END IF;

    IF EXISTS (SELECT
          *
        FROM user usr
        WHERE LOWER(usr.UserName) = LOWER(ReviewerEmail3)
        AND usr.ClientId =
        ClientId)
      AND ReviewerEmail3 IS NOT NULL
      AND ReviewerEmail3 != '' THEN
      SELECT
        UserId
      FROM user usr
      WHERE LOWER(usr.UserName) = LOWER(ReviewerEmail3)
      AND usr.ClientId = ClientId
      AND usr.IsActive = 1 INTO ReviewerId3;
    END IF;

    IF (ReviewerId3 IS NULL
      AND ReviewerEmail3 IS NOT NULL
      AND ReviewerEmail3 != '') THEN
      SET ReviewerId3 = UUID();
      INSERT INTO user (ClientId, userid, UserName, Email, FirstName, LastName, `Password`,
      UserIdCard, RoleId, IsActive, LoggedIn)
        VALUES (ClientId, ReviewerId3, ReviewerEmail3, ReviewerEmail3, Reviewer3, Reviewer3Last, '', ReviewerEmail3, 1, 1, 0);
    END IF;

    -- get approver if exists
    IF EXISTS (SELECT
          *
        FROM user usr
        WHERE LOWER(usr.UserName) = LOWER(ApproverEmail)
        AND usr.ClientId =
        ClientId)
      AND ApproverEmail IS NOT NULL
      AND ApproverEmail != '' THEN
      SELECT
        UserId
      FROM user usr
      WHERE LOWER(usr.UserName) = LOWER(ApproverEmail)
      AND usr.ClientId = ClientId
      AND usr.IsActive = 1 INTO ApproverId;
    END IF;

    -- insert approver if not exists
    IF (ApproverId IS NULL
      AND ApproverEmail IS NOT NULL
      AND ApproverEmail != '') THEN
      SET ApproverId = UUID();
      INSERT INTO user (ClientId, userid, UserName, Email, FirstName, LastName, `Password`,
      UserIdCard, RoleId, IsActive, LoggedIn)
        VALUES (ClientId, ApproverId, ApproverEmail, ApproverEmail, Approver, ApproverLast, '', ApproverEmail, 1, 1, 0);
    END IF;

    IF EXISTS (SELECT
          *
        FROM user usr
        WHERE LOWER(usr.UserName) = LOWER(ApproverEmail2)
        AND usr.ClientId = ClientId)
      AND ApproverEmail2 IS NOT NULL
      AND ApproverEmail2 != '' THEN
      SELECT
        UserId
      FROM user usr
      WHERE LOWER(usr.UserName) = LOWER(ApproverEmail2)
      AND usr.ClientId = ClientId
      AND usr.IsActive = 1 INTO ApproverId2;
    END IF;

    IF (ApproverId2 IS NULL
      AND ApproverEmail2 IS NOT NULL
      AND ApproverEmail2 != '') THEN
      SET ApproverId2 = UUID();
      INSERT INTO user (ClientId, userid, UserName, Email, FirstName, LastName, `Password`,
      UserIdCard, RoleId, IsActive, LoggedIn)
        VALUES (ClientId, ApproverId2, ApproverEmail2, ApproverEmail2, Approver2, pprover2Last, '', ApproverEmail2, 1, 1, 0);
    END IF;

    IF EXISTS (SELECT
          *
        FROM user usr
        WHERE LOWER(usr.UserName) = LOWER(ApproverEmail3)
        AND usr.ClientId = ClientId)
      AND ApproverEmail3 IS NOT NULL
      AND ApproverEmail3 != '' THEN
      SELECT
        UserId
      FROM user usr
      WHERE LOWER(usr.UserName) = LOWER(ApproverEmail3)
      AND usr.ClientId = ClientId
      AND usr.IsActive = 1 INTO ApproverId3;
    END IF;

    IF (ApproverId3 IS NULL
      AND ApproverEmail3 IS NOT NULL
      AND ApproverEmail3 != '') THEN
      SET ApproverId3 = UUID();
      INSERT INTO user (ClientId, userid, UserName, Email, FirstName, LastName, `Password`,
      UserIdCard, RoleId, IsActive, LoggedIn)
        VALUES (ClientId, ApproverId3, ApproverEmail3, ApproverEmail3, Approver3, Approver3Last, '', ApproverEmail3, 1, 1, 0);
    END IF;

    -- insert awf for reviewer
    IF NOT EXISTS (SELECT
          *
        FROM ApprovalWorkFlow awf
        WHERE awf.VendorId = vendorId
        AND `Type` = 0)
      AND (ReviewerId IS NOT NULL) THEN
      INSERT INTO ApprovalWorkFlow (VendorId, UserId, Title, Duration, FirstEscalationManagerId,
      SeondEscalationManagerId, `Type`, CurrentLevelUserId)
        VALUES (vendorId, ReviewerId, (VendorName), 3, Reviewerid2, Reviewerid3, 0, Reviewerid2);
    END IF;

    -- insert awf for manager
    IF NOT EXISTS (SELECT
          *
        FROM ApprovalWorkFlow awf
        WHERE awf.VendorId = vendorId
        AND `Type` = 1)
      AND (ApproverId IS NOT NULL) THEN
      INSERT INTO ApprovalWorkFlow (VendorId, UserId, Title, Duration,
      FirstEscalationManagerId, SeondEscalationManagerId, `Type`, CurrentLevelUserId)
        VALUES (vendorId, ApproverId, (VendorName + ' - Managers'), 3, ApproverId2, ApproverId3, 1, ApproverId2);
    END IF;

    -- insert manager notification based on vendor No
    IF NOT EXISTS (SELECT
          *
        FROM ApproverByAmount abamount
        WHERE abamount.UserId = ReviewerId
        AND abamount.SecondApproverId = ApproverId
        AND LOWER(abamount.AuthCode) = LOWER(VendorNo))
      AND (ReviewerId IS NOT NULL)
      AND (ApproverId IS NOT NULL) THEN
      INSERT INTO ApproverByAmount (UserId, MaximumAllowedAmount, SecondApproverId, AuthCode)
        VALUES (ReviewerId, 0.01, ApproverId, VendorNo);
    END IF;

    -- insert manager notification based on vendor No
    IF NOT EXISTS (SELECT
          *
        FROM ApproverByAmount abamount
        WHERE abamount.UserId = ReviewerId
        AND abamount.SecondApproverId = ApproverId2
        AND LOWER(abamount.AuthCode) = LOWER(VendorNo))
      AND (ReviewerId IS NOT NULL)
      AND (ApproverId2 IS NOT NULL) THEN
      INSERT INTO ApproverByAmount (UserId, MaximumAllowedAmount, SecondApproverId, AuthCode)
        VALUES (ReviewerId, 0.01, ApproverId2, VendorNo);
    END IF;

    -- insert manager notification based on vendor No
    IF NOT EXISTS (SELECT
          *
        FROM ApproverByAmount abamount
        WHERE abamount.UserId = ReviewerId
        AND abamount.SecondApproverId = ApproverId3
        AND LOWER(abamount.AuthCode) = LOWER(VendorNo))
      AND (ReviewerId IS NOT NULL)
      AND (ApproverId3 IS NOT NULL) THEN
      INSERT INTO ApproverByAmount (UserId, MaximumAllowedAmount, SecondApproverId, AuthCode)
        VALUES (ReviewerId, 0.01, ApproverId3, VendorNo);
    END IF;

    -- insert manager notification based on vendor No
    IF NOT EXISTS (SELECT
          *
        FROM ApproverByAmount abamount
        WHERE abamount.UserId = ReviewerId2
        AND abamount.SecondApproverId = ApproverId
        AND LOWER(abamount.AuthCode) = LOWER(VendorNo))
      AND (ReviewerId2 IS NOT NULL)
      AND (ApproverId IS NOT NULL) THEN
      INSERT INTO ApproverByAmount (UserId, MaximumAllowedAmount, SecondApproverId, AuthCode)
        VALUES (ReviewerId2, 0.01, ApproverId, VendorNo);
    END IF;

    -- insert manager notification based on vendor No
    IF NOT EXISTS (SELECT
          *
        FROM ApproverByAmount abamount
        WHERE abamount.UserId = ReviewerId2
        AND abamount.SecondApproverId = ApproverId2
        AND LOWER(abamount.AuthCode) = LOWER(VendorNo))
      AND (ReviewerId2 IS NOT NULL)
      AND (ApproverId2 IS NOT NULL) THEN
      INSERT INTO ApproverByAmount (UserId, MaximumAllowedAmount, SecondApproverId, AuthCode)
        VALUES (ReviewerId2, 0.01, ApproverId2, VendorNo);
    END IF;

    -- insert manager notification based on vendor No
    IF NOT EXISTS (SELECT
          *
        FROM ApproverByAmount abamount
        WHERE abamount.UserId = ReviewerId2
        AND abamount.SecondApproverId = ApproverId3
        AND LOWER(abamount.AuthCode) = LOWER(VendorNo))
      AND (ReviewerId2 IS NOT NULL)
      AND (ApproverId3 IS NOT NULL) THEN
      INSERT INTO ApproverByAmount (UserId, MaximumAllowedAmount, SecondApproverId, AuthCode)
        VALUES (ReviewerId2, 0.01, ApproverId3, VendorNo);
    END IF;

    -- insert manager notification based on vendor No
    IF NOT EXISTS (SELECT
          *
        FROM ApproverByAmount abamount
        WHERE abamount.UserId = ReviewerId3
        AND abamount.SecondApproverId = ApproverId
        AND LOWER(AuthCode) = LOWER(VendorNo))
      AND (ReviewerId3 IS NOT NULL)
      AND (ApproverId IS NOT NULL) THEN
      INSERT INTO ApproverByAmount (UserId, MaximumAllowedAmount, SecondApproverId, AuthCode)
        VALUES (ReviewerId3, 0.01, ApproverId, VendorNo);
    END IF;

    -- insert manager notification based on vendor No
    IF NOT EXISTS (SELECT
          *
        FROM ApproverByAmount abamount
        WHERE abamount.UserId = ReviewerId3
        AND abamount.SecondApproverId = ApproverId2
        AND LOWER(abamount.AuthCode) = LOWER(VendorNo))
      AND (ReviewerId3 IS NOT NULL)
      AND (ApproverId2 IS NOT NULL) THEN
      INSERT INTO ApproverByAmount (UserId, MaximumAllowedAmount, SecondApproverId, AuthCode)
        VALUES (ReviewerId3, 0.01, ApproverId2, VendorNo);
    END IF;

    -- insert manager notification based on vendor No
    IF NOT EXISTS (SELECT
          *
        FROM ApproverByAmount abamount
        WHERE abamount.UserId = ReviewerId3
        AND abamount.SecondApproverId = ApproverId3
        AND LOWER(abamount.AuthCode) = LOWER(VendorNo))
      AND (ReviewerId3 IS NOT NULL)
      AND (ApproverId3 IS NOT NULL) THEN
      INSERT INTO ApproverByAmount (UserId, MaximumAllowedAmount, SecondApproverId, AuthCode)
        VALUES (ReviewerId3, 0.01, ApproverId3, VendorNo);
    END IF;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportDWRDataGLMapping` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportDWRDataGLMapping`(IN VendorNo nvarchar(250),
IN BusinessUnitId nvarchar(250),
IN AccountNo nvarchar(250))
BEGIN
  DECLARE ClientId int;
  DECLARE GLId int;
  DECLARE DepId int;
  DECLARE vendorId int;

  SET ClientId = 22;
  SET vendorId = NULL;
  SET DepId = NULL;
  SET GLId = NULL;

  IF (VendorNo IS NOT NULL) THEN
    -- get vendorId
    SELECT
      VendorId
    FROM Vendor v
    WHERE v.ClientId = ClientId
    AND LOWER(v.VendorNo) = LOWER(vendorNo) INTO vendorId;

    -- get GL Id
    SELECT
      GLCodeId
    FROM GLCode glc
    WHERE glc.ClientId = ClientId
    AND LOWER(glc.GLCodeName) =
    LOWER(AccountNo)
    AND (AccountNo IS NOT NULL
    AND AccountNo != '') INTO GLId;

    -- get Dep Id
    SELECT
      Id
    FROM Department dep
    WHERE dep.ClientId = ClientId
    AND LOWER(dep.DepartmentName) =
    LOWER(BusinessUnitId)
    AND (BusinessUnitId IS NOT NULL
    AND BusinessUnitId != '') INTO DepId;

    IF NOT EXISTS (SELECT
          *
        FROM VendorDepartment vdep
        WHERE vdep.VendorId = vendorId
        AND vdep.DepartmentId =
        DepId)
      AND (DepId IS NOT NULL
      AND vendorId IS NOT NULL) THEN
      INSERT INTO VendorDepartment (VendorId, DepartmentId)
        VALUES (vendorId, DepId);
    END IF;

    IF NOT EXISTS (SELECT
          *
        FROM DepartmentGLCode depglc
        WHERE depglc.GLCodeId = GLId
        AND depglc.DepartmentId = DepId)
      AND (DepId IS NOT NULL
      AND GLId IS NOT NULL) THEN
      INSERT INTO DepartmentGLCode (GLCodeId, DepartmentId)
        VALUES (GLId, DepId);
    END IF;

    IF NOT EXISTS (SELECT
          *
        FROM Vendor_Department_GL vdepglc
        WHERE vdepglc.VendorId = vendorId
        AND vdepglc.GLCodeId
        = GLId
        AND vdepglc.DepartmentId = DepId)
      AND (DepId IS NOT NULL
      AND GLId IS NOT NULL
      AND vendorId IS NOT NULL) THEN
      INSERT INTO Vendor_Department_GL (VendorId, GLCodeId, DepartmentId)
        VALUES (vendorId, GLId, DepId);
    END IF;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportGLFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportGLFromScript`(IN MyGLName nvarchar(240),
IN MyGLDescription nvarchar(500),
IN MyUserName nvarchar(250),
IN MyClientId int)
BEGIN
  DECLARE GlCodeId int;
  DECLARE glUserID char(36);
  IF (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) IS NOT NULL THEN
    SET GlCodeId = (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) + 1;
  ELSE
    SET GlCodeId = 1;
  END IF;
  IF NOT EXISTS (SELECT
        *
      FROM GLCode glc
      WHERE LTRIM(RTRIM(LOWER(glc.GLCodeName))) = LTRIM(RTRIM(LOWER(MyGLName))) COLLATE utf8_unicode_ci
      AND glc.ClientId = MyClientId)
    AND MyGLName IS NOT NULL THEN
    INSERT INTO GLCode (ClientId, GLCodeId, GLCodeName, Desccription)
      VALUES (MyClientId, GlCodeId, LTRIM(RTRIM(MyGLName)), LTRIM(RTRIM(MyGLDescription)));
    -- If userName exists, assign the GL to the user
    IF EXISTS (SELECT
          *
        FROM User u
        WHERE u.UserName = MyUserName COLLATE utf8_unicode_ci
        AND u.ClientId = MyClientId) THEN
      SET glUserID = (SELECT
          UserID
        FROM User u
        WHERE u.UserName = MyUserName COLLATE utf8_unicode_ci
        AND u.ClientId = MyClientId);
      INSERT INTO ApproverGLCode (GLCodeId, UserId)
        VALUES (GlCodeId, glUserID);
    END IF;
  ELSE
    UPDATE GLCode
    SET IsActive = TRUE,
        GLCode.Desccription = LTRIM(RTRIM(MyGLDescription))
    WHERE MyGLName IS NOT NULL
    AND LTRIM(RTRIM(LOWER(GLCode.GLCodeName))) = LTRIM(RTRIM(LOWER(MyGLName))) COLLATE utf8_unicode_ci
    AND GLCode.ClientId = MyClientId;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportGLFromScript_Backup` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportGLFromScript_Backup`(IN MyGLName nvarchar(240),
IN MyGLDescription nvarchar(500),
IN MyUserName nvarchar(250),
IN MyClientId int)
BEGIN
  DECLARE GlCodeId int;
  DECLARE glUserID char(36);
  IF (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) IS NOT NULL THEN
    SET GlCodeId = (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) + 1;
  ELSE
    SET GlCodeId = 1;
  END IF;
  IF NOT EXISTS (SELECT
        *
      FROM GLCode glc
      WHERE LTRIM(RTRIM(LOWER(glc.GLCodeName))) = LTRIM(RTRIM(LOWER(MyGLName))) COLLATE utf8_unicode_ci
      AND glc.ClientId = MyClientId)
    AND MyGLName IS NOT NULL THEN
    INSERT INTO GLCode (ClientId, GLCodeId, GLCodeName, Desccription)
      VALUES (MyClientId, GlCodeId, LTRIM(RTRIM(MyGLName)), LTRIM(RTRIM(MyGLDescription)));
    -- If userName exists, assign the GL to the user
    IF EXISTS (SELECT
          *
        FROM User u
        WHERE u.UserName = MyUserName COLLATE utf8_unicode_ci
        AND u.ClientId = MyClientId) THEN
      SET glUserID = (SELECT
          UserID
        FROM User u
        WHERE u.UserName = MyUserName COLLATE utf8_unicode_ci
        AND u.ClientId = MyClientId);
      INSERT INTO ApproverGLCode (GLCodeId, UserId)
        VALUES (GlCodeId, glUserID);
    END IF;
  ELSE
    UPDATE GLCode
    SET IsActive = TRUE,
        GLCode.Desccription = LTRIM(RTRIM(MyGLDescription))
    WHERE MyGLName IS NOT NULL
    AND LTRIM(RTRIM(LOWER(GLCode.GLCodeName))) = LTRIM(RTRIM(LOWER(MyGLName))) COLLATE utf8_unicode_ci
    AND GLCode.ClientId = MyClientId;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportKettleCustomerFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportKettleCustomerFromScript`(IN CustomerNo nvarchar(500),
IN CustomerName nvarchar(1000),
IN Col3 nvarchar(1000),
IN Col4 nvarchar(1000),
IN Col5 nvarchar(1000),
IN Col6 nvarchar(1000),
IN Col7 nvarchar(990))
BEGIN
  DECLARE Id int;
  DECLARE ClientId int;

  IF (SELECT
        MAX(cst.CustomerId)
      FROM Customer cst) IS NOT NULL THEN
    SET Id = (SELECT
        MAX(cst.CustomerId)
      FROM Customer cst) + 1;
  ELSE
    SET Id = 1;
  END IF;

  SET ClientId = 1;
  IF NOT EXISTS (SELECT
        *
      FROM Customer cst
      WHERE cst.ClientId = ClientId
      AND RTRIM(LTRIM(LOWER(cst.CustomerName))) = RTRIM(LTRIM(LOWER(CustomerName))) COLLATE utf8_unicode_ci
      AND RTRIM(LTRIM(LOWER(cst.CustomerNo))) = RTRIM(LTRIM(LOWER(CustomerNo))) COLLATE utf8_unicode_ci)
    AND (CustomerName IS NOT NULL) THEN
    INSERT INTO Customer (ClientId, CustomerId, CustomerName, ContactPerson, AddressId, Telephone, Fax, Email, CustomerNo)
      VALUES (ClientId, Id, RTRIM(LTRIM(CustomerName)), NULL, NULL, NULL, NULL, NULL, RTRIM(LTRIM(CustomerNo)));
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportKettlePOFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportKettlePOFromScript`(IN POumber nvarchar(250),
IN vendorNo nvarchar(250),
IN VendorCatNum nvarchar(250),
IN UnitOfM nvarchar(250),
IN QtyRcvd nvarchar(250),
IN UnitCost nvarchar(250),
IN ExtCost nvarchar(250),
IN Description nvarchar(250),
IN RecivedTranID nvarchar(250),
IN MyClientId int)
BEGIN
  DECLARE vendorId int;
  DECLARE ClientId int;
  DECLARE OutputString nvarchar(250);
  DECLARE c nvarchar(250);
  DECLARE l int;
  DECLARE p int;
  DECLARE POId int;

  -- SET ClientId=1;
  SET vendorId = -1;

  SELECT
    v.VendorId
  FROM Vendor v
  WHERE v.ClientId = MyClientId
  AND v.IsActive = 1
  AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci LIMIT 1 INTO vendorId;

  IF (vendorId != -1
    AND POumber <> 'PONUMBER') THEN
    IF NOT EXISTS (SELECT
          *
        FROM PO p
        WHERE p.ClientId = MyClientId
        AND LTRIM(RTRIM(LOWER(p.PONumber))) = LTRIM(RTRIM(LOWER(POumber))) COLLATE utf8_unicode_ci
        AND LTRIM(RTRIM(LOWER(p.VendorCatNumber))) = LTRIM(RTRIM(LOWER(VendorCatNum))) COLLATE utf8_unicode_ci) THEN


      INSERT INTO PO (ClientId, VendorId, PONumber, VendorCatNumber, UnitOfPurchase,
      RcvdQty, UnitCost, ExtCost, Description, IsExpense, RecievedTransactionId)
        VALUES (MyClientId, vendorId, RTRIM(LTRIM(POumber)), RTRIM(LTRIM(VendorCatNum)), RTRIM(LTRIM(UnitOfM)), QtyRcvd, UnitCost, ExtCost, Description, 0, RecivedTranID);
    ELSE
      SELECT
        Id
      FROM PO p
      WHERE p.ClientId = MyClientId
      AND LTRIM(RTRIM(LOWER(p.PONumber))) =
      LTRIM(RTRIM(LOWER(POumber))) COLLATE utf8_unicode_ci
      AND LTRIM(RTRIM(LOWER(p.VendorCatNumber))) =
      LTRIM(RTRIM(LOWER(VendorCatNum))) COLLATE utf8_unicode_ci INTO POId;
      UPDATE PO p
      SET VendorId = vendorId,
          PONumber = RTRIM(LTRIM(POumber)),
          VendorCatNumber = RTRIM(LTRIM(VendorCatNum)),
          UnitOfPurchase = RTRIM(LTRIM(UnitOfM)),
          RcvdQty = QtyRcvd,
          UnitCost = UnitCost,
          ExtCost = ExtCost,
          RecievedTransactionId = RecivedTranID,
          Description = RTRIM(LTRIM(Description))
      WHERE p.Id = POId;
    END IF;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportKettlePOFromScriptNew` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportKettlePOFromScriptNew`(IN POumber nvarchar(250),
IN vendorNo nvarchar(250),
IN VendorCatNum nvarchar(250),
IN UnitOfM nvarchar(250),
IN QtyRcvd nvarchar(250),
IN UnitCost nvarchar(250),
IN ExtCost nvarchar(250),
IN Description nvarchar(250),
IN RecivedTranID nvarchar(250),
IN RecLineNo nvarchar(250),
IN Ord nvarchar(250),
IN ExtDCost nvarchar(250),
IN MyClientId int)
BEGIN
  DECLARE vendorId int;
  DECLARE ClientId int;
  DECLARE OutputString nvarchar(250);
  DECLARE c nvarchar(250);
  DECLARE l int;
  DECLARE p int;
  DECLARE POId int;

  -- SET ClientId=1;
  SET vendorId = -1;

  SELECT
    v.VendorId
  FROM Vendor v
  WHERE v.ClientId = MyClientId
  AND v.IsActive = 1
  AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci LIMIT 1 INTO vendorId;

  IF (vendorId != -1
    AND POumber <> 'PONUMBER') THEN
    IF NOT EXISTS (SELECT
          *
        FROM PO p
        WHERE p.ClientId = MyClientId
        AND LTRIM(RTRIM(LOWER(p.PONumber))) = LTRIM(RTRIM(LOWER(POumber))) COLLATE utf8_unicode_ci
        AND LTRIM(RTRIM(LOWER(p.VendorCatNumber))) = LTRIM(RTRIM(LOWER(VendorCatNum))) COLLATE utf8_unicode_ci
        AND LTRIM(RTRIM(LOWER(p.LineNo))) = LTRIM(RTRIM(LOWER(RecLineNo))) COLLATE utf8_unicode_ci
        AND LTRIM(RTRIM(LOWER(p.POLineId))) = LTRIM(RTRIM(LOWER(Ord))) COLLATE utf8_unicode_ci) THEN


      INSERT INTO PO (ClientId, VendorId, PONumber, VendorCatNumber, UnitOfPurchase,
      RcvdQty, UnitCost, ExtCost, Description, IsExpense, RecievedTransactionId, LineNo, POLineId, UserField10)
        VALUES (MyClientId, vendorId, RTRIM(LTRIM(POumber)), RTRIM(LTRIM(VendorCatNum)), RTRIM(LTRIM(UnitOfM)), QtyRcvd, UnitCost, ExtCost, Description, 0, RecivedTranID, RecLineNo, Ord, ExtDCost);
    ELSE
      SELECT
        Id
      FROM PO p
      WHERE p.ClientId = MyClientId
      AND LTRIM(RTRIM(LOWER(p.PONumber))) =
      LTRIM(RTRIM(LOWER(POumber))) COLLATE utf8_unicode_ci
      AND LTRIM(RTRIM(LOWER(p.VendorCatNumber))) =
      LTRIM(RTRIM(LOWER(VendorCatNum))) COLLATE utf8_unicode_ci
      AND LTRIM(RTRIM(LOWER(p.LineNo))) =
      LTRIM(RTRIM(LOWER(RecLineNo))) COLLATE utf8_unicode_ci
      AND LTRIM(RTRIM(LOWER(p.POLineId))) = LTRIM(RTRIM(LOWER(Ord))) COLLATE utf8_unicode_ci INTO POId;
      UPDATE PO p
      SET VendorId = vendorId,
          PONumber = RTRIM(LTRIM(POumber)),
          VendorCatNumber = RTRIM(LTRIM(VendorCatNum)),
          UnitOfPurchase = RTRIM(LTRIM(UnitOfM)),
          RcvdQty = QtyRcvd,
          UnitCost = UnitCost,
          ExtCost = ExtCost,
          RecievedTransactionId = RecivedTranID,
          LineNo = RecLineNo,
          POLineId = Ord,
          UserField10 = ExtDCost,
          Description = RTRIM(LTRIM(Description))
      WHERE p.Id = POId;
    END IF;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportKettlePOGPFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportKettlePOGPFromScript`(IN POumber nvarchar(250),
IN vendorNo nvarchar(250),
IN VendorCatNum nvarchar(250),
IN UnitOfM nvarchar(250),
IN QtyRcvd nvarchar(250),
IN UnitCost nvarchar(250),
IN ExtCost nvarchar(250),
IN Description nvarchar(250),
IN RecivedTranID nvarchar(250),
IN MyClientId int)
BEGIN
  DECLARE vendorId int;
  DECLARE ClientId int;
  DECLARE OutputString nvarchar(250);
  DECLARE c nvarchar(250);
  DECLARE l int;
  DECLARE p int;
  DECLARE POId int;

  -- SET ClientId=1;
  SET vendorId = -1;

  SELECT
    v.VendorId
  FROM Vendor v
  WHERE v.ClientId = MyClientId
  AND v.IsActive = 1
  AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci LIMIT 1 INTO vendorId;

  IF (vendorId != -1
    AND POumber <> 'PONUMBER') THEN
    IF NOT EXISTS (SELECT
          *
        FROM PO p
        WHERE p.ClientId = MyClientId
        AND LTRIM(RTRIM(LOWER(p.PONumber))) = LTRIM(RTRIM(LOWER(POumber))) COLLATE utf8_unicode_ci
        AND LTRIM(RTRIM(LOWER(p.VendorCatNumber))) = LTRIM(RTRIM(LOWER(VendorCatNum))) COLLATE utf8_unicode_ci) THEN


      INSERT INTO PO (ClientId, VendorId, PONumber, VendorCatNumber, UnitOfPurchase,
      RcvdQty, UnitCost, ExtCost, Description, IsExpense, RecievedTransactionId)
        VALUES (MyClientId, vendorId, RTRIM(LTRIM(POumber)), RTRIM(LTRIM(VendorCatNum)), RTRIM(LTRIM(UnitOfM)), QtyRcvd, UnitCost, ExtCost, Description, 0, RecivedTranID);
    ELSE
      SELECT
        Id
      FROM PO p
      WHERE p.ClientId = MyClientId
      AND LTRIM(RTRIM(LOWER(p.PONumber))) =
      LTRIM(RTRIM(LOWER(POumber))) COLLATE utf8_unicode_ci
      AND LTRIM(RTRIM(LOWER(p.VendorCatNumber))) =
      LTRIM(RTRIM(LOWER(VendorCatNum))) COLLATE utf8_unicode_ci INTO POId;
      UPDATE PO p
      SET VendorId = vendorId,
          PONumber = RTRIM(LTRIM(POumber)),
          VendorCatNumber = RTRIM(LTRIM(VendorCatNum)),
          UnitOfPurchase = RTRIM(LTRIM(UnitOfM)),
          RcvdQty = QtyRcvd,
          UnitCost = UnitCost,
          ExtCost = ExtCost,
          RecievedTransactionId = RecivedTranID,
          Description = RTRIM(LTRIM(Description))
      WHERE p.Id = POId;
    END IF;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportKettleSagePOFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportKettleSagePOFromScript`(IN paramPONumber nvarchar(250),
IN vendorNo nvarchar(250),
IN VendorCatNum nvarchar(250),
IN UnitOfM nvarchar(250),
IN QtyRcvd nvarchar(250),
IN paramUnitCost nvarchar(250),
IN paramExtCost nvarchar(250),
IN Description nvarchar(250),
IN RecivedTranID nvarchar(250),
IN paramPOLineNo int,
IN MyClientId int)
BEGIN
  DECLARE vendorId int;
  DECLARE ClientId int;
  DECLARE OutputString nvarchar(250);
  DECLARE c nvarchar(250);
  DECLARE l int;
  DECLARE p int;
  DECLARE POId int;

  -- SET ClientId=1;
  SET vendorId = -1;

  SELECT
    v.VendorId
  FROM Vendor v
  WHERE v.ClientId = MyClientId
  AND v.IsActive = 1
  AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci LIMIT 1 INTO vendorId;

  IF (vendorId != -1) THEN
    IF NOT EXISTS (SELECT
          *
        FROM PO p
        WHERE p.ClientId = MyClientId
        AND LTRIM(RTRIM(LOWER(p.PONumber))) = LTRIM(RTRIM(LOWER(paramPONumber))) COLLATE utf8_unicode_ci
        AND LTRIM(RTRIM(LOWER(p.VendorCatNumber))) = LTRIM(RTRIM(LOWER(VendorCatNum))) COLLATE utf8_unicode_ci
        AND RTRIM(LTRIM(LOWER(p.POLineId))) = RTRIM(LTRIM(LOWER(paramPOLineNo))) COLLATE utf8_unicode_ci) THEN

      INSERT INTO PO (ClientId, VendorId, PONumber, VendorCatNumber, UnitOfPurchase,
      RcvdQty, UnitCost, ExtCost, Description, IsExpense, RecievedTransactionId, POLineId)
        VALUES (MyClientId, vendorId, RTRIM(LTRIM(paramPONumber)), RTRIM(LTRIM(VendorCatNum)), RTRIM(LTRIM(UnitOfM)), QtyRcvd, paramUnitCost, paramExtCost, Description, 0, RecivedTranID, RTRIM(LTRIM(paramPOLineNo)));
    ELSE
      SELECT
        Id
      FROM PO p
      WHERE p.ClientId = MyClientId
      AND LTRIM(RTRIM(LOWER(p.PONumber))) = LTRIM(RTRIM(LOWER(paramPONumber))) COLLATE utf8_unicode_ci
      AND LTRIM(RTRIM(LOWER(p.VendorCatNumber))) = LTRIM(RTRIM(LOWER(VendorCatNum))) COLLATE utf8_unicode_ci
      AND LTRIM(RTRIM(LOWER(p.POLineId))) = LTRIM(RTRIM(LOWER(paramPOLineNo))) COLLATE utf8_unicode_ci INTO POId;
      UPDATE PO p
      SET VendorId = vendorId,
          PONumber = RTRIM(LTRIM(paramPONumber)),
          VendorCatNumber = RTRIM(LTRIM(VendorCatNum)),
          UnitOfPurchase = RTRIM(LTRIM(UnitOfM)),
          RcvdQty = QtyRcvd,
          UnitCost = paramUnitCost,
          ExtCost = paramExtCost,
          RecievedTransactionId = RecivedTranID,
          Description = RTRIM(LTRIM(Description)),
          POLineId = RTRIM(LTRIM(paramPOLineNo))
      WHERE p.Id = POId;
    END IF;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportMasonicareVendorFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportMasonicareVendorFromScript`(IN vendorName nvarchar(1000),
IN vendorNo nvarchar(1000),
IN address nvarchar(1000),
IN phone nvarchar(1000),
IN email nvarchar(1000),
IN fax nvarchar(900))
BEGIN

  DECLARE vendorId int;
  DECLARE ClientId int;
  SET ClientId = 5;

  IF (SELECT
        MAX(v.VendorId)
      FROM Vendor v) IS NOT NULL THEN
    SET vendorId = (SELECT
        MAX(v.VendorId)
      FROM apshtm.Vendor v) + 1;
  ELSE
    SET vendorId = 1;
  END IF;

  IF NOT EXISTS (SELECT
        *
      FROM Vendor v
      WHERE v.ClientId = ClientId COLLATE utf8_unicode_ci
      AND LOWER(v.VendorNo) = LOWER(vendorNo)) COLLATE utf8_unicode_ci
    AND (vendorName IS NOT NULL) THEN
    INSERT INTO Vendor (ClientId, VendorId, VendorName, ContactPerson, AddressId
    , Telephone, Fax, Email, VendorNo, DefaultGlCodeId, UserId, TaxCode)
      VALUES (ClientId, vendorId, vendorName, NULL, NULL, phone, fax, email, vendorNo, NULL, NULL, NULL);
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportPOFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportPOFromScript`(IN PONumber nvarchar(250),
IN POLineNum nvarchar(250),
IN VendorNum nvarchar(250),
IN POHeaderId nvarchar(250),
IN POLineId nvarchar(250),
IN POLineLocationId nvarchar(250),
IN ItemNo nvarchar(250),
IN VendorCatNum nvarchar(250),
IN ItemDescription nvarchar(250),
IN OrderedQuantity nvarchar(250),
IN UnitOfMeasurement nvarchar(250),
IN UnitPrice nvarchar(250),
IN RecievedTransactionId nvarchar(250),
IN Quantity nvarchar(250),
IN ExtAmount nvarchar(240),
IN ClientID int)
BEGIN
  DECLARE OutputString nvarchar(250);
  DECLARE c nvarchar(250);
  DECLARE l int;
  DECLARE p int;
  DECLARE vendorId int;
  DECLARE POId int;

  SET vendorId = -1;
  IF (PONumber != 'PO_NUMBER') THEN

    SELECT
      v.VendorId
    FROM Vendor v
    WHERE v.ClientId = ClientId COLLATE utf8_unicode_ci
    AND LTRIM(RTRIM(LOWER(v.VendorNo))) = LTRIM(RTRIM(LOWER(vendorNum))) COLLATE utf8_unicode_ci INTO vendorId;

    IF (vendorId != -1) THEN
      INSERT INTO PO (ClientId,
      VendorId,
      PONumber,
      VendorCatNumber,
      UnitOfPurchase,
      RcvdQty,
      UnitCost,
      ExtCost,
      ItemNumber,
      OrderQty
      , LineNo
      , Description
      , POHeaderId
      , POLineId
      , POLineLocationId
      , RecievedTransactionId)
        VALUES (ClientId, vendorId, RTRIM(LTRIM(PONumber)), RTRIM(LTRIM(VendorCatNum)), UnitOfMeasurement, Quantity, UnitPrice, ExtAmount, ItemNo, OrderedQuantity, RTRIM(LTRIM(POLineNum)), RTRIM(LTRIM(ItemDescription)), RTRIM(LTRIM(POHeaderId)), RTRIM(LTRIM(POLineId)), RTRIM(LTRIM(POLineLocationId)), RTRIM(LTRIM(RecievedTransactionId)));
    END IF;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportPOFromScriptSteel` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportPOFromScriptSteel`(IN PONumber nvarchar(250),
IN POLineNum nvarchar(250),
IN VendorNum nvarchar(250),
IN POHeaderId nvarchar(250),
IN POLineId nvarchar(250),
IN POLineLocationId nvarchar(250),
IN ItemNo nvarchar(250),
IN VendorCatNum nvarchar(250),
IN Container nvarchar(250),
IN POType nvarchar(250),
IN ItemDescription nvarchar(250),
IN OrderedQuantity nvarchar(250),
IN UnitOfMeasurement nvarchar(250),
IN UnitPrice nvarchar(250),
IN RecievedTransactionId nvarchar(250),
IN Quantity nvarchar(250),
IN ExtAmount nvarchar(250),
IN Threshold nvarchar(250),
IN DocType nvarchar(240),
IN ClientID int)
BEGIN
  DECLARE vendorId int;
  DECLARE POId int;
  DECLARE CompanyCode nvarchar(16);
  DECLARE vendorCnt int;

  SET CompanyCode = '2100';
  IF LOCATE('001', POLineLocationId) > 0 THEN
    SET CompanyCode = '1000';
  END IF;
  SELECT
    'Company code is ' + CompanyCode;
  SET vendorId = 999999;
  SET vendorCnt = (SELECT
      COUNT(*)
    FROM Vendor v,
         ClientCompany cc
    WHERE v.ClientId = ClientId
    AND cc.CompanyCode = CompanyCode COLLATE utf8_unicode_ci
    AND v.IsActive = 1
    AND LTRIM(RTRIM(LOWER(v.VendorNo))) =
    LTRIM(RTRIM(LOWER(vendorNum))) COLLATE utf8_unicode_ci
    AND v.ClientCompanyId = cc.Id);
  SELECT
    'Vendor count is ' + vendorCnt;
  IF (vendorCnt = 1) THEN
    SELECT
      v.VendorId
    FROM Vendor v,
         ClientCompany cc
    WHERE v.ClientId = ClientId
    AND LTRIM(RTRIM(LOWER(v.VendorNo))) = LTRIM(RTRIM(LOWER(vendorNum))) COLLATE utf8_unicode_ci
    AND v.ClientCompanyId =
    cc.Id
    AND cc.CompanyCode = CompanyCode COLLATE utf8_unicode_ci INTO vendorId;
  END IF;
  SELECT
    'Vendor id is ' + vendorId;
  INSERT INTO PO (ClientId,
  VendorId,
  PONumber,
  VendorCatNumber,
  GLCode,
  POType,
  UnitOfPurchase,
  RcvdQty,
  UnitCost,
  ExtCost,
  ItemNumber,
  OrderQty
  , LineNo
  , Description
  , POHeaderId
  , POLineId
  , POLineLocationId
  , UserField1
  , UserField4
  , RecievedTransactionId)
    VALUES (ClientId, vendorId, RTRIM(LTRIM(PONumber)), RTRIM(LTRIM(VendorCatNum)), RTRIM(LTRIM(Container)), POType, UnitOfMeasurement, Quantity, UnitPrice, ExtAmount, ItemNo, OrderedQuantity, RTRIM(LTRIM(POLineNum)), RTRIM(LTRIM(ItemDescription)), RTRIM(LTRIM(POHeaderId)), RTRIM(LTRIM(POLineId)), RTRIM(LTRIM(POLineLocationId)), RTRIM(LTRIM(DocType)), Threshold, RTRIM(LTRIM(RecievedTransactionId)));


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportRatnerActivityFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportRatnerActivityFromScript`(IN ActivityNo nvarchar(1000),
IN ActivityName nvarchar(1000),
IN CategoryNo nvarchar(900),
IN CategoryName nvarchar(1000),
IN ClientId int)
BEGIN
  DECLARE ActivityId int;
  IF NOT EXISTS (SELECT
        *
      FROM Customer cst
      WHERE LOWER(cst.CustomerName) =
      LOWER(ActivityName) COLLATE utf8_unicode_ci
      AND LOWER(cst.CustomerNo) = LOWER(ActivityNo) COLLATE utf8_unicode_ci
      AND cst.ClientId = ClientId COLLATE utf8_unicode_ci)
    AND ActivityName IS NOT NULL
    AND ActivityNo IS NOT NULL THEN
    INSERT INTO Customer (ClientId, CustomerName, CustomerNo)
      VALUES (ClientId, ActivityName, ActivityNo);
  END IF;

  SELECT
    CustomerId INTO ActivityId
  FROM Customer cst
  WHERE LOWER(cst.CustomerName)
  = LOWER(ActivityName) COLLATE utf8_unicode_ci
  AND LOWER(cst.CustomerNo) = LOWER(ActivityNo) COLLATE utf8_unicode_ci
  AND cst.ClientId = ClientId COLLATE utf8_unicode_ci;

  IF NOT EXISTS (SELECT
        *
      FROM Category cat
      WHERE LOWER(cat.CategoryName) =
      LOWER(CategoryName) COLLATE utf8_unicode_ci
      AND LOWER(cat.CategoryNo) = LOWER(CategoryNo) COLLATE utf8_unicode_ci
      AND cat.ClientId = ClientId COLLATE utf8_unicode_ci
      AND cat.CustomerId = ActivityId COLLATE utf8_unicode_ci)
    AND CategoryName IS NOT NULL
    AND CategoryNo IS NOT NULL THEN
    INSERT INTO Category (ClientId, CustomerId, CategoryNo, CategoryName)
      VALUES (ClientId, ActivityId, CategoryNo, CategoryName);
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportRatnerDefaultGlFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportRatnerDefaultGlFromScript`(IN AuthCode nvarchar(1000),
IN DepartmentName nvarchar(1000),
IN GlCodeName nvarchar(1000),
IN Amount nvarchar(1000),
IN Rate nvarchar(900),
IN ClientId int)
BEGIN
  DECLARE Id int;
  DECLARE GlCodeId int;
  DECLARE DepartmentId int;
  DECLARE OutputString nvarchar(250);
  DECLARE c nvarchar(250);
  DECLARE l int;
  DECLARE p int;

  IF (SELECT
        MAX(vgld.Id)
      FROM VendorGlDefault vgld) IS NOT NULL THEN
    SET Id = (SELECT
        MAX(vgld.Id)
      FROM VendorGlDefault vgld) + 1;
  ELSE
    SET Id = 1;
  END IF;

  IF (DepartmentName IS NOT NULL) THEN
    IF (CHAR_LENGTH(DepartmentName) < 5
      AND DepartmentName
      NOT LIKE '%[A-Za-z]%') THEN
      IF (CHAR_LENGTH(DepartmentName) = 1) THEN
        SET DepartmentName = '0000' + DepartmentName;
      ELSEIF (CHAR_LENGTH(DepartmentName) = 2) THEN
        SET DepartmentName = '000' + DepartmentName;
      ELSEIF (CHAR_LENGTH(DepartmentName) = 3) THEN
        SET DepartmentName = '00' + DepartmentName;
      ELSEIF (CHAR_LENGTH(DepartmentName) = 4) THEN
        SET DepartmentName = '0' + DepartmentName;
      END IF;
    END IF;
  END IF;

  SET OutputString = '';
  SET l = CHAR_LENGTH(GlCodeName);
  SET p = 1;

  WHILE p <= l DO
    SET c = SUBSTRING(GlCodeName, p, 1);
    IF (c != ',') THEN
      SET OutputString = OutputString + c;
    END IF;
    SET p = p + 1;
  END WHILE;

  SET GlCodeName = OutputString;

  IF EXISTS (SELECT
        *
      FROM Department dep
      WHERE dep.ClientId = ClientId
      AND LOWER(dep.DepartmentName) = LOWER(DepartmentName))
    AND DepartmentName IS NOT NULL THEN
    SELECT
      Id INTO DepartmentId
    FROM Department dep
    WHERE dep.ClientId =
    ClientId
    AND LOWER(dep.DepartmentName) = LOWER(DepartmentName);
  END IF;

  IF EXISTS (SELECT
        *
      FROM GLCode glc
      WHERE LOWER(glc.GLCodeName) = LOWER(GlCodeName) COLLATE utf8_unicode_ci
      AND glc.ClientId = ClientId COLLATE utf8_unicode_ci)
    AND GlCodeName IS NOT NULL THEN
    SELECT
      GLCodeId INTO GlCodeId
    FROM GLCode glc
    WHERE LOWER(glc.GLCodeName) =
    LOWER(GlCodeName) COLLATE utf8_unicode_ci
    AND glc.ClientId = ClientId COLLATE utf8_unicode_ci;
  END IF;

  IF (GlCodeId != -1
    AND DepartmentId != -1
    AND AuthCode IS NOT NULL) THEN
    IF NOT EXISTS (SELECT
          *
        FROM VendorGlDefault vgld
        WHERE vgld.ClientId = ClientId COLLATE utf8_unicode_ci
        AND LOWER(vgld.AuthCode) =
        LOWER(AuthCode) COLLATE utf8_unicode_ci
        AND vgld.DepartmentId = DepartmentId COLLATE utf8_unicode_ci
        AND vgld.GlCodeId = GlCodeId COLLATE utf8_unicode_ci) THEN
      INSERT INTO VendorGlDefault (Id, DepartmentId, GlCodeId, AuthCode, Amount, ClientId)
        VALUES (Id, DepartmentId, GlCodeId, AuthCode, Amount, ClientId);
    END IF;
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportRatnerDepartmentFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportRatnerDepartmentFromScript`(IN DepartmentName nvarchar(1000),
IN Description nvarchar(1000),
IN `Status` nvarchar(900),
IN ClientId int)
BEGIN
  DECLARE DepartmentId int;
  SET DepartmentId = -1;
  IF EXISTS (SELECT
        *
      FROM Department dep
      WHERE dep.ClientId = ClientId
      AND LOWER(dep.DepartmentName)
      = LOWER(DepartmentName))
    AND DepartmentName IS NOT NULL THEN
    SELECT
      Id INTO DepartmentId
    FROM Department dep
    WHERE dep.ClientId = ClientId COLLATE utf8_unicode_ci
    AND LOWER(dep.DepartmentName) = LOWER(DepartmentName) COLLATE utf8_unicode_ci;
    IF (DepartmentId != -1
      AND Description IS NOT NULL) THEN
      UPDATE Department dep
      SET dep.Description = Description
      WHERE dep.Id = DepartmentId COLLATE utf8_unicode_ci;
    END IF;
  ELSE
    INSERT INTO Department (DepartmentName, Description, ClientId)
      VALUES (DepartmentName, Description, ClientId);
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportRatnerGLFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportRatnerGLFromScript`(IN GlCodeName nvarchar(1000),
IN SubAccount nvarchar(1000),
IN GlCodeDescription nvarchar(1000),
IN DepartmentName nvarchar(1000),
IN ActivityREQUIRED nvarchar(900),
IN ClientId int)
BEGIN
  DECLARE GlCodeId int;
  DECLARE DepId int;
  DECLARE activityReq tinyint;

  SET activityReq = 0;

  IF (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) IS NOT NULL THEN
    SET GlCodeId = (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) + 1;
  ELSE
    SET GlCodeId = 1;
  END IF;

  IF NOT EXISTS (SELECT
        *
      FROM GLCode glc
      WHERE LOWER(glc.GLCodeName) =
      LOWER(GlCodeName) COLLATE utf8_unicode_ci
      AND glc.ClientId = ClientId COLLATE utf8_unicode_ci) THEN
    IF (LOWER(ActivityREQUIRED) = 'y') THEN
      SET activityReq = 1;
    ELSE
      SET activityReq = 0;
    END IF;
    INSERT INTO GLCode (ClientId, GLCodeId, GLCodeName, Desccription, ActivityRequired, subaccount)
      VALUES (ClientId, GlCodeId, GlCodeName, GlCodeDescription, activityReq, SubAccount);
  ELSE
    SELECT
      GLCodeId INTO GlCodeId
    FROM GLCode glc
    WHERE LOWER(glc.GLCodeName)
    = LOWER(GlCodeName) COLLATE utf8_unicode_ci
    AND glc.ClientId = ClientId COLLATE utf8_unicode_ci;
  END IF;

  IF (DepartmentName IS NOT NULL) THEN
    IF (CHAR_LENGTH(DepartmentName) < 5
      AND DepartmentName NOT LIKE '%A-Za-z%') THEN
      IF (CHAR_LENGTH(DepartmentName) = 1) THEN
        SET DepartmentName = '0000' + DepartmentName;
      ELSEIF (CHAR_LENGTH(DepartmentName) = 2) THEN
        SET DepartmentName = '000' + DepartmentName;
      ELSEIF (CHAR_LENGTH(DepartmentName) = 3) THEN
        SET DepartmentName = '00' + DepartmentName;
      ELSEIF (CHAR_LENGTH(DepartmentName) = 4) THEN
        SET DepartmentName = '0' + DepartmentName;
      END IF;
    END IF;
  END IF;

  IF NOT EXISTS (SELECT
        *
      FROM Department dep
      WHERE dep.ClientId = ClientId COLLATE utf8_unicode_ci
      AND LOWER(dep.DepartmentName) = LOWER(DepartmentName) COLLATE utf8_unicode_ci) THEN
    INSERT INTO Department (DepartmentName, ClientId)
      VALUES (DepartmentName, ClientId);
  END IF;

  SELECT
    dep.Id INTO DepId
  FROM Department dep
  WHERE dep.ClientId = ClientId COLLATE utf8_unicode_ci
  AND LOWER(dep.DepartmentName) = LOWER(DepartmentName) COLLATE utf8_unicode_ci;

  IF NOT EXISTS (SELECT
        *
      FROM DepartmentGLCode
      WHERE DepartmentId = DepId
      AND GLCodeId = GlCodeId) THEN
    INSERT INTO DepartmentGLCode (DepartmentId, GLCodeId)
      VALUES (DepId, GlCodeId);
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportRatnerTaxFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportRatnerTaxFromScript`(IN TaxCode nvarchar(1000),
IN DepartmentName nvarchar(1000),
IN TaxRate nvarchar(900),
IN ClientId int)
BEGIN
  DECLARE DepartmentId int;
  SET DepartmentId = -1;
  IF (DepartmentName IS NOT NULL) THEN
    IF (CHAR_LENGTH(DepartmentName) < 5
      AND DepartmentName NOT LIKE '%[A-Za-z]%') THEN
      IF (CHAR_LENGTH(DepartmentName) = 1) THEN
        SET DepartmentName = '0000' + DepartmentName;
      ELSEIF (CHAR_LENGTH(DepartmentName) = 2) THEN
        SET DepartmentName = '000' + DepartmentName;
      ELSEIF (CHAR_LENGTH(DepartmentName) = 3) THEN
        SET DepartmentName = '00' + DepartmentName;
      ELSEIF (CHAR_LENGTH(DepartmentName) = 4) THEN
        SET DepartmentName = '0' + DepartmentName;
      END IF;
    END IF;
  END IF;

  IF NOT EXISTS (SELECT
        *
      FROM Department dep
      WHERE dep.ClientId = ClientId COLLATE utf8_unicode_ci
      AND LOWER(dep.DepartmentName) = LOWER(DepartmentName) COLLATE utf8_unicode_ci)
    AND DepartmentName IS NOT NULL THEN
    INSERT INTO Department (DepartmentName, ClientId)
      VALUES (DepartmentName, ClientId);
  END IF;

  SELECT
    dep.Id INTO DepartmentId
  FROM Department dep
  WHERE dep.ClientId = ClientId COLLATE utf8_unicode_ci
  AND LOWER(dep.DepartmentName) = LOWER(DepartmentName) COLLATE utf8_unicode_ci;

  IF (DepartmentId != -1
    AND TaxCode IS NOT NULL
    AND TaxRate IS NOT NULL) THEN
    IF NOT EXISTS (SELECT
          *
        FROM Tax tx
        WHERE tx.ClientId = ClientId COLLATE utf8_unicode_ci
        AND LOWER(tx.TaxCode) = LOWER(TaxCode) COLLATE utf8_unicode_ci
        AND tx.DepartmentId = DepartmentId COLLATE utf8_unicode_ci
        AND LOWER(tx.TaxRate) = LOWER(TaxRate) COLLATE utf8_unicode_ci) THEN
      INSERT INTO Tax (DepartmentId, TaxCode, TaxRate, ClientId)
        VALUES (DepartmentId, TaxCode, TaxRate, ClientId);
    END IF;
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportRatnerVendorFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportRatnerVendorFromScript`(IN VendorName nvarchar(1000),
IN VendorNo nvarchar(1000),
IN Add1 nvarchar(1000), IN AddDECLARE nvarchar(1000), IN Add3 nvarchar(1000), IN Add4 nvarchar(1000), IN Add5 nvarchar(1000),
IN State nvarchar(1000), IN Zip nvarchar(1000), IN Class nvarchar(1000), IN Location nvarchar(1000),
IN Remit nvarchar(1000), IN Discount nvarchar(1000), IN Net nvarchar(1000), IN NetDisper nvarchar(1000), IN DefaultGl nvarchar(1000),
IN AuthCode nvarchar(900), IN ClientId int)
BEGIN
  DECLARE OutputString nvarchar(1000);
  DECLARE c nvarchar(1000);
  DECLARE l int;
  DECLARE p int;
  DECLARE AddressId int;
  DECLARE StateIdId int;
  DECLARE LocId int;
  DECLARE NetD int;
  DECLARE DiscountD int;
  DECLARE NetDisperD float;
  DECLARE myVendorId int;


  SET StateIdId = NULL;
  SET NetD = NULL;
  SET DiscountD = NULL;
  SET NetDisperD = NULL;


  IF (Net IS NOT NULL
    AND Net != '') THEN
    SET NetD = Net;
  ELSE
    SET NetD = NULL;
  END IF;

  IF (Discount IS NOT NULL
    AND Discount != '') THEN
    SET DiscountD = Discount;
  ELSE
    SET DiscountD = NULL;
  END IF;

  IF (NetDisper IS NOT NULL
    AND NetDisper != '') THEN
    SET NetDisperD = NetDisper;
  ELSE
    SET NetDisperD = NULL;
  END IF;

  IF (VendorNo IS NOT NULL
    AND vendorName IS NOT NULL
    AND VendorNo NOT LIKE '%A-Za-z%') THEN
    IF NOT EXISTS (SELECT
          *
        FROM Vendor V
        WHERE V.ClientId = ClientId COLLATE utf8_unicode_ci
        AND LOWER(V.VendorNo) = LOWER(vendorNo) COLLATE utf8_unicode_ci) THEN
      IF (SELECT
            MAX(V.VendorId)
          FROM Vendor V) IS NOT NULL THEN
        SET myVendorId = (SELECT
            MAX(V.VendorId)
          FROM Vendor V) + 1;
      ELSE
        SET myVendorId = 1;
      END IF;
      INSERT INTO Vendor (ClientId, VendorId, VendorName, ContactPerson, AddressId
      , Telephone, Fax, Email, VendorNo, DefaultGlCodeId, UserId, TaxCode, AuthCode, DefaultAuthCode, First_Net_Days, Discount_Day_01, NetDisPer, IsActive)
        VALUES (ClientId, myVendorId, vendorName, NULL, NULL, NULL, NULL, NULL, vendorNo, NULL, NULL, NULL, AuthCode, DefaultGl, NetD, DiscountD, NetDisperD, 1);

      IF NOT EXISTS (SELECT
            *
          FROM Location loc
          WHERE loc.VendorId = vendorId COLLATE utf8_unicode_ci
          AND LOWER(loc.LocationCode) = LOWER(Location) COLLATE utf8_unicode_ci)
        AND (Location IS NOT NULL) THEN
        IF EXISTS (SELECT
              *
            FROM State st
            WHERE LOWER(st.StateNameShort) =
            LOWER(State) COLLATE utf8_unicode_ci
            OR LOWER(st.StateName) = LOWER(State) COLLATE utf8_unicode_ci)
          AND State IS NOT NULL THEN
          SELECT
            StateId INTO StateIdId
          FROM State st
          WHERE LOWER(st.StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
          OR LOWER(st.StateName) = LOWER(State) COLLATE utf8_unicode_ci;
        END IF;

        INSERT INTO Address (StateId, ZipCode, CityName, Address1, Address2, Address3, Address4)
          VALUES (StateIdId, Zip, Add5, Add1, AddDECLARE, Add3, Add4);

        INSERT INTO Location (VendorId, LocationCode, AddressId)
          VALUES (myVendorId, Location, AddressId);
      ELSEIF (Location IS NOT NULL) THEN
        SELECT
          Id INTO LocId
        FROM Location loc
        WHERE loc.VendorId = vendorId COLLATE utf8_unicode_ci
        AND LOWER(loc.LocationCode) = LOWER(Location) COLLATE utf8_unicode_ci;
        IF EXISTS (SELECT
              *
            FROM State st
            WHERE LOWER(st.StateNameShort) =
            LOWER(State) COLLATE utf8_unicode_ci
            OR LOWER(st.StateName) = LOWER(State) COLLATE utf8_unicode_ci)
          AND State IS NOT NULL THEN
          SELECT
            StateId INTO StateIdId
          FROM State st
          WHERE LOWER(st.StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
          OR LOWER(st.StateName) = LOWER(State) COLLATE utf8_unicode_ci;
        END IF;

        INSERT INTO Address (StateId, ZipCode, CityName, Address1, Address2, Address3, Address4)
          VALUES (StateIdId, Zip, Add5, Add1, AddDECLARE, Add3, Add4);

        UPDATE Location loc
        SET loc.AddressId = AddressId
        WHERE loc.Id = LocId COLLATE utf8_unicode_ci;
      ELSEIF (Location IS NULL) THEN
        IF EXISTS (SELECT
              *
            FROM State st
            WHERE LOWER(st.StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
            OR LOWER(st.StateName) = LOWER(State) COLLATE utf8_unicode_ci)
          AND State IS NOT NULL THEN
          SELECT
            StateId INTO StateIdId
          FROM State st
          WHERE LOWER(st.StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
          OR LOWER(st.StateName) = LOWER(State) COLLATE utf8_unicode_ci;
        END IF;

        INSERT INTO Address (StateId, ZipCode, CityName, Address1, Address2, Address3, Address4)
          VALUES (StateIdId, Zip, Add5, Add1, AddDECLARE, Add3, Add4);

        UPDATE Vendor v
        SET v.AddressId = AddressId
        WHERE v.VendorId = vendorId COLLATE utf8_unicode_ci;
      END IF;
    ELSE
      SET myVendorId = (SELECT
          VendorId
        FROM Vendor v
        WHERE v.ClientId = ClientId
        AND LOWER(v.VendorNo) = LOWER(VendorNo) COLLATE utf8_unicode_ci
        AND v.IsActive = 1);
      UPDATE Vendor v
      SET v.First_Net_Days = NetD,
          v.Discount_Day_01 = DiscountD,
          v.VendorName = VendorName,
          v.NetDisPer = NetDisperD,
          v.AuthCode = AuthCode,
          v.DefaultAuthCode = DefaultGl
      WHERE v.VendorId = myVendorId;
    END IF;
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportSelfGLFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportSelfGLFromScript`(IN Col1 nvarchar(250),
IN Col2 nvarchar(250),
IN Col3 nvarchar(250),
IN Col4 nvarchar(250),
IN Col5 nvarchar(250),
IN Col6 nvarchar(240),
IN Col7 nvarchar(250),
IN Col8 nvarchar(240))
BEGIN
  DECLARE GlCId int;
  DECLARE DepId int;
  DECLARE activityReq bit;
  DECLARE ClientId int;

  SET ClientId = 15;
  SET activityReq = 0;

  IF (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) IS NOT NULL THEN
    SET GlCId = (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) + 1;
  ELSE
    SET GlCId = 1;
  END IF;

  IF (Col1 != 'ACCT_CODE') THEN
    IF NOT EXISTS (SELECT
          *
        FROM GLCode glc
        WHERE RTRIM(LTRIM(LOWER(glc.GLCodeName)))
        = RTRIM(LTRIM(LOWER(Col1))) COLLATE utf8_unicode_ci
        AND glc.ClientId = ClientId) THEN
      IF (LOWER(Col8) = '1') THEN
        SET activityReq = 1;
      ELSE
        SET activityReq = 0;
      END IF;
      -- select GlCId;
      INSERT INTO GLCode (ClientId, GLCodeId, GLCodeName, Desccription, ActivityRequired)
        VALUES (ClientId, GlCId, RTRIM(LTRIM(Col1)), RTRIM(LTRIM(Col7)), activityReq);
    -- Select 'Inserting';
    ELSE
      -- Select 'Selecting';
      SELECT
        GLCodeId
      FROM GLCode glc
      WHERE RTRIM(LTRIM(LOWER(glc.GLCodeName))) = RTRIM(LTRIM(LOWER(Col1))) COLLATE utf8_unicode_ci
      AND glc.ClientId = ClientId INTO GlCId;

    END IF;

    IF NOT EXISTS (SELECT
          *
        FROM Department dep
        WHERE dep.ClientId = ClientId
        AND LOWER(RTRIM(LTRIM(dep.DepartmentName))) = LOWER(RTRIM(LTRIM((Col4)))) COLLATE utf8_unicode_ci) THEN
      INSERT INTO Department (ClientId, DepartmentName, Description)
        VALUES (ClientId, RTRIM(LTRIM(Col4)), RTRIM(LTRIM(Col5)));
    END IF;
    SELECT
      Id
    FROM Department dep
    WHERE dep.ClientId = ClientId
    AND LOWER(RTRIM(LTRIM(DepartmentName))) =
    LOWER(RTRIM(LTRIM(Col4))) COLLATE utf8_unicode_ci INTO DepId;
    IF NOT EXISTS (SELECT
          *
        FROM DepartmentGLCode dep
        WHERE dep.DepartmentId = DepId
        AND dep.GLCodeId = GlCId) THEN

      INSERT INTO DepartmentGLCode (DepartmentId, GLCodeId)
        VALUES (DepId, GlCId);
    END IF;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportSelfPOFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportSelfPOFromScript`(IN Col1 nvarchar(250),
IN Col2 nvarchar(250),
IN Col3 nvarchar(250),
IN PONumber nvarchar(250),
IN ExtAmount nvarchar(250),
IN Description nvarchar(250),
IN ItemNo nvarchar(250),
IN Col4 nvarchar(250),
IN Col5 nvarchar(250),
IN LineNo nvarchar(250),
IN Col6 nvarchar(250),
IN VendorCatNum nvarchar(250),
IN UnitOfMeasurement nvarchar(250),
IN Quantity nvarchar(250),
IN UnitPrice nvarchar(250),
IN Col7 nvarchar(250),
IN Col8 nvarchar(250),
IN VendorNum nvarchar(240),
IN Col9 nvarchar(250))
BEGIN
  DECLARE OutputString nvarchar(250);
  DECLARE c nvarchar(250);
  DECLARE l int;
  DECLARE p int;
  DECLARE MyVendorId int;
  DECLARE POId int;
  DECLARE ClientId int;

  SET ClientId = 15;
  IF (SELECT
        MAX(v.VendorId)
      FROM Vendor v) IS NOT NULL THEN
    SET MyVendorId = (SELECT
        MAX(v.VendorId)
      FROM Vendor v) + 1;
  ELSE
    SET MyVendorId = 1;
  END IF;

  IF (Col1 IS NOT NULL
    AND Col1 != 'PO_REC_TYPE') THEN


    IF NOT EXISTS (SELECT
          *
        FROM Vendor v
        WHERE v.ClientId = ClientId
        AND LTRIM(RTRIM(LOWER(v.VendorNo))) =
        LTRIM(RTRIM(LOWER(vendorNum))) COLLATE utf8_unicode_ci) THEN
      INSERT INTO Vendor (VendorId, ClientId, VendorName, VendorNo, IsActive)
        VALUES (MyVendorId, ClientId, LTRIM(RTRIM(VendorNum)), LTRIM(RTRIM(VendorNum)), 1);
    END IF;

    SELECT
      v.VendorId
    FROM Vendor v
    WHERE v.ClientId = ClientId
    AND LTRIM(RTRIM(LOWER(v.VendorNo))) = LTRIM(RTRIM(LOWER(vendorNum))) COLLATE utf8_unicode_ci LIMIT 1 INTO MyVendorId;

    IF (MyVendorId != -1) THEN
      IF NOT EXISTS (SELECT
            *
          FROM PO p
          WHERE p.ClientId = ClientId
          AND LTRIM(RTRIM(LOWER(p.PONumber))) =
          LTRIM(RTRIM(LOWER(PONumber)) COLLATE utf8_unicode_ci)
          AND LTRIM(RTRIM(LOWER(p.ItemNumber))) = LTRIM(RTRIM(LOWER(ItemNo))) COLLATE utf8_unicode_ci) THEN
        INSERT INTO PO (ClientId, VendorId, PONumber, VendorCatNumber, UnitOfPurchase,
        RcvdQty, UnitCost, ExtCost, ItemNumber, LineNo, Description)
          VALUES (ClientId, MyVendorId, RTRIM(LTRIM(PONumber)), VendorCatNum, UnitOfMeasurement, Quantity, UnitPrice, ExtAmount, ItemNo, RTRIM(LTRIM(LineNo)), Description);
      ELSE
        SELECT
          Id
        FROM PO p
        WHERE p.ClientId = ClientId
        AND LTRIM(RTRIM(LOWER(p.PONumber))) = LTRIM(RTRIM(LOWER(PONumber))) COLLATE utf8_unicode_ci
        AND LTRIM(RTRIM(LOWER(p.ItemNumber))) = LTRIM(RTRIM(LOWER(ItemNo))) COLLATE utf8_unicode_ci LIMIT 1 INTO POId;
        UPDATE PO p
        SET VendorId = MyVendorId,
            PONumber = RTRIM(LTRIM(PONumber)),
            VendorCatNumber = RTRIM(LTRIM(VendorCatNum)),
            UnitOfPurchase = UnitOfMeasurement,
            RcvdQty = Quantity,
            UnitCost = UnitPrice,
            ExtCost = ExtAmount,
            ItemNumber = ItemNo,
            LineNo = RTRIM(LTRIM(LineNo)),
            Description = RTRIM(LTRIM(Description))
        WHERE p.Id = POId;
      END IF;

      SELECT
        Id
      FROM PO p
      WHERE p.ClientId = ClientId
      AND LTRIM(RTRIM(LOWER(p.PONumber))) = LTRIM(RTRIM(LOWER(PONumber))) COLLATE utf8_unicode_ci
      AND LTRIM(RTRIM(LOWER(p.LineNo))) = LTRIM(RTRIM(LOWER(LineNo))) COLLATE utf8_unicode_ci LIMIT 1 INTO POId;
      UPDATE PO p
      SET p.ExtCost = (UnitCost * RcvdQty)
      WHERE p.Id = POId;
    END IF;
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportSelfstagingfromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportSelfstagingfromScript`(IN Col1 nvarchar(250),
IN Col2 nvarchar(250),
IN Col3 nvarchar(250),
IN PONumber nvarchar(250),
IN ExtAmount nvarchar(250),
IN Description nvarchar(250),
IN ItemNo nvarchar(250),
IN Col4 nvarchar(250),
IN Col5 nvarchar(250),
IN LineNo nvarchar(250),
IN Col6 nvarchar(250),
IN VendorCatNum nvarchar(250),
IN UnitOfMeasurement nvarchar(250),
IN Quantity nvarchar(250),
IN UnitPrice nvarchar(250),
IN Col7 nvarchar(250),
IN Col8 nvarchar(250),
IN VendorNum nvarchar(240),
IN Col9 nvarchar(250))
BEGIN
  DECLARE OutputString nvarchar(250);
  DECLARE c nvarchar(250);
  DECLARE l int;
  DECLARE p int;
  DECLARE MyVendorId int;
  DECLARE POId int;
  DECLARE ClientId int;

  SET ClientId = 166;
  IF (SELECT
        MAX(v.VendorId)
      FROM Vendor v) IS NOT NULL THEN
    SET MyVendorId = (SELECT
        MAX(v.VendorId)
      FROM Vendor v) + 1;
  ELSE
    SET MyVendorId = 1;
  END IF;

  IF (Col1 IS NOT NULL
    AND Col1 != 'PO_REC_TYPE') THEN


    IF NOT EXISTS (SELECT
          *
        FROM Vendor v
        WHERE v.ClientId = ClientId
        AND LTRIM(RTRIM(LOWER(v.VendorNo))) =
        LTRIM(RTRIM(LOWER(vendorNum))) COLLATE utf8_unicode_ci) THEN
      INSERT INTO Vendor (VendorId, ClientId, VendorName, VendorNo, IsActive)
        VALUES (MyVendorId, ClientId, LTRIM(RTRIM(VendorNum)), LTRIM(RTRIM(VendorNum)), 1);
    END IF;

    SELECT
      v.VendorId
    FROM Vendor v
    WHERE v.ClientId = ClientId
    AND LTRIM(RTRIM(LOWER(v.VendorNo))) = LTRIM(RTRIM(LOWER(vendorNum))) COLLATE utf8_unicode_ci LIMIT 1 INTO MyVendorId;

    IF (MyVendorId != -1) THEN
      IF NOT EXISTS (SELECT
            *
          FROM PO p
          WHERE p.ClientId = ClientId
          AND LTRIM(RTRIM(LOWER(p.PONumber))) =
          LTRIM(RTRIM(LOWER(PONumber)) COLLATE utf8_unicode_ci)
          AND LTRIM(RTRIM(LOWER(p.ItemNumber))) = LTRIM(RTRIM(LOWER(ItemNo))) COLLATE utf8_unicode_ci) THEN
        INSERT INTO PO (ClientId, VendorId, PONumber, VendorCatNumber, UnitOfPurchase,
        RcvdQty, UnitCost, ExtCost, ItemNumber, LineNo, Description)
          VALUES (ClientId, MyVendorId, RTRIM(LTRIM(PONumber)), VendorCatNum, UnitOfMeasurement, Quantity, UnitPrice, ExtAmount, ItemNo, RTRIM(LTRIM(LineNo)), Description);
      ELSE
        SELECT
          Id
        FROM PO p
        WHERE p.ClientId = ClientId
        AND LTRIM(RTRIM(LOWER(p.PONumber))) = LTRIM(RTRIM(LOWER(PONumber))) COLLATE utf8_unicode_ci
        AND LTRIM(RTRIM(LOWER(p.ItemNumber))) = LTRIM(RTRIM(LOWER(ItemNo))) COLLATE utf8_unicode_ci LIMIT 1 INTO POId;
        UPDATE PO p
        SET VendorId = MyVendorId,
            PONumber = RTRIM(LTRIM(PONumber)),
            VendorCatNumber = RTRIM(LTRIM(VendorCatNum)),
            UnitOfPurchase = UnitOfMeasurement,
            RcvdQty = Quantity,
            UnitCost = UnitPrice,
            ExtCost = ExtAmount,
            ItemNumber = ItemNo,
            LineNo = RTRIM(LTRIM(LineNo)),
            Description = RTRIM(LTRIM(Description))
        WHERE p.Id = POId;
      END IF;

      SELECT
        Id
      FROM PO p
      WHERE p.ClientId = ClientId
      AND LTRIM(RTRIM(LOWER(p.PONumber))) = LTRIM(RTRIM(LOWER(PONumber))) COLLATE utf8_unicode_ci
      AND LTRIM(RTRIM(LOWER(p.LineNo))) = LTRIM(RTRIM(LOWER(LineNo))) COLLATE utf8_unicode_ci LIMIT 1 INTO POId;
      UPDATE PO p
      SET p.ExtCost = (UnitCost * RcvdQty)
      WHERE p.Id = POId;
    END IF;
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportSelfVendorFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportSelfVendorFromScript`(IN VendorName nvarchar(250),
IN VendorNo nvarchar(250),
IN Discount nvarchar(250), IN Net nvarchar(250), IN NetDisper nvarchar(250),
IN Col nvarchar(250), IN Address1 nvarchar(250), IN Address2 nvarchar(250),
IN Address3 nvarchar(250), IN City nvarchar(250), IN State nvarchar(250),
IN ZCode nvarchar(250))
BEGIN
  DECLARE OutputString nvarchar(250);
  DECLARE c nvarchar(250);
  DECLARE l int;
  DECLARE p int;
  DECLARE MyVendorId int;
  DECLARE MyAddressId int;
  DECLARE MyClientId int;
  DECLARE AddressId int;
  DECLARE StateIdId int;

  SET StateIdId = NULL;
  SET MyClientId = 15;
  -- select VendorName;
  IF (SELECT
        MAX(v.VendorId)
      FROM Vendor v) IS NOT NULL THEN
    SET MyVendorId = (SELECT
        MAX(v.VendorId)
      FROM Vendor v) + 1;
  ELSE
    SET MyVendorId = 1;
  END IF;

  IF (SELECT
        MAX(adr.AddressId)
      FROM Address adr) IS NOT NULL THEN
    SET AddressId = (SELECT
        MAX(adr.AddressId)
      FROM Address adr) + 1;
  ELSE
    SET AddressId = 1;
  END IF;
  -- select VendorName;  
  IF (VendorName != 'NAME') THEN
    IF NOT EXISTS (SELECT
          *
        FROM Vendor v
        WHERE v.ClientId = MyClientId
        AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci)
      AND (vendorName IS NOT NULL
      AND VendorNo IS NOT NULL) THEN
      --  select 'Adding vendor';
      IF EXISTS (SELECT
            *
          FROM State st
          WHERE LOWER(st.StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
          OR LOWER(st.StateName) = LOWER(State) COLLATE utf8_unicode_ci)
        AND State IS NOT NULL THEN
        SELECT
          StateId
        FROM State st
        WHERE LOWER(st.StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
        OR LOWER(st.StateName) = LOWER(State) COLLATE utf8_unicode_ci LIMIT 1 INTO StateIdId;
      END IF;
      -- select StateIdId;            
      INSERT INTO Address (StateId, ZipCode, Address1, Address2, Address3, CityName)
        VALUES (StateIdId, ZCode, Address1, Address2, Address3, City);

      INSERT INTO Vendor (ClientId, VendorId, VendorName, ContactPerson, AddressId
      , Telephone, Fax, Email, VendorNo, DefaultGlCodeId, UserId, TaxCode, AuthCode,
      DefaultAuthCode, First_Net_Days, Discount_Day_01, NetDisPer, AccountCode, IsActive)
        VALUES (MyClientId, MyVendorId, RTRIM(LTRIM(vendorName)), NULL, AddressId, NULL, NULL, NULL, RTRIM(LTRIM(vendorNo)), NULL, NULL, NULL, NULL, NULL, Net, Discount, NetDisper, 'OPER_CK', 1);

    ELSE
      -- select VendorName;
      SELECT
        VendorId,
        AddressId
      FROM Vendor v
      WHERE v.ClientId = MyClientId
      AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci LIMIT 1 INTO MyVendorId, MyAddressId;

      IF EXISTS (SELECT
            *
          FROM State st
          WHERE LOWER(st.StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
          OR LOWER(st.StateName) = LOWER(State) COLLATE utf8_unicode_ci)
        AND State IS NOT NULL THEN
        SELECT
          StateId
        FROM State st
        WHERE LOWER(st.StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
        OR LOWER(st.StateName) = LOWER(State) COLLATE utf8_unicode_ci LIMIT 1 INTO StateIdId;
      END IF;

      IF MyAddressId IS NULL THEN
        INSERT INTO Address (StateId, ZipCode, Address1, Address2, Address3, CityName)
          VALUES (StateIdId, ZCode, Address1, Address2, Address3, City);

        UPDATE Vendor v
        SET v.AddressId = AddressId,
            v.VendorName = RTRIM(LTRIM(VendorName)),
            IsActive = 1
        WHERE v.VendorId = MyVendorId;

      ELSE
        UPDATE Address A
        SET A.StateId = StateIdId,
            A.ZipCode = ZCode,
            A.Address1 = Address1,
            A.Address2 = Address2,
            A.Address3 = Address3,
            A.CityName = City
        WHERE A.AddressId = MyAddressId;

        UPDATE Vendor v
        SET v.VendorName = RTRIM(LTRIM(VendorName)),
            IsActive = 1
        WHERE v.VendorId = MyVendorId;

      END IF;

    END IF;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `importSimpleVendorFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `importSimpleVendorFromScript`(IN vendorNo nvarchar(50),
IN vendorName nvarchar(250),
IN MyClientId int)
BEGIN
  DECLARE maxVendordId int;
  IF (SELECT
        MAX(v.VendorId)
      FROM Vendor v) IS NOT NULL THEN
    SET maxVendordId = (SELECT
        MAX(v.VendorId)
      FROM Vendor v) + 1;
  ELSE
    SET maxVendordId = 1;
  END IF;
  IF NOT EXISTS (SELECT
        *
      FROM Vendor v
      WHERE v.ClientId = MyClientId
      AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci) THEN
    INSERT INTO Vendor (VendorId, ClientId, VendorNo, VendorName, isactive)
      VALUES (maxVendordId, MyClientId, RTRIM(LTRIM(vendorNo)), RTRIM(LTRIM(vendorName)), 1);
  ELSEIF ((vendorName IS NOT NULL
    AND VendorNo IS NOT NULL)) THEN
    SELECT
      VendorId
    FROM Vendor v
    WHERE v.ClientId = MyClientId
    AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci
    LIMIT 1 INTO maxVendordId;
    UPDATE Vendor
    SET `VendorName` = vendorName,
        IsActive = 1
    WHERE VendorID = maxVendordId;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportUser` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportUser`(IN userFirstName nvarchar(240),
IN userLastName nvarchar(240),
IN userEmail nvarchar(240),
IN userID nvarchar(240),
IN userRole int,
IN userClientId int)
BEGIN
  IF NOT EXISTS (SELECT
        *
      FROM `User`
      WHERE ClientId = userClientId
      AND Email = userEmail COLLATE utf8_unicode_ci) THEN
    INSERT INTO `User` (ClientId, UserId, UserName, RoleId, FirstName, LastName, Email, IsActive)
      VALUES (userClientId, userID, userEmail, userRole, userFirstName, userLastName, userEmail, TRUE);
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportVendorFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportVendorFromScript`(IN vendorNo nvarchar(50),
IN vendorName nvarchar(250),
IN col1 nvarchar(50), -- Discount Day
IN col2 nvarchar(50), -- First net day
IN col3 nvarchar(50), -- Net Percentage
IN col4 nvarchar(50), -- Account Code
IN DefaultGL nvarchar(250),
IN MyClientId int)
BEGIN
  DECLARE maxVendordId int;
  DECLARE MyGlCodeId int;
  DECLARE OutputString nvarchar(250);
  DECLARE c nvarchar(250);
  DECLARE l int;
  DECLARE p int;

  IF (SELECT
        MAX(v.VendorId)
      FROM Vendor v) IS NOT NULL THEN
    SET maxVendordId = (SELECT
        MAX(v.VendorId)
      FROM Vendor v) + 1;
  ELSE
    SET maxVendordId = 1;
  END IF;

  IF (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) IS NOT NULL THEN
    SET MyGlCodeId = (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) + 1;
  ELSE
    SET MyGlCodeId = 1;
  END IF;

  -- select maxVendordId,MyClientId,RTRim(LTRIM(vendorNo)),RTRim(LTRIM(vendorName)),RTRim(LTRIM(col2)),RTRim(LTRIM(col1)),RTRim(LTRIM(col3)),MyGlCodeId,1;

  IF NOT EXISTS (SELECT
        *
      FROM Vendor v
      WHERE v.ClientId = MyClientId
      AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci) THEN
    IF NOT EXISTS (SELECT
          *
        FROM GLCode glc
        WHERE glc.ClientId = MyClientId
        AND RTRIM(LTRIM(LOWER(glc.GLCodeName))) = RTRIM(LTRIM(LOWER(DefaultGL))) COLLATE utf8_unicode_ci)
      AND DefaultGL IS NOT NULL THEN
      INSERT INTO GLCode (ClientId, GLCodeId, GLCodeName, Desccription)
        VALUES (MyClientId, MyGlCodeId, RTRIM(LTRIM(DefaultGL)), '');
    ELSEIF (DefaultGL IS NOT NULL) THEN
      SELECT
        GLCodeId
      FROM GLCode glc
      WHERE glc.ClientId = MyClientId
      AND RTRIM(LTRIM(LOWER(glc.GLCodeName))) =
      RTRIM(LTRIM(LOWER(DefaultGL))) COLLATE utf8_unicode_ci LIMIT 1 INTO MyGlCodeId;
      -- update the GL code to active if it is not active
      UPDATE GLCode glc
      SET IsActive = 1
      WHERE glc.GLCodeId = MyGlCodeId
      AND glc.ClientId = MyClientId;
    ELSE
      SET MyGlCodeId = NULL;
    END IF;


    INSERT INTO Vendor (VendorId, ClientId, VendorNo, VendorName, First_Net_Days, Discount_Day_01, NetDisPer, DefaultGlCodeId, isactive, AccountCode)
      VALUES (maxVendordId, MyClientId, RTRIM(LTRIM(vendorNo)), RTRIM(LTRIM(vendorName)), RTRIM(LTRIM(col2)), RTRIM(LTRIM(col1)), RTRIM(LTRIM(col3)), MyGlCodeId, 1, RTRIM(LTRIM(col4)));
  ELSEIF ((vendorName IS NOT NULL
    AND VendorNo IS NOT NULL)) THEN
    SELECT
      'Found vendor';
    SELECT
      VendorId
    FROM Vendor v
    WHERE v.ClientId = MyClientId
    AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci
    -- and RTrim(LTrim(Lower(v.VendorName)))=RTrim(LTrim(Lower(vendorName))) COLLATE utf8_unicode_ci
    LIMIT 1 INTO maxVendordId;
    IF NOT EXISTS (SELECT
          *
        FROM GLCode glc
        WHERE glc.ClientId = MyClientId
        AND RTRIM(LTRIM(LOWER(glc.GLCodeName))) = RTRIM(LTRIM(LOWER(DefaultGL))) COLLATE utf8_unicode_ci)
      AND DefaultGL IS NOT NULL
      AND DefaultGL <> '' THEN
      SELECT
        'Inserting new GL ' + MyGlCodeId;
      INSERT INTO GLCode (ClientId, GLCodeId, GLCodeName, Desccription)
        VALUES (ClientId, MyGlCodeId, RTRIM(LTRIM(DefaultGL)), '');
    ELSEIF (DefaultGL IS NOT NULL
      AND DefaultGL <> '') THEN
      SELECT
        'Found GL Code ' + DefaultGL;
      SELECT
        GLCodeId
      FROM GLCode glc
      WHERE glc.ClientId = MyClientId
      AND RTRIM(LTRIM(LOWER(glc.GLCodeName))) =
      RTRIM(LTRIM(LOWER(DefaultGL))) COLLATE utf8_unicode_ci LIMIT 1 INTO MyGlCodeId;
      SELECT
        'The GLCodeID to be used is ' + MyGlCodeId;
      -- update the GL code to active if it is not active
      UPDATE GLCode glc
      SET IsActive = 1
      WHERE glc.GLCodeId = MyGlCodeId
      AND glc.ClientId = MyClientId;
    -- select 'Found existing GL ' + MyGlCodeId;
    ELSE
      SET MyGlCodeId = NULL;
    END IF;
    -- select 'Updating existing vendor with GL code id ' + MyGlCodeId;
    UPDATE Vendor
    SET First_Net_Days = col2,
        Discount_Day_01 = col1,
        NetDisPer = col3,
        DefaultGlCodeId = MyGlCodeId,
        AccountCode = col4,
        `VendorName` = vendorName,
        IsActive = 1
    WHERE VendorID = maxVendordId;

  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportVendorFromScriptSage` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportVendorFromScriptSage`(IN vendorNo nvarchar(50),
IN vendorName nvarchar(250),
IN col1 nvarchar(50),
IN col2 nvarchar(50),
IN col3 nvarchar(50),
IN col4 nvarchar(50),
IN DefaultGL nvarchar(250),
IN MyClientId int)
BEGIN
  DECLARE maxVendordId int;
  DECLARE MyGlCodeId int;
  DECLARE OutputString nvarchar(250);
  DECLARE c nvarchar(250);
  DECLARE l int;
  DECLARE p int;

  IF (SELECT
        MAX(v.VendorId)
      FROM Vendor v) IS NOT NULL THEN
    SET maxVendordId = (SELECT
        MAX(v.VendorId)
      FROM Vendor v) + 1;
  ELSE
    SET maxVendordId = 1;
  END IF;

  IF (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) IS NOT NULL THEN
    SET MyGlCodeId = (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) + 1;
  ELSE
    SET MyGlCodeId = 1;
  END IF;

  -- select maxVendordId,MyClientId,RTRim(LTRIM(vendorNo)),RTRim(LTRIM(vendorName)),RTRim(LTRIM(col2)),RTRim(LTRIM(col1)),RTRim(LTRIM(col3)),MyGlCodeId,1;

  IF NOT EXISTS (SELECT
        *
      FROM Vendor v
      WHERE v.ClientId = MyClientId
      AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci) THEN
    IF NOT EXISTS (SELECT
          *
        FROM GLCode glc
        WHERE glc.ClientId = MyClientId
        AND RTRIM(LTRIM(LOWER(glc.GLCodeName))) = RTRIM(LTRIM(LOWER(DefaultGL))) COLLATE utf8_unicode_ci)
      AND DefaultGL IS NOT NULL THEN
      INSERT INTO GLCode (ClientId, GLCodeId, GLCodeName, Desccription)
        VALUES (MyClientId, MyGlCodeId, RTRIM(LTRIM(DefaultGL)), '');
    ELSEIF (DefaultGL IS NOT NULL) THEN
      SELECT
        GLCodeId
      FROM GLCode glc
      WHERE glc.ClientId = MyClientId
      AND RTRIM(LTRIM(LOWER(glc.GLCodeName))) =
      RTRIM(LTRIM(LOWER(DefaultGL))) COLLATE utf8_unicode_ci LIMIT 1 INTO MyGlCodeId;
      -- update the GL code to active if it is not active
      UPDATE GLCode glc
      SET IsActive = 1
      WHERE glc.GLCodeId = MyGlCodeId
      AND glc.ClientId = MyClientId;
    ELSE
      SET MyGlCodeId = NULL;
    END IF;


    INSERT INTO Vendor (VendorId, ClientId, VendorNo, VendorName, First_Net_Days, Discount_Day_01, NetDisPer, DefaultGlCodeId, isactive, AccountCode)
      VALUES (maxVendordId, MyClientId, RTRIM(LTRIM(vendorNo)), RTRIM(LTRIM(vendorName)), RTRIM(LTRIM(col2)), RTRIM(LTRIM(col1)), RTRIM(LTRIM(col3)), MyGlCodeId, 1, RTRIM(LTRIM(col4)));
  ELSEIF ((vendorName IS NOT NULL
    AND VendorNo IS NOT NULL)) THEN
    SELECT
      'Found vendor';
    SELECT
      VendorId
    FROM Vendor v
    WHERE v.ClientId = MyClientId
    AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci
    -- and RTrim(LTrim(Lower(v.VendorName)))=RTrim(LTrim(Lower(vendorName))) COLLATE utf8_unicode_ci
    LIMIT 1 INTO maxVendordId;
    IF NOT EXISTS (SELECT
          *
        FROM GLCode glc
        WHERE glc.ClientId = MyClientId
        AND RTRIM(LTRIM(LOWER(glc.GLCodeName))) = RTRIM(LTRIM(LOWER(DefaultGL))) COLLATE utf8_unicode_ci)
      AND DefaultGL IS NOT NULL
      AND DefaultGL <> '' THEN
      SELECT
        'Inserting new GL ' + MyGlCodeId;
      INSERT INTO GLCode (ClientId, GLCodeId, GLCodeName, Desccription)
        VALUES (ClientId, MyGlCodeId, RTRIM(LTRIM(DefaultGL)), '');
    ELSEIF (DefaultGL IS NOT NULL
      AND DefaultGL <> '') THEN
      SELECT
        'Found GL Code ' + DefaultGL;
      SELECT
        GLCodeId
      FROM GLCode glc
      WHERE glc.ClientId = MyClientId
      AND RTRIM(LTRIM(LOWER(glc.GLCodeName))) =
      RTRIM(LTRIM(LOWER(DefaultGL))) COLLATE utf8_unicode_ci LIMIT 1 INTO MyGlCodeId;
      SELECT
        'The GLCodeID to be used is ' + MyGlCodeId;
      -- update the GL code to active if it is not active
      UPDATE GLCode glc
      SET IsActive = 1
      WHERE glc.GLCodeId = MyGlCodeId
      AND glc.ClientId = MyClientId;
    -- select 'Found existing GL ' + MyGlCodeId;
    ELSE
      SET MyGlCodeId = NULL;
    END IF;
    -- select 'Updating existing vendor with GL code id ' + MyGlCodeId;
    UPDATE Vendor
    SET First_Net_Days = col2,
        Discount_Day_01 = col1,
        NetDisPer = col3,
        DefaultGlCodeId = MyGlCodeId,
        AccountCode = col4,
        `VendorName` = vendorName,
        IsActive = 1
    WHERE VendorID = maxVendordId;

  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportVendorWithDepartmentFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportVendorWithDepartmentFromScript`(IN ClientId int,
IN vendorName nvarchar(1000),
IN vendorNo nvarchar(1000),
IN vendorDefaultGL nvarchar(50),
IN clientVendorID nvarchar(1000),-- ClientVendorID of Dep
IN vendorSiteCode nvarchar(250),-- DepartmentName
IN depDescription nvarchar(1000),-- Description of Dep
IN Address1 nvarchar(1000),
IN Address2 nvarchar(1000),
IN Address3 nvarchar(1000),
IN City nvarchar(1000),
IN State nvarchar(1000),
IN ZipCode nvarchar(1000),
IN country nvarchar(1000),
IN DueDays int,
IN DiscDays int,
IN DiscPerc float)
BEGIN
  DECLARE maxVendordId int;
  DECLARE VendordSiteId int;
  DECLARE AddressId int;
  DECLARE StateIdId int;
  DECLARE MyGlCodeId int;

  SET StateIdId = NULL;
  SET VendordSiteId = NULL;
  SET MyGlCodeId = NULL;

  IF (SELECT
        MAX(v.VendorId)
      FROM Vendor v) IS NOT NULL THEN
    SET maxVendordId = (SELECT
        MAX(v.VendorId)
      FROM Vendor v) + 1;
  ELSE
    SET maxVendordId = 1;
  END IF;

  IF (SELECT
        MAX(adr.AddressId)
      FROM Address adr) IS NOT NULL THEN
    SET AddressId = (SELECT
        MAX(adr.AddressId)
      FROM Address adr) + 1;
  ELSE
    SET AddressId = 1;
  END IF;
  SELECT
    AddressId;
  -- Get the default GL Code ID
  IF (vendorDefaultGL <> '') THEN
    SELECT
      GLCodeId
    FROM GLCode glc
    WHERE glc.ClientId = ClientId
    AND RTRIM(LTRIM(LOWER(glc.GLCodeName))) =
    RTRIM(LTRIM(LOWER(vendorDefaultGL))) COLLATE utf8_unicode_ci LIMIT 1 INTO MyGlCodeId;
  END IF;

  IF (vendorName != 'VENDOR_NAME') THEN
    IF NOT EXISTS (SELECT
          *
        FROM Vendor v
        WHERE v.ClientId = ClientId
        AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci)
      AND (vendorName IS NOT NULL
      AND vendorNo IS NOT NULL) THEN
      INSERT INTO Vendor (VendorId, ClientId, VendorNo, VendorName, First_Net_Days, Discount_Day_01, NetDisPer, DefaultGlCodeId, isactive)
        VALUES (maxVendordId, ClientId, RTRIM(LTRIM(vendorNo)), RTRIM(LTRIM(vendorName)), DueDays, DiscDays, DiscPerc, MyGlCodeId, 1);
    ELSE
      SELECT
        VendorId INTO maxVendordId
      FROM Vendor v
      WHERE v.ClientId = ClientId
      AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci;

      UPDATE Vendor
      SET VendorName = RTRIM(LTRIM(vendorName)),
          DefaultGlCodeId = MyGlCodeId,
          IsActive = 1,
          First_Net_Days = DueDays,
          Discount_Day_01 = DiscDays,
          NetDisPer = DiscPerc
      WHERE VendorId = maxVendordId;

    END IF;

    IF (vendorSiteCode != 'null') THEN
      -- select 'About to do location';
      IF NOT EXISTS (SELECT
            *
          FROM Department dep
          WHERE dep.ClientId = ClientId
          AND dep.VendorId = maxVendordId
          AND RTRIM(LTRIM(LOWER(dep.DepartmentName))) = RTRIM(LTRIM(LOWER(vendorSiteCode))) COLLATE utf8_unicode_ci)
        AND (vendorSiteCode IS NOT NULL) THEN
        IF EXISTS (SELECT
              *
            FROM State
            WHERE LOWER(StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
            OR LOWER(StateName) = LOWER(State) COLLATE utf8_unicode_ci)
          AND State IS NOT NULL THEN
          -- select 'checking stat';
          SELECT
            StateId INTO StateIdId
          FROM State
          WHERE LOWER(StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
          OR LOWER(StateName) = LOWER(State) COLLATE utf8_unicode_ci LIMIT 1;
          INSERT INTO Address (StateId, ZipCode, Address1, Address2, Address3, CityName)
            VALUES (StateIdId, ZipCode, Address1, Address2, Address3, City);
        END IF;
        IF (StateIdId IS NOT NULL) THEN
          INSERT INTO Department (VendorId, ClientId, Description, DepartmentName, AddressId, IsActive)
            VALUES (maxVendordId, ClientId, RTRIM(LTRIM(depDescription)), RTRIM(LTRIM(vendorSiteCode)), AddressId, 1);
        END IF;
      ELSE
        SELECT
          Id INTO VendordSiteId
        FROM Department dep
        WHERE dep.ClientId = ClientId
        AND VendorId = maxVendordId
        AND RTRIM(LTRIM(LOWER(DepartmentName))) = RTRIM(LTRIM(LOWER(vendorSiteCode))) COLLATE utf8_unicode_ci;

        UPDATE Department
        SET Description = RTRIM(LTRIM(depDescription)),
            IsActive = 1
        WHERE Id = VendordSiteId;
      END IF;
    END IF;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ImportVendorWithLocationsFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ImportVendorWithLocationsFromScript`(IN ClientId int,
IN vendorName nvarchar(100),
IN vendorNo nvarchar(20),
IN vendorDefaultGL nvarchar(50),
IN vendorSiteCode nvarchar(50),
IN vendorSiteName nvarchar(250),
IN Address1 nvarchar(100),
IN Address2 nvarchar(100),
IN Address3 nvarchar(100),
IN City nvarchar(50),
IN State nvarchar(20),
IN ZipCode nvarchar(20),
IN Country nvarchar(50),
IN DueDays int,
IN DiscDays int,
IN DiscPerc float)
BEGIN
  DECLARE maxVendordId int;
  DECLARE VendordSiteId int;
  DECLARE AddressId int;
  DECLARE StateIdId int;
  DECLARE MyGlCodeId int;

  SET StateIdId = NULL;
  SET VendordSiteId = NULL;
  SET MyGlCodeId = NULL;

  IF (SELECT
        MAX(v.VendorId)
      FROM Vendor v) IS NOT NULL THEN
    SET maxVendordId = (SELECT
        MAX(v.VendorId)
      FROM Vendor v) + 1;
  ELSE
    SET maxVendordId = 1;
  END IF;

  IF (SELECT
        MAX(adr.AddressId)
      FROM Address adr) IS NOT NULL THEN
    SET AddressId = (SELECT
        MAX(adr.AddressId)
      FROM Address adr) + 1;
  ELSE
    SET AddressId = 1;
  END IF;

  -- Get the default GL Code ID
  IF (vendorDefaultGL <> '') THEN
    SELECT
      GLCodeId
    FROM GLCode glc
    WHERE glc.ClientId = ClientId
    AND RTRIM(LTRIM(LOWER(glc.GLCodeName))) =
    RTRIM(LTRIM(LOWER(vendorDefaultGL))) COLLATE utf8_unicode_ci LIMIT 1 INTO MyGlCodeId;
  END IF;

  IF (vendorName != 'VENDOR_NAME') THEN
    IF NOT EXISTS (SELECT
          *
        FROM Vendor v
        WHERE v.ClientId = ClientId
        AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci)
      AND (vendorName IS NOT NULL
      AND vendorNo IS NOT NULL) THEN
      INSERT INTO Vendor (VendorId, ClientId, VendorNo, VendorName, First_Net_Days, Discount_Day_01, NetDisPer, DefaultGlCodeId, isactive)
        VALUES (maxVendordId, ClientId, RTRIM(LTRIM(vendorNo)), RTRIM(LTRIM(vendorName)), DueDays, DiscDays, DiscPerc, MyGlCodeId, 1);
    ELSE
      SELECT
        VendorId INTO maxVendordId
      FROM Vendor v
      WHERE v.ClientId = ClientId
      AND RTRIM(LTRIM(LOWER(v.VendorNo))) = RTRIM(LTRIM(LOWER(vendorNo))) COLLATE utf8_unicode_ci;
      UPDATE Vendor
      SET VendorName = RTRIM(LTRIM(vendorName)),
          DefaultGlCodeId = MyGlCodeId,
          IsActive = 1,
          First_Net_Days = DueDays,
          Discount_Day_01 = DiscDays,
          NetDisPer = DiscPerc
      WHERE VendorId = maxVendordId;
    END IF;

    -- Check if the Vendor Location exists and add or update
    IF NOT EXISTS (SELECT
          *
        FROM VendorLocation vl
        WHERE vl.VendorId = maxVendordId
        AND RTRIM(LTRIM(LOWER(vl.LocationNumber))) = RTRIM(LTRIM(LOWER(vendorSiteCode))) COLLATE utf8_unicode_ci)
      AND (vendorSiteCode IS NOT NULL) THEN
      -- Get the State code and insert the address and vendorLocation
      IF EXISTS (SELECT
            *
          FROM State
          WHERE LOWER(StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
          OR LOWER(StateName) = LOWER(State) COLLATE utf8_unicode_ci)
        AND State IS NOT NULL THEN
        SELECT
          StateId INTO StateIdId
        FROM State
        WHERE LOWER(StateNameShort) = LOWER(State) COLLATE utf8_unicode_ci
        OR LOWER(StateName) = LOWER(State) COLLATE utf8_unicode_ci LIMIT 1;
        INSERT INTO Address (StateId, ZipCode, Address1, Address2, Address3, CityName, Country)
          VALUES (StateIdId, ZipCode, Address1, Address2, Address3, City, Country);

        INSERT INTO VendorLocation (VendorId, LocationNumber, LocationName, AddressId)
          VALUES (maxVendordId, vendorSiteCode, vendorSiteName, AddressId);
      END IF;
    ELSE
      SELECT
        VendorLocationId INTO VendordSiteId
      FROM VendorLocation vl
      WHERE vl.VendorId = maxVendordId
      AND RTRIM(LTRIM(LOWER(vl.LocationNumber))) = RTRIM(LTRIM(LOWER(vendorSiteCode))) COLLATE utf8_unicode_ci;

      UPDATE VendorLocation
      SET LocationName = Address1
      WHERE VendorLocationId = VendordSiteId;
    END IF;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InsertBacklogGL` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `InsertBacklogGL`(IN InvoiceID int,
IN ClientID int,
IN GLCode nvarchar(50),
IN GLAmount decimal)
BEGIN
  DECLARE GLID int;
  SELECT
    glc.GLCodeId INTO GLID
  FROM GLCode glc
  WHERE glc.GLCodeName = GLCode
  AND glc.ClientId = ClientID;

  IF GLID IS NULL THEN
    SET GLID = (SELECT
        MAX(glc.GLCodeId)
      FROM GLCode glc) + 1;
    INSERT INTO GLCode (GLCodeId, ClientId, GLCodeName, Desccription)
      VALUES (GLID, ClientID, GLCode, GLCode);
  END IF;

  IF GLID IS NOT NULL THEN
    INSERT INTO InvoiceGLCode (InvoiceId, GLCodeId, GLAmount)
      VALUES (InvoiceID, GLID, GLAmount);
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InsertBatch` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `InsertBatch`(IN BatchName nvarchar(255),
IN ClientID int,
IN BatchType nvarchar(50),
IN CreatedDate datetime,
IN BSource nvarchar(50))
BEGIN
  IF EXISTS (SELECT
        'True'
      FROM Batch btch
      WHERE btch.BatchName = BatchName) THEN
    SELECT
      'This record already exists!';
  ELSE
    INSERT INTO Batch (BatchName, ClientID, BatchType, CreatedDate, `Source`)
      VALUES (BatchName, ClientID, BatchType, CreatedDate, BSource);
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InsertGLByApprover` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `InsertGLByApprover`(IN myClientId int,
IN myEmail nvarchar(250),
IN myGLCode nvarchar(250))
BEGIN
  DECLARE myUId nvarchar(250);
  DECLARE myGLId int;
  DECLARE myCompCode int;

  SELECT
    usr.UserId,
    usr.ClientCompanyId
  FROM `User` usr
  WHERE usr.ClientId = myClientId
  AND (usr.UserName = myEmail COLLATE utf8_unicode_ci)
  AND usr.IsActive = 1
  LIMIT 1 INTO myUId, myCompCode;
  SELECT
    myUId;
  IF myUId IS NOT NULL THEN
    -- Find the GLCodeId
    SELECT
      gl.GLCodeId
    FROM GLCode gl
    WHERE gl.ClientId = myClientId
    AND (gl.GLCodeName = LTRIM(RTRIM(myGLCode)) COLLATE utf8_unicode_ci)
    AND gl.IsActive = 1
    AND gl.ClientCompanyId = myCompCode INTO myGLId;
    SELECT
      myGLId;
    IF myGLId IS NOT NULL
      OR myGLId <> 0 THEN
      -- Insert the GL for the user if it is not already there
      IF NOT EXISTS (SELECT
            *
          FROM ApproverGLCode agl
          WHERE agl.UserId = myUId COLLATE utf8_unicode_ci
          AND agl.GLCodeId = myGLId) THEN
        INSERT INTO ApproverGLCode (UserId, GLCodeId)
          VALUES (myUId, myGLId);
      END IF;
    END IF;

  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InsertGLFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `InsertGLFromScript`(IN CompCode nvarchar(40),
IN GLCodeName nvarchar(50),
IN GLDesc nvarchar(50),
IN UserIDCard nvarchar(50),
IN ClientID int)
BEGIN
  DECLARE ClientCompCodeId int;
  DECLARE GLCID int;
  DECLARE UID char(36);
  SELECT
    Id
  FROM ClientCompany clcomp
  WHERE clcomp.ClientId = ClientID
  AND clcomp.CompanyCode = CompCode COLLATE utf8_unicode_ci INTO ClientCompCodeId;

  IF NOT EXISTS (SELECT
        *
      FROM GLCode glc
      WHERE glc.ClientId = ClientId
      AND ClientCompanyId = ClientCompCodeId
      AND glc.GLCodeName = GLCodeName COLLATE utf8_unicode_ci) THEN
    SET GLCID = (SELECT
        MAX(glc.GLCodeID)
      FROM GLCode glc) + 1;
    INSERT INTO GLCode (ClientId, GLCodeId, GLCodeName, Desccription, ClientCompanyId, IsActive)
      VALUES (ClientID, GLCID, GLCodeName, GLDesc, ClientCompCodeId, 1);
    SET UID = (SELECT
        usr.UserId
      FROM User usr
      WHERE usr.UserIDCard IS NOT NULL
      AND usr.UserIDCard <> ''
      AND usr.ClientId = ClientID
      AND usr.UserIdCard = UserIDCard COLLATE utf8_unicode_ci);
    IF (UID IS NOT NULL) THEN
      INSERT INTO ApproverGLCode (UserId, GLCodeId)
        VALUES (UID, GLCID);
    END IF;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InsertGLFromScript2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `InsertGLFromScript2`(IN CompCode nvarchar(40),
IN GLCodeNameParam nvarchar(50),
IN GLDesc nvarchar(50),
IN UserIDCard nvarchar(50),
IN IsActiveParam int,
IN ClientID int)
BEGIN
  DECLARE ClientCompCodeId int;
  DECLARE GLCID int;
  DECLARE UID char(36);

  IF NOT EXISTS (SELECT
        *
      FROM GLCode glc
      WHERE glc.ClientId = ClientID
      AND glc.GLCodeName = GLCodeNameParam
      AND glc.Desccription = GLDesc COLLATE utf8_unicode_ci) THEN
    -- select 'Tope';
    SELECT
      Id
    FROM ClientCompany clcomp
    WHERE clcomp.ClientId = ClientID
    AND clcomp.CompanyCode = CompCode
    AND IsActive = 1 COLLATE utf8_unicode_ci LIMIT 1 INTO ClientCompCodeId;
    SET GLCID = (SELECT
        MAX(glc.GLCodeID)
      FROM GLCode glc) + 1;
    INSERT INTO GLCode (ClientId, GLCodeId, GLCodeName, Desccription, ClientCompanyId, IsActive)
      VALUES (ClientID, GLCID, GLCodeNameParam, GLDesc, ClientCompCodeId, IsActive);
    SET UID = (SELECT
        usr.UserId
      FROM User usr
      WHERE usr.UserIDCard IS NOT NULL
      AND usr.UserIDCard <> ''
      AND usr.ClientId = ClientID
      AND usr.UserIdCard = UserIDCard
      AND IsActive = 1 COLLATE utf8_unicode_ci LIMIT 1);
    -- select 'next';
    IF (UID IS NOT NULL) THEN
      INSERT INTO ApproverGLCode (UserId, GLCodeId)
        VALUES (UID, GLCID);
    END IF;
  ELSE
    SET SQL_SAFE_UPDATES = 0;
    -- select 'bottom';
    SELECT
      Id
    FROM ClientCompany clcomp
    WHERE clcomp.ClientId = ClientID
    AND clcomp.IsActive = 1
    AND clcomp.CompanyCode = CompCode COLLATE utf8_unicode_ci LIMIT 1 INTO ClientCompCodeId;

    UPDATE GLCode
    SET IsActive = IsActiveParam,
        ClientCompanyId = ClientCompCodeId
    WHERE ClientId = ClientID
    AND GLCodeName = GLCodeNameParam
    AND Desccription = GLDesc;

    -- select ClientCompCodeId, IsActiveParam;

    SET UID = (SELECT
        usr.UserId
      FROM User usr
      WHERE usr.UserIDCard IS NOT NULL
      AND usr.UserIDCard <> ''
      AND usr.ClientId = ClientID
      AND usr.IsActive = 1
      AND usr.UserIdCard = UserIDCard COLLATE utf8_unicode_ci LIMIT 1);
    -- select 'bottom 2';
    IF (UID IS NOT NULL
      AND (
      NOT EXISTS (SELECT
          *
        FROM ApproverGLCode
        WHERE UserId = UID
        && GLCodeId IN (SELECT
            GLCodeId
          FROM GLCode
          WHERE ClientId = ClientID
          AND GLCodeName = GLCodeNameParam)))) THEN
      INSERT INTO ApproverGLCode (UserId, GLCodeId)
        VALUES (UID, (SELECT GLCodeId FROM GLCode WHERE ClientId = ClientID AND GLCodeName = GLCodeNameParam LIMIT 1));
    END IF;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InsertNewVendorByName` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `InsertNewVendorByName`(IN myVendorName nvarchar(250),
IN MyClientId int)
BEGIN
  DECLARE maxVendordId int;
  DECLARE myVendorNo nvarchar(25);

  IF (SELECT
        MAX(v.VendorId)
      FROM Vendor v) IS NOT NULL THEN
    SET maxVendordId = (SELECT
        MAX(v.VendorId)
      FROM Vendor v) + 1;
    SET myVendorNo = maxVendordId;
  END IF;


  INSERT INTO Vendor (VendorId, ClientId, VendorNo, VendorName)
    VALUES (maxVendordId, MyClientId, myVendorNo, RTRIM(LTRIM(myVendorName)));

  SELECT
    myVendorNo;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InsertPOFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `InsertPOFromScript`(IN CompCode nvarchar(50),
IN PONo nvarchar(50),
IN POLineNo nvarchar(50),
IN VendorNo nvarchar(50),
IN PartNo nvarchar(50),
IN UOM nvarchar(50),
IN QTY double,
IN UnitCost double,
IN Descr nvarchar(500),
IN Currency nvarchar(50),
IN Purchaser nvarchar(50),
IN ClientID int,
IN GRNType nvarchar(50),
IN MyGRN nvarchar(50))
BEGIN
  DECLARE ClientCompCodeId int;
  DECLARE VendID int;
  DECLARE PurchID char(36);

  SELECT
    Id
  FROM ClientCompany clcomp
  WHERE clcomp.ClientId = ClientID
  AND clcomp.CompanyCode = CompCode COLLATE utf8_unicode_ci LIMIT 1 INTO ClientCompCodeId;
  SELECT
    VendorId
  FROM Vendor v
  WHERE v.VendorNo = VendorNo COLLATE utf8_unicode_ci
  AND v.ClientId = ClientID
  AND CompanyCode = CompCode LIMIT 1 INTO VendID;
  IF (Purchaser <> '') THEN
    SET PurchID = (SELECT
        UserId
      FROM User usr
      WHERE usr.UserIdCard = Purchaser
      AND usr.ClientId = ClientID COLLATE utf8_unicode_ci LIMIT 1);
  END IF;
  IF (ClientCompCodeId IS NOT NULL
    AND VendID IS NOT NULL) THEN
    IF NOT EXISTS (SELECT
          *
        FROM PO p
        WHERE p.VendorId = VendID
        AND p.PONumber = PONo
        AND p.ItemNumber = POLineNo
        AND p.POLineId = POLineNo
        AND p.VendorCatNumber = PartNo
        AND p.UnitOfPurchase = UOM
        AND p.UnitCost = UnitCost
        AND p.RcvdQty = QTY
        AND p.ClientId = ClientID
        AND p.LineNo = POLineNo
        AND p.Description = Descr
        AND p.ClientCompanyId = ClientCompCodeId
        AND p.PurchaserId = PurchID
        AND p.Currency = Currency
        AND p.POType = GRNType
        AND p.RecievedTransactionId = MyGRN) THEN
      INSERT INTO PO (VendorId, PONumber, ItemNumber, POLineId,
      VendorCatNumber, UnitOfPurchase, UnitCost, RcvdQty, ClientId,
      LineNo, Description, ClientCompanyId, PurchaserId, Currency, POType, RecievedTransactionId)
        VALUES (VendID, PONo, POLineNo, POLineNo, PartNo, UOM, UnitCost, QTY, ClientID, POLineNo, Descr, ClientCompCodeId, PurchID, Currency, GRNType, MyGRN);
    END IF;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InsertSecondaryBacklogInvoice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `InsertSecondaryBacklogInvoice`(IN ClientID int,
IN InvoiceID int,
IN InvoiceNumber nvarchar(50),
IN InvoiceDate datetime,
IN ScanDate datetime,
IN InvoiceTotal float,
IN CheckNumber nvarchar(50))
BEGIN
  DECLARE VendorID int;
  DECLARE URL nvarchar(250);
  DECLARE NewInvoiceID int;
  DECLARE done int DEFAULT 0;

  DECLARE Image_Cursor CURSOR FOR
  SELECT
    Url
  FROM InvoiceDocs invdocs
  WHERE invdocs.InvoiceId = InvoiceID;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
  SET VendorID = (SELECT
      VendorID
    FROM Invoice inv
    WHERE inv.InvoiceId = InvoiceID);


  IF VendorID IS NOT NULL THEN
    SELECT
      'Inserting invoice';
    INSERT INTO Invoice (ClientId, VendorId, InvoiceNo, InvoiceDate, InvoiceTotal, ApprovalRequired, ApprovalStatusId,
    IsPaused, IsPOInvoice, ScannedDate, PONumber, InvoiceType, CheckNumber, IsModified)
      VALUES (ClientID, VendorID, InvoiceNumber, InvoiceDate, InvoiceTotal, 0, 5, 0, 0, ScanDate, '', 'CheckCopy', CheckNumber, 0);

    SET NewInvoiceID = (SELECT
        MAX(inv.InvoiceId)
      FROM Invoice inv);
    OPEN Image_Cursor;
  GET_URL:
    LOOP
      FETCH Image_Cursor INTO URL;
      IF done = 1 THEN
        LEAVE GET_URL;
      END IF;
      INSERT INTO InvoiceDocs (InvoiceId, Url)
        VALUES (NewInvoiceID, URL);
    END LOOP GET_URL;
    CLOSE Image_Cursor;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InsertVendorFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `InsertVendorFromScript`(IN CompCode nvarchar(30),
IN VendorNo nvarchar(50),
IN VendorName nvarchar(50),
IN NetTerm int,
IN GLCodeName nvarchar(50),
IN ClientID int)
BEGIN
  DECLARE ClientCompCodeId int;
  DECLARE MyGLCodeID int;
  DECLARE MyVendorID int;
  SELECT
    Id
  FROM ClientCompany clcomp
  WHERE clcomp.ClientId = ClientID
  AND clcomp.CompanyCode = CompCode COLLATE utf8_unicode_ci INTO ClientCompCodeId;
  SELECT
    GLCodeId
  FROM GLCode glc
  WHERE glc.GLCodeName = GLCodeName COLLATE utf8_unicode_ci
  AND glc.ClientId = ClientID
  AND IsActive = 1 LIMIT 1 INTO MyGLCodeID;
  SELECT
    vendorId
  FROM Vendor v
  WHERE v.VendorNo = VendorNo COLLATE utf8_unicode_ci
  AND v.ClientId = ClientID LIMIT 1 INTO MyVendorID;
  IF (ClientCompCodeId IS NOT NULL
    AND MyGLCodeID IS NOT NULL) THEN
    IF (MyVendorID IS NULL) THEN
      SET MyVendorID = (SELECT
          MAX(v.vendorId)
        FROM Vendor v) + 1;
      INSERT INTO Vendor (ClientId, VendorName, VendorId, VendorNo, DefaultGlCodeId, First_Net_Days, IsPoVendor,
      IsActive, CompanyCode, ClientCompanyId)
        VALUES (ClientID, VendorName, MyVendorID, VendorNo, MyGLCodeID, NetTerm, 1, 1, CompCode, ClientCompCodeId);
    ELSE
      UPDATE Vendor v
      SET v.DefaultGlCodeId = MyGLCodeID,
          CompanyCode = CompCode,
          ClientCompanyId = ClientCompCodeId
      WHERE v.VendorId = MyVendorID
      AND v.ClientId = ClientID;
    END IF;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InsertVendorFromScript2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `InsertVendorFromScript2`(IN CompCode nvarchar(30),
IN VendorNo nvarchar(50),
IN VendorName nvarchar(50),
IN NetTerm int,
IN GLCodeName nvarchar(50),
IN UserEmail nvarchar(100),
IN VendorPOType int,
IN ClientID int)
BEGIN
  DECLARE ClientCompCodeId int;
  DECLARE MyGLCodeID int;
  DECLARE MyVendorID int;

  DECLARE approvalSubStepId int;
  DECLARE done int DEFAULT FALSE;
  DECLARE userId char(36);
  DECLARE userFound int DEFAULT FALSE;
  DECLARE substepPO int DEFAULT 0;
  DECLARE substepNOPO int DEFAULT 0;

  DECLARE ApprovalSubStep_Cursor CURSOR FOR
  SELECT
    assu.ApprovalSubStepId,
    assu.UserId
  FROM ApprovalSubStepUser assu
  WHERE assu.UserId
  IN (SELECT
      usr.UserId
    FROM User usr
    WHERE usr.Email = UserEmail
    AND usr.ClientId = ClientID);

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

  SELECT
    Id
  FROM ClientCompany clcomp
  WHERE clcomp.ClientId = ClientID
  AND clcomp.CompanyCode = CompCode COLLATE utf8_unicode_ci INTO ClientCompCodeId;
  SELECT
    GLCodeId
  FROM GLCode glc
  WHERE glc.GLCodeName = GLCodeName COLLATE utf8_unicode_ci
  AND glc.ClientId = ClientID
  AND IsActive = 1
  AND GLCodeName <> 'Null'
  -- and ClientCompanyID = ClientCompCodeId 
  LIMIT 1 INTO MyGLCodeID;

  SELECT
    ClientCompCodeId,
    MyGLCodeID;

  SELECT
    vendorId
  FROM Vendor v
  WHERE v.VendorNo = VendorNo COLLATE utf8_unicode_ci
  AND v.ClientId = ClientID
  AND CompanyCode = CompCode LIMIT 1 INTO MyVendorID;
  IF (ClientCompCodeId IS NOT NULL
    -- and MyGLCodeID is not null
    ) THEN
    SELECT
      'Found Company ID';
    IF (MyVendorID IS NULL) THEN
      SELECT
        'Not Found Vendor ID';
      SET MyVendorID = (SELECT
          MAX(v.vendorId)
        FROM Vendor v) + 1;
      SELECT
        'VendorID = ' + MyVendorID;
      INSERT INTO Vendor (ClientId, VendorName, VendorId, VendorNo, DefaultGlCodeId, First_Net_Days, IsPoVendor,
      IsActive, CompanyCode, ClientCompanyId)
        VALUES (ClientID, VendorName, MyVendorID, VendorNo, MyGLCodeID, NetTerm, VendorPOType, 1, CompCode, ClientCompCodeId);
    ELSE
      SELECT
        'Found Vendor ID';
      UPDATE Vendor v
      SET v.DefaultGlCodeId = MyGLCodeID,
          CompanyCode = CompCode,
          ClientCompanyId = ClientCompCodeId,
          IsPoVendor = VendorPOType,
          IsActive = 1,
          VendorName = VendorName
      WHERE v.VendorId = MyVendorID;
    END IF;
  END IF;

  /*Add User Sub Steps*/
  IF (ClientID = 28) THEN
    OPEN ApprovalSubStep_Cursor;
    SET done = FALSE;
  GET_APSS_ID:
    LOOP
      FETCH ApprovalSubStep_Cursor INTO approvalSubStepId, userId;
      -- select approvalSubStepId;

      IF done THEN
        LEAVE GET_APSS_ID;
      END IF;

      IF (MyVendorID IS NOT NULL
        AND userId IS NOT NULL) THEN
        IF NOT EXISTS (SELECT
              *
            FROM ApprovalSubStepUserVendor assuv
            WHERE assuv.UserId = userId
            AND assuv.VendorId = MyVendorID
            AND assuv.ApprovalSubStepId = approvalSubStepId) THEN
          INSERT INTO ApprovalSubStepUserVendor (ApprovalSubStepId, UserId, VendorId, FirstEscalationManagerId,
          SecondEscalationManagerId, ThirdEscalationManagerId, Duration)
            VALUES (approvalSubStepId, userId, MyVendorID, NULL, NULL, NULL, 0);
        END IF;
      END IF;
      SELECT
        approvalSubStepId;
    END LOOP GET_APSS_ID;
    CLOSE ApprovalSubStep_Cursor;

    IF EXISTS (SELECT
          *
        FROM ApprovalSubStepUser assu
        WHERE assu.UserId
        IN (SELECT
            usr.UserId
          FROM User usr
          WHERE usr.Email = UserEmail
          AND usr.ClientId = ClientID)) THEN
      SET userFound = TRUE;
    END IF;

    SELECT
      userFound;
    -- if userFound = 1 THEN
    -- A-40, B-41
    -- 15,16 A, 17,18 B
    -- 23, 24 A, 25,26 B
    IF (CompCode = 'A') THEN
      SET substepPO = 23;
      SET substepNOPO = 24;
    ELSEIF (CompCode = 'B') THEN
      SET substepPO = 26;
      SET substepNOPO = 25;
    END IF;

    SELECT
      usr.UserId INTO userId
    FROM User usr
    WHERE usr.Email = userEmail
    AND usr.ClientId = ClientID;
    SELECT
      substepPO,
      substepNOPO,
      userId;
    IF (substepPO <> 0
      AND substepNOPO <> 0
      AND userId IS NOT NULL) THEN
      -- Insert PO sub step user
      IF (NOT EXISTS (SELECT
            *
          FROM ApprovalSubStepUser
          WHERE UserId = userId
          AND ApprovalSubStepId = substepPO))
        AND VendorPOType THEN
        INSERT INTO ApprovalSubStepUser (ApprovalSubStepId, UserId, ManualAssignmentOnly)
          VALUES (substepPO, userId, 0);
      END IF;
      -- Insert NO PO sub step user
      IF (NOT EXISTS (SELECT
            *
          FROM ApprovalSubStepUser
          WHERE UserId = userId
          AND ApprovalSubStepId = substepNOPO))
        AND (NOT VendorPOType) THEN
        INSERT INTO ApprovalSubStepUser (ApprovalSubStepId, UserId, ManualAssignmentOnly)
          VALUES (substepNOPO, userId, 0);
      END IF;
      IF (MyVendorID IS NOT NULL) THEN
        -- Insert PO sub step user vendor
        IF (NOT EXISTS (SELECT
              *
            FROM ApprovalSubStepUserVendor
            WHERE UserId = userId
            AND ApprovalSubStepId = substepPO
            AND VendorId = MyVendorID))
          AND VendorPOType THEN
          INSERT INTO ApprovalSubStepUserVendor (ApprovalSubStepId, UserId, VendorId, FirstEscalationManagerId,
          SecondEscalationManagerId, ThirdEscalationManagerId, Duration)
            VALUES (substepPO, userId, MyVendorID, NULL, NULL, NULL, 0);
        END IF;
        -- Insert NO PO sub step user vendor
        IF (NOT EXISTS (SELECT
              *
            FROM ApprovalSubStepUserVendor
            WHERE UserId = userId
            AND ApprovalSubStepId = substepNOPO
            AND VendorId = MyVendorID))
          AND (NOT VendorPOType) THEN
          INSERT INTO ApprovalSubStepUserVendor (ApprovalSubStepId, UserId, VendorId, FirstEscalationManagerId,
          SecondEscalationManagerId, ThirdEscalationManagerId, Duration)
            VALUES (substepNOPO, userId, MyVendorID, NULL, NULL, NULL, 0);
        END IF;
      END IF;

    END IF; -- if we have sub steps and user

  -- end if; -- if we do not have user sub step
  END IF; -- if client is AVG
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InvoiceAnalysisByState` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `InvoiceAnalysisByState`(IN ClientId int, IN StateCode char(10))
    SQL SECURITY INVOKER
BEGIN
  SELECT
    ilid.ItemLineItemDetailId AS LineItemId,
    InvoiceNo AS InvoiceNo,
    InvoiceDate AS InvoiceDate,
    ScannedDate AS InvoiceScannedDate,
    ShippingDate AS InvoiceDeliveryDate,
    VendorName AS VendorName,
    VendorNo AS VendorNumber,
    cl.LocationName AS CustomerLocationName,
    cl.LocationNumber AS CustomerLocationNumber,
    c.CustomerNo AS CustomerNumber,
    cl.DBCode AS DBCode,
    i.ItemNo AS ItemNumber,
    i.ItemDescription AS ItemDescription,
    CASE WHEN ilid.CustomerPrice IS NOT NULL THEN ilid.CustomerPrice WHEN cli.CustomerPrice IS NOT NULL THEN cli.CustomerPrice ELSE 0 END AS CustomerPrice,
    CASE WHEN cli.VendorPrice IS NOT NULL THEN cli.VendorPrice ELSE 0 END AS VendorPrice,
    vic.VendorPrice AS VendorContractedPrice,
    st.StateNameShort AS State,
    ad.ZipCode AS ZipCode,
    CASE WHEN ilid.UnitPrice IS NOT NULL THEN ilid.UnitPrice ELSE 0 END AS UnitCost,
    CASE WHEN cl.isActive = 1 THEN 'Active' ELSE 'Disabled' END AS CustomerLocationDisabled
  FROM Invoice inv
    INNER JOIN ItemLineItemDetail ilid
      ON ilid.InvoiceId = inv.InvoiceId
    INNER JOIN Vendor v
      ON v.VendorId = inv.VendorId
    INNER JOIN CustomerLocation cl
      ON cl.CustomerLocationId = inv.CustomerLocationId
    INNER JOIN Customer c
      ON c.CustomerId = cl.CustomerId
    INNER JOIN CustomerLocationItem cli
      ON cli.CustomerLocationItemId = ilid.CustomerLocationItemId
    INNER JOIN Item i
      ON i.ItemId = cli.ItemId
    LEFT OUTER JOIN VendorItemContract vic
      ON vic.ItemId = cli.ItemId
      AND vic.VendorId = v.VendorId
      AND (vic.CustomerLocationId IS NULL
      OR vic.CustomerLocationId = inv.CustomerLocationId)
    LEFT OUTER JOIN Address ad
      ON ad.AddressId = cl.AddressId
    LEFT OUTER JOIN State st
      ON st.StateId = ad.StateId
  WHERE inv.ClientId = ClientId
  AND IsPaused = 0
  AND inv.IsDeleted = 0
  AND InvoiceType = 'invoice'
  AND ApprovalStatusId IN (5, 7)
  AND (StateCode = 'ALL'
  OR st.StateNameShort = StateCode);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InvoiceApprovalCycleTimeReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `InvoiceApprovalCycleTimeReport`(startDate datetime, endDate datetime)
BEGIN
  SET @Total := (SELECT
      COUNT(Invoice.InvoiceId)
    FROM Invoice
    WHERE ClientId = 1
    AND (Invoice.ApprovalStatusId = 4
    OR Invoice.ApprovalStatusId = 5
    OR Invoice.ApprovalStatusId = 7)
    AND LastActionDate <= endDate
    AND LastActionDate >= startDate
    AND Invoice.IsPaused = 0
    AND Invoice.InvoiceId NOT IN (SELECT
        InvoiceId
      FROM ApproverSetting
      WHERE IsHold = 1));

  SELECT
    a.DateRange,
    CASE WHEN `Count` IS NULL OR
        `Count` = '' THEN '0' ELSE `Count` END AS `Count`,
    CASE WHEN `Percent` IS NULL OR
        `Percent` = '' THEN '0' ELSE `Percent` END AS `Percent`
  FROM DateRangeForReport a
    LEFT OUTER JOIN (SELECT
        CASE WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
            MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
            WEEKDAY(Invoice.LastActionDate) + 1, 1)) IS NULL THEN '1 Day' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
            MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
            WEEKDAY(Invoice.LastActionDate) + 1, 1)) <= 1 THEN '1 Day' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
            MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
            WEEKDAY(Invoice.LastActionDate) + 1, 1)) <= 2 THEN '2 Days' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
            MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
            WEEKDAY(Invoice.LastActionDate) + 1, 1)) <= 3 THEN '3 Days' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
            MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
            WEEKDAY(Invoice.LastActionDate) + 1, 1)) <= 4 THEN '4 Days' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
            MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
            WEEKDAY(Invoice.LastActionDate) + 1, 1)) <= 5 THEN '5 Days' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
            MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
            WEEKDAY(Invoice.LastActionDate) + 1, 1)) <= 10 THEN '6 - 10 Days' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
            MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
            WEEKDAY(Invoice.LastActionDate) + 1, 1)) >= 11 THEN 'More than 10 Days' END AS `Range`,
        COUNT(Invoice.InvoiceId) AS `Count`,
        (COUNT(Invoice.InvoiceId) / @Total) * 100 AS `Percent`
      FROM Invoice
      WHERE ClientId = 1
      AND (Invoice.ApprovalStatusId = 4
      OR Invoice.ApprovalStatusId = 5
      OR Invoice.ApprovalStatusId = 7)
      AND LastActionDate <= endDate
      AND LastActionDate >= startDate
      GROUP BY CASE WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
          MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
          WEEKDAY(Invoice.LastActionDate) + 1, 1)) IS NULL THEN '1 Day' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
          MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
          WEEKDAY(Invoice.LastActionDate) + 1, 1)) <= 1 THEN '1 Day' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
          MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
          WEEKDAY(Invoice.LastActionDate) + 1, 1)) <= 2 THEN '2 Days' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
          MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
          WEEKDAY(Invoice.LastActionDate) + 1, 1)) <= 3 THEN '3 Days' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
          MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
          WEEKDAY(Invoice.LastActionDate) + 1, 1)) <= 4 THEN '4 Days' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
          MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
          WEEKDAY(Invoice.LastActionDate) + 1, 1)) <= 5 THEN '5 Days' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
          MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
          WEEKDAY(Invoice.LastActionDate) + 1, 1)) <= 10 THEN '6 - 10 Days' WHEN ((5 * DATEDIFF(Invoice.LastActionDate, Invoice.ScannedDate) DIV 7) +
          MID('0123455501234445012333450122234501101234000123450', 7 * WEEKDAY(Invoice.ScannedDate) +
          WEEKDAY(Invoice.LastActionDate) + 1, 1)) >= 11 THEN 'More than 10 Days' END) b
      ON a.DateRange = b.`Range`
  ORDER BY `DateRange`;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `InvoicePaymentByDays` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `InvoicePaymentByDays`(startDate datetime, endDate datetime)
BEGIN
  DECLARE Total int;
  SET Total = (SELECT
      COUNT(Invoice.InvoiceId)
    FROM Invoice
    WHERE ClientId = 1
    AND Invoice.ApprovalStatusId = 7
    AND LastActionDate <= endDate
    AND LastActionDate >= startDate);

  SELECT
    a.DateRange,
    SUM(CASE WHEN b.`Count` IS NULL THEN 0 ELSE b.`Count` END) AS `Count`,
    SUM(CASE WHEN b.`Percent` IS NULL THEN 0 ELSE `Percent` END) AS `Percent`
  FROM PaymentDateRangeForReport a
    LEFT OUTER JOIN (SELECT
        CASE WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) IS NULL THEN 'On Time' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) = 0 THEN 'On Time' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) <= 1 THEN '1 Day Late' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) <= 2 THEN '2 Days Late' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) <= 3 THEN '3 Days Late' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) <= 4 THEN '4 Days Late' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) <= 5 THEN '5 Days Late' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) <= 10 THEN '6 - 10 Days Late' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) >= 11 THEN 'More than 10 Days Late' END AS `Range`,
        COUNT(Invoice.InvoiceId) AS `Count`,
        (COUNT(Invoice.InvoiceId) / Total) * 100 AS `Percent`
      FROM Invoice
      WHERE ClientId = 1
      AND IsDeleted = 0
      AND Invoice.ApprovalStatusId = 7
      AND LastActionDate <= endDate
      AND LastActionDate >= startDate

      GROUP BY CASE WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) IS NULL THEN 'On Time' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) <= 0 THEN 'On Time' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) <= 1 THEN '1 Day Late' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) <= 2 THEN '2 Days Late' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) <= 3 THEN '3 Days Late' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) <= 4 THEN '4 Days Late' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) <= 5 THEN '5 Days Late' WHEN DATEDIFF(CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END, Invoice.LastActionDate) <= 10 THEN '6 - 10 Days Late' WHEN DATEDIFF(Invoice.InvoiceDate, Invoice.LastActionDate) >= 11 THEN 'More than 10 Days Late' END,
               CASE WHEN Invoice.NetTermDate IS NULL THEN Invoice.PaymentDueDate ELSE Invoice.NetTermDate END,
               Invoice.LastActionDate) b
      ON a.DateRange = b.`Range`
  GROUP BY a.DateRange,
           b.`Range`,
           a.Id
  ORDER BY a.Id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `IPay_GetIssuedPayments` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `IPay_GetIssuedPayments`(IN pClientId int)
BEGIN
  select cc.UserField1 as CustomerCode, v.VendorName, v.VendorNo as VendorCode, v.NetDisPer, Discount_Day_01, 
  i.InvoiceId, i.InvoiceNo as InvoiceNumber, i.InvoiceDate,i.PaymentDueDate as DueDate, i.InvoiceTotal as GrossAmount, i.AccountCode as BillingAccountNumber from Invoice i
  INNER JOIN Vendor v on v.VendorId = i.VendorId
  INNER JOIN ClientCompany cc on cc.ClientId = pClientId and cc.CompanyCode = i.CompanyCode
  where i.ClientId = pClientId and i.UserField9 = 'IronPay' and i.UserField5 is not null and i.ApprovalStatusId=12 
   -- This is a flag that indicates whether the payment is posted or not
  and i.userfield6 is NULL;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `IPay_GetPostedPaymentsForStatusUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `IPay_GetPostedPaymentsForStatusUpdate`(IN pClientId int)
BEGIN
 select distinct cc.UserField1 as customerCode, i.UserField5 as paymentNumber  from Invoice i

  INNER JOIN ClientCompany cc on cc.ClientId = pClientId and cc.CompanyCode = i.CompanyCode
  where i.ClientId = pClientId and i.UserField9 = 'IronPay' and i.UserField5 is not null and i.ApprovalStatusId=12 
   -- This is a flag that indicates whether a status is updated for payment or not
  and i.userfield7 <> 'settled';
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `IPay_GetVendorsForIssuedPayments` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `IPay_GetVendorsForIssuedPayments`(IN pClientId int, IN pInvoiceIds text)
BEGIN
  select i.InvoiceId as InvoicebillId, cc.UserField1 as CustomerID, v.VendorId as InternalVendorId, v.VendorName, v.VendorNo as VendorID, IFNULL(ad.Address1, ad.StreetName) as Address1,
  ad.Address2, ad.CityName,ad.ZipCode as PostalCode, ad.Email, ad.PhoneNo, st.StateNameShort as StateProvince from Invoice i
  inner JOIN Vendor v on v.VendorId = i.VendorId
  INNER JOIN Address ad on ad.AddressId = v.AddressId
  INNER JOIN State st on st.StateId = ad.StateId
  INNER JOIN ClientCompany cc on cc.ClientId = pClientId and cc.CompanyCode = i.CompanyCode
  where i.ClientId = pClientId and FIND_IN_SET(i.InvoiceId, pInvoiceIds);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `IPay_MarkIssuedInvoicesAsPosted` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `IPay_MarkIssuedInvoicesAsPosted`(IN pClientId int, IN pInvoiceIds text)
BEGIN
  Update Invoice 
  set UserField6 = 'Payment Posted'
  where ClientId = pClientId and FIND_IN_SET(InvoiceId, pInvoiceIds);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `IPay_StatusUpdateForCompletedPayments` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `IPay_StatusUpdateForCompletedPayments`(IN pClientId int, IN pPaymentNumber varchar(200), IN pStatusType varchar(100), 
IN pPaymentMethod varchar(100), IN pPaymentReference varchar(100))
BEGIN
CREATE TEMPORARY TABLE IF NOT EXISTS tInvoices AS (SELECT InvoiceId FROM Invoice where ClientId = pClientId  and UserField5 = pPaymentNumber 
and UserField7  <> pStatusType -- we must not update invoices for the same payment state more than once
);

  If EXISTS (SELECT	InvoiceId from tInvoices) THEN
    Update Invoice 
    set UserField8 = pPaymentReference, CheckNumber = pPaymentReference, UserField10 = pPaymentMethod, UserField7 = pStatusType,
    LastActionBy = 'System', LastActionDate = NOW(), ApprovalStatusId= CASE WHEN pStatusType='settled' THEN 7 ELSE ApprovalStatusId end
    where InvoiceId  in (select InvoiceId from tInvoices);
  
    INSERT into InvoiceHistory
    select 0, InvoiceId , 'System', CASE WHEN pStatusType='settled' THEN 'Iron Pay - Set Paid' ELSE 'Iron Pay - Status Update' end, now(), null, null, 'InvoiceUpdate', 'Payment Approved', 
    CASE WHEN pStatusType='settled' THEN 'Paid' ELSE 'Payment Approved' end,
    null, null from tInvoices;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `IPay_StatusUpdateForFailedPayments` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `IPay_StatusUpdateForFailedPayments`(IN pClientId int, IN pPaymentNumber varchar(200), IN pError varchar(500))
BEGIN

  CREATE TEMPORARY TABLE IF NOT EXISTS tInvoices AS (SELECT InvoiceId FROM Invoice where ClientId = pClientId  and UserField5 = pPaymentNumber);

  If EXISTS (SELECT	InvoiceId from tInvoices) THEN
    Update Invoice 
    set ApprovalStatusId =5, UserField5 = null, UserField6 = null, UserField7 =null, UserField8 = null, UserField9 = null, UserField10 = null, 
    LastActionBy = 'System', LastActionDate = NOW(), IsPaused =1
    where InvoiceId  in (select InvoiceId from tInvoices);
  
    INSERT into PausedInvoice
    select InvoiceId, 'System', now(), pError from tInvoices;
  
    INSERT into InvoiceHistory
    select 0, InvoiceId , 'System', 'Pause', now(), null, CONCAT('Iron Pay - ', pError), 'IsPaused', 'Payment Approved', 'Accepted',null, null from tInvoices;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `LoadCustomerData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `LoadCustomerData`(IN CustomerNumber nvarchar(50),
IN CustomerName nvarchar(50),
IN ClientID int)
BEGIN
  IF EXISTS (SELECT
        'False'
      FROM Customer cust
      WHERE cust.CustomerNo = CustomerNumber
      AND cust.ClientId = ClientID) THEN
    INSERT INTO Customer (CustomerName, CustomerNo, ClientId)
      VALUES (CustomerName, CustomerNumber, ClientID);
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `MigrateInsertHistory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `MigrateInsertHistory`(IN OldID int,
IN Actor nvarchar(50),
IN `Action` nvarchar(50),
IN ActionDate nvarchar(50),
IN PreviousData nvarchar(50),
IN NewData nvarchar(50),
IN Field nvarchar(50),
IN InitialStatus nvarchar(50),
IN CurrentStatus nvarchar(50),
IN InvoiceName nvarchar(50),
IN ClientID int)
BEGIN
  DECLARE NewInvoiceID int;
  IF EXISTS (SELECT
        Id
      FROM InvoiceHistory invhist
      WHERE invhist.OldId = OldID) THEN
    DELETE
      FROM InvoiceHistory
    WHERE OldId = OldID;
  END IF;

  SELECT
    NewInvoiceID = InvoiceId
  FROM Invoice inv
  WHERE inv.InvoiceName = InvoiceName;

  IF NewInvoiceID IS NOT NULL THEN
    INSERT INTO InvoiceHistory (InvoiceId, Actor, `Action`, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, OldId)
      VALUES (NewInvoiceID, Actor, `Action`, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, OldID);
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `MonthlyBilling` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `MonthlyBilling`(IN startDate datetime,
IN endDate datetime)
BEGIN

  SELECT
    COUNT(*) AS MasonicareInvoice
  FROM Invoice
  WHERE Clientid = 5
  AND (InvoiceType = 'Invoice'
  OR InvoiceType = 'Credit')
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS MasonicareArchive
  FROM Invoice
  WHERE Clientid = 5
  AND InvoiceType = 'Archive'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;


  SELECT
    COUNT(*) AS AvgInvoice
  FROM Invoice
  WHERE Clientid = 28
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS AVGArchive
  FROM Invoice
  WHERE BatchId IN (SELECT
      ID
    FROM Batch
    WHERE ClientId = 28
    AND CreatedDate > startDate
    AND CreatedDate < endDate
    AND Receiver LIKE '%archive%');

  SELECT
    COUNT(*) AS KettleInvoice
  FROM Invoice
  WHERE Clientid = 1
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'BOL';

  SELECT
    COUNT(*) AS KettleBOL
  FROM Invoice
  WHERE Clientid = 1
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'BOL';

  SELECT
    COUNT(*) AS KettleCAInvoice
  FROM Invoice
  WHERE Clientid = 41
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'BOL';

  SELECT
    COUNT(*) AS KettleCABOL
  FROM Invoice
  WHERE Clientid = 41
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'BOL';

  SELECT
    COUNT(*) AS KettleGreenBayInvoice
  FROM Invoice
  WHERE Clientid = 70
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'BOL';

  SELECT
    COUNT(*) AS KettleGreenBayBOL
  FROM Invoice
  WHERE Clientid = 70
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'BOL';

  SELECT
    COUNT(*) AS KettleUnionCityBOL
  FROM Invoice
  WHERE Clientid = 71
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'BOL';

  SELECT
    COUNT(*) AS KettleUnionCityBOL
  FROM Invoice
  WHERE Clientid = 71
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'BOL';

  SELECT
    COUNT(*) AS Bradford
  FROM Invoice
  WHERE Clientid = 18
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS SelfInvoice
  FROM Invoice
  WHERE Clientid = 15
  AND InvoiceType <> 'Archive'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS SelfArchive
  FROM Invoice
  WHERE Clientid = 15
  AND InvoiceType = 'Archive'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS Twochefs
  FROM Invoice
  WHERE Clientid = 23
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS TwochefsStatement
  FROM Invoice
  WHERE Clientid = 23
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS TwochefsStatementPages
  FROM InvoiceDocs
  WHERE InvoiceId IN (SELECT
      InvoiceId
    FROM Invoice
    WHERE Clientid = 23
    AND InvoiceType = 'Statement'
    AND ScannedDate >= startDate
    AND ScannedDate < endDate);

  SELECT
    COUNT(*) AS TwochefsPR
  FROM POHeader
  WHERE ClientId = 23
  AND CreatedDate >= startDate
  AND CreatedDate < endDate
  AND POStatus > 4
  AND POStatus < 10;


  SELECT
    COUNT(*) AS DriveInvoices
  FROM Invoice
  WHERE Clientid = 20
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;


  SELECT
    COUNT(*) AS DWRInvoices
  FROM Invoice
  WHERE Clientid = 22
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;


  SELECT
    COUNT(*) AS SteelInvoices
  FROM Invoice
  WHERE Clientid = 26
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;


  SELECT
    COUNT(*) AS NestleCloudXScannedInvoices
  FROM Invoice
  WHERE Clientid = 27
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND BatchID IN (SELECT
      ID
    FROM Batch
    WHERE ClientID = 27
    AND BatchName LIKE '%image%');


  SELECT
    COUNT(*) AS NestleTotal
  FROM Invoice
  WHERE Clientid = 27
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceDate > '2015-07-31';

  SELECT
    COUNT(*) AS HandHAutoInvoice
  FROM Invoice
  WHERE Clientid = 35
  AND InvoiceType = 'Invoice'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS HandHAutoStatement
  FROM Invoice
  WHERE Clientid = 35
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS HandHAutoStatementPages
  FROM InvoiceDocs
  WHERE InvoiceId IN (SELECT
      InvoiceId
    FROM Invoice
    WHERE Clientid = 35
    AND InvoiceType = 'Statement'
    AND ScannedDate >= startDate
    AND ScannedDate < endDate);


  -- select COUNT(invoiceID) As Cnt from InvoiceDocs where InvoiceId in
  -- (select InvoiceID from Invoice where Clientid = 14 
  -- and (InvoiceType = 'Invoice' Or InvoiceType = 'Credit')
  -- and ScannedDate >= startDate and ScannedDate < endDate)
  -- group by InvoiceId Having (COUNT(invoiceID) > 4);


  SELECT
    COUNT(*) AS Rosewood
  FROM Invoice
  WHERE Clientid = 34
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;


  SELECT
    COUNT(*) AS RobinsonLumber
  FROM Invoice
  WHERE Clientid = 49
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS `24M`
  FROM Invoice
  WHERE Clientid = 50
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS NelsonAutoTotal
  FROM Invoice
  WHERE Clientid = 61
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement';

  SELECT
    COUNT(*),
    CompanyCode AS NelsonAuto
  FROM Invoice
  WHERE Clientid = 61
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS NelsonAutoStatement
  FROM Invoice
  WHERE Clientid = 61
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode;

  SELECT
    COUNT(*) AS NelsonAutoStatementPages
  FROM InvoiceDocs
  WHERE InvoiceId IN (SELECT
      InvoiceId
    FROM Invoice
    WHERE Clientid = 61
    AND InvoiceType = 'Statement'
    AND ScannedDate >= startDate
    AND ScannedDate < endDate);

  SELECT
    COUNT(*) AS BongardsInvoice
  FROM Invoice
  WHERE Clientid = 88
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Invoice';

  SELECT
    COUNT(*) AS BongardsArchive
  FROM Invoice
  WHERE Clientid = 88
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Archive';


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `MonthlyBilling2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `MonthlyBilling2`(IN startDate datetime,
IN endDate datetime)
BEGIN

  SELECT
    COUNT(*) AS AcaciaInvoice
  FROM Invoice
  WHERE Clientid = 58
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Archive';

  SELECT
    COUNT(*) AS AcaciaArchive
  FROM Invoice
  WHERE Clientid = 58
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Archive';

  SELECT
    COUNT(*) AS VeraceInvoice
  FROM Invoice
  WHERE Clientid = 64
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS ContinentalBattrey
  FROM Invoice
  WHERE Clientid = 77
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS SteelPlex
  FROM Invoice
  WHERE Clientid = 66
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Archive';

  SELECT
    COUNT(*) AS SteelArchive
  FROM Invoice
  WHERE Clientid = 66
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Archive';

  SELECT
    COUNT(*) AS HardyDiag
  FROM Invoice
  WHERE Clientid = 63
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS AmericanMessaging
  FROM Invoice
  WHERE Clientid = 83
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS StrategicSecurityInvoice
  FROM Invoice
  WHERE Clientid = 84
  AND InvoiceType <> 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS StrategicSecurityStatement
  FROM Invoice
  WHERE Clientid = 84
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS StrategicSecurityStatementPages
  FROM InvoiceDocs
  WHERE InvoiceId IN (SELECT
      InvoiceId
    FROM Invoice
    WHERE Clientid = 84
    AND InvoiceType = 'Statement'
    AND ScannedDate >= startDate
    AND ScannedDate < endDate);

  SELECT
    COUNT(*) AS KeterNormal
  FROM Invoice
  WHERE Clientid = 79
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'HaulerInvoice';

  SELECT
    COUNT(*) AS KeterHauling
  FROM Invoice
  WHERE Clientid = 79
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'HaulerInvoice';

  SELECT
    SUM(PageCount) AS KeterBigPageCount
  FROM keterPageCount
  WHERE PageCount > 2; -- Requires keterPageCount to be updated with the date range for the current month
  -- select PageCount, COUNT(*) from keterPageCount where PageCount > 1 group by PageCount;
  -- select InvoiceId, COUNT(*) As KeterHaulingPages from InvoiceDocs where InvoiceId in (select InvoiceId from Invoice where Clientid =79 and InvoiceType = 'HaulerInvoice'
  -- and ScannedDate >= startDate and ScannedDate < endDate) Group By InvoiceId Order By KeterHaulingPages;

  SELECT
    COUNT(*) AS Nova
  FROM Invoice
  WHERE Clientid = 86
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;


  SELECT
    COUNT(*) AS Coffee
  FROM Invoice
  WHERE Clientid = 80
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS Mission
  FROM Invoice
  WHERE Clientid = 68
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceId IN (SELECT
      InvoiceId
    FROM InvoiceDocs);

  SELECT
    COUNT(*) AS RGBarry
  FROM Invoice
  WHERE Clientid = 76
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS SEHAInvoices
  FROM Invoice
  WHERE Clientid = 65
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS SEHAPR
  FROM POHeader
  WHERE ClientId = 65
  AND CreatedDate >= startDate
  AND CreatedDate < endDate
  AND POStatus > 4
  AND POStatus < 10;

  SELECT
    COUNT(*) AS SEHASR
  FROM StockRequest
  WHERE ClientId = 65
  AND CreatedDate >= startDate
  AND CreatedDate < endDate
  AND SRStatus > 4
  AND SRStatus < 10;

  SELECT
    COUNT(*) AS CCareInvoices
  FROM Invoice
  WHERE Clientid = 92
  AND ScannedDate >= startDate
  AND InvoiceType = 'Invoice'
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS CCareArchive
  FROM Invoice
  WHERE Clientid = 92
  AND ScannedDate >= startDate
  AND InvoiceType <> 'Invoice'
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS CCarePaymentSync
  FROM Invoice
  WHERE Clientid = 92
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND ApprovalStatusID = 7;

  SELECT
    COUNT(*) AS AmerProdInvoice
  FROM Invoice
  WHERE Clientid = 91
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Archive';

  SELECT
    COUNT(*) AS AmerProdArchive
  FROM Invoice
  WHERE Clientid = 91
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Archive';

  SELECT
    COUNT(*) AS HarcoInvoice
  FROM Invoice
  WHERE Clientid = 97
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS ColemanInvoice
  FROM Invoice
  WHERE Clientid = 89
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS UNCInvoice
  FROM Invoice
  WHERE Clientid = 98
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS DeerlandInvoice
  FROM Invoice
  WHERE Clientid = 100
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS LouFusz
  FROM Invoice
  WHERE Clientid = 103
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS MichiganTotal
  FROM Invoice
  WHERE Clientid = 114
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*),
    cc.Description
  FROM Invoice i,
       ClientCompany cc
  WHERE i.Clientid = 114
  AND cc.ClientId = 114
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND cc.CompanyCode = i.CompanyCode
  GROUP BY i.CompanyCode;


  SELECT
    COUNT(*) AS ABMFederalNormal
  FROM Invoice
  WHERE Clientid = 113
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND IsDeleted = 0;

  SELECT
    COUNT(*) AS SequoiaInvoice
  FROM Invoice
  WHERE Clientid = 108
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND IsDeleted = 0
  AND InvoiceType = 'Invoice';

  SELECT
    COUNT(*) AS SequoiaArchive
  FROM Invoice
  WHERE Clientid = 108
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND IsDeleted = 0
  AND InvoiceType <> 'Invoice';

  SELECT
    COUNT(*) AS CoinStar
  FROM Invoice
  WHERE Clientid = 102
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS WestSide
  FROM Invoice
  WHERE Clientid = 115
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS BeautyQuest
  FROM Invoice
  WHERE Clientid = 118
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS Andean
  FROM Invoice
  WHERE Clientid = 119
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS Shive
  FROM Invoice
  WHERE Clientid = 123
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND IsDeleted = 0;

  SELECT
    COUNT(*) AS RamarFoods
  FROM Invoice
  WHERE Clientid = 125
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;



END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `MonthlyBilling3` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `MonthlyBilling3`(IN startDate datetime,
IN endDate datetime)
BEGIN

  SELECT
    COUNT(*) AS SummitAuto
  FROM Invoice
  WHERE Clientid = 128
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*),
    CompanyCode AS SummitAuto
  FROM Invoice i
  WHERE Clientid = 128
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY i.CompanyCode
  ORDER BY i.CompanyCode;

  SELECT
    COUNT(*) AS SummitAutoStatementTotal
  FROM Invoice
  WHERE Clientid = 128
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement';

  SELECT
    COUNT(*),
    CompanyCode AS SummitAutoStatement
  FROM Invoice i
  WHERE Clientid = 128
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY i.CompanyCode
  ORDER BY i.CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS SummitStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 128
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY i.CompanyCode
  ORDER BY i.CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS SummitAutoPaymentSync
  FROM Invoice i
  WHERE Clientid = 128
  AND InvoiceType = 'Invoice'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceId IN (SELECT
      InvoiceId
    FROM PaymentStatus)
  GROUP BY i.CompanyCode
  ORDER BY i.CompanyCode;

  SELECT
    COUNT(*) AS Grande
  FROM Invoice
  WHERE Clientid = 129
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS FermanFam
  FROM Invoice
  WHERE Clientid = 164
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS Ferman
  FROM Invoice
  WHERE Clientid = 130
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*),
    CompanyCode AS Ferman
  FROM Invoice i
  WHERE Clientid = 130
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY i.CompanyCode
  ORDER BY i.CompanyCode;


  SELECT
    COUNT(*) AS FermanStatementTotal
  FROM Invoice
  WHERE Clientid = 130
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement';

  SELECT
    COUNT(*),
    CompanyCode AS FermanStatement
  FROM Invoice i
  WHERE Clientid = 130
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY i.CompanyCode
  ORDER BY i.CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS FermanStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 130
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY i.CompanyCode
  ORDER BY i.CompanyCode;

  SELECT
    COUNT(*) AS FermanMotors
  FROM Invoice
  WHERE Clientid = 141
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*),
    CompanyCode AS Ferman
  FROM Invoice i
  WHERE Clientid = 141
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
   GROUP BY i.CompanyCode
  ORDER BY i.CompanyCode;

  SELECT
    COUNT(*) AS FermanMotorsStatementTotal
  FROM Invoice
  WHERE Clientid = 141
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement';

  SELECT
    COUNT(*),
    CompanyCode AS FermanMotorsStatement
  FROM Invoice i
  WHERE Clientid = 141
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY i.CompanyCode
  ORDER BY i.CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS FermanMotorsStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 141
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY i.CompanyCode
  ORDER BY i.CompanyCode;

  SELECT
    COUNT(*),
    i.CompanyCode AS KeyAuto
  FROM Invoice i,
       Batch b
  WHERE i.Clientid = 132
  AND IsDeleted = 0
  AND i.ScannedDate >= startDate
  AND i.ScannedDate < endDate
  AND i.BatchId = b.Id
  AND b.`Source` <> 'QuickBooks'
  GROUP BY i.CompanyCode
  ORDER BY i.CompanyCode;

  SELECT
    COUNT(*),
    i.CompanyCode AS KeyAutoPaymentSync
  FROM Invoice i,
       Batch b
  WHERE i.Clientid = 132
  AND i.ScannedDate >= startDate
  AND i.IsDeleted = 0
  AND i.ScannedDate < endDate
  AND i.BatchId = b.Id
  AND b.`Source` = 'QuickBooks'
  GROUP BY i.CompanyCode
  ORDER BY i.CompanyCode;

  -- select COUNT(*) As KeyAutoStatementTotal from Invoice where Clientid =132
  -- and ScannedDate >= startDate and ScannedDate < endDate and InvoiceType = 'Statement';

  -- select COUNT(*), CompanyCode As KeyAutoStatement from Invoice where Clientid =132 and InvoiceType = 'Statement'
  -- and ScannedDate >= startDate and ScannedDate < endDate
  -- Group by CompanyCode;

  -- select COUNT(*), CompanyCode As KeyAutoStatementPages from InvoiceDocs id, Invoice i 
  -- where id.InvoiceId = i.InvoiceId and i.InvoiceType = 'Statement' and i.ClientId = 132 and ScannedDate >= startDate and ScannedDate < endDate
  -- Group by CompanyCode;


  SELECT
    COUNT(*) AS Archie
  FROM Invoice
  WHERE Clientid = 133
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*),
    CompanyCode AS ArchieStatement
  FROM Invoice
  WHERE Clientid = 133
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS ArchieStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 133
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode;

  SELECT
    COUNT(*) AS HomerSkelton
  FROM Invoice
  WHERE Clientid = 137
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND IsDeleted = 0;

  SELECT
    COUNT(*),
    CompanyCode AS HomerSkelton
  FROM Invoice
  WHERE Clientid = 137
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode
  Order By CompanyCode;

  SELECT
    COUNT(*) AS HomerSkeltonStatementTotal
  FROM Invoice
  WHERE Clientid = 137
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement';

  SELECT
    COUNT(*),
    CompanyCode AS HomerSkeltonStatement
  FROM Invoice
  WHERE Clientid = 137
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  Order By CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS HomerSkeltonStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 137
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  Order By CompanyCode;


  SELECT
    COUNT(*) AS MurphyAuto
  FROM Invoice
  WHERE Clientid = 140
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*),
    CompanyCode AS MurphyAuto
  FROM Invoice
  WHERE Clientid = 140
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode;

  SELECT
    COUNT(*) AS MurphyAutoStatementTotal
  FROM Invoice
  WHERE Clientid = 140
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement';

  SELECT
    COUNT(*),
    CompanyCode AS MurphyAutoStatement
  FROM Invoice
  WHERE Clientid = 140
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS MurphyAutoStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 140
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode;

  -- select COUNT(*) As Theragenics from Invoice where Clientid =139 and ScannedDate >= startDate and ScannedDate < endDate;

  SELECT
    COUNT(*) AS IntrimInvoice
  FROM Invoice
  WHERE Clientid = 142
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;
  
  SELECT
    COUNT(*) AS DigitalDynamicsInvoice
  FROM Invoice
  WHERE Clientid = 147
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = "Invoice";
   SELECT
    COUNT(*) AS DigitalDynamicsBOL
  FROM Invoice
  WHERE Clientid = 147
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> "Invoice";
  
  SELECT
    COUNT(*) AS BillKnightInvoice
  FROM Invoice
  WHERE Clientid = 163
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;
  SELECT
    COUNT(*),
    CompanyCode AS BillKnight
  FROM Invoice
  WHERE Clientid = 163
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode
  Order By CompanyCode;
  SELECT
    COUNT(*) AS BillKnightStatementTotal
  FROM Invoice
  WHERE Clientid = 163
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement';
  SELECT
    COUNT(*),
    CompanyCode AS BillKnightStatement
  FROM Invoice
  WHERE Clientid = 163
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  Order By CompanyCode;
  SELECT
    COUNT(*),
    CompanyCode AS BillKnightStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 163
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  Order By CompanyCode;

  SELECT
    COUNT(*) AS GrotheAutoInvoiceTotal
  FROM Invoice
  WHERE Clientid = 171
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;
  SELECT
    COUNT(*),
    CompanyCode AS GrotheAuto
  FROM Invoice
  WHERE Clientid = 171
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode
  Order By CompanyCode;

  SELECT
    COUNT(*) AS GrotheAutoStatementTotal
  FROM Invoice
  WHERE Clientid = 171
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement';

  SELECT
    COUNT(*),
    CompanyCode AS GrotheAutoStatement
  FROM Invoice
  WHERE Clientid = 171
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  Order By CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS GrotheAutoStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 171
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  Order By CompanyCode;

  --

  SELECT
    COUNT(*) AS MikeBellInvoice
  FROM Invoice
  WHERE Clientid = 174
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

  SELECT
    COUNT(*) AS MikeBellStatement
  FROM Invoice
  WHERE Clientid = 174
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement';

  SELECT
    COUNT(*) AS MikeBellStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 174
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `MonthlyBilling4` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `MonthlyBilling4`(IN startDate datetime,
IN endDate datetime)
BEGIN
  SELECT
    COUNT(*)
  FROM Invoice AS BobLoqTotalInvoice
  WHERE ClientId = 176
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement';

  SELECT
    COUNT(*),
    CompanyCode AS BobLoqInvoice
  FROM Invoice
  WHERE Clientid = 176
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode
  order by CompanyCode;

  SELECT
    COUNT(*) AS BobLoqStatementTotal
  FROM Invoice
  WHERE Clientid = 176
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement';

  SELECT
    COUNT(*),
    CompanyCode AS BobLoqStatement
  FROM Invoice
  WHERE Clientid = 176
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  order by CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS BobLoqStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 176
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  order by CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS P4Auto
  FROM Invoice
  WHERE Clientid = 177
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode
  order by CompanyCode;

  SELECT
    COUNT(*) AS P4AutoStatementTotal
  FROM Invoice
  WHERE Clientid = 177
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement';

  SELECT
    COUNT(*),
    CompanyCode AS P4AutoStatement
  FROM Invoice
  WHERE Clientid = 177
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  order by CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS P4AutoStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 177
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  order by CompanyCode;
  -- 
  SELECT
    COUNT(*),
    CompanyCode AS DecaturInvoice
  FROM Invoice
  WHERE Clientid = 182
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode
  order by CompanyCode;

  SELECT
    COUNT(*) AS DecaturStatementTotal
  FROM Invoice
  WHERE Clientid = 182
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement';

  SELECT
    COUNT(*),
    CompanyCode AS DecaturStatement
  FROM Invoice
  WHERE Clientid = 182
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  order by CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS DecaturStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 182
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  order by CompanyCode;

 SELECT
    COUNT(*),
    CompanyCode AS BrandingIronInvoice
  FROM Invoice
  WHERE Clientid = 181
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode
  order by CompanyCode;
  -- 
  SELECT
    COUNT(*),
    i.CompanyCode AS StepOneInvoice, cc.Description
  FROM Invoice i, ClientCompany cc
  WHERE i.Clientid = 183
  AND i.CompanyCode = cc.CompanyCode
  AND cc.ClientId = 183
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY i.CompanyCode
  order by i.CompanyCode;

  SELECT
    COUNT(*) AS StepOneStatementTotal
  FROM Invoice
  WHERE Clientid = 183
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement';

  SELECT
    COUNT(*),
    i.CompanyCode AS StepOneStatement, cc.Description
  FROM Invoice i, ClientCompany cc
  WHERE i.Clientid = 183
  And i.CompanyCode = cc.CompanyCode
  And cc.ClientId = 183
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY i.CompanyCode
  order by i.CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS StepOneStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 183
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  order by CompanyCode;

  -- 
  SELECT
    COUNT(*),
    CompanyCode AS PedersonInvoice
  FROM Invoice
  WHERE Clientid = 187
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode
  order by CompanyCode;

  SELECT
    COUNT(*) AS PedersonStatementTotal
  FROM Invoice
  WHERE Clientid = 187
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement';

  SELECT
    COUNT(*),
    CompanyCode AS PedersonStatement
  FROM Invoice
  WHERE Clientid = 187
  AND InvoiceType = 'Statement'
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  order by CompanyCode;

  SELECT
    COUNT(*),
    CompanyCode AS PedersonStatementPages
  FROM InvoiceDocs id,
       Invoice i
  WHERE id.InvoiceId = i.InvoiceId
  AND i.InvoiceType = 'Statement'
  AND i.ClientId = 187
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  GROUP BY CompanyCode
  order by CompanyCode;

  --
  SELECT
    COUNT(*),
    CompanyCode AS UCALInvoice
  FROM Invoice
  WHERE Clientid = 170
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode
  order by CompanyCode;
  
   SELECT
    COUNT(*),
    CompanyCode AS ChesapeakeInvoice
  FROM Invoice
  WHERE Clientid = 188
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode
  order by CompanyCode;
  
     SELECT
    COUNT(*),
    CompanyCode AS RocketInvoice
  FROM Invoice
  WHERE Clientid = 189
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode
  order by CompanyCode;
  
       SELECT
    COUNT(*) As CountryFoodsInvoice
  FROM Invoice
  WHERE Clientid = 190
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement';

 SELECT
    COUNT(*) AS MontereyBayInvoice
  FROM Invoice
  WHERE Clientid = 191
  AND ScannedDate >= startDate
  AND ScannedDate < endDate;

   SELECT
    COUNT(*),
    CompanyCode AS LongLewisInvoice
  FROM Invoice
  WHERE Clientid = 195
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType <> 'Statement'
  GROUP BY CompanyCode
  order by CompanyCode;
  
     SELECT
    COUNT(*),
    CompanyCode AS LongLewisStatement
  FROM Invoice
  WHERE Clientid = 195
  AND IsDeleted = 0
  AND ScannedDate >= startDate
  AND ScannedDate < endDate
  AND InvoiceType = 'Statement'
  GROUP BY CompanyCode
  order by CompanyCode;
  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `new_procedure` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `new_procedure`()
BEGIN
  DROP TABLE IF EXISTS T1;

  CREATE TEMPORARY TABLE T1 (
    GLCodeName nvarchar(500) NULL,
    GLCodeId int NULL
  );

  INSERT INTO T1
    SELECT
      CONCAT(SUBSTRING_INDEX (glcodename, '-', 1),
      ', ',
      c.Description,
      ' | ',
      SUBSTRING_INDEX (glcodename, '-', -1)),
      g.glcodeId
    FROM ClientCompany c
      INNER JOIN GLCode g
        ON g.ClientCompanyId = c.Id
    WHERE g.clientid = 34;

  UPDATE GLCode
  SET GLCodeName = (SELECT
      GLCodeName
    FROM T1
    WHERE GLCode.glcodeId = T1.GLCodeId)
  WHERE clientid = 34;

-- select * from T1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `OCREnabledClientCount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `OCREnabledClientCount`(IN clientIdP int)
BEGIN
  SELECT
    COUNT(*)
  FROM `Client` cl
  WHERE cl.CLientId = clientIdP
  AND cl.IsOCRClient = 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `OutputForRobinson` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `OutputForRobinson`()
BEGIN
  (SELECT
      I.`BatchID` AS BatchNum,
      V.`VendorNo` AS VendorId,
      I.`InvoiceNo` AS DocNmbr,
      CASE WHEN I.InvoiceTotal < 0 THEN 5 ELSE 1 END AS DocType,
      'OPEN AP' AS RefeRan,
      '000-2210-00' AS GLACCT,
      '0' AS CREATEDIST,
      '2' AS DISTTYPE,
      I.InvoiceTotal AS CREDIT,
      '0' AS DEBIT,
      I.InvoiceDate AS DOCDATE,
      I.InvoiceId AS DISTRIBUTIONREF,
      I.PaymentDueDate AS DUEDATE,
      DATE_ADD(I.InvoiceDate, INTERVAL V.Discount_Day_01 DAY) AS DICSDATE,
      I.InvoiceTotal * V.NetDisPer AS DICSAMT
    FROM Invoice I
      INNER JOIN `Vendor` V
        ON V.`VendorId` = I.`VendorId`
    WHERE I.ClientId = 49
    AND I.isdeleted = 0
    AND I.ispaused = 0
    AND I.approvalstatusid = 4)
  UNION
  (SELECT
      I.`BatchID` AS BatchNum,
      V.`VendorNo` AS VendorId,
      I.`InvoiceNo` AS DocNmbr,
      CASE WHEN I.InvoiceTotal < 0 THEN 5 ELSE 1 END AS DocType,
      'OPEN AP' AS RefeRan,
      GL.GLCodeName AS GLACCT,
      '0' AS CREATEDIST,
      '6' AS DISTTYPE,
      '0' AS CREDIT,
      AH.AmountAppoved AS DEBIT,
      I.InvoiceDate AS DOCDATE,
      I.InvoiceId AS DISTRIBUTIONREF,
      I.PaymentDueDate AS DUEDATE,
      DATE_ADD(I.InvoiceDate, INTERVAL V.Discount_Day_01 DAY) AS DICSDATE,
      I.InvoiceTotal * V.NetDisPer AS DICSAMT
    FROM Invoice I
      INNER JOIN `ApprovalHistory` AH
        ON AH.`InvoiceId` = I.`InvoiceId`
      INNER JOIN `GLCode` GL
        ON GL.`GLCodeId` = AH.`GLCodeId`
      INNER JOIN `Vendor` V
        ON V.`VendorId` = I.`VendorId`
    WHERE I.ClientId = 49
    AND I.isdeleted = 0
    AND I.ispaused = 0
    AND I.approvalstatusid = 4)
  ORDER BY DISTRIBUTIONREF, DISTTYPE;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `PauseInvoice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `PauseInvoice`(IN MyInvoiceId int,
IN MyPausedDate nvarchar(250),
IN PausedComment nvarchar(250))
BEGIN
  SELECT
    'About to update';
  UPDATE Invoice
  SET IsPaused = 1,
      LastActionBy = 'System',
      LastActionDate = MyPausedDate
  WHERE InvoiceId = MyInvoiceId;
  SELECT
    'About to insert';
  INSERT INTO PausedInvoice (InvoiceId, PausedDate, `Comment`)
    VALUES (MyInvoiceId, MyPausedDate, PausedComment);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `PerformanceReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `PerformanceReport`(IN startDate datetime,
IN endDate datetime)
BEGIN
  DROP TEMPORARY TABLE IF EXISTS PerformanceTableResults;
  CREATE TEMPORARY TABLE PerformanceTableResults (
    `Client` varchar(1000),
    `Full Name` varchar(1000),
    `Approve Count` int
  );
  INSERT INTO PerformanceTableResults
    SELECT
      UCASE(Client.`CustomerName`) `Client`,
      UCASE(CONCAT(FirstName, ' ', LastName)) `Full Name`,
      (SELECT
          COUNT(DISTINCT Performance.InvoiceId)
        FROM Performance
        WHERE Performance.`UserId` = `User`.`UserId`
        AND Performance.`ActionDate` >= startDate
        AND Performance.`ActionDate` <= endDate
        AND Performance.`ActionType` = 3) `Approve Count`
    FROM `User`
      INNER JOIN `Client`
        ON User.`ClientId` = Client.`ClientId`
    WHERE (RoleId = 1
    OR EXISTS (SELECT
        *
      FROM UserRoles
      WHERE UserRoles.RoleId = 1
      AND `User`.`UserId` = UserRoles.`UserId`))
    AND `User`.IsActive = 1
    AND (SELECT
        COUNT(DISTINCT Performance.InvoiceId)
      FROM Performance
      WHERE Performance.`UserId` = `User`.`UserId`
      AND Performance.`ActionDate` >= startDate
      AND Performance.`ActionDate` <= endDate
      AND Performance.`ActionType` = 3) > 0;
  SELECT
    PerformanceR.`Full Name`,
    `Client`,
    SUM(PerformanceR.`Approve Count`) `Approve Count`
  FROM PerformanceTableResults PerformanceR
  GROUP BY `Full Name`
  ORDER BY `Full Name` DESC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `ReassignApprover` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `ReassignApprover`(IN OldUserName nvarchar(50),
IN NewUserName nvarchar(50),
IN StartDate nvarchar(50),
IN EndDate nvarchar(50),
IN IsPermanent bool,
IN ForClientId int)
BEGIN
  -- Get the users and save them in variables
  DECLARE OldUID char(36);
  DECLARE NewUID char(36);
  SET OldUID = (SELECT
      UserId
    FROM `User`
    WHERE ClientId = ForClientId
    AND UserName = OldUserName
    AND IsActive = 1 LIMIT 1);

  SET NewUID = (SELECT
      UserId
    FROM `User`
    WHERE ClientId = ForClientId
    AND UserName = NewUserName LIMIT 1);

  -- If permanent, no need to track of time. Just move all settings to new user
  IF (OldUID IS NOT NULL
    AND NewUID IS NOT NULL) THEN
    -- Move roles to the new user
    INSERT INTO UserRoles (UserId, RoleId)
      SELECT
        NewUID,
        RoleId
      FROM UserRoles t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          RoleId,
          UserId
        FROM UserRoles t2
        WHERE t2.RoleId = t1.RoleId
        AND t2.UserId = NewUID);
    -- Move the GLs from old to new, making sure duplicates are not created
    INSERT INTO ApproverGLCode (UserId, GLCodeId)
      SELECT
        NewUID,
        GLCodeId
      FROM ApproverGLCode t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          GLCodeId,
          UserId
        FROM ApproverGLCode t2
        WHERE t2.GLCodeId = t1.GLCodeId
        AND t2.UserId = NewUID);

    -- Move the departments, making sure duplicates are not created
    INSERT INTO UserDepartment (UserId, DepartmentId)
      SELECT
        NewUID,
        DepartmentId
      FROM UserDepartment t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          DepartmentId
        FROM UserDepartment t2
        WHERE t2.DepartmentId = t1.DepartmentId
        AND t2.UserId = NewUID);
    -- Move CompanyCode
    INSERT INTO UserClientCompanies (UserId, ClientCompanyId)
      SELECT
        NewUID,
        ClientCompanyId
      FROM UserClientCompanies t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          ClientCompanyId
        FROM UserClientCompanies t2
        WHERE t2.ClientCompanyId = t1.ClientCompanyId
        AND t2.UserId = NewUID);
    -- Select 'Top';
    -- Move catchall sub steps
    INSERT INTO ApprovalSubStepCatchAllUsers (UserId, ApprovalSubStepId, Alphabets, PickupFolderName)
      SELECT
        NewUID,
        ApprovalSubStepId,
        Alphabets,
        PickupFolderName
      FROM ApprovalSubStepCatchAllUsers t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          ApprovalSubStepCatchAllUserId,
          ApprovalSubStepId
        FROM ApprovalSubStepCatchAllUsers t2
        WHERE t2.ApprovalSubStepCatchAllUserId = t1.ApprovalSubStepCatchAllUserId
        AND t2.ApprovalSubStepId = t1.ApprovalSubStepId
        AND t2.UserId = NewUID);
    -- Move SubStepUser
    INSERT INTO ApprovalSubStepUser (UserId, ApprovalSubStepId, ManualAssignmentOnly)
      SELECT
        NewUID,
        ApprovalSubStepId,
        ManualAssignmentOnly
      FROM ApprovalSubStepUser t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          ApprovalSubStepId
        FROM ApprovalSubStepUser t2
        WHERE t2.ApprovalSubStepId = t1.ApprovalSubStepId
        AND t2.UserId = NewUID);
    -- Select '2';
    -- Move SubStepUserDepartment
    INSERT INTO ApprovalSubStepUserDepartment (UserId, ApprovalSubStepId, DepartmentId)
      SELECT
        NewUID,
        ApprovalSubStepId,
        DepartmentId
      FROM ApprovalSubStepUserDepartment t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          ApprovalSubStepId,
          DepartmentId
        FROM ApprovalSubStepUserDepartment t2
        WHERE t2.ApprovalSubStepId = t1.ApprovalSubStepId
        AND t2.DepartmentId = t1.DepartmentId
        AND t2.UserId = NewUID);
    -- Move SubSteUserGL
    INSERT INTO ApprovalSubStepUserGL (UserId, ApprovalSubStepId, GLCodeId)
      SELECT
        NewUID,
        ApprovalSubStepId,
        GLCodeId
      FROM ApprovalSubStepUserGL t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          ApprovalSubStepId,
          GLCodeId
        FROM ApprovalSubStepUserGL t2
        WHERE t2.ApprovalSubStepId = t1.ApprovalSubStepId
        AND t2.GLCodeId = t1.GLCodeId
        AND t2.UserId = NewUID);
    -- Move substep user vendor
    INSERT INTO ApprovalSubStepUserVendor (UserId, VendorId, ApprovalSubStepId, FirstEscalationManagerId, SecondEscalationManagerId, ThirdEscalationManagerId, Duration)
      SELECT
        NewUID,
        VendorId,
        ApprovalSubStepId,
        FirstEscalationManagerId,
        SecondEscalationManagerId,
        ThirdEscalationManagerId,
        Duration
      FROM ApprovalSubStepUserVendor t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          VendorId,
          ApprovalSubStepId
        FROM ApprovalSubStepUserVendor t2
        WHERE t2.VendorId = t1.VendorId
        AND t2.ApprovalSubStepId = t1.ApprovalSubStepId
        AND t2.UserId = NewUID);
    -- Select '3';
    -- Move substep user account number
    INSERT INTO `ApprovalSubStepUserVendorAccountNumber` (UserId, VendorId, AccountNumber, ApprovalSubStepId, FirstEscalationManagerId, SecondEscalationManagerId, ThirdEscalationManagerId, Duration)
      SELECT
        NewUID,
        VendorId,
        AccountNumber,
        ApprovalSubStepId,
        FirstEscalationManagerId,
        SecondEscalationManagerId,
        ThirdEscalationManagerId,
        Duration
      FROM `ApprovalSubStepUserVendorAccountNumber` t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          VendorId,
          AccountNumber,
          ApprovalSubStepId
        FROM `ApprovalSubStepUserVendorAccountNumber` t2
        WHERE t2.VendorId = t1.VendorId
        AND t2.ApprovalSubStepId = t1.ApprovalSubStepId
        AND t2.AccountNumber = t1.AccountNumber
        AND t2.UserId = NewUID);
    -- Move Vendor Aplphabet
    INSERT INTO `ApprovalSubStepUserVendorAlphabet` (UserId, ApprovalSubStepId, Alphabets)
      SELECT
        NewUID,
        ApprovalSubStepId,
        Alphabets
      FROM `ApprovalSubStepUserVendorAlphabet` t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          ApprovalSubStepId
        FROM `ApprovalSubStepUserVendorAlphabet` t2
        WHERE t2.ApprovalSubStepId = t1.ApprovalSubStepId
        AND t2.UserId = NewUID);
    -- Move substep user vendor department
    INSERT INTO `ApprovalSubStepUserVendorDepartment` (UserId, VendorId, DepartmentId, ApprovalSubStepId, FirstEscalationManagerId, SecondEscalationManagerId, ThirdEscalationManagerId, Duration)
      SELECT
        NewUID,
        VendorId,
        DepartmentId,
        ApprovalSubStepId,
        FirstEscalationManagerId,
        SecondEscalationManagerId,
        ThirdEscalationManagerId,
        Duration
      FROM `ApprovalSubStepUserVendorDepartment` t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          VendorId,
          DepartmentId,
          ApprovalSubStepId
        FROM `ApprovalSubStepUserVendorDepartment` t2
        WHERE t2.VendorId = t1.VendorId
        AND t2.ApprovalSubStepId = t1.ApprovalSubStepId
        AND t2.DepartmentId = t1.DepartmentId
        AND t2.UserId = NewUID);

    -- Move substep user vendor GL
    INSERT INTO `ApprovalSubStepUserVendorGL` (UserId, VendorId, GLCodeId, ApprovalSubStepId, FirstEscalationManagerId, SecondEscalationManagerId, ThirdEscalationManagerId, Duration)
      SELECT
        NewUID,
        VendorId,
        GLCodeId,
        ApprovalSubStepId,
        FirstEscalationManagerId,
        SecondEscalationManagerId,
        ThirdEscalationManagerId,
        Duration
      FROM `ApprovalSubStepUserVendorGL` t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          VendorId,
          GLCodeId,
          ApprovalSubStepId
        FROM `ApprovalSubStepUserVendorGL` t2
        WHERE t2.VendorId = t1.VendorId
        AND t2.ApprovalSubStepId = t1.ApprovalSubStepId
        AND t2.GLCodeId = t1.GLCodeId
        AND t2.UserId = NewUID);
    -- Select '4';
    -- Move Approval Workflow
    INSERT INTO `ApprovalWorkFlow` (UserId, VendorId, Title, ExceptionHandlerId, CurrentLevelUserId, FirstEscalationManagerId, SeondEscalationManagerId, ThirdEscalationManagerId, Duration, `Type`)
      SELECT
        NewUID,
        VendorId,
        Title,
        ExceptionHandlerId,
        CurrentLevelUserId,
        FirstEscalationManagerId,
        SeondEscalationManagerId,
        ThirdEscalationManagerId,
        Duration,
        `Type`
      FROM `ApprovalWorkFlow` t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          VendorId
        FROM `ApprovalWorkFlow` t2
        WHERE t2.VendorId = t1.VendorId
        AND t2.UserId = NewUID);
    -- Move by amount
    -- delete any existing approver by amount from the assignee before reassigning
    DELETE
      FROM `ApproverByAmount`
    WHERE UserId = NewUID;

    INSERT INTO `ApproverByAmount` (UserId, VendorId, MaximumAllowedAmount, SecondApproverId, AuthCode, IsPOIsNoPOIsBoth, WorkflowType)
      SELECT
        NewUID,
        VendorId,
        MaximumAllowedAmount,
        SecondApproverId,
        AuthCode,
        IsPOIsNoPOIsBoth,
        WorkflowType
      FROM `ApproverByAmount` t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          VendorId
        FROM `ApproverByAmount` t2
        WHERE t2.VendorId = t1.VendorId
        AND t2.UserId = NewUID);
    -- Select '5';
    -- Move Approval Settting, which should move active assigments
    INSERT INTO `ApproverSetting` (UserId, InvoiceId, DateIssued, IsDelegated, IsApproved, IsEscalated, OrderNo, IsHold, RecoveryDate)
      SELECT
        NewUID,
        InvoiceId,
        DateIssued,
        IsDelegated,
        IsApproved,
        IsEscalated,
        OrderNo,
        IsHold,
        RecoveryDate
      FROM `ApproverSetting` t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          InvoiceId
        FROM `ApproverSetting` t2
        WHERE t2.InvoiceId = t1.InvoiceId
        AND t2.UserId = NewUID);
    -- Move User invoice assignment, which also should move active assigments
    INSERT INTO `UserInvoiceAssignment` (UserId, InvoiceId, `Type`, State, ApprovalSubStepId, HoldStartDate, HoldEndDate, DateCreated, AssignBackToUserId)
      SELECT
        NewUID,
        InvoiceId,
        `Type`,
        State,
        ApprovalSubStepId,
        HoldStartDate,
        HoldEndDate,
        DateCreated,
        AssignBackToUserId
      FROM `UserInvoiceAssignment` t1
      WHERE UserId = OldUID
      AND NOT EXISTS (SELECT
          UserId,
          InvoiceId
        FROM `UserInvoiceAssignment` t2
        WHERE t2.InvoiceId = t1.InvoiceId
        AND t2.UserId = NewUID);
    -- Delete if permanent. Otherwise, just disable user   
    IF (IsPermanent = TRUE) THEN
      DELETE
        FROM UserRoles
      WHERE UserId = OldUID;
      DELETE
        FROM ApproverGLCode
      WHERE UserId = OldUID;
      DELETE
        FROM UserDepartment
      WHERE UserId = OldUID;
      DELETE
        FROM UserClientCompanies
      WHERE UserId = OldUID;
      DELETE
        FROM ApprovalSubStepCatchAllUsers
      WHERE UserId = OldUID;
      DELETE
        FROM ApprovalSubStepUserDepartment
      WHERE UserId = OldUID;
      DELETE
        FROM ApprovalSubStepUserGL
      WHERE UserId = OldUID;
      DELETE
        FROM ApprovalSubStepUserVendor
      WHERE UserId = OldUID;
      DELETE
        FROM ApprovalSubStepUserVendorAccountNumber
      WHERE UserId = OldUID;
      DELETE
        FROM ApprovalSubStepUserVendorAlphabet
      WHERE UserId = OldUID;
      DELETE
        FROM ApprovalSubStepUserVendorDepartment
      WHERE UserId = OldUID;
      DELETE
        FROM ApprovalSubStepUserVendorGL
      WHERE UserId = OldUID;
      DELETE
        FROM ApprovalSubStepUser
      WHERE UserId = OldUID;
      DELETE
        FROM ApprovalWorkFlow
      WHERE UserId = OldUID;
      DELETE
        FROM ApproverByAmount
      WHERE UserId = OldUID;
      DELETE
        FROM ApproverSetting
      WHERE UserId = OldUID;
      DELETE
        FROM UserInvoiceAssignment
      WHERE UserId = OldUID;
    END IF;
    -- Update `User` Set IsActive = 0 where UserId = OldUID;

    -- Save reassignment log
    INSERT INTO ReassignUser
      VALUES (NULL, OldUID, NewUID, CURDATE(), CURDATE(), IsPermanent, 1);

    SELECT
      'Done';
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `RemoveGRNPOData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `RemoveGRNPOData`(IN POClientId int,
IN POPONumber varchar(250),
IN POPOLineId varchar(250),
IN PORcvTransactionId varchar(250))
BEGIN

  DELETE LineItemDetail.*
    FROM LineItemDetail
      INNER JOIN Invoice
        ON LineItemDetail.`InvoiceId` = `Invoice`.`InvoiceId`
        AND Invoice.`ClientId` = POClientId
        AND Invoice.`ApprovalStatusId` IN (1, 3, 6)
  WHERE LineItemDetail.`POId` IN (SELECT
        PO.`Id`
      FROM PO
      WHERE PO.ClientId = POClientId
      AND PO.`GRNUse` = 1
      AND PO.`PONumber` = POPONumber
      AND PO.`POLineId` = POPOLineId
      AND PO.`RecievedTransactionId` = PORcvTransactionId);

  DELETE
    FROM PO
  WHERE PO.ClientId = POClientId
    AND PO.`GRNUse` = 1
    AND PO.`PONumber` = POPONumber
    AND PO.`POLineId` = POPOLineId
    AND PO.`RecievedTransactionId` = PORcvTransactionId;

  SELECT
    ROW_COUNT();
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `RemoveNonGRNPOData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `RemoveNonGRNPOData`(IN POClientId int,
IN POPONumber varchar(250),
IN POLineNo varchar(250))
BEGIN

  DELETE LineItemDetail.*
    FROM LineItemDetail
      INNER JOIN Invoice
        ON LineItemDetail.`InvoiceId` = `Invoice`.`InvoiceId`
        AND Invoice.`ClientId` = POClientId
        AND Invoice.`ApprovalStatusId` IN (1, 3, 6)
  WHERE LineItemDetail.`POId` IN (SELECT
        PO.`Id`
      FROM PO
      WHERE PO.ClientId = POClientId
      AND PO.`PONumber` = POPONumber
      AND PO.`LineNo` = POLineNo
      AND PO.`GRNUse` = 0);

  DELETE
    FROM PO
  WHERE PO.ClientId = POClientId
    AND PO.`PONumber` = POPONumber
    AND PO.`LineNo` = POLineNo
    AND PO.`GRNUse` = 0;

  SELECT
    ROW_COUNT();
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `RobinsonSpreedsheetOutput` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `RobinsonSpreedsheetOutput`()
BEGIN
  DECLARE AccountCode int(11);
  DECLARE ClientIdVal int(11);
  SELECT
    Client.`AccountCode`,
    Client.`ClientId` INTO AccountCode, ClientIdVal
  FROM Client
  WHERE ClientId = 64;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SearchWO` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `SearchWO`(
    IN fromDate datetime,
    IN toDate datetime,
    IN woNumber varchar(50),
    IN serviceDescription varchar(250),
    IN woTypeArray varchar(255),
    IN vendorIdArray varchar(255),
    IN propertyIdArray varchar(255),
    IN showMatched varchar(255))
BEGIN
    -- Ensure fromDate and toDate are valid
    SET fromDate = IFNULL(fromDate, '0000-00-00 00:00:00');
    SET toDate = IFNULL(toDate, '9999-12-31 23:59:59');

    IF showMatched = 'all' THEN
        SELECT
            w.*,
            m.WODetailId,
            m.WOSummary,
            m.MatchedDate,
            CONCAT(v.VendorNo, '-', v.VendorName) AS VendorName,
            d.DepartmentName AS PropertyName
        FROM (
            SELECT *
            FROM WO
            WHERE (fromDate = '0000-00-00 00:00:00'
            OR ServiceDate >= fromDate)
            AND (toDate = '9999-12-31 23:59:59'
            OR ServiceDate < DATE_ADD(toDate, INTERVAL 1 DAY))
        ) AS w
        LEFT JOIN WOToWODetailMatch AS m ON w.WOID = m.WOId
        INNER JOIN Vendor v ON v.VendorId = w.VendorId
        INNER JOIN Department d ON d.Id = w.PropertyId
        WHERE (woNumber IS NULL OR woNumber = '' OR WONumber COLLATE utf8mb4_general_ci LIKE CONCAT('%', woNumber COLLATE utf8mb4_general_ci, '%'))
        AND (woTypeArray IS NULL OR woTypeArray = '' OR FIND_IN_SET(w.WOType, woTypeArray) > 0)
        AND (serviceDescription IS NULL OR serviceDescription = '' OR w.ServiceDescription COLLATE utf8mb4_general_ci LIKE CONCAT('%', serviceDescription COLLATE utf8mb4_general_ci, '%'))
        AND (vendorIdArray IS NULL OR vendorIdArray = '' OR FIND_IN_SET(w.VendorId, vendorIdArray) > 0)
        AND (propertyIdArray IS NULL OR propertyIdArray = '' OR FIND_IN_SET(w.PropertyId, propertyIdArray) > 0);
    ELSEIF showMatched = 'yes' THEN
        SELECT
            w.*,
            m.WODetailId,
            m.WOSummary,
            m.MatchedDate,
            CONCAT(v.VendorNo, '-', v.VendorName) AS VendorName,
            d.DepartmentName AS PropertyName
        FROM (
            SELECT *
            FROM WO
            WHERE (fromDate = '0000-00-00 00:00:00'
            OR ServiceDate >= fromDate)
            AND (toDate = '9999-12-31 23:59:59'
            OR ServiceDate < DATE_ADD(toDate, INTERVAL 1 DAY))
        ) AS w
        INNER JOIN WOToWODetailMatch AS m ON w.WOID = m.WOId
        INNER JOIN Vendor v ON v.VendorId = w.VendorId
        INNER JOIN Department d ON d.Id = w.PropertyId
        WHERE (woNumber IS NULL OR woNumber = '' OR WONumber COLLATE utf8mb4_general_ci LIKE CONCAT('%', woNumber COLLATE utf8mb4_general_ci, '%'))
        AND (woTypeArray IS NULL OR woTypeArray = '' OR FIND_IN_SET(w.WOType, woTypeArray) > 0)
        AND (serviceDescription IS NULL OR serviceDescription = '' OR w.ServiceDescription COLLATE utf8mb4_general_ci LIKE CONCAT('%', serviceDescription COLLATE utf8mb4_general_ci, '%'))
        AND (vendorIdArray IS NULL OR vendorIdArray = '' OR FIND_IN_SET(w.VendorId, vendorIdArray) > 0)
        AND (propertyIdArray IS NULL OR propertyIdArray = '' OR FIND_IN_SET(w.PropertyId, propertyIdArray) > 0)
        AND m.WODetailId IS NOT NULL;
    ELSEIF showMatched = 'no' THEN
        SELECT
            w.*,
            m.WODetailId,
            m.WOSummary,
            m.MatchedDate,
            CONCAT(v.VendorNo, '-', v.VendorName) AS VendorName,
            d.DepartmentName AS PropertyName
        FROM (
            SELECT *
            FROM WO
            WHERE (fromDate = '0000-00-00 00:00:00'
            OR ServiceDate >= fromDate)
            AND (toDate = '9999-12-31 23:59:59'
            OR ServiceDate < DATE_ADD(toDate, INTERVAL 1 DAY))
        ) AS w
        LEFT JOIN WOToWODetailMatch AS m ON w.WOID = m.WOId
        INNER JOIN Vendor v ON v.VendorId = w.VendorId
        INNER JOIN Department d ON d.Id = w.PropertyId
        WHERE (woNumber IS NULL OR woNumber = '' OR WONumber COLLATE utf8mb4_general_ci LIKE CONCAT('%', woNumber COLLATE utf8mb4_general_ci, '%'))
        AND (woTypeArray IS NULL OR woTypeArray = '' OR FIND_IN_SET(w.WOType, woTypeArray) > 0)
        AND (serviceDescription IS NULL OR serviceDescription = '' OR w.ServiceDescription COLLATE utf8mb4_general_ci LIKE CONCAT('%', serviceDescription COLLATE utf8mb4_general_ci, '%'))
        AND (vendorIdArray IS NULL OR vendorIdArray = '' OR FIND_IN_SET(w.VendorId, vendorIdArray) > 0)
        AND (propertyIdArray IS NULL OR propertyIdArray = '' OR FIND_IN_SET(w.PropertyId, propertyIdArray) > 0)
        AND m.WOId IS NULL;
    ELSE
        SELECT
            w.*,
            m.WODetailId,
            m.WOSummary,
            m.MatchedDate,
            '' AS VendorName,
            '' AS PropertyName
        FROM WOToWODetailMatch AS m
        LEFT JOIN WO AS w ON w.WOId = m.WOId
        WHERE w.WOId IS NULL;
    END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SICSDEReportAPSHTML` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `SICSDEReportAPSHTML`(startDate datetime, endDate datetime)
BEGIN
  -- Day time Non-Validation
  DROP TABLE IF EXISTS SICSDEReportAPSHTMLT1;
  DROP TABLE IF EXISTS SICSDEReportAPSHTMLT2;
  CREATE TEMPORARY TABLE SICSDEReportAPSHTMLT1 (
    Actor nvarchar(500) NULL,
    InvoiceId int NULL
  );

  INSERT INTO SICSDEReportAPSHTMLT1
    SELECT DISTINCT
      Actor,
      InvoiceId
    FROM InvoiceHistory
    WHERE ActionDate < endDate
    AND ActionDate > startDate
    AND `Action` <> 'Validation'
    AND `Field` <> 'Invoice Status'
    -- and actor='Bogale Jigssa'
    AND ActorId IN (SELECT
        u.UserId
      FROM `User` u
        INNER JOIN UserRoles ur
          ON u.UserId = ur.UserId
          AND (ur.RoleId = 4
          OR u.Email LIKE '%@SICSITOutsourcing.com'
          OR u.Email LIKE '%@Cloudxdpo.com')
          AND email <> 'whamed@cloudxdpo.com');
  SELECT
    t.actor,
    COUNT(i.invoiceid),
    c.customername
  FROM SICSDEReportAPSHTMLT1 t
    INNER JOIN Invoice i
      ON i.invoiceid = t.invoiceid
    INNER JOIN `Client` c
      ON c.clientid = i.clientid
  GROUP BY t.actor,
           c.customername
  ORDER BY c.customername, t.actor;
  -- Day time Validation Only
  CREATE TEMPORARY TABLE SICSDEReportAPSHTMLT2 (
    Actor nvarchar(500),
    InvoiceId int
  );
  INSERT INTO SICSDEReportAPSHTMLT2
    SELECT DISTINCT
      actor,
      invoiceid
    FROM InvoiceHistory
    WHERE actiondate < endDate
    AND actiondate > startDate
    AND `action` = 'Validation';
  SELECT
    t.actor,
    COUNT(i.invoiceid),
    c.customername
  FROM SICSDEReportAPSHTMLT2 t
    INNER JOIN Invoice i
      ON i.invoiceid = t.invoiceid
    INNER JOIN `Client` c
      ON c.clientid = i.clientid
  GROUP BY t.actor,
           c.customername
  ORDER BY c.customername, t.actor;
  -- Invoice Total
  SELECT
    c.CustomerName,
    COUNT(*)
  FROM Invoice i,
       Client c
  WHERE ScannedDate >= startDate
  AND ScannedDate < endDate
  AND c.ClientId = i.ClientId
  GROUP BY c.CustomerName;
  DROP TABLE IF EXISTS SICSDEReportAPSHTMLT1;
  DROP TABLE IF EXISTS SICSDEReportAPSHTMLT2;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SICSQCReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `SICSQCReport`(IN startDate datetime,
IN noOfDays int)
BEGIN
  DROP TEMPORARY TABLE IF EXISTS SICSAPSmartQCReportResults;
  CREATE TEMPORARY TABLE SICSAPSmartQCReportResults (
    `Client` varchar(1000),
    `Full Name` varchar(1000),
    `QC Count` int,
    `Validation Count` int
  );
  INSERT INTO SICSAPSmartQCReportResults
    SELECT
      UCASE(Client.`CustomerName`) `Client`,
      UCASE(CONCAT(FirstName, ' ', LastName)) `Full Name`,
      (SELECT
          COUNT(DISTINCT InvoiceHistory.InvoiceId)
        FROM InvoiceHistory
        WHERE InvoiceHistory.`ActorId` = `User`.`UserId`
        AND InvoiceHistory.`ActionDate` >= startDate
        AND InvoiceHistory.`ActionDate` < DATE_ADD(startDate, INTERVAL noOfDays DAY)
        AND InvoiceHistory.`Action` = 'QC'
        AND (((InvoiceHistory.PreviousData IS NULL
        OR InvoiceHistory.PreviousData = '')
        AND InvoiceHistory.NewData IS NOT NULL
        AND InvoiceHistory.NewData <> '')
        OR ((InvoiceHistory.NewData IS NULL
        OR InvoiceHistory.NewData = '')
        AND InvoiceHistory.PreviousData IS NOT NULL
        AND InvoiceHistory.PreviousData <> ''))
        AND (InitialStatus = ''
        OR InitialStatus IS NULL)
        AND (CurrentStatus = ''
        OR CurrentStatus IS NULL)) `QC Count`,
      (SELECT
          COUNT(DISTINCT InvoiceHistory.InvoiceId)
        FROM InvoiceHistory
        WHERE InvoiceHistory.`ActorId` = `User`.`UserId`
        AND InvoiceHistory.`ActionDate` >= startDate
        AND InvoiceHistory.`ActionDate` < DATE_ADD(startDate, INTERVAL noOfDays DAY)
        AND InvoiceHistory.`Action` = 'Validation') `Validation Count`
    FROM `User`
      INNER JOIN `Client`
        ON User.`ClientId` = Client.`ClientId`
    WHERE (RoleId = 4
    OR EXISTS (SELECT
        *
      FROM UserRoles
      WHERE UserRoles.RoleId = 4
      AND `User`.`UserId` = UserRoles.`UserId`))
    AND `User`.IsActive = 1
    AND ((SELECT
        COUNT(DISTINCT InvoiceHistory.InvoiceId)
      FROM InvoiceHistory
      WHERE InvoiceHistory.`ActorId` = `User`.`UserId`
      AND InvoiceHistory.`ActionDate` >= startDate
      AND InvoiceHistory.`ActionDate` < DATE_ADD(startDate, INTERVAL noOfDays DAY)
      AND InvoiceHistory.`Action` = 'QC'
      AND (((InvoiceHistory.PreviousData IS NULL
      OR InvoiceHistory.PreviousData = '')
      AND InvoiceHistory.NewData IS NOT NULL
      AND InvoiceHistory.NewData <> '')
      OR ((InvoiceHistory.NewData IS NULL
      OR InvoiceHistory.NewData = '')
      AND InvoiceHistory.PreviousData IS NOT NULL
      AND InvoiceHistory.PreviousData <> ''))
      AND (InitialStatus = ''
      OR InitialStatus IS NULL)
      AND (CurrentStatus = ''
      OR CurrentStatus IS NULL)) > 0
    OR (SELECT
        COUNT(DISTINCT InvoiceHistory.InvoiceId)
      FROM InvoiceHistory
      WHERE InvoiceHistory.`ActorId` = `User`.`UserId`
      AND InvoiceHistory.`ActionDate` >= startDate
      AND InvoiceHistory.`ActionDate` < DATE_ADD(startDate, INTERVAL noOfDays DAY)
      AND InvoiceHistory.`Action` = 'Validation') > 0);
  INSERT INTO SICSAPSmartQCReportResults
    SELECT
      CONCAT(UCASE(Client.`CustomerName`), ' - AR') `Client`,
      UCASE(CONCAT(FirstName, ' ', LastName)) `Full Name`,
      (SELECT
          COUNT(DISTINCT InvoiceHistory.InvoiceId)
        FROM ARSmart.InvoiceHistory
        WHERE InvoiceHistory.`ActorId` = `User`.`UserId`
        AND InvoiceHistory.`ActionDate` >= startDate
        AND InvoiceHistory.`ActionDate` < DATE_ADD(startDate, INTERVAL noOfDays DAY)
        AND InvoiceHistory.`Action` = 'QC'
        AND (((InvoiceHistory.PreviousData IS NULL
        OR InvoiceHistory.PreviousData = '')
        AND InvoiceHistory.NewData IS NOT NULL
        AND InvoiceHistory.NewData <> '')
        OR ((InvoiceHistory.NewData IS NULL
        OR InvoiceHistory.NewData = '')
        AND InvoiceHistory.PreviousData IS NOT NULL
        AND InvoiceHistory.PreviousData <> ''))
        AND (InitialStatus = ''
        OR InitialStatus IS NULL)
        AND (CurrentStatus = ''
        OR CurrentStatus IS NULL)) `QC Count`,
      (SELECT
          COUNT(DISTINCT InvoiceHistory.InvoiceId)
        FROM ARSmart.InvoiceHistory
        WHERE InvoiceHistory.`ActorId` = `User`.`UserId`
        AND InvoiceHistory.`ActionDate` >= startDate
        AND InvoiceHistory.`ActionDate` < DATE_ADD(startDate, INTERVAL noOfDays DAY)
        AND InvoiceHistory.`Action` = 'Validation') `Validation Count`
    FROM ARSmart.`User`
      INNER JOIN ARSmart.`Client`
        ON User.`ClientId` = Client.`ClientId`
    WHERE (RoleId = 4
    OR EXISTS (SELECT
        *
      FROM ARSmart.UserRoles
      WHERE UserRoles.RoleId = 4
      AND `User`.`UserId` = UserRoles.`UserId`))
    AND `User`.IsActive = 1
    AND ((SELECT
        COUNT(DISTINCT InvoiceHistory.InvoiceId)
      FROM ARSmart.InvoiceHistory
      WHERE InvoiceHistory.`ActorId` = `User`.`UserId`
      AND InvoiceHistory.`ActionDate` >= startDate
      AND InvoiceHistory.`ActionDate` < DATE_ADD(startDate, INTERVAL noOfDays DAY)
      AND InvoiceHistory.`Action` = 'QC'
      AND (((InvoiceHistory.PreviousData IS NULL
      OR InvoiceHistory.PreviousData = '')
      AND InvoiceHistory.NewData IS NOT NULL
      AND InvoiceHistory.NewData <> '')
      OR ((InvoiceHistory.NewData IS NULL
      OR InvoiceHistory.NewData = '')
      AND InvoiceHistory.PreviousData IS NOT NULL
      AND InvoiceHistory.PreviousData <> ''))
      AND (InitialStatus = ''
      OR InitialStatus IS NULL)
      AND (CurrentStatus = ''
      OR CurrentStatus IS NULL)) > 0
    OR (SELECT
        COUNT(DISTINCT InvoiceHistory.InvoiceId)
      FROM ARSmart.InvoiceHistory
      WHERE InvoiceHistory.`ActorId` = `User`.`UserId`
      AND InvoiceHistory.`ActionDate` >= startDate
      AND InvoiceHistory.`ActionDate` < DATE_ADD(startDate, INTERVAL noOfDays DAY)
      AND InvoiceHistory.`Action` = 'Validation') > 0);
  -- SELECT * FROM SICSAPSmartQCReportResults SICSQCRR order by `Client`, `Full Name`;
  -- SELECT SICSQCRR.`Full Name`, SUM(SICSQCRR.`QC Count`) `QC Count`, SUM(SICSQCRR.`Validation Count`) `Validation Count`
  -- FROM SICSAPSmartQCReportResults SICSQCRR GROUP BY `Full Name`
  -- ORDER BY `Full Name`;
  INSERT INTO SICSAPSmartQCReportResults
    SELECT
      UCASE(Client.`CustomerName`) `Client`,
      UCASE(CONCAT(FirstName, ' ', LastName)) `Full Name`,
      (SELECT
          COUNT(DISTINCT PODHistory.PODId)
        FROM PODSmart.PODHistory
        WHERE PODHistory.`ActorId` = `User`.`UserId`
        AND PODHistory.`ActionDate` >= startDate
        AND PODHistory.`ActionDate` < DATE_ADD(startDate, INTERVAL noOfDays DAY)
        AND PODHistory.`Action` = 'Update'
        AND (((PODHistory.PreviousData IS NULL
        OR PODHistory.PreviousData = '')
        AND PODHistory.NewData IS NOT NULL
        AND PODHistory.NewData <> '')
        OR ((PODHistory.NewData IS NULL
        OR PODHistory.NewData = '')
        AND PODHistory.PreviousData IS NOT NULL
        AND PODHistory.PreviousData <> ''))) `QC Count`,
      0 `Validation Count`
    FROM PODSmart.`User`
      INNER JOIN PODSmart.`Client`
        ON User.`ClientId` = Client.`ClientId`
    WHERE (RoleId = 3
    OR EXISTS (SELECT
        *
      FROM PODSmart.UserRoles
      WHERE UserRoles.RoleId = 3
      AND `User`.`UserId` = UserRoles.`UserId`))
    AND `User`.IsActive = 1
    AND ((SELECT
        COUNT(DISTINCT PODHistory.PODId)
      FROM PODSmart.PODHistory
      WHERE PODHistory.`ActorId` = `User`.`UserId`
      AND PODHistory.`ActionDate` >= startDate
      AND PODHistory.`ActionDate` < DATE_ADD(startDate, INTERVAL noOfDays DAY)
      AND PODHistory.`Action` = 'Update'
      AND (((PODHistory.PreviousData IS NULL
      OR PODHistory.PreviousData = '')
      AND PODHistory.NewData IS NOT NULL
      AND PODHistory.NewData <> '')
      OR ((PODHistory.NewData IS NULL
      OR PODHistory.NewData = '')
      AND PODHistory.PreviousData IS NOT NULL
      AND PODHistory.PreviousData <> ''))) > 0)
    ORDER BY `Full Name`;
  -- SELECT `Full Name`, `Client`, `QC Count`, `Validation Count` FROM SICSAPSmartQCReportResults SICSQCRR order by `Full Name`, `Client`;
  SELECT
    SICSQCRR.`Full Name`,
    GROUP_CONCAT(CONCAT(`Client`, ' - QC: ', `QC Count`, ', V: ', `Validation Count`, '; ') SEPARATOR '') `Client`,
    SUM(SICSQCRR.`QC Count`) `QC Count`,
    SUM(SICSQCRR.`Validation Count`) `Validation Count`
  FROM SICSAPSmartQCReportResults SICSQCRR
  GROUP BY `Full Name`
  ORDER BY SUM(`QC Count`) DESC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `spGetApprovalWorkFlow` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `spGetApprovalWorkFlow`(IN ClientId int, IN filterText nvarchar(50))
BEGIN
  SELECT DISTINCT
    CONCAT(u.FirstName, ' ', u.LastName) AS FirstApprover,
    cc.CompanyCode,
    sa.`StepName`,
    ass.SubStepName,
    dd.DepartmentName
  FROM User u
    INNER JOIN ApprovalSubStepUserDepartment assd
      ON u.UserId = assd.UserId
    INNER JOIN ApprovalSubStep ass
      ON ass.ApprovalSubStepId = assd.ApprovalSubStepId
    INNER JOIN Department dd
      ON dd.Id = assd.DepartmentId
    INNER JOIN ApprovalStep sa
      ON sa.ApprovalStepId = ass.ApprovalStepId
    INNER JOIN ClientCompany cc
      ON cc.Id = sa.ClientCompanyId
  WHERE u.ClientId = ClientId
  AND u.IsCloudxUser = FALSE
  AND u.FirstName LIKE CONCAT(filterText, '%')
  ORDER BY FirstApprover, CompanyCode;

-- WHERE v.ClientId = ClientId AND u.FirstName LIKE CONCAT(filterText,'%') ORDER BY FirstApprover;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `spGetApprovalWorkFlowByVendor` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `spGetApprovalWorkFlowByVendor`(IN ClientId int, IN filterText nvarchar(50))
BEGIN
  SET @approvalStepUserFilterType := (SELECT
      u.ApprovalStepUserFilterType
    FROM ApprovalSubStepUserFilter u
      JOIN ApprovalSubStep a
        ON u.ApprovalSubStepId = a.ApprovalSubStepId
      JOIN ApprovalStep b
        ON a.ApprovalStepId = b.ApprovalStepId
      JOIN `Client` c
        ON b.ClientId = ClientId
    LIMIT 1);
  IF @approvalStepUserFilterType = 0 THEN
    SELECT DISTINCT
      CONCAT(u.FirstName, ' ', u.LastName) AS FirstApprover,
      cc.CompanyCode,
      sa.`StepName`,
      ass.SubStepName,
      v.VendorNo,
      v.VendorName
    FROM `User` u
      LEFT JOIN ApprovalSubStepUserVendor assv
        ON u.UserId = assv.UserId
      LEFT JOIN ApprovalSubStep ass
        ON ass.ApprovalSubStepId = assv.ApprovalSubStepId
      LEFT JOIN Vendor v
        ON v.VendorId = assv.VendorId
      LEFT JOIN ApprovalStep sa
        ON sa.ApprovalStepId = ass.ApprovalStepId
      LEFT JOIN ClientCompany cc
        ON cc.Id = sa.ClientCompanyId
    WHERE u.ClientId = ClientId
    AND u.IsCloudxUser = FALSE
    AND u.FirstName LIKE CONCAT(filterText, '%')
    ORDER BY FirstApprover, CompanyCode;
  END IF;
  IF @approvalStepUserFilterType = 5 THEN
    SELECT DISTINCT
      CONCAT(u.FirstName, ' ', u.LastName) AS FirstApprover,
      cc.CompanyCode,
      sa.`StepName`,
      ass.SubStepName,
      v.VendorNo,
      v.VendorName,
      d.`DepartmentName` AS Address
    FROM `User` u
      LEFT JOIN `ApprovalSubStepUserVendorDepartment` assv
        ON u.UserId = assv.UserId
      LEFT JOIN ApprovalSubStep ass
        ON ass.ApprovalSubStepId = assv.ApprovalSubStepId
      LEFT JOIN Vendor v
        ON v.VendorId = assv.VendorId
      LEFT JOIN ApprovalStep sa
        ON sa.ApprovalStepId = ass.ApprovalStepId
      LEFT JOIN ClientCompany cc
        ON cc.Id = sa.ClientCompanyId
      JOIN `Department` AS d
        ON assv.`DepartmentId` = d.`Id`
    WHERE u.ClientId = ClientId
    AND u.IsCloudxUser = FALSE
    AND u.FirstName LIKE CONCAT(filterText, '%')
    ORDER BY FirstApprover, CompanyCode;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `spGetInvoiceProcessReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `spGetInvoiceProcessReport`()
BEGIN

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `spGetUserLimit` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `spGetUserLimit`(IN ClientId int, IN filterText nvarchar(50))
BEGIN
  IF filterText IS NULL THEN
    SELECT DISTINCT
      CONCAT(u.FirstName, ' ', u.LastName) AS FirstApprover,
      u.IsActive,
      (
      CASE WHEN aba.MaximumAllowedAmount IS NULL THEN 'Not Set' ELSE aba.MaximumAllowedAmount END) AS MaximumAmount,
      (CASE WHEN aba.SecondApproverId IS NULL THEN 'Not Set' ELSE (SELECT
              CONCAT(mgr.FirstName, ' ', mgr.LastName)
            FROM User mgr
            WHERE mgr.UserId = aba.SecondApproverId LIMIT 1) END) AS SecondApprover,
      d.DepartmentName,
      ass.SubStepName,
      v.VendorName
    FROM User u
      LEFT OUTER JOIN ApprovalSubStepUser assu
        ON assu.UserId = u.UserId
      LEFT OUTER JOIN ApprovalSubStep ass
        ON ass.ApprovalSubStepId = assu.ApprovalSubStepId
      LEFT OUTER JOIN ApprovalSubStepUserVendor assuv
        ON assuv.UserId = assu.UserId
      LEFT OUTER JOIN Vendor v
        ON v.VendorId = assuv.VendorId
      LEFT OUTER JOIN ApproverByAmount aba
        ON aba.UserId = assuv.UserId
      LEFT OUTER JOIN Department d
        ON d.Id IN (aba.CostCenters)
    WHERE u.ClientId = ClientId
    AND u.IsCloudxUser = FALSE
    ORDER BY FirstApprover;
  ELSE
    SELECT DISTINCT
      CONCAT(u.FirstName, ' ', u.LastName) AS FirstApprover,
      u.IsActive,
      (
      CASE WHEN aba.MaximumAllowedAmount IS NULL THEN 'Not Set' ELSE aba.MaximumAllowedAmount END) AS MaximumAmount,
      (CASE WHEN aba.SecondApproverId IS NULL THEN 'Not Set' ELSE (SELECT
              CONCAT(mgr.FirstName, ' ', mgr.LastName)
            FROM User mgr
            WHERE mgr.UserId = aba.SecondApproverId LIMIT 1) END) AS SecondApprover,
      d.DepartmentName,
      ass.SubStepName,
      v.VendorName
    FROM User u
      LEFT OUTER JOIN ApprovalSubStepUser assu
        ON assu.UserId = u.UserId
      LEFT OUTER JOIN ApprovalSubStep ass
        ON ass.ApprovalSubStepId = assu.ApprovalSubStepId
      LEFT OUTER JOIN ApprovalSubStepUserVendor assuv
        ON assuv.UserId = assu.UserId
      LEFT OUTER JOIN Vendor v
        ON v.VendorId = assuv.VendorId
      LEFT OUTER JOIN ApproverByAmount aba
        ON aba.UserId = u.UserId
      LEFT OUTER JOIN Department d
        ON d.Id IN (aba.CostCenters)
    WHERE u.ClientId = ClientId
    AND u.IsCloudxUser = FALSE
    AND u.FirstName LIKE CONCAT(filterText, '%')
    ORDER BY FirstApprover;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `spGetVendorLimit` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `spGetVendorLimit`(IN ClientId int, IN filterText nvarchar(50))
BEGIN

  IF filterText IS NULL THEN

    SELECT
      v.VendorName,
      v.`VendorNo`,
      (CASE WHEN u.FirstName IS NULL THEN 'Not Set' ELSE CONCAT(u.FirstName, ' ', u.LastName) END) AS FirstApprover,
      (CASE WHEN aba.MaximumAllowedAmount IS NULL THEN 'Not Set' ELSE aba.MaximumAllowedAmount END) AS MaximumAmount,
      (CASE WHEN aba.SecondApproverId IS NULL THEN 'Not Set' ELSE (SELECT
              CONCAT(mgr.FirstName, ' ', mgr.LastName)
            FROM User mgr
            WHERE mgr.UserId = aba.SecondApproverId LIMIT 1) END) AS SecondApprover,
      (CASE WHEN d.DepartmentName IS NULL THEN 'Not Set' ELSE d.DepartmentName END) AS DepartmentName,
      (CASE WHEN ass.SubStepName IS NULL THEN 'Not Set' ELSE ass.SubStepName END) AS SubStepName,
      aba.VendorId
    FROM Vendor v
      LEFT OUTER JOIN ApprovalSubStepUserVendor assuv
        ON v.`VendorId` = assuv.VendorId
      LEFT OUTER JOIN User u
        ON u.`UserId` = assuv.`UserId`
      LEFT OUTER JOIN ApprovalSubStepUser assu
        ON assu.UserId = u.UserId
      LEFT OUTER JOIN ApprovalSubStep ass
        ON ass.ApprovalSubStepId = assu.ApprovalSubStepId
      LEFT OUTER JOIN ApproverByAmount aba
        ON aba.UserId = assuv.UserId
        AND (aba.VendorId IS NULL
        OR aba.VendorId = v.VendorId)
      LEFT OUTER JOIN Department d
        ON d.Id IN (aba.CostCenters)
    WHERE v.ClientId = 108
    AND v.`IsActive` = TRUE
    ORDER BY v.VendorName;

  ELSE

    SELECT
      v.VendorName,
      v.`VendorNo`,
      (CASE WHEN u.FirstName IS NULL THEN 'Not Set' ELSE CONCAT(u.FirstName, ' ', u.LastName) END) AS FirstApprover,
      (CASE WHEN aba.MaximumAllowedAmount IS NULL THEN 'Not Set' ELSE aba.MaximumAllowedAmount END) AS MaximumAmount,
      (CASE WHEN aba.SecondApproverId IS NULL THEN 'Not Set' ELSE (SELECT
              CONCAT(mgr.FirstName, ' ', mgr.LastName)
            FROM User mgr
            WHERE mgr.UserId = aba.SecondApproverId LIMIT 1) END) AS SecondApprover,
      (CASE WHEN d.DepartmentName IS NULL THEN 'Not Set' ELSE d.DepartmentName END) AS DepartmentName,
      (CASE WHEN ass.SubStepName IS NULL THEN 'Not Set' ELSE ass.SubStepName END) AS SubStepName,
      aba.VendorId
    FROM Vendor v
      LEFT OUTER JOIN ApprovalSubStepUserVendor assuv
        ON v.`VendorId` = assuv.VendorId
      LEFT OUTER JOIN User u
        ON u.`UserId` = assuv.`UserId`
      LEFT OUTER JOIN ApprovalSubStepUser assu
        ON assu.UserId = u.UserId
      LEFT OUTER JOIN ApprovalSubStep ass
        ON ass.ApprovalSubStepId = assu.ApprovalSubStepId
      LEFT OUTER JOIN ApproverByAmount aba
        ON aba.UserId = assuv.UserId
        AND (aba.VendorId IS NULL
        OR aba.VendorId = v.VendorId)
      LEFT OUTER JOIN Department d
        ON d.Id IN (aba.CostCenters)
    WHERE v.ClientId = 108
    AND (v.VendorNo LIKE CONCAT(filterText, '%')
    || v.VendorName LIKE CONCAT(filterText, '%'))
    AND v.`IsActive` = TRUE
    ORDER BY v.VendorName;



  END IF;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_ApproverPerformance` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `SP_ApproverPerformance`(IN p_ClientId int,
IN p_YearDateFrom datetime,
IN p_DateTo datetime,
IN p_ApplicableInvoiceStatuses varchar(1000))
BEGIN
  SET @StartDateOfMonth = DATE_FORMAT(p_DateTo, '%Y-%m-01');
  SET @TotalMonths = TIMESTAMPDIFF(MONTH, p_YearDateFrom, p_DateTo) - 1;
  -- YearlyAverage and MonthlyAverage
  SELECT

    u.FromApprovalSubStepUserId AS ActorId,
    COUNT(DISTINCT CASE WHEN MONTH(u.AssignDate) = MONTH(p_DateTo) AND
        YEAR(u.AssignDate) = YEAR(p_DateTo) THEN u.InvoiceId END) AS noofInvoices,
    SUM(
    CASE WHEN MONTH(u.AssignDate) = MONTH(p_DateTo) AND
        YEAR(u.AssignDate) = YEAR(p_DateTo) THEN DATEDIFF(u.ApprovedDate, u.AssignDate) ELSE 0 END
    ) /
    COUNT(DISTINCT
    CASE WHEN MONTH(u.AssignDate) = MONTH(p_DateTo) AND
        YEAR(u.AssignDate) = YEAR(p_DateTo) THEN u.InvoiceId ELSE NULL END
    ) AS Average,

    MAX(CASE WHEN MONTH(u.AssignDate) = MONTH(p_DateTo) AND
        YEAR(u.AssignDate) = YEAR(p_DateTo) THEN DATEDIFF(u.ApprovedDate, u.AssignDate) ELSE 0 END) AS MaximumDays,
    COUNT(DISTINCT CASE WHEN MONTH(u.AssignDate) != MONTH(p_DateTo) THEN u.InvoiceId END) AS MonthlyTotal,
    SUM(
    CASE WHEN MONTH(u.AssignDate) != MONTH(p_DateTo) THEN DATEDIFF(u.ApprovedDate, u.AssignDate) ELSE 0 END
    ) / COALESCE(CASE WHEN COUNT(DISTINCT
        CASE WHEN MONTH(u.AssignDate) != MONTH(p_DateTo) THEN u.InvoiceId ELSE NULL END
        ) = 0 THEN NULL ELSE COUNT(DISTINCT
        CASE WHEN MONTH(u.AssignDate) != MONTH(p_DateTo) THEN u.InvoiceId ELSE NULL END
        ) END, 1) / @TotalMonths AS MonthlyAverage,
    MAX(DATEDIFF(u.ApprovedDate, u.AssignDate)) AS MonthlyMaximumDays

  FROM (SELECT
      a.InvoiceId,
      a.ToApprovalSubStepUserId,
      a.AssignDate,
      b.FromApprovalSubStepUserId,
      b.ApprovedDate
    FROM (SELECT
        uih1.InvoiceId,
        uih1.ToApprovalSubStepUserId,
        uih1.ApprovedOn AS AssignDate,
        @row_number1 := IF(@prev1 = CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId), @row_number1 + 1, 1) AS RowNum,
        @prev1 := CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId)
      FROM UserInvoiceAssignmentHistory uih1
        CROSS JOIN (SELECT
            @row_number1 := 0,
            @prev1 := '') AS vars
      WHERE uih1.ToApprovalSubStepUserId IS NOT NULL
      AND uih1.ApprovedOn >= p_YearDateFrom
      AND uih1.ApprovedOn <= p_DateTo
      ORDER BY uih1.InvoiceId, uih1.ToApprovalSubStepUserId, uih1.ApprovedOn) a
      JOIN (SELECT
          uih2.InvoiceId,
          uih2.FromApprovalSubStepUserId,
          uih2.ApprovedOn AS ApprovedDate,
          @row_number2 := IF(@prev2 = CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId), @row_number2 + 1, 1) AS RowNum,
          @prev2 := CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId)
        FROM UserInvoiceAssignmentHistory uih2
          CROSS JOIN (SELECT
              @row_number2 := 0,
              @prev2 := '') AS vars
        WHERE uih2.FromApprovalSubStepUserId IS NOT NULL
        AND uih2.ApprovedOn >= p_YearDateFrom
        AND uih2.ApprovedOn <= p_DateTo
        ORDER BY uih2.InvoiceId, uih2.FromApprovalSubStepUserId, uih2.ApprovedOn) b
        ON a.InvoiceId = b.InvoiceId
        AND a.ToApprovalSubStepUserId = b.FromApprovalSubStepUserId
        AND a.RowNum = b.RowNum
    ORDER BY a.InvoiceId, a.AssignDate) AS u
    INNER JOIN Invoice i
      ON u.InvoiceId = i.InvoiceId
  WHERE u.AssignDate >= p_YearDateFrom
  AND u.AssignDate <= p_DateTo
  AND i.ClientId = p_ClientId
  AND i.IsDeleted = 0
  AND FIND_IN_SET(i.ApprovalStatusId, p_ApplicableInvoiceStatuses) > 0
  GROUP BY u.FromApprovalSubStepUserId;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetAllUnmatchedWODetails` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetAllUnmatchedWODetails`()
SELECT
    WODetails.*,
    i.VendorId,
    i.`ClientId`,
    i.`VendorSiteId`,
    i.InvoiceNo,
    i.InvoiceDate
  FROM WODetails
    INNER JOIN Invoice as i
      ON WODetails.InvoiceId = i.InvoiceId
  WHERE i.`ClientId` = 79
  AND WODetails.HasError = 1
  AND i.`InvoiceType` = 'HaulerInvoice'
  and i.InvoiceDate >= '2024-04-01'
  AND i.ApprovalStatusId  = 3
  ORDER BY i.InvoiceDate  DESC ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetAllWOes` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetAllWOes`(IN FromDate date, IN ToDate date)
BEGIN
  -- Create a temporary table to store WOIds that have a match in WOToWODetailMatch
  CREATE TEMPORARY TABLE TempWOToWODetailMatch AS
  SELECT DISTINCT
    WOId
  FROM WOToWODetailMatch;

  -- Select the relevant data
  SELECT
    wo.*
  FROM WO wo
  WHERE wo.ClientId = 79
  AND (FromDate IS NULL
  OR wo.`ServiceDate` >= FromDate)
  AND (ToDate IS NULL
  OR wo.`ServiceDate` < DATE_ADD(ToDate, INTERVAL 1 DAY))
  AND wo.WOId NOT IN (SELECT
      WOId
    FROM TempWOToWODetailMatch)
  ORDER BY wo.`ServiceDate` DESC;

  -- Drop the temporary table when done
  DROP TEMPORARY TABLE IF EXISTS TempWOToWODetailMatch;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetAutoMatchedWOLineItems` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetAutoMatchedWOLineItems`(
    IN clientId int,
    IN scannedDateFrom date,
    IN scannedDateTo date,
    IN invoiceDateFrom date,
    IN invoiceDateTo date,
    IN invoiceType varchar(255)
)
BEGIN
    SELECT
        i.InvoiceNo,
        i.InvoiceId,
        i.ScannedDate,
        i.PaymentDueDate,
        w.*,
        Vendor.VendorName,
        Vendor.VendorNo
    FROM Invoice AS i
    INNER JOIN WODetails AS w
        ON i.InvoiceId = w.InvoiceId
    Left JOIN WOToWODetailMatch AS wwm
        ON w.WODetailId = wwm.WODetailId
     LEFT JOIN WODetailsLog   AS wl
        ON w.WODetailId = wl.WODetailId
    LEFT JOIN Vendor
        ON Vendor.VendorId = i.VendorId
    WHERE i.ClientId = clientId
    AND i.IsDeleted = 0
    AND (invoiceType IS NULL
        OR invoiceType = ''
        OR i.InvoiceType COLLATE utf8mb4_general_ci = invoiceType COLLATE utf8mb4_general_ci)
    AND (scannedDateFrom IS NULL
        OR i.ScannedDate >= scannedDateFrom)
    AND (scannedDateTo IS NULL
        OR i.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
    AND (invoiceDateFrom IS NULL
        OR i.InvoiceDate >= invoiceDateFrom)
    AND (invoiceDateTo IS NULL
        OR i.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))
    AND w.HasError = 0 
   AND (wwm.WOSummary COLLATE utf8mb4_general_ci LIKE '1%' 
        
         OR wwm.WOSummary COLLATE utf8mb4_general_ci LIKE '3%'
        or wl.Matched = 0
         );
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetChangedInvoices` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetChangedInvoices`(IN clientId int,
IN scannedDateFrom date,
IN scannedDateTo date,
IN invoiceDateFrom date,
IN invoiceDateTo date,
IN invoiceType varchar(255))
BEGIN
  SELECT
  DISTINCT
    (`Invoice`.`InvoiceId`) AS 'InvoiceId',
    `Invoice`.`InvoiceNo`,
    `InvoiceHistory`.`PreviousData`,
    `InvoiceHistory`.`NewData`,
    `InvoiceHistory`.`Field`,
    `InvoiceHistory`.`ActionDate`,
    Invoice.`ScannedDate`,
    Invoice.`PaymentDueDate`,
    `InvoiceHistory`.`Action`,
    `InvoiceHistory`.`Actor`

  FROM (SELECT
      NewData,
      InvoiceId,
      PreviousData,
      `Field`,
      ActionDate,
      `Action`,
      Actor
    FROM `InvoiceHistory`
    WHERE `InvoiceHistory`.`Field` <> '') AS `InvoiceHistory`
    INNER JOIN (SELECT
        `InvoiceNo`,
        InvoiceId,
        ScannedDate,
        PaymentDueDate
      FROM `Invoice`
      WHERE `Invoice`.ClientId = clientId
      AND `Invoice`.IsDeleted = 0
      AND (invoiceType IS NULL
      OR invoiceType = ''
      OR `Invoice`.`InvoiceType` = invoiceType)
      AND `Invoice`.`ApprovalStatusId` <> 1
      AND (scannedDateFrom IS NULL
      OR `Invoice`.ScannedDate >= scannedDateFrom)
      AND (scannedDateTo IS NULL
      OR `Invoice`.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
      AND (invoiceDateFrom IS NULL
      OR `Invoice`.InvoiceDate >= invoiceDateFrom)
      AND (invoiceDateTo IS NULL
      OR `Invoice`.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))) AS `Invoice`
      ON (
      `InvoiceHistory`.`InvoiceId` = `Invoice`.`InvoiceId`
      )




  ORDER BY `Invoice`.`InvoiceNo` ASC, `InvoiceHistory`.`Field` ASC;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_GetChargeType` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `SP_GetChargeType`(
	IN `_ClientId` INT
)
BEGIN	
	SELECT * FROM ChargeType WHERE `ClientId` = _ClientId;
	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetClientPaymentTerms` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetClientPaymentTerms`(
	IN `_ClientId` INT
)
BEGIN	
	SELECT * FROM ClientPaymentTerms WHERE `ClientId` = _ClientId;
	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetMannuallyMatchedLineItems` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetMannuallyMatchedLineItems`(IN clientId int,
IN scannedDateFrom date,
IN scannedDateTo date,
IN invoiceDateFrom date,
IN invoiceDateTo date,
IN invoiceType varchar(255))
BEGIN

  SELECT
    Invoice.InvoiceId,
    Invoice.InvoiceNo,
    Invoice.ScannedDate,
    WODetails.*,
    Invoice.PaymentDueDate,
    Vendor.VendorName,
    Vendor.VendorNo
  FROM Invoice
    INNER JOIN WODetails
      ON Invoice.InvoiceId = WODetails.InvoiceId
    LEFT JOIN WODetailsLog
      ON WODetailsLog.WODetailId = WODetails.WODetailId
    LEFT JOIN Vendor
      ON Vendor.VendorId = Invoice.VendorId
  WHERE Invoice.ClientId = clientId
  AND Invoice.IsDeleted = 0
  AND (invoiceType IS NULL
  OR invoiceType = ''
  OR Invoice.InvoiceType = invoiceType)
  AND (scannedDateFrom IS NULL
  OR Invoice.ScannedDate >= scannedDateFrom)
  AND (scannedDateTo IS NULL
  OR Invoice.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
  AND (invoiceDateFrom IS NULL
  OR Invoice.InvoiceDate >= invoiceDateFrom)
  AND (invoiceDateTo IS NULL
  OR Invoice.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))
  AND (WODetailsLog.WODetailId IS NULL
  OR WODetailsLog.Matched = 1)
  AND WODetails.HasError = 0;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetMannuallyMatchedWODetails` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetMannuallyMatchedWODetails`(IN clientId int,
IN scannedDateFrom date,
IN scannedDateTo date,
IN invoiceDateFrom date,
IN invoiceDateTo date,
IN invoiceType varchar(255))
BEGIN
  SELECT
    `Invoice`.`InvoiceNo`,
    `InvoiceHistory`.`PreviousData`,
    `InvoiceHistory`.`NewData`,
    `InvoiceHistory`.`Field`,
    `InvoiceHistory`.`Actor`,
    `InvoiceHistory`.`ActionDate`,
    Invoice.`ScannedDate`
  FROM (SELECT
      ClientId,
      InvoiceId,
      InvoiceType,
      ScannedDate,
      IsDeleted,
      InvoiceDate,
      InvoiceNo
    FROM `Invoice`
    WHERE `Invoice`.`ClientId` = clientId
    AND `Invoice`.IsDeleted = 0
    AND (invoiceType IS NULL
    OR invoiceType = ''
    OR `Invoice`.`InvoiceType` = invoiceType)
    AND (scannedDateFrom IS NULL
    OR `Invoice`.ScannedDate >= scannedDateFrom)
    AND (scannedDateTo IS NULL
    OR `Invoice`.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
    AND (invoiceDateFrom IS NULL
    OR `Invoice`.InvoiceDate >= invoiceDateFrom)
    AND (invoiceDateTo IS NULL
    OR `Invoice`.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))) AS `Invoice`

    INNER JOIN (SELECT
        NewData,
        InvoiceId,
        PreviousData,
        `Field`,
        ActionDate,
        Actor
      FROM `InvoiceHistory`
      WHERE InvoiceHistory.Action = 'Match Line Item'
      AND InvoiceHistory.`Field` = 'Work Order Detail') AS `InvoiceHistory`
      ON `InvoiceHistory`.`InvoiceId` = `Invoice`.`InvoiceId`
  ;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetMannualMatchedLineItems` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetMannualMatchedLineItems`(
  IN clientId int,
  IN scannedDateFrom date,
  IN scannedDateTo date,
  IN invoiceDateFrom date,
  IN invoiceDateTo date,
  IN invoiceType varchar(255)
)
BEGIN
  SELECT
    i.InvoiceNo,
    i.InvoiceId,
    i.ScannedDate,
    i.PaymentDueDate,
    w.*,
    Vendor.VendorName,
    Vendor.VendorNo
  FROM Invoice AS i
    INNER JOIN WODetails AS w
      ON i.InvoiceId = w.InvoiceId
    LEFT JOIN WODetailsLog AS l
      ON w.WODetailId = l.WODetailId
    LEFT JOIN WOToWODetailMatch wwm 
      ON w.WODetailId = wwm.WODetailId  
    LEFT JOIN Vendor
      ON Vendor.VendorId = i.VendorId
  WHERE i.ClientId = clientId
  AND i.IsDeleted = 0
  AND (invoiceType IS NULL
  OR invoiceType = ''
  OR i.InvoiceType = invoiceType COLLATE utf8mb4_general_ci) -- Adjust the collation here
  AND (scannedDateFrom IS NULL
  OR i.ScannedDate >= scannedDateFrom)
  AND (scannedDateTo IS NULL
  OR i.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
  AND (invoiceDateFrom IS NULL
  OR i.InvoiceDate >= invoiceDateFrom)
  AND (invoiceDateTo IS NULL
  OR i.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))
  AND wwm.WOSummary LIKE '0%' COLLATE utf8mb4_general_ci; -- Adjust the collation here
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetMannualMatchedLineItems_WithTempTable` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetMannualMatchedLineItems_WithTempTable`(
  IN clientId int,
  IN scannedDateFrom date,
  IN scannedDateTo date,
  IN invoiceDateFrom date,
  IN invoiceDateTo date,
  IN invoiceType varchar(255)
)
BEGIN
  -- Create a temporary table to store the results
  CREATE TEMPORARY TABLE IF NOT EXISTS temp_manual_matched_items (
    InvoiceNo VARCHAR(255),
    InvoiceId INT,
    ScannedDate DATE,
    PaymentDueDate DATE,
    WODetailId INT,
    UnitCost DECIMAL(10, 2),
    VendorName VARCHAR(255),
    VendorNo VARCHAR(255)
  );

  -- Insert the results into the temporary table
  INSERT INTO temp_manual_matched_items (InvoiceNo, InvoiceId, ScannedDate, PaymentDueDate, WODetailId, UnitCost, VendorName, VendorNo)
  SELECT
    i.InvoiceNo,
    i.InvoiceId,
    i.ScannedDate,
    i.PaymentDueDate,
    w.WODetailId,
    w.UnitCost,
    Vendor.VendorName,
    Vendor.VendorNo
  FROM Invoice AS i
    INNER JOIN WODetails AS w ON i.InvoiceId = w.InvoiceId
    LEFT JOIN WODetailsLog AS l ON w.WODetailId = l.WODetailId
    LEFT JOIN WOToWODetailMatch wwm ON w.WODetailId = wwm.WODetailId  
    LEFT JOIN Vendor ON Vendor.VendorId = i.VendorId
  WHERE i.ClientId = clientId
    AND i.IsDeleted = 0
    AND (invoiceType IS NULL OR invoiceType = '' OR i.InvoiceType = invoiceType COLLATE utf8mb4_general_ci)
    AND (scannedDateFrom IS NULL OR i.ScannedDate >= scannedDateFrom)
    AND (scannedDateTo IS NULL OR i.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
    AND (invoiceDateFrom IS NULL OR i.InvoiceDate >= invoiceDateFrom)
    AND (invoiceDateTo IS NULL OR i.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))
    AND wwm.WOSummary LIKE '0%' COLLATE utf8mb4_general_ci;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetMatchingSummaryForChart` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetMatchingSummaryForChart`(
    IN clientId int,
    IN scannedDateFrom date,
    IN scannedDateTo date,
    IN invoiceDateFrom date,
    IN invoiceDateTo date,
    IN invoiceType varchar(255)
)
BEGIN
    -- Temporary table for Manual Matches
    CREATE TEMPORARY TABLE IF NOT EXISTS temp_manual_matches (
        WODetailId INT,
        InvoiceDate DATE
    );

    -- Insert data from Manual Matches stored procedure into the temporary table
    INSERT INTO temp_manual_matches (WODetailId, InvoiceDate)
    SELECT 
        w.WODetailId,
        i.InvoiceDate
    FROM Invoice AS i
    INNER JOIN WODetails AS w ON i.InvoiceId = w.InvoiceId
    LEFT JOIN WOToWODetailMatch wwm ON w.WODetailId = wwm.WODetailId
    WHERE i.ClientId = clientId
    AND i.IsDeleted = 0
    AND (invoiceType IS NULL OR invoiceType = '' OR i.InvoiceType = invoiceType COLLATE utf8mb4_general_ci)
    AND (scannedDateFrom IS NULL OR i.ScannedDate >= scannedDateFrom)
    AND (scannedDateTo IS NULL OR i.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
    AND (invoiceDateFrom IS NULL OR i.InvoiceDate >= invoiceDateFrom)
    AND (invoiceDateTo IS NULL OR i.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))
    AND wwm.WOSummary LIKE '0%' COLLATE utf8mb4_general_ci;

    -- Temporary table for Auto Matches
    CREATE TEMPORARY TABLE IF NOT EXISTS temp_auto_matches (
        WODetailId INT,
        InvoiceDate DATE
    );

    -- Insert data from Auto Matches stored procedure into the temporary table
    INSERT INTO temp_auto_matches (WODetailId, InvoiceDate)
    SELECT 
        w.WODetailId,
        i.InvoiceDate
    FROM Invoice AS i
   INNER JOIN WODetails AS w
        ON i.InvoiceId = w.InvoiceId
    Left JOIN WOToWODetailMatch AS wwm
        ON w.WODetailId = wwm.WODetailId
     LEFT JOIN WODetailsLog   AS wl
        ON w.WODetailId = wl.WODetailId
    LEFT JOIN Vendor
        ON Vendor.VendorId = i.VendorId
    WHERE i.ClientId = clientId
    AND i.IsDeleted = 0
    AND (invoiceType IS NULL
        OR invoiceType = ''
        OR i.InvoiceType COLLATE utf8mb4_general_ci = invoiceType COLLATE utf8mb4_general_ci)
    AND (scannedDateFrom IS NULL
        OR i.ScannedDate >= scannedDateFrom)
    AND (scannedDateTo IS NULL
        OR i.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
    AND (invoiceDateFrom IS NULL
        OR i.InvoiceDate >= invoiceDateFrom)
    AND (invoiceDateTo IS NULL
        OR i.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))
    AND w.HasError = 0 
   AND (wwm.WOSummary COLLATE utf8mb4_general_ci LIKE '1%' 
         OR wwm.WOSummary COLLATE utf8mb4_general_ci LIKE '2%'
         OR wwm.WOSummary COLLATE utf8mb4_general_ci LIKE '3%'
        or wl.Matched = 0
         );

    -- Temporary table for Total Processed Items
    CREATE TEMPORARY TABLE IF NOT EXISTS temp_total_processed (
        WODetailId INT,
        InvoiceDate DATE
    );

    -- Insert data from Total Processed stored procedure into the temporary table
    INSERT INTO temp_total_processed (WODetailId, InvoiceDate)
    SELECT 
        w.WODetailId,
        i.InvoiceDate
    FROM Invoice AS i
    INNER JOIN WODetails AS w ON i.InvoiceId = w.InvoiceId
    WHERE i.ClientId = clientId
    AND i.IsDeleted = 0
    AND (invoiceType IS NULL OR invoiceType = '' OR i.InvoiceType = invoiceType COLLATE utf8mb4_general_ci)
    AND (scannedDateFrom IS NULL OR i.ScannedDate >= scannedDateFrom)
    AND (scannedDateTo IS NULL OR i.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
    AND (invoiceDateFrom IS NULL OR i.InvoiceDate >= invoiceDateFrom)
    AND (invoiceDateTo IS NULL OR i.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY));

    -- Final result for chart: Manual Match, Auto Match, Not Matched
    SELECT 
      DATE_FORMAT(t.InvoiceDate, '%b,%Y') AS `Month`,
        SUM(CASE WHEN m.WODetailId IS NOT NULL THEN 1 ELSE 0 END) AS ManualMatchCount,
        SUM(CASE WHEN a.WODetailId IS NOT NULL THEN 1 ELSE 0 END) AS AutoMatchCount,
            SUM(CASE WHEN t.WODetailId IS NOT NULL THEN 1 ELSE 0 END) AS Total
      FROM temp_total_processed t
    LEFT JOIN temp_manual_matches m ON t.WODetailId = m.WODetailId
    LEFT JOIN temp_auto_matches a ON t.WODetailId = a.WODetailId
     GROUP BY YEAR(t.InvoiceDate), MONTH(t.InvoiceDate)
    ORDER BY t.InvoiceDate ASC; -- Order by InvoiceDate in ascending order


    -- Drop temporary tables
    DROP TEMPORARY TABLE IF EXISTS temp_manual_matches;
    DROP TEMPORARY TABLE IF EXISTS temp_auto_matches;
    DROP TEMPORARY TABLE IF EXISTS temp_total_processed;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetNotMatchedLineItems` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetNotMatchedLineItems`(IN clientId int,
IN scannedDateFrom date,
IN scannedDateTo date,
IN invoiceDateFrom date,
IN invoiceDateTo date,
IN invoiceType varchar(255))
BEGIN
  SELECT
    Invoice.InvoiceNo,
    Invoice.InvoiceId,
    Invoice.ScannedDate,
    Invoice.PaymentDueDate,
    WODetails.*,
    Vendor.VendorName,
    Vendor.VendorNo
  FROM Invoice
    INNER JOIN WODetails
      ON Invoice.InvoiceId = WODetails.InvoiceId
    LEFT JOIN Vendor
      ON Vendor.VendorId = Invoice.VendorId
  WHERE Invoice.ClientId = clientId
  AND Invoice.IsDeleted = 0
  AND (invoiceType IS NULL
  OR invoiceType = ''
  OR Invoice.InvoiceType = invoiceType)
  AND (scannedDateFrom IS NULL
  OR Invoice.ScannedDate >= scannedDateFrom)
  AND (scannedDateTo IS NULL
  OR Invoice.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
  AND (invoiceDateFrom IS NULL
  OR Invoice.InvoiceDate >= invoiceDateFrom)
  AND (invoiceDateTo IS NULL
  OR Invoice.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))
  AND WODetails.HasError = 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetProcessedInvoices` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetProcessedInvoices`(IN clientId int,
IN scannedDateFrom date,
IN scannedDateTo date,
IN invoiceDateFrom date,
IN invoiceDateTo date,
IN invoiceType varchar(255))
BEGIN

  SELECT
    InvoiceId,
    InvoiceDate,
    InvoiceNo,
    PaymentDueDate,
    InvoiceTotal,
    InvoiceType
  FROM `Invoice`
  WHERE Invoice.ClientId = clientId
  AND Invoice.IsDeleted = 0
  AND (invoiceType IS NULL
  OR invoiceType = ''
  OR `Invoice`.`InvoiceType` = invoiceType)
  AND (scannedDateFrom IS NULL
  OR `Invoice`.ScannedDate >= scannedDateFrom)
  AND (scannedDateTo IS NULL
  OR `Invoice`.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
  AND (invoiceDateFrom IS NULL
  OR `Invoice`.InvoiceDate >= invoiceDateFrom)
  AND (invoiceDateTo IS NULL
  OR `Invoice`.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY));


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetRerunMatchedWOLineItems` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetRerunMatchedWOLineItems`(IN clientId int,
IN scannedDateFrom date,
IN scannedDateTo date,
IN invoiceDateFrom date,
IN invoiceDateTo date,
IN invoiceType varchar(255))
BEGIN
  SELECT
    i.InvoiceNo,
    i.InvoiceId,
    i.ScannedDate,
    i.PaymentDueDate,
    w.*,
    Vendor.VendorName,
    Vendor.VendorNo
  FROM Invoice AS i
    INNER JOIN WODetails AS w
      ON i.InvoiceId = w.InvoiceId
    INNER JOIN WODetailsLog AS l
      ON w.WODetailId = l.WODetailId
      inner join WOToWODetailMatch wwm 
      on w.WODetailId =wwm.WODetailId  
    LEFT JOIN Vendor
      ON Vendor.VendorId = i.VendorId
  WHERE i.ClientId = clientId
  AND i.IsDeleted = 0
  AND (invoiceType IS NULL
  OR invoiceType = ''
  OR i.InvoiceType = invoiceType COLLATE utf8mb4_general_ci)
  AND (scannedDateFrom IS NULL
  OR i.ScannedDate >= scannedDateFrom)
  AND (scannedDateTo IS NULL
  OR i.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
  AND (invoiceDateFrom IS NULL
  OR i.InvoiceDate >= invoiceDateFrom)
  AND (invoiceDateTo IS NULL
  OR i.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))
  AND wwm.WOSummary LIKE '2%' COLLATE utf8mb4_general_ci;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetTotalProcessedWOLineItems` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetTotalProcessedWOLineItems`(IN clientId int,
IN scannedDateFrom date,
IN scannedDateTo date,
IN invoiceDateFrom date,
IN invoiceDateTo date,
IN invoiceType varchar(255))
BEGIN
  SELECT
    `Invoice`.InvoiceNo,
    `Invoice`.InvoiceId,
    `Invoice`.`ScannedDate`,
    `Invoice`.`PaymentDueDate`,
    WODetails.*,
    Vendor.VendorName,
    Vendor.VendorNo

  FROM (SELECT
      ClientId,
      InvoiceId,
      InvoiceType,
      ScannedDate,
      IsDeleted,
      InvoiceDate,
      InvoiceNo,
      VendorId,
      PaymentDueDate
    FROM `Invoice`
    WHERE `Invoice`.`ClientId` = clientId
    AND `Invoice`.IsDeleted = 0
    AND (invoiceType IS NULL
    OR invoiceType = ''
    OR `Invoice`.`InvoiceType` = invoiceType)
    AND (scannedDateFrom IS NULL
    OR `Invoice`.ScannedDate >= scannedDateFrom)
    AND (scannedDateTo IS NULL
    OR `Invoice`.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
    AND (invoiceDateFrom IS NULL
    OR `Invoice`.InvoiceDate >= invoiceDateFrom)
    AND (invoiceDateTo IS NULL
    OR `Invoice`.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))) AS `Invoice`

    LEFT JOIN Vendor
      ON Vendor.VendorId = `Invoice`.VendorId
    INNER JOIN (SELECT
        *
      FROM `WODetails`) AS WODetails
  WHERE `Invoice`.`InvoiceId` = WODetails.`InvoiceId`

  ;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetUnmatchedWODetails` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetUnmatchedWODetails`(IN invoiceId int)
BEGIN


  SELECT
    WODetails.*,
    Invoice.VendorId,
    Invoice.`ClientId`,
    Invoice.`VendorSiteId`,
    Invoice.InvoiceNo
  FROM WODetails
    INNER JOIN Invoice
      ON WODetails.InvoiceId = Invoice.InvoiceId
  WHERE Invoice.`ClientId` = 79
  AND Invoice.ApprovalStatusId = 3
  AND WODetails.HasError = 1
  AND `Invoice`.`InvoiceType` = 'HaulerInvoice'
  AND `Invoice`.`InvoiceId` = `invoiceid`
  ORDER BY WODetails.`ServiceDate` DESC;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetUserInvoiceAssignments` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetUserInvoiceAssignments`(
      IN userId CHAR(36),
    IN approvalLevel INT,
    IN assignorUserId CHAR(36),
    IN lockedBefore DATETIME
)
BEGIN
    DECLARE canViewConfidential BIT;
    DECLARE isAdmin INT;
    DECLARE today DATE;
    
    -- Get current date
    SET today = CURRENT_DATE();
    
    -- Get user's permissions
    SELECT 
        IFNULL(CanViewConfidentialInvoice, 0),
        EXISTS (
            SELECT 1
            FROM UserRoles
            WHERE UserId = userId AND RoleId = 8 -- Assuming 8 represents RoleEnum.Administrator
        )
    INTO 
        canViewConfidential,
        isAdmin
    FROM 
        User
    WHERE 
        UserId = userId LIMIT 1;
        
    -- If user is not allowed to view confidential invoices and is not an administrator
    IF canViewConfidential = 0 AND isAdmin = 0 THEN
        SELECT 
            uia.DateCreated,
            uia.HoldStartDate,
            uia.HoldEndDate,
            DATEDIFF(today, uia.DateCreated) AS NoOfDaysInQueue,
            Invoice.InvoiceDate,
            CASE WHEN Invoice.InvoiceDate IS NULL THEN '' ELSE CAST(Invoice.InvoiceDate AS CHAR) END AS InvoiceDateString,
            CASE WHEN Invoice.VendorId IS NOT NULL THEN 
                JSON_OBJECT('VendorNo', Vendor.VendorNo, 'VendorName', Vendor.VendorName, 'UserField1', Vendor.UserField1)
            ELSE NULL END AS Vendor,
            COALESCE(Invoice.Vendor.VendorName, '') AS VendorName,
            COALESCE(Invoice.Vendor.VendorNo, '') AS VendorNo,
            Invoice.CompanyCode,
            Invoice.InvoiceId,
            Invoice.InvoiceNo,
            Invoice.ScannedDate,
            CASE WHEN Invoice.ScannedDate IS NULL THEN '' ELSE CAST(Invoice.ScannedDate AS CHAR) END AS ScannedDateString,
            Invoice.InvoiceTotal,
            JSON_OBJECT('StateName', InvoiceStatu.StateName) AS InvoiceStatu,
            InvoiceStatus.StateName AS InvoiceStatusName,
            Invoice.InvoiceType,
            Invoice.LastActionBy,
            Invoice.LastActionDate,
            Invoice.CheckNumber,
            Invoice.AprovedDate,
            Invoice.PONumber,
            JSON_OBJECT('Source', Batch.Source, 'Sender', Batch.Sender) AS Batch,
            Invoice.PaymentDueDate,
            CASE WHEN Invoice.PaymentDueDate IS NULL THEN '' ELSE CAST(Invoice.PaymentDueDate AS CHAR) END AS PaymentDueDateString
        FROM 
            UserInvoiceAssignment uia
        INNER JOIN 
            Invoice ON uia.InvoiceId = Invoice.InvoiceId
        LEFT JOIN 
            Vendor ON Invoice.VendorId = Vendor.VendorId
        LEFT JOIN 
            InvoiceStatus ON Invoice.ApprovalStatusId = InvoiceStatus.StateId
        LEFT JOIN 
            Batch ON Invoice.BatchId = Batch.ID 
        WHERE 
            uia.UserId = userId
            AND uia.Type IN (0, 2) -- Assuming 0 represents UserInvoiceAssignmentType.Approval and 2 represents UserInvoiceAssignmentType.PartialApproval
            AND (approvalLevel = 0 OR EXISTS (
                SELECT 1
                FROM ApprovalSubStep
                WHERE ApprovalSubStep.ApprovalSubStepId = uia.ApprovalSubStepId
                    AND ApprovalSubStep.OrderNo = approvalLevel
            ))
            AND Invoice.IsPaused = 0
            AND (Invoice.IsPOInvoice = 0 OR Invoice.ApprovalRequired != Invoice.IsPOInvoice)
            AND Invoice.ApprovalStatusId IN (3, 4) -- Assuming 3 represents InvoiceStatus.InApproval and 4 represents InvoiceStatus.Approved
            AND Invoice.IsDeleted = 0
            AND (IsInvoiceAndUserCompanyMatch(userId, uia.InvoiceId) OR IsInvoiceAndUserCompanyMatch(assignorUserId, uia.InvoiceId))
            AND (COALESCE(Vendor.IsConfidential, Invoice.IsConfidential, 0) != 1)
            AND (NOT Invoice.IsLocked OR Invoice.LockedAt < lockedBefore OR Invoice.LockedBy = userId)
            AND (uia.HoldEndDate IS NULL OR uia.HoldEndDate < today)
        ORDER BY 
            uia.DateCreated;
    ELSE
        -- User is allowed to view confidential invoices or is an administrator
        SELECT 
            uia.DateCreated,
            uia.HoldStartDate,
            uia.HoldEndDate,
            DATEDIFF(today, uia.DateCreated) AS NoOfDaysInQueue,
            Invoice.InvoiceDate,
            CASE WHEN Invoice.InvoiceDate IS NULL THEN '' ELSE CAST(Invoice.InvoiceDate AS CHAR) END AS InvoiceDateString,
            CASE WHEN Invoice.VendorId IS NOT NULL THEN 
                JSON_OBJECT('VendorNo', Vendor.VendorNo, 'VendorName', Vendor.VendorName, 'UserField1', Vendor.UserField1)
            ELSE NULL END AS Vendor,
            COALESCE(Vendor.VendorName, '') AS VendorName,
            COALESCE(Vendor.VendorNo, '') AS VendorNo,
            Invoice.CompanyCode,
            Invoice.InvoiceId,
            Invoice.InvoiceNo,
            Invoice.ScannedDate,
            CASE WHEN Invoice.ScannedDate IS NULL THEN '' ELSE CAST(Invoice.ScannedDate AS CHAR) END AS ScannedDateString,
            Invoice.InvoiceTotal,
            JSON_OBJECT('StateName', InvoiceStatus.StateName) AS InvoiceStatus,
            InvoiceStatus.StateName AS InvoiceStatusName,
            Invoice.InvoiceType,
            Invoice.LastActionBy,
            Invoice.LastActionDate,
            Invoice.CheckNumber,
            Invoice.AprovedDate,
            Invoice.PONumber,
            JSON_OBJECT('Source', Batch.Source, 'Sender', Batch.Sender) AS Batch,
            Invoice.PaymentDueDate,
            CASE WHEN Invoice.PaymentDueDate IS NULL THEN '' ELSE CAST(Invoice.PaymentDueDate AS CHAR) END AS PaymentDueDateString
        FROM 
            UserInvoiceAssignment uia
        INNER JOIN 
            Invoice ON uia.InvoiceId = Invoice.InvoiceId
        LEFT JOIN 
            Vendor ON Invoice.VendorId = Vendor.VendorId
        LEFT JOIN 
            InvoiceStatus ON Invoice.ApprovalStatusId = InvoiceStatus.StateId 
        LEFT JOIN 
            Batch ON Invoice.BatchId = Batch.ID 
        WHERE 
            (uia.UserId = userId OR uia.UserId = assignorUserId)
            AND uia.Type IN (0, 2) -- Assuming 0 represents UserInvoiceAssignmentType.Approval and 2 represents UserInvoiceAssignmentType.PartialApproval
            AND (approvalLevel = 0 OR EXISTS (
                SELECT 1
                FROM ApprovalSubStep
                WHERE ApprovalSubStep.ApprovalSubStepId = uia.ApprovalSubStepId
                    AND ApprovalSubStep.OrderNo = approvalLevel
            ))
            AND Invoice.IsPaused = 0
            AND (Invoice.IsPOInvoice = 0 OR Invoice.ApprovalRequired != Invoice.IsPOInvoice)
            AND Invoice.ApprovalStatusId IN (3, 4) -- Assuming 3 represents InvoiceStatus.InApproval and 4 represents InvoiceStatus.Approved
            AND Invoice.IsDeleted = 0
            AND (IsInvoiceAndUserCompanyMatch(userId, uia.InvoiceId) OR IsInvoiceAndUserCompanyMatch(assignorUserId, uia.InvoiceId))
            AND (COALESCE(Vendor.IsConfidential, Invoice.IsConfidential, 0) != 1)
            AND (NOT Invoice.IsLocked OR Invoice.LockedAt < lockedBefore OR Invoice.LockedBy = userId)
            AND (uia.HoldEndDate IS NULL OR uia.HoldEndDate < today)
        ORDER BY 
            uia.DateCreated;
    END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetUserInvoiceAssignmentsFiltered` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetUserInvoiceAssignmentsFiltered`(
    IN userId CHAR(36),
    IN assignorUserId CHAR(36),
    IN approvalLevel INT,
    IN lockedBefore DATETIME
)
BEGIN
    SELECT uia.*, Invoice.*, Vendor.*, Department.*
    FROM UserInvoiceAssignment  uia
    INNER JOIN Invoice ON uia.InvoiceId = Invoice.InvoiceId
    LEFT JOIN Vendor ON Invoice.VendorId = Vendor.VendorId
    LEFT JOIN Department ON Invoice.VendorSiteId  = Department.Id 
    WHERE (uia.UserId = userId OR uia.UserId = assignorUserId)
        AND (uia.Type IN (0, 2)) -- Assuming 0 represents UserInvoiceAssignmentType.Approval and 2 represents UserInvoiceAssignmentType.PartialApproval
        AND (approvalLevel = 0 OR EXISTS (
            SELECT 1
            FROM ApprovalSubStep
            WHERE ApprovalSubStepId = uia.ApprovalSubStepId
                AND OrderNo = approvalLevel
        ))
        AND Invoice.IsPaused = 0
        AND ( Invoice.IsPOInvoice = 0 OR Invoice.ApprovalRequired != Invoice.IsPOInvoice)
        AND Invoice.ApprovalStatusId IN (3, 4) -- Assuming 3 represents InvoiceStatus.InApproval and 4 represents InvoiceStatus.Approved
        AND Invoice.IsDeleted = 0
        AND (IsInvoiceAndUserCompanyMatch(userId, uia.InvoiceId) OR IsInvoiceAndUserCompanyMatch(assignorUserId, uia.InvoiceId))
        AND (NOT Invoice.IsLocked OR Invoice.LockedAt < lockedBefore OR Invoice.LockedBy = userId)
        AND (uia.HoldEndDate IS NULL OR uia.HoldEndDate < CURDATE());
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetWODetailLineItemActivity` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_GetWODetailLineItemActivity`(IN clientId int,
IN scannedDateFrom date,
IN scannedDateTo date,
IN invoiceDateFrom date,
IN invoiceDateTo date,
IN invoiceType varchar(255))
BEGIN
  SELECT DISTINCT
    (`Invoice`.`InvoiceId`) AS 'InvoiceId',
    `Invoice`.`InvoiceNo`,
    `InvoiceHistory`.`PreviousData`,
    `InvoiceHistory`.`NewData`,
    `InvoiceHistory`.`Field`,
    `InvoiceHistory`.`Actor`,
    `InvoiceHistory`.`ActionDate`,
    Invoice.`ScannedDate`
  FROM (SELECT
      ClientId,
      InvoiceId,
      InvoiceType,
      ScannedDate,
      IsDeleted,
      InvoiceDate,
      InvoiceNo
    FROM `Invoice`
    WHERE `Invoice`.`ClientId` = clientId
    AND `Invoice`.IsDeleted = 0
    AND (invoiceType IS NULL
    OR invoiceType = ''
    OR `Invoice`.`InvoiceType` = invoiceType)
    AND (scannedDateFrom IS NULL
    OR `Invoice`.ScannedDate >= scannedDateFrom)
    AND (scannedDateTo IS NULL
    OR `Invoice`.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
    AND (invoiceDateFrom IS NULL
    OR `Invoice`.InvoiceDate >= invoiceDateFrom)
    AND (invoiceDateTo IS NULL
    OR `Invoice`.InvoiceDate < DATE_ADD(invoiceDateTo, INTERVAL 1 DAY))) AS `Invoice`
    INNER JOIN  WODetails WODetails
      ON `Invoice`.`InvoiceId` = WODetails.`InvoiceId`
 
    INNER JOIN (SELECT
        NewData,
        InvoiceId,
        PreviousData,
        `Field`,
        ActionDate,
        Actor
      FROM `InvoiceHistory`
      WHERE `InvoiceHistory`.`Field` <> '') AS `InvoiceHistory`
      ON `InvoiceHistory`.`InvoiceId` = `Invoice`.`InvoiceId`
  ;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_InvoiceNoCheck` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `SP_InvoiceNoCheck`(
	IN `_VendorId` INT,
	IN `_InvoiceNo` VARCHAR(50)
)
BEGIN

	SET @VendorFound = 0;
	
	SELECT COUNT(*) INTO @VendorFound FROM Invoice WHERE VendorId = _VendorId LIMIT 1;
	
	IF (@VendorFound > 0) THEN
		SELECT COUNT(*) AS InRange FROM (SELECT LENGTH(InvoiceNo) AS InvoiceNo FROM Invoice WHERE VendorId = _VendorId ORDER BY InvoiceId DESC LIMIT 5) AS `RANK` 
		WHERE InvoiceNo = LENGTH(_InvoiceNo);
	ELSE
		SELECT 1 AS InRange;
	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_InvoiceTotalCheck` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `SP_InvoiceTotalCheck`(
	IN `_VendorId` INT,
	IN `_Total` DECIMAL(18,2)
)
BEGIN

	SET @VendorFound = 0;
	
	SELECT COUNT(*) INTO @VendorFound FROM Invoice WHERE VendorId = _VendorId AND IsPOInvoice = 0 LIMIT 1;
	
	IF (@VendorFound > 0) THEN
		SELECT AVG(InvoiceTotal) INTO @Average FROM (SELECT InvoiceTotal FROM Invoice WHERE VendorId = _VendorId AND IsPOInvoice = 0 ORDER BY InvoiceId DESC LIMIT 5) AS `RANK`;
		
		SET @50PctLess = @Average / 2;
		SET @50PctMore = @Average + @50PctLess;
		
		SELECT (_Total BETWEEN @50PctLess AND @50PctMore) AS InRange;
	ELSE
		SELECT (_Total BETWEEN 1 AND 1000000000) AS InRange;
	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_MatchWODetailWithWO` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_MatchWODetailWithWO`(IN ClientId int,
IN WONumber varchar(50),
IN UnitCost1 decimal(10, 2),
IN UnitCost2 decimal(10, 2),
IN VendorId int,
IN PropertyId int)
BEGIN
  SELECT
    *
  FROM WO
  WHERE ClientId = ClientId
  OR WONumber = WONumber
  OR (UnitCost = UnitCost1
  OR UnitCost = UnitCost2)
  OR VendorId = VendorId
  OR PropertyId = PropertyId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_MatchWODetailWithWOUsingServiceDate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `sp_MatchWODetailWithWOUsingServiceDate`(IN clientId int,
IN fixedDate varchar(10),
IN prevFixedDate varchar(10),
IN nextFixedDate varchar(10),
IN fixedAmt decimal(10, 2),
IN VendorID int,
IN PropertyID int,
IN HeaderAcctNum varchar(255))
BEGIN
  SELECT
    *
  FROM WO
  WHERE ClientId = clientId
  AND (ServiceDate LIKE CONCAT(fixedDate, '%')
  OR ServiceDate LIKE CONCAT(prevFixedDate, '%')
  OR ServiceDate LIKE CONCAT(nextFixedDate, '%'))
  AND GlCodeId IS NOT NULL
  AND (UnitCost = fixedAmt
  OR UnitCost = ROUND(fixedAmt + 0.01, 2))
  AND VendorId = VendorID
  AND PropertyId = PropertyID
  AND (HeaderAcctNum IS NULL
  OR HeaderAcctNum = ''
  OR AccountNumber = HeaderAcctNum);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_UserInvoiceHistoryDetail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `SP_UserInvoiceHistoryDetail`(IN p_ClientId int,
IN p_YearDateFrom datetime,
IN p_DateTo datetime,
IN p_ApplicableInvoiceStatuses varchar(1000))
BEGIN
  SET @StartDateOfMonth = DATE_FORMAT(p_DateTo, '%Y-%m-01');
  SET @TotalMonths = TIMESTAMPDIFF(MONTH, p_YearDateFrom, p_DateTo) - 1;
  -- YearlyAverage and MonthlyAverage
  SELECT

    u.FromApprovalSubStepUserId AS ActorId,
    i.InvoiceId AS InvoiceIds,
    ih.CurrentStatus AS CurrentStat,
    COUNT(DISTINCT CASE WHEN MONTH(u.AssignDate) = MONTH(p_DateTo) AND
        YEAR(u.AssignDate) = YEAR(p_DateTo) THEN u.InvoiceId END) AS noofInvoices,
    SUM(
    CASE WHEN MONTH(u.AssignDate) = MONTH(p_DateTo) AND
        YEAR(u.AssignDate) = YEAR(p_DateTo) THEN DATEDIFF(u.ApprovedDate, u.AssignDate) ELSE 0 END
    ) /
    COUNT(DISTINCT
    CASE WHEN MONTH(u.AssignDate) = MONTH(p_DateTo) AND
        YEAR(u.AssignDate) = YEAR(p_DateTo) THEN u.InvoiceId ELSE NULL END
    ) AS Average,

    MAX(CASE WHEN MONTH(u.AssignDate) = MONTH(p_DateTo) AND
        YEAR(u.AssignDate) = YEAR(p_DateTo) THEN DATEDIFF(u.ApprovedDate, u.AssignDate) ELSE 0 END) AS MaximumDays,
    COUNT(DISTINCT CASE WHEN MONTH(u.AssignDate) != MONTH(p_DateTo) THEN u.InvoiceId END) AS MonthlyTotal,
    SUM(
    CASE WHEN MONTH(u.AssignDate) != MONTH(p_DateTo) THEN DATEDIFF(u.ApprovedDate, u.AssignDate) ELSE 0 END
    ) / COALESCE(CASE WHEN COUNT(DISTINCT
        CASE WHEN MONTH(u.AssignDate) != MONTH(p_DateTo) THEN u.InvoiceId ELSE NULL END
        ) = 0 THEN NULL ELSE COUNT(DISTINCT
        CASE WHEN MONTH(u.AssignDate) != MONTH(p_DateTo) THEN u.InvoiceId ELSE NULL END
        ) END, 1) / @TotalMonths AS MonthlyAverage,
    MAX(DATEDIFF(u.ApprovedDate, u.AssignDate)) AS MonthlyMaximumDays

  FROM (SELECT
      a.InvoiceId,
      a.ToApprovalSubStepUserId,
      a.AssignDate,
      b.FromApprovalSubStepUserId,
      b.ApprovedDate
    FROM (SELECT
        uih1.InvoiceId,
        uih1.ToApprovalSubStepUserId,
        uih1.ApprovedOn AS AssignDate,
        @row_number1 := IF(@prev1 = CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId), @row_number1 + 1, 1) AS RowNum,
        @prev1 := CONCAT(uih1.InvoiceId, '_', uih1.ToApprovalSubStepUserId)
      FROM UserInvoiceAssignmentHistory uih1
        CROSS JOIN (SELECT
            @row_number1 := 0,
            @prev1 := '') AS vars
      WHERE uih1.ToApprovalSubStepUserId IS NOT NULL
      AND uih1.ApprovedOn >= p_YearDateFrom
      AND uih1.ApprovedOn <= p_DateTo
      ORDER BY uih1.InvoiceId, uih1.ToApprovalSubStepUserId, uih1.ApprovedOn) a
      JOIN (SELECT
          uih2.InvoiceId,
          uih2.FromApprovalSubStepUserId,
          uih2.ApprovedOn AS ApprovedDate,
          @row_number2 := IF(@prev2 = CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId), @row_number2 + 1, 1) AS RowNum,
          @prev2 := CONCAT(uih2.InvoiceId, '_', uih2.FromApprovalSubStepUserId)
        FROM UserInvoiceAssignmentHistory uih2
          CROSS JOIN (SELECT
              @row_number2 := 0,
              @prev2 := '') AS vars
        WHERE uih2.FromApprovalSubStepUserId IS NOT NULL
        AND uih2.ApprovedOn >= p_YearDateFrom
        AND uih2.ApprovedOn <= p_DateTo
        ORDER BY uih2.InvoiceId, uih2.FromApprovalSubStepUserId, uih2.ApprovedOn) b
        ON a.InvoiceId = b.InvoiceId
        AND a.ToApprovalSubStepUserId = b.FromApprovalSubStepUserId
        AND a.RowNum = b.RowNum
    ORDER BY a.InvoiceId, a.AssignDate) AS u
    INNER JOIN Invoice i
      ON u.InvoiceId = i.InvoiceId
    INNER JOIN InvoiceHistory AS ih
      ON u.InvoiceId = ih.InvoiceId
  WHERE u.AssignDate >= p_YearDateFrom
  AND u.AssignDate <= p_DateTo
  AND i.ClientId = p_ClientId
  AND i.IsDeleted = 0
  AND FIND_IN_SET(i.ApprovalStatusId, p_ApplicableInvoiceStatuses) > 0
  AND ih.ActorId = u.FromApprovalSubStepUserId
  AND ih.ActionDate = u.ApprovedDate
  AND i.InvoiceId = 661909261;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SummaryCalculationReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `SummaryCalculationReport`(IN ClientId int,

IN Approvers nvarchar(65535))
BEGIN
  DECLARE str nvarchar(65535);
  DECLARE str1 nvarchar(65535);
  DECLARE varStr nvarchar(65535);
  SET str = Approvers;
  DROP TABLE IF EXISTS ApproverList;
  CREATE TEMPORARY TABLE ApproverList (
    ApproverId varchar(128)
  );
  WHILE CHAR_LENGTH(str) > 0
    AND str IS NOT NULL
    AND str <> '' DO
    SET varStr = SUBSTRING_INDEX (str, ',', 1);
    SET str = SUBSTRING(str, LENGTH(varStr) + 2);
    IF varStr <> ''
      AND varStr <> ' '
      AND varStr IS NOT NULL THEN
      INSERT INTO ApproverList
        SELECT
          varStr;
    END IF;
  -- select varStr;
  END WHILE;
  IF ClientId IS NOT NULL
    OR ClientId <> 0 THEN
    SELECT
      CONCAT(usia.FirstName, " ", usia.LastName) AS AssignedTo,
      SUM(inv.InvoiceTotal) AS TotalAmount,
      AVG(DATEDIFF(CURDATE(), usia.DateCreated)) AS AverageNumberOfDaysInQueue,
      COUNT(inv.InvoiceId) AS TotalNumberOfInvoice

    FROM Invoice AS inv
      INNER JOIN (SELECT
          u.UserId,
          uia.InvoiceId,
          u.FirstName,
          u.LastName,
          uia.DateCreated
        FROM `User` AS u
          INNER JOIN `UserInvoiceAssignment` AS uia
            ON uia.UserId = u.UserId
        WHERE u.ClientId = ClientId
        AND u.UserId IN (SELECT
            ApproverId
          FROM ApproverList)) AS usia
    WHERE inv.InvoiceId = usia.InvoiceId
    AND inv.ClientId = ClientId
    GROUP BY usia.UserId;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `TotalInvoiceCountReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `TotalInvoiceCountReport`(startDate datetime, endDate datetime)
BEGIN
  SELECT
    b.`Source`,
    CASE WHEN i.IsPOInvoice = 1 THEN 'PO' ELSE 'No PO' END AS POType,
    COUNT(i.InvoiceId) AS InvoiceCount
  FROM Batch b
    INNER JOIN Invoice i
      ON b.Id = i.BatchId
  WHERE i.ScannedDate >= startDate
  AND i.ScannedDate <= endDate
  AND i.IsDeleted = 0
  AND i.ClientId = 1
  GROUP BY i.IsPoInvoice,
           b.`Source`
  ORDER BY b.`Source`;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateApproverByAmount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `UpdateApproverByAmount`(IN ClientId int,
IN ApproverFirstName nvarchar(250),
IN ApproverLastName nvarchar(250),
IN ApproverInternalId nvarchar(250),
IN ApproverEmail nvarchar(250),
IN ManagerInternalId nvarchar(250),
IN ManagerEmail nvarchar(250),
IN CompanyCode nvarchar(40),
IN MaximumAmount decimal(30, 2))
HereSP:
  BEGIN
    DECLARE UId nvarchar(250);
    DECLARE ManagerId nvarchar(250);
    DECLARE ApproverByAmountId int;
    DECLARE ExistCnt int;
    DECLARE NoPOApprovalSubStepId int;
    -- SELECT MaximumAmount;
    -- LEAVE HereSP;

    SELECT
      ass.ApprovalSubStepId
    FROM ApprovalSubStep ass
    WHERE ass.ApprovalStepId = (SELECT
        aps.ApprovalStepId
      FROM ApprovalStep aps
      WHERE aps.ClientId = ClientId
      AND aps.IsPO = 0
      AND ClientCompanyId = (SELECT
          `Id`
        FROM ClientCompany cc
        WHERE cc.ClientId = ClientId
        AND cc.CompanyCode = CompanyCode COLLATE utf8_unicode_ci LIMIT 1) LIMIT 1)
    AND ass.OrderNo = 1 INTO NoPOApprovalSubStepId;
    SELECT
      NoPOApprovalSubStepId,
      'First';
    SELECT
      usr.UserId
    FROM `User` usr
    WHERE usr.ClientId = ClientId
    AND (usr.Email = ApproverEmail COLLATE utf8_unicode_ci
    OR ApproverEmail = 'na')
    -- AND usr.IsActive = 1 
    -- AND (usr.ClientCompanyId = (SELECT `Id` FROM ClientCompany cc WHERE 
    -- cc.ClientId = ClientId AND cc.CompanyCode = CompanyCode COLLATE utf8_unicode_ci limit 1)
    -- OR usr.ClientCompanyId IS NULL) 
    LIMIT 1 INTO UId;

    IF UId IS NOT NULL THEN
      UPDATE `User`
      SET ClientCompanyId = (SELECT
          cc.`Id`
        FROM `ClientCompany` cc
        WHERE cc.CompanyCode = CompanyCode)
      WHERE UserId = Uid;
    END IF;
    -- select 'pass 2';
    SELECT
      usr.UserId
    FROM `User` usr
    WHERE usr.ClientId = ClientId
    AND usr.Email = ManagerEmail COLLATE utf8_unicode_ci
    AND usr.IsActive = 1
    AND usr.ClientCompanyId = (SELECT
        `Id`
      FROM ClientCompany cc
      WHERE cc.ClientId = ClientId
      AND cc.CompanyCode = CompanyCode COLLATE utf8_unicode_ci LIMIT 1) INTO ManagerId;
    SELECT
      'pass 3',
      ManagerId,
      UId;
    IF UId IS NULL THEN
      INSERT INTO User (ClientId, UserId, RoleId, UserName, `Password`,
      FirstName, LastName, Email, IsActive, UserIdCard, ClientCompanyId)
        VALUES (clientId, UUID(), 1, ApproverEmail, (SELECT `Password` FROM User usr WHERE usr.UserName = 'kadmin'), ApproverFirstName, ApproverLastName, ApproverEmail, 1, ApproverInternalId, (SELECT cc.Id FROM ClientCompany cc WHERE cc.ClientId = ClientId AND cc.CompanyCode = CompanyCode COLLATE utf8_unicode_ci LIMIT 1));

    END IF;
    SELECT
      usr.UserId
    FROM User usr
    WHERE usr.ClientId = ClientId
    AND usr.UserIdCard = ApproverInternalId COLLATE utf8_unicode_ci
    AND (usr.Email = ApproverEmail COLLATE utf8_unicode_ci
    OR ApproverEmail = 'na')
    AND usr.IsActive = 1
    AND (usr.ClientCompanyId = (SELECT
        cc.Id
      FROM ClientCompany cc
      WHERE cc.ClientId = ClientId
      AND cc.CompanyCode = CompanyCode COLLATE utf8_unicode_ci LIMIT 1)
    OR usr.ClientCompanyId IS NULL) LIMIT 1 INTO UId;
    IF (SELECT
          COUNT(UserId)
        FROM UserRoles
        WHERE UserId = UId) = 0 THEN
      INSERT INTO UserRoles
        VALUES (UId, 1);
    END IF;
    IF UId IS NOT NULL
      AND ManagerId IS NOT NULL THEN
      SELECT
        COUNT(ID)
      FROM ApproverByAmount aba
      WHERE aba.UserId = UId COLLATE utf8_unicode_ci INTO ExistCnt;
      IF ExistCnt > 0 THEN
        SELECT
          COUNT(ID)
        FROM ApproverByAmount aba
        WHERE aba.UserId = UId COLLATE utf8_unicode_ci
        AND aba.SecondApproverId = ManagerId COLLATE utf8_unicode_ci INTO ExistCnt;

        IF ExistCnt > 0 THEN
          SELECT
            COUNT(ID)
          FROM ApproverByAmount aba
          WHERE aba.UserId = UId COLLATE utf8_unicode_ci
          AND aba.SecondApproverId = ManagerId COLLATE utf8_unicode_ci
          AND aba.MaximumAllowedAmount = MaximumAmount INTO ExistCnt;

          IF ExistCnt > 0 THEN
            SELECT
              'Already in DB'
            FROM ApproverByAmount aba
            WHERE aba.UserId = UId COLLATE utf8_unicode_ci
            AND aba.SecondApproverId = ManagerId COLLATE utf8_unicode_ci
            AND aba.MaximumAllowedAmount = MaximumAmount;
          ELSE
            SELECT
              aba.ID
            FROM ApproverByAmount aba
            WHERE aba.UserId = UId COLLATE utf8_unicode_ci
            AND aba.SecondApproverId = ManagerId COLLATE utf8_unicode_ci INTO ExistCnt;
            SELECT
              ExistCnt,
              'ready',
              MaximumAmount;

            UPDATE ApproverByAmount aba
            SET aba.MaximumAllowedAmount = MaximumAmount
            WHERE aba.Id = ExistCnt;
            SELECT
              *
            FROM ApproverByAmount aba
            WHERE aba.Id = ExistCnt;
          END IF;
        ELSE
          SELECT
            aba.ID
          FROM ApproverByAmount aba
          WHERE aba.UserId = UId COLLATE utf8_unicode_ci INTO ExistCnt;
          UPDATE ApproverByAmount aba
          SET aba.MaximumAllowedAmount = MaximumAmount,
              aba.SecondApproverId = ManagerId
          WHERE aba.Id = ExistCnt;
          SELECT
            *
          FROM ApproverByAmount aba
          WHERE aba.Id = ExistCnt;
        END IF;
      ELSE
        -- select UId, MaximumAmount, ManagerId;
        INSERT INTO ApproverByAmount (UserId, MaximumAllowedAmount, SecondApproverId)
          VALUES (UId, MaximumAmount, ManagerId);
        SELECT
          *
        FROM ApproverByAmount aba
        WHERE aba.UserId = UId COLLATE utf8_unicode_ci
        AND aba.SecondApproverId = ManagerId COLLATE utf8_unicode_ci
        AND aba.MaximumAllowedAmount = MaximumAmount;
      END IF;
    ELSE
      SELECT
        'User already exists';
    END IF;
  END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateCard` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `UpdateCard`(IN InvoiceID int,
IN CardNumber nvarchar(50),
IN TransactionNumber nvarchar(50))
BEGIN
  UPDATE Invoice inv
  SET inv.CheckNumber = CardNumber,
      inv.IsPaused = 0,
      inv.TransactionIdentifer = TransactionNumber,
      inv.ApprovalStatusId = 7
  WHERE inv.InvoiceId = InvoiceID;

  UPDATE PaymentStatus ps
  SET ps.CardNumber = CardNumber
  WHERE ps.InvoiceId = InvoiceID;
  DELETE
    FROM PausedInvoice
  WHERE InvoiceId = InvoiceID;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateContractToOrder` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `UpdateContractToOrder`(IN ContractID nvarchar(50),
IN OrderID nvarchar(50),
IN OrderNo nvarchar(50),
IN ServiceDate datetime)
BEGIN
  DECLARE InvoiceCustomerID int;
  DECLARE ContractNo nvarchar(250);

  SET InvoiceCustomerID = (SELECT
      InvoiceCustomerID
    FROM InvoiceCustomerLineItem invcustli
    WHERE invcustli.InternalId = ContractID LIMIT 1);
  IF InvoiceCustomerID IS NOT NULL THEN
    UPDATE InvoiceCustomerLineItem
    SET InternalId = OrderID
    WHERE InternalId = ContractID;
    UPDATE Contract
    SET InternalId = OrderID
    WHERE InternalId = ContractID;
    SET ContractNo = (SELECT
        ContractNo
      FROM InvoiceCustomer
      WHERE ID = InvoiceCustomerID LIMIT 1);
    IF ContractNo IS NOT NULL THEN
      UPDATE InvoiceCustomer
      SET ContractNo = OrderNo
      WHERE ContractNo = ContractNo;
      -- Also update the ContractHeader
      UPDATE ContractHeader
      SET ContractNo = OrderNo
      WHERE ContractNo = ContractNo;
      SELECT
        'CONTRACT FOUND';
    ELSE
      SELECT
        'CONTRACT NOT FOUND';
    END IF;
  ELSE
    SELECT
      'CONTRACTID NOT FOUND';
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateContractWithOrder` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `UpdateContractWithOrder`(IN CustomerSiteCode nvarchar(250),
IN CustomerNo nvarchar(250),
IN OrderID nvarchar(250),
IN OrderNo nvarchar(250),
IN ServiceAmount decimal,
IN ServiceDate datetime)
BEGIN
  DECLARE ID int;
  DECLARE done int DEFAULT 0;
  DECLARE myCount int;

  DECLARE ID_Cursor CURSOR FOR
  SELECT
    ID
  FROM InvoiceCustomer
  WHERE CustomerSiteId = (SELECT
      ID
    FROM CustomerSite custsite
    WHERE custsite.`Code` = CustomerSiteCode
    AND custsite.CustomerId = (SELECT
        CustomerId
      FROM Customer cust
      WHERE cust.CustomerNo = CustomerNo LIMIT 1) LIMIT 1)
  AND InvoiceId IN (SELECT
      InvoiceId
    FROM Invoice inv
    WHERE inv.ApprovalStatusId = 5);
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

  OPEN ID_Cursor;
GET_ID:
  LOOP
    FETCH ID_Cursor INTO ID;
    IF done = 1 THEN
      LEAVE GET_ID;
    END IF;

    SELECT
      ID;
    SET myCount = (SELECT
        COUNT(*)
      FROM InvoiceCustomerLineItem invcustli
      WHERE invcustli.InvoiceCustomerId = ID
      AND MONTH(invcustli.ServiceDate) = MONTH(ServiceDate));
    IF myCount > 0 THEN
      UPDATE InvoiceCustomer invcust
      SET invcust.ContractNo = OrderNo
      WHERE invcust.ID = ID;
      UPDATE InvoiceCustomerLineItem invcustli
      SET invcustli.ServiceDate = ServiceDate,
          invcustli.InternalId = OrderID
      WHERE invcustli.InvoiceCustomerId = ID
      AND invcustli.Amount = ServiceAmount;
      LEAVE GET_ID;
    END IF;
  END LOOP GET_ID;
  CLOSE ID_Cursor;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateCustomerItemPrice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `UpdateCustomerItemPrice`(IN CustomerNo nvarchar(250),
IN ItemNo nvarchar(250),
IN CustomerPrice float)
BEGIN
  DECLARE ItemID int;
  DECLARE ItemDesc nvarchar(50);
  DECLARE ClientId int;
  DECLARE CustomerID int;
  DECLARE CustomerLocationID int;
  DECLARE done int DEFAULT 0;

  DECLARE customerlocation_cursor CURSOR FOR
  SELECT
    CustomerLocationID
  FROM CustomerLocation custloc
  WHERE custloc.CustomerID = CustomerID;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

  SET ClientId = 27;
  SELECT
    CustomerId
  FROM Customer cust
  WHERE cust.CustomerNo = CustomerNo INTO CustomerID;
  SELECT
    ItemId
  FROM Item itm
  WHERE itm.ItemNo = ItemNo INTO ItemID;
  SELECT
    ItemDescription
  FROM Item itm
  WHERE itm.ItemNo = ItemNo INTO ItemDesc;

  IF (CustomerID IS NOT NULL
    AND ItemNo IS NOT NULL) THEN
    IF NOT EXISTS (SELECT
          *
        FROM CustomerItemPrice custitmprc
        WHERE custitmprc.CustomerID = CustomerID
        AND custitmprc.ItemID = ItemID) THEN
      INSERT INTO CustomerItemPrice (CustomerID, ItemID, Price)
        VALUES (CustomerID, ItemID, CustomerPrice);
    END IF;
    OPEN customerlocation_cursor;
  GET_CL:
    LOOP
      FETCH customerlocation_cursor INTO CustomerLocationID;
      IF done = 1 THEN
        LEAVE GET_CL;
      END IF;
      IF NOT EXISTS (SELECT
            itemId
          FROM CustomerLocationItem custlocitm
          WHERE custlocitm.ItemId = ItemID
          AND custlocitm.CustomerLocationId = CustomerLocationID) THEN
        INSERT INTO CustomerLocationItem (CustomerLocationId, ItemId, Description, VendorPrice,
        CustomerPrice, DefaultQuantity, NestleQuantity, IsActive)
          VALUES (CustomerLocationID, ItemID, ItemDesc, 0, CustomerPrice, 1, 1, 1);
      END IF;
    END LOOP GET_CL;
    CLOSE customerlocation_cursor;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateCustomerLocationFromScript` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `UpdateCustomerLocationFromScript`(IN RMSCode nvarchar(250),
IN LocationName nvarchar(250),
IN GroupCode nvarchar(50),
IN VendorNo nvarchar(250),
IN Address1 nvarchar(250),
IN Address2 nvarchar(250),
IN City nvarchar(250),
IN State nvarchar(50),
IN Zip nvarchar(50),
IN Phone nvarchar(50),
IN Email nvarchar(50),
IN CustContact nvarchar(50),
IN itemNo nvarchar(50),
IN Description nvarchar(50),
IN VendorPrice float,
IN CustomerPrice float,
IN Qty int,
IN VendorProdNum nvarchar(50),
IN VendorQty int)
BEGIN
  DECLARE ItemID int;
  DECLARE LocationID int;
  DECLARE ClientId int;
  DECLARE CustomerID int;
  DECLARE VendorID int;
  DECLARE AddressId int;
  DECLARE StateId int;
  DECLARE recCount int;

  IF NOT EXISTS (SELECT
        CustomerLocationId
      FROM CustomerLocation custloc
      WHERE custloc.LocationNumber = RMSCode) THEN
    IF NOT EXISTS (SELECT
          AddressId
        FROM Address adr
        WHERE adr.Address1 = Address1
        AND adr.ZipCode = Zip) THEN
      SET AddressId = (SELECT
          MAX(adr.AddressId)
        FROM Address adr) + 1;
      SELECT
        st.StateId
      FROM State st
      WHERE LOWER(st.StateNameShort) = LOWER(State)
      OR LOWER(st.StateName) = LOWER(State) INTO StateId;
      IF StateId IS NULL THEN
        SET StateId = 1;
      END IF;
      INSERT INTO Address (StateId, ZipCode, CityName, Address1, Address2, PhoneNo, Email, ContactPerson)
        VALUES (StateId, Zip, City, Address1, Address2, Phone, Email, CustContact);
    ELSE
      SELECT
        adr.AddressId
      FROM Address adr
      WHERE adr.Address1 = Address1
      AND adr.ZipCode = Zip INTO AddressId;
    END IF;
    SELECT
      cust.CustomerID
    FROM Customer cust
    WHERE cust.CustomerNo = GroupCode INTO CustomerID;
    IF CustomerID IS NULL THEN
      SET CustomerID = (SELECT
          MAX(cust.CustomerId)
        FROM Customer cust) + 1;
      INSERT INTO Customer (ClientId, CustomerName, AddressId, DBCode)
        VALUES (ClientId, LocationName, AddressId, GroupCode);
    END IF;
    SELECT
      vloc.VendorId
    FROM VendorLocation vloc
    WHERE vloc.LocationNumber = VendorNo INTO VendorID;
    IF VendorID IS NOT NULL THEN
      SET LocationID = (SELECT
          MAX(custloc.CustomerLocationId)
        FROM CustomerLocation custloc) + 1;
      INSERT INTO CustomerLocation (CustomerId, LocationNumber, LocationName, AddressId, VendorLocationId)
        VALUES (CustomerID, RMSCode, LocationName, AddressId, VendorID);
    END IF;
  ELSE
    SELECT
      COUNT(*)
    FROM CustomerLocation custloc
    WHERE custloc.LocationNumber = RMSCode INTO recCount;
    IF recCount = 1 THEN
      SELECT
        custloc.CustomerLocationId
      FROM CustomerLocation custloc
      WHERE custloc.LocationNumber = RMSCode INTO LocationID;
      IF NOT EXISTS (SELECT
            *
          FROM CustomerLocationItem custlocitm
          WHERE custlocitm.CustomerLocationId = LocationID
          AND custlocitm.ItemId = (SELECT
              itm.ItemId
            FROM Item itm
            WHERE itm.ItemNo = itemNo)) THEN
        SELECT
          itm.ItemId
        FROM Item itm
        WHERE itm.ItemNo = itemNo INTO ItemID;
        IF ItemID IS NOT NULL THEN
          INSERT INTO CustomerLocationItem (CustomerLocationId, ItemId, Description, VendorPrice, CustomerPrice, DefaultQuantity, VendorProductNumber, VendorQuantity)
            VALUES (LocationID, ItemID, Description, VendorPrice, CustomerPrice, 1, VendorProdNum, VendorQty);
        END IF;
      END IF;
    END IF;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateCustomerLocationItemPrice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `UpdateCustomerLocationItemPrice`(IN CustomerLocationName nvarchar(250),
IN CustomerLocationNo nvarchar(250),
IN DBCode nvarchar(50),
IN ItemNo nvarchar(250),
IN VendorPrice float,
IN CustomerPrice float,
IN VendorQty int,
IN NestleQty int)
BEGIN
  DECLARE ItemID int;
  DECLARE ClientId int;
  DECLARE CustomerLocatoinID int;

  SET ClientId = 27;
  SELECT
    custloc.CustomerLocationId
  FROM CustomerLocation custloc
  WHERE custloc.LocationNumber = CustomerLocationNo INTO CustomerLocatoinID;
  SELECT
    itm.ItemId
  FROM Item itm
  WHERE itm.ItemNo = ItemNo INTO ItemID;

  IF (CustomerLocatoinID IS NOT NULL
    AND CustomerLocationNo <> '') THEN
    UPDATE CustomerLocation custloc
    SET custloc.LocationName = CustomerLocationName,
        custloc.DBCode = DBCode
    WHERE custloc.CustomerLocationId = CustomerLocatoinID;
    IF EXISTS (SELECT
          *
        FROM CustomerLocationItem custlocitm
        WHERE custlocitm.ItemId = ItemID
        AND custlocitm.CustomerLocationId = CustomerLocatoinID) THEN
      UPDATE CustomerLocationItem
      SET VendorPrice = VendorPrice,
          CustomerPrice = CustomerPrice,
          VendorQuantity = VendorQty,
          NestleQuantity = NestleQty
      WHERE ItemId = ItemID
      AND CustomerLocationId = CustomerLocatoinID;
    END IF;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateInvoiceWithCheckPaid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `UpdateInvoiceWithCheckPaid`(IN VendorNum nvarchar(250),
IN InvoiceNum nvarchar(50),
IN CheckNumber nvarchar(50),
IN PaidDate datetime,
IN ClientID int)
BEGIN
  /*update Batch set `Source` = 'CLOUDX' where ID in 
	(select BatchID from Invoice inv where InvoiceName like 'image%' and inv.ClientId = 1);*/

  IF EXISTS (SELECT
        'True'
      FROM Invoice inv
      WHERE InvoiceNo = InvoiceNum COLLATE utf8_unicode_ci
      AND inv.ApprovalStatusId = 5
      AND inv.ClientId = ClientID
      AND inv.VendorId = (SELECT
          v.VendorId
        FROM Vendor v
        WHERE v.VendorNo = VendorNum COLLATE utf8_unicode_ci
        AND v.ClientID = ClientID
        AND v.First_Net_Days IS NOT NULL LIMIT 1)) THEN
    SELECT
      "Found record";
    UPDATE Invoice
    SET ApprovalStatusID = 7,
        CheckNumber = CheckNumber,
        LastActionDate = PaidDate,
        LastActionBy = 'System'
    WHERE InvoiceNo = InvoiceNum COLLATE utf8_unicode_ci
    AND ApprovalStatusId = 5
    AND ClientId = ClientID
    AND VendorId = (SELECT
        v.VendorId
      FROM Vendor v
      WHERE v.VendorNo = VendorNum COLLATE utf8_unicode_ci
      AND v.ClientID = ClientID
      AND v.First_Net_Days IS NOT NULL LIMIT 1);
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateLocationItems` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `UpdateLocationItems`(IN LocationNumber nvarchar(250),
IN Description nvarchar(250),
IN CustomerPrice float,
IN ItemID int)
BEGIN
  DECLARE CustomerLocationId int;
  SELECT
    CustomerLocationId
  FROM CustomerLocation custloc
  WHERE custloc.LocationNumber LIKE CONCAT('%', LocationNumber)
  AND LocationName <> '<blank>' LIMIT 1 INTO CustomerLocationId;

  IF CustomerLocationId IS NOT NULL THEN
    IF EXISTS (SELECT
          *
        FROM CustomerLocationItem custlocitm
        WHERE custlocitm.CustomerLocationId = CustomerLocationId
        AND custlocitm.ItemId = ItemID) THEN
      UPDATE CustomerLocationItem
      SET CustomerPrice = CustomerPrice
      WHERE CustomerLocationId = CustomerLocationId
      AND ItemId = ItemID;
    ELSE
      INSERT INTO CustomerLocationItem (CustomerLocationId, ItemId, Description, CustomerPrice, DefaultQuantity, NestleQuantity, VendorPrice)
        VALUES (CustomerLocationId, ItemID, Description, CustomerPrice, 1, 1, 0);
    END IF;
  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UpdateUserClientCompany` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `UpdateUserClientCompany`(IN companyId int, IN userId char(36), IN allowPaymentApproval int)
BEGIN
  UPDATE UserClientCompanies ucc
  SET AllowPaymentApproval = allowPaymentApproval
  WHERE ucc.UserId = userId
  AND ucc.ClientCompanyId = companyId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `UploadQuery` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `UploadQuery`(IN `query` nvarchar(10240),
IN `time` nvarchar(240),
IN `user` nvarchar(240),
IN `foreignkey` int,
IN `invoiceid` int)
BEGIN
  INSERT INTO `QueryLog` (`query`, `time`, `user`, `foreign_key`, `invoiceid`)
    VALUES (`query`, `time`, `user`, `foreignkey`, `invoiceid`);
  SELECT
    'true' AS 'res';
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `WorkOrderCostVarianceReport` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `WorkOrderCostVarianceReport`(
    IN scannedDateFrom DATETIME,
    IN scannedDateTo DATETIME,
    IN serviceDescription VARCHAR(255),
    IN invoiceNumber VARCHAR(50),
    IN vendorIdArray VARCHAR(255),
    IN propertyIdArray VARCHAR(255),
    IN showVariance VARCHAR(255)
)
BEGIN
    SELECT 
        w.WODetailId,
        wo.WOId,
        i.InvoiceId,
        i.InvoiceNo,
        i.ScannedDate,
        w.ServiceDate,
        wo.EquipmentName AS 'Equipment',
        w.ResolvedReason,
        w.ResolvedDate,
        wo.WONumber,
        u.UserName AS 'ApprovedBy',
        CONCAT(g.GLCodeName, '-', g.Desccription) AS 'GLAccount',
        w.Description,
        CONCAT(v.VendorNo, '-', v.VendorName) AS VendorName,
        d.DepartmentName AS PropertyName,
        CAST(w.UnitCost AS DECIMAL(10, 2)) AS 'WoDetailUnitCost',
        CASE 
            WHEN wo.UnitCost IS NOT NULL THEN CAST(wo.UnitCost AS DECIMAL(10, 2))
            ELSE (
                SELECT 
                    CASE 
                        WHEN LEFT(wwm.WOSummary, 1) = '1' THEN 
                            CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(wwm.WOSummary, 'unitCost :', -1), ' ', 1) AS DECIMAL(10, 2))
                        ELSE 
                            CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(wwm.WOSummary, 'UnitCost:', -1), CHAR(13), 1) AS DECIMAL(10, 2))
                    END
                FROM WOToWODetailMatch wwm
                WHERE wwm.WODetailId = w.WODetailId
                LIMIT 1
            )
        END AS 'WOUnitCost',
        i.eTracClientCode,
        wwm.WOSummary,
        CASE 
            WHEN wwm.WOSummary LIKE '21%' THEN 'Auto'
            WHEN wwm.WOSummary LIKE '11%' THEN 'Auto'
            WHEN wwm.WOSummary LIKE '1 %' THEN 'Manual'
            WHEN wwm.WOSummary LIKE '2(%' THEN 'Auto'
            WHEN wwm.WOSummary LIKE '1(%' THEN 'Auto'
            WHEN wwm.WOSummary LIKE '0%' THEN 'Manual'
            ELSE ''
        END AS MatchingType
    FROM 
        Invoice AS i
        INNER JOIN WODetails AS w ON i.InvoiceId = w.InvoiceId
        INNER JOIN WOToWODetailMatch wwm ON wwm.WODetailId = w.WODetailId
        LEFT JOIN WO wo ON wo.WOId = wwm.WOId
        INNER JOIN Vendor v ON v.VendorId = i.VendorId
        INNER JOIN Department d ON d.Id = i.VendorSiteId
        INNER JOIN User u ON u.UserId = i.ApproverId
        INNER JOIN GLCode g ON g.GLCodeId = w.GLCodeId
    WHERE 
        (scannedDateFrom IS NULL OR w.ServiceDate >= scannedDateFrom)
        AND (scannedDateTo IS NULL OR w.ServiceDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
        AND (invoiceNumber IS NULL OR invoiceNumber = '' OR i.InvoiceNo COLLATE utf8mb4_general_ci = invoiceNumber COLLATE utf8mb4_general_ci)
        AND (serviceDescription IS NULL OR serviceDescription = '' OR w.Description COLLATE utf8mb4_general_ci LIKE CONCAT('%', serviceDescription COLLATE utf8mb4_general_ci, '%'))
        AND (vendorIdArray IS NULL OR vendorIdArray = '' OR FIND_IN_SET(v.VendorId COLLATE utf8mb4_general_ci, vendorIdArray COLLATE utf8mb4_general_ci) > 0)
        AND (propertyIdArray IS NULL OR propertyIdArray = '' OR FIND_IN_SET(d.Id COLLATE utf8mb4_general_ci, propertyIdArray COLLATE utf8mb4_general_ci) > 0)
        AND i.ClientId = 79
        AND i.ApprovalStatusId = 7
        AND i.InvoiceType = 'HaulerInvoice'
        AND (
            showVariance != 'variance' OR
            (
                w.UnitCost BETWEEN (
                    CASE 
                        WHEN wo.UnitCost IS NOT NULL THEN CAST(wo.UnitCost AS DECIMAL(10, 2)) * 0.9
                        ELSE (
                            SELECT 
                                CASE 
                                    WHEN LEFT(wwm.WOSummary, 1) = '1' THEN 
                                        CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(wwm.WOSummary, 'unitCost :', -1), ' ', 1) AS DECIMAL(10, 2)) * 0.9
                                    ELSE 
                                        CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(wwm.WOSummary, 'UnitCost:', -1), CHAR(13), 1) AS DECIMAL(10, 2)) * 0.9
                                END
                            FROM WOToWODetailMatch wwm
                            WHERE wwm.WODetailId = w.WODetailId
                            LIMIT 1
                        )
                    END
                ) AND (
                    CASE 
                        WHEN wo.UnitCost IS NOT NULL THEN CAST(wo.UnitCost AS DECIMAL(10, 2)) * 1.1
                        ELSE (
                            SELECT 
                                CASE 
                                    WHEN LEFT(wwm.WOSummary, 1) = '1' THEN 
                                        CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(wwm.WOSummary, 'unitCost :', -1), ' ', 1) AS DECIMAL(10, 2)) * 1.1
                                    ELSE 
                                        CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(wwm.WOSummary, 'UnitCost:', -1), CHAR(13), 1) AS DECIMAL(10, 2)) * 1.1
                                END
                            FROM WOToWODetailMatch wwm
                            WHERE wwm.WODetailId = w.WODetailId
                            LIMIT 1
                        )
                    END
                ) and   w.UnitCost <> (
                SELECT 
                    CASE 
                        WHEN LEFT(wwm.WOSummary, 1) = '1' THEN 
                            CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(wwm.WOSummary, 'unitCost :', -1), ' ', 1) AS DECIMAL(10, 2))
                        ELSE 
                            CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(wwm.WOSummary, 'UnitCost:', -1), CHAR(13), 1) AS DECIMAL(10, 2))
                    END
                FROM WOToWODetailMatch wwm
                WHERE wwm.WODetailId = w.WODetailId
                LIMIT 1
            )
                AND (wwm.WOSummary LIKE '11%' OR wwm.WOSummary LIKE '21%'  OR wwm.WOSummary LIKE '2(%' OR wwm.WOSummary LIKE '0%' OR wwm.WOSummary LIKE '1 %'  OR wwm.WOSummary LIKE '1(%')
                AND (wwm.WOSummary <> '1 null' AND wwm.WOSummary <> '1 9999999')
            )
        )
    ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `WorkOrderCostVarianceReport1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `WorkOrderCostVarianceReport1`(
    IN scannedDateFrom DATETIME,
    IN scannedDateTo DATETIME,
    IN serviceDescription VARCHAR(255),
    IN invoiceNumber VARCHAR(50),
    IN vendorIdArray VARCHAR(255),
    IN propertyIdArray VARCHAR(255),
    IN showVariance VARCHAR(255)
)
BEGIN
    SELECT 
        w.WODetailId,
        wo.WOId,
        i.InvoiceId,
        i.InvoiceNo,
        i.ScannedDate,
        w.ServiceDate,
        wo.EquipmentName AS 'Equipment',
        w.ResolvedReason,
        w.ResolvedDate,
        wo.WONumber,
        u.UserName AS 'ApprovedBy',
        CONCAT(g.GLCodeName, '-', g.Description) AS 'GLAccount',
        w.Description,
        CONCAT(v.VendorNo, '-', v.VendorName) AS VendorName,
        d.DepartmentName AS PropertyName,
        CAST(w.UnitCost AS DECIMAL(10, 2)) AS 'WoDetailUnitCost',
        CASE 
            WHEN wo.UnitCost IS NOT NULL THEN CAST(wo.UnitCost AS DECIMAL(10, 2))
            ELSE (
                SELECT CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(wwm.WOSummary, 'unitCost :', -1), ' ', 1) AS DECIMAL(10, 2))
                FROM WOToWODetailMatch wwm
                WHERE wwm.WODetailId = w.WODetailId
                LIMIT 1
            )
        END AS 'WOUnitCost',
        i.eTracClientCode,
        CASE 
            WHEN wwm.WOSummary LIKE '21%' THEN 'Auto'
            WHEN wwm.WOSummary LIKE '11%' THEN 'Auto'
            WHEN wwm.WOSummary LIKE '1 %' THEN 'Manual'
            WHEN wwm.WOSummary LIKE '2(%' THEN 'Auto'
            WHEN wwm.WOSummary LIKE '0%' THEN 'Manual'
            ELSE ''
        END AS MatchingType
    FROM 
        Invoice AS i
        INNER JOIN WODetails AS w ON i.InvoiceId = w.InvoiceId
        LEFT JOIN WOToWODetailMatch wwm ON wwm.WODetailId = w.WODetailId
        LEFT JOIN WO wo ON wo.WOId = wwm.WOId
        INNER JOIN Vendor v ON v.VendorId = i.VendorId
        INNER JOIN Department d ON d.Id = i.VendorSiteId
        INNER JOIN User u ON u.UserId = i.ApproverId
        INNER JOIN GLCode g ON g.GLCodeId = w.GLCodeId
    WHERE 
        (scannedDateFrom IS NULL OR i.ScannedDate >= scannedDateFrom)
        AND (scannedDateTo IS NULL OR i.ScannedDate < DATE_ADD(scannedDateTo, INTERVAL 1 DAY))
        AND (invoiceNumber IS NULL OR invoiceNumber = '' OR i.InvoiceNo COLLATE utf8mb4_general_ci = invoiceNumber COLLATE utf8mb4_general_ci)
        AND (serviceDescription IS NULL OR serviceDescription = '' OR w.Description COLLATE utf8mb4_general_ci LIKE CONCAT('%', serviceDescription COLLATE utf8mb4_general_ci, '%'))
        AND (vendorIdArray IS NULL OR vendorIdArray = '' OR FIND_IN_SET(v.VendorId COLLATE utf8mb4_general_ci, vendorIdArray COLLATE utf8mb4_general_ci) > 0)
        AND (propertyIdArray IS NULL OR propertyIdArray = '' OR FIND_IN_SET(d.Id COLLATE utf8mb4_general_ci, propertyIdArray COLLATE utf8mb4_general_ci) > 0)
        AND i.ClientId = 79
        AND i.ApprovalStatusId = 7
        AND i.InvoiceType = 'HaulerInvoice'
        AND (
            showVariance != 'variance' OR
            (
                (w.UnitCost <> wo.UnitCost)    
                AND (wwm.WOSummary LIKE '11%' OR wwm.WOSummary LIKE '21%'  OR wwm.WOSummary LIKE '2(%' OR wwm.WOSummary LIKE '0%' OR wwm.WOSummary LIKE '1 %')
                AND (wwm.WOSummary <> '1 null' AND wwm.WOSummary <> '1 9999999')
            )
        )
    ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `zz_InvoicesInLimbo` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `zz_InvoicesInLimbo`(IN pForClientId int)
BEGIN	

	-- drop table zz_InvoicesInLimbo_Steven;
/*
	Create Table if not exists zz_InvoicesInLimbo_Steven (
		ClientId				int,
		InvoiceId				int,
		ApprovalStepId_Calc		int,
		UserId 					varchar(1000),
		_DateLoaded				datetime
		);
*/
	

	Insert into zz_InvoicesInLimbo_Steven (ClientId, InvoiceId)
		SELECT i.ClientId, i.InvoiceId
		FROM Invoice i
			INNER JOIN Client c ON i.ClientId = c.ClientId AND c.IsActive = 1
			INNER JOIN Vendor v ON c.ClientId = v.ClientId AND i.VendorId = v.VendorId
		WHERE i.ScannedDate >= DATE_ADD(NOW(), INTERVAL -180 DAY)
				AND i.AprovedDate IS NULL
				AND i.IsDeleted = 0
				AND (i.ArchiveReason IS NULL OR i.ArchiveReason = '')
				AND i.IsPaused = 0
				AND i.ApprovalStatusId = 3
				AND i.InvoiceType = 'INVOICE'
				AND i.ClientId <> 180
				AND NOT EXISTS (SELECT 1 FROM UserInvoiceAssignment uia  where uia.InvoiceID = i.InvoiceID)
				AND EXISTS (SELECT 1 FROM InvoiceHistory ih  where ih.InvoiceID = i.InvoiceID AND ih.Actor = 'System' AND ih.Action = 'Assignment')
				and c.ClientId = ifnull(pForClientId, c.ClientId)
				;


	Update 	zz_InvoicesInLimbo_Steven Limbo 
		inner join 	(
					Select	LastAction.*, 
							(select uiah.ToApprovalSubStepId
								from 	UserInvoiceAssignmentHistory  uiah
								where 	uiah.InvoiceId = LastAction.InvoiceId
								ORDER 	BY 1 desc
								limit 1)as LastApprovalSubStepId
					from (select distinct NewData, Action, InvoiceHistory.InvoiceId, ActionDate
								from InvoiceHistory 
									inner join 	zz_InvoicesInLimbo_Steven Limbo 	on Limbo.InvoiceId = InvoiceHistory.InvoiceId
																						and Limbo._DateLoaded is null
								where InvoiceHistory.InvoiceId = Limbo.InvoiceId
										and ActionDate = (select Max(ActionDate) 
															from InvoiceHistory 
															where InvoiceHistory.InvoiceId = Limbo.InvoiceId
																	and CurrentStatus = 'In Approval'
																	and Field = 'Approvers')
										and CurrentStatus = 'In Approval'
										and Field = 'Approvers'
										and NewData is not null) LastAction
					) LastInfo on Limbo.InvoiceId = LastInfo.InvoiceId

		set 	Limbo.ApprovalStepId_Calc = 	case 	when LastInfo.Action like '%delega%' or LastInfo.Action in ('Request', 'Notification') then LastApprovalSubStepId
														when LastInfo.Action like '%Assignment%' then 
															 (select s1.ApprovalSubStepId
																	from ApprovalSubStep s1
																		inner join ApprovalSubStep s2 on s1.ApprovalStepId = s2.ApprovalStepId
																											and s2.ApprovalSubStepId = LastApprovalSubStepId
																	order by s1.OrderNo
																	limit 1)
														ELSE (select s1.ApprovalSubStepId
																	from ApprovalSubStep s1
																		inner join ApprovalSubStep s2 on s1.ApprovalStepId = s2.ApprovalStepId
																											and s2.ApprovalSubStepId = LastApprovalSubStepId
																		where s1.OrderNo > s2.OrderNo
																	order by s1.OrderNo
																	limit 1) END,
				Limbo.UserId = (select GROUP_CONCAT(User.UserId SEPARATOR ';')
									from User 
									where User.ClientId = Limbo.ClientId
										and LastInfo.NewData like CONCAT('%', LastName, ', ', FirstName, '%')
										and User.IsActive = 1
										and User.RoleId = 1
									group by User.ClientId
								);
	
	
	insert into UserInvoiceAssignment (InvoiceId, UserId, Type, State, ApprovalSubStepId, DateCreated)			
	select 	Limbo.InvoiceId	as InvoiceId,
			User.UserId,
			0 as Type,
			1 as State,
			Limbo.ApprovalStepId_Calc,
			Now() as DateCreated
	from User
		inner join 	zz_InvoicesInLimbo_Steven Limbo 	on Limbo.ClientId = User.ClientId
															and Limbo.UserId like CONCAT('%', User.UserId, '%')
															and Limbo._DateLoaded is null
	where 	ApprovalStepId_Calc is not null and Limbo._DateLoaded is null
	order by Limbo.InvoiceId;



	Insert into InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId)
	select 	Limbo.InvoiceId	as InvoiceId,
			'System', 'Notification', now(), '', 
			GROUP_CONCAT(concat(User.LastName, ', ', User.FirstName) separator '; '),  
			'Approvers', 'In Approval', 'In Approval', '00000000-0000-0000-0000-000000000000'
	from User
		inner join 	zz_InvoicesInLimbo_Steven Limbo 	on Limbo.ClientId = User.ClientId
															and Limbo.UserId like CONCAT('%', User.UserId, '%')
															and Limbo._DateLoaded is null
	where 	ApprovalStepId_Calc is not null and Limbo._DateLoaded is null
	group by Limbo.InvoiceId
	order by Limbo.InvoiceId;



	SELECT c.CustomerName, v.VendorNo, v.VendorName, i.InvoiceNo, i.InvoiceDate, i.InvoiceTotal, i.ScannedDate, i.InvoiceId, 'Unable to auto assign'
	FROM Invoice i
			inner join zz_InvoicesInLimbo_Steven Limbo 	on Limbo.InvoiceId = i.InvoiceId
															and Limbo._DateLoaded is null
			INNER JOIN Client c 						ON i.ClientId = c.ClientId AND c.IsActive = 1
			INNER JOIN Vendor v 						ON c.ClientId = v.ClientId AND i.VendorId = v.VendorId
	where (Limbo.ApprovalStepId_Calc is null or Limbo.UserId is null) and Limbo._DateLoaded is null
	ORDER BY 1,2,3,4;

	Update zz_InvoicesInLimbo_Steven set _DateLoaded = now() where _DateLoaded is null;

	-- select * from UserInvoiceAssignment where DateCreated = '7/17/2024 3:36:15 PM' desc limit 500;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_r_SystemReleasesCancel` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_r_SystemReleasesCancel`(IN pReleaseID int)
ThisProc:
	BEGIN

		IF EXISTS (SELECT
					1
				FROM SystemReleases
				WHERE ReleaseID = pReleaseID
				AND ReleaseDate IS NOT NULL) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This entry has already been released.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;


		UPDATE	SystemReleases
		SET 	CompletedDate 	= case when ReviewedDate is null then null else CompletedDate end,
				ReviewedDate 		= case when ReleaseDate is null then null else ReviewedDate end
		WHERE ReleaseID = pReleaseID;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_r_SystemReleasesCompleted` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_r_SystemReleasesCompleted`(IN pReleaseID int)
ThisProc:
	BEGIN

		IF EXISTS (SELECT
					1
				FROM SystemReleases
				WHERE ReleaseID = pReleaseID
				AND CompletedDate IS NOT NULL) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This entry has already been completed and is in review.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;


		UPDATE SystemReleases
		SET CompletedDate = NOW()
		WHERE ReleaseID = pReleaseID;

		set @Users = null;

		SET SESSION group_concat_max_len = 1000000;
		SELECT	GROUP_CONCAT(distinct u.UserId separator ';')
		into 	@Users
		FROM	ClientUserRoles cur
				INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
				INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
				INNER JOIN SystemFunctions sf 			ON sf.FunctionKey = crf.FunctionKey
				inner join User u 						on u.UserId = cur.UserId
		WHERE	sf.FunctionKey = 'SystemReleaseReview'
				and u.IsActive 	= 1
				and crf.Access  = 1;

		call _x_Notify(@Users, 'System Release', 'There is a new release awaiting review.', 'SystemRelease', null, null, null);

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_r_SystemReleasesDelete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_r_SystemReleasesDelete`(IN pReleaseID int)
ThisProc:
	BEGIN

		IF EXISTS (SELECT
					1
				FROM SystemReleases
				WHERE ReleaseID = pReleaseID
				AND CompletedDate IS NOT NULL) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This entry can only be deleted when it is open.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;


		DELETE
			FROM SystemReleases
		WHERE ReleaseID = pReleaseID;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_r_SystemReleasesRelease` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_r_SystemReleasesRelease`(IN pReleaseID int, IN pDate date)
ThisProc:
	BEGIN	
-- noformat

		IF EXISTS (	SELECT	1
					FROM	SystemReleases
					WHERE	ReleaseID = pReleaseID
					AND		ReviewedDate IS NULL) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This entry has already not been reviewed.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;

		IF EXISTS (SELECT	1
					FROM 	SystemReleases
					WHERE 	ReleaseID = pReleaseID
					AND 	SentDate IS NOT NULL) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This entry has already been approved and the emails sent.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;


		IF pDate IS NULL OR pDate <= date(NOW())  THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The release date is required and must be in the future.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;

		UPDATE SystemReleases
		SET ReleaseDate = pDate
		WHERE ReleaseID = pReleaseID;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_r_SystemReleasesReviewed` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_r_SystemReleasesReviewed`(IN pReleaseID int)
ThisProc:
	BEGIN

		IF EXISTS (SELECT
					1
				FROM SystemReleases
				WHERE ReleaseID = pReleaseID
				AND ReviewedDate IS NOT NULL) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This entry has already been reviewed.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;


		UPDATE SystemReleases
		SET ReviewedDate = NOW()
		WHERE ReleaseID = pReleaseID;


		SET SESSION group_concat_max_len = 1000000;
		SELECT	GROUP_CONCAT(distinct u.UserId separator ';')
		into 	@Users
		FROM	ClientUserRoles cur
				INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
				INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
				INNER JOIN SystemFunctions sf 			ON sf.FunctionKey = crf.FunctionKey
				inner join User u 						on u.UserId = cur.UserId
		WHERE	sf.FunctionKey = 'SystemReleaseRelease'
				and u.IsActive 	= 1
				and crf.Access  = 1;

		call _x_Notify(@Users, 'System Release', 'There is a new release that has been reviewed.', 'SystemRelease', null, null, null);

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_r_SystemReleasesSearch` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_r_SystemReleasesSearch`(IN pReleaseID int,
IN pOption varchar(20))
ThisProc:
	BEGIN		

-- noformat
		IF pReleaseID IS NOT NULL THEN
			SELECT	sr.*
			FROM	SystemReleases sr
			WHERE 	sr.ReleaseID = pReleaseID;

			SELECT
					c.CustomerName,
					c.ClientId
			FROM Client c
				INNER JOIN SystemReleasesClient src		ON src.ClientId = c.ClientId
			WHERE src.ReleaseID = pReleaseID
			ORDER BY 1;
			LEAVE ThisProc;
		END IF;

		IF pOption = 'ReleaseNotes' THEN
			SELECT	ReleaseID,
					ReleaseDate,
					ReleaseNotes,
					InternalNotes,
					JiraReference
			FROM SystemReleases
			WHERE	ReleaseDate IS NOT NULL
					-- and ReleaseDate <= NOW()
					-- AND SentDate is not NULL
			ORDER 	BY 1 DESC;
			LEAVE ThisProc;
		END IF;

		SELECT	*
		FROM	SystemReleases
		WHERE (pOption = 'Open'				AND CompletedDate IS NULL)
				OR (pOption = 'ToReview'	AND CompletedDate IS NOT NULL	AND ReviewedDate IS NULL)
				OR (pOption = 'ForRelease'	AND ReviewedDate IS NOT NULL	AND ReleaseDate IS NULL)
				OR (pOption = 'History'		AND ReleaseDate IS NOT NULL)
		ORDER BY ReleaseDate desc, ReviewedDate desc;


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_r_SystemReleasesUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_r_SystemReleasesUpdate`(INOUT pReleaseID int,
IN pReleaseNotes mediumtext,
IN pInternalNotes mediumtext,
IN pJiraReference varchar(20))
ThisProc:
	BEGIN

		IF EXISTS (SELECT
					1
				FROM SystemReleases
				WHERE ReleaseID = pReleaseID
				AND SentDate IS NOT NULL) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This entry has already been approved and the emails sent.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;

		IF pReleaseID IS NULL THEN
			INSERT INTO SystemReleases (ReleaseNotes, InternalNotes, JiraReference, UpdatedDate)
				VALUES (pReleaseNotes, pInternalNotes, pJiraReference, NOW());
			SET pReleaseID = LAST_INSERT_ID();
		ELSE
			UPDATE SystemReleases
			SET ReleaseNotes = pReleaseNotes,
				InternalNotes = pInternalNotes,
				JiraReference = pJiraReference,
				UpdatedDate = NOW()
			WHERE ReleaseID = pReleaseID;
		END IF;


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_ConsoleTemplateClientDetails` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_ConsoleTemplateClientDetails`(IN pClientId int)
BEGIN
	SELECT Client.ClientId, Client.CustomerName, Client.IsActive  FROM Client WHERE Client.ClientId = pClientId;
	
	SELECT cc.ClientId, cc.CompanyCode, cc.Id, cc.Description, cc.AllowPOAutoApproval  FROM ClientCompany cc WHERE cc.ClientId = pClientId;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_ConsoleTemplateClientList` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_ConsoleTemplateClientList`()
BEGIN
	SELECT Client.ClientId 
	FROM Client WHERE Client.ClientId mod 4 = 1 ORDER BY Client.ClientId DESC ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_ConsoleTemplateFakeUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_ConsoleTemplateFakeUpdate`(
	INOUT pId INT,
	IN pName VARCHAR(55)
)
BEGIN
	DECLARE vModRes INT;
	SET vModRes= pId MOD 2;
	SET pId = pId*(vModRes+1);

	IF(vModRes = 0) THEN -- make it fail on even numbers
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This number is even', MYSQL_ERRNO = 1;
	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_CustomerEmailWeeklyReport_GetEmails` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_CustomerEmailWeeklyReport_GetEmails`(IN pClientId int, IN pReportType varchar(10))
ThisProc:
	BEGIN
		DECLARE eof int DEFAULT 0;
		DECLARE varEmailAddress varchar(100);
		DECLARE curAddresses CURSOR FOR
		SELECT
			ecc.EmailAddress
		FROM APSHTML.EmailCaptureClients ecc
		WHERE ecc.ClientId = pClientId
		AND IFNULL(ecc.EmailAddress, '') <> '';
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET eof = 1;

		SET @Now = CURDATE();
		SET @Sunday = DATE_SUB(@Now, INTERVAL DAYOFWEEK(@Now) - 1 DAY);
		SET @LastMonday = DATE_SUB(@Sunday, INTERVAL 6 DAY);

		SET @WhereClause = NULL;
		OPEN curAddresses;
	BuildWhereClause:
		LOOP
			FETCH curAddresses INTO varEmailAddress;
			IF eof = 1 THEN
				LEAVE BuildWhereClause;
			END IF;
			SET @WhereClause = CONCAT(IFNULL(CONCAT(@WhereClause, ' or ', ''), ''), 'Data.Receiver LIKE ''%', IFNULL(varEmailAddress, ''), '%''');
		END LOOP;
		CLOSE curAddresses;
		IF @WhereClause IS NULL THEN
			SET @WhereClause = '(1=2)';
		END IF;
		SET @WhereClause = CONCAT('(', @WhereClause, ')', CHAR(13), CHAR(10), 'and date(Data.date) BETWEEN ? AND ?');

		DROP TEMPORARY TABLE IF EXISTS Results;
		CREATE TEMPORARY TABLE IF NOT EXISTS Results (
			EmailBox varchar(500),
			EmailFrom varchar(500),
			EmailSubject varchar(500),
			EmailDate datetime,
			EmailAttachments varchar(2000),
			EmailAttachmentCount int
		);
		SET @Sql = 'insert into Results (EmailBox, EmailFrom, EmailSubject, EmailDate, EmailAttachments, EmailAttachmentCount)';
		SET @Sql = CONCAT(@Sql, CHAR(13), CHAR(10), '', 'Select');
		SET @Sql = CONCAT(@Sql, CHAR(13), CHAR(10), '	', 'left(Data.Receiver, Locate(''@'', Data.Receiver)-1),');
		SET @Sql = CONCAT(@Sql, CHAR(13), CHAR(10), '	', 'Data.Sender,');
		SET @Sql = CONCAT(@Sql, CHAR(13), CHAR(10), '	', 'Data.Subject,');
		SET @Sql = CONCAT(@Sql, CHAR(13), CHAR(10), '	', 'Data.Date,');
		SET @Sql = CONCAT(@Sql, CHAR(13), CHAR(10), '	', 'Data.Attachments,');
		SET @Sql = CONCAT(@Sql, CHAR(13), CHAR(10), '	', 'Data.NumberOfAttachments');
		SET @Sql = CONCAT(@Sql, CHAR(13), CHAR(10), '', 'FROM APSHTML.EmailCaptureLog Data');
		SET @Sql = CONCAT(@Sql, CHAR(13), CHAR(10), 'Where ', @WhereClause);

		PREPARE dynamic_statement FROM @Sql;
		EXECUTE dynamic_statement USING @LastMonday, @Sunday;
		DEALLOCATE PREPARE dynamic_statement;
		IF IFNULL(pReportType, 'Detail') = 'Detail' THEN
			SELECT
				r.EmailBox,
				r.EmailDate,
				r.EmailFrom,
				r.EmailSubject,
				EmailAttachments
			FROM Results r
			ORDER BY r.EmailBox, r.EmailDate;

		ELSE
			SELECT
				EmailBox,
				DATE(EmailDate) AS EmailDate,
				COUNT(*) AS EmailsReceived,
				SUM(EmailAttachmentCount) AS EmailAttachments,
				SUM(CHAR_LENGTH(EmailAttachments) - CHAR_LENGTH(REPLACE(EmailAttachments, '.pdf', SPACE(LENGTH('.pdf') - 1)))) AS EmailPDFs
			FROM Results
			GROUP BY EmailBox,
					 DATE(EmailDate)
			ORDER BY 1;
		END IF;
		DROP TEMPORARY TABLE IF EXISTS Results;
	END ThisProc ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_CustomerEmailWeeklyReport_GetSubsubscribers` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_CustomerEmailWeeklyReport_GetSubsubscribers`(IN `pClientId` int,
IN `pReportType` varchar(10))
ThisProc:
	BEGIN
		SELECT
			Data.*,
			CASE WHEN NOT pReportType IS NULL THEN pReportType WHEN config.Argument1 IS NULL THEN 'Detail' WHEN config.Argument1 LIKE 'Summary' THEN 'Summary' ELSE 'Detail' END AS ReportType
		FROM (SELECT
				c.CustomerName,
				c.Email,
				c.ClientId
			FROM APSHTML.Client c
			WHERE (
			c.Email <> ''
			AND NOT (
			c.Email LIKE '%cloudxdpo.com%'
			OR c.Email LIKE '%cloudx.com%'
			OR c.Email LIKE '%apdropbox.com%'
			)
			)) Data
			INNER JOIN (SELECT
					ClientId,
					MAX(InvoiceId) AS InvoiceId
				FROM APSHTML.Invoice i
				GROUP BY ClientId) LatestInvoice
				ON LatestInvoice.ClientId = Data.ClientId
			INNER JOIN APSHTML.Invoice i
				ON i.InvoiceId = LatestInvoice.InvoiceId
			LEFT JOIN APSHTML.ClientSpecificConfig config
				ON config.ClientId = Data.ClientId
				AND config.ClientSpecificConfigType = 990
		WHERE i.ScannedDate >= DATE_SUB(UTC_TIMESTAMP(), INTERVAL 45 DAY)
		AND IFNULL(config.Argument1, '') <> 'NONE'
		AND IFNULL(pClientId, Data.ClientId) = Data.ClientId
		ORDER BY 1;

	END ThisProc ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_EmailGetMessages` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_EmailGetMessages`()
ThisProc:
	BEGIN	
-- noformat


-- 		select count(*)
-- 		-- delete Data
-- 			from EmailAttachments Data
-- 				inner join Email on Email.Id = Data.EmailId  
-- 			where Email.SentDate < date_Sub(now(), interval 3 month)
-- 					or (SentDate is null and CreatedDate < date_Sub(now(), interval 3 month))
-- 					or Email.SentDate > date_add(now(), interval 1 day);
-- 
-- 		select count(*)
-- 		-- delete Data
-- 			from EmailRecipients Data
-- 				inner join Email on Email.Id = Data.EmailId  
-- 			where Email.SentDate < date_Sub(now(), interval 3 month)
-- 					or (SentDate is null and CreatedDate < date_Sub(now(), interval 3 month))
-- 					or Email.SentDate > date_add(now(), interval 1 day);
-- 
-- 		select count(*)
-- 		-- Delete 
-- 			from Email 
-- 			where SentDate < date_Sub(now(), interval 3 month)
-- 					or (SentDate is null and CreatedDate < date_Sub(now(), interval 3 month))
-- 					or Email.SentDate > date_add(now(), interval 1 day);

		delete Data
			from EmailAttachments Data
				inner join Email on Email.Id = Data.EmailId  
			where Email.SentDate < date_Sub(now(), interval 3 month);

		delete Data
			from EmailRecipients Data
				inner join Email on Email.Id = Data.EmailId  
			where Email.SentDate < date_Sub(now(), interval 3 month);

		delete Data
			from _x_Email Data
				inner join Email on Email.Id = Data.Id  
			where Email.SentDate < date_Sub(now(), interval 3 month);

		Delete from Email 
			where SentDate < date_Sub(now(), interval 3 month);

		set @Now = now();

		select 	c.CustomerName, 
				case when c.IsActive = 1 then
						ifnull((select		GROUP_CONCAT(distinct concat(ifnull(nullif(er.RecipientName, ''), ifnull(CONCAT(rtrim(u.FirstName), ' ', rtrim(u.LastName)), '')), ' <', ifnull(er.EmailAddress, u.Email), '>') SEPARATOR ';')
							from 	EmailRecipients er
									left join User u 	on u.UserId = er.UserId
							where 	er.EmailId	 = e.Id
									and (nullif(er.EmailAddress, '') is not null or nullif(u.Email, '') is not null)
									and er.RecipientType = 1), '**No receipients**') 
						else '**Do not send, client inactive**' end as EmailTo,
				(select		GROUP_CONCAT(distinct concat(ifnull(nullif(er.RecipientName, ''), ifnull(CONCAT(rtrim(u.FirstName), ' ', rtrim(u.LastName)), '')), ' <', ifnull(er.EmailAddress, u.Email), '>') SEPARATOR ';')
					from 	EmailRecipients er
							left join User u 	on u.UserId = er.UserId
					where 	er.EmailId	 = e.Id
							and (nullif(er.EmailAddress, '') is not null or nullif(u.Email, '') is not null)
							and er.RecipientType = 2) as EmailCC,
				(select		GROUP_CONCAT(distinct concat(ifnull(nullif(er.RecipientName, ''), ifnull(CONCAT(rtrim(u.FirstName), ' ', rtrim(u.LastName)), '')), ' <', ifnull(er.EmailAddress, u.Email), '>') SEPARATOR ';')
					from 	EmailRecipients er
							left join User u 	on u.UserId = er.UserId
					where 	er.EmailId	 = e.Id
							and (nullif(er.EmailAddress, '') is not null or nullif(u.Email, '') is not null)
							and er.RecipientType = 3) as EmailBCC,
				e.Subject, 
				e.Body, 
				(select count(*) from EmailAttachments ea where ea.EmailId = e.Id) as TotalAttachments,
				e.Id
		from 	Email e
				inner join 	Client c 		on c.ClientId = e.ClientId				
				left join 	_x_Email xe 		on xe.Id = e.Id
		where 	e.SentDate is NULL
				and (
					ifnull(xe.RetryDate, ifnull(e.SendAfter, @now)) <= @Now	
					and ifnull(xe.RetryCount, 0) <= 3
					)
		order	by c.CustomerName;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_EmailSetMessageResult` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_EmailSetMessageResult`(pEmailId char(36), pResult varchar(250))
ThisProc:
	BEGIN	
-- noformat

	if pResult is null THEN	
		Update	Email set SentDate = Now()		where Id = pEmailId;
		delete	from _x_Email 					where Id = pEmailId;
		Leave ThisProc;
	end if;

	set @RetryDate = date_add(now(), interval 15 MINUTE);

	if not exists (select 1 from _x_Email where Id = pEmailId) then
		insert into _x_Email (Id, RetryDate, RetryCount, ErrorMessage)
			values (pEmailId, @RetryDate, 1, pResult);
		Leave ThisProc;
	end if;

	

	if (select RetryCount from _x_Email where Id = pEmailId) > 3 THEN
		set @Body = concat('EmailId: ', pEmailId);
		set @Body = concat(char(13), char(10), 'Result: ', pResult);
		Call _x_Notify(null, 'Email issue', @Body, 'Emailer', null, null, null);
		Update Email 		set SentDate = now() 											where Id = pEmailId;
	else
		Update _x_Email 	Set RetryDate = @RetryDate, RetryCount = RetryCount + 1 		where Id = pEmailId;
	end if;


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_PaymentCompleted` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_PaymentCompleted`(IN pInvoiceId int,
IN pProviderInfo1 varchar(500),
IN pProviderInfo2 varchar(500),
IN pProviderInfo3 varchar(500),
IN pProviderInfo4 varchar(500),
IN pProviderInfo5 varchar(500))
BEGIN
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_PaymentError` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_PaymentError`(IN pInvoiceId int,
OUT pMessage varchar(500))
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
		@p1 = MESSAGE_TEXT;
		SET pMessage = @p1;
	END;

	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Steven was here';

	select 'Still here';

	if pInvoiceId = 10 then
		update AA set bb = 1;
	end if;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_PaymentGetClients` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_PaymentGetClients`()
BEGIN
  /*Procedure Used in the console app for payment processing.*/
  SELECT
    Client.ClientId,
    Client.CustomerName,
    ClientCompany.CompanyCode,
    Invoice.InvoiceId,
    PaymentStatus.Id,
    PaymentStatus.receivedDate,
    ClientCompany.Id AS CompanyId,
    'REPAY' AS Provider, -- ClientCompany.UserField9
    ClientCompany.UserField1 AS ProviderField1,
    NULL AS ProviderField2,
    NULL AS ProviderField3,
    NULL AS ProviderField4,
    NULL AS ProviderField5,
    NULL AS ClientEmail
  FROM PaymentStatus
    JOIN Invoice
      ON Invoice.InvoiceId = PaymentStatus.InvoiceId
    JOIN Client
      ON Client.ClientId = Invoice.ClientId
    JOIN ClientCompany
      ON Invoice.CompanyCode = ClientCompany.CompanyCode
  WHERE Invoice.IsDeleted = 0
  AND Invoice.IsPaused = 0
  AND Invoice.ApprovalStatusId = 12
  AND ClientCompany.ClientId = Invoice.ClientId
  AND ClientCompany.UserField1 IS NOT NULL -- AND ClientCompany.UserField9 IS NO NULL 	
  GROUP BY CompanyId;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_xc_PaymentInvoicesForClientCompany` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_xc_PaymentInvoicesForClientCompany`(IN `pClientId` int,
IN pCompanyCode varchar(50))
BEGIN
  /*Procedure Used in the console app for payment processing.*/
  SELECT
    Invoice.InvoiceId,
    Invoice.ClientId,
    Invoice.VendorId,
    Invoice.InvoiceNo,
    Invoice.InvoiceDate,
    Invoice.UserField1,
    ClientCompany.CompanyCode,
    ClientCompany.Id AS CompanyId,
    Vendor.VendorNo,
    Vendor.VendorName,
    Vendor.ExternalId AS VendorExternalId,
    PaymentStatus.GrossAmount AS InvoiceTotal,
    PaymentStatus.ReceivedDate,
    PaymentStatus.TransactionIdentifier,
    PaymentStatus.Id AS PaymentStatusId
  FROM PaymentStatus
    JOIN Invoice
      ON PaymentStatus.InvoiceId = Invoice.InvoiceId
    JOIN Vendor
      ON Vendor.VendorId = Invoice.VendorId
    JOIN ClientCompany
      ON Invoice.CompanyCode = ClientCompany.CompanyCode
  WHERE Invoice.IsDeleted = 0
  AND Invoice.IsPaused = 0
  AND Invoice.ApprovalStatusId = 12
  AND ClientCompany.UserField1 IS NOT NULL -- AND ClientCompany.UserField9 IS NO NULL 
  AND ClientCompany.ClientId = pClientId
  AND Invoice.ClientId = pClientId
  AND Invoice.CompanyCode = pCompanyCode;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AdminByStatus` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AdminByStatus`(
-- noformat
	IN 	pClientId 	int,
	IN 	pStatus 	tinyint,
	IN 	pDetails 	tinyint,
	IN 	pOffset 	int,
	IN 	pSize 		int
)
ThisProc:BEGIN
	


	call _x_SetClientTimeZone(pClientId);

	drop TEMPORARY TABLE IF EXISTS MyData;

	set @VendorNoAfterName = 1;
	set @GridName = '';

  	IF (pStatus = 0) THEN  /* Paused */
		set @GridName = 'GridPaused';
		CREATE TEMPORARY TABLE IF NOT EXISTS MyData AS (
			SELECT
					Invoice.InvoiceId,
					case when @VendorNoAfterName = 1 THEN
							concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
						else concat('[', IFNULL(VendorNo, ''), '] ', IFNULL(VendorName, '')) end 							as Vendor,
					IFNULL(Invoice.InvoiceNo, '') 																			AS InvoiceNo,
					Invoice.InvoiceTotal,
					Invoice.ApprovalStatusId,
					Case	when InvoiceType = 'Invoice' then
								case when Invoice.IsPOInvoice = true then concat('PO:', ifnull(Invoice.PONUmber, '')) else 'Non PO' END
							else InvoiceType end 																			as InvoiceType,
					PausedInvoice.`Comment` 																				AS `Description`,
					IFNULL(Invoice.LastActionBy, '') 																		AS LastActionBy,
					IFNULL(DATE_FORMAT(Invoice.InvoiceDate, "%b %e, %Y"), '') 												AS InvoiceDate,
					IFNULL(DATE_FORMAT(convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 		AS ScannedDate,
					IFNULL(DATE_FORMAT(convert_tz(Invoice.LastActionDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 	AS LastActionDate
			
			FROM Invoice
					LEFT JOIN Vendor				ON Invoice.VendorId = Vendor.VendorId
					LEFT JOIN PausedInvoice			ON Invoice.InvoiceId = PausedInvoice.InvoiceId
			WHERE Invoice.ClientId = pClientId
					AND Invoice.IsPaused 			= TRUE
					and Invoice.ApprovalStatusId	<> 1
					AND Invoice.IsDeleted 			= FALSE
					and Invoice.InvoiceType 		<> 'Archive'
			);


  ELSEIF (pStatus = 1) THEN /* Captured */
		set @GridName = 'GridCaptured';
		if pDetails = 1 THEN
			call _x_InvoiceMyQueueOther (pClientId, 1, null, 0, pOffset, pSize, @pCount, @pTotal);
		else
			set @pCount = 0;
			set @pTotal = 0.00; 
			call _x_InvoiceMyQueueOther (pClientId, 1, null, 2, 0, 999999, @pCount, @pTotal);
			insert into Results(Grid, Cnt, Total) Values (@GridName, @pCount, @pTotal);
		end if;
		Leave ThisProc;

  ELSEIF (pStatus = 2) THEN /* NonPoApproval */
		set @GridName = 'GridNonPO';

		CREATE TEMPORARY TABLE IF NOT EXISTS MyData AS (
			SELECT
					Invoice.InvoiceId,
					case when @VendorNoAfterName = 1 THEN
							concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
						else concat('[', IFNULL(VendorNo, ''), '] ', IFNULL(VendorName, '')) end 							as Vendor,
					IFNULL(Invoice.InvoiceNo, '') 																			AS InvoiceNo,
					Invoice.InvoiceTotal,
					Invoice.ApprovalStatusId,
					Case	when InvoiceType = 'Invoice' then
								case when Invoice.IsPOInvoice = true then concat('PO:', ifnull(Invoice.PONUmber, '')) else 'Non PO' END
							else InvoiceType end 																			as InvoiceType,
					Invoice.`Comment` 																						AS `Description`,
					IFNULL(Invoice.LastActionBy, '') 																		AS LastActionBy,
					IFNULL(DATE_FORMAT(Invoice.InvoiceDate, "%b %e, %Y"), '') 												AS InvoiceDate,
					IFNULL(DATE_FORMAT(convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 		AS ScannedDate,
					IFNULL(DATE_FORMAT(convert_tz(Invoice.LastActionDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 	AS LastActionDate

			
			FROM Invoice
					LEFT JOIN Vendor					ON Invoice.VendorId = Vendor.VendorId
			WHERE Invoice.ClientId = pClientId
					AND Invoice.IsDeleted 				= FALSE
					AND Invoice.IsPaused 				= FALSE
					AND Invoice.ApprovalStatusId 		= 3
					AND Invoice.IsPOInvoice 			= FALSE
					and Invoice.InvoiceType 			<> 'Archive'
		);



  ELSEIF (pStatus = 3) THEN /* PoApproval */
		set @GridName = 'GridPO';

		CREATE TEMPORARY TABLE IF NOT EXISTS MyData AS (
			SELECT
					Invoice.InvoiceId,
					case when @VendorNoAfterName = 1 THEN
							concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
						else concat('[', IFNULL(VendorNo, ''), '] ', IFNULL(VendorName, '')) end 							as Vendor,
					IFNULL(Invoice.InvoiceNo, '') 																			AS InvoiceNo,
					Invoice.InvoiceTotal,
					Invoice.ApprovalStatusId,
					Case	when InvoiceType = 'Invoice' then
								case when Invoice.IsPOInvoice = true then concat('PO:', ifnull(Invoice.PONUmber, '')) else 'Non PO' END
							else InvoiceType end 																			as InvoiceType,
					Invoice.`Comment` 																						AS `Description`,
					IFNULL(Invoice.LastActionBy, '') 																		AS LastActionBy,
					IFNULL(DATE_FORMAT(Invoice.InvoiceDate, "%b %e, %Y"), '') 												AS InvoiceDate,
					IFNULL(DATE_FORMAT(convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 		AS ScannedDate,
					IFNULL(DATE_FORMAT(convert_tz(Invoice.LastActionDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 	AS LastActionDate
			
			FROM Invoice
				LEFT JOIN Vendor						ON Invoice.VendorId = Vendor.VendorId
			WHERE Invoice.ClientId = pClientId
					AND Invoice.IsDeleted				= FALSE
					AND Invoice.IsPaused 				= FALSE
					AND Invoice.ApprovalStatusId 		= 3
					AND Invoice.IsPOInvoice 			= TRUE
					and Invoice.InvoiceType 			<> 'Archive'
					AND not EXISTS (SELECT 1
								FROM UserInvoiceAssignment
								WHERE UserInvoiceAssignment.InvoiceId = Invoice.InvoiceId
										and UserInvoiceAssignment.HoldEndDate is not null
								limit 1
								)
		);

  ELSEIF (pStatus = 4) THEN /* Exception */
		set @GridName = 'GridException';

		if pDetails = 1 THEN
			call _x_InvoiceMyQueueOther (pClientId, 6, null, 0, pOffset, pSize, @pCount, @pTotal);
		else
			set @pCount = 0;
			set @pTotal = 0.00; 
			call _x_InvoiceMyQueueOther (pClientId, 6, null, 2, 0, 999999, @pCount, @pTotal);
			insert into Results(Grid, Cnt, Total) Values (@GridName, @pCount, @pTotal);
		end if;
		Leave ThisProc;


  ELSEIF (pStatus = 5) THEN /* PO-30 */
		set @GridName = 'GridPO30';

		CREATE TEMPORARY TABLE IF NOT EXISTS MyData AS (
			SELECT
					Invoice.InvoiceId,
					case when @VendorNoAfterName = 1 THEN
							concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
						else concat('[', IFNULL(VendorNo, ''), '] ', IFNULL(VendorName, '')) end 							as Vendor,
					IFNULL(Invoice.InvoiceNo, '') 																			AS InvoiceNo,
					Invoice.InvoiceTotal,
					Invoice.ApprovalStatusId,
					Case	when InvoiceType = 'Invoice' then
								case when Invoice.IsPOInvoice = true then concat('PO:', ifnull(Invoice.PONUmber, '')) else 'Non PO' END
							else InvoiceType end 																			as InvoiceType,
					Invoice.`Comment` 																						AS `Description`,
					IFNULL(Invoice.LastActionBy, '') 																		AS LastActionBy,
					IFNULL(DATE_FORMAT(Invoice.InvoiceDate, "%b %e, %Y"), '') 												AS InvoiceDate,
					IFNULL(DATE_FORMAT(convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 		AS ScannedDate,
					IFNULL(DATE_FORMAT(convert_tz(Invoice.LastActionDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 	AS LastActionDate
			
			FROM Invoice
					LEFT JOIN Vendor				ON Invoice.VendorId = Vendor.VendorId
			WHERE Invoice.ClientId = pClientId
					AND Invoice.IsDeleted 			= FALSE
					AND Invoice.IsPaused 			= FALSE
					AND Invoice.ApprovalStatusId 	= 3
					AND Invoice.IsPOInvoice 		= TRUE
					and Invoice.InvoiceType 		<> 'Archive'
					AND EXISTS (SELECT 1
								FROM UserInvoiceAssignment
								WHERE UserInvoiceAssignment.InvoiceId = Invoice.InvoiceId
										and UserInvoiceAssignment.HoldEndDate is not null
										and UserInvoiceAssignment.HoldEndDate > date(now())
										AND DIFFDays(date(Invoice.ScannedDate), date(now())) > 30
								limit 1
								)
		);



  ELSEIF (pStatus = 6) THEN /* PO-15 */
		set @GridName = 'GridPO15';
		
		CREATE TEMPORARY TABLE IF NOT EXISTS MyData AS (
			SELECT
					Invoice.InvoiceId,
					case when @VendorNoAfterName = 1 THEN
							concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
						else concat('[', IFNULL(VendorNo, ''), '] ', IFNULL(VendorName, '')) end 							as Vendor,
					IFNULL(Invoice.InvoiceNo, '') 																			AS InvoiceNo,
					Invoice.InvoiceTotal,
					Invoice.ApprovalStatusId,
					Case	when InvoiceType = 'Invoice' then
								case when Invoice.IsPOInvoice = true then concat('PO:', ifnull(Invoice.PONUmber, '')) else 'Non PO' END
							else InvoiceType end 																			as InvoiceType,
					Invoice.`Comment` 																						AS `Description`,
					IFNULL(Invoice.LastActionBy, '') AS LastActionBy,
					IFNULL(DATE_FORMAT(Invoice.InvoiceDate, "%b %e, %Y"), '') 												AS InvoiceDate,
					IFNULL(DATE_FORMAT(convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 		AS ScannedDate,
					IFNULL(DATE_FORMAT(convert_tz(Invoice.LastActionDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 	AS LastActionDate
	
			FROM Invoice
					LEFT JOIN Vendor				ON Invoice.VendorId = Vendor.VendorId
			WHERE Invoice.ClientId 					= pClientId
					AND Invoice.IsDeleted 			= FALSE
					AND Invoice.IsPaused 			= FALSE
					AND Invoice.ApprovalStatusId 	= 3
					AND Invoice.IsPOInvoice 		= TRUE
					and Invoice.InvoiceType 		<> 'Archive'
					AND EXISTS (SELECT 1
								FROM UserInvoiceAssignment
								WHERE UserInvoiceAssignment.InvoiceId = Invoice.InvoiceId
										and UserInvoiceAssignment.HoldEndDate is not null
										and UserInvoiceAssignment.HoldEndDate > date(now())
										AND DIFFDays(date(Invoice.ScannedDate), date(now())) between 16 and 30
								limit 1
								)
			);



  ELSEIF (pStatus = 7) THEN /* PO-7 */
		set @GridName = 'GridPO7';

		CREATE TEMPORARY TABLE IF NOT EXISTS MyData AS (
			SELECT
					Invoice.InvoiceId,
					case when @VendorNoAfterName = 1 THEN
							concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
						else concat('[', IFNULL(VendorNo, ''), '] ', IFNULL(VendorName, '')) end 							as Vendor,
					IFNULL(Invoice.InvoiceNo, '') 																			AS InvoiceNo,
					Invoice.InvoiceTotal,
					Invoice.ApprovalStatusId,
					Case	when InvoiceType = 'Invoice' then
								case when Invoice.IsPOInvoice = true then concat('PO:', ifnull(Invoice.PONUmber, '')) else 'Non PO' END
							else InvoiceType end 																			as InvoiceType,
					Invoice.`Comment` 																						AS `Description`,
					IFNULL(Invoice.LastActionBy, '') 																		AS LastActionBy,
					IFNULL(DATE_FORMAT(Invoice.InvoiceDate, "%b %e, %Y"), '') 												AS InvoiceDate,
					IFNULL(DATE_FORMAT(convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 		AS ScannedDate,
					IFNULL(DATE_FORMAT(convert_tz(Invoice.LastActionDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 	AS LastActionDate
			FROM Invoice
					LEFT JOIN Vendor				ON Invoice.VendorId = Vendor.VendorId
			WHERE Invoice.ClientId = pClientId
					AND Invoice.IsDeleted 			= FALSE
					AND Invoice.IsPaused 			= FALSE
					AND Invoice.ApprovalStatusId 	= 3
					AND Invoice.IsPOInvoice 		= TRUE
	 				and Invoice.InvoiceType 		<> 'Archive'
					AND EXISTS (SELECT 1
								FROM UserInvoiceAssignment
								WHERE UserInvoiceAssignment.InvoiceId = Invoice.InvoiceId
										and UserInvoiceAssignment.HoldEndDate is not null
										and UserInvoiceAssignment.HoldEndDate > date(now())
										AND DIFFDays(date(Invoice.ScannedDate), date(now())) between 8 and 15
								limit 1
								)
			);


  ELSEIF (pStatus = 8) THEN /* PO-0 */
		set @GridName = 'GridPO0';

		CREATE TEMPORARY TABLE IF NOT EXISTS MyData AS (
			SELECT
					Invoice.InvoiceId,
					case when @VendorNoAfterName = 1 THEN
							concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
						else concat('[', IFNULL(VendorNo, ''), '] ', IFNULL(VendorName, '')) end 							as Vendor,
					IFNULL(Invoice.InvoiceNo, '') 																			AS InvoiceNo,
					Invoice.InvoiceTotal,
					Invoice.ApprovalStatusId,
					Case	when InvoiceType = 'Invoice' then
								case when Invoice.IsPOInvoice = true then concat('PO:', ifnull(Invoice.PONUmber, '')) else 'Non PO' END
							else InvoiceType end 																			as InvoiceType,
					Invoice.`Comment` 																						AS `Description`,
					IFNULL(Invoice.LastActionBy, '') 																		AS LastActionBy,
					IFNULL(DATE_FORMAT(Invoice.InvoiceDate, "%b %e, %Y"), '') 												AS InvoiceDate,
					IFNULL(DATE_FORMAT(convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 		AS ScannedDate,
					IFNULL(DATE_FORMAT(convert_tz(Invoice.LastActionDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 	AS LastActionDate
			
			FROM Invoice
					LEFT JOIN Vendor			ON Invoice.VendorId = Vendor.VendorId
			WHERE Invoice.ClientId = pClientId
				AND Invoice.IsDeleted 			= FALSE
				AND Invoice.IsPaused 			= FALSE
				AND Invoice.ApprovalStatusId 	= 3
				AND Invoice.IsPOInvoice 		= TRUE
				and Invoice.InvoiceType 		<> 'Archive'
				AND EXISTS (SELECT 1
							FROM UserInvoiceAssignment
							WHERE UserInvoiceAssignment.InvoiceId = Invoice.InvoiceId
									and UserInvoiceAssignment.HoldEndDate is not null
									and UserInvoiceAssignment.HoldEndDate > date(now())
									AND DIFFDays(date(Invoice.ScannedDate), date(now())) between 1 and 7
							limit 1
							)
		);

  ELSEIF (pStatus = 9) THEN /* Approved */
		set @GridName = 'GridApproved';

		CREATE TEMPORARY TABLE IF NOT EXISTS MyData AS (
			SELECT
					Invoice.InvoiceId,
					case when @VendorNoAfterName = 1 THEN
							concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
						else concat('[', IFNULL(VendorNo, ''), '] ', IFNULL(VendorName, '')) end 							as Vendor,
					IFNULL(Invoice.InvoiceNo, '') 																			AS InvoiceNo,
					Invoice.InvoiceTotal,
					Invoice.ApprovalStatusId,
					Case	when InvoiceType = 'Invoice' then
								case when Invoice.IsPOInvoice = true then concat('PO:', ifnull(Invoice.PONUmber, '')) else 'Non PO' END
							else InvoiceType end 																			as InvoiceType,
					Invoice.`Comment` 																						AS `Description`,
					IFNULL(Invoice.LastActionBy, '') 																		AS LastActionBy,
					IFNULL(DATE_FORMAT(Invoice.InvoiceDate, "%b %e, %Y"), '') 												AS InvoiceDate,
					IFNULL(DATE_FORMAT(convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 		AS ScannedDate,
					IFNULL(DATE_FORMAT(convert_tz(Invoice.LastActionDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 	AS LastActionDate
			
			FROM Invoice
					LEFT JOIN Vendor				ON Invoice.VendorId = Vendor.VendorId
			WHERE Invoice.ClientId 					= pClientId
					AND Invoice.IsDeleted 			= FALSE
					AND Invoice.IsPaused 			= FALSE
					AND Invoice.ApprovalStatusId 	= 4
					and Invoice.InvoiceType 		<> 'Archive'
		);

	end if;


	if pDetails = 1 THEN

		select	* 
		from 	MyData
		order	by ApprovalStatusId, Vendor, InvoiceNo
		LIMIT	pOffset, pSize;

	else
		insert into Results(Grid, Cnt, Total)
			select	@GridName 								as Grid,
					count(*) 								as Cnt,
					ifnull(sum(ifnull(InvoiceTotal, 0)),0) 	as Total
			from 	MyData;

	end if;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AdminStatusCount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AdminStatusCount`(IN pClientId int)
BEGIN
	declare LoopCnt int default 0;


	drop TEMPORARY TABLE IF EXISTS Results;

	CREATE TEMPORARY TABLE IF NOT EXISTS Results (
		Grid 		varchar(20),
		Cnt 		int,
		Total 		decimal(18,2)
		);

	while LoopCnt <= 9 do
		call _x_AdminByStatus(pClientId, LoopCnt, 0, 0, 0);
		set LoopCnt = LoopCnt + 1;
		end while;

	select * from Results;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AdvancedSearchFields` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AdvancedSearchFields`(IN pUserID char(38), IN pSearchType varchar(20))
ThisProc:
	BEGIN

		SELECT
			ClientID INTO @ClientId
		FROM User
		WHERE UserId = pUserId;

		--
		-- Smart search is when the usage of search fields influence the presentation
		--	The more they use the field, the higher up in the list (screen) they appear
		--
		SET @UseSmartSearch = 0;
		SELECT
			UseSmartSearch INTO @UseSmartSearch
		FROM _x_UserParameters xup
		WHERE UserId = pUserId;



		SELECT
			sf.Field,
			sf.Label,
			sf.DataType,
			sf.DependencyField
		FROM SystemAdvanceSearchFields sf
			LEFT JOIN SystemAdvanceSearchFieldsUserStats sfus
				ON sfus.SearchType = sf.SearchType
				AND sfus.Field = sf.Field
				AND sfus.UserId = pUserId
			LEFT JOIN SystemAdvanceSearchFieldsClient Client
				ON Client.SearchType = sf.SearchType
				AND Client.Field = sf.Field
				AND Client.ClientId = @ClientId
			LEFT JOIN SystemAdvanceSearchFieldsHiddenUser User
				ON User.SearchType = sf.SearchType
				AND User.Field = sf.Field
				AND User.UserId = pUserId
		WHERE sf.SearchType = pSearchType
		AND (
		IFNULL(Client.ClientHidden, 0) = 0
		AND User.UserId IS NULL
		)
		ORDER BY CASE WHEN @UseSmartSearch = 1 THEN FLOOR(IFNULL(sfus.TotalUsed, 0) / 5) ELSE 1 END DESC,
		IFNULL(Client.ClientFieldOrder, sf.FieldOrder),
		sf.Label;



	/*	
		OUTPUT
		Field:				The internal value that is passed to the search engine
		Label:				Label that is display to the client
		DataType:			Text,Check,Date,Radio,Currency,Select,MultiSelect
		DependencyField:	This Field that this is on is dependend on the field(s) listed for filtering the result set


		When the search button is pressed from the interface, every field with data will have structrued like this:
		Field char(254) ValueEntered

		for example, for the data entered in the GlobalSearch screen:
		Invoice number:	INV002
		Vendor: John smith
		Invoice Date from: 1/1/2024
		
		the data passed to the Globalsearch 
		InvoiceNo■INV002■Vendor■John smith■InvoiceDate1■2024-01-01
		
		It is also passed to the _x_AdvancedSearchFieldValues in the pDependency parameter for Select and MultiSelect to help filer the results


	*/


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AdvancedSearchFieldValues` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AdvancedSearchFieldValues`(IN pUserId varchar(36), IN pSearchType varchar(20), IN pSearchField varchar(20), IN pDependency mediumtext, IN pSearchString varchar(100))
ThisProc:
	BEGIN

-- noformat
		DECLARE DataLimit	int DEFAULT 20;

		set @VendorNoAfterName = 1;
		SELECT	ClientID INTO @ClientId
		FROM User
		WHERE UserId = pUserId;

		CALL _x_StringToRegEx(pSearchString);

		IF pSearchField = 'InvoiceType' THEN
			select 	InvoiceTypeName 											as Label, 
					InvoiceTypeName 											as Value,
					Case when InvoiceTypeName = 'Invoice' then 1 else 0 end 	as DefValue
			from 	ClientInvoiceType 
			where	ClientId = @ClientId
					AND Regexp_Like(InvoiceTypeName, pSearchString, 'mi')
			order	by 1;
			LEAVE ThisProc;
		ELSEIF pSearchField = 'POorNonPO' THEN
						SELECT	'PO' AS Label,		'1' AS VALUE,		0 AS DefValue
			UNION ALL	SELECT 	'Non PO',			'0',				0;
			LEAVE ThisProc;
		ELSEIF pSearchField = 'DocumentType' THEN
						SELECT	'Invoice' AS Label,		'Invoice' AS VALUE,		0 AS DefValue
			UNION ALL	SELECT 'Statement',				'Statement',			0;
			LEAVE ThisProc;
		ELSEIF pSearchField = 'GLCode' THEN
			SET @DependencyValue = _x_AdvancedSearchFieldValuesDependency(pDependency, 'CompanyCode');
			SELECT
					case when @VendorNoAfterName = 1 THEN
							concat(IFNULL(Desccription, ""), " [", IFNULL(GLCodeName, ""), "]")
						else
							concat("[", IFNULL(GLCodeName, ""), "] ", IFNULL(Desccription, "")) end 	as Label,
					GLCodeId 																			AS Value,
					0 																					AS DefValue
		   	FROM 	GLCode
		      		LEFT JOIN ClientCompany	cc			        ON cc.Id = GLCode.ClientCompanyId
		    WHERE 	GLCode.ClientId = @ClientId
					AND ifnull(cc.CompanyCode, -1) = IFNULL(@DependencyValue, ifnull(cc.CompanyCode, -1))
					AND Regexp_Like(CONCAT(IFNULL(GLCode.Desccription, ''), '■', IFNULL(GLCode.GLCodeName, '')), pSearchString, 'mi')
					AND GLCode.isActive = 1
					AND cc.IsActive = 1			
			LIMIT 0, DataLimit;
			LEAVE ThisProc;
		ELSEIF pSearchField = 'InvoiceStatus' THEN
			SELECT	StateName  	AS Label,
					StateID  	AS VALUE,
					0 			AS DefValue
			FROM 	InvoiceStatus
			WHERE 	StateId IN (1,2,3,4,5,6,8)
			ORDER BY 1;
			LEAVE ThisProc;
		ELSEIF pSearchField = 'CompanyCode' THEN
			SELECT
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Description, ""), " [", IFNULL(CompanyCode, ""), "]")
					else
						concat("[", IFNULL(CompanyCode, ""), "] ", IFNULL(Description, "")) end as Label,
				CompanyCode AS Value,
				0 AS DefValue
			FROM ClientCompany cc
			WHERE ClientId = @ClientId
					AND isActive = 1
					AND Regexp_Like(CONCAT(IFNULL(cc.Description, ''), '■', IFNULL(cc.CompanyCode, '')), pSearchString, 'mi')
			LIMIT 0, DataLimit;
		ELSEIF pSearchField = 'Vendor' THEN
			SET @DependencyValue = _x_AdvancedSearchFieldValuesDependency(pDependency, 'CompanyCode');
			SELECT
				CONCAT(

							case when @VendorNoAfterName = 1 THEN
									concat(IFNULL(d.VendorName, ""), " [", IFNULL(d.VendorNo, ""), "]")
								else
									concat("[", IFNULL(d.VendorNo, ""), "] ", IFNULL(d.VendorName, "")) end
							,
							ifnull(CASE WHEN @DependencyValue IS NULL 
									THEN CONCAT(' (', cc.CompanyCode, ')') 
									ELSE '' END, '')
					) AS Label,
				d.VendorId 		AS Value,
				0 				AS DefValue
			FROM Vendor d
				left JOIN ClientCompany cc		ON cc.Id = d.ClientCompanyId
			WHERE d.ClientId = @ClientId
					AND ifnull(cc.CompanyCode, -1) = IFNULL(@DependencyValue, ifnull(cc.CompanyCode, -1))
					AND Regexp_Like(CONCAT(IFNULL(d.VendorName, ''), '■', IFNULL(d.VendorNo, '')), pSearchString, 'mi')
					AND d.isActive = 1
					AND cc.IsActive = 1
			ORDER BY cc.CompanyCode, 1
			LIMIT 0, DataLimit;
		ELSEIF pSearchField = 'Department' THEN
			SET @DependencyValue = _x_AdvancedSearchFieldValuesDependency(pDependency, 'CompanyCode');
			SELECT
				CONCAT(
						case when @VendorNoAfterName = 1 THEN
								concat(IFNULL(d.Description, ""), " [", IFNULL(d.DepartmentName, ""), "]")
							else
								concat("[", IFNULL(d.DepartmentName, ""), "] ", IFNULL(d.Description, "")) end

						, CASE WHEN @DependencyValue IS NULL THEN CONCAT(' (', cc.CompanyCode, ')') ELSE '' END
					) AS Label,
				d.Id AS Value,
				0 AS DefValue
			FROM Department d	
				INNER JOIN ClientCompany cc		ON cc.Id = d.ClientCompanyId
			WHERE d.ClientId = @ClientId
				AND cc.CompanyCode = IFNULL(@DependencyValue, cc.CompanyCode)
				AND d.isActive = 1
				AND cc.IsActive = 1
				AND Regexp_Like(CONCAT(IFNULL(d.Description, ''), '■', IFNULL(d.DepartmentName, '')), pSearchString, 'mi')
			ORDER BY cc.CompanyCode, 1
			LIMIT 0, DataLimit;
		END IF;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AlertActivate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AlertActivate`(IN pAlertKey varchar(20), IN pConfirm varchar(100))
ThisProc:
	BEGIN

-- noformat

	IF IFNULL(pConfirm, 'oops') <> 'Confirm' THEN
		SELECT 'You must ''confirm'' this process';
		LEAVE ThisProc;
	END IF;
		
-- 	if NOT EXISTS (SELECT 1 FROM Alert WHERE Alertkey = pAlertKey AND isActive = 0) THEN
-- 		SELECT 'This alert is already active';
-- 		LEAVE ThisProc;
-- 	END IF;


	INSERT INTO AlertClient (AlertKey, ClientId, LastRunDateTime)
		SELECT 	Alert.AlertKey, Ids.ClientId, null
		FROM 	Alert
				CROSS JOIN (SELECT DISTINCT ClientId FROM ClientRoles) Ids
				LEFT JOIN AlertClient ac 	ON ac.AlertKey = Alert.AlertKey AND ac.ClientId = Ids.ClientId
		WHERE 	ac.AlertKey IS NULL
				AND Alert.AlertKey = pAlertKey
		ORDER BY 1,2;


	INSERT INTO AlertClientInstance (AlertKey, ClientId)
		select 	ac.AlertKey, ac.ClientId
		from	AlertClient ac
		where 	ac.AlertKey = pAlertKey
				and not exists (select 1 from AlertClientInstance chk where chk.AlertKey = ac.AlertKey);

	INSERT INTO AlertClientInstanceFields (AlertId, Field)
		SELECT	aci.AlertId, af.Field
		FROM 	AlertClientInstance aci
				inner JOIN AlertFields af ON af.AlertKey = aci.AlertKey
		WHERE 	aci.AlertKey = pAlertKey
				and not exists (select 1 from AlertClientInstanceFields chk where chk.AlertId = aci.AlertId and chk.Field = af.Field);
		
			
	UPDATE Alert a set a.isActive = 1 WHERE a.AlertKey = pAlertKey;



-- call _x_AlertActivate('DiscountDate', 'CONFIRM');
-- call _x_AlertActivate('DueDate', 'CONFIRM');
-- call _x_AlertActivate('InvoiceFlag', 'CONFIRM');



-- select * from AlertClient;
-- select * from AlertClientInstance aci;
-- select * from AlertClientInstanceFields acif;


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AlertClientHit` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AlertClientHit`(IN pAlertId int, IN pDataValue varchar(100))
ThisProc:
	BEGIN	
-- noformat

	set pDataValue = ifnull(pDataValue, '');

	INSERT INTO AlertClientInstanceHit (AlertId, DataValue)
		VALUES (pAlertId, pDataValue);

	Update 	AlertClient 
			inner join AlertClientInstance	 	on AlertClientInstance.AlertKey	= AlertClient.AlertKey
													and AlertClientInstance.ClientId	= AlertClient.ClientId
	set 	LastRunDateTime = now() 
	Where 	AlertClientInstance.AlertId = pAlertId;


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AlertClientInstanceAdd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AlertClientInstanceAdd`(IN pAlertKey varchar(20), IN pClientId int)
ThisProc:
	BEGIN

-- noformat


	INSERT INTO AlertClientInstance (AlertKey, ClientId) Values (pAlertKey, pClientId);
	SET @InsertedId = LAST_INSERT_ID();

	INSERT INTO AlertClientInstanceFields (AlertId, Field)
		SELECT	 @InsertedId, Field
		FROM 	AlertFields 
		where	AlertKey = pAlertKey;
	
	UPDATE AlertClient set isActive = 0 WHERE AlertKey = pAlertKey and ClientId = pClientId;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AlertClientInstanceDelete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AlertClientInstanceDelete`(IN pAlertId int)
ThisProc:
	BEGIN

-- noformat

	if (	select	count(*)
			from 	AlertClientInstance toDelete
					inner join AlertClientInstance AllInstances 	on AllInstances.AlertKey = toDelete.AlertKey
																		and AllInstances.ClientId = toDelete.ClientId
			where 	toDelete.AlertId = pAlertId) = 1 THEN	-- The Last one, initialize it because all there MUST be 1 instance per alert per client
		Update 	AlertClientInstanceFields set Value = ''
				where AlertId = pAlertId;

		UPDATE AlertClient
				inner join AlertClientInstance 			on AlertClientInstance.AlertKey = AlertClient.AlertKey 
															and AlertClientInstance.ClientId = AlertClient.ClientId
				set isActive = 0 
			WHERE AlertClientInstance.AlertId = pAlertId;
		Leave ThisProc;
	end if;

	delete from AlertClientInstanceHit		where AlertId = pAlertId;
	delete from AlertClientInstanceFields	where AlertId = pAlertId;
	delete from AlertClientInstance 		where AlertId = pAlertId;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AlertClientInstanceUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AlertClientInstanceUpdate`(IN pAlertId int, IN pField varchar(20), IN pValue mediumtext)
ThisProc:
	BEGIN

-- noformat
	UPDATE AlertClientInstanceFields	set Value = pValue
		WHERE	AlertId 		= pAlertId
				AND Field 		= pField;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AlertClientStatus` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AlertClientStatus`(IN pAlertKey varchar(20), IN pClientId int, IN pActive int)
ThisProc:
	BEGIN

-- noformat
	UPDATE AlertClient	set isActive = IFNULL(pActive, 0)
		WHERE 	AlertKey 		= pAlertKey
				AND ClientId 	= pClientId;


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AlertFieldValues` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AlertFieldValues`(IN pUserId varchar(36), IN pClientId int, IN pAlertKey varchar(20), IN pField varchar(20), IN pDependency mediumtext, IN pCurrentValues mediumtext, IN pSearchString varchar(100))
ThisProc:
	BEGIN

-- noformat

		DECLARE DataLimit	int DEFAULT 20;

		SELECT	IFNULL(IsCloudxUser, 0) 
		INTO	@isCloudxUser
		FROM	User
		WHERE	UserId = pUserId;

		Call _x_StringToRows(pCurrentValues, ',');

		set pCurrentValues = NULLIF(pCurrentValues, '');
		CALL _x_StringToRegEx(pSearchString);

		IF pField = 'WarningDays' THEN
						SELECT	'3 days' AS Label,	'3' AS VALUE,	CASE WHEN pCurrentValues = 3 			THEN 1 ELSE 0 END 	AS DefValue
			UNION ALL	SELECT 	'2 days',			'2',			CASE WHEN IFNULL(pCurrentValues, 2) = 2 THEN 1 ELSE 0 end
			UNION ALL	SELECT 	'1 day',			'1',			CASE WHEN pCurrentValues = 1 			THEN 1 ELSE 0 end
			UNION ALL	SELECT 	'Limit',			'0',			CASE WHEN pCurrentValues = 0 			THEN 1 ELSE 0 end;
			LEAVE ThisProc;
		ElseIF pField = 'Days' THEN
						SELECT	'4 days' AS Label,	'4' AS VALUE,	CASE WHEN pCurrentValues = 4 			THEN 1 ELSE 0 END 	AS DefValue
			UNION ALL	SELECT 	'3 days',			'3',			CASE WHEN IFNULL(pCurrentValues, 3) = 3 THEN 1 ELSE 0 end
			UNION ALL	SELECT 	'2 days',			'2',			CASE WHEN pCurrentValues = 2 			THEN 1 ELSE 0 END;
			LEAVE ThisProc;
		ELSEIF pField = 'ClientRole' THEN
			SELECT
				cr.RoleName															AS Label,
				cr.RoleId 															AS VALUE,
				CASE WHEN ids.SearchValue IS NULL THEN 0 ELSE 1 end 				AS DefValue
			FROM ClientRoles cr
					LEFT JOIN tSearchList ids 	ON ids.SearchValue = cr.RoleId
			WHERE ClientId = pClientId
					AND isInternal IN (@isCloudxUser, 0)
					AND Regexp_Like(cr.RoleName, pSearchString, 'mi')
					AND (
							pCurrentValues IS NULL
							OR ids.SearchValue IS not null
						)
			ORDER BY 1
			LIMIT 0, DataLimit;

		ELSEIF pField = 'Employee' THEN
			SELECT
				Concat(u.LastName, ', ', u.FirstName)								AS Label,
				convert(u.UserId, char(36))											AS VALUE,
				CASE WHEN ids.SearchValue IS NULL THEN 0 ELSE 1 end 				AS DefValue
			FROM User u
					LEFT JOIN tSearchList ids 	ON ids.SearchValue = u.UserId
			WHERE ClientId = pClientId
					AND u.IsCloudxUser IN (@isCloudxUser, 0)
					AND Regexp_Like(Concat(u.LastName, ', ', u.FirstName), pSearchString, 'mi')
					and u.IsActive = 1
					AND (
							pCurrentValues IS NULL
							OR ids.SearchValue IS not null
						)
			ORDER BY 1
			LIMIT 0, DataLimit;
		elseIF pField = 'InvoiceType' THEN
						SELECT	'PO' AS Label,				'1' AS VALUE,			CASE WHEN pCurrentValues = 1 			THEN 1 ELSE 0 END 	AS DefValue
			UNION ALL	SELECT 	'Non PO',					'0',					CASE WHEN pCurrentValues = 0 			THEN 1 ELSE 0 END;
			LEAVE ThisProc;
		ELSEIF pField = 'DocumentType' THEN
						SELECT	'Invoice' AS Label,			'Invoice' AS VALUE,		CASE WHEN pCurrentValues = 1 			THEN 1 ELSE 0 END 	AS DefValue
			UNION ALL	SELECT 'Statement',					'Statement',			CASE WHEN pCurrentValues = 0 			THEN 1 ELSE 0 END;
			LEAVE ThisProc;
		ELSEIF pField = 'InvoiceStatus' THEN
			SELECT	StateName  														AS Label,
					StateID  														AS VALUE,
					CASE WHEN ids.SearchValue IS NULL THEN 0 ELSE 1 end 			AS DefValue
			FROM 	InvoiceStatus
					LEFT JOIN tSearchList ids 	ON ids.SearchValue = StateID
			WHERE 	StateId IN (1,2,3,4,5,6,8,99)
					AND (
							pCurrentValues IS NULL
							OR ids.SearchValue IS not null
						)
			ORDER BY 1;
			LEAVE ThisProc;
		ELSEIF pField = 'CompanyCode' THEN
			SELECT
				CASE	
					WHEN CompanyCode IS NULL AND	Description IS NULL 			THEN 'N/A' 
					WHEN NULLIF(Description, '') IS NULL 							THEN LTRIM(CompanyCode) 
					WHEN NULLIF(CompanyCode, '') IS NULL 							THEN LTRIM(Description) 
					ELSE CONCAT(LTRIM(Description), ' [', LTRIM(CompanyCode), ']') 	END AS Label,
				CompanyCode 															AS Value,
				CASE WHEN ids.SearchValue IS NULL THEN 0 ELSE 1 end 					AS DefValue
			FROM ClientCompany cc
					LEFT JOIN tSearchList ids 	ON ids.SearchValue = CompanyCode
			WHERE ClientId = pClientId
					AND isActive = 1
					AND Regexp_Like(CONCAT(IFNULL(cc.Description, ''), '■', IFNULL(cc.CompanyCode, '')), pSearchString, 'mi')
					AND (
							pCurrentValues IS NULL
							OR ids.SearchValue IS not null
						)
			ORDER BY 1
			LIMIT 0, DataLimit;
		ELSEIF pField = 'Vendor' THEN
			SET @DependencyValue = _x_AdvancedSearchFieldValuesDependency(pDependency, 'CompanyCode');
			SELECT
				CONCAT(
						CASE 
							WHEN d.VendorNo IS NULL AND d.VendorName IS NULL 				THEN 'N/A' 
							WHEN NULLIF(d.VendorNo, '') IS NULL 							THEN LTRIM(d.VendorName) 
							WHEN NULLIF(d.VendorName, '') IS NULL 							THEN LTRIM(d.VendorNo) 
							ELSE CONCAT('[', LTRIM(d.VendorNo), '] ', LTRIM(d.VendorName)) 	END
							,CASE WHEN @DependencyValue IS NULL THEN CONCAT(' (', cc.CompanyCode, ')') ELSE '' END
					) 																			AS Label,
				rtrim(VendorId)																	AS Value,
				CASE WHEN ids.SearchValue IS NULL THEN 0 ELSE 1 end 							AS DefValue
			FROM Vendor d
				INNER JOIN ClientCompany cc		ON cc.Id = d.ClientCompanyId
				LEFT JOIN tSearchList ids 	ON ids.SearchValue = d.VendorId
			WHERE d.ClientId = pClientId
					AND cc.CompanyCode = IFNULL(@DependencyValue, cc.CompanyCode)
					AND Regexp_Like(CONCAT(IFNULL(d.VendorName, ''), '■', IFNULL(d.VendorNo, '')), pSearchString, 'mi')
					AND (
							pCurrentValues IS NULL
							OR ids.SearchValue IS not null
						)
			ORDER BY cc.CompanyCode, 1
			LIMIT 0, DataLimit;
		ELSEIF pField = 'Department' THEN
			SET @DependencyValue = _x_AdvancedSearchFieldValuesDependency(pDependency, 'CompanyCode');
			SELECT
				CONCAT(
						CASE
							WHEN d.Description IS NULL AND d.DepartmentName IS NULL 				THEN 'N/A' 
							WHEN NULLIF(d.Description, '') IS NULL 									THEN LTRIM(d.DepartmentName) 
							WHEN NULLIF(d.DepartmentName, '') IS NULL 								THEN LTRIM(d.Description) 
							ELSE CONCAT(LTRIM(d.Description), ' [', LTRIM(d.DepartmentName), ']') 	END
						, CASE WHEN @DependencyValue IS NULL THEN CONCAT(' (', cc.CompanyCode, ')') ELSE '' END
					) 																			AS Label,
				rtrim(d.Id)																		AS Value,
				CASE WHEN ids.SearchValue IS NULL THEN 0 ELSE 1 end								AS DefValue
			FROM Department d	
				INNER JOIN ClientCompany cc		ON cc.Id = d.ClientCompanyId
				LEFT JOIN tSearchList ids 		ON ids.SearchValue = d.Id
			WHERE d.ClientId = pClientId
					AND cc.CompanyCode = IFNULL(@DependencyValue, cc.CompanyCode)
					AND d.isActive = 1
					AND cc.IsActive = 1
					AND Regexp_Like(CONCAT(IFNULL(d.Description, ''), '■', IFNULL(d.DepartmentName, '')), pSearchString, 'mi')
					AND (
							pCurrentValues IS NULL
							OR ids.SearchValue IS not null
						)
			ORDER BY cc.CompanyCode, 1
			LIMIT 0, DataLimit;
		END IF;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AlertProcess` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AlertProcess`()
ThisProc:
	BEGIN


-- noformat
	DECLARE eof int DEFAULT 0;
	DECLARE dataAlertKey	varchar(20);
	DECLARE dataStoredProc	varchar(1000);
	DECLARE dataAlertName	varchar(1000);

	DECLARE curAlerts CURSOR FOR 
			SELECT	AlertKey, StoredProc, AlertName
			FROM 	Alert
			WHERE 	isActive = 1
					AND (
						1=2
						OR (
								Frequency = 0 -- Morning
								and not exists 	(select		1 
													from	AlertClient Run
													where	Run.AlertKey = Alert.AlertKey
                                                    		AND date(Run.LastRunDateTime) = date(now())
													limit 1
													)
							)
						);
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET eof = 1;
	-- DECLARE CONTINUE HANDLER FOR SQLEXCEPTION;

	OPEN curAlerts;
NoMoreData:
	LOOP
		FETCH curAlerts INTO dataAlertKey, dataStoredProc, dataAlertName;
		IF eof = 1 THEN
			LEAVE NoMoreData;
		END IF;

		IF EXISTS (SELECT 1 FROM information_schema.ROUTINES r WHERE r.ROUTINE_NAME = dataStoredProc AND r.ROUTINE_SCHEMA = DATABASE()) THEN 
			set @AlertKey 	= dataAlertKey;
			SET @pResult 	= NULL;
			set @Statement 	= CONCAT_WS(' ', 'Call', dataStoredProc, '(@pResult)');
		
			PREPARE stmt FROM @Statement;
			EXECUTE stmt;
		
			IF @pResult is NOT NULL THEN
				set @CrLf = CONCAT(char(13),char(10));
				set @Subject = 'Alert Failed!';
				set @Body = CONCAT_WS(' ', 'The Alert [', dataAlertName, '] Failed.');
				set @Body = CONCAT(@Body, @CrLf);
				set @Body = CONCAT(@Body, @CrLf);
				set @Body = CONCAT_WS(' ',  @Body, 'Error: [', @pResult, '].');
				CALL _x_Notify(null, @Subject, @Body, 'Error', NULL, NULL, 1);
			END IF;
		ELSE
			set @CrLf = CONCAT(char(13),char(10));
			set @Subject = 'Alert Failed!';
			set @Body = CONCAT_WS(' ', 'The Alert [', dataAlertName, '] Failed.');
			set @Body = CONCAT(@Body, @CrLf);
			set @Body = CONCAT(@Body, @CrLf);
			set @Body = CONCAT_WS(' ',  @Body, 'Error: [', 'Stored procedure does not exists.', '].');
			CALL _x_Notify(null, @Subject, @Body, 'Error', NULL, NULL, 1);
		end IF;
	

	END LOOP;
	CLOSE curAlerts;	


	-- Housekeeping
	-- Clear all data older that 2 months
	delete from AlertClientHit where RunDateTime <= DATE_SUB(now(), interval 60 day);

	
	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AlertProcess_NetTerms` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AlertProcess_NetTerms`(INOUT pResult varchar(5000))
ThisProc:
	BEGIN	
-- noformat

	declare CONST_ALERTKEY 	varchar(20) default 'DiscountDate';
	DECLARE eof 			int DEFAULT 0;
	DECLARE dataClientId	int;
	DECLARE dataAlertId		int;
	DECLARE dataField		varchar(20);
	DECLARE dataValue		varchar(1000);

	DECLARE varUsers 		text DEFAULT NULL;

	DECLARE curAlertData CURSOR FOR 
			SELECT 	ac.ClientId, aci.AlertId, acif.Field, acif.Value 
			FROM 	Alert a
					INNER JOIN AlertClient ac						ON 	ac.AlertKey = a.AlertKey
					INNER JOIN Client c 							ON 	c.ClientId = ac.ClientId
					INNER JOIN AlertClientInstance aci				ON 	aci.AlertKey = ac.AlertKey
																		AND aci.ClientId = ac.ClientId
					inner JOIN AlertClientInstanceFields acif 		ON 	acif.AlertId 	= aci.AlertId
			WHERE 	a.AlertKey = CONST_ALERTKEY
					and a.isActive = 1
					AND ac.isActive = 1
					AND c.IsActive = 1
					AND (
							1=2
							OR (a.Frequency = 0 AND NOT EXISTS (select		1 
																	from	AlertClientInstanceHit Hit 
																	where	Hit.AlertId 		= aci.AlertId
				                                                    		AND date(RunDateTime) = date(now())
																	limit 1)
								)
						)
			ORDER BY 1,2,3;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET eof = 1;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
		@Msg =  MESSAGE_TEXT;
		SET pResult = @Msg;
	END;

	select Count(*), 0 into @FieldCountMAX, @FieldCount from AlertFields where AlertKey = CONST_ALERTKEY;

	OPEN curAlertData;
ProcessData:
	LOOP
		FETCH curAlertData INTO dataClientId, dataAlertId, dataField, dataValue;
		if eof = 1 THEN
			Leave ProcessData;
		end if;

		IF dataField = 'WarningDays' THEN
			set @WarningDays = CONVERT(dataValue, UNSIGNED);
			set @WarningDays = ifnull(nullif(@WarningDays, ''), 2);
		elseIF dataField = 'ClientRole' THEN
			set @ClientRole = dataValue;
		else
			SET @ErrMsg = CONCAT('Undefined FIELD; [', dataField, '].');
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @ErrMsg, MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;
		set @FieldCount = @FieldCount + 1;


		IF @FieldCount = @FieldCountMAX then 
			CALL _x_SetClientTimeZone(dataClientId);

			set @TotalCount		= 0;
			set @TotalAmount 	= 0;
			set @TotalDiscount	= 0;

			SELECT	COUNT(*), SUM(InvoiceTotal), SUM(NetTermDiscount)
			INTO 	@TotalCount, @TotalAmount, @TotalDiscount
			FROM 	Invoice 
			WHERE 	IsDeleted = FALSE
					AND InvoiceType = 'Invoice'
					AND NULLIF(Invoice.UserField5, '') IS NULL -- No payment number
					AND ApprovalStatusId IN (1,2,3,4,5,6)
					AND NetTermDate >= date('2023-03-04')
					AND DATEDIFF(date(NetTermDate), NOW()) <= IFNULL(@WarningDays, 1)
					AND NetTermDiscount > 0
					AND ClientId = dataClientId;

			IF @TotalCount > 0 THEN
				SET SESSION group_concat_max_len = 5000000;
				Call _x_StringToRows(@ClientRole, ',');
				SELECT	GROUP_CONCAT(DISTINCT u.UserId SEPARATOR ';') 
				INTO 	varUsers
				FROM	User u
						INNER JOIN ClientRoles cr			ON cr.ClientId = u.ClientId
						INNER JOIN ClientUserRoles cur 		ON cur.RoleId = cr.RoleId
																AND cur.UserId = u.UserId
						INNER JOIN tSearchList Ids			ON Ids.SearchValue = cur.RoleId
				WHERE 	u.IsActive = 1 
						AND u.ClientId = dataClientId;


				set @Subject = 'NET TERMS Approching';
				set @Body = CONCAT_WS(' ', 'There are', @TotalCount, 'invoices totaling', CONCAT('$',FORMAT(@TotalAmount,2,'en_US')), 'for a total savings of',CONCAT('$',FORMAT(@TotalDiscount,2,'en_US')));
				set @Body = CONCAT_WS(' ', @Body, 'that will be past due within the next', @WarningDays, 'day(s).');	

				IF NULLIF(varUsers, '') is not null THEN 
					CALL _x_Notify(varUsers, @Subject, @Body, 'Alert', NULL, NULL, 1);
				END IF;
				
				CALL _x_AlertClientHit(dataAlertId, null);
			END IF;

			set @FieldCount 	= 0;
			set @ClientRole		= NULL;
			set @WarningDays	= NULL;
		end IF;

	END LOOP;
	CLOSE curAlertData;	


-- set @A = NULl;
-- call _x_AlertProcess_NetTerms(@A);
-- select @A;
-- 
-- 
-- select * from AlertClient;
-- select * from AlertClientInstance aci where AlertId = 2;
-- select * from AlertClientInstanceFields acif where AlertId = 2;
-- select * from AlertClientInstanceHit acih where AlertId = 2;
-- 
-- -- select * from ClientRoles where ClientId = 88; -- 23
-- -- update AlertClientInstanceFields set Value = '23' where AlertId = 2 and Field = 'ClientRole';
-- -- update AlertClient ac set isActive = 1 where AlertKey = 'DiscountDate' and ClientId = 88;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AlertRead` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AlertRead`(IN pUserId char(36), in pClientId int, IN pAlertKey varchar(20))
ThisProc:
	BEGIN

-- noformat

		SELECT	IFNULL(IsCloudxUser, 0)
		INTO	@isCloudxUser
		FROM	User
		WHERE	UserId = pUserId;


		IF pAlertKey IS NULL THEN
			SELECT
					AlertGrouping,
					CONCAT(AlertName, CASE WHEN isInternal = 1 THEN ' (Internal)' ELSE '' END) 				AS Name,
					ac.isActive,
					Alert.AlertKey	
			FROM 	Alert 
					inner JOIN AlertClient ac ON ac.AlertKey = Alert.AlertKey
			WHERE 	Alert.isActive = 1
					AND ac.ClientId = pClientId
					AND Alert.isInternal IN (@isCloudxUser, 0)
			ORDER 	BY SortOrderGrouping, AlertGrouping, SortOrderName, Alert.AlertName;
			LEAVE ThisProc;
		END IF;


		SELECT
				aci.AlertId,
				af.Field,
				af.Label,
				af.DataType,
				af.DependencyField,
				acf.Value
		FROM	AlertClientInstance aci
				inner JOIN AlertClientInstanceFields acf 	ON 	acf.AlertId = aci.AlertId 
				inner join AlertFields af 					on 	af.AlertKey = aci.AlertKey	
																AND af.Field = acf.Field 
		WHERE	aci.AlertKey		= pAlertKey
				and aci.ClientId	= pClientId

		ORDER 	BY aci.AlertId, af.FieldOrder, af.Label;
		


-- select * from User where ClientID = 88;

-- call _x_AlertRead('01b8668d-37d2-4e87-aef9-af4c3f18694e', null);
-- call _x_AlertRead('01b8668d-37d2-4e87-aef9-af4c3f18694e', 'DiscountDate')
-- call _x_AlertRead('01b8668d-37d2-4e87-aef9-af4c3f18694e', 'DueDate')

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_Auditor` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_Auditor`(IN `pType` tinyint,
IN `pClientId` int,
IN `pKeyword` varchar(50),
IN `pDateFrom` datetime,
IN `pDateTo` datetime,
IN `pAmountMin` decimal(18, 2),
IN `pAmountMax` decimal(18, 2),
IN `pOffset` int,
IN `pSize` int)
BEGIN

  IF (pType = 0) THEN

    SELECT
      Invoice.InvoiceId,
      Invoice.InvoiceNo,
      CONCAT(Vendor.VendorNo, ', ', Vendor.VendorName) AS VendorName,
      CONCAT('$', FORMAT(Invoice.InvoiceTotal, 2)) AS InvoiceTotal,
      Invoice.InvoiceDate,
      Invoice.ScannedDate,
      Invoice.InvoiceType,
      Invoice.CompanyCode,
      Invoice.LastActionDate

    FROM Invoice
      LEFT JOIN Vendor
        ON Invoice.VendorId = Vendor.VendorId
    WHERE Invoice.ClientId = pClientId
    AND Invoice.IsDeleted = FALSE
    AND Invoice.InvoiceType = 'Invoice'
    AND (Invoice.ApprovalStatusId = 5
    OR Invoice.ApprovalStatusId = 3)
    AND (pKeyword IS NULL
    OR Invoice.InvoiceNo LIKE CONCAT('', pKeyword, '%')
    OR Invoice.PONumber LIKE CONCAT('', pKeyword, '%')
    OR Vendor.VendorName LIKE CONCAT('', pKeyword, '%'))
    AND (pDateFrom IS NULL
    OR Invoice.InvoiceDate >= pDateFrom)
    AND (pDateTo IS NULL
    OR Invoice.InvoiceDate < DATE_ADD(pDateTo, INTERVAL 1 DAY))
    AND (pAmountMin IS NULL
    OR Invoice.InvoiceTotal >= pAmountMin)
    AND (pAmountMax IS NULL
    OR Invoice.InvoiceTotal <= pAmountMax)
    ORDER BY Invoice.InvoiceDate DESC LIMIT pOffset, pSize;

  ELSE

    SELECT
      Invoice.InvoiceId,
      Invoice.InvoiceNo,
      CONCAT(Vendor.VendorNo, ', ', Vendor.VendorName) AS VendorName,
      CONCAT('$', FORMAT(Invoice.InvoiceTotal, 2)) AS InvoiceTotal,
      Invoice.InvoiceDate,
      Invoice.ScannedDate,
      Invoice.InvoiceType,
      Invoice.CompanyCode,
      Invoice.LastActionDate

    FROM Invoice
      LEFT JOIN Vendor
        ON Invoice.VendorId = Vendor.VendorId
    WHERE Invoice.ClientId = pClientId
    AND Invoice.IsDeleted = FALSE
    AND Invoice.InvoiceType = 'Invoice'
    AND (Invoice.ApprovalStatusId = 5
    OR Invoice.ApprovalStatusId = 3)
    AND (pKeyword IS NULL
    OR Invoice.InvoiceNo LIKE CONCAT('', pKeyword, '%')
    OR Invoice.PONumber LIKE CONCAT('', pKeyword, '%')
    OR Vendor.VendorName LIKE CONCAT('', pKeyword, '%'))
    AND (pDateFrom IS NULL
    OR Invoice.ScannedDate >= pDateFrom)
    AND (pDateTo IS NULL
    OR Invoice.ScannedDate < DATE_ADD(pDateTo, INTERVAL 1 DAY))
    AND (pAmountMin IS NULL
    OR Invoice.InvoiceTotal >= pAmountMin)
    AND (pAmountMax IS NULL
    OR Invoice.InvoiceTotal <= pAmountMax)
    ORDER BY Invoice.InvoiceDate DESC LIMIT pOffset, pSize;

  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AuditorDetail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AuditorDetail`(IN `pType` tinyint,
IN `pClientId` int,
IN `pUserId` char(36),
IN `pOffset` int,
IN `pSize` int)
BEGIN

  IF (pType = 0) THEN

    SELECT
      UserId,
      CONCAT(LastName, ', ', FirstName) AS FullName

    FROM `User`
    WHERE ClientId = pClientId
    AND RoleId = 7;

  ELSE

    SELECT
      Invoice.InvoiceId,
      AuditorAssigment.AssigmentDate,
      Invoice.InvoiceNo,
      CONCAT(Vendor.VendorNo, ', ', Vendor.VendorName) AS `Vendor`,
      CONCAT('$', FORMAT(Invoice.InvoiceTotal, 2)) AS InvoiceTotal,
      Invoice.`Comment`

    FROM AuditorAssigment
      INNER JOIN Invoice
        ON AuditorAssigment.InvoiceID = Invoice.InvoiceId
      INNER JOIN Vendor
        ON Invoice.VendorId = Vendor.VendorId
    WHERE AuditorAssigment.AuditorID = pUserId
    AND Invoice.IsDeleted = FALSE
    ORDER BY AuditorAssigment.AssigmentId DESC LIMIT pOffset, pSize;

  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_AuditorUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_AuditorUpdate`(IN `pType` tinyint,
IN `pAssignedBy` char(36),
IN `pUserId` char(36),
IN `pInvoiceId` int,
IN `pDate` datetime)
BEGIN

  SET FOREIGN_KEY_CHECKS = 0;

  DELETE
    FROM AuditorAssigment
  WHERE AuditorID = pUserId
    AND InvoiceID = pInvoiceId;

  IF (pType = 1) THEN

    INSERT INTO AuditorAssigment (AssignedBy, AssigmentDate, AuditorID, InvoiceID, IsAudited)
      VALUES (pAssignedBy, pDate, pUserId, pInvoiceId, 0);

  END IF;

  SET FOREIGN_KEY_CHECKS = 1;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_BatchById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_BatchById`(
	IN `pClientId` int,
	IN `pBatchId` int
)
BEGIN

  SELECT
    Invoice.InvoiceId,
    IFNULL(Invoice.InvoiceNo, '') AS InvoiceNo,
    COUNT(InvoiceDocs.InvoiceId) AS PageCount,
    IFNULL(CONCAT(Vendor.VendorNo, ', ', Vendor.VendorName), '') AS VendorName,
    IFNULL(CONCAT('$', FORMAT(Invoice.InvoiceTotal, 2)), '') AS InvoiceTotal,
    IFNULL(Invoice.InvoiceDate, '') AS InvoiceDate,
    Invoice.InvoiceType
  /*Invoice.CaptureBatchId*/

  FROM Invoice
    LEFT JOIN InvoiceDocs
      ON Invoice.InvoiceId = InvoiceDocs.InvoiceId
    LEFT JOIN Vendor
      ON Invoice.VendorId = Vendor.VendorId
  WHERE Invoice.ClientId = pClientId
  AND Invoice.IsDeleted = FALSE
  AND Invoice.BatchID = pBatchId;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_BatchList` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_BatchList`(
	IN `pType` tinyint,
	IN `pClientId` int,
	IN `pDateFrom` date,
	IN `pDateTo` date,
	IN `pBatchType` varchar(50),
	IN `pBatchSource` varchar(50),
	IN `pOffset` int,
	IN `pSize` int
)
BEGIN

  IF (pType = 0) THEN
    /* List : Batch */

    SELECT
      ID AS BatchId,
      BatchName,
      `Source`,
      BatchType,
      IFNULL(CreatedDate, '') AS CreatedDate

    FROM Batch
    WHERE ClientId = pClientId
    AND (pBatchType IS NULL
    OR BatchType = pBatchType)
    AND (pBatchSource IS NULL
    OR `Source` = pBatchSource)
    AND (pDateFrom IS NULL
    OR CreatedDate >= pDateFrom)
    AND (pDateTo IS NULL
    OR CreatedDate < DATE_ADD(pDateTo, INTERVAL 1 DAY))
    ORDER BY CreatedDate DESC LIMIT pOffset, pSize;

  ELSE
    /* List : Invoice */

    SELECT
      Invoice.InvoiceId,
      IFNULL(Invoice.InvoiceNo, '') AS InvoiceNo,
      (SELECT
          COUNT(InvoiceDocs.InvoiceId) AS PageCount
        FROM InvoiceDocs
        WHERE Invoice.InvoiceId = InvoiceDocs.InvoiceId) AS PageCount,
		IFNULL(CONCAT(Vendor.VendorNo, ', ', Vendor.VendorName), '') AS VendorName,
		IFNULL(CONCAT('$', FORMAT(Invoice.InvoiceTotal, 2)), '') AS InvoiceTotal,
		IFNULL(Invoice.InvoiceDate, '') AS InvoiceDate,
      Invoice.InvoiceType

    FROM Batch
      LEFT JOIN Invoice
        ON Batch.ID = Invoice.BatchID
      LEFT JOIN Vendor
        ON Invoice.VendorId = Vendor.VendorId
    WHERE Batch.ClientID = pClientId
    AND Invoice.IsDeleted = FALSE
    AND (pBatchType IS NULL
    OR Batch.BatchType = pBatchType)
    AND (pBatchSource IS NULL
    OR Batch.`Source` = pBatchSource)
    AND (pDateFrom IS NULL
    OR Batch.CreatedDate >= pDateFrom)
    AND (pDateTo IS NULL
    OR Batch.CreatedDate < DATE_ADD(pDateTo, INTERVAL 1 DAY))
    ORDER BY Invoice.InvoiceDate DESC LIMIT pOffset, pSize;

  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientRead` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientRead`(IN pUserId char(36), IN pClientId int)
ThisProc:
	BEGIN

		-- noformat

		SELECT	IFNULL(IsCloudxUser, 0), ClientId 
		INTO	@isCloudxUser, @ClientId
		FROM	User
		WHERE	UserId = pUserId;


		IF pClientId IS NULL THEN
			SELECT 
					Client.CustomerName			AS Name,
					a.CityName					AS City,
					s.StateName 				AS State,
					a.ContactPerson				AS Contact,
					a.Email, 
					a.PhoneNo,
					Client.isActive,
					Client.ClientId
			FROM Client
					LEFT JOIN Address a 	on a.AddressId 	= Client.AddressId
					LEFT JOIN State s		ON s.StateId 	= a.StateId
			ORDER BY isActive DESC, CustomerName;

			LEAVE ThisProc;
		END IF;


		SELECT 
				Client.CustomerName,
				a.Address1,
				a.Address2,
				a.Address3,
				a.Address4,
				a.StreetName,
				a.CityName,
				a.StateId,
				s.StateName,
				a.ZipCode,
				a.Country,
				a.ContactPerson,
				a.Email, 
				a.PhoneNo,
				Client.isActive, @isCloudxUser, @ClientId
		FROM Client
				LEFT JOIN Address a 	on a.AddressId = Client.AddressId
				LEFT JOIN State s		ON s.StateId = a.StateId
		WHERE (Client.ClientId = pClientId AND @isCloudxUser = 1)
				OR (Client.ClientId = @ClientId AND @isCloudxUser = 0);
	

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientRoleDelete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientRoleDelete`(IN pRoleId int,
IN pClientId int)
ThisProc:
	BEGIN

		IF EXISTS (SELECT
					1
				FROM ClientRoles
				WHERE ClientId = pClientId
				AND RoleId = pRoleId
				AND (isAdmin = 1
				OR isLocked = 1)) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This role cannot be deleted', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;


		DELETE
			FROM ClientUserRoles
		WHERE RoleId = pRoleId;
		DELETE
			FROM ClientRoleFunctions
		WHERE RoleId = pRoleId;
		DELETE
			FROM ClientRoles
		WHERE RoleId = pRoleId;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientRoleRead` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientRoleRead`(IN pUserId char(36), IN pRoleId int)
ThisProc:
	BEGIN

		-- noformat

		SELECT	IFNULL(IsCloudxUser, 0), ClientId 
		INTO	@isCloudxUser, @ClientId
		FROM	User
		WHERE	UserId = pUserId;


		IF pRoleId IS NULL THEN
			SELECT
					CONCAT(cr.RoleName, CASE WHEN isInternal = 1 THEN ' **CloudX Only**' ELSE '' END) 		AS RoleName,
					(	SELECT	COUNT(*)
						FROM 	ClientUserRoles cur
								INNER JOIN User u	ON u.UserId = cur.UserId
						WHERE	cur.RoleId = cr.RoleId AND u.IsActive = 1) 									AS TotalAssigned,
					CASE	WHEN cr.isAdmin = 1 OR cr.islocked = 1 THEN 0 
							ELSE 1 END 																		AS canDelete,
					cr.RoleId,
					cr.ClientId
			FROM	ClientRoles cr
			WHERE	cr.ClientId = @ClientId
					AND	(
							(cr.isInternal = 1 AND @isCloudxUser = 1)
							OR (cr.isInternal = 0)
							)
			ORDER BY isInternal, cr.RoleName;
			LEAVE ThisProc;
		END IF;

		SELECT	isInternal 
		INTO	@isInternal
		FROM	ClientRoles cr
		WHERE	cr.ClientId = @ClientId
				AND cr.RoleId = pRoleId;

		SELECT
				cr.RoleName,
				(	SELECT	COUNT(*)
					FROM ClientUserRoles cur
						INNER JOIN User u	ON u.UserId = cur.UserId
					WHERE	cur.RoleId = cr.RoleId
							AND u.IsActive = 1) 										AS TotalAssigned,
				CASE	WHEN cr.isAdmin = 1 OR cr.islocked = 1 THEN 0 
						ELSE 1 END 														AS canDelete,
				cr.RoleId
		FROM	ClientRoles cr
		WHERE	cr.ClientId = @ClientId
				AND	cr.RoleId = pRoleId;



		SELECT
				sf.FunctionGrouping,
				sf.FunctionName,
				CASE WHEN crf.isAdmin = 1 THEN 1 ELSE crf.Access END AS Access,
				sf.FunctionOptions,
				sf.FunctionKey
		FROM SystemFunctions sf
			LEFT JOIN (SELECT	y.FunctionKey,
								y.Access,
								x.isAdmin
						FROM	ClientRoles x
							LEFT JOIN ClientRoleFunctions y ON y.RoleId = x.RoleId
						WHERE x.RoleId = pRoleId) crf	ON IFNULL(crf.FunctionKey, sf.FunctionKey) = sf.FunctionKey
		WHERE (sf.isInternal = @isInternal)
		ORDER BY sf.SortOrderGrouping, sf.FunctionGrouping, sf.SortOrderName, sf.FunctionName;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientRoleUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientRoleUpdate`(INOUT pRoleId int,
IN pRoleName varchar(50),
IN pisInternal int,
IN pClientId int,
IN pFunctions varchar(60000))
ThisProc:
	BEGIN
		IF pRoleId IS NULL THEN
			IF EXISTS (SELECT
						1
					FROM ClientRoles
					WHERE ClientId = pClientId
					AND RoleName = pRoleName) THEN
				SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This role name is already being used', MYSQL_ERRNO = 1;
				LEAVE ThisProc;
			END IF;
		ELSE
			IF EXISTS (SELECT
						1
					FROM ClientRoles
					WHERE ClientId = pClientId
					AND RoleName = pRoleName
					AND RoleId <> pRoleId) THEN
				SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This role name is already being used', MYSQL_ERRNO = 1;
				LEAVE ThisProc;
			END IF;
		END IF;

		IF pRoleId IS NULL THEN
			INSERT INTO ClientRoles (RoleName, ClientId, isAdmin, isInternal, isLocked)
				VALUES (pRoleName, pClientId, 0, pisInternal, 0);
			SET @pRoleId = LAST_INSERT_ID();
			SET pRoleId = @pRoleId;
		ELSE
			UPDATE ClientRoles
			SET RoleName = pRoleName
			WHERE RoleId = pRoleId
			AND ClientId = pClientId;
		END IF;

		DELETE
			FROM ClientRoleFunctions
		WHERE RoleId = pRoleId;


		SET pFunctions = IFNULL(pFunctions, '');

		SET @Pos = 1;
		SET @Count = LENGTH(pFunctions) - LENGTH(REPLACE(pFunctions, ';', '')) + 1;

		WHILE @Pos <= @Count DO
			SET @Function = _x_SPLIT_STRING(pFunctions, ';', @Pos);
			IF @Function <> '' THEN
				SET @Function = _x_SPLIT_STRING(pFunctions, ';', @Pos);
				SET @Equal = POSITION('=' IN @Function);
				IF @Equal > 0 THEN
					SET @FunctionKey = LEFT(@Function, @Equal - 1);
					SET @Access = SUBSTRING(@Function, @Equal + 1, 99);
					IF @FunctionKey <> ''
						AND @Access <> ''
						AND @Access <> '-1' THEN
						SET @Access = CONVERT(@Access, SIGNED);
						INSERT INTO ClientRoleFunctions (RoleId, FunctionKey, Access)
							VALUES (pRoleId, @FunctionKey, @Access);
					END IF;
				END IF;
			END IF;
			SET @Pos = @Pos + 1;
		END WHILE;


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientRoleUserRead` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientRoleUserRead`(
-- noformat
	IN pClientId int, 
	IN pRoleId int, 
	IN pRequest varchar(20)
)
ThisProc:
  BEGIN
	SET SESSION group_concat_max_len = 1000000;

    IF pRequest = 'Assigned' THEN
		SELECT	CONCAT(u.LastName, ', ', u.FirstName) 					AS FullName,
				(SELECT	GROUP_CONCAT(cr.RoleName order by cr.RoleName SEPARATOR ', ')
				FROM	ClientUserRoles cur
						INNER JOIN ClientRoles cr	ON cr.RoleId = cur.RoleId
				WHERE 	cur.UserId = u.UserId
				ORDER 	BY 1) 											AS AssignedRoles,
				CAST(cur.UserId AS char(36)) 							AS UserId,
				cur.RoleId
		FROM	ClientUserRoles cur
				INNER JOIN User u	ON u.UserId = cur.UserId
		WHERE	cur.RoleId = pRoleId
				AND u.IsActive = 1
		ORDER 	BY 1;
		LEAVE ThisProc;
    END IF;


	set @isInternal = 0;
    SET @isAdmin = 0;
    SELECT	case when cr.isAdmin = 1 and cr.isInternal = 1 then 1 else 0 end, cr.isInternal
	INTO	@isSuperAdmin, @isInternal
    FROM 	ClientRoles cr
    WHERE	cr.RoleId = pRoleId;

    IF pRequest = 'Unassigned' THEN
		SELECT	CONCAT(u.LastName, ', ', u.FirstName) AS FullName,
				u.UserId,
				pRoleid AS RoleId, u.IsCloudxUser, @isInternal
		FROM 	User u
		WHERE	u.ClientId = pClientId
				AND u.IsActive = 1
				and (
						(@isSuperAdmin = 1						-- Only CloudxUsers can be assigned to Super Admin AND only Non CloudxUsers can be assigned to any other role
							and u.IsCloudxUser = 1)
						or (@isSuperAdmin = 0			
							and u.IsCloudxUser = @isInternal)
					)
				AND NOT EXISTS (SELECT	1
								FROM	ClientUserRoles cur
								WHERE	cur.RoleId = pRoleId
								AND	cur.UserId = u.Userid)
				ORDER BY 1;
		LEAVE ThisProc;
    END IF;


  END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ClientRoleUserUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ClientRoleUserUpdate`(IN pRoleId int,
IN pUserId char(36),
IN pAction char(10))
ThisProc:
  BEGIN

    IF pAction = 'Add'
      AND pUserId IS NOT NULL
      AND pRoleId IS NOT NULL THEN
      IF NOT EXISTS (SELECT
            1
          FROM ClientUserRoles cur
          WHERE RoleId = pRoleId
          AND UserId = pUserId) THEN
        INSERT INTO ClientUserRoles (RoleId, UserId)
          VALUES (pRoleId, pUserId);
      END IF;
      LEAVE ThisProc;
    END IF;

    IF pAction = 'Delete'
      AND pUserId IS NOT NULL
      AND pRoleId IS NOT NULL THEN
      DELETE
        FROM ClientUserRoles
      WHERE RoleId = pRoleId
        AND UserId = pUserId;
      LEAVE ThisProc;
    END IF;

  END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_Dashboard` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_Dashboard`(
-- noformat
	IN `pType` tinyint,
	IN `pClientId` int,
	IN `pOffset` int,
	IN `pSize` int)
BEGIN

	set @VendorNoAfterName = 1;

	call _x_SetClientTimeZone(pClientId);

	IF (pType = 0) THEN	
		-- By Approver
		SELECT
				`User`.UserId,
				ifnull(CONCAT(`User`.LastName, ', ', `User`.FirstName), '(unassigned)')							AS `FullName`,
 				case when length(User.LastName) + length(User.FirstName) + 2 > 16
 					then CONCAT(SUBSTRING(CONCAT(`User`.LastName, ', ', `User`.FirstName), 1, 14), '..') 
 					else ifnull(CONCAT(`User`.LastName, ', ', `User`.FirstName), '(unassigned)')	  end  		AS `Name`,
				FORMAT(SUM(Invoice.InvoiceTotal), 2) 															AS `InvoiceTotal`,
				SUM(Invoice.InvoiceTotal)			 															AS `Value`
		FROM 	Invoice
				INNER JOIN UserInvoiceAssignment					ON Invoice.InvoiceId = UserInvoiceAssignment.InvoiceId
				left JOIN `User`									ON UserInvoiceAssignment.UserId = `User`.UserId
		WHERE	Invoice.ClientId = pClientId
				AND Invoice.IsPaused = FALSE
				AND Invoice.IsDeleted = FALSE
				AND Invoice.ApprovalStatusId = 3
		GROUP	BY `User`.UserId
		ORDER	BY 2  
		LIMIT	pOffset, pSize;
	
	ELSEIF (pType = 1) THEN
		-- by Vendor
		SELECT
				Invoice.VendorId,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
					else
						concat('[', IFNULL(Vendor.VendorNo, ''), '] ', IFNULL(Vendor.VendorName, '')) end as Vendor,
				CONCAT(SUBSTRING(Vendor.VendorName, 1, 11), '..') AS `Name`,
				FORMAT(SUM(Invoice.InvoiceTotal), 2) AS `InvoiceTotal`,
				SUM(Invoice.InvoiceTotal) AS `Value`		
		FROM 	Invoice
				INNER JOIN Vendor					ON Invoice.VendorId = Vendor.VendorId
		WHERE 	Invoice.ClientId = pClientId
				AND Invoice.IsDeleted = FALSE
				AND Invoice.ApprovalStatusId = 3
		GROUP	BY Vendor
		ORDER	BY 5 DESC 
		LIMIT pOffset, pSize;		
	ELSEIF (pType = 2) THEN
		-- By Due date
		SELECT
				InvoiceId,
				PaymentDueDate,
				DATE_FORMAT(PaymentDueDate, "%b %e, %Y") AS `Name`,
				FORMAT(SUM(InvoiceTotal), 2) AS `InvoiceTotal`,
				SUM(InvoiceTotal) AS `Value`		
		FROM	Invoice
		WHERE	ClientId = pClientId
				AND IsDeleted = FALSE
				AND ApprovalStatusId = 3
				AND PaymentDueDate IS NOT NULL
		GROUP 	BY PaymentDueDate
		ORDER 	BY PaymentDueDate DESC LIMIT pOffset, pSize;
	ELSE
		-- by Net terms
		SELECT
				InvoiceId,
				NetTermDate,
				DATE_FORMAT(NetTermDate, "%b %e, %Y") AS `Name`,
				FORMAT(SUM(InvoiceTotal), 2) AS `InvoiceTotal`,
				SUM(InvoiceTotal) AS `Value`
		FROM 	Invoice
		WHERE	ClientId = pClientId
				and NetTermDate >= date(now())
				and NetTermDiscount > 0
				AND IsDeleted = FALSE
				AND ApprovalStatusId = 3
				AND NetTermDate IS NOT NULL
		GROUP	BY NetTermDate
		ORDER	BY NetTermDate DESC LIMIT pOffset, pSize;

  END IF;
-- select * from Invoice order by 1 desc limit 10
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DashboardDetail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DashboardDetail`(
-- noformat
	IN `pType` tinyint,
	IN `pClientId` int,
	IN `pId` char(36),
	IN `pDate` datetime,
	IN `pOffset` int,
	IN `pSize` int)
BEGIN


	set @VendorNoAfterName = 1;

	call _x_SetClientTimeZone(pClientId);

	IF (pType = 0) THEN
		-- by Approver
		SELECT
				Invoice.InvoiceId,
				Invoice.InvoiceNo,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
					else
						concat('[', IFNULL(Vendor.VendorNo, ''), '] ', IFNULL(Vendor.VendorName, '')) end as Vendor,
				format(Invoice.InvoiceTotal, 2) as InvoiceTotal,
				Invoice.InvoiceDate,
				convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone) AS ScannedDate,
				Invoice.IsPOInvoice,
				Invoice.PONumber,
				Invoice.IsPaused,
				DATEDIFF(CURRENT_DATE(), UserInvoiceAssignment.DateCreated) AS Days
		FROM	Invoice
				LEFT JOIN Vendor					ON Invoice.VendorId = Vendor.VendorId
				INNER JOIN UserInvoiceAssignment	ON Invoice.InvoiceId = UserInvoiceAssignment.InvoiceId
		WHERE Invoice.ClientId = pClientId
				AND Invoice.IsPaused = FALSE
				AND Invoice.IsDeleted = FALSE
				AND Invoice.ApprovalStatusId = 3
				AND UserInvoiceAssignment.UserId = pId
		ORDER	BY Days DESC 
		LIMIT pOffset, pSize;
	
	ELSEIF (pType = 1) THEN
		-- for a vendor
		SELECT
				Invoice.InvoiceId,
				Invoice.InvoiceNo,
				FORMAT(Invoice.InvoiceTotal, 2) AS InvoiceTotal,
				Invoice.InvoiceDate,
				Invoice.IsPOInvoice,
				Invoice.IsPaused,
				(select	GROUP_CONCAT(concat(User.LastName, ', ', User.FirstName) order by User.LastName separator ' | ')
				from	UserInvoiceAssignment Data
						inner join User 	on User.UserId = Data.UserId
				where 	Data.InvoiceId = Invoice.InvoiceId) 															as Assigned
		FROM	Invoice
		WHERE 	Invoice.ClientId = pClientId
				AND Invoice.IsDeleted = FALSE
				AND Invoice.ApprovalStatusId = 3
				AND Invoice.VendorId = pId
		order 	BY 3, InvoiceNo
		LIMIT	pOffset, pSize;
	
	ELSEIF (pType = 2) THEN
		-- Payment due date
		SELECT
				Invoice.InvoiceId,
				Invoice.InvoiceNo,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
					else
						concat('[', IFNULL(Vendor.VendorNo, ''), '] ', IFNULL(Vendor.VendorName, '')) end as Vendor,
				format(Invoice.InvoiceTotal, 2) as InvoiceTotal,
				Invoice.InvoiceDate,
				Invoice.IsPOInvoice,
				Invoice.IsPaused,
				(select	GROUP_CONCAT(concat(User.LastName, ', ', User.FirstName) order by User.LastName separator ' | ')
				from	UserInvoiceAssignment Data
						inner join User 	on User.UserId = Data.UserId
				where 	Data.InvoiceId = Invoice.InvoiceId) 															as Assigned
		FROM 	Invoice
				inner JOIN Vendor					ON Invoice.VendorId = Vendor.VendorId
		WHERE Invoice.ClientId = pClientId
				AND Invoice.IsDeleted = FALSE
				AND Invoice.ApprovalStatusId = 3
				AND Invoice.PaymentDueDate = pDate
		order 	BY 3, InvoiceNo
		LIMIT pOffset, pSize;
	ELSE
		-- Net Terms
		SELECT
				Invoice.InvoiceId,
				Invoice.InvoiceNo,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
					else
						concat('[', IFNULL(Vendor.VendorNo, ''), '] ', IFNULL(Vendor.VendorName, '')) end 				as Vendor,
				format(Invoice.InvoiceTotal, 2) as InvoiceTotal,
				Invoice.InvoiceDate,
				Invoice.IsPOInvoice,
				Invoice.IsPaused,
				(select	GROUP_CONCAT(concat(User.LastName, ', ', User.FirstName) order by User.LastName separator ' | ')
				from	UserInvoiceAssignment Data
						inner join User 	on User.UserId = Data.UserId
				where 	Data.InvoiceId = Invoice.InvoiceId) 															as Assigned

		FROM	Invoice
				INNER JOIN Vendor						ON Invoice.VendorId = Vendor.VendorId
		WHERE	Invoice.ClientId = pClientId
				AND Invoice.IsDeleted = FALSE
				AND Invoice.ApprovalStatusId = 3
				AND Invoice.NetTermDate = pDate
		order 	BY 3, InvoiceNo
		LIMIT pOffset, pSize;
		
	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DataLoadAll` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DataLoadAll`(IN pType tinyint, IN pClientId int, IN pOffset int, IN pSize int,
                                                      IN pSort varchar(255), IN pDesc tinyint(1),
                                                      IN pFilterValue varchar(255))
BEGIN

  SET @Order = 'ASC';
  IF (pDesc) THEN
    SET @Order = 'DESC';
  END IF;

  IF (pType = 0) THEN /* List: GLs */

    IF (pSort = '') THEN
      SET pSort = 'GLCode.GLCodeId';
    END IF;
    SET @query = CONCAT("SELECT 
				GLCode.GLCodeId as Id, GLCode.IsActive,
				GLCode.GLCodeName AS GLCode, GLCode.Desccription AS Description,
				CONCAT(ClientCompany.CompanyCode, ' - ', ClientCompany.`Description`) AS Company
			FROM GLCode
			LEFT JOIN ClientCompany ON GLCode.ClientCompanyId = ClientCompany.Id		
			WHERE GLCode.ClientId = ", pClientId, " AND 
			(GLCode.GLCodeName LIKE '%", pFilterValue, "%' OR GLCode.Desccription LIKE '%", pFilterValue, "%')
			ORDER BY GLCode.IsActive DESC, ", pSort, " ", @Order, "  	   
			LIMIT ", pOffset, ",", pSize, ";");
    PREPARE myquery FROM @query;
    EXECUTE myquery;

  ELSEIF (pType = 1) THEN /* List: Departments */

    IF (pSort = '') THEN
      SET pSort = 'Department.Id';
    END IF;
    SET @query = CONCAT("SELECT 
				Department.Id, Department.IsActive,
				Department.DepartmentName, Department.Description		
			FROM Department 
			WHERE Department.ClientId = ", pClientId, " AND 
			(Department.DepartmentName LIKE '%", pFilterValue, "%' OR Department.Description LIKE '%", pFilterValue, "%')
			 ORDER BY Department.IsActive DESC, ", pSort, " ", @Order, "  		   
			LIMIT ", pOffset, ",", pSize, ";");
    PREPARE myquery FROM @query;
    EXECUTE myquery;

  ELSEIF (pType = 2) THEN /*List: OrgData*/

    IF (pSort = '') THEN
      SET pSort = 'OrgData.Id';
    END IF;
    SET @query = CONCAT("SELECT 
				OrgData.Id, OrgData.IsActive, OrgData.OrgId, OrgData.OrgName, 
				IFNULL(OrgData.CountryCode, '') AS CountryCode,
				IFNULL(CONCAT(ClientCompany.CompanyCode, ' - ', ClientCompany.`Description`), '') AS Company
			FROM OrgData 
			LEFT JOIN ClientCompany ON OrgData.CompanyCode = ClientCompany.Id 
			WHERE OrgData.ClientId = ", pClientId, " AND
			(OrgName LIKE '%", pFilterValue, "%' OR OrgId LIKE '%", pFilterValue, "%')
			 ORDER BY OrgData.IsActive DESC, ", pSort, " ", @Order, " 	   
			LIMIT ", pOffset, ",", pSize, ";");
    PREPARE myquery FROM @query;
    EXECUTE myquery;

  ELSEIF (pType = 3) THEN /*List: Vendors*/

    IF (pSort = '') THEN
      SET pSort = 'v.VendorId';
    END IF;
    SET @query = CONCAT("SELECT
				v.VendorId as Id, v.IsActive, v.VendorNo, v.VendorName, v.VendorId,
				IFNULL(v.PaymentType,'') AS PaymentType ,  
				IFNULL(v.VendorTerm,'') AS VendorTerm, 
				IFNULL(CONCAT(cc.CompanyCode, ' - ', cc.`Description`),'') AS Company,
				IFNULL(CONCAT(fc.Code, ' - ', fc.Description),'') as FreightCode,
				IFNULL(CONCAT(st.Code , ' - ', st.Description),'') as ShippingTerm
			FROM Vendor v 
			LEFT JOIN ClientCompany cc ON v.ClientCompanyId  = cc.Id 
			LEFT JOIN FreightCodes fc On v.FreightCodeId = fc.FreightCodeId 
			LEFT JOIN ShippingTerms st ON v.ShippingTermId = st.ShippingTermId 
			/*LEFT JOIN VendorTerm vt ON v.VendorTerm */
			WHERE v.ClientId = ", pClientId, " AND
			(VendorNo LIKE '%", pFilterValue, "%' OR VendorName LIKE '%", pFilterValue, "%')
			ORDER BY v.IsActive DESC, ", pSort, " ", @Order, " 	   
			LIMIT ", pOffset, ",", pSize, ";");
    PREPARE myquery FROM @query;
    EXECUTE myquery;

  ELSEIF (pType = 4) THEN /*List: Client Company*/

    IF (pSort = '') THEN
      SET pSort = 'cc.Id';
    END IF;
    SET @query = CONCAT("SELECT 
				cc.Id, cc.IsActive, cc.CompanyCode, cc.Description, cc.DefaultDepartment as DefaultDepartmentId, cc.DefaultProject as DefaultProjectId, cc.DafaultGLCode as DafaultGLCodeId,
				IFNULL(CONCAT(d.DepartmentName , ' - ', d.`Description`),'') AS DefaultCostCenter,
				IFNULL(CONCAT(pt.ProjectName , ' - ', pt.`Description`),'') AS DefaultProject,
				IFNULL(CONCAT(gl.GLCodeName , ' - ', gl.Desccription),'') AS DafaultGLCode
			FROM ClientCompany cc 
			LEFT JOIN Department d ON cc.DefaultDepartment = d.Id
			LEFT JOIN ProjectType pt ON cc.DefaultProject = pt.Id 
			LEFT JOIN GLCode gl on cc.DafaultGLCode = gl.GLCodeId  		
			WHERE cc.ClientId = ", pClientId, " AND
			(cc.CompanyCode LIKE '%", pFilterValue, "%' OR cc.Description LIKE '%", pFilterValue, "%')
			ORDER BY cc.IsActive DESC, ", pSort, " ", @Order, " 	      
			LIMIT ", pOffset, ",", pSize, ";");
    PREPARE myquery FROM @query;
    EXECUTE myquery;

  ELSEIF (pType = 5) THEN /*LIST: Category*/

    IF (pSort = '') THEN
      SET pSort = 'c.Id';
    END IF;
    SET @query = CONCAT("SELECT c.Id, c.CategoryNo, c.CategoryName, IFNULL(c.CategoryType,'')AS CategoryType , 
								IFNULL(CONCAT(c2.CustomerName, ' - ', c2.CustomerNo),'') AS Customer
						FROM 	Category c 
								LEFT JOIN Customer c2 ON c.CustomerId = c2.CustomerId 
						WHERE	c.ClientId = ", pClientId, " AND
								(c.CategoryNo LIKE '%", pFilterValue, "%' OR c.CategoryName LIKE '%", pFilterValue, "%')
						ORDER	BY ", pSort, " ", @Order, " 		   
								LIMIT ", pOffset, ",", pSize, ";");
    PREPARE myquery FROM @query;
    EXECUTE myquery;

  ELSEIF (pType = 14) THEN /*List: PO Data*/

    IF (pSort = '') THEN
      SET pSort = 'p.Id';
    END IF;
    SET @query = CONCAT("SELECT 
            -- COUNT(*) OVER () AS total_count,
		    p.Id,
		    v.VendorName,
		    p.PONumber,
		    IFNULL(FORMAT(p.Amount,2 ),'') as Amount,
		    p.POType,
		    p.POStatus,
		    p.ItemNumber,
		    p.VendorCatNumber,
		    p.UnitOfPurchase,
		    FORMAT(p.OrderQty,2) as OrderQty,
		    FORMAT(p.UnitCost,2) as UnitCost,
		    p.ExtCost,
		    FORMAT(p.RcvdQty,2) as RcvdQty,
		    p.LineNo,
		    p.POHeaderId,
		    p.POLineId,
		    p.POLineLocationId,
		    p.RecievedTransactionId,
		    p.GLCode,
		    p.IsExpense,
		    cc.Description as CompanyCode,
		    p.Container
		   FROM PO p
		   LEFT JOIN Vendor v ON p.VendorId = v.VendorId
		   LEFT JOIN ClientCompany cc ON p.ClientCompanyId = cc.Id
		   WHERE p.ClientId = ", pClientId, " AND 
		   (p.PONumber LIKE '%", pFilterValue, "%' OR v.VendorName LIKE '%", pFilterValue, "%')
		   ORDER BY ", pSort, " ", @Order, " 
		   LIMIT ", pOffset, ",", pSize, ";");
    PREPARE myquery FROM @query;
    EXECUTE myquery;

  END IF;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DataLoadAllPaging` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DataLoadAllPaging`(IN `pType` tinyint,
IN `pClientId` int)
BEGIN

  IF (pType = 0) THEN /* List: GLs */

    SELECT
      COUNT(*) AS TotalRows
    FROM GLCode g
    WHERE g.ClientId = pClientId;

  ELSEIF (pType = 1) THEN /* List: Departments */

    SELECT
      COUNT(*) AS TotalRows
    FROM Department d
    WHERE d.ClientId = pClientId;

  ELSEIF (pType = 2) THEN /*List: OrgData*/

    SELECT
      COUNT(*) AS TotalRows
    FROM OrgData od
    WHERE od.ClientId = pClientId;

  ELSEIF (pType = 3) THEN /*List: Vendors*/

    SELECT
      COUNT(*) AS TotalRows
    FROM Vendor v
    WHERE v.ClientId = pClientId;

  ELSEIF (pType = 4) THEN /*List: Client Company*/

    SELECT
      COUNT(*) AS TotalRows
    FROM ClientCompany cc
    WHERE cc.ClientId = pClientId;

  ELSEIF (pType = 5) THEN /*LIST: Category*/

    SELECT
      COUNT(*) AS TotalRows
    FROM Category c
    WHERE c.ClientId = pClientId;

  ELSEIF (pType = 14) THEN /*List: PO Data*/

    SELECT
      COUNT(*) AS TotalRows
    FROM PO
    WHERE PO.ClientId = pClientId;

  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DataLoadCategory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DataLoadCategory`(IN pType tinyint,
IN pId int,
IN pClientId int,
IN pCustomerId int,
IN pCategoryName varchar(250),
IN pCategoryNo varchar(250),
IN pCategoryType tinyint)
BEGIN
  IF pType = 0 THEN -- SELECT Category

    SELECT
      c.Id,
      c.ClientId,
      c.CustomerId,
      c.CategoryName,
      c.CategoryNo,
      c.CategoryType,
      c2.CustomerName
    FROM Category c
      LEFT JOIN Customer c2
        ON c.CustomerId = c2.CustomerId
    WHERE c.Id = pId
    AND c.ClientId = pClientId;

  ELSEIF pType = 1 THEN -- Insert Category

    INSERT INTO Category (ClientId, CustomerId, CategoryName, CategoryNo, CategoryType)
      VALUES (pClientId, pCustomerId, pCategoryName, pCategoryNo, pCategoryType);

  ELSEIF pType = 2 THEN -- Update Category

    UPDATE Category
    SET CustomerId = pCustomerId,
        CategoryName = pCategoryName,
        CategoryNo = pCategoryNo,
        CategoryType = pCategoryType
    WHERE Id = pId
    AND ClientId = pClientId;

  ELSEIF pType = 3 THEN -- Delete Category

    DELETE
      FROM Category
    WHERE Id = pId
      AND ClientId = pClientId;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DataLoadClientCompany` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DataLoadClientCompany`(IN pType tinyint,
IN pId int,
IN pClientId int,
IN pCompanyCode varchar(50),
IN pDescription varchar(250),
IN pUserField1 varchar(500),
IN pUserField2 varchar(1000),
IN pUserField3 varchar(1000),
IN pUserField4 varchar(1000),
IN pUserField5 varchar(1000),
IN pUserField6 varchar(1000),
IN pUserField7 varchar(1000),
IN pUserField8 varchar(1000),
IN pVendorTypes varchar(1000),
IN pAllowPOAutoApproval tinyint,
IN pIsActive tinyint,
IN pDefaultDepartment int,
IN pDefaultProject int,
IN pDafaultGLCode int,
IN pAutoPopulateChild tinyint,
IN pGroup int)
BEGIN
  IF pType = 0 THEN
    -- Select by Id
    SELECT
      cc.Id,
      cc.ClientId,
      cc.CompanyCode,
      cc.Description,
      cc.UserField1,
      cc.UserField2,
      cc.UserField3,
      cc.UserField4,
      cc.UserField5,
      cc.UserField6,
      cc.UserField7,
      cc.UserField8,
      cc.VendorTypes,
      cc.AllowPOAutoApproval,
      cc.IsActive,
      cc.DefaultDepartment,
      cc.DefaultProject,
      cc.DafaultGLCode,
      cc.AutoPopulateChild,
      cc.`Group`,
      CONCAT(d.DepartmentName, ', ', d.Description) AS DefaultDepartmentName,
      CONCAT(p.ProjectName, ', ', p.Description) AS DefaultProjectName,
      CONCAT(gl.GLCodeName, ', ', gl.Desccription) AS DafaultGLCodeName
    FROM ClientCompany cc
      LEFT JOIN Department d
        ON cc.DefaultDepartment = d.Id
      LEFT JOIN ProjectType p
        ON cc.DefaultProject = p.Id
      LEFT JOIN GLCode gl
        ON cc.DafaultGLCode = gl.GLCodeId
    WHERE cc.Id = pId
    AND cc.ClientId = pClientId;

  ELSEIF pType = 1 THEN
    -- Insert ClientCompany
    INSERT INTO ClientCompany (ClientId, CompanyCode, Description, UserField1, UserField2, UserField3, UserField4, UserField5, UserField6, UserField7, UserField8, VendorTypes,
    AllowPOAutoApproval, IsActive, DefaultDepartment, DefaultProject, DafaultGLCode, AutoPopulateChild, `Group`)
      VALUES (pClientId, pCompanyCode, pDescription, pUserField1, pUserField2, pUserField3, pUserField4, pUserField5, pUserField6, pUserField7, pUserField8, pVendorTypes, pAllowPOAutoApproval, pIsActive, pDefaultDepartment, pDefaultProject, pDafaultGLCode, pAutoPopulateChild, pGroup);

  ELSEIF pType = 2 THEN
    -- Update ClientCompany
    UPDATE ClientCompany
    SET CompanyCode = COALESCE(pCompanyCode, CompanyCode),
        Description = COALESCE(pDescription, Description),
        UserField1 = COALESCE(pUserField1, UserField1),
        UserField2 = COALESCE(pUserField2, UserField2),
        UserField3 = COALESCE(pUserField3, UserField3),
        UserField4 = COALESCE(pUserField4, UserField4),
        UserField5 = COALESCE(pUserField5, UserField5),
        UserField6 = COALESCE(pUserField6, UserField6),
        UserField7 = COALESCE(pUserField7, UserField7),
        UserField8 = COALESCE(pUserField8, UserField8),
        VendorTypes = COALESCE(pVendorTypes, VendorTypes),
        AllowPOAutoApproval = COALESCE(pAllowPOAutoApproval, AllowPOAutoApproval),
        IsActive = pIsActive,
        DefaultDepartment = COALESCE(pDefaultDepartment, DefaultDepartment),
        DefaultProject = COALESCE(pDefaultProject, DefaultProject),
        DafaultGLCode = COALESCE(pDafaultGLCode, DafaultGLCode),
        AutoPopulateChild = COALESCE(pAutoPopulateChild, AutoPopulateChild),
        `Group` = COALESCE(pGroup, `Group`)
    WHERE Id = pId
    AND ClientId = pClientId;

  ELSEIF pType = 3 THEN
    -- Delete ClientCompany
    DELETE
      FROM ClientCompany
    WHERE Id = pId
      AND ClientId = pClientId;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DataLoadClosingDate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DataLoadClosingDate`(IN `pType` tinyint,
IN `pClientId` int,
IN `pClosingStartDate` datetime,
IN pClosingDuration int)
BEGIN

  IF (pType = 0) THEN /*GET*/

    SELECT
      Client.ClosingStartDate,
      Client.ClosingDuration
    FROM Client
    WHERE ClientId = pClientId;

  ELSEIF (pType = 1) THEN /*Update*/

    UPDATE Client
    SET ClosingStartDate = pClosingStartDate,
        ClosingDuration = pClosingDuration
    WHERE ClientId = pClientId;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DataLoadDepartment` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DataLoadDepartment`(IN `pType` tinyint,
IN `pId` int,
IN `pDepartmentName` varchar(75),
IN `pDescription` varchar(250),
IN `pClientCompanyId` int,
IN `pInternalId` varchar(250),
IN `pIsActive` tinyint,
IN `pClientId` int,
IN `pDepartmentPriority` int(1),
IN `pGLCodeId` int,
IN `pProjectTypeId` int)
BEGIN

  IF (pType = 0) THEN /*Single: Department*/

    SELECT
      Department.Id,
      Department.DepartmentName,
      Department.Description,
      Department.ClientCompanyId,
      Department.InternalId,
      Department.IsActive,
      Department.ClientId,
      Department.DepartmentPriority,
      COALESCE(CONCAT(ClientCompany.CompanyCode, ', ', ClientCompany.Description), CompanyCode) AS CompanyName

    FROM Department
      LEFT JOIN ClientCompany
        ON Department.ClientCompanyId = ClientCompany.Id
    WHERE Department.Id = pId
    AND Department.ClientId = pClientId;

  ELSEIF (pType = 1) THEN /*Create Department*/

    INSERT INTO Department (DepartmentName, Description, ClientCompanyId, InternalId, IsActive, DepartmentPriority, ClientId)
      VALUES (pDepartmentName, pDescription, pClientCompanyId, pInternalId, pIsActive, pDepartmentPriority, pClientId);

  ELSEIF (pType = 2) THEN /*Update Department*/

    UPDATE Department
    SET Department.DepartmentName = pDepartmentName,
        Department.Description = pDescription,
        Department.ClientCompanyId = pClientCompanyId,
        Department.InternalId = pInternalId,
        Department.IsActive = pIsActive,
        Department.ClientId = pClientId,
        Department.DepartmentPriority = pDepartmentPriority
    WHERE Department.Id = pId
    AND Department.ClientId = pClientId;

  ELSEIF (pType = 3) THEN /*Get GL Codes assigned*/

    SELECT
      DepartmentGLCode.DepartmentId,
      DepartmentGLCode.GLCodeId,
      CONCAT(GLCode.GLCodeName, ', ', GLCode.Desccription) AS `GLCode`

    FROM DepartmentGLCode
      LEFT JOIN GLCode
        ON DepartmentGLCode.GLCodeId = GLCode.GLCodeId
    WHERE DepartmentGLCode.DepartmentId = pId
    ORDER BY GLCode.GLCodeId DESC;

  ELSEIF (pType = 4) THEN /*Get Projects assigned*/

    SELECT
      DepartmentProjectType.DepartmentId,
      DepartmentProjectType.ProjectTypeId,
      CONCAT(ProjectType.ProjectName, ', ', ProjectType.Description) AS `Project`

    FROM DepartmentProjectType
      LEFT JOIN ProjectType
        ON DepartmentProjectType.ProjectTypeId = ProjectType.Id
    WHERE DepartmentProjectType.DepartmentId = pId
    ORDER BY ProjectType.Id DESC;

  ELSEIF (pType = 5) THEN /*Insert Department GL*/

    IF NOT EXISTS (SELECT
          *
        FROM DepartmentGLCode
        WHERE DepartmentId = pId
        AND GLCodeId = pGLCodeId) THEN

      INSERT INTO DepartmentGLCode (DepartmentGLCode.DepartmentId, DepartmentGLCode.GLCodeId)
        VALUES (pId, pGLCodeId);

    END IF;

  ELSEIF (pType = 6) THEN /*Delete Department GL*/

    DELETE
      FROM DepartmentGLCode
    WHERE DepartmentGLCode.DepartmentId = pId
      AND DepartmentGLCode.GLCodeId = pGLCodeId;

  ELSEIF (pType = 7) THEN/*Insert Department Projects*/

    IF NOT EXISTS (SELECT
          *
        FROM DepartmentProjectType
        WHERE DepartmentId = pId
        AND ProjectTypeId = pProjectTypeId) THEN

      INSERT INTO DepartmentProjectType (DepartmentProjectType.DepartmentId, DepartmentProjectType.ProjectTypeId)
        VALUES (pId, pProjectTypeId);

    END IF;

  ELSEIF (pType = 8) THEN /*Delete Department Projects*/

    DELETE
      FROM DepartmentProjectType
    WHERE DepartmentProjectType.DepartmentId = pId
      AND DepartmentProjectType.ProjectTypeId = pProjectTypeId;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DataLoadEmailCapture` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DataLoadEmailCapture`(IN `pType` tinyint,
IN `pClientId` int,
IN `pKeyword` varchar(50),
IN `pDateFrom` date,
IN `pDateTo` date,
IN pOffset int,
IN pSize int)
BEGIN

  IF (pType = 0) THEN

    SELECT
      ecce.EmailSource AS EmailSender,
      ecce.EmailSubject,
      eca.EmailAttachmentName AS EmailAttachment,
      ecce.ReceivedDateTime AS EmailDate,
      CASE WHEN (bch.`Source` = 'FTP') THEN CASE WHEN (inv.IsPOInvoice = TRUE) THEN CONCAT('https://apdropbox.com/apsimages/', SUBSTRING_INDEX (SUBSTRING(ecc.DropFolder, 8), '\\', 1), '/FTP/PO/', inv.InvoiceId, '.pdf') ELSE CONCAT('https://apdropbox.com/apsimages/', SUBSTRING_INDEX (SUBSTRING(ecc.DropFolder, 8), '\\', 1), '/FTP/NOPO/', inv.InvoiceId, '.pdf') END ELSE CONCAT('https://apdropbox.com/apsimages/', SUBSTRING_INDEX (SUBSTRING(ecc.DropFolder, 8), '\\', 1), '/Email/', inv.InvoiceId, '.pdf') END AS EmailFile

    FROM EmailCaptureClientEmails ecce
      INNER JOIN EmailCaptureClients ecc
        ON ecc.EmailCaptureClientId = ecce.EmailCaptureClientId
      INNER JOIN EmailCaptureAttachments eca
        ON eca.EmailCaptureClientEmailId = ecce.EmailCaptureClientEmailId
      INNER JOIN Batch bch
        ON bch.BatchName LIKE CONCAT('%', eca.NewAttachmentName, '%')
      INNER JOIN Invoice inv
        ON inv.BatchID = bch.ID
    WHERE bch.ClientID = pClientId
    AND ecc.ClientId = pClientId
    AND (pDateFrom IS NULL
    OR ecce.ReceivedDateTime >= pDateFrom)
    AND (pDateTo IS NULL
    OR ecce.ReceivedDateTime < DATE_ADD(pDateTo, INTERVAL 1 DAY))
    AND (pKeyword IS NULL
    OR ecce.EmailSource LIKE CONCAT('%', pKeyword, '%'))
    AND (pKeyword IS NULL
    OR ecce.EmailSubject LIKE CONCAT('%', pKeyword, '%'))
    LIMIT pOffset, pSize;

  ELSE

    SELECT
      ecce.EmailSource AS EmailSender,
      ecce.EmailSubject,
      eca.EmailAttachmentName AS EmailAttachment,
      ecce.ReceivedDateTime AS EmailDate,
      CASE WHEN (bch.`Source` = 'FTP') THEN CASE WHEN (inv.IsPOInvoice = TRUE) THEN CONCAT('https://apdropbox.com/apsimages/', SUBSTRING_INDEX (SUBSTRING(ecc.DropFolder, 8), '\\', 1), '/FTP/PO/', inv.InvoiceId, '.pdf') ELSE CONCAT('https://apdropbox.com/apsimages/', SUBSTRING_INDEX (SUBSTRING(ecc.DropFolder, 8), '\\', 1), '/FTP/NOPO/', inv.InvoiceId, '.pdf') END ELSE CONCAT('https://apdropbox.com/apsimages/', SUBSTRING_INDEX (SUBSTRING(ecc.DropFolder, 8), '\\', 1), '/Email/', inv.InvoiceId, '.pdf') END AS EmailFile

    FROM EmailCaptureClientEmails ecce
      INNER JOIN EmailCaptureClients ecc
        ON ecc.EmailCaptureClientId = ecce.EmailCaptureClientId
      INNER JOIN EmailCaptureAttachments eca
        ON eca.EmailCaptureClientEmailId = ecce.EmailCaptureClientEmailId
      INNER JOIN Batch bch
        ON bch.BatchName LIKE CONCAT('%', eca.NewAttachmentName, '%')
      INNER JOIN Invoice inv
        ON inv.BatchID = bch.ID
    WHERE bch.ClientID = pClientId
    AND ecc.ClientId = pClientId
    AND (pDateFrom IS NULL
    OR ecce.ReceivedDateTime >= pDateFrom)
    AND (pDateTo IS NULL
    OR ecce.ReceivedDateTime < DATE_ADD(pDateTo, INTERVAL 1 DAY))
    AND (pKeyword IS NULL
    OR ecce.EmailSource LIKE CONCAT('%', pKeyword, '%'))
    AND (pKeyword IS NULL
    OR ecce.EmailSubject LIKE CONCAT('%', pKeyword, '%')) LIMIT 15;

  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DataLoadGLCode` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DataLoadGLCode`(IN `pType` tinyint,
IN `pGLCodeId` int,
IN `pGLCodeName` varchar(250),
IN `pDescription` varchar(500),
IN `pIsActive` tinyint,
IN `pClientCompanyId` int,
IN `pClientId` int)
BEGIN

  IF (pType = 0) THEN /*Single: GLCode*/

    SELECT
      GLCode.GLCodeId,
      GLCode.GLCodeName,
      GLCode.Desccription,
      GLCode.ClientCompanyId,
      GLCode.IsActive,
      GLCode.ActivityRequired,
      COALESCE(CONCAT(ClientCompany.CompanyCode, ', ', ClientCompany.Description), CompanyCode) AS CompanyName

    FROM GLCode
      LEFT JOIN ClientCompany
        ON GLCode.ClientCompanyId = ClientCompany.Id
    WHERE GLCode.GLCodeId = pGLCodeId
    AND GLCode.ClientId = pClientId LIMIT 1;

  ELSEIF (pType = 1) THEN /*Create GLCode*/

    INSERT INTO GLCode (GLCodeName, Desccription, IsActive, ClientCompanyId, ClientId, ActivityRequired)
      VALUES (pGLCodeName, pDescription, pIsActive, pClientCompanyId, pClientId, 0);

  ELSEIF (pType = 2) THEN /*Update GLCode*/

    UPDATE GLCode
    SET GLCode.GLCodeName = pGLCodeName,
        GLCode.Desccription = pDescription,
        ClientCompanyId = pClientCompanyId,
        IsActive = pIsActive
    WHERE GLCodeId = pGLCodeId
    AND ClientId = pClientId;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DataLoadOrgData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DataLoadOrgData`(IN `pType` tinyint,
IN `pId` int,
IN `pOrgId` varchar(250),
IN `pOrgName` varchar(250),
IN `pIsActive` tinyint,
IN `pClientId` int)
BEGIN

  IF (pType = 0) THEN/*Single: GLCode*/

    SELECT
      OrgData.Id,
      OrgData.OrgId,
      OrgData.OrgName,
      OrgData.IsActive,
      OrgData.ClientId
    FROM OrgData
    WHERE OrgData.Id = pId
    AND OrgData.ClientId = pClientId LIMIT 1;

  ELSEIF (pType = 1) THEN /*Create OrgData*/

    INSERT INTO OrgData (OrgId, OrgName, IsActive, ClientId)
      VALUES (pOrgId, pOrgName, pIsActive, pClientId);

  ELSEIF (pType = 2) THEN /*Update GLCode*/

    UPDATE OrgData
    SET OrgId = pOrgId,
        OrgName = pOrgName,
        IsActive = pIsActive
    WHERE OrgData.Id = pId
    AND ClientId = pClientId;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DataLoadVendor` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DataLoadVendor`(IN pType tinyint,
IN pClientId int,
IN pVendorId int,
IN pVendorNo varchar(250),
IN pVendorName varchar(250),
IN pContactPerson varchar(250),
IN pTelephone varchar(250),
IN pFax varchar(250),
IN pEmail varchar(250),
IN pAddressId int,
IN pDefaultGlCodeId int,
IN pFreightGLCodeId int,
IN pTaxGLCodeId int,
IN pOrgDataId int,
IN pClientCompanyId int,
IN pShippingTermId int,
IN pFreightCodeId int,
IN pTaxCode varchar(50),
IN pCurrency varchar(250),
IN pTaxLevel varchar(50),
IN pVendorType varchar(50),
IN pPaymentType int,
IN pExternalId varchar(250),
IN pAccountCode varchar(50),
IN pAccountOwner varchar(255),
IN pContractAmount varchar(255),
IN pIsActive bool,
IN pIsConfidential bool,
IN pIsCSIVendor bool,
IN pIsOneTimeVendor bool,
IN pIsPoVendor bool,
IN pIs1099Vendor bool,
IN pNetDisPer double,
IN pDiscount_Day_01 int,
IN pFirst_Net_Days int,
IN pVendorTerm varchar(250),
IN pStateId int,
IN pZipCode varchar(250),
IN pStreetName varchar(250),
IN pCityName varchar(250),
IN pCountry varchar(250),
IN pAddress1 varchar(250),
IN pAddress2 varchar(250),
IN pAddress3 varchar(250))
BEGIN

	IF (pType = 0) THEN

		SELECT
			v.ClientId,
			v.VendorId,
			v.VendorNo,
			v.VendorName,
			v.ContactPerson,
			v.Telephone,
			v.Fax,
			v.Email,
			v.DefaultGlCodeId,
			v.FreightGLCodeId,
			v.TaxGLCodeId,
			v.orgDataId,
			v.ClientCompanyId,
			v.ShippingTermId,
			v.FreightCodeId,
			v.TaxCode,
			v.Currency,
			v.TaxLevel,
			v.VendorType,
			v.PaymentType,
			v.ExternalId,
			v.AccountCode,
			v.AccountOwner,
			v.ContractAmount,
			v.IsActive,
			v.IsConfidential,
			v.IsCSIVendor,
			v.IsOneTimeVendor,
			v.IsPoVendor,
			v.Is1099Vendor,
			v.AddressId,
			v.ActivityRequired,
			v.IgnoreValidation,
			v.OneInvoicePerCard,
			v.RequireAccountNumber,
			v.NetDisPer, v.Discount_Day_01, v.First_Net_Days, v.VendorTerm,
			a.StateId,
			a.ZipCode,
			a.StreetName,
			a.CityName,
			a.Country,
			a.Address1,
			a.Address2,
			a.Address3,
			s.StateName,
			CONCAT(gl.GLCodeName, ', ', gl.Desccription) AS DefaultGLCodeName,
			CONCAT(glf.GLCodeName, ', ', glf.Desccription) AS FreightGLCodeName,
			CONCAT(glt.GLCodeName, ', ', glt.Desccription) AS TaxGLCodeName,
			CONCAT(od.OrgId, ', ', od.OrgName) AS OrgDataName,
			CONCAT(cc.CompanyCode, ', ', cc.Description) AS CompanyName,
			CONCAT(st.Code, ', ', st.Description) AS ShippingTermName,
			CONCAT(fc.Code, ', ', fc.Description) AS FreightCodeName
		FROM Vendor v
			LEFT JOIN Address a
				ON v.AddressId = a.AddressId
			LEFT JOIN State s
				ON a.StateId = s.StateId
			LEFT JOIN ShippingTerms st
				ON v.ShippingTermId = st.ShippingTermId
			LEFT JOIN FreightCodes fc
				ON v.FreightCodeId = fc.FreightCodeId
			LEFT JOIN OrgData od
				ON v.orgDataId = od.Id
			LEFT JOIN ClientCompany cc
				ON v.ClientCompanyId = cc.Id
			LEFT JOIN GLCode gl
				ON v.DefaultGlCodeId = gl.GLCodeId
			LEFT JOIN GLCode glf
				ON v.FreightGLCodeId = glf.GLCodeId
			LEFT JOIN GLCode glt
				ON v.TaxGLCodeId = glt.GLCodeId
		WHERE v.VendorId = PVendorId
		AND v.ClientId = pClientId;

	ELSEIF (pType = 1) THEN /*Create Vendor*/

			-- Insert address into Address table
			INSERT INTO Address (StateId, ZipCode, StreetName, CityName, Country, Address1, Address2, Address3)
				VALUES (pStateId, pZipCode, pStreetName, pCityName, pCountry, pAddress1, pAddress2, pAddress3);

			SET @addressId = LAST_INSERT_ID();

			-- Vendor
			INSERT INTO Vendor (ClientId, VendorNo, VendorName, ContactPerson, Telephone, Fax, Email,
			DefaultGlCodeId, FreightGLCodeId, TaxGLCodeId, orgDataId, ClientCompanyId, ShippingTermId, FreightCodeId,
			TaxCode, Currency, TaxLevel, VendorType, PaymentType, ExternalId, AccountCode, AccountOwner, ContractAmount,
			IsActive, IsConfidential, IsCSIVendor, IsOneTimeVendor, IsPoVendor, Is1099Vendor, NetDisPer,Discount_Day_01,First_Net_Days,VendorTerm, AddressId,
			ActivityRequired, IgnoreValidation, OneInvoicePerCard, RequireAccountNumber) -- not nullables
				VALUES (pClientId, pVendorNo, pVendorName, pContactPerson, pTelephone, pFax, pEmail, pDefaultGlCodeId, pFreightGLCodeId, pTaxGLCodeId, pOrgDataId, pClientCompanyId, pShippingTermId,
						pFreightCodeId, pTaxCode, pCurrency, pTaxLevel, pVendorType, pPaymentType, pExternalId, pAccountCode, pAccountOwner, pContractAmount, pIsActive, pIsConfidential, pIsCSIVendor,
						pIsOneTimeVendor, pIsPoVendor, pIs1099Vendor, pNetDisPer, pDiscount_Day_01, pFirst_Net_Days, pVendorTerm, @addressId, 0, 0, 0, 0);

	ELSEIF (pType = 2) THEN /*Update Vendor*/
			-- Insert into Address table if pAddressId is null or doesn't exist
			IF pAddressId IS NULL
				OR NOT EXISTS (SELECT
						1
					FROM `Address`
					WHERE AddressId = pAddressId) THEN
				INSERT INTO Address (StateId, ZipCode, StreetName, CityName, Country, Address1, Address2, Address3)
					VALUES (pStateId, pZipCode, pStreetName, pCityName, pCountry, pAddress1, pAddress2, pAddress3);
				SET pAddressId = LAST_INSERT_ID();
			ELSE
				UPDATE Address
				SET StateId = pStateId,
					ZipCode = pZipCode,
					StreetName = pStreetName,
					CityName = pCityName,
					Country = pCountry,
					Address1 = pAddress1,
					Address2 = pAddress2,
					Address3 = pAddress3
				WHERE AddressId = pAddressId;
			END IF;

			UPDATE Vendor
			SET VendorNo = pVendorNo,
				VendorName = pVendorName,
				ContactPerson = pContactPerson,
				Telephone = pTelephone,
				Fax = pFax,
				Email = pEmail,
				DefaultGlCodeId = pDefaultGlCodeId,
				FreightGLCodeId = pFreightGLCodeId,
				TaxGLCodeId = pTaxGLCodeId,
				orgDataId = pOrgDataId,
				ClientCompanyId = pClientCompanyId,
				ShippingTermId = pShippingTermId,
				FreightCodeId = pFreightCodeId,
				TaxCode = pTaxCode,
				Currency = pCurrency,
				TaxLevel = pTaxLevel,
				VendorType = pVendorType,
				PaymentType = pPaymentType,
				ExternalId = pExternalId,
				AccountCode = pAccountCode,
				AccountOwner = pAccountOwner,
				ContractAmount = pContractAmount,
				IsActive = pIsActive,
				IsConfidential = pIsConfidential,
				IsCSIVendor = pIsCSIVendor,
				IsOneTimeVendor = pIsOneTimeVendor,
				IsPoVendor = pIsPoVendor,
				Is1099Vendor = pIs1099Vendor,
				NetDisPer = pNetDisPer,
				Discount_Day_01 = pDiscount_Day_01,
				First_Net_Days = pFirst_Net_Days,
				VendorTerm = pVendorTerm,
				AddressId = pAddressId			
			WHERE VendorId = pVendorId
			AND ClientId = pClientId;

	ELSEIF (pType = 3) THEN /*GET Vendor locations*/

		SELECT
			vl.VendorId,
			vl.VendorLocationId,
			vl.LocationName,
			vl.LocationNumber,
			vl.IsActive,
			CONCAT(COALESCE(a.Address1, ''), ' ',
			COALESCE(a.CityName, ''), ' ',
			COALESCE(s.StateNameShort, ''), ' ',
			COALESCE(a.ZipCode, ''), ' ',
			COALESCE(a.Country, '')) AS Address
		FROM VendorLocation vl
			LEFT JOIN Address a
				ON vl.AddressId = a.AddressId
			LEFT JOIN State s
				ON a.StateId = s.StateId
		WHERE vl.VendorId = pVendorId
		ORDER BY vl.VendorLocationId DESC;

	ELSEIF (pType = 4) THEN /*GET Vendor item contracts*/

		SELECT
			vic.VendorId,
			vic.VendorItemContractId,
			vic.VendorItemDescription,
			vic.VendorPrice,
			vic.PriceChangeDate,
			i.ItemNo,
			IFNULL(cl.LocationName, '') AS LocationName
		FROM VendorItemContract vic
			LEFT JOIN Item i
				ON vic.ItemId = i.ItemId
			LEFT JOIN CustomerLocation cl
				ON vic.CustomerLocationId = cl.CustomerLocationId
		WHERE vic.VendorId = pVendorId
		ORDER BY vic.VendorItemContractId DESC;

	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DataLoadVendorDepartment` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DataLoadVendorDepartment`(IN pType tinyint,
IN pClientId int,
IN pVendorId int,
IN pDepartmentId int,
IN pGLCodeId int)
BEGIN
	IF (pType = 0) THEN /*List: VendorDpartment by VendorId*/

		SELECT
			vd.Id,
			vd.VendorId,
			vd.DepartmentId,
			d.DepartmentName,
			d.Description
		FROM VendorDepartment vd
			JOIN Department d
				ON vd.DepartmentId = d.Id
		WHERE vd.VendorId = pVendorId
		AND d.ClientId = pClientId
		ORDER BY vd.Id DESC;

	ELSEIF (pType = 1) THEN /*List: Vendor_Department_Gl*/
		SELECT
			vdg.VendorId,
			vdg.DepartmentId,
			vdg.GLCodeId,
			g.GLCodeName,
			g.Desccription
		FROM Vendor_Department_GL vdg
			JOIN GLCode g
				ON vdg.GLCodeId = g.GLCodeId
		WHERE vdg.VendorId = pVendorId
		AND vdg.DepartmentId = pDepartmentId
		AND g.ClientId = pClientId
		ORDER BY vdg.Id DESC;

	ELSEIF (pType = 2) THEN /*Insert VendorDepartment*/
		IF NOT EXISTS (SELECT
					*
				FROM VendorDepartment
				WHERE VendorId = pVendorId
				AND DepartmentId = pDepartmentId) THEN
			INSERT INTO VendorDepartment (VendorId, DepartmentId)
				VALUES (pVendorId, pDepartmentId);
		END IF;

	ELSEIF (pType = 3) THEN /*Delete VendorDepartment*/
			DELETE
				FROM VendorDepartment
			WHERE VendorId = pVendorId
				AND DepartmentId = pDepartmentId;

			DELETE
				FROM Vendor_Department_GL
			WHERE VendorId = pVendorId
				AND DepartmentId = pDepartmentId;

	ELSEIF (pType = 4) THEN /*INSERT Vendor_Department_GL*/
		IF NOT EXISTS (SELECT
					*
				FROM Vendor_Department_GL
				WHERE VendorId = pVendorId
				AND DepartmentId = pDepartmentId
				AND GLCodeId = pGLCodeId) THEN
			INSERT INTO Vendor_Department_GL (VendorId, DepartmentId, GLCodeId)
				VALUES (pVendorId, pDepartmentId, pGLCodeId);
		END IF;

	ELSEIF (pType = 5) THEN /*DELETE Vendor_Department_GL*/
		DELETE
			FROM Vendor_Department_GL
		WHERE VendorId = pVendorId
			AND DepartmentId = pDepartmentId
			AND GLCodeId = pGLCodeId;

	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DataLoadVendorItemContract` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DataLoadVendorItemContract`(IN pType tinyint,
IN pVendorId int,
IN pVendorItemContractId int,
IN pCustomerLocationId int,
IN pItemId int,
IN pVendorItemDescription varchar(250),
IN pVendorPrice double,
IN pPriceChangeDate date)
BEGIN

  IF (pType = 0) THEN /*Select Vendor item contract*/

    SELECT
      vic.VendorItemContractId,
      vic.VendorId,
      vic.ItemId,
      vic.VendorItemDescription,
      vic.VendorPrice,
      vic.PriceChangeDate,
      CONCAT(i.ItemNo, ", ", i.ItemDescription) AS ItemName
    FROM VendorItemContract vic
      JOIN Item i
        ON vic.ItemId = i.ItemId
    WHERE vic.VendorItemContractId = pVendorItemContractId LIMIT 1;

  ELSEIF (pType = 1) THEN /*Insert Vendor item contract*/

    INSERT INTO VendorItemContract (VendorId, CustomerLocationId, ItemId, VendorItemDescription, VendorPrice, PriceChangeDate)
      VALUES (pVendorId, pCustomerLocationId, pItemId, pVendorItemDescription, pVendorPrice, pPriceChangeDate);

  ELSEIF (pType = 2) THEN /*Edit Vendor item contract*/

    UPDATE VendorItemContract
    SET VendorItemDescription = pVendorItemDescription,
        VendorPrice = pVendorPrice,
        PriceChangeDate = pPriceChangeDate,
        ItemId = pItemId,
        CustomerLocationId = pCustomerLocationId
    WHERE VendorItemContractId = pVendorItemContractId
    AND VendorId = pVendorId;

  ELSEIF (pType = 3) THEN /*Delete Vendor item contract*/

    DELETE
      FROM VendorItemContract
    WHERE VendorItemContract.VendorItemContractId = pVendorItemContractId
      AND VendorItemContract.VendorId = pVendorId;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_DataLoadVendorLocation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_DataLoadVendorLocation`(IN pType tinyint,
IN pVendorId int,
IN pVendorLocationId int,
IN pLocationNumber varchar(50),
IN pLocationName varchar(150),
IN pAddressId int,
IN pIsActive bool,
IN pStateId int,
IN pZipCode varchar(20),
IN pStreetName varchar(150),
IN pCityName varchar(50),
IN pCountry varchar(50),
IN pAddress1 varchar(250),
IN pAddress2 varchar(250),
IN pAddress3 varchar(250),
IN pAddress4 varchar(250),
IN pContactPerson varchar(50),
IN pFax varchar(50),
IN pEmail varchar(250),
IN pPhoneNo varchar(50))
BEGIN
	IF (pType = 0) THEN /*Select Vendor location*/

		SELECT
			v.VendorId,
			vl.VendorLocationId,
			vl.LocationName,
			vl.LocationNumber,
			vl.IsActive,
			a.Address1,
			a.Address2,
			a.Address3,
			a.Address4,
			a.CityName,
			a.StateId,
			a.ZipCode,
			a.Country,
			a.StreetName,
			a.ContactPerson,
			a.Email,
			a.Fax,
			a.PhoneNo,
			s.StateName
		FROM VendorLocation vl
			LEFT JOIN Address a
				ON vl.AddressId = a.AddressId
			LEFT JOIN State s
				ON a.StateId = s.StateId
			LEFT JOIN Vendor v
				ON vl.VendorId = v.VendorId
		WHERE vl.VendorLocationId = pVendorLocationId LIMIT 1;

	ELSEIF (pType = 1) THEN /*Insert Vendor location*/

			-- Insert address into Address table
			INSERT INTO Address (StateId, ZipCode, StreetName, CityName, Country, Address1, Address2, Address3, Address4,
			ContactPerson, Fax, Email, PhoneNo)
				VALUES (pStateId, pZipCode, pStreetName, pCityName, pCountry, pAddress1, pAddress2, pAddress3, pAddress4, pContactPerson, pFax, pEmail, pPhoneNo);

			SET @addressId = LAST_INSERT_ID();

			-- Vendor
			INSERT INTO VendorLocation (LocationNumber, LocationName, VendorId, AddressId, IsActive)
				VALUES (pLocationNumber, pLocationName, pVendorId, @addressId, pIsActive);

	ELSEIF (pType = 2) THEN /*Update Vendor location*/

			IF pAddressId IS NULL
				OR NOT EXISTS (SELECT
						1
					FROM `Address`
					WHERE AddressId = pAddressId) THEN
				INSERT INTO Address (StateId, ZipCode, StreetName, CityName, Country, Address1, Address2, Address3, Address4,
				ContactPerson, Fax, Email, PhoneNo)
					VALUES (pStateId, pZipCode, pStreetName, pCityName, pCountry, pAddress1, pAddress2, pAddress3, pAddress4, pContactPerson, pFax, pEmail, pPhoneNo);

				SET pAddressId = LAST_INSERT_ID();

			ELSE
				UPDATE Address
				SET StateId = pStateId,
					ZipCode = pZipCode,
					StreetName = pStreetName,
					CityName = pCityName,
					Country = pCountry,
					Address1 = pAddress1,
					Address2 = pAddress2,
					Address3 = pAddress3,
					Address4 = pAddress4,
					ContactPerson = pContactPerson,
					Fax = pFax,
					Email = pEmail,
					PhoneNo = pPhoneNo
				WHERE AddressId = pAddressId;
			END IF;

			UPDATE VendorLocation
			SET LocationNumber = pLocationNumber,
				LocationName = pLocationName,
				IsActive = pIsActive,
				AddressId = pAddressId
			WHERE VendorLocationId = pVendorLocationId
			AND VendorId = pVendorId;


	ELSEIF (pType = 3) THEN /*Delete Vendor location*/

			SELECT
				AddressId INTO pAddressId
			FROM VendorLocation
			WHERE VendorLocationId = pVendorLocationId;

			DELETE
				FROM VendorLocation
			WHERE VendorLocation.VendorLocationId = pVendorLocationId
				AND VendorLocation.VendorId = pVendorId;

			DELETE
				FROM Address
			WHERE AddressId = pAddressId;

	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_EmailGetAttachments` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_EmailGetAttachments`(pEmailId char(36))
ThisProc:
	BEGIN	
-- noformat

	select 	Filename, ea.AttachmentPath, ifnull(ea.DeleteAttachmentAfterSending, 0) as DeleteAttachmentAfterSending
	from 	EmailAttachments ea
	where 	EmailId = pEmailId;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_EmailGetTemplateValues` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_EmailGetTemplateValues`(in pUserId char(36), in pDocType varchar(10), in pDocKey varchar(100), in pValues text, in pTemplate int,  inout pSubject text, inout pBody text)
ThisProc:
	BEGIN	

	-- pValues follows the save rules as _x_AdvancedSearchFieldValuesDependency
	--
	-- [Token]■Value■[Token]■Value■[Token]■Value■[Token]■Value■[Token]■Value
	--

	select	Subject, Body
	into	pSubject, pBody
	from	EmailTemplates 
	where	EmailTemplateType = pTemplate;
	if ROW_COUNT() = 0 then  
		leave ThisProc;
	end if;

	set @ClientId 					= null;
	set @DATEFORMAT					= '%M %d, %Y';
	set @DATETIMEFORMAT 			= '%M %d, %Y at %h:%i %p';


	set @ApprovedBy					= _x_AdvancedSearchFieldValuesDependency(pValues, '[ApprovedBy]');
	set @ApprovedOn					= _x_AdvancedSearchFieldValuesDependency(pValues, '[ApprovedOn]');
	set @AssignedDate				= _x_AdvancedSearchFieldValuesDependency(pValues, '[AssignedDate]');
	set @Careof						= _x_AdvancedSearchFieldValuesDependency(pValues, '[Careof]');
	set @Client						= _x_AdvancedSearchFieldValuesDependency(pValues, '[Client]');
	set @ClientFileList				= _x_AdvancedSearchFieldValuesDependency(pValues, '[ClientFileList]');
	set @ClientInvoiceCountList		= _x_AdvancedSearchFieldValuesDependency(pValues, '[ClientInvoiceCountList]');
	set @Comment					= _x_AdvancedSearchFieldValuesDependency(pValues, '[Comment]');
	set @ContactPerson				= _x_AdvancedSearchFieldValuesDependency(pValues, '[ContactPerson]');
	set @Contactus					= _x_AdvancedSearchFieldValuesDependency(pValues, '[Contactus]');
	set @CreditCardNo				= _x_AdvancedSearchFieldValuesDependency(pValues, '[CreditCardNo]');
	set @CVC2						= _x_AdvancedSearchFieldValuesDependency(pValues, '[CVC2]');
	set @Date						= _x_AdvancedSearchFieldValuesDependency(pValues, '[Date]');
	set @DelegatedDate				= _x_AdvancedSearchFieldValuesDependency(pValues, '[DelegatedDate]');
	set @DiscountRequestedAmount	= _x_AdvancedSearchFieldValuesDependency(pValues, '[DiscountRequestedAmount]');
	set @DiscountTotalSum			= _x_AdvancedSearchFieldValuesDependency(pValues, '[DiscountTotalSum]');
	set @ErrorMessage				= _x_AdvancedSearchFieldValuesDependency(pValues, '[ErrorMessage]');
	set @ESCALATEDFROMFULLNAME		= _x_AdvancedSearchFieldValuesDependency(pValues, '[ESCALATEDFROMFULLNAME]');
	set @EstOrderDate				= _x_AdvancedSearchFieldValuesDependency(pValues, '[EstOrderDate]');
	set @Expiration					= _x_AdvancedSearchFieldValuesDependency(pValues, '[Expiration]');
	set @FileName					= _x_AdvancedSearchFieldValuesDependency(pValues, '[FileName]');
	set @FullName					= _x_AdvancedSearchFieldValuesDependency(pValues, '[FullName]');
	set @InternalNote				= _x_AdvancedSearchFieldValuesDependency(pValues, '[InternalNote]');
	set @InvoiceCount				= _x_AdvancedSearchFieldValuesDependency(pValues, '[InvoiceCount]');
	set @InvoiceDate				= _x_AdvancedSearchFieldValuesDependency(pValues, '[InvoiceDate]');
	set @InvoiceNo					= _x_AdvancedSearchFieldValuesDependency(pValues, '[InvoiceNo]');
	set @InvoiceNumber				= _x_AdvancedSearchFieldValuesDependency(pValues, '[InvoiceNumber]');
	set @InvoiceTotal				= _x_AdvancedSearchFieldValuesDependency(pValues, '[InvoiceTotal]');
	set @link						= _x_AdvancedSearchFieldValuesDependency(pValues, '[link]');
	set @NameF						= _x_AdvancedSearchFieldValuesDependency(pValues, '[NameF]');
	set @NameL						= _x_AdvancedSearchFieldValuesDependency(pValues, '[NameL]');
	set @NewPassword				= _x_AdvancedSearchFieldValuesDependency(pValues, '[NewPassword]');
	set @NoOfInvoices				= _x_AdvancedSearchFieldValuesDependency(pValues, '[NoOfInvoices]');
	set @OrderAmount				= _x_AdvancedSearchFieldValuesDependency(pValues, '[OrderAmount]');
	set @OrderTotal					= _x_AdvancedSearchFieldValuesDependency(pValues, '[OrderTotal]');
	set @PaymentMethod				= _x_AdvancedSearchFieldValuesDependency(pValues, '[PaymentMethod]');
	set @POHeaderId					= _x_AdvancedSearchFieldValuesDependency(pValues, '[POHeaderId]');
	set @PONumber					= _x_AdvancedSearchFieldValuesDependency(pValues, '[PONumber]');
	set @PrefundedAccountBalance	= _x_AdvancedSearchFieldValuesDependency(pValues, '[PrefundedAccountBalance]');
	set @Reason						= _x_AdvancedSearchFieldValuesDependency(pValues, '[Reason]');
	set @RequesterName				= _x_AdvancedSearchFieldValuesDependency(pValues, '[RequesterName]');
	set @RequestorFullName			= _x_AdvancedSearchFieldValuesDependency(pValues, '[RequestorFullName]');
	set @SenderEmail				= _x_AdvancedSearchFieldValuesDependency(pValues, '[SenderEmail]');
	set @SenderFullName				= _x_AdvancedSearchFieldValuesDependency(pValues, '[SenderFullName]');
	set @ShipTo						= _x_AdvancedSearchFieldValuesDependency(pValues, '[ShipTo]');
	set @Source						= _x_AdvancedSearchFieldValuesDependency(pValues, '[Source]');
	set @Table						= _x_AdvancedSearchFieldValuesDependency(pValues, '[Table]');
	set @TimeStamp					= _x_AdvancedSearchFieldValuesDependency(pValues, '[TimeStamp]');
	set @URL						= _x_AdvancedSearchFieldValuesDependency(pValues, '[URL]');
	set @VendorCount				= _x_AdvancedSearchFieldValuesDependency(pValues, '[VendorCount]');
	set @VendorMessage				= _x_AdvancedSearchFieldValuesDependency(pValues, '[VendorMessage]');
	set @VendorName					= _x_AdvancedSearchFieldValuesDependency(pValues, '[VendorName]');
	set @VendorNo					= _x_AdvancedSearchFieldValuesDependency(pValues, '[VendorNo]');
	set @Warehouse					= _x_AdvancedSearchFieldValuesDependency(pValues, '[Warehouse]');


	select	FirstName, LastName, concat(ltrim(FirstName), ' ', ltrim(LastName)), ClientId
	into 	@NameF, @NameL, @FullName, @ClientId
	from 	User 
	where 	UserId = pUserId;


	if pDocType = 'Invoice' THEN
		select	i.ClientId, ltrim(i.Comment), i.DiscountRequestedAmount, i.PONumber, date(i.InvoiceDate), i.InvoiceNo, i.InvoiceNo, i.InvoiceTotal, i.AprovedDate,
				ltrim(c.CustomerName),
				ltrim(v.VendorName), ltrim(v.VendorNo)
		into	@ClientId, @Comment, @DiscountRequestedAmount, @PONumber, @InvoiceDate, @InvoiceNo, @InvoiceNumber, @InvoiceTotal, @ApprovedOn,
				@Client, 
				@VendorName, @VendorNo
		from 	Invoice i
				inner join 	Client c	on c.ClientId = i.ClientId
				left join 	Vendor v 	on v.VendorId = i.Vendorid
                                  
		where	i.InvoiceId = pDocKey;
	end if;

                    

	Call _x_SetClientTimeZone(@CliendId);

	set @ApprovedBy					= ifnull(nullif(@ApprovedBy, ''), 'n/a');
	set @ApprovedOn					= ifnull(nullif(DATE_FORMAT(convert_tz(@ApprovedOn, 'GMT', @@session.time_zone), @DATETIMEFORMAT), ''), 'n/a');
	set @AssignedDate				= ifnull(nullif(DATE_FORMAT(convert_tz(@AssignedDate, 'GMT', @@session.time_zone), @DATETIMEFORMAT), ''), 'n/a');
	set @Careof						= ifnull(nullif(@Careof, ''), 'n/a');
	set @Client						= ifnull(nullif(@Client, ''), 'n/a');
	set @ClientFileList				= ifnull(nullif(@ClientFileList, ''), 'n/a');
	set @ClientInvoiceCountList		= ifnull(nullif(@ClientInvoiceCountList, ''), 'n/a');
	set @Comment					= ifnull(nullif(@Comment, ''), 'n/a');
	set @ContactPerson				= ifnull(nullif(@ContactPerson, ''), 'n/a');
	set @Contactus					= ifnull(nullif(@Contactus, ''), 'n/a');
	set @CreditCardNo				= ifnull(nullif(@CreditCardNo, ''), 'n/a');
	set @CVC2						= ifnull(nullif(@CVC2, ''), 'n/a');
	set @Date						= ifnull(nullif(DATE_FORMAT(Now(), @DATEFORMAT), ''), 'n/a');
	set @DelegatedDate				= ifnull(nullif(DATE_FORMAT(convert_tz(@DelegatedDate, 'GMT', @@session.time_zone), @DATETIMEFORMAT), ''), 'n/a');
	set @DiscountRequestedAmount	= ifnull(nullif(format(@DiscountRequestedAmount, 2), ''), 'n/a');
	set @DiscountTotalSum			= ifnull(nullif(format(@DiscountTotalSum, 2), ''), 'n/a');
	set @ErrorMessage				= ifnull(nullif(@ErrorMessage, ''), 'n/a');
	set @ESCALATEDFROMFULLNAME		= ifnull(nullif(@ESCALATEDFROMFULLNAME, ''), 'n/a');
	set @EstOrderDate				= ifnull(nullif(DATE_FORMAT(@EstOrderDate, @DATEFORMAT), ''), 'n/a');
	set @Expiration					= ifnull(nullif(@Expiration, ''), 'n/a');
	set @FileName					= ifnull(nullif(@FileName, ''), 'n/a');
	set @FullName					= ifnull(nullif(@FullName, ''), 'n/a');
	set @InternalNote				= ifnull(nullif(@InternalNote, ''), 'n/a');
	set @InvoiceCount				= ifnull(nullif(@InvoiceCount, ''), 'n/a');
	set @InvoiceDate				= ifnull(nullif(format(@InvoiceDate, @DATEFORMAT), ''), 'n/a');
	set @InvoiceNo					= ifnull(nullif(@InvoiceNo, ''), 'n/a');
	set @InvoiceNumber				= ifnull(nullif(@InvoiceNumber, ''), 'n/a');
	set @InvoiceTotal				= ifnull(nullif(format(@InvoiceTotal, 2), ''), 'n/a');
	set @link						= ifnull(nullif(@link, ''), 'n/a');
	set @Message					= ifnull(nullif(@Message, ''), 'n/a');
	set @NameF						= ifnull(nullif(@NameF, ''), 'n/a');
	set @NameL						= ifnull(nullif(@NameL, ''), 'n/a');
	set @NewPassword				= ifnull(nullif(@NewPassword, ''), 'n/a');
	set @NoOfInvoices				= ifnull(nullif(@NoOfInvoices, ''), 'n/a');
	set @OrderAmount				= ifnull(nullif(format(@OrderAmount, 2), ''), 'n/a');
	set @OrderTotal					= ifnull(nullif(@OrderTotal, ''), 'n/a');
	set @PaymentMethod				= ifnull(nullif(@PaymentMethod, ''), 'n/a');
	set @POHeaderId					= ifnull(nullif(@POHeaderId, ''), 'n/a');
	set @PONumber					= ifnull(nullif(@PONumber, ''), 'n/a');
	set @PrefundedAccountBalance	= ifnull(nullif(format(@PrefundedAccountBalance, 2), ''), 'n/a');
	set @Reason						= ifnull(nullif(@Reason, ''), 'n/a');
	set @RequesterName				= ifnull(nullif(@RequesterName, ''), 'n/a');
	set @RequestorFullName			= ifnull(nullif(@RequestorFullName, ''), 'n/a');
	set @SenderEmail				= ifnull(nullif(@SenderEmail, ''), 'n/a');
	set @SenderFullName				= ifnull(nullif(@SenderFullName, ''), 'n/a');
	set @ShipTo						= ifnull(nullif(@ShipTo, ''), 'n/a');
	set @Source						= ifnull(nullif(@Source, ''), 'n/a');
	set @Table						= ifnull(nullif(@Table, ''), 'n/a');
	set @TimeStamp					= ifnull(nullif(@TimeStamp, ''), 'n/a');
	set @URL						= ifnull(nullif(@URL, ''), 'n/a');
	set @VendorCount				= ifnull(nullif(@VendorCount, ''), 'n/a');
	set @VendorMessage				= ifnull(nullif(@VendorMessage, ''), 'n/a');
	set @VendorName					= ifnull(nullif(@VendorName, ''), 'n/a');
	set @VendorNo					= ifnull(nullif(@VendorNo, ''), 'n/a');
	set @Warehouse					= ifnull(nullif(@Warehouse, ''), 'n/a');


	set pSubject		=	replace (pSubject, '[ActualVendorName]', 		@VendorName);
	set pSubject		=	replace (pSubject, '[ApprovedBy]', 				@ApprovedBy);
	set pSubject		=	replace (pSubject, '[ApprovedOn]', 				@ApprovedOn);
	set pSubject		=	replace (pSubject, '[AssignedDate]', 			@AssignedDate);
	set pSubject		=	replace (pSubject, '[Care of]', 				@Careof);
	set pSubject		=	replace (pSubject, '[Client]', 					@Client);
	set pSubject		=	replace (pSubject, '[ClientFileList]', 			@ClientFileList);
	set pSubject		=	replace (pSubject, '[ClientInvoiceCountList]',	@ClientInvoiceCountList);
	set pSubject		=	replace (pSubject, '[Comment]', 				@Comment);
	set pSubject		=	replace (pSubject, '[ContactPerson]', 			@ContactPerson);
	set pSubject		=	replace (pSubject, '[Contactus]', 				@Contactus);
	set pSubject		=	replace (pSubject, '[CreditCardNo]', 			@CreditCardNo);
	set pSubject		=	replace (pSubject, '[CVC2]', 					@CVC2);
	set pSubject		=	replace (pSubject, '[Date]', 					@Date);
	set pSubject		=	replace (pSubject, '[DelegatedDate]', 			@DelegatedDate);
	set pSubject		=	replace (pSubject, '[DiscountRequestedAmount]', @DiscountRequestedAmount);
	set pSubject		=	replace (pSubject, '[DiscountTotalSum]', 		@DiscountTotalSum);
	set pSubject		=	replace (pSubject, '[ErrorMessage]', 			@ErrorMessage);
	set pSubject		=	replace (pSubject, '[ESCALATEDFROMFULLNAME]', 	@ESCALATEDFROMFULLNAME);
	set pSubject		=	replace (pSubject, '[EstOrderDate]', 			@EstOrderDate);
	set pSubject		=	replace (pSubject, '[Expiration]', 				@Expiration);
	set pSubject		=	replace (pSubject, '[FileName]', 				@FileName);
	set pSubject		=	replace (pSubject, '[FullName]', 				@FullName);
	set pSubject		=	replace (pSubject, '[InternalNote]', 			@InternalNote);
	set pSubject		=	replace (pSubject, '[InvoiceCount]', 			@InvoiceCount);
	set pSubject		=	replace (pSubject, '[InvoiceDate]', 			@InvoiceDate);
	set pSubject		=	replace (pSubject, '[InvoiceNo]', 				@InvoiceNo);
	set pSubject		=	replace (pSubject, '[InvoiceNumber]', 			@InvoiceNumber);
	set pSubject		=	replace (pSubject, '[InvoiceTotal]', 			@InvoiceTotal);
	set pSubject		=	replace (pSubject, '[link]', 					@link);
	set pSubject		=	replace (pSubject, '[Message]', 				pSubject);
	set pSubject		=	replace (pSubject, '[NameF]', 					@NameF);
	set pSubject		=	replace (pSubject, '[NameL]', 					@NameL);
	set pSubject		=	replace (pSubject, '[NewPassword]',	 			@NewPassword);
	set pSubject		=	replace (pSubject, '[NoOfInvoices]', 			@NoOfInvoices);
	set pSubject		=	replace (pSubject, '[OrderAmount]', 			@OrderAmount);
	set pSubject		=	replace (pSubject, '[OrderTotal]', 				@OrderTotal);
	set pSubject		=	replace (pSubject, '[PaymentMethod]', 			@PaymentMethod);
	set pSubject		=	replace (pSubject, '[POHeaderId]', 				@POHeaderId);
	set pSubject		=	replace (pSubject, '[PONumber]', 				@PONumber);
	set pSubject		=	replace (pSubject, '[PrefundedAccountBalance]', @PrefundedAccountBalance);
	set pSubject		=	replace (pSubject, '[Reason]', 					@Reason);
	set pSubject		=	replace (pSubject, '[RequesterName]', 			@RequesterName);
	set pSubject		=	replace (pSubject, '[RequestorFullName]', 		@RequestorFullName);
	set pSubject		=	replace (pSubject, '[SenderEmail]', 			@SenderEmail);
	set pSubject		=	replace (pSubject, '[SenderFullName]', 			@SenderFullName);
	set pSubject		=	replace (pSubject, '[ShipTo]', 					@ShipTo);
	set pSubject		=	replace (pSubject, '[Source]', 					@Source);
	set pSubject		=	replace (pSubject, '[Table]', 					@Table);
	set pSubject		=	replace (pSubject, '[TimeStamp]', 				@TimeStamp);
	set pSubject		=	replace (pSubject, '[URL]', 					@URL);
	set pSubject		=	replace (pSubject, '[VendorCount]', 			@VendorCount);
	set pSubject		=	replace (pSubject, '[VendorMessage]', 			@VendorMessage);
	set pSubject		=	replace (pSubject, '[VendorName]', 				@VendorName);
	set pSubject		=	replace (pSubject, '[VendorNo]', 				@VendorNo);
	set pSubject		=	replace (pSubject, '[Warehouse]', 				@Warehouse);


	set pBody			=	replace (pBody, '[ActualVendorName]', 			@VendorName);
	set pBody			=	replace (pBody, '[ApprovedBy]', 				@ApprovedBy);
	set pBody			=	replace (pBody, '[ApprovedOn]', 				@ApprovedOn);
	set pBody			=	replace (pBody, '[AssignedDate]', 				@AssignedDate);
	set pBody			=	replace (pBody, '[Care of]', 					@Careof);
	set pBody			=	replace (pBody, '[Client]', 					@Client);
	set pBody			=	replace (pBody, '[ClientFileList]', 			@ClientFileList);
	set pBody			=	replace (pBody, '[ClientInvoiceCountList]',		@ClientInvoiceCountList);
	set pBody			=	replace (pBody, '[Comment]', 					@Comment);
	set pBody			=	replace (pBody, '[ContactPerson]', 				@ContactPerson);
	set pBody			=	replace (pBody, '[Contactus]', 					@Contactus);
	set pBody			=	replace (pBody, '[CreditCardNo]', 				@CreditCardNo);
	set pBody			=	replace (pBody, '[CVC2]', 						@CVC2);
	set pBody			=	replace (pBody, '[Date]', 						@Date);
	set pBody			=	replace (pBody, '[DelegatedDate]', 				@DelegatedDate);
	set pBody			=	replace (pBody, '[DiscountRequestedAmount]', 	@DiscountRequestedAmount);
	set pBody			=	replace (pBody, '[DiscountTotalSum]', 			@DiscountTotalSum);
	set pBody			=	replace (pBody, '[ErrorMessage]', 				@ErrorMessage);
	set pBody			=	replace (pBody, '[ESCALATEDFROMFULLNAME]', 		@ESCALATEDFROMFULLNAME);
	set pBody			=	replace (pBody, '[EstOrderDate]', 				@EstOrderDate);
	set pBody			=	replace (pBody, '[Expiration]', 				@Expiration);
	set pBody			=	replace (pBody, '[FileName]', 					@FileName);
	set pBody			=	replace (pBody, '[FullName]', 					@FullName);
	set pBody			=	replace (pBody, '[InternalNote]',	 			@InternalNote);
	set pBody			=	replace (pBody, '[InvoiceCount]', 				@InvoiceCount);
	set pBody			=	replace (pBody, '[InvoiceDate]', 				@InvoiceDate);
	set pBody			=	replace (pBody, '[InvoiceNo]', 					@InvoiceNo);
	set pBody			=	replace (pBody, '[InvoiceNumber]', 				@InvoiceNumber);
	set pBody			=	replace (pBody, '[InvoiceTotal]', 				@InvoiceTotal);
	set pBody			=	replace (pBody, '[link]', 						@link);
	set pBody			=	replace (pBody, '[Message]', 					pBody);
	set pBody			=	replace (pBody, '[NameF]', 						@NameF);
	set pBody			=	replace (pBody, '[NameL]', 						@NameL);
	set pBody			=	replace (pBody, '[NewPassword]',	 			@NewPassword);
	set pBody			=	replace (pBody, '[NoOfInvoices]', 				@NoOfInvoices);
	set pBody			=	replace (pBody, '[OrderAmount]', 				@OrderAmount);
	set pBody			=	replace (pBody, '[OrderTotal]', 				@OrderTotal);
	set pBody			=	replace (pBody, '[PaymentMethod]', 				@PaymentMethod);
	set pBody			=	replace (pBody, '[POHeaderId]', 				@POHeaderId);
	set pBody			=	replace (pBody, '[PONumber]', 					@PONumber);
	set pBody			=	replace (pBody, '[PrefundedAccountBalance]', 	@PrefundedAccountBalance);
	set pBody			=	replace (pBody, '[Reason]', 					@Reason);
	set pBody			=	replace (pBody, '[RequesterName]', 				@RequesterName);
	set pBody			=	replace (pBody, '[RequestorFullName]', 			@RequestorFullName);
	set pBody			=	replace (pBody, '[SenderEmail]', 				@SenderEmail);
	set pBody			=	replace (pBody, '[SenderFullName]', 			@SenderFullName);
	set pBody			=	replace (pBody, '[ShipTo]', 					@ShipTo);
	set pBody			=	replace (pBody, '[Source]', 					@Source);
	set pBody			=	replace (pBody, '[Table]', 						@Table);
	set pBody			=	replace (pBody, '[TimeStamp]', 					@TimeStamp);
	set pBody			=	replace (pBody, '[URL]', 						@URL);
	set pBody			=	replace (pBody, '[VendorCount]',	 			@VendorCount);
	set pBody			=	replace (pBody, '[VendorMessage]', 				@VendorMessage);
	set pBody			=	replace (pBody, '[VendorName]', 				@VendorName);
	set pBody			=	replace (pBody, '[VendorNo]', 					@VendorNo);
	set pBody			=	replace (pBody, '[Warehouse]', 					@Warehouse);


/*	
set @S = 'Test';
set @B = 'Body';
Call _x_EmailGetTemplateValues('06bc5af7-935d-45ce-b0f7-9beda57d036f', 'Invoice', 3950963, '[ApprovedBy]■Johnny Walker', 36, @S, @B);
select @S, @B;
*/


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_EmailGetTemplateValues1` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_EmailGetTemplateValues1`(in pUserId char(36), in pDocType varchar(10), in pDocKey varchar(100), in pValues text, in pTemplate int,  inout pSubject text, inout pBody text)
ThisProc:
	BEGIN	

/*
set @S = 'Test';
set @B = 'This is an example for Birhanu';
Call _x_EmailGetTemplateValues1('06bc5af7-935d-45ce-b0f7-9beda57d036f', 'Invoice', 3950963, '[ApprovedBy]■Johnny Walker■[Table]■<TABLE><H></H></TABLE>', 32, @S, @B);		-- chr(254)
select @S, @B;
*/
	declare pMessageBody  text default null;
	-- pValues follows the same rules as _x_AdvancedSearchFieldValuesDependency
	--
	-- [Token]■Value■[Token]■Value■[Token]■Value■[Token]■Value■[Token]■Value
	--



	-- Get the template values
	select	Subject, Body
	into	pSubject, pMessageBody
	from	EmailTemplates 
	where	EmailTemplateType = pTemplate;
	if ROW_COUNT() = 0 then  
		leave ThisProc;
	end if;

	set @ClientId 					= null;
	set @DATEFORMAT					= '%M %d, %Y';
	set @DATETIMEFORMAT 			= '%M %d, %Y at %h:%i %p';

	-- Set up the default values from the pValues values passed
	set @ApprovedBy					= _x_AdvancedSearchFieldValuesDependency(pValues, '[ApprovedBy]');			-- Birhanu
	set @ApprovedOn					= _x_AdvancedSearchFieldValuesDependency(pValues, '[ApprovedOn]');
	set @AssignedDate				= _x_AdvancedSearchFieldValuesDependency(pValues, '[AssignedDate]');
	set @Careof						= _x_AdvancedSearchFieldValuesDependency(pValues, '[Careof]');				-- Birhanu
	set @Client						= _x_AdvancedSearchFieldValuesDependency(pValues, '[Client]');
	set @ClientFileList				= _x_AdvancedSearchFieldValuesDependency(pValues, '[ClientFileList]');
	set @ClientInvoiceCountList		= _x_AdvancedSearchFieldValuesDependency(pValues, '[ClientInvoiceCountList]');
	set @Comment					= _x_AdvancedSearchFieldValuesDependency(pValues, '[Comment]');
	set @ContactPerson				= _x_AdvancedSearchFieldValuesDependency(pValues, '[ContactPerson]');
	set @Contactus					= _x_AdvancedSearchFieldValuesDependency(pValues, '[Contactus]');
	set @CreditCardNo				= _x_AdvancedSearchFieldValuesDependency(pValues, '[CreditCardNo]');
	set @CVC2						= _x_AdvancedSearchFieldValuesDependency(pValues, '[CVC2]');
	set @Date						= _x_AdvancedSearchFieldValuesDependency(pValues, '[Date]');
	set @DelegatedDate				= _x_AdvancedSearchFieldValuesDependency(pValues, '[DelegatedDate]');
	set @DiscountRequestedAmount	= _x_AdvancedSearchFieldValuesDependency(pValues, '[DiscountRequestedAmount]');
	set @DiscountTotalSum			= _x_AdvancedSearchFieldValuesDependency(pValues, '[DiscountTotalSum]');
	set @ErrorMessage				= _x_AdvancedSearchFieldValuesDependency(pValues, '[ErrorMessage]');
	set @ESCALATEDFROMFULLNAME		= _x_AdvancedSearchFieldValuesDependency(pValues, '[ESCALATEDFROMFULLNAME]');
	set @EstOrderDate				= _x_AdvancedSearchFieldValuesDependency(pValues, '[EstOrderDate]');
	set @Expiration					= _x_AdvancedSearchFieldValuesDependency(pValues, '[Expiration]');
	set @FileName					= _x_AdvancedSearchFieldValuesDependency(pValues, '[FileName]');
	set @FullName					= _x_AdvancedSearchFieldValuesDependency(pValues, '[FullName]');
	set @InternalNote				= _x_AdvancedSearchFieldValuesDependency(pValues, '[InternalNote]');			
	set @InvoiceCount				= _x_AdvancedSearchFieldValuesDependency(pValues, '[InvoiceCount]');
	set @InvoiceDate				= _x_AdvancedSearchFieldValuesDependency(pValues, '[InvoiceDate]');
	set @InvoiceNo					= _x_AdvancedSearchFieldValuesDependency(pValues, '[InvoiceNo]');
	set @InvoiceNumber				= _x_AdvancedSearchFieldValuesDependency(pValues, '[InvoiceNumber]');
	set @InvoiceTotal				= _x_AdvancedSearchFieldValuesDependency(pValues, '[InvoiceTotal]');
	set @link						= _x_AdvancedSearchFieldValuesDependency(pValues, '[link]');
	set @NameF						= _x_AdvancedSearchFieldValuesDependency(pValues, '[NameF]');
	set @NameL						= _x_AdvancedSearchFieldValuesDependency(pValues, '[NameL]');
	set @NewPassword				= _x_AdvancedSearchFieldValuesDependency(pValues, '[NewPassword]');
	set @NoOfInvoices				= _x_AdvancedSearchFieldValuesDependency(pValues, '[NoOfInvoices]');
	set @OrderAmount				= _x_AdvancedSearchFieldValuesDependency(pValues, '[OrderAmount]');
	set @OrderTotal					= _x_AdvancedSearchFieldValuesDependency(pValues, '[OrderTotal]');
	set @PaymentMethod				= _x_AdvancedSearchFieldValuesDependency(pValues, '[PaymentMethod]');
	set @POHeaderId					= _x_AdvancedSearchFieldValuesDependency(pValues, '[POHeaderId]');
	set @PONumber					= _x_AdvancedSearchFieldValuesDependency(pValues, '[PONumber]');
	set @PrefundedAccountBalance	= _x_AdvancedSearchFieldValuesDependency(pValues, '[PrefundedAccountBalance]');
	set @Reason						= _x_AdvancedSearchFieldValuesDependency(pValues, '[Reason]');
	set @RequesterName				= _x_AdvancedSearchFieldValuesDependency(pValues, '[RequesterName]');
	set @RequestorFullName			= _x_AdvancedSearchFieldValuesDependency(pValues, '[RequestorFullName]');
	set @SenderEmail				= _x_AdvancedSearchFieldValuesDependency(pValues, '[SenderEmail]');
	set @SenderFullName				= _x_AdvancedSearchFieldValuesDependency(pValues, '[SenderFullName]');
	set @ShipTo						= _x_AdvancedSearchFieldValuesDependency(pValues, '[ShipTo]');
	set @Source						= _x_AdvancedSearchFieldValuesDependency(pValues, '[Source]');
	set @Table						= _x_AdvancedSearchFieldValuesDependency(pValues, '[Table]');
	set @TimeStamp					= _x_AdvancedSearchFieldValuesDependency(pValues, '[TimeStamp]');			-- Birhanu
	set @URL						= _x_AdvancedSearchFieldValuesDependency(pValues, '[URL]');					-- Birhanu
	set @VendorCount				= _x_AdvancedSearchFieldValuesDependency(pValues, '[VendorCount]');
	set @VendorMessage				= _x_AdvancedSearchFieldValuesDependency(pValues, '[VendorMessage]');
	set @VendorName					= _x_AdvancedSearchFieldValuesDependency(pValues, '[VendorName]');
	set @VendorNo					= _x_AdvancedSearchFieldValuesDependency(pValues, '[VendorNo]');
	set @Warehouse					= _x_AdvancedSearchFieldValuesDependency(pValues, '[Warehouse]');

	-- Get the User Passed info
	select	FirstName, LastName, concat(ltrim(FirstName), ' ', ltrim(LastName)), ClientId
	into 	@NameF, @NameL, @FullName, @ClientId
	from 	User 
	where 	UserId = pUserId;
	set @CareOf = @FullName;



	-- Using the pDocType and pDoyKey, use logic to fill in the values requesed for those variables
	if pDocType = 'Invoice' THEN
		select	i.ClientId, ltrim(i.Comment), i.DiscountRequestedAmount, i.PONumber, date(i.InvoiceDate), i.InvoiceNo, i.InvoiceNo, i.InvoiceTotal, i.AprovedDate,
				ltrim(c.CustomerName),
				ltrim(v.VendorName), ltrim(v.VendorNo)
		into	@ClientId, @Comment, @DiscountRequestedAmount, @PONumber, @InvoiceDate, @InvoiceNo, @InvoiceNumber, @InvoiceTotal, @ApprovedOn,
				@Client, 
				@VendorName, @VendorNo
		from 	Invoice i
				inner join 	Client c	on c.ClientId = i.ClientId
				left join 	Vendor v 	on v.VendorId = i.Vendorid
                                  
		where	i.InvoiceId = pDocKey;
	end if;

	if pDocType = 'PurchaseRequest' THEN
		set @CreditCardNo = '????';
	end if;
                    

	Call _x_SetClientTimeZone(@CliendId);


	-- Prepare all Keyword tokens to replace in the Template subject and Body
	set @ApprovedBy					= ifnull(nullif(@ApprovedBy, ''), 'n/a');
	set @ApprovedOn					= ifnull(nullif(DATE_FORMAT(convert_tz(@ApprovedOn, 'GMT', @@session.time_zone), @DATETIMEFORMAT), ''), 'n/a');
	set @AssignedDate				= ifnull(nullif(DATE_FORMAT(convert_tz(@AssignedDate, 'GMT', @@session.time_zone), @DATETIMEFORMAT), ''), 'n/a');
	set @Careof						= ifnull(nullif(@Careof, ''), 'n/a');
	set @Client						= ifnull(nullif(@Client, ''), 'n/a');
	set @ClientFileList				= ifnull(nullif(@ClientFileList, ''), 'n/a');
	set @ClientInvoiceCountList		= ifnull(nullif(@ClientInvoiceCountList, ''), 'n/a');
	set @Comment					= ifnull(nullif(@Comment, ''), 'n/a');
	set @ContactPerson				= ifnull(nullif(@ContactPerson, ''), 'n/a');
	set @Contactus					= ifnull(nullif(@Contactus, ''), 'n/a');
	set @CreditCardNo				= ifnull(nullif(@CreditCardNo, ''), 'n/a');
	set @CVC2						= ifnull(nullif(@CVC2, ''), 'n/a');
	set @Date						= ifnull(nullif(DATE_FORMAT(Now(), @DATEFORMAT), ''), 'n/a');
	set @DelegatedDate				= ifnull(nullif(DATE_FORMAT(convert_tz(@DelegatedDate, 'GMT', @@session.time_zone), @DATETIMEFORMAT), ''), 'n/a');
	set @DiscountRequestedAmount	= ifnull(nullif(format(@DiscountRequestedAmount, 2), ''), 'n/a');
	set @DiscountTotalSum			= ifnull(nullif(format(@DiscountTotalSum, 2), ''), 'n/a');
	set @ErrorMessage				= ifnull(nullif(@ErrorMessage, ''), 'n/a');
	set @ESCALATEDFROMFULLNAME		= ifnull(nullif(@ESCALATEDFROMFULLNAME, ''), 'n/a');
	set @EstOrderDate				= ifnull(nullif(DATE_FORMAT(@EstOrderDate, @DATEFORMAT), ''), 'n/a');
	set @Expiration					= ifnull(nullif(@Expiration, ''), 'n/a');
	set @FileName					= ifnull(nullif(@FileName, ''), 'n/a');
	set @FullName					= ifnull(nullif(@FullName, ''), 'n/a');
	set @InternalNote				= ifnull(nullif(@InternalNote, ''), 'n/a');
	set @InvoiceCount				= ifnull(nullif(@InvoiceCount, ''), 'n/a');
	set @InvoiceDate				= ifnull(nullif(format(@InvoiceDate, @DATEFORMAT), ''), 'n/a');
	set @InvoiceNo					= ifnull(nullif(@InvoiceNo, ''), 'n/a');
	set @InvoiceNumber				= ifnull(nullif(@InvoiceNumber, ''), 'n/a');
	set @InvoiceTotal				= ifnull(nullif(format(@InvoiceTotal, 2), ''), 'n/a');
	set @link						= ifnull(nullif(@link, ''), 'n/a');
	set @Message					= ifnull(nullif(@Message, ''), 'n/a');
	set @NameF						= ifnull(nullif(@NameF, ''), 'n/a');
	set @NameL						= ifnull(nullif(@NameL, ''), 'n/a');
	set @NewPassword				= ifnull(nullif(@NewPassword, ''), 'n/a');
	set @NoOfInvoices				= ifnull(nullif(@NoOfInvoices, ''), 'n/a');
	set @OrderAmount				= ifnull(nullif(format(@OrderAmount, 2), ''), 'n/a');
	set @OrderTotal					= ifnull(nullif(@OrderTotal, ''), 'n/a');
	set @PaymentMethod				= ifnull(nullif(@PaymentMethod, ''), 'n/a');
	set @POHeaderId					= ifnull(nullif(@POHeaderId, ''), 'n/a');
	set @PONumber					= ifnull(nullif(@PONumber, ''), 'n/a');
	set @PrefundedAccountBalance	= ifnull(nullif(format(@PrefundedAccountBalance, 2), ''), 'n/a');
	set @Reason						= ifnull(nullif(@Reason, ''), 'n/a');
	set @RequesterName				= ifnull(nullif(@RequesterName, ''), 'n/a');
	set @RequestorFullName			= ifnull(nullif(@RequestorFullName, ''), 'n/a');
	set @SenderEmail				= ifnull(nullif(@SenderEmail, ''), 'n/a');
	set @SenderFullName				= ifnull(nullif(@SenderFullName, ''), 'n/a');
	set @ShipTo						= ifnull(nullif(@ShipTo, ''), 'n/a');
	set @Source						= ifnull(nullif(@Source, ''), 'n/a');
	set @Table						= ifnull(nullif(@Table, ''), 'n/a');
	set @TimeStamp					= ifnull(nullif(@TimeStamp, ''), 'n/a');
	set @URL						= ifnull(nullif(@URL, ''), 'n/a');
	set @VendorCount				= ifnull(nullif(@VendorCount, ''), 'n/a');
	set @VendorMessage				= ifnull(nullif(@VendorMessage, ''), 'n/a');
	set @VendorName					= ifnull(nullif(@VendorName, ''), 'n/a');
	set @VendorNo					= ifnull(nullif(@VendorNo, ''), 'n/a');
	set @Warehouse					= ifnull(nullif(@Warehouse, ''), 'n/a');

	-- Replace all toekns in the subject
	set pSubject		=	replace (pSubject, '[ActualVendorName]', 		@VendorName);
	set pSubject		=	replace (pSubject, '[ApprovedBy]', 				@ApprovedBy);
	set pSubject		=	replace (pSubject, '[ApprovedOn]', 				@ApprovedOn);
	set pSubject		=	replace (pSubject, '[AssignedDate]', 			@AssignedDate);
	set pSubject		=	replace (pSubject, '[Care of]', 				@Careof);
	set pSubject		=	replace (pSubject, '[Client]', 					@Client);
	set pSubject		=	replace (pSubject, '[ClientFileList]', 			@ClientFileList);
	set pSubject		=	replace (pSubject, '[ClientInvoiceCountList]',	@ClientInvoiceCountList);
	set pSubject		=	replace (pSubject, '[Comment]', 				@Comment);
	set pSubject		=	replace (pSubject, '[ContactPerson]', 			@ContactPerson);
	set pSubject		=	replace (pSubject, '[Contactus]', 				@Contactus);
	set pSubject		=	replace (pSubject, '[CreditCardNo]', 			@CreditCardNo);
	set pSubject		=	replace (pSubject, '[CVC2]', 					@CVC2);
	set pSubject		=	replace (pSubject, '[Date]', 					@Date);
	set pSubject		=	replace (pSubject, '[DelegatedDate]', 			@DelegatedDate);
	set pSubject		=	replace (pSubject, '[DiscountRequestedAmount]', @DiscountRequestedAmount);
	set pSubject		=	replace (pSubject, '[DiscountTotalSum]', 		@DiscountTotalSum);
	set pSubject		=	replace (pSubject, '[ErrorMessage]', 			@ErrorMessage);
	set pSubject		=	replace (pSubject, '[ESCALATEDFROMFULLNAME]', 	@ESCALATEDFROMFULLNAME);
	set pSubject		=	replace (pSubject, '[EstOrderDate]', 			@EstOrderDate);
	set pSubject		=	replace (pSubject, '[Expiration]', 				@Expiration);
	set pSubject		=	replace (pSubject, '[FileName]', 				@FileName);
	set pSubject		=	replace (pSubject, '[FullName]', 				@FullName);
	set pSubject		=	replace (pSubject, '[InternalNote]', 			@InternalNote);
	set pSubject		=	replace (pSubject, '[InvoiceCount]', 			@InvoiceCount);
	set pSubject		=	replace (pSubject, '[InvoiceDate]', 			@InvoiceDate);
	set pSubject		=	replace (pSubject, '[InvoiceNo]', 				@InvoiceNo);
	set pSubject		=	replace (pSubject, '[InvoiceNumber]', 			@InvoiceNumber);
	set pSubject		=	replace (pSubject, '[InvoiceTotal]', 			@InvoiceTotal);
	set pSubject		=	replace (pSubject, '[link]', 					@link);
	set pSubject		=	replace (pSubject, '[Message]', 				pSubject);
	set pSubject		=	replace (pSubject, '[NameF]', 					@NameF);
	set pSubject		=	replace (pSubject, '[NameL]', 					@NameL);
	set pSubject		=	replace (pSubject, '[NewPassword]',	 			@NewPassword);
	set pSubject		=	replace (pSubject, '[NoOfInvoices]', 			@NoOfInvoices);
	set pSubject		=	replace (pSubject, '[OrderAmount]', 			@OrderAmount);
	set pSubject		=	replace (pSubject, '[OrderTotal]', 				@OrderTotal);
	set pSubject		=	replace (pSubject, '[PaymentMethod]', 			@PaymentMethod);
	set pSubject		=	replace (pSubject, '[POHeaderId]', 				@POHeaderId);
	set pSubject		=	replace (pSubject, '[PONumber]', 				@PONumber);
	set pSubject		=	replace (pSubject, '[PrefundedAccountBalance]', @PrefundedAccountBalance);
	set pSubject		=	replace (pSubject, '[Reason]', 					@Reason);
	set pSubject		=	replace (pSubject, '[RequesterName]', 			@RequesterName);
	set pSubject		=	replace (pSubject, '[RequestorFullName]', 		@RequestorFullName);
	set pSubject		=	replace (pSubject, '[SenderEmail]', 			@SenderEmail);
	set pSubject		=	replace (pSubject, '[SenderFullName]', 			@SenderFullName);
	set pSubject		=	replace (pSubject, '[ShipTo]', 					@ShipTo);
	set pSubject		=	replace (pSubject, '[Source]', 					@Source);
	set pSubject		=	replace (pSubject, '[Table]', 					@Table);
	set pSubject		=	replace (pSubject, '[TimeStamp]', 				@TimeStamp);
	set pSubject		=	replace (pSubject, '[URL]', 					@URL);
	set pSubject		=	replace (pSubject, '[VendorCount]', 			@VendorCount);
	set pSubject		=	replace (pSubject, '[VendorMessage]', 			@VendorMessage);
	set pSubject		=	replace (pSubject, '[VendorName]', 				@VendorName);
	set pSubject		=	replace (pSubject, '[VendorNo]', 				@VendorNo);
	set pSubject		=	replace (pSubject, '[Warehouse]', 				@Warehouse);

	-- Replace all tokens in the Body
	set pMessageBody			=	replace (pMessageBody, '[ActualVendorName]', 			@VendorName);
	set pMessageBody			=	replace (pMessageBody, '[ApprovedBy]', 				@ApprovedBy);
	set pMessageBody			=	replace (pMessageBody, '[ApprovedOn]', 				@ApprovedOn);
	set pMessageBody			=	replace (pMessageBody, '[AssignedDate]', 				@AssignedDate);
	set pMessageBody			=	replace (pMessageBody, '[Care of]', 					@Careof);
	set pMessageBody			=	replace (pMessageBody, '[Client]', 					@Client);
	set pMessageBody			=	replace (pMessageBody, '[ClientFileList]', 			@ClientFileList);
	set pMessageBody			=	replace (pMessageBody, '[ClientInvoiceCountList]',		@ClientInvoiceCountList);
	set pMessageBody			=	replace (pMessageBody, '[Comment]', 					@Comment);
	set pMessageBody			=	replace (pMessageBody, '[ContactPerson]', 				@ContactPerson);
	set pMessageBody			=	replace (pMessageBody, '[Contactus]', 					@Contactus);
	set pMessageBody			=	replace (pMessageBody, '[CreditCardNo]', 				@CreditCardNo);
	set pMessageBody			=	replace (pMessageBody, '[CVC2]', 						@CVC2);
	set pMessageBody			=	replace (pMessageBody, '[Date]', 						@Date);
	set pMessageBody			=	replace (pMessageBody, '[DelegatedDate]', 				@DelegatedDate);
	set pMessageBody			=	replace (pMessageBody, '[DiscountRequestedAmount]', 	@DiscountRequestedAmount);
	set pMessageBody			=	replace (pMessageBody, '[DiscountTotalSum]', 			@DiscountTotalSum);
	set pMessageBody			=	replace (pMessageBody, '[ErrorMessage]', 				@ErrorMessage);
	set pMessageBody			=	replace (pMessageBody, '[ESCALATEDFROMFULLNAME]', 		@ESCALATEDFROMFULLNAME);
	set pMessageBody			=	replace (pMessageBody, '[EstOrderDate]', 				@EstOrderDate);
	set pMessageBody			=	replace (pMessageBody, '[Expiration]', 				@Expiration);
	set pMessageBody			=	replace (pMessageBody, '[FileName]', 					@FileName);
	set pMessageBody			=	replace (pMessageBody, '[FullName]', 					@FullName);
	set pMessageBody			=	replace (pMessageBody, '[InternalNote]',	 			@InternalNote);
	set pMessageBody			=	replace (pMessageBody, '[InvoiceCount]', 				@InvoiceCount);
	set pMessageBody			=	replace (pMessageBody, '[InvoiceDate]', 				@InvoiceDate);
	set pMessageBody			=	replace (pMessageBody, '[InvoiceNo]', 					@InvoiceNo);
	set pMessageBody			=	replace (pMessageBody, '[InvoiceNumber]', 				@InvoiceNumber);
	set pMessageBody			=	replace (pMessageBody, '[InvoiceTotal]', 				@InvoiceTotal);
	set pMessageBody			=	replace (pMessageBody, '[link]', 						@link);
	set pMessageBody			=	replace (pMessageBody, '[Message]', 					pBody);
	set pMessageBody			=	replace (pMessageBody, '[NameF]', 						@NameF);
	set pMessageBody			=	replace (pMessageBody, '[NameL]', 						@NameL);
	set pMessageBody			=	replace (pMessageBody, '[NewPassword]',	 			@NewPassword);
	set pMessageBody			=	replace (pMessageBody, '[NoOfInvoices]', 				@NoOfInvoices);
	set pMessageBody			=	replace (pMessageBody, '[OrderAmount]', 				@OrderAmount);
	set pMessageBody			=	replace (pMessageBody, '[OrderTotal]', 				@OrderTotal);
	set pMessageBody			=	replace (pMessageBody, '[PaymentMethod]', 				@PaymentMethod);
	set pMessageBody			=	replace (pMessageBody, '[POHeaderId]', 				@POHeaderId);
	set pMessageBody			=	replace (pMessageBody, '[PONumber]', 					@PONumber);
	set pMessageBody			=	replace (pMessageBody, '[PrefundedAccountBalance]', 	@PrefundedAccountBalance);
	set pMessageBody			=	replace (pMessageBody, '[Reason]', 					@Reason);
	set pMessageBody			=	replace (pMessageBody, '[RequesterName]', 				@RequesterName);
	set pMessageBody			=	replace (pMessageBody, '[RequestorFullName]', 			@RequestorFullName);
	set pMessageBody			=	replace (pMessageBody, '[SenderEmail]', 				@SenderEmail);
	set pMessageBody			=	replace (pMessageBody, '[SenderFullName]', 			@SenderFullName);
	set pMessageBody			=	replace (pMessageBody, '[ShipTo]', 					@ShipTo);
	set pMessageBody			=	replace (pMessageBody, '[Source]', 					@Source);
	set pMessageBody			=	replace (pMessageBody, '[Table]', 						@Table);
	set pMessageBody			=	replace (pMessageBody, '[TimeStamp]', 					@TimeStamp);
	set pMessageBody			=	replace (pMessageBody, '[URL]', 						@URL);
	set pMessageBody			=	replace (pMessageBody, '[VendorCount]',	 			@VendorCount);
	set pMessageBody			=	replace (pMessageBody, '[VendorMessage]', 				@VendorMessage);
	set pMessageBody			=	replace (pMessageBody, '[VendorName]', 				@VendorName);
	set pMessageBody			=	replace (pMessageBody, '[VendorNo]', 					@VendorNo);
	set pMessageBody			=	replace (pMessageBody, '[Warehouse]', 					@Warehouse);


	-- Set return value
	set pBody = pMessageBody;

/*	
set @S = 'Test';
set @B = 'This is an example for Birhanu';
Call _x_EmailGetTemplateValues1('06bc5af7-935d-45ce-b0f7-9beda57d036f', 'Invoice', 3950963, '[ApprovedBy]■Johnny Walker■[Table]■<TABLE><H></H></TABLE>', 32, @S, @B);		-- chr(254)
select @S, @B;
*/


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_FieldGLData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_FieldGLData`(IN `pClientId` int)
BEGIN

  SELECT DISTINCT
    ClientInvoiceAttribute.IsCritical,
    ClientInvoiceAttribute.IsRequred AS IsRequired,
    COALESCE(InvoiceAttribute.EditorType, IF(InvoiceAttribute.InvoiceAttributeName LIKE 'Company%', 2, 0)) AS EditorType,
    CASE WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'Gl%' THEN 'GLCode' WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'Department%' THEN 'Department' WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'Project%' THEN 'Project' WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'SubProject%' THEN 'SubProject' WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'Vendor%' THEN 'Vendor' WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'Company%' THEN 'Company' WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'Customer%' THEN 'Customer' WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'Org%' THEN 'Org' WHEN InvoiceAttribute.InvoiceAttributeName = 'AccountingVariable1' THEN 'AccountingV1' WHEN InvoiceAttribute.InvoiceAttributeName = 'AccountingVariable2' THEN 'AccountingV2' WHEN InvoiceAttribute.InvoiceAttributeName = 'AccountingVariable3' THEN 'AccountingV3' WHEN InvoiceAttribute.InvoiceAttributeName = 'AccountingVariable4' THEN 'AccountingV4' ELSE InvoiceAttribute.InvoiceAttributeName END AS AttributeName,
    COALESCE(ClientInvoiceAttribute.DisplayName, InvoiceAttribute.DefaultDisplayName, InvoiceAttribute.InvoiceAttributeName) AS DisplayName

  FROM ClientInvoiceAttribute
    INNER JOIN InvoiceAttribute
      ON ClientInvoiceAttribute.InvoiceAttributeID = InvoiceAttribute.InvoiceAttributeID
  WHERE ClientInvoiceAttribute.ClientID = pClientId
  AND ClientInvoiceAttribute.Task = 5
  AND ClientInvoiceAttribute.IsReadonly = 0
  ORDER BY ClientInvoiceAttribute.OrderNo;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_FieldInvoice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_FieldInvoice`(
	IN `pInvoiceId` int,
	IN `pClientId` int,
	IN `pUserId` varchar(36)
)
BEGIN

		SET @InvoiceType = NULL;
		set @ApprovalStatusId = 0;
		SET @TaskId = 0;
		set @InMyQueue = 0;
		set @isAdmin = 0;
		set @isInvoiceUpdate = 0;

		if exists (
					SELECT	1
					FROM	ClientUserRoles cur
							INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
							INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
					WHERE	cur.UserId = pUserId
							and crf.FunctionKey = 'InvoiceUpdate'
							and Access = 1
					) then
			set @isInvoiceUpdate = 1;
		end if;

	    IF EXISTS (SELECT	1
			        FROM	ClientUserRoles cur
			          		INNER JOIN ClientRoles cr		ON	cr.RoleId = cur.RoleId
			            										AND cr.isAdmin = 1
			        WHERE	cur.UserId = pUserId) THEN
			set @isAdmin = 1;
		end if;
		
		SELECT
				   CASE 	WHEN InvoiceType LIKE '%Invoice%'	THEN 'Invoice' 
							WHEN InvoiceType LIKE '%Archive%'	THEN 'Invoice' 
							WHEN InvoiceType = NULL 			THEN 'Invoice' 
							ELSE InvoiceType END AS InvoiceType,
				   CASE		WHEN ApprovalStatusId = 1 AND IsPOInvoice = 1 THEN 6 
							WHEN ApprovalStatusId = 1 AND IsPOInvoice = 0 THEN 7 
							WHEN ApprovalStatusId = 3 AND IsPOInvoice = 1 THEN 0 
							WHEN ApprovalStatusId = 3 AND IsPOInvoice = 0 THEN 1 
							WHEN ApprovalStatusId = 4 AND IsPOInvoice = 1 THEN 0 
							WHEN ApprovalStatusId = 4 AND IsPOInvoice = 0 THEN 1 
							WHEN ApprovalStatusId = 5 AND IsPOInvoice = 1 THEN 0 
							WHEN ApprovalStatusId = 5 AND IsPOInvoice = 0 THEN 1 
							WHEN ApprovalStatusId = 6 AND IsPOInvoice = 1 THEN 2 
							WHEN ApprovalStatusId = 6 AND IsPOInvoice = 0 THEN 3 
							WHEN ApprovalStatusId > 6 AND IsPOInvoice = 1 THEN 0 
							WHEN ApprovalStatusId > 6 AND IsPOInvoice = 0 THEN 1 
							ELSE 0 END AS Task,
					ApprovalStatusId
		INTO 	@InvoiceType, @TaskId, @ApprovalStatusId
		FROM	Invoice
		WHERE	InvoiceId = pInvoiceId
		AND	ClientId = pClientId
		LIMIT 1;
		
		IF EXISTS (select 	1
					FROM	Invoice i
							INNER JOIN InvoiceStatus iStatus			ON iStatus.StateId = i.ApprovalStatusId
							left join Batch b 							on b.ID = i.BatchID
							left join Vendor v 							on v.ClientId = i.ClientId 
																			and v.VendorId = i.VendorId
							left join UserInvoiceAssignment ass			on ass.InvoiceId = i.InvoiceId
																			and ass.UserId = pUserId
							left join UserReassignmentHistory reassH	on reassH.TargetUserId = pUserId
																		and Now() between reassH.DateFrom and reassH.DateTo
							left join UserInvoiceAssignment reass		on reass.InvoiceId = i.InvoiceId 
																			and reass.UserId = reassH.SourceUserId
							WHERE i.ClientId = pClientId
									AND i.IsDeleted 			= 0
									and i.ApprovalStatusId		= 3
									and i.InvoiceType 			<> 'Archive'
									and i.InvoiceID				= pInvoiceId
									and (
											ass.InvoiceId is not null
											or reass.InvoiceId is not null
										)
					) THEN
        	set @InMyQueue = 1;    
		elseif @ApprovalStatusId = 6 THEN
			if exists (SELECT 1 from _x_UserParameters up	WHERE up.UserId = pUserId and up.IsExceptionHandler = 1) THEN
				set @InMyQueue = 1;
			end if;
		end if;
                      

/*
1	Captured
2	Verified
3	InApproval
4	Approved
5	Accepted
6	Exception
7	Paid
8	Rejected
9	Failed
10	PaymentInitiated
11	FundRecieved
12	PaymentApproved
13	EFTSynced
99	POException;
*/		
		SELECT
			    ClientInvoiceAttribute.Task,
			    ClientInvoiceAttribute.InvoiceType,
			    ClientInvoiceAttribute.IsCritical,
			    ClientInvoiceAttribute.IsRequred AS IsRequired,

				case 	When @InMyQueue = 1 								then ClientInvoiceAttribute.IsReadonly
						When @isAdmin = 1 					 				then 
							case	when @ApprovalStatusId in (1,2,3,6,99) 	then ClientInvoiceAttribute.IsReadonly
									else 1 end
						When @isInvoiceUpdate = 1			 				then 
							case	when @ApprovalStatusId in (1,2,3,6,99) 	then ClientInvoiceAttribute.IsReadonly
									else 1 end
						else 1 end as IsReadonly,
			    CASE 
						WHEN InvoiceAttribute.InvoiceAttributeName LIKE '%Date%' 		THEN 15 
						WHEN ISNULL(InvoiceAttribute.EditorType) 						THEN 0 
						WHEN InvoiceAttribute.InvoiceAttributeName = 'VendorLocationId' THEN 16 
						ELSE InvoiceAttribute.EditorType END AS EditorType,
						
				CASE 
						WHEN InvoiceAttribute.InvoiceAttributeName = 'GLCodeId' 		THEN 'InvoiceNo' 
						ELSE InvoiceAttribute.InvoiceAttributeName 						END AS AttributeName,
			
				CASE	WHEN ClientInvoiceAttribute.DisplayName = '' 					THEN IF(InvoiceAttribute.DefaultDisplayName != '', InvoiceAttribute.DefaultDisplayName, InvoiceAttribute.InvoiceAttributeName) 
						ELSE COALESCE(ClientInvoiceAttribute.DisplayName, InvoiceAttribute.DefaultDisplayName, InvoiceAttribute.InvoiceAttributeName) END AS DisplayName,
				REPLACE(ClientInvoiceAttribute.DisplayFormat, 'MMMM yyyy', 'mmyyyy') AS DisplayFormat,
				CASE	WHEN InvoiceAttribute.InvoiceAttributeName = 'InvoiceNo' 		THEN 0 
						WHEN InvoiceAttribute.InvoiceAttributeName = 'Comment' 			THEN (ClientInvoiceAttribute.OrderNo + 10) 
						ELSE ClientInvoiceAttribute.OrderNo END AS OrderNo
		
		FROM 	ClientInvoiceAttribute
				INNER JOIN InvoiceAttribute				ON ClientInvoiceAttribute.InvoiceAttributeID = InvoiceAttribute.InvoiceAttributeID
		WHERE 	ClientInvoiceAttribute.ClientID = pClientId
				AND ClientInvoiceAttribute.Task = @TaskId
		/*AND ClientInvoiceAttribute.InvoiceType = @InvoiceType*/
		GROUP BY (AttributeName)
		ORDER BY OrderNo, EditorType, DisplayName;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_FieldLineItem` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_FieldLineItem`(IN `pClientId` int,
IN `pTask` tinyint)
BEGIN

  IF (pTask = 8) THEN

    SELECT DISTINCT
      CASE WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'Department%' THEN 'DepartmentId' ELSE InvoiceAttribute.InvoiceAttributeName END AS AttributeName,
      COALESCE(ClientInvoiceAttribute.DisplayName, InvoiceAttribute.DefaultDisplayName, InvoiceAttribute.InvoiceAttributeName) AS DisplayName

    FROM ClientInvoiceAttribute
      INNER JOIN InvoiceAttribute
        ON ClientInvoiceAttribute.InvoiceAttributeID = InvoiceAttribute.InvoiceAttributeID
    WHERE ClientInvoiceAttribute.ClientID = pClientId
    AND ClientInvoiceAttribute.Task = pTask
    AND ClientInvoiceAttribute.IsHiddenByDefault IS NULL
    ORDER BY ClientInvoiceAttribute.OrderNo ASC;

  ELSE

    SELECT DISTINCT
      CASE WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'Department%' THEN 'DepartmentId' WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'ItemNo%' THEN 'ItemNumber' WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'UnitPrice%' THEN 'UnitCost' WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'TotalAmount%' THEN 'Amount' WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'ProductId%' THEN 'VendorCatNumber' WHEN InvoiceAttribute.InvoiceAttributeName LIKE 'DeliveryNumber%' THEN 'PRNumber' ELSE InvoiceAttribute.InvoiceAttributeName END AS AttributeName,
      COALESCE(ClientInvoiceAttribute.DisplayName, InvoiceAttribute.DefaultDisplayName, InvoiceAttribute.InvoiceAttributeName) AS DisplayName

    FROM ClientInvoiceAttribute
      INNER JOIN InvoiceAttribute
        ON ClientInvoiceAttribute.InvoiceAttributeID = InvoiceAttribute.InvoiceAttributeID
    WHERE ClientInvoiceAttribute.ClientID = pClientId
    AND ClientInvoiceAttribute.Task = pTask
    AND ClientInvoiceAttribute.IsHiddenByDefault IS NULL
    ORDER BY ClientInvoiceAttribute.OrderNo ASC;

  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_FieldPopulate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_FieldPopulate`(
	IN `pType` varchar(20),
	IN `pClientId` int,
	IN `pValue` varchar(1000),
	IN `pKeyword` varchar(50)
)
BEGIN
	declare dLimitResults int default 25;

	set @VendorNoAfterName = 1;

-- 	if Regexp_Like(pValue, '^[0-9]+$', 'mi') then
-- 		set pValue = nullif(pValue, 0);
-- 	end if;
-- 
	set pKeyword = ifnull(pKeyword, '');
	set @OriginalKeyword = pKeyword;
	CALL _x_StringToRegEx(pKeyword);


	IF (pType = 'vendor') THEN
		SELECT 	VendorId 																							AS TypeId,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Vendor.VendorName, ""), " [", IFNULL(Vendor.VendorNo, ""), "]")
					else
						concat("[", IFNULL(Vendor.VendorNo, ""), "] ", IFNULL(Vendor.VendorName, "")) end 			as TypeName
		FROM	Vendor
		WHERE	ClientId = pClientId
				and IsActive = 1
				and Regexp_Like(concat(ifnull(VendorNo, ''), '', ifnull(VendorName, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;
	ELSEIF (pType = 'glcode') THEN 	-- Steven
		set dLimitResults = dLimitResults * 2;
		set @Mask = '%';
		set @MaskRequired = null;
		if pValue is not null then
			set @Mask = null;
			call _x_GetClientParam(pClientId, 'GLCodeMaskRequired', @MaskRequired);
			call _x_GetGLMask(pValue, @Mask);
			set @MaskRequired = ifnull(@MaskRequired, 'No');
		end if;
		set @MaskRequired = ifnull(@MaskRequired, 'No');

		
		SELECT 	GLCodeId 																					AS TypeId,
				concat(																					
				Case 	when @MaskRequired = 'Yes' then ''
						when @Mask = '%' then ''
						else case when GLCodeName like @Mask then '*' else '' end end,  
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Desccription, ""), " [", IFNULL(GLCodeName, ""), "]")
					else
						concat("[", IFNULL(GLCodeName, ""), "] ", IFNULL(Desccription, "")) end) 			as TypeName,
				Case when GLCodeName like @Mask then 1 else 99 end 											as DisplayPriority
		FROM	GLCode
		WHERE	ClientId = pClientId
				and IsActive = 1
				and (
						(@MaskRequired = 'Yes' and Case when GLCodeName like @Mask then 1 else 99 end = 1)
						or @MaskRequired = 'No'
					)
				and Regexp_Like(concat(ifnull(GLCodeName, ''), '', ifnull(Desccription, '')), pKeyword, 'mi')
		order by DisplayPriority, 2
		limit dLimitResults;		
	ELSEIF (pType = 'department') THEN 	
		SELECT 	Id 																							AS TypeId,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Description, ""), " [", IFNULL(DepartmentName, ""), "]")
					else
						concat("[", IFNULL(DepartmentName, ""), "] ", IFNULL(Description, "")) end 			as TypeName

		FROM	Department
		WHERE	ClientId = pClientId
				and IsActive = 1
				and Regexp_Like(concat(ifnull(DepartmentName, ''), '', ifnull(Description, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;				
	ELSEIF (pType = 'project') THEN 	
		SELECT 	Id 																							AS TypeId,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Description, ""), " [", IFNULL(ProjectName, ""), "]")
					else
						concat("[", IFNULL(ProjectName, ""), "] ", IFNULL(Description, "")) end 			as TypeName
		FROM	ProjectType
		WHERE	ClientId = pClientId
				and IsActive = 1
				and Regexp_Like(concat(ifnull(ProjectName, ''), '', ifnull(Description, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;			
	ELSEIF (pType = 'subproject') THEN 	
		SELECT 	Id 																										AS TypeId,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(SubProjectDescription, ""), " [", IFNULL(SubProjectName, ""), "]")
					else
						concat("[", IFNULL(SubProjectName, ""), "] ", IFNULL(SubProjectDescription, "")) end 			as TypeName

		FROM	SubProjectType
		WHERE	ClientId = pClientId
				and IsActive = 1
				and Regexp_Like(concat(ifnull(SubProjectName, ''), '', ifnull(SubProjectDescription, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;	
	ELSEIF (pType = 'company') THEN 	
		SELECT 	Id 																							AS TypeId,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Description, ""), " [", IFNULL(CompanyCode, ""), "]")
					else
						concat("[", IFNULL(CompanyCode, ""), "] ", IFNULL(Description, "")) end 			as TypeName
		FROM	ClientCompany
		WHERE	ClientId = pClientId
				and IsActive = 1
				and Regexp_Like(concat(ifnull(CompanyCode, ''), '', ifnull(Description, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;		
	ELSEIF (pType = 'org') THEN 	
		SELECT 	Id 																				AS TypeId,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(OrgName, ""), " [", IFNULL(OrgId, ""), "]")
					else
						concat("[", IFNULL(OrgId, ""), "] ", IFNULL(OrgName, "")) end 			as TypeName

		FROM	OrgData
		WHERE	ClientId = pClientId
				and IsActive = 1
				and Regexp_Like(concat(ifnull(OrgId, ''), '', ifnull(OrgName, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;
	ELSEIF (pType = 'ponumber') THEN
		set @SplitChar = null;
		set @PONumber = '';
		set @VendorId = -1;

		select	SplitterCharacter 	into	@SplitChar 	from ClientPONumberSplitter 	where ClientId = pClientId;
		select	PONumber, VendorId				
		into	@PONumber, @VendorId
		from	Invoice i					
		where	InvoiceId = pValue;

		set @SplitChar = ifnull(@SplitChar, '|');
		set @PONumber 	= ifnull(@PONumber, '');
		
		drop TEMPORARY TABLE IF EXISTS Results;
		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS (
			SELECT
					PONumber 														AS TypeId,
					CONCAT(PONumber, " [Items: ", COUNT(DISTINCT ItemNumber) ,"]") 	AS TypeName
			FROM PO
			WHERE	ClientId = pClientId 
					and VendorId = @VendorId
					and Regexp_Like(PONumber, pKeyword, 'mi')
			GROUP 	BY PONumber
			order	by 2
			LIMIT 	dLimitResults
			);
	
		if not exists (select 1 from Results) THEN
			insert into Results values (@OriginalKeyword, CONCAT(@OriginalKeyword, ' [Items: 0]'));
		end if;

		select * from Results order by 2;

	ELSEIF (pType = 'customer') THEN 	
		SELECT 	CustomerId 		AS TypeId,
				CustomerName 	AS TypeName
		FROM	Customer
		WHERE	ClientId = pClientId	
				and IsDeleted = 0		
				and Regexp_Like(concat(ifnull(CustomerNo, ''), '', ifnull(CustomerName, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;	
	ELSEIF (pType = 'usermail') THEN 	
		drop TEMPORARY TABLE IF EXISTS Results;
		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS (
			SELECT 	Email 															AS TypeId,
					COALESCE (CONCAT(FirstName, ' ', LastName, ' (', Email, ')')) 	AS TypeName
			FROM	User
			WHERE	ClientId = pClientId
					and IsActive = 1
					and IsCloudxUser = 0
					and email like '%@%.%'
					and Regexp_Like(concat(ifnull(LastName, ''), ' ', ifnull(FirstName, ''), ' ', email), pKeyword, 'mi')
			order by 2
			limit dLimitResults
			);
	
		if not exists (select 1 from Results) then
			if @OriginalKeyword like '%support%' then
				insert into Results values ('support@cloudxdpo.com', 'APSMART support (support@cloudxdpo.com)');
			elseif @OriginalKeyword like '%@%.%' then
				insert into Results values (@OriginalKeyword, concat(@OriginalKeyword, ' (', @OriginalKeyword, ')'));
			end if;
		end if;

		select * from Results order by 2;
	ELSEIF (pType = 'user') THEN 	
		SELECT 	UserId 													AS TypeId,
				COALESCE (CONCAT(LastName, ', ', FirstName), UserName) 	AS TypeName
		FROM	User
		WHERE	ClientId = pClientId
				and IsActive = 1
				and IsCloudxUser = 0
				and Regexp_Like(concat(ifnull(LastName, ''), ' ', ifnull(FirstName, ''), ' ', ifnull(UserName, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;
	ELSEIF (pType = 'approver') THEN 	
		SELECT 	UserId 													AS TypeId,
				CONCAT(LastName, ', ', FirstName) 						AS TypeName
		FROM	User
		WHERE	ClientId = pClientId
				and IsActive = 1
				and IsCloudxUser = 0
				and Regexp_Like(concat(ifnull(LastName, ''), ' ', ifnull(FirstName, ''), ' ', ifnull(UserName, ' ')), pKeyword, 'mi')
				and exists (
								SELECT	1
								FROM	ClientUserRoles cur
										INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
										INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
								WHERE	cur.UserId = User.UserId
										and crf.FunctionKey = 'InvoiceApprove'
										and crf.Access = 1
								limit 1
							)													
		order by 2
		limit dLimitResults;	
	ELSEIF (pType = 'ehandler') THEN 	
		SELECT 	User.UserId 									AS TypeId,
				CONCAT(LastName, ', ', FirstName) 				AS TypeName
		FROM	User
				JOIN	_x_UserParameters ON User.UserId = _x_UserParameters.UserId
		WHERE	ClientId = pClientId
				and IsActive = 1
				and IsCloudxUser = 0
				and _x_UserParameters.IsExceptionHandler = 1
				and Regexp_Like(concat(ifnull(LastName, ''), '', ifnull(FirstName, ''), '', ifnull(UserName, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;	
	ELSEIF (pType = 'accounting') THEN 	
		SELECT 	Id 								AS TypeId,
				AccountingVariablesName 		AS TypeName
		FROM	AccountingVariable
		WHERE	ClientId = pClientId				
				and Regexp_Like(AccountingVariablesName, pKeyword, 'mi')
		order by 2
		limit dLimitResults;		
	ELSEIF (pType = 'category1') THEN 
		SELECT 	Id 								AS TypeId,
				CategoryName 					AS TypeName
		FROM	Category
		WHERE	ClientId = pClientId				
				AND ifnull(CategoryType, 0) = 0
				and Regexp_Like(concat(ifnull(GLCodeName, ''), '', ifnull(Desccription, '')), pKeyword, 'mi')
				and (	
						(
							CategoryName LIKE CONCAT('%', pKeyword, '%')								
						) 
					)
		order by 2
		limit dLimitResults;	
	ELSEIF (pType = 'category2') THEN 
		SELECT 	Id 								AS TypeId,
				CategoryName 					AS TypeName
		FROM	Category
		WHERE	ClientId = pClientId				
				AND CategoryType = 1
				and Regexp_Like(CategoryName, pKeyword, 'mi')
		order by 2
		limit dLimitResults;	
	ELSEIF (pType = 'subcategory') THEN 
		SELECT 	SubCategrory.Id 																							AS TypeId,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(SubCategrory.Description, ""), " [", IFNULL(SubCategrory.Code, ""), "]")
					else
						concat("[", IFNULL(SubCategrory.Code, ""), "] ", IFNULL(SubCategrory.Description, "")) end 			as TypeName
		FROM	SubCategrory
				inner join Category c ON SubCategrory.CategoryId = c.Id
											and CategoryType = 0
		WHERE	ClientId = pClientId				
				and Regexp_Like(concat(ifnull(SubCategrory.Code, ''), '', ifnull(SubCategrory.Description, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;	
	ELSEIF (pType = 'types') THEN 
		SELECT 	InvoiceTypeName 		AS TypeId,
				InvoiceTypeName 		AS TypeName
		FROM	ClientInvoiceType
		WHERE	ClientId = pClientId				
				and Regexp_Like(InvoiceTypeName, pKeyword, 'mi')
		order by 2
		limit dLimitResults;	
	ELSEIF (pType = 'tax') THEN 
		SELECT 	Id 						AS TypeId,
				TaxCode 				AS TypeName
		FROM	Tax
		WHERE	ClientId = pClientId				
				and Regexp_Like(TaxCode, pKeyword, 'mi')
		order by 2
		limit dLimitResults;	
	ELSEIF (pType = 'class') THEN 
		SELECT 	Id 						AS TypeId,
				NSClass 				AS TypeName
		FROM	NSClass
		WHERE	ClientId = pClientId	
				and IsActive = 1			
				and Regexp_Like(NSClass, pKeyword, 'mi')
		order by 2
		limit dLimitResults;	
	ELSEIF (pType = 'nsdepartment') THEN 
		SELECT 	Id 																								AS TypeId,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Description, ""), " [", IFNULL(NSDepartmentName, ""), "]")
					else
						concat("[", IFNULL(NSDepartmentName, ""), "] ", IFNULL(Description, "")) end 			as TypeName

		FROM	NSDepartment n
		WHERE	ClientId = pClientId	
				and IsActive = 1			
				and Regexp_Like(concat(ifnull(NSDepartmentName, ''), '', ifnull(Description, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;
	ELSEIF (pType = 'role') THEN 
		SELECT 	RoleId 			AS TypeId,
				RoleName 		AS TypeName
		FROM	ClientRoles 
		WHERE	ClientId = pClientId	
				and isInternal = 0			
				and Regexp_Like(RoleName, pKeyword, 'mi')
		order by 2
		limit dLimitResults;
	ELSEIF (pType = 'state') THEN 
		SELECT 	StateId 																					AS TypeId,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(StateName, ""), " [", IFNULL(StateNameShort, ""), "]")
					else
						concat("[", IFNULL(StateNameShort, ""), "] ", IFNULL(StateName, "")) end 			as TypeName

		FROM	State 
		where 	Regexp_Like(concat(ifnull(StateNameShort, ''), '', ifnull(StateName, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;
	ELSEIF (pType = 'freightcode') THEN 
		SELECT 	FreightCodeId 																		AS TypeId,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Description, ""), " [", IFNULL(Code, ""), "]")
					else
						concat("[", IFNULL(Code, ""), "] ", IFNULL(Description, "")) end 			as TypeName
		FROM	FreightCodes 
		WHERE	ClientId = pClientId	
				and isActive = 1
				and Regexp_Like(concat(ifnull(Code, ''), '', ifnull(Description, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;
	ELSEIF (pType = 'shippingterm') THEN 
		SELECT 	ShippingTermId 																		AS TypeId,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Description, ""), " [", IFNULL(Code, ""), "]")
					else
						concat("[", IFNULL(Code, ""), "] ", IFNULL(Description, "")) end 			as TypeName
		FROM	ShippingTerms 
		WHERE	ClientId = pClientId	
				and isActive = 1
				and Regexp_Like(concat(ifnull(Code, ''), '', ifnull(Description, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;
	ELSEIF (pType = 'item') THEN 
		SELECT 	ItemId 																					AS TypeId,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(ItemDescription, ""), " [", IFNULL(ItemNo, ""), "]")
					else
						concat("[", IFNULL(ItemNo, ""), "] ", IFNULL(ItemDescription, "")) end 			as TypeName
		FROM	Item 
		WHERE	ClientId = pClientId	
				and isActive = 1
				and Regexp_Like(concat(ifnull(ItemNo, ''), '', ifnull(ItemDescription, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;

	ELSEIF (pType = 'customerlocation') THEN 
		SELECT 	CustomerLocationId 																				AS TypeId,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(LocationName, ""), " [", IFNULL(LocationNumber, ""), "]")
					else
						concat("[", IFNULL(LocationNumber, ""), "] ", IFNULL(LocationName, "")) end 			as TypeName
		FROM	CustomerLocation cl 
				inner JOIN Customer ON cl.CustomerId = Customer.CustomerId
		WHERE	Customer.ClientId = pClientId	
				and cl.isActive = 1
				and Customer.IsDeleted = 0
				and Regexp_Like(concat(ifnull(LocationNumber, ''), '', ifnull(LocationName, '')), pKeyword, 'mi')
		order by 2
		limit dLimitResults;
	ELSEIF (pType = 'ArchiveReason') THEN 

		drop TEMPORARY TABLE IF EXISTS Results;
			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS (
			SELECT 	ArchiveReason			AS TypeId,
					ArchiveReason 			AS TypeName
			FROM	InvoiceArchiveReason 
			WHERE	ClientId = pClientId	
					and Regexp_Like(ArchiveReason, pKeyword, 'mi')
			order by TotalCount desc, 2
			limit dLimitResults
			);
	
		if not exists (select 1 from Results) THEN
			insert into Results values (@OriginalKeyword, @OriginalKeyword);
		end if;

		select * from Results order by 2;


	ELSEIF (pType = 'employeetype') THEN 
		SELECT 	EmployeeTypeId 				AS TypeId,
				TypeName 					AS TypeName
		FROM	ClientEmployeeType  				
		WHERE	ClientId = pClientId	
				and isActive = 1				
				and Regexp_Like(TypeName, pKeyword, 'mi')
		order by 2
		limit dLimitResults;
	END IF;

/*

call _x_FieldPopulate ('GLCode', 88, 'InvoiceId■660800804■DepartmentId■34350', ''); -- 34350, 34352, 34352




*/

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_GetClientParam` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_GetClientParam`(IN pClientId int, IN pParamKey varchar(100), out pParamValue text)
ThisProc:
	BEGIN
	-- noformat

	SELECT	ParamValue
	into 	pParamValue
	FROM 	_x_ClientParameters
	WHERE 	ClientId = pClientId
			and ParamKey = pParamKey;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_GetGLMask` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_GetGLMask`(in pGLCodeValues varchar(1000), out pMask varchar(1000))
ThisProc:
	BEGIN	
-- noformat
	DECLARE done int DEFAULT FALSE;
	DECLARE DataValue mediumtext;
	DECLARE curParms CURSOR FOR SELECT * FROM tSearchList;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

	set @DataValue				= null;
	set @ClientId 				= null;
	set @InvoiceId 				= null;
	set @DepartmentId			= null;


	set @OrgId					= null;
	set @Data 					= null;

	-- Break up the Data passed into the following order
	CALL _x_StringToRows(pGLCodeValues, '■');
-- 	IF MOD((SELECT COUNT(*) FROM tSearchList), 2) <> 0 THEN
-- 		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Improperly coded string; Parameters not paired.', MYSQL_ERRNO = 1;
-- 		LEAVE ThisProc;
-- 	END IF;	

	OPEN curParms;
readParms:
	LOOP
		FETCH curParms INTO DataValue;
		IF done THEN
			LEAVE readParms;
		END IF;
		SET @DataValue = DataValue;
		IF DataValue = 'InvoiceId' THEN
			FETCH curParms INTO DataValue;
			SET @InvoiceId = DataValue;
		ELSEIF DataValue = 'DepartmentId' THEN
			FETCH curParms INTO DataValue;
			SET @DepartmentId = DataValue;
		ELSE
			SET @ErrMsg = CONCAT('Improperly coded string; Unknown keyword [', DataValue, '].');
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @ErrMsg, MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;
		IF done THEN
			LEAVE readParms;
		END IF;	
	END LOOP;
	CLOSE curParms;



	select 	ClientId, OrgId
	into 	@ClientId, @OrgId
	from	Invoice 
	where 	InvoiceId = @InvoiceId;

	
	call _x_GetClientParam(@ClientId, 'GLCodeMask', pMask);
	set @PlaceHolder = '[OrgId]';
	if pMask like concat('%',@PlaceHolder,'%') THEN
		set @Data = null;
		select 	OrgId 
		into 	@Data
		from 	OrgData Data
		where 	Data.ClientId = @ClientId
				and Id = @OrgId;
		set @Data = nullif(@Data, '%');
		set pMask = REPLACE(pMask, @PlaceHolder, @Data);
	end if;



	set @PlaceHolder = '[DepartmentName]';
	if pMask like concat('%',@PlaceHolder,'%') THEN
		set @Data = null;
		select 	DepartmentName 
		into 	@Data
		from 	Department Data
		where 	Data.ClientId = @ClientId
				and Id = @DepartmentId;
		set @Data = ifnull(@Data, '%');
		set pMask = REPLACE(pMask, @PlaceHolder, @Data);
	end if;


/*
call _x_GetGLMask ('InvoiceId■660811551■DepartmentId■34350', @Mask); -- 34350, 34352, 34352
select  @Mask;

*/

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_GLDataById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_GLDataById`(IN `pInvoiceId` int)
BEGIN

-- noformat
	set @VendorNoAfterName = 1;

	set @VendorId = 0;
	set @InvoiceTotal = 0;
	
	select InvoiceTotal, VendorId
	into @InvoiceTotal, @VendorId
	from Invoice 
	where InvoiceId = pInvoiceId;

	SELECT
			Data.ID 																													AS Id,
			GLCode.GLCodeId 																											AS `GLCode`,

			case when @VendorNoAfterName = 1 THEN
					concat(IFNULL(GLCode.Desccription, ""), " [", IFNULL(GLCode.GLCodeName, ""), "]")
				else
					concat("[", IFNULL(GLCode.GLCodeName, ""), "] ", IFNULL(GLCode.Desccription, "")) end 								as GLCodeName,
--			COALESCE(CONCAT(GLCode.GLCodeName, ', ', GLCode.Desccription), GLCode.GLCodeName) 											AS GLCodeName,
			Department.Id 																												AS `Department`,

			case when @VendorNoAfterName = 1 THEN
					concat(IFNULL(Department.`Description`, ""), " [", IFNULL(Department.DepartmentName, ""), "]")
				else
					concat("[", IFNULL(Department.DepartmentName, ""), "] ", IFNULL(Department.`Description`, "")) end 					as DepartmentName,
--			COALESCE(CONCAT(Department.DepartmentName, ', ', Department.`Description`), Department.DepartmentName) 						AS DepartmentName,
			ProjectType.Id 																												AS Project,

			case when @VendorNoAfterName = 1 THEN
					concat(IFNULL(Vendor.VendorName, ""), " [", IFNULL(ProjectType.ProjectName, ""), "]")
				else
					concat("[", IFNULL(ProjectType.`Description`, ""), "] ", IFNULL(Vendor.VendorName, "")) end 						as ProjectName,
--			COALESCE(CONCAT(ProjectType.ProjectName, ', ', ProjectType.`Description`), ProjectType.`Description`) 						AS ProjectName,
			SubProjectType.Id 																											AS SubProject,

			case when @VendorNoAfterName = 1 THEN
					concat(IFNULL(SubProjectType.SubProjectDescription, ""), " [", IFNULL(SubProjectType.SubProjectName, ""), "]")
				else
					concat("[", IFNULL(SubProjectType.SubProjectName, ""), "] ", IFNULL(SubProjectType.SubProjectDescription, "")) end 	as SubProjectName,
--			COALESCE(CONCAT(SubProjectType.SubProjectName, ', ', SubProjectType.SubProjectDescription), SubProjectType.SubProjectName) 	AS SubProjectName,
			Vendor.VendorId 																											AS `Vendor`,

			case when @VendorNoAfterName = 1 THEN
					concat(IFNULL(Vendor.VendorName, ""), " [", IFNULL(Vendor.VendorNo, ""), "]")
				else
					concat("[", IFNULL(Vendor.VendorNo, ""), "] ", IFNULL(Vendor.VendorName, "")) end 									as VendorName,
--			COALESCE(CONCAT(Vendor.VendorNo, ', ', Vendor.VendorName), Vendor.VendorNo) 												AS VendorName,
			ClientCompany.Id 																											AS Company,

			case when @VendorNoAfterName = 1 THEN
					concat(IFNULL(ClientCompany.`Description`, ""), " [", IFNULL(ClientCompany.CompanyCode, ""), "]")
				else
					concat("[", IFNULL(ClientCompany.CompanyCode, ""), "] ", IFNULL(ClientCompany.`Description`, "")) end 				as CompanyName,
--			COALESCE(CONCAT(ClientCompany.CompanyCode, ', ', ClientCompany.`Description`), ClientCompany.CompanyCode) 					AS CompanyName,
			OrgData.Id 																													AS Org,

			case when @VendorNoAfterName = 1 THEN
					concat(IFNULL(OrgData.OrgName, ""), " [", IFNULL(OrgData.OrgId, ""), "]")
				else
					concat("[", IFNULL(OrgData.OrgId, ""), "] ", IFNULL(OrgData.OrgName, "")) end 										as OrgName,
--			COALESCE(CONCAT(OrgData.OrgId, ', ', OrgData.OrgName), OrgData.OrgId) 														AS OrgName,
			Customer.CustomerId 																										AS `Customer`,
			Customer.CustomerName,
			Data.AccountingVariable1 																									AS AccountingV1,
			AccV1.AccountingVariablesName 																								AS AccountingV1Name,
			Data.AccountingVariable2 																									AS AccountingV2,
			AccV2.AccountingVariablesName 																								AS AccountingV2Name,
			Data.AccountingVariable3 																									AS AccountingV3,
			AccV3.AccountingVariablesName 																								AS AccountingV3Name,
			Data.AccountingVariable4 																									AS AccountingV4,
			AccV4.AccountingVariablesName 																								AS AccountingV4Name,
			Cat1.Id 																													AS Category1,
			Cat1.CategoryName 																											AS Category1Name,
			Cat2.Id 																													AS Category2,
			Cat2.CategoryName 																											AS Category2Name,
			SubCat1.Id 																													AS SubCategory1,

			case when @VendorNoAfterName = 1 THEN
					concat(IFNULL(SubCat1.`Description`, ""), " [", IFNULL(SubCat1.`Code`, ""), "]")
				else
					concat("[", IFNULL(SubCat1.`Code`, ""), "] ", IFNULL(SubCat1.`Description`, "")) end 								as SubCategory1,
--			COALESCE(CONCAT(SubCat1.`Code`, ', ', SubCat1.`Description`), SubCat1.`Description`) 																							AS SubCategory1Name,
			SubCat2.Id 																													AS SubCategory1,

			case when @VendorNoAfterName = 1 THEN
					concat(IFNULL(SubCat2.`Description`, ""), " [", IFNULL(SubCat2.`Code`, ""), "]")
				else
					concat("[", IFNULL(SubCat2.`Code`, ""), "] ", IFNULL(SubCat2.`Description`, "")) end 								as SubCategory2,
--			COALESCE(CONCAT(SubCat2.`Code`, ', ', SubCat2.`Description`), SubCat2.`Description`) 										AS SubCategory2,																							AS SubCategory2Name,
			Data.AmountAppoved 																											AS Amount,
			Data.AmountInPercent 																										AS AmountPercent,
			Data.TaxAmount 																												AS TaxAmount,
			Data.SpecialNote
	FROM 
			(	
				select  Id, 
						AccountingVariable1, AccountingVariable2, AccountingVariable3, AccountingVariable4, 
						AmountAppoved, 
						AmountInPercent, 
						TaxAmount, 
						SpecialNote,
						GLCodeId, DepartmentId, ProjectId, SubProjectId, VendorId, CompanyCode, OrgId, CustomerId, Category1, Category2, SubCategory1, SubCategory2
				from 	PendingApprovalHistory
				WHERE	InvoiceId = pInvoiceId
						and  AmountAppoved <> 0
				union all
				select  ApprovalHistoryId, 
						AccountingVariable1, AccountingVariable2, AccountingVariable3, AccountingVariable4, 
						AmountAppoved, 
						AmountInPercent, 
						TaxAmount, 
						SpecialNote,
						GLCodeId, DepartmentId, ProjectId, SubProjectId, VendorId, CompanyCode, OrgId, CustomerId, Category1, Category2, SubCategory1, SubCategory2
				from 	ApprovalHistory
				WHERE	InvoiceId = pInvoiceId
						and  AmountAppoved <> 0
						and not exists (select 1 from PendingApprovalHistory where InvoiceId = pInvoiceId)
				union all
				select  Id, 
						AccountingVariable1, AccountingVariable2, AccountingVariable3, AccountingVariable4, 
						Round(@InvoiceTotal * AmountPercent / 100, 2) as Amount, 
						AmountPercent, 
						0, 
						SpecialNote,
						GLCodeId, DepartmentId, ProjectTypeId, SubProjectTypeId, VendorId, ClientCompanyId, OrgId, CustomerId, null, null, null, null
				from 	VendorGlDefault
				WHERE	VendorId = @VendorId
						and AmountPercent <> 0
						and not exists (select 1 from PendingApprovalHistory where InvoiceId = pInvoiceId
										union all select 1 from ApprovalHistory where InvoiceId = pInvoiceId)
			) Data
			LEFT JOIN GLCode	        			ON Data.GLCodeId = GLCode.GLCodeId
			LEFT JOIN Department					ON Data.DepartmentId = Department.Id
			LEFT JOIN ProjectType					ON Data.ProjectId = ProjectType.Id
			LEFT JOIN SubProjectType				ON Data.SubProjectId = SubProjectType.Id
			LEFT JOIN Vendor						ON Data.VendorId = Vendor.VendorId
			LEFT JOIN ClientCompany					ON Data.CompanyCode = ClientCompany.Id
			LEFT JOIN OrgData						ON Data.OrgId = OrgData.Id
			LEFT JOIN Customer						ON Data.CustomerId = Customer.CustomerId
			LEFT JOIN AccountingVariable AccV1		ON Data.AccountingVariable1 = AccV1.Id
			LEFT JOIN AccountingVariable AccV2		ON Data.AccountingVariable2 = AccV2.Id
			LEFT JOIN AccountingVariable AccV3		ON Data.AccountingVariable3 = AccV3.Id
			LEFT JOIN AccountingVariable AccV4		ON Data.AccountingVariable4 = AccV4.Id
			LEFT JOIN Category Cat1					ON Data.Category1 = Cat1.Id
			LEFT JOIN Category Cat2					ON Data.Category2 = Cat2.Id
			LEFT JOIN SubCategrory SubCat1			ON Data.SubCategory1 = SubCat1.Id
			LEFT JOIN SubCategrory SubCat2			ON Data.SubCategory2 = SubCat2.Id
	
	ORDER 	BY abs(AmountAppoved) desc;	



-- 
-- 
-- 
--   SET @GLId = 0;
-- 
-- 	set @InvoiceTotal = 0;
-- 	select InvoiceTotal 
-- 	into @InvoiceTotal
-- 	from Invoice 
-- 	where InvoiceId = pInvoiceId;
-- 
-- 
--   SELECT
--     GLCodeId INTO @GLId
--   FROM PendingApprovalHistory
--   WHERE InvoiceId = pInvoiceId LIMIT 1;
-- 
-- 
-- 
--   IF (@GLId > 0) THEN
--     SELECT
--       PendingApprovalHistory.ID AS Id,
--       GLCode.GLCodeId AS `GLCode`,
--       COALESCE(CONCAT(GLCode.GLCodeName, ', ', GLCode.Desccription), GLCode.GLCodeName) AS GLCodeName,
--       Department.Id AS `Department`,
--       COALESCE(CONCAT(Department.DepartmentName, ', ', Department.`Description`), Department.DepartmentName) AS DepartmentName,
--       ProjectType.Id AS Project,
--       COALESCE(CONCAT(ProjectType.ProjectName, ', ', ProjectType.`Description`), ProjectType.ProjectName) AS ProjectName,
--       SubProjectType.Id AS SubProject,
--       COALESCE(CONCAT(SubProjectType.SubProjectName, ', ', SubProjectType.SubProjectDescription), SubProjectType.SubProjectName) AS SubProjectName,
--       Vendor.VendorId AS `Vendor`,
--       COALESCE(CONCAT(Vendor.VendorNo, ', ', Vendor.VendorName), Vendor.VendorNo) AS VendorName,
--       ClientCompany.Id AS Company,
--       COALESCE(CONCAT(ClientCompany.CompanyCode, ', ', ClientCompany.`Description`), ClientCompany.CompanyCode) AS CompanyName,
--       OrgData.Id AS Org,
--       COALESCE(CONCAT(OrgData.OrgId, ', ', OrgData.OrgName), OrgData.OrgId) AS OrgName,
--       Customer.CustomerId AS `Customer`,
--       Customer.CustomerName,
--       PendingApprovalHistory.AccountingVariable1 AS AccountingV1,
--       AccV1.AccountingVariablesName AS AccountingV1Name,
--       PendingApprovalHistory.AccountingVariable2 AS AccountingV2,
--       AccV2.AccountingVariablesName AS AccountingV2Name,
--       PendingApprovalHistory.AccountingVariable3 AS AccountingV3,
--       AccV3.AccountingVariablesName AS AccountingV3Name,
--       PendingApprovalHistory.AccountingVariable4 AS AccountingV4,
--       AccV4.AccountingVariablesName AS AccountingV4Name,
--       Cat1.Id AS Category1,
--       Cat1.CategoryName AS Category1Name,
--       Cat2.Id AS Category2,
--       Cat2.CategoryName AS Category2Name,
--       SubCat1.Id AS SubCategory1,
--       COALESCE(CONCAT(SubCat1.`Code`, ', ', SubCat1.`Description`), SubCat1.`Description`) AS SubCategory1Name,
--       SubCat2.Id AS SubCategory2,
--       COALESCE(CONCAT(SubCat2.`Code`, ', ', SubCat2.`Description`), SubCat2.`Description`) AS SubCategory2Name,
--       PendingApprovalHistory.AmountAppoved AS Amount,
--       PendingApprovalHistory.AmountInPercent AS AmountPercent,
--       PendingApprovalHistory.TaxAmount AS TaxAmount,
--       PendingApprovalHistory.SpecialNote
-- 
--     FROM PendingApprovalHistory
--       LEFT JOIN GLCode
--         ON PendingApprovalHistory.GLCodeId = GLCode.GLCodeId
--       LEFT JOIN Department
--         ON PendingApprovalHistory.DepartmentId = Department.Id
--       LEFT JOIN ProjectType
--         ON PendingApprovalHistory.ProjectId = ProjectType.Id
--       LEFT JOIN SubProjectType
--         ON PendingApprovalHistory.SubProjectId = SubProjectType.Id
--       LEFT JOIN Vendor
--         ON PendingApprovalHistory.VendorId = Vendor.VendorId
--       LEFT JOIN ClientCompany
--         ON PendingApprovalHistory.CompanyCode = ClientCompany.Id
--       LEFT JOIN OrgData
--         ON PendingApprovalHistory.OrgId = OrgData.Id
--       LEFT JOIN Customer
--         ON PendingApprovalHistory.CustomerId = Customer.CustomerId
--       LEFT JOIN AccountingVariable AccV1
--         ON PendingApprovalHistory.AccountingVariable1 = AccV1.Id
--       LEFT JOIN AccountingVariable AccV2
--         ON PendingApprovalHistory.AccountingVariable2 = AccV2.Id
--       LEFT JOIN AccountingVariable AccV3
--         ON PendingApprovalHistory.AccountingVariable3 = AccV3.Id
--       LEFT JOIN AccountingVariable AccV4
--         ON PendingApprovalHistory.AccountingVariable4 = AccV4.Id
--       LEFT JOIN Category Cat1
--         ON PendingApprovalHistory.Category1 = Cat1.Id
--       LEFT JOIN Category Cat2
--         ON PendingApprovalHistory.Category2 = Cat2.Id
--       LEFT JOIN SubCategrory SubCat1
--         ON PendingApprovalHistory.SubCategory1 = SubCat1.Id
--       LEFT JOIN SubCategrory SubCat2
--         ON PendingApprovalHistory.SubCategory2 = SubCat2.Id
-- 
--     WHERE PendingApprovalHistory.InvoiceId = pInvoiceId
-- 			and  PendingApprovalHistory.AmountAppoved > 0
--     ORDER BY PendingApprovalHistory.ID ASC;
--   ELSE
--     SELECT
--       GLCodeId INTO @GLId
--     FROM ApprovalHistory
--     WHERE InvoiceId = pInvoiceId LIMIT 1;
-- 
-- 
-- 	if (@GLId = 0) THEN
--       SELECT
--         VendorGlDefault.Id AS Id,
--         GLCode.GLCodeId AS `GLCode`,
--         COALESCE(CONCAT(GLCode.GLCodeName, ', ', GLCode.Desccription), GLCode.GLCodeName) AS GLCodeName,
--         Department.Id AS `Department`,
--         COALESCE(CONCAT(Department.DepartmentName, ', ', Department.`Description`), Department.DepartmentName) AS DepartmentName,
--         ProjectType.Id AS Project,
--         COALESCE(CONCAT(ProjectType.ProjectName, ', ', ProjectType.`Description`), ProjectType.ProjectName) AS ProjectName,
--         NULL AS SubProject,
--         NULL AS SubProjectName,
--         NULL AS `Vendor`,
--         NULL AS VendorName,
--         ClientCompany.Id AS Company,
--         COALESCE(CONCAT(ClientCompany.CompanyCode, ', ', ClientCompany.`Description`), ClientCompany.CompanyCode) AS CompanyName,
--         OrgData.Id AS Org,
--         COALESCE(CONCAT(OrgData.OrgId, ', ', OrgData.OrgName), OrgData.OrgId) AS OrgName,
--         Customer.CustomerId AS `Customer`,
--         Customer.CustomerName,
--         VendorGlDefault.AccountingVariable1 AS AccountingV1,
--         AccV1.AccountingVariablesName AS AccountingV1Name,
--         VendorGlDefault.AccountingVariable2 AS AccountingV2,
--         AccV2.AccountingVariablesName AS AccountingV2Name,
--         VendorGlDefault.AccountingVariable3 AS AccountingV3,
--         AccV3.AccountingVariablesName AS AccountingV3Name,
--         VendorGlDefault.AccountingVariable4 AS AccountingV4,
--         AccV4.AccountingVariablesName AS AccountingV4Name,
--         NULL AS Category1,
--         NULL AS Category1Name,
--         NULL AS Category2,
--         NULL AS Category2Name,
--         NULL AS SubCategory1,
--         NULL AS SubCategory1Name,
--         NULL AS SubCategory2,
--         NULL AS SubCategory2Name,
-- 		Round(@InvoiceTotal * VendorGlDefault.AmountPercent / 100, 2) as Amount,
--         VendorGlDefault.AmountPercent,
--         0 AS TaxAmount,
--         VendorGlDefault.SpecialNote
-- 
--       FROM VendorGlDefault
--         LEFT JOIN GLCode
--           ON VendorGlDefault.GlCodeId = GLCode.GLCodeId
--         LEFT JOIN Department
--           ON VendorGlDefault.DepartmentId = Department.Id
--         LEFT JOIN ProjectType
--           ON VendorGlDefault.ProjectTypeId = ProjectType.Id
--         LEFT JOIN ClientCompany
--           ON VendorGlDefault.ClientCompanyId = ClientCompany.Id
--         LEFT JOIN OrgData
--           ON VendorGlDefault.OrgId = OrgData.Id
--         LEFT JOIN Customer
--           ON VendorGlDefault.CustomerId = Customer.CustomerId
--         LEFT JOIN AccountingVariable AccV1
--           ON VendorGlDefault.AccountingVariable1 = AccV1.Id
--         LEFT JOIN AccountingVariable AccV2
--           ON VendorGlDefault.AccountingVariable2 = AccV2.Id
--         LEFT JOIN AccountingVariable AccV3
--           ON VendorGlDefault.AccountingVariable3 = AccV3.Id
--         LEFT JOIN AccountingVariable AccV4
--           ON VendorGlDefault.AccountingVariable4 = AccV4.Id
-- 
--       WHERE VendorGlDefault.VendorId = pVendorId
-- 	  		and VendorGlDefault.AmountPercent > 0
--       ORDER BY VendorGlDefault.Id ASC;
--     else
--       SELECT
--         ApprovalHistory.ApprovalHistoryID AS Id,
--         GLCode.GLCodeId AS `GLCode`,
--         COALESCE(CONCAT(GLCode.GLCodeName, ', ', GLCode.Desccription), GLCode.GLCodeName) AS GLCodeName,
--         Department.Id AS `Department`,
--         COALESCE(CONCAT(Department.DepartmentName, ', ', Department.`Description`), Department.DepartmentName) AS DepartmentName,
--         ProjectType.Id AS Project,
--         COALESCE(CONCAT(ProjectType.ProjectName, ', ', ProjectType.`Description`), ProjectType.ProjectName) AS ProjectName,
--         SubProjectType.Id AS SubProject,
--         COALESCE(CONCAT(SubProjectType.SubProjectName, ', ', SubProjectType.SubProjectDescription), SubProjectType.SubProjectName) AS SubProjectName,
--         Vendor.VendorId AS `Vendor`,
--         COALESCE(CONCAT(Vendor.VendorNo, ', ', Vendor.VendorName), Vendor.VendorNo) AS VendorName,
--         ClientCompany.Id AS Company,
--         COALESCE(CONCAT(ClientCompany.CompanyCode, ', ', ClientCompany.`Description`), ClientCompany.CompanyCode) AS CompanyName,
--         OrgData.Id AS Org,
--         COALESCE(CONCAT(OrgData.OrgId, ', ', OrgData.OrgName), OrgData.OrgId) AS OrgName,
--         Customer.CustomerId AS `Customer`,
--         Customer.CustomerName,
--         ApprovalHistory.AccountingVariable1 AS AccountingV1,
--         AccV1.AccountingVariablesName AS AccountingV1Name,
--         ApprovalHistory.AccountingVariable2 AS AccountingV2,
--         AccV2.AccountingVariablesName AS AccountingV2Name,
--         ApprovalHistory.AccountingVariable3 AS AccountingV3,
--         AccV3.AccountingVariablesName AS AccountingV3Name,
--         ApprovalHistory.AccountingVariable4 AS AccountingV4,
--         AccV4.AccountingVariablesName AS AccountingV4Name,
--         Cat1.Id AS Category1,
--         Cat1.CategoryName AS Category1Name,
--         Cat2.Id AS Category2,
--         Cat2.CategoryName AS Category2Name,
--         SubCat1.Id AS SubCategory1,
--         COALESCE(CONCAT(SubCat1.`Code`, ', ', SubCat1.`Description`), SubCat1.`Description`) AS SubCategory1Name,
--         SubCat2.Id AS SubCategory2,
--         COALESCE(CONCAT(SubCat2.`Code`, ', ', SubCat2.`Description`), SubCat2.`Description`) AS SubCategory2Name,
--         ApprovalHistory.AmountAppoved AS Amount,
--         ApprovalHistory.AmountInPercent AS AmountPercent,
--         ApprovalHistory.TaxAmount AS TaxAmount,
--         ApprovalHistory.SpecialNote
-- 
--       FROM ApprovalHistory
--         LEFT JOIN GLCode
--           ON ApprovalHistory.GLCodeId = GLCode.GLCodeId
--         LEFT JOIN Department
--           ON ApprovalHistory.DepartmentId = Department.Id
--         LEFT JOIN ProjectType
--           ON ApprovalHistory.ProjectId = ProjectType.Id
--         LEFT JOIN SubProjectType
--           ON ApprovalHistory.SubProjectId = SubProjectType.Id
--         LEFT JOIN Vendor
--           ON ApprovalHistory.VendorId = Vendor.VendorId
--         LEFT JOIN ClientCompany
--           ON ApprovalHistory.CompanyCode = ClientCompany.Id
--         LEFT JOIN OrgData
--           ON ApprovalHistory.OrgId = OrgData.Id
--         LEFT JOIN Customer
--           ON ApprovalHistory.CustomerId = Customer.CustomerId
--         LEFT JOIN AccountingVariable AccV1
--           ON ApprovalHistory.AccountingVariable1 = AccV1.Id
--         LEFT JOIN AccountingVariable AccV2
--           ON ApprovalHistory.AccountingVariable2 = AccV2.Id
--         LEFT JOIN AccountingVariable AccV3
--           ON ApprovalHistory.AccountingVariable3 = AccV3.Id
--         LEFT JOIN AccountingVariable AccV4
--           ON ApprovalHistory.AccountingVariable4 = AccV4.Id
--         LEFT JOIN Category Cat1
--           ON ApprovalHistory.Category1 = Cat1.Id
--         LEFT JOIN Category Cat2
--           ON ApprovalHistory.Category2 = Cat2.Id
--         LEFT JOIN SubCategrory SubCat1
--           ON ApprovalHistory.SubCategory1 = SubCat1.Id
--         LEFT JOIN SubCategrory SubCat2
--           ON ApprovalHistory.SubCategory2 = SubCat2.Id
-- 
--       WHERE ApprovalHistory.InvoiceId = pInvoiceId
-- 	  		and ApprovalHistory.AmountAppoved > 0
--       ORDER BY ApprovalHistory.ApprovalHistoryID ASC;
-- 	end if;
--   END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_GLDataDelete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_GLDataDelete`(IN `pType` tinyint,
-- noformat
IN `pInvoiceId` int,
IN `pVendorId` int)
BEGIN
 	SET FOREIGN_KEY_CHECKS = 0;

	IF (pType = 0) THEN  /* PArtial save */
		DELETE	FROM PendingApprovalHistory		    WHERE InvoiceId = pInvoiceId;
		DELETE	FROM ApprovalHistory				WHERE InvoiceId = pInvoiceId;
	
	ELSEIF (pType = 1) THEN /* Approved */
		DELETE	FROM PendingApprovalHistory			WHERE InvoiceId = pInvoiceId;
		DELETE	FROM ApprovalHistory				WHERE InvoiceId = pInvoiceId;
	
	ELSEIF (pType = 2) THEN /* Clear */
		DELETE	FROM PendingApprovalHistory			WHERE InvoiceId = pInvoiceId;
		DELETE	FROM ApprovalHistory				WHERE InvoiceId = pInvoiceId;
	
	ELSEif (pType = 3 or pType = 4) then /* GLDefault set and clear */
		DELETE	FROM VendorGlDefault				WHERE VendorId = pVendorId;
	
	END IF;

	SET FOREIGN_KEY_CHECKS = 1;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_GLDataUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_GLDataUpdate`(IN `pType` tinyint,
-- noformat
IN `pApproverId` char(36),
IN `pInvoiceId` int,
IN `pVendorId` int,
IN `pGLCode` int,
IN `pDepartment` int,
IN `pProject` int,
IN `pSubProject` int,
IN `pVendor` int,
IN `pCompany` int,
IN `pOrg` int,
IN `pCustomer` int,
IN `pAccountingV1` int,
IN `pAccountingV2` int,
IN `pAccountingV3` int,
IN `pAccountingV4` int,
IN `pCategory1` int,
IN `pCategory2` int,
IN `pSubCategory1` int,
IN `pSubCategory2` int,
IN `pAmount` decimal(18, 2),
IN `pSpecialNote` varchar(250))
BEGIN

	IF (pType = 0) THEN  /* PArtial save */
		INSERT INTO PendingApprovalHistory (InvoiceId, ApproverId, GLCodeType, GLCodeId, DepartmentId, ProjectId, SubProjectId, VendorId, CompanyCode, OrgId, CustomerId, AccountingVariable1, AccountingVariable2, AccountingVariable3, AccountingVariable4, Category1, Category2, SubCategory1, SubCategory2, AmountAppoved, SpecialNote)
			VALUES (pInvoiceId, pApproverId, 0, pGLCode, pDepartment, pProject, pSubProject, pVendor, pCompany, pOrg, pCustomer, pAccountingV1, pAccountingV2, pAccountingV3, pAccountingV4, pCategory1, pCategory2, pSubCategory1, pSubCategory2, pAmount, pSpecialNote);

	ELSEIF (pType = 1) THEN /* Approved */
		INSERT INTO ApprovalHistory (InvoiceId, ApproverId, StateChangedDate, GLCodeId, DepartmentId, ProjectId, SubProjectId, VendorId, CompanyCode, OrgId, CustomerId, AccountingVariable1, AccountingVariable2, AccountingVariable3, AccountingVariable4, Category1, Category2, SubCategory1, SubCategory2, AmountAppoved, SpecialNote)
			VALUES (pInvoiceId, pApproverId, UTC_TIMESTAMP(), pGLCode, pDepartment, pProject, pSubProject, pVendor, pCompany, pOrg, pCustomer, pAccountingV1, pAccountingV2, pAccountingV3, pAccountingV4, pCategory1, pCategory2, pSubCategory1, pSubCategory2, pAmount, pSpecialNote);
	
	ELSEIF (pType = 2) THEN /* Clear */
		set @Dummy = 0; -- Donothing
	
	ELSEif (pType = 3) then  /* VendorGlDefault set */

		set @InvoiceTotal = 0;
		select InvoiceTotal into @InvoiceTotal from Invoice where InvoiceId = pInvoiceId;
		set @AmountPercent = ( pAmount / @InvoiceTotal * 100);

		INSERT INTO VendorGlDefault (VendorId, GlCodeId, DepartmentId, ProjectTypeId, ClientCompanyId, OrgId, CustomerId, AccountingVariable1, AccountingVariable2, AccountingVariable3, AccountingVariable4, Amount, AmountPercent, SpecialNote)
			VALUES (pVendorId, pGLCode, pDepartment, pProject, pCompany, pOrg, pCustomer, pAccountingV1, pAccountingV2, pAccountingV3, pAccountingV4, pAmount, @AmountPercent, pSpecialNote);
	
	ELSEif (pType = 4) then /* VendorGlDefault clear */
		set @Dummy = 0; -- Donothing
	
	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_GlobalSearch` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_GlobalSearch`(
-- noformat
	IN pUserId 			varchar(36),							-- GlobalSearch■stop
	IN pSearchString 	mediumtext,								-- InvoiceNo■12335■InvoiceAmount2■45000		
	IN pRows 			int,									-- 10
	IN pPage 			int)
ThisProc:
	BEGIN
-- noformat	
		DECLARE done int DEFAULT FALSE;
		DECLARE DataValue mediumtext;
		DECLARE curParms CURSOR FOR SELECT * FROM tSearchList;
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;



		SET @isGlobalSearch = FALSE;
		SET @MyInvoices = FALSE;
		SET @GlobalSearch = NULL;
		SET @InvoiceNo = NULL;
		SET @Vendor = NULL;
		SET @InvoiceAmount1 = NULL;
		SET @InvoiceAmount2 = NULL;
		SET @InvoiceType = NULL;
		SET @PONumber = NULL;
		SET @InvoiceDate1 = NULL;
		SET @InvoiceDate2 = NULL;
		SET @ScanDate1 = NULL;
		SET @ScanDate2 = NULL;
		SET @LastActionDate1 = NULL;
		SET @LastActionDate2 = NULL;
		SET @Comment = NULL;
		SET @Status = NULL;
		SET @Department = NULL;
		SET @CompanyCode = NULL;
		set @POorNonPO = NULL;
		set @CheckNumber = null;
		set @isConfidential = NULL;
		set @GLCode = null;

		-- Break up the Data passed into the following order
		CALL _x_StringToRows(pSearchString, '■');

		IF MOD((SELECT COUNT(*) FROM tSearchList), 2) <> 0 THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Improperly coded search string; Parameters not paired.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;


		OPEN curParms;
	readParms:
		LOOP
			FETCH curParms INTO DataValue;
			IF done THEN
				LEAVE readParms;
			END IF;
			SET @DataValue = DataValue;
			IF DataValue = 'GlobalSearch' THEN
				FETCH curParms INTO DataValue;
				SET @GlobalSearch = DataValue;
				Set @InvoiceNo = DataValue;
				set @Vendor = Datavalue;
				set @PONumber = Datavalue;
				SET @isGlobalSearch = TRUE;
			ELSEIF DataValue = 'MyInvoices' THEN
				FETCH curParms INTO DataValue;
				SET @MyInvoices = CASE WHEN DataValue = 'True' THEN 1 ELSE 0 END;
			ELSEIF DataValue = 'InvoiceNo' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceNo = DataValue;
			ELSEIF DataValue = 'Vendor' THEN
				FETCH curParms INTO DataValue;
				SET @Vendor = DataValue;
			ELSEIF DataValue = 'InvoiceAmount1' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceAmount1 = CAST(DataValue AS decimal(18, 2));
			ELSEIF DataValue = 'InvoiceAmount2' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceAmount2 = CAST(DataValue AS decimal(18, 2));
			ELSEIF DataValue = 'InvoiceType' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceType = DataValue;
			ELSEIF DataValue = 'POorNonPO' THEN
				FETCH curParms INTO DataValue;
				SET @POorNonPO = DataValue;
			ELSEIF DataValue = 'CheckNumber' THEN
				FETCH curParms INTO DataValue;
				SET @CheckNumber = DataValue;
			ELSEIF DataValue = 'isConfidential' THEN
				FETCH curParms INTO DataValue;
				SET @isConfidential = CASE WHEN DataValue = 'True' THEN 1 ELSE 0 END;
			ELSEIF DataValue = 'GLCode' THEN
				FETCH curParms INTO DataValue;
				SET @GLCode = DataValue;
			ELSEIF DataValue = 'PONumber' THEN
				FETCH curParms INTO DataValue;
				SET @PONumber = DataValue;
			ELSEIF DataValue = 'InvoiceDate1' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceDate1 = DATE(DataValue);
			ELSEIF DataValue = 'InvoiceDate2' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceDate2 = DATE(DataValue);
			ELSEIF DataValue = 'ScanDate1' THEN
				FETCH curParms INTO DataValue;
				SET @ScanDate1 = DATE(DataValue);
			ELSEIF DataValue = 'ScanDate2' THEN
				FETCH curParms INTO DataValue;
				SET @ScanDate2 = DATE(DataValue);
			ELSEIF DataValue = 'LastActionDate1' THEN
				FETCH curParms INTO DataValue;
				SET @LastActionDate1 = DATE(DataValue);
			ELSEIF DataValue = 'LastActionDate2' THEN
				FETCH curParms INTO DataValue;
				SET @LastActionDate2 = DATE(DataValue);
			ELSEIF DataValue = 'Comment' THEN
				FETCH curParms INTO DataValue;
				SET @Comment = DataValue;
			ELSEIF DataValue = 'Department' THEN
				FETCH curParms INTO DataValue;
				SET @Department = DataValue;
			ELSEIF DataValue = 'InvoiceStatus' THEN
				FETCH curParms INTO DataValue;
				SET @Status = DataValue;
			ELSEIF DataValue = 'CompanyCode' THEN
				FETCH curParms INTO DataValue;
				SET @CompanyCode = DataValue;
			ELSE
				SET @ErrMsg = CONCAT('Improperly coded search string; Unknown keyword [', DataValue, '].');
				SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @ErrMsg, MYSQL_ERRNO = 1;
				LEAVE ThisProc;
			END IF;

			IF @isGlobalSearch = FALSE THEN
				INSERT INTO SystemAdvanceSearchFieldsUserStats (SearchType, Field, UserId, TotalUsed)
					VALUES ('GlobalSearch', REPLACE(REPLACE(@DataValue, '1', '#'), '2', '#'), pUserId, 1)
				ON DUPLICATE KEY UPDATE TotalUsed = TotalUsed + 1;
			END IF;


		END LOOP;
		CLOSE curParms;

		SELECT ClientId INTO @ClientId FROM User WHERE UserId = pUserId;


		set @SplitChar = null;
		select SplitterCharacter 	into @SplitChar 	from ClientPONumberSplitter 	where ClientId = @ClientId;
		set @SplitChar = ifnull(@SplitChar, '|');

		call _x_SetClientTimeZone(@ClientId);
		set @VendorNoAfterName = 1;


	

		drop TEMPORARY TABLE IF EXISTS GLCodeInInvoice;
		CREATE TEMPORARY TABLE IF NOT EXISTS GLCodeInInvoice AS (
				select InvoiceId from PendingApprovalHistory where GLCodeId = @GLCode
				union all select InvoiceId from TempApprovalHistory where GLCodeId = @GLCode
				union all select InvoiceId from ApprovalHistory where GLCodeId = @GLCode
			);



		SET pRows = IFNULL(pRows, 10);
		SET pPage = IFNULL(pPage, 1);
		SET pPage = ((pPage - 1) * pRows);
		SET @Sep = CHAR(254);


		CALL _x_StringToRegEx(@GlobalSearch);
		CALL _x_StringToRegEx(@Comment);

	
		SELECT
				Invoice.InvoiceId,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
					else
						concat('[', IFNULL(Vendor.VendorNo, ''), '] ', IFNULL(Vendor.VendorName, '')) end 					as Vendor,
				IFNULL(Invoice.InvoiceNo, '') 																				AS InvoiceNo,
				FORMAT(Invoice.InvoiceTotal, 2) 																			AS InvoiceTotal,
				CONCAT(InvoiceStatus.StateName, CASE WHEN IsPaused = 1 THEN '/Paused' ELSE '' END) 							AS InvoiceStatus,
					Case	when InvoiceType = 'Invoice' then
								case when Invoice.IsPOInvoice = true then concat('PO:', ifnull(Invoice.PONUmber, '')) else 'Non PO' END
							else InvoiceType end 																			as InvoiceType,
				Invoice.Comment 																							AS Description,
				IFNULL(Invoice.LastActionBy, '') 																			AS LastActionBy,
				IFNULL(DATE_FORMAT(Invoice.InvoiceDate, "%b %e, %Y"), '') 													AS InvoiceDate,
				IFNULL(DATE_FORMAT(convert_tz(Invoice.ScannedDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 			AS ScannedDate,
				IFNULL(DATE_FORMAT(convert_tz(Invoice.LastActionDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 		AS LastActionDate

		FROM Invoice
			INNER JOIN InvoiceStatus 	ON InvoiceStatus.StateId = Invoice.ApprovalStatusId
			left JOIN PausedInvoice 	ON PausedInvoice.InvoiceId = Invoice.InvoiceId
			LEFT JOIN Vendor			ON Invoice.VendorId = Vendor.VendorId
		WHERE Invoice.ClientId = @ClientId
				AND Invoice.IsDeleted = FALSE
				AND (
						(
							@isGlobalSearch = TRUE
							and (Invoice.InvoiceNo = @InvoiceNo 
									or Vendor.VendorNo = @Vendor
									or regexp_Like(IFNULL(Vendor.VendorName, ''), @GlobalSearch, 'mi')
									or concat(@SplitChar, ifnull(Invoice.PONumber, ''), @SplitChar) like Concat('%', @SplitChar, @PONumber, @SplitChar, '%')
									-- or Regexp_Like(CONCAT(IFNULL(Vendor.VendorName, ''), @Sep, IFNULL(Invoice.Comment, '')), @GlobalSearch, 'mi')
								)
						)
						OR (@isGlobalSearch = FALSE
								AND (
										-- Regexp_Like(IFNULL(Invoice.InvoiceNo, ''), @InvoiceNo, 'mi')
										Invoice.InvoiceNo = ifnull(@InvoiceNo, Invoice.InvoiceNo)
  										AND Regexp_Like(concat(IFNULL(Invoice.Comment, ''), @Sep, IFNULL(PausedInvoice.Comment, '')), @Comment, 'mi')
  								
  										AND Invoice.InvoiceTotal BETWEEN IFNULL(@InvoiceAmount1, Invoice.InvoiceTotal) AND IFNULL(@InvoiceAmount2, Invoice.InvoiceTotal)
  										AND Invoice.InvoiceType = IFNULL(@InvoiceType, Invoice.InvoiceType)
  										AND Invoice.IsPOInvoice = IFNULL(@POorNonPO, Invoice.IsPOInvoice)
										AND ifnull(Invoice.CheckNumber, '') = ifnull(IFNULL(@CheckNumber, Invoice.CheckNumber), '')
										AND ifnull(Invoice.IsConfidential, 0) = IFNULL(@isConfidential, ifnull(Invoice.IsConfidential, 0))
										and concat(@SplitChar, ifnull(Invoice.PONumber, ''), @SplitChar) like Concat('%', @SplitChar, ifnull(@PONumber, ''), @SplitChar, '%')

										AND IFNULL(Invoice.CompanyCode, '') = IFNULL(IFNULL(@CompanyCode, Invoice.CompanyCode), '')
 								
										AND Invoice.VendorId = IFNULL(@Vendor, Invoice.VendorId)
										AND Invoice.InvoiceDate BETWEEN IFNULL(@InvoiceDate1, Invoice.InvoiceDate) AND IFNULL(@InvoiceDate2, Invoice.InvoiceDate)
										AND Invoice.ScannedDate BETWEEN IFNULL(@ScanDate1, Invoice.ScannedDate) AND IFNULL(@ScanDate2, Invoice.ScannedDate)
										AND Invoice.LastActionDate BETWEEN IFNULL(@LastActionDate1, Invoice.LastActionDate) AND IFNULL(@LastActionDate2, Invoice.LastActionDate)
										AND (
												IFNULL(@MyInvoices, 0) = 0
												OR (
													IFNULL(@MyInvoices, 0) = 1
													AND (exists (
																select 1
																FROM 	InvoiceHistory chk
																WHERE 	chk.InvoiceId = Invoice.InvoiceId and Actor = pUserId
																limit 1)
															or exists (select	1 chk
																from	UserInvoiceAssignment chk
																where	chk.InvoiceId = Invoice.InvoiceId and UserId = pUserId
																limit 1
																)
														)
													)
												)
										AND LOCATE(CONCAT(',', IFNULL(Invoice.ApprovalStatusId, -1), ','), CONCAT('%,', IFNULL(IFNULL(@Status, Invoice.ApprovalStatusId), -1), ',%')) > 0
										AND LOCATE(CONCAT(',', IFNULL(Invoice.VendorSiteId, -1), ','), CONCAT('%,', IFNULL(IFNULL(@Department, Invoice.VendorSiteId), -1), ',%')) > 0

										and (
												@GLCode is null
												or (
													@GLCode is not NULL
													and exists (select 1 from GLCodeInInvoice chk where chk.InvoiceId = Invoice.InvoiceId limit 1)
													)
											)

									)
							)
					)
		ORDER BY 2, 3 DESC 
		LIMIT pPage, pRows;


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceApprove` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceApprove`(

-- noformat
	IN `pClientId` int,
	IN `pInvoiceId` int,
	IN `pUserId` varchar(36),
	IN `pForTesting` int,
	INOUT `pMessage` varchar(500))
ThisProc:
	BEGIN


		DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			GET DIAGNOSTICS CONDITION 1
			@p1 = MESSAGE_TEXT;
			SET pMessage = @p1;
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @p1, MYSQL_ERRNO = 1;
		END;

		SET SESSION group_concat_max_len = 1000000;


		SET @Now = UTC_TIMESTAMP();
		SET @DEBUGONLY = IFNULL(pForTesting, 0);
		SET pMessage = 'There was an issue with the approval.';

		SET @InvoiceId = pInvoiceId;
		SET @Approval = 1;
		SET @Response = 0;



		SET @ClientId = pClientId;
		SET @VendorSiteId = 0;
		SET @VendorId = 0;
		SET @AuthCode = '';
		SET @CostCenter = '';
		SET @ClientCompanyId = 0;
		SET @InvoiceTotal = 0.00;
		set @InvoiceTaxAmount = 0.00;
		set @FreightAmount = 0.00;
		SET @IsPO = 0;
		SET @IsDeleted = 0;
		SET @IsPaused = 0;
		SET @ApprovalStatusId = -1;
		SET @DepartmentId = 0;
		SET @ProjectTypeId = 0;
		SET @OrgId = 0;
		SET @AccountCode = '';
		SET @ApproverName = '';
		SET @IsAdmin = 0;
		SET @AssignBackToUserId = '';
		set @InitialStatus = '';
		set @NotificationMessage = 'There is an invoice awaiting your review.';
		set @OKResponse = 'Approved';
		

		/*
		**	Approval workflow overview
		**	==========================
		**	Once the document is approved it does the following:
		**		If the document was requested to be approved by someone else, 
		**			it comes back to the original user
		**		if the approver has a max amount 
		**			It is send to the managers 
		**		if neither is true then
		**			The next substep (or step) is selected and a new list of approvers are prepared
		**
		**
		**		FOR all cases, an approver MUST be active
		**		If no approver is available or selected, then the catch all is enacted
		**
		**	pMessage returns 
		** 		Approved/Submitted	=  ok 
		**		Exception 			=  OK but has exceptions
		** 		Final    			=  ok and there are no more steps
		**		else anything else is an error to be displayed
		*/


		/* 
		**
		**	Create the table that will hold all the approvers
		**
		**/
		CREATE TEMPORARY TABLE IF NOT EXISTS zz_Approvers (
			CId bigint,
			UserId char(36),
			Level int
		);


		/*	This is needed if the table is NOT a temp table */
		DELETE
			FROM zz_Approvers
		WHERE CID = CONNECTION_ID();




		/*
		**
		** Get information on who approved it
		**
		*/
		SELECT	CONCAT(u.LastName, ', ', u.FirstName) INTO @ApproverName
		FROM	User u
		WHERE	u.UserId = pUserId;
		IF ROW_COUNT() = 0 THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Unknown user', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;

		if exists (SELECT	cr.*
					FROM	ClientUserRoles cur
							INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
							INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
					WHERE	crf.FunctionKey = 'InvoiceApprove'
							and cr.isAdmin	= 1
							AND cur.UserId	= pUserId
					limit 	1) then 
			SET @IsAdmin = 1;
		END IF;






		/* 
		**
		**	Information about the Object
		**
		**/
		SELECT
				i.VendorSiteId,
				i.VendorId,
				i.InvoiceTotal, ifnull(i.Tax, 0), ifnull(i.FreightCharges, 0),
				i.VendorSiteId,
				i.ProjectTypeId,
				i.OrgId,
				i.AccountCode,
				i.IsPOInvoice,
				i.ApprovalStatusId,
				i.IsPaused,
				i.IsDeleted,
				v.AuthCode,
				cc.Id,
				CONCAT('Invoice for ', format(i.InvoiceTotal, 2), ' approval'),
				InvoiceStatus.StateName
		INTO	@CostCenter, @VendorId, @InvoiceTotal, @InvoiceTaxAmount, @FreightAmount,
				@DepartmentId, @ProjectTypeId, @OrgId, @AccountCode, @IsPo, @ApprovalStatusId, @IsPaused, @IsDeleted, @AuthCode, @ClientCompanyId, @NotificationMessage, @InitialStatus
		FROM	Invoice i
				INNER JOIN Vendor v						ON i.VendorId = v.VendorId
				inner join InvoiceStatus 				on i.ApprovalStatusId = InvoiceStatus.StateId 	
				LEFT JOIN ClientCompany cc				ON cc.ClientId = i.ClientId
															AND cc.CompanyCode = i.CompanyCode
															AND cc.IsActive = 1
		WHERE i.InvoiceId = @InvoiceId
				and i.ClientId = pClientId;

if @DEBUGONLY = 1 THEN
	select 'Info on Invoice', @CostCenter, @VendorId, @InvoiceTotal, @DepartmentId, @ProjectTypeId, @OrgId, @AccountCode, @IsPo, @ApprovalStatusId, @IsPaused, @IsDeleted, @AuthCode, @ClientCompanyId, @NotificationMessage, @InitialStatus;
end if;

		IF @IsDeleted = 1 THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The invoice is deleted.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;
		IF @IsPaused = 1 THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The invoice is paused.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;
		IF not @ApprovalStatusId in (1,3,6) THEN
			set @EMessage = '';
			select 	concat('The invoice''s status is currently ', StateName)
			into 	@EMessage
			from 	InvoiceStatus
			where 	StateId = @ApprovalStatusId;

			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @EMessage, MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;

	
		if @isPO = 1 then 
			SET @AdjustmentPercentPlus = 0;
			SET @AdjustmentPercentMinus = 0;
			set @AdjustmentAmountPlus = 0;		-- Priority is Percentage
			set @AdjustmentAmountMinus = 0;

			IF EXISTS ( SELECT	1
						FROM	ClientSpecificConfig
						WHERE	ClientSpecificConfigType = 29			-- ConsiderAdjustmentAmountForTreshold
						AND	ClientId = pClientId) THEN
	
				select	ifnull(-(AdjustmentPercent), 0), ifnull(-(AdjustmentAmount), 0)
				into 	@AdjustmentPercentMinus, @AdjustmentAmountMinus
				from	Client 
				where	ClientId = pClientId;
	
				IF EXISTS ( SELECT	1
							FROM	ClientSpecificConfig
							WHERE	ClientSpecificConfigType = 751		-- AllowNegativeThresholdTobeApprove
							AND		ClientId = pClientId) THEN
						SET @AdjustmentPercentPlus 	= @AdjustmentPercentMinus * -1;
						SET @AmountPercentPlus	 	= @AdjustmentAmountMinus * -1;
				END IF;
			END IF;
	
			set @Task = 0;
			if @ApprovalStatusId = 1 THEN		-- Captured
				set @Task = 6;
			elseif @ApprovalStatusId = 3 THEN	-- In approval
				set @Task = 0;
			elseif @ApprovalStatusId = 6 THEN	-- Exception
				set @Task = 2;
			end if;
	
			-- Check 
			if exists (select * from ClientExceptionRule where ClientId = pClientId and Task = @Task and ConfigurableExceptionType in  (0, 3)) THEN
				if not exists (select * from LineItemDetail lid where InvoiceId = pInvoiceId) THEN
					SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Missing line items.', MYSQL_ERRNO = 1;
					LEAVE ThisProc;
				end if;
				set @AmountCheckPlus 	= @InvoiceTotal + @InvoiceTaxAmount + @FreightAmount;
				set @AmountCheckMinus 	= @InvoiceTotal + @InvoiceTaxAmount + @FreightAmount;
	
				if @AdjustmentPercentMinus <> 0 then
					set @AmountCheckPlus	= @AmountCheckPlus 	+ (@AmountCheckPlus * @AdjustmentPercentPlus / 100);
					set @AmountCheckMinus	= @AmountCheckMinus + (@AmountCheckMinus * @AdjustmentPercentMinus / 100);
				elseif @AdjustmentAmountMinus <> 0 then
					set @AmountCheckPlus	= @AmountCheckPlus 	+ @AdjustmentAmountPlus;
					set @AmountCheckMinus	= @AmountCheckMinus + @AdjustmentAmountMinus;
				end if;
	
				if @DEBUGONLY = 1 THEN
					select 'Theshold',  @AmountCheckMinus, @AmountCheckPlus;
				end if;
	
				if not ifnull((	select	sum(lid.TotalAmount) 
								from	LineItemDetail lid 
								where	InvoiceId = pInvoiceId), @AmountCheckPlus) between @AmountCheckMinus and @AmountCheckPlus THEN
					if @AmountCheckMinus = @AmountCheckPlus then
						SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Sum of the line items do not match the invoice total.', MYSQL_ERRNO = 1;
						LEAVE ThisProc;
					else
						SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Adjustment amount exceeds the threshold configuration.', MYSQL_ERRNO = 1;
						LEAVE ThisProc;
					end if;
				end if;
			end if;

		end if;




	GeneralApprovalLogic:
		BEGIN

			SET @WorkflowType = 0;


			/* 
			**
			**	Information about the Current Step being approved
			**
			**/
			SET @ApprovalStepId = -1;
			SET @ApprovalSubStepId = -1;
			SET @ApprovalStepRule = 0;
			SET @CurrentStepOrderNo = -1;
			SET @CurrentSubStepOrderNo = -1;

			SET @MaxAllowedAmount = NULL;
			SET @ApprovalForwardingRule = -1;

			SET @SkipApprovalStepIfApproverAndAssignedToUsersAreTheSame = 0;


			/*
			**	If the current status of the object is not submitted for approval
			**	ApprovalStatusId=1		Captured
			**	ApprovalStatusId=2		Verified		(not used)
			**	ApprovalStatusId=3		In approval
			**	ApprovalStatusId=4		Approved
			**	ApprovalStatusId=5		Accepted
			**	ApprovalStatusId=6		Exception
			**	ApprovalStatusId=7		Paid
			**	ApprovalStatusId=8		Rejected
			**	ApprovalStatusId=9		Failed
			**	ApprovalStatusId=10		Payment initiated
			**	ApprovalStatusId=11		Funds recieved
			**	ApprovalStatusId=12		Payment approved
			**	ApprovalStatusId=13		EFT Synced
			**	ApprovalStatusId=99		PO exception
			*/


			/*
			** ABS(Invoice Total) for all checks
			*/
			IF EXISTS (SELECT	*
						FROM	ClientSpecificConfig
						WHERE	ClientId = @ClientId
						AND	ClientSpecificConfigType = 464) THEN
				SET @InvoiceTotal = ABS(@InvoiceTotal);
			END IF;

			/*
			** If The approver appears on the next step, Skip it
			*/
			IF EXISTS (SELECT	*
						FROM	ClientSpecificConfig
						WHERE	ClientId = @ClientId
						AND		ClientSpecificConfigType = 371) THEN
				SET @SkipApprovalStepIfApproverAndAssignedToUsersAreTheSame = 1;
			END IF;


			set @ApprovalSubStepId		= -1;
			set @ApprovalStepId			= -1;
			set @CurrentSubStepOrderNo	= -1;
			set @CurrentStepOrderNo		= -1;
			set @AssignBackToUserId		= -1;
			set @MaxAllowedAmount		= null;
			set @ApprovalForwardingRule	= -1;
			set @ApprovalStepRule		= -1;
			set @WorkFlowType			= -1;



			IF @ApprovalStatusId = 1
				OR @ApprovalStatusId = 6 THEN
				-- Select the first Step/Substep prioritizing the Company over any company
				SELECT	aStep.ApprovalStepId
				INTO 	@ApprovalStepId
				from 	ApprovalStep ass
						inner join 	ApprovalSubStep aStep	ON aStep.ApprovalStepId = ass.ApprovalStepId
						left join 	ClientCompany cc		on cc.Id = ass.ClientCompanyId
				where 	ass.ClientId = pClientId
						and ass.IsPO = @isPO
				order	by ifnull(ass.ClientCompanyId, -1) desc, aStep.OrderNo 
				LIMIT	1;

				Update Invoice Set ApprovalStatusId = 3 where InvoiceId = pInvoiceId;
				set @OKResponse = 'Submitted';
			END IF;



			IF @ApprovalStatusId = 3 THEN
				SELECT	uia.ApprovalSubStepId,
						aStep.ApprovalStepId,
						ass.OrderNo,
						aStep.OrderNo,
						uia.AssignBackToUserId,
						ass.MaxAllowedAmount,
						ass.ApprovalForwardingRule,
						aStep.ApprovalStepRule,
						aStep.WorkFlowType
				INTO 	@ApprovalSubStepId, 
						@ApprovalStepId, 
						@CurrentSubStepOrderNo, 
						@CurrentStepOrderNo, 
						@AssignBackToUserId, 
						@MaxAllowedAmount, 
						@ApprovalForwardingRule, 
						@ApprovalStepRule,
						@WorkFlowType
				FROM	UserInvoiceAssignment uia
						INNER JOIN ApprovalSubStep ass		ON ass.ApprovalSubStepId = uia.ApprovalSubStepId
						INNER JOIN ApprovalStep aStep		ON aStep.ApprovalStepId = ass.ApprovalStepId
		
						left join UserReassignmentHistory reassH	on reassH.SourceUserId = uia.UserId						-- reassign test
																	and Now() between reassH.DateFrom and reassH.DateTo		-- reassign test

				WHERE	uia.InvoiceId = @InvoiceId
						AND aStep.ClientId = @ClientId
						AND IFNULL(aStep.ClientCompanyId, -1) = IFNULL(@ClientCompanyId, IFNULL(aStep.ClientCompanyId, -1))
						AND (uia.UserId = pUserId OR @IsAdmin = 1 or reassH.TargetUserId = pUserId) 						-- reassign test
				LIMIT 1;
				IF @ApprovalSubStepId = -1 THEN
					SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The document is no longer in your queue.', MYSQL_ERRNO = 1;
					LEAVE ThisProc;
				END IF;


				/*
				**
				**	Add approver to the invoice history
				**
				*/
				IF @DEBUGONLY = 1 THEN
					SELECT
						'InvoiceHistory',
						@InvoiceId,
						@ApproverName AS Actor,
						'Approve' AS Action,
						@Now AS ActionDate,
						'' AS PreviousData,
						'' AS NewData,
						'' AS Field,
						@InitialStatus AS InitialStatus,
						'' AS CurentStatus,
						pUserId AS ActorId,
						NULL AS OldId;
				end if;

				INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId, OldID)
					SELECT
						@InvoiceId,
						@ApproverName AS Actor,
						'Approve' AS Action,
						@Now AS ActionDate,
						'' AS PreviousData,
						'' AS NewData,
						'' AS Field,
						@InitialStatus AS InitialStatus,
						'In Approval' AS CurentStatus,
						pUserId AS ActorId,
						NULL AS OldId;

				/*
				**
				** If the field has a AssignBackToUserId then assign this back to the user ONLY if they are active, if they are not, catch all
				**
				*/
				IF @AssignBackToUserId IS NOT NULL THEN
					IF EXISTS (SELECT	1
								FROM	User u
								WHERE	u.UserId = @AssignBackToUserId
								AND		u.IsActive = 1) THEN
						IF @DEBUGONLY = 1 THEN
							SELECT
								'UserInvoiceAssignment (AssignBack)',
								@InvoiceId,
								@AssignBackToUserId,
								0 AS Type,
								1 AS State,
								@ApprovalSubStepId,
								NULL AS HoldStartDate,
								NULL AS HoldEndDate,
								@Now AS DateCreated,
								NULL AS AssignBackToUserId,
								NULL AS Comments;
						end if;

						INSERT INTO zz_Approvers
							SELECT
								CONNECTION_ID(),
								AssignBackToUserId,
								null;

-- 						INSERT INTO UserInvoiceAssignment (InvoiceId, UserId, Type, State, ApprovalSubStepId, HoldStartDate, HoldEndDate, DateCreated, AssignBackToUserId, Comments)
-- 							SELECT	@InvoiceId,
-- 									@AssignBackToUserId,
-- 									0 AS Type,
-- 									1 AS State,
-- 									@ApprovalSubStepId,
-- 									NULL AS HoldStartDate,
-- 									NULL AS HoldEndDate,
-- 									@Now AS DateCreated,
-- 									NULL AS AssignBackToUserId,
-- 									NULL AS Comments;

						-- call _x_Notify(@AssignBackToUserId, 'Invoice approval', 'There is an invoice awaiting your review.', 'Approval', 'Invoice', @InvoiceId, null);
						LEAVE ThisProc;
					ELSE
						/* The user that is supposed to get the approval is no longer active, use the catch all users */
						LEAVE GeneralApprovalLogic;
					END IF;
				END IF;


				/*
				**	ApprovalForwardingRule
				**
				**	The forwarding rul that the document was on when it was apporved is what determines the testing until the next step is found.
				**	If the next steps being considered are another rules we do not care, we still appy the setp approved ApprovalForwardingRule!!!!!!
				**
				**	0	= ByAmount After approval, loop thru all steps/substeps until the Maxallowedamount(or NULL)>Doc Amount		
				**	1	= ByStep/Substep
				**	2	= same as 3 
				**	3	= if Maxallowedamount>=DocumentAmount Then NextSub Else Jump this step and go to the next step (first substep)
				**	4	= Check the GLCode in the ApprovalHistory and cross reference them to the users on this next step.
				**			The next step MUST be a ApprovalStepUserFilterType = 4 then it will be selected else it follows Step 0
				**	5	= ByAmountUsingPriority (VNdor and/or AuthCode ando Costcenter
				**	6 	= ?
				**	7	= ?
				**	8	= ? 
				**	9	= ?
				**	10	= ? 
				**	11	= ?
				**	12	= ?
				**	13	= ?
				*/

				IF @DEBUGONLY = 1 THEN
					SELECT
						@ApprovalSubStepId,
						@ApprovalStepId,
						@CurrentSubStepOrderNo,
						@CurrentStepOrderNo,
						@AssignBackToUserId,
						@MaxAllowedAmount,
						@ApprovalForwardingRule,
						@ApprovalStepRule;
				END IF;

				IF @ApprovalForwardingRule = 5 THEN
					SET @MatchVendor = 0;
					SET @MatchAuthCode = 0;
					SET @MatchCostCenter = 0;

					IF @DEBUGONLY = 1 THEN
						select 'Checking ApproverByAmount', @VendorId, @AuthCode, @CostCenter, @isPo, @WorkflowType, @ClientCompanyId, @InvoiceTotal;
						SELECT
							aba.*,
							case when Vendorid is null then 1 			else ifnull(IFNULL(Vendorid, @VendorId) = @VendorId, 0) end			AS MatchVendor,
							case when aba.AuthCode is null then 1 		else ifnull(IFNULL(aba.AuthCode, @AuthCode) = @AuthCode, 0) end		AS MatchAuthCode,
							case when aba.CostCenters is null then 1 	else (FIND_IN_SET(IFNULL(@CostCenter, 'All'), CONCAT(IFNULL(aba.CostCenters, ''), ',All')) > 0) end AS MatchCostCenter
						FROM ApproverByAmount aba
							WHERE 	UserId = pUserId
									AND @InvoiceTotal > aba.MaximumAllowedAmount
									AND (
											(@isPo = 0		AND aba.WorkflowType IN (0, 2)
															and ifnull(aba.IsPOIsNoPOIsBoth, 0) = 0
											)
											OR (@isPo = 1	AND aba.WorkflowType IN (0, 2)
															and ifnull(aba.IsPOIsNoPOIsBoth, 1) = 1
											)
										)
									AND (IFNULL(ClientCompanyId, @ClientCompanyId) = @ClientCompanyId
											OR @ClientCompanyId IS NULL);
					end if;

					SELECT
						MatchVendor,
						MatchAuthCode,
						MatchCostCenter INTO @MatchVendor, @MatchAuthCode, @MatchCostCenter
					FROM (SELECT	aba.*,
									case when Vendorid is null then 1 			else ifnull(IFNULL(Vendorid, @VendorId) = @VendorId, 0) end			AS MatchVendor,
									case when aba.AuthCode is null then 1 		else ifnull(IFNULL(aba.AuthCode, @AuthCode) = @AuthCode, 0) end		AS MatchAuthCode,
		-- 							IFNULL(Vendorid = @VendorId, 0) 							AS MatchVendor,
		-- 							IFNULL(aba.AuthCode = @AuthCode, 0) 						AS MatchAuthCode,
									case when aba.CostCenters is null then 1 	else (FIND_IN_SET(IFNULL(@CostCenter, 'All'), CONCAT(IFNULL(aba.CostCenters, ''), ',All')) > 0) end AS MatchCostCenter
							FROM 	ApproverByAmount aba
							WHERE 	UserId = pUserId
									AND @InvoiceTotal > aba.MaximumAllowedAmount
									AND (
											(@isPo = 0		AND aba.WorkflowType IN (0, 2)
															and ifnull(aba.IsPOIsNoPOIsBoth, 0) = 0
											)
											OR (@isPo = 1	AND aba.WorkflowType IN (0, 2)
															and ifnull(aba.IsPOIsNoPOIsBoth, 1) = 1
											)
										)
									AND (IFNULL(ClientCompanyId, @ClientCompanyId) = @ClientCompanyId
											OR @ClientCompanyId IS NULL)
						) DATA
							ORDER BY ((MatchVendor * 4) + (MatchAuthCode * 2) + MatchCostCenter) DESC,
					MatchVendor DESC, MatchAuthCode DESC, MatchCostCenter DESC
					LIMIT 1;

					IF @DEBUGONLY = 1 THEN
						select @MatchVendor, @MatchAuthCode, @MatchCostCenter;
					end if;


-- 					set @msg = CONCAT(ifnull(pUserId, 'NA'), '--', ifnull(@InvoiceTotal, 'NA'), '--', ifnull(@isPo, 'NA'), '--', ifnull(@WorkflowType, 'NA'), '--', ifnull(@ClientCompanyId, 'NA'));
-- 					SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @msg, MYSQL_ERRNO = 1;

					INSERT INTO zz_Approvers
						SELECT
							CONNECTION_ID(),
							DATA.SecondApproverId,
							(@ApprovalLevel + 1) /*This is the next set of employees that will will need to check */
						FROM (SELECT
								aba.*,
								case when Vendorid is null then 1 			else ifnull(IFNULL(Vendorid, @VendorId) = @VendorId, 0) end			AS MatchVendor,
								case when aba.AuthCode is null then 1 		else ifnull(IFNULL(aba.AuthCode, @AuthCode) = @AuthCode, 0) end		AS MatchAuthCode,
	-- 							IFNULL(Vendorid = @VendorId, 0) 							AS MatchVendor,
	-- 							IFNULL(aba.AuthCode = @AuthCode, 0) 						AS MatchAuthCode,
								case when aba.CostCenters is null then 1 	else (FIND_IN_SET(IFNULL(@CostCenter, 'All'), CONCAT(IFNULL(aba.CostCenters, ''), ',All')) > 0) end AS MatchCostCenter
							FROM ApproverByAmount aba
							WHERE 	UserId = pUserId
									AND @InvoiceTotal > aba.MaximumAllowedAmount
									AND (
											(@isPo = 0		AND aba.WorkflowType IN (0, 2)
															and ifnull(aba.IsPOIsNoPOIsBoth, 0) = 0
											)
											OR (@isPo = 1	AND aba.WorkflowType IN (0, 2)
															and ifnull(aba.IsPOIsNoPOIsBoth, 1) = 1
											)
										)
									AND (IFNULL(ClientCompanyId, @ClientCompanyId) = @ClientCompanyId
											OR @ClientCompanyId IS NULL)
								) DATA
						WHERE MatchVendor = @MatchVendor
						AND MatchAuthCode = @MatchAuthCode
						AND MatchCostCenter = @MatchCostCenter;

					IF @DEBUGONLY = 1 THEN
						select * from zz_Approvers;
					end if;


					--
					-- If any approved was selected by Amount then Leave
					--
					IF EXISTS (SELECT 1 FROM zz_Approvers WHERE CId = CONNECTION_ID()) THEN
						IF @DEBUGONLY = 1 THEN
							SELECT
								'Leaving Filtering loop, found approver by amount';
						END IF;
						LEAVE GeneralApprovalLogic;
					END IF;


					IF @ApprovalStepRule <> 7 THEN -- Steven
						IF ROW_COUNT() = 0 THEN
							SET pMessage = 'Final';
						END IF;
						LEAVE GeneralApprovalLogic;
					END IF;
				END IF;


			END IF;

			IF @ApprovalForwardingRule = 2
				OR @ApprovalForwardingRule = 3 THEN
				IF @MaxAllowedAmount < @InvoiceTotal THEN
					SET @CurrentSubStepOrderNo = 999999;	#This will ensure that there are no sub steps after this one in the currentstep and jump to the next Setep
				END IF;
			END IF;



			/*
			** Keep looping until we find the next step or there are no more steps
			**
			**	If no step found then return FULLYAPPROVED (new)
			**
			*/
			SET @IssueWithLogic = 0;
		FindNextSubStep:
			WHILE @IssueWithLogic <= 30 DO
				SET @IssueWithLogic = @IssueWithLogic + 1;
				/* 
				**	Information about the the next Sub Step
				**/
				SET @ApprovalSubStepId = -1;
				SET @CheckExpression = NULL;

IF @DEBUGONLY = 1 THEN
	select 'Find the next step after this one.',  @ApprovalStepId, @CurrentSubStepOrderNo, @ApprovalForwardingRule, @InvoiceTotal;
end if;	


				SELECT
					ApprovalSubStepId,
					CheckExpression INTO @ApprovalSubStepId, @CheckExpression
				FROM ApprovalSubStep
				WHERE ApprovalStepId = @ApprovalStepId
						AND @CurrentSubStepOrderNo < OrderNo
						AND (@ApprovalForwardingRule NOT IN (0, 4)
								OR (@ApprovalForwardingRule = 0
										AND IFNULL(MaxAllowedAmount, 9999999999999) > @InvoiceTotal)
								OR (@ApprovalForwardingRule = 4
										AND (
												(IFNULL(MaxAllowedAmount, 9999999999999) > @InvoiceTotal)
												OR EXISTS (SELECT 1
															FROM ApprovalHistory ah
															WHERE ah.InvoiceId = @InvoiceId)
												)
									)
							)
				ORDER BY Orderno
				LIMIT 1;

				IF @DEBUGONLY = 1 THEN
					SELECT 
						@ApprovalSubStepId,
						@ApprovalStepId,
						@CurrentSubStepOrderNo,
						@CurrentStepOrderNo,
						@AssignBackToUserId,
						@MaxAllowedAmount,
						@ApprovalForwardingRule,
						@ApprovalStepRule,
						@CheckExpression;
				END IF;

				IF @ApprovalSubStepId <> -1 THEN
					LEAVE FindNextSubStep;
				END IF;





				/*
				**	No more substeps so no get the next step
				**
				**
				**	WorkflowType=0		for Invoice
				**	WorkflowType=1		for PO/PR
				**	WorkflowType=2		for Invoice and PO/PR
				**	WorkflowType=3		for STOCK
				**/
				SET @ApprovalStepId = -1;
				SET @CurrentSubStepOrderNo = -1;
				SELECT
					ApprovalStepId,
					ApprovalStepRule,
					WorkflowType,
					OrderNo INTO @ApprovalStepId, @ApprovalStepRule, @WorkflowType, @CurrentStepOrderNo
				FROM ApprovalStep
				WHERE ClientId = @ClientId
				AND IFNULL(ClientCompanyId, -1) = IFNULL(@ClientCompanyId, IFNULL(ClientCompanyId, -1))
				AND WorkflowType IN (0, 2)
				AND isPo = @IsPo
				AND @CurrentStepOrderNo < OrderNo
				ORDER BY OrderNo
				LIMIT 1;

				if @DEBUGONLY = 1 then
					select @ApprovalStepId, @ApprovalStepRule, @WorkflowType, @CurrentStepOrderNo;
				end if;

				IF @ApprovalStepId = -1 THEN
					SET pMessage = 'Final';
					LEAVE FindNextSubStep;
				END IF;

			END WHILE;

			/*
			** Logic error
			*/
			IF @IssueWithLogic > 30 THEN
				SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Unknown error, please report this to support.', MYSQL_ERRNO = 1;
				LEAVE ThisProc;
			END IF;


			if @DEBUGONLY = 1 THEN
				select 'Get approvers and filter out everyone that is not on the FilterType', @ApprovalSubStepId;
			end if;



			/*
			**
			** Get approvers and filter out everyone that is not on the FilterType
			** If there are no approvers, then get the next filterType
			**
			*/
			SET @ApprovalStepUserFilterType = -1;
			SET @curFilters_eof = 0;

			BEGIN
				DECLARE varApprovalForwardingRule int;
				DECLARE curFilters CURSOR FOR
				SELECT
					ApprovalStepUserFilterType
				FROM ApprovalSubStepUserFilter assuf
				WHERE ApprovalSubStepId = @ApprovalSubStepId;
				DECLARE CONTINUE HANDLER FOR NOT FOUND SET @curFilters_eof = 1;
				OPEN curFilters;
			FiltersLoop:
				LOOP
					SET @curFilters_eof = 0;
					SET @ApprovalStepUserFilterType = -1;
					FETCH FROM curFilters INTO varApprovalForwardingRule;


					IF @curFilters_eof = 1 THEN
						LEAVE FiltersLoop;
					END IF;
					SET @ApprovalStepUserFilterType = varApprovalForwardingRule;
					IF @ApprovalStepUserFilterType = 0 THEN
						IF @DEBUGONLY = 1 THEN
							SELECT
								'Filtering by Vendor...';
						END IF;

						INSERT INTO zz_Approvers
							SELECT
								CONNECTION_ID(),
								User.UserId,
								0
							FROM ApprovalSubStepUser ApprU
								INNER JOIN User
									ON User.UserId = ApprU.UserId
									AND User.ClientId = @ClientId
									AND User.IsActive = 1
									AND User.UserId <> pUserId
								INNER JOIN ApprovalSubStepUserVendor filter
									ON filter.ApprovalSubStepId = ApprU.ApprovalSubStepId
									AND filter.UserId = User.UserId
									AND filter.VendorId = @VendorId
							WHERE ApprU.ApprovalSubStepId = @ApprovalSubStepId
							AND ApprU.ManualAssignmentOnly = 0;
					ELSEIF @ApprovalStepUserFilterType = 1 THEN
						IF @DEBUGONLY = 1 THEN
							SELECT
								'Filtering by POPurchaser...';
						END IF;
						SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Filtering by POPurchaser not yet implemented yet.', MYSQL_ERRNO = 1;
						LEAVE ThisProc;
					ELSEIF @ApprovalStepUserFilterType = 2 THEN
						IF @DEBUGONLY = 1 THEN
							SELECT
								'Filtering by Organization...';
						END IF;
						INSERT INTO zz_Approvers
							SELECT
								CONNECTION_ID(),
								User.UserId,
								0
							FROM ApprovalSubStepUser ApprU
								INNER JOIN User
									ON User.UserId = ApprU.UserId
									AND User.ClientId = @ClientId
									AND User.IsActive = 1
									AND User.UserId <> pUserId
								INNER JOIN ApprovalSubStepOrganization filter
									ON filter.ApprovalSubStepId = ApprU.ApprovalSubStepId
									AND filter.UserId = User.UserId
									AND filter.OrganizationId = @OrgId
							WHERE ApprU.ApprovalSubStepId = @ApprovalSubStepId
							AND ApprU.ManualAssignmentOnly = 0;

					ELSEIF @ApprovalStepUserFilterType = 3 THEN
						IF @DEBUGONLY = 1 THEN
							SELECT
								'Filtering by department...';
						END IF;
						INSERT INTO zz_Approvers
							SELECT
								CONNECTION_ID(),
								User.UserId,
								0
							FROM ApprovalSubStepUser ApprU
								INNER JOIN User
									ON User.UserId = ApprU.UserId
									AND User.ClientId = @ClientId
									AND User.IsActive = 1
									AND User.UserId <> pUserId
								INNER JOIN ApprovalSubStepUserDepartment filter
									ON filter.ApprovalSubStepId = ApprU.ApprovalSubStepId
									AND filter.UserId = User.UserId
									AND filter.DepartmentId = @DepartmentId
							WHERE ApprU.ApprovalSubStepId = @ApprovalSubStepId
							AND ApprU.ManualAssignmentOnly = 0;
					ELSEIF @ApprovalStepUserFilterType = 4 THEN
						IF @DEBUGONLY = 1 THEN
							SELECT
								'Filtering by GL...';
						END IF;
						INSERT INTO zz_Approvers
							SELECT
								CONNECTION_ID(),
								User.UserId,
								0
							FROM ApprovalSubStepUser ApprU
								INNER JOIN User
									ON User.UserId = ApprU.UserId
									AND User.ClientId = @ClientId
									AND User.IsActive = 1
									AND User.UserId <> pUserId
								INNER JOIN ApprovalSubStepUserGL filter
									ON filter.ApprovalSubStepId = ApprU.ApprovalSubStepId
									AND filter.UserId = User.UserId
									AND filter.GLCodeId IN (SELECT
											GLCodeId
										FROM ApprovalHistory
										WHERE InvoiceId = @InvoiceId)
							WHERE ApprU.ApprovalSubStepId = @ApprovalSubStepId
							AND ApprU.ManualAssignmentOnly = 0;
					ELSEIF @ApprovalStepUserFilterType = 5 THEN
						IF @DEBUGONLY = 1 THEN
							SELECT
								'Filtering by Vendor department...';
						END IF;
						INSERT INTO zz_Approvers
							SELECT
								CONNECTION_ID(),
								User.UserId,
								0
							FROM ApprovalSubStepUser ApprU
								INNER JOIN User
									ON User.UserId = ApprU.UserId
									AND User.ClientId = @ClientId
									AND User.IsActive = 1
									AND User.UserId <> pUserId
								INNER JOIN ApprovalSubStepUserVendorDepartment filter
									ON filter.ApprovalSubStepId = ApprU.ApprovalSubStepId
									AND filter.UserId = User.UserId
									AND filter.VendorId = @VendorId
									AND filter.DepartmentId = @DepartmentId
							WHERE ApprU.ApprovalSubStepId = @ApprovalSubStepId
							AND ApprU.ManualAssignmentOnly = 0;
					ELSEIF @ApprovalStepUserFilterType = 6 THEN
						IF @DEBUGONLY = 1 THEN
							SELECT
								'Filtering by Vendor account number...';
						END IF;
						INSERT INTO zz_Approvers
							SELECT
								CONNECTION_ID(),
								User.UserId,
								0
							FROM ApprovalSubStepUser ApprU
								INNER JOIN User
									ON User.UserId = ApprU.UserId
									AND User.ClientId = @ClientId
									AND User.IsActive = 1
									AND User.UserId <> pUserId
								INNER JOIN ApprovalSubStepUserVendorAccountNumber filter
									ON filter.ApprovalSubStepId = ApprU.ApprovalSubStepId
									AND filter.UserId = User.UserId
									AND filter.VendorId = @VendorId
									AND filter.AccountNumber = @AccountCode
							WHERE ApprU.ApprovalSubStepId = @ApprovalSubStepId
							AND ApprU.ManualAssignmentOnly = 0;
					ELSEIF @ApprovalStepUserFilterType = 7 THEN
						IF @DEBUGONLY = 1 THEN
							SELECT
								'Filtering by project...';
						END IF;
						INSERT INTO zz_Approvers
							SELECT
								CONNECTION_ID(),
								User.UserId,
								0
							FROM ApprovalSubStepUser ApprU
								INNER JOIN User
									ON User.UserId = ApprU.UserId
									AND User.ClientId = @ClientId
									AND User.IsActive = 1
									AND User.UserId <> pUserId
								INNER JOIN ApprovalSubStepUserProject filter
									ON filter.ApprovalSubStepId = ApprU.ApprovalSubStepId
									AND filter.UserId = User.UserId
									AND filter.ProjectTypeId = @ProjectTypeId
							WHERE ApprU.ApprovalSubStepId = @ApprovalSubStepId
							AND ApprU.ManualAssignmentOnly = 0;
					ELSEIF @ApprovalStepUserFilterType = 8 THEN
						IF @DEBUGONLY = 1 THEN
							SELECT
								'Filtering by Vendor Org Data...';
						END IF;
						INSERT INTO zz_Approvers
							SELECT
								CONNECTION_ID(),
								User.UserId,
								0
							FROM ApprovalSubStepUser ApprU
								INNER JOIN User
									ON User.UserId = ApprU.UserId
									AND User.ClientId = @ClientId
									AND User.IsActive = 1
									AND User.UserId <> pUserId
								INNER JOIN ApprovalSubStepUserVendorOrgData filter
									ON filter.ApprovalSubStepId = ApprU.ApprovalSubStepId
									AND filter.UserId = User.UserId
									AND filter.VendorId = @VendorId
									AND filter.OrgId = @OrgId
							WHERE ApprU.ApprovalSubStepId = @ApprovalSubStepId
							AND ApprU.ManualAssignmentOnly = 0;
					ELSEIF @ApprovalStepUserFilterType = 9 THEN
						IF @DEBUGONLY = 1 THEN
							SELECT
								'Filtering by PurchasedForDepartment...';
						END IF;
						SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Filtering by PurchaserForDepartment not implemented yet.', MYSQL_ERRNO = 1;
						LEAVE ThisProc;
					END IF;


					IF EXISTS (SELECT
								COUNT(*)
							FROM zz_Approvers
							WHERE CId = CONNECTION_ID()) THEN
						IF @DEBUGONLY = 1 THEN
							SELECT
								'Leaving Filtering loop';
						END IF;
						LEAVE FiltersLoop;
					END IF;


				END LOOP;
				CLOSE curFilters;
			END;

			/*
			** if there are no user filters then grab all the users in that substep
			*/
			IF NOT EXISTS (SELECT
						*
					FROM ApprovalSubStepUserFilter
					WHERE ApprovalSubStepId = @ApprovalSubStepId) THEN
				INSERT INTO zz_Approvers
					SELECT
						CONNECTION_ID(),
						User.UserId,
						0
					FROM ApprovalSubStepUser ApprU
						INNER JOIN User
							ON User.UserId = ApprU.UserId
							AND User.ClientId = @ClientId
							AND User.IsActive = 1
							AND User.UserId <> pUserId
					WHERE ApprU.ApprovalSubStepId = @ApprovalSubStepId
					AND ApprU.ManualAssignmentOnly = 0;
			END IF;



		-- 		/* 
		-- 		**
		-- 		**	if any approver has a max Amount allowed do the following
		-- 		**
		-- 		*/
		-- 		IF EXISTS (SELECT
		-- 					1
		-- 				FROM ApproverByAmount
		-- 				WHERE ApproverByAmount.UserId IN (SELECT
		-- 						UserId
		-- 					FROM zz_Approvers za
		-- 					WHERE CID = CONNECTION_ID())) THEN
		-- 			/*
		-- 			**
		-- 			** Get all limits for all employees
		-- 			**
		-- 			*/
		-- 			SET @ApprovalLevel = -1;	/* Used to filter only those that may have limits */
		-- 			SET @IssueWithLogic = 0;	/* used for resursiveness and to no exceed 30 times */
		-- 
		-- 			DROP TEMPORARY TABLE IF EXISTS TManagers;
		-- 			CREATE TEMPORARY TABLE TManagers ENGINE = MEMORY AS
		-- 			SELECT
		-- 				aba.UserId AS ApproverId,
		-- 				aba.MaximumAllowedAmount,
		-- 				aba.VendorId,
		-- 				aba.CostCenters,
		-- 				aba.SecondApproverId AS ManagerId
		-- 			FROM ApproverByAmount aba
		-- 				INNER JOIN User u
		-- 					ON u.UserId = aba.SecondApproverId
		-- 					AND u.IsActive = 1
		-- 			WHERE aba.ClientCompanyId = @ClientCompanyId
		-- 			AND aba.WorkflowType = 0
		-- 			AND (aba.IsPOIsNoPOIsBoth IS NULL
		-- 			OR aba.IsPOIsNoPOIsBoth = @IsPO);
		-- 
		-- 
		-- 			WHILE ROW_COUNT() > 0
		-- 				AND @IssueWithLogic < 30 DO
		-- 				SET @IssueWithLogic = @IssueWithLogic + 1;
		-- 				SET @ApprovalLevel = @ApprovalLevel + 1;
		-- 				INSERT INTO zz_Approvers
		-- 					SELECT
		-- 						CONNECTION_ID(),
		-- 						tMgr.ManagerId,
		-- 						(@ApprovalLevel + 1) /*This is the next set of employees that will will need to check */
		-- 					FROM zz_Approvers TAppr
		-- 						INNER JOIN TManagers tMgr
		-- 							ON tMgr.ApproverId = TAppr.UserId
		-- 							AND tMgr.MaximumAllowedAmount < @InvoiceTotal
		-- 							AND (tMgr.VendorId IS NULL
		-- 							OR tMgr.VendorId = @VendorId)
		-- 							AND (tMgr.CostCenters IS NULL
		-- 							OR tMgr.CostCenters = ''
		-- 							OR FIND_IN_SET(@Department, tMgr.CostCenters) > 0)
		-- 						LEFT JOIN zz_Approvers AlreadyExists
		-- 							ON AlreadyExists.CID = CONNECTION_ID()
		-- 							AND AlreadyExists.UserId = tMgr.ManagerId
		-- 					WHERE TAppr.CID = CONNECTION_ID()
		-- 					AND TAppr.Level = @ApprovalLevel		/* this is the current level we are checking, the lover levels have already been done*/
		-- 					AND AlreadyExists.UserId IS NULL;		/* only insert if the employee hasn't already been selected */
		-- 			END WHILE;
		-- 		END IF;

		END GeneralApprovalLogic;

		/*
		** Final Approved 
		**	
		**	Now do this:
		**		
		**
		*/
		IF pMessage = 'Final' THEN
			set pMessage = '';
			IF @DEBUGONLY = 1 THEN
				SELECT 'Calling final approval...';
			END IF;
			CALL _x_InvoiceApproveFinal(@InvoiceId, pUserId, 0, 0, @DEBUGONLY, pMessage);
			if pMessage <> 'Final' THEN
				select pMessage;
				SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = pMessage, MYSQL_ERRNO = 1;
			end if;
			LEAVE ThisProc;
		END IF;

		/* 
		**
		**	CatchAll - Something in the step was not caught, so it falls to this.
		**
		*/
		IF NOT EXISTS (SELECT
					*
				FROM zz_Approvers
				WHERE CID = CONNECTION_ID()) THEN
			IF @DEBUGONLY = 1 THEN
				SELECT
					'No approvers getting Catchall users...';
			END IF;
			INSERT INTO zz_Approvers
				SELECT
					CONNECTION_ID(),
					User.UserId,
					0
				FROM ApprovalSubStepCatchAllUsers CatchAll
					INNER JOIN User
						ON User.ClientId = @ClientId
						AND User.UserId = CatchAll.UserId
				WHERE ApprovalSubStepId = @ApprovalSubStepId
				AND User.IsActive = 1;
		END IF;


		/*
		**
		**	Load all the approvers to their respective queues
		**	Type	= 0	Approval
		**			= 1 Exception
		**			= 2 Partial approval
		**	State 	= 1 Notification ? 
		**			= 2 Assigned invoice
		**			= 3 Delegated invoice (Request)
		**			= 4 Escalated invoice
		**
		*/

		IF @DEBUGONLY = 1 THEN
			select * from zz_Approvers;
		end if;

		IF @DEBUGONLY = 1 THEN
			SELECT	
				'UserInvoiceAssignment',
				@InvoiceId,
				zz_Approvers.UserId,
				0 AS Type,
				1 AS State,
				@ApprovalSubStepId,
				NULL AS HoldStartDate,
				NULL AS HoldEndDate,
				@Now AS DateCreated,
				NULL AS AssignBackToUserId,
				NULL AS Comments
			FROM zz_Approvers
			WHERE CID = CONNECTION_ID();
		end if;

		DELETE
			FROM UserInvoiceAssignment
		WHERE InvoiceId = @InvoiceId;

		delete Data
			from	UserNotification Data
					inner join User u	on u.UserId = Data.UserId
			where 	u.ClientId = @ClientId
					and Data.Source = 'Approval' 
					and Data.LinkPage = 'Invoice' 
					and Data.LinkValue = @InvoiceId 
					and Data.ReadDate is null;

		INSERT INTO UserInvoiceAssignment (InvoiceId, UserId, Type, State, ApprovalSubStepId, HoldStartDate, HoldEndDate, DateCreated, AssignBackToUserId, Comments)
			SELECT	@InvoiceId,
					zz_Approvers.UserId,
					0 						AS Type,
					1 						AS State,
					@ApprovalSubStepId,
					NULL 					AS HoldStartDate,
					NULL 					AS HoldEndDate,
					@Now 					AS DateCreated,
					NULL 					AS AssignBackToUserId,
					NULL 					AS Comments
			FROM	zz_Approvers
			WHERE	CID = CONNECTION_ID();
		
		SELECT	GROUP_CONCAT(distinct UserId separator ';')
		into 	@Users
		from 	zz_Approvers
		WHERE	CID = CONNECTION_ID();

		call _x_Notify(@Users, 'Invoice approval', @NotificationMessage, 'Approval', 'Invoice', @InvoiceId, null);

		IF EXISTS (SELECT	1
					FROM	zz_Approvers
					WHERE	CID = CONNECTION_ID()) THEN
			SET pMessage = @OKResponse;
		END IF;



		/*
		** Get all approvers and create 1 line: "Penning, Steven;Penning Patrick;Penning, Cathy"
		*/
		SET @InvoiceHistoryApprovers = '';
		SELECT	GROUP_CONCAT(CONCAT(u.LastName, ', ', u.FirstName) order by u.LastName SEPARATOR ';') 
		INTO	@InvoiceHistoryApprovers
		FROM 	zz_Approvers
				INNER JOIN User u		ON u.UserId = zz_Approvers.UserId
		WHERE 	CID = CONNECTION_ID();

		/*
		**
		**	Add to the invoice history
		**
		*/
		IF @DEBUGONLY = 1 THEN
			SELECT
				'InvoiceHistory',
				@InvoiceId,
				'System' AS Actor,
				'Notification' AS Action,
				@Now AS ActionDate,
				@ApproverName AS PreviousData,
				@InvoiceHistoryApprovers AS NewData,
				'Approvers' AS Field,
				@InitialStatus AS InitialStatus,
				'In Approval' AS CurentStatus,
				'00000000-0000-0000-0000-000000000000' AS ActorId,
				NULL AS OldId;
		end if;

		INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId, OldID)
			SELECT
				@InvoiceId,
				'System' AS Actor,
				'Notification' AS Action,
				@Now AS ActionDate,
				@ApproverName AS PreviousData,
				@InvoiceHistoryApprovers AS NewData,
				'Approvers' AS Field,
				@InitialStatus AS InitialStatus,
				'In Approval' AS CurentStatus,
				'00000000-0000-0000-0000-000000000000' AS ActorId,
				NULL AS OldId;


	END ThisProc ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceApproveFinal` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceApproveFinal`(
-- noformat
	IN pInvoiceId 					int,
	IN pUserId 						varchar(36),
	IN pSubmittedThruRMS 			bit,
	IN pCalledFromAutoApproval 		bit,
	IN pForTesting 					int,
	INOUT pMessage 					varchar(500))
ThisProc:
	BEGIN
		DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			GET DIAGNOSTICS CONDITION 1
			@p1 = MESSAGE_TEXT;
			SET pMessage = @p1;
		END;

		SET @Now = UTC_TIMESTAMP();
		SET @DEBUGONLY = IFNULL(pForTesting, 0);
		SET pUserId = IFNULL(pUserId, '00000000-0000-0000-0000-000000000000');
		SET pMessage = 'There was an issue with the final approval.';

		SET @InvoiceId = pInvoiceId;
		SET @IsPO = 0;
		SET @ClientId = 0;
		SET @isArchived = 0;
		SET @CostCenter = '';
		SET @OriginalApprovalStatusId = 0;
		SET @ApprovalStatusId = 0;
		SET @isVersace = 0;
		SET @isBOL = 0;
		SET @isHAULER = 0;
		SET @isProfitDistribution = 0;
		SET @InvoiceBalance = 0;

		SET @SendBOLToApprovalOnDataEntry = 0;
		SET @CalculateInvoiceTotalWithTax = 0;
		SET @ExcludeTaxFromInvoiceTotalForNoPOApproval = 0;
		SET @IgnorePOExistsWhenApprovingOrAccepting = 0;
		SET @KeepInvoiceTypeBOLUnchanged = 0;
		SET @ShowSubmitThroughRMSButtonForArchive = 0;
		SET @SetPostingDateSameAsApprovedDateWhenApproving = 0;
		SET @SetGLDateCurrentDatewhenApproving = 0;
		SET @IgnorePORemovalForClientAfterInvoiceApproval = 0;
		SET @MatchLineItemDetailWithPOByRecievedTransactionIdAndPONumber = 0;
		SET @CleanInvoicePOesFromPOTableAfterInvoiceApproval = 0;
		SET @AmountApproved = 0;
		SET @LastActionByName = 'System';

		/*
		**	Get the name of the user
		*/
		SELECT	IFNULL(CONCAT(u.FirstName, ' ', u.LastName), 'System') INTO @LastActionByName
		FROM	User u
		WHERE	u.UserId = pUserId;


		/*
		**
		**	Information about the Object
		**
		**/
		SELECT	i.ClientId,
				i.IsPOInvoice,
				CASE WHEN IFNULL(i.InvoiceType, '') = 'Archive' THEN 1 ELSE 0 END,
				CASE WHEN IFNULL(i.InvoiceType, '') = 'BOL' THEN 1 ELSE 0 END,
				CASE WHEN IFNULL(i.InvoiceType, '') = 'HAULERINVOICE' THEN 1 ELSE 0 END,
				CASE WHEN IFNULL(i.InvoiceType, '') = 'Profit Distribution' THEN 1 ELSE 0 END,
				i.ApprovalStatusId,
				cc.CompanyCode 
		INTO	@ClientId, @IsPo, @isArchived, @IsBOL, @isHAULER, @isProfitDistribution, @OriginalApprovalStatusId, @CostCenter
		FROM Invoice i
			LEFT JOIN ClientCompany cc	ON cc.ClientId = i.ClientId
											AND cc.CompanyCode = i.CompanyCode
											AND cc.IsActive = 1
		WHERE i.InvoiceId = @InvoiceId;

		SET @ApprovalStatusId = @OriginalApprovalStatusId;

		IF EXISTS (SELECT
					1
				FROM ClientSpecificConfig
				WHERE ClientSpecificConfigType = 519
				AND ClientId = @ClientId) THEN
			SET @SendBOLToApprovalOnDataEntry = 1;
		END IF;
		IF EXISTS (SELECT
					1
				FROM ClientSpecificConfig
				WHERE ClientSpecificConfigType = 442
				AND ClientId = @ClientId) THEN
			SET @CalculateInvoiceTotalWithTax = 1;
		END IF;
		IF EXISTS (SELECT
					1
				FROM ClientSpecificConfig
				WHERE ClientSpecificConfigType = 49
				AND ClientId = @ClientId) THEN
			SET @ExcludeTaxFromInvoiceTotalForNoPOApproval = 1;
		END IF;
		IF EXISTS (SELECT
					1
				FROM ClientSpecificConfig
				WHERE ClientSpecificConfigType = 404
				AND ClientId = @ClientId) THEN
			SET @IgnorePOExistsWhenApprovingOrAccepting = 1;
		END IF;
		IF EXISTS (SELECT
					1
				FROM ClientSpecificConfig
				WHERE ClientSpecificConfigType = 654
				AND ClientId = @ClientId) THEN
			SET @KeepInvoiceTypeBOLUnchanged = 1;
		END IF;
		IF EXISTS (SELECT
					1
				FROM ClientSpecificConfig
				WHERE ClientSpecificConfigType = 47
				AND ClientId = @ClientId) THEN
			SET @ShowSubmitThroughRMSButtonForArchive = 1;
		END IF;
		IF EXISTS (SELECT
					1
				FROM ClientSpecificConfig
				WHERE ClientSpecificConfigType = 678
				AND ClientId = @ClientId) THEN
			SET @SetPostingDateSameAsApprovedDateWhenApproving = 1;
		END IF;
		IF EXISTS (SELECT
					1
				FROM ClientSpecificConfig
				WHERE ClientSpecificConfigType = 369
				AND ClientId = @ClientId) THEN
			SET @SetGLDateCurrentDatewhenApproving = 1;
		END IF;
		IF EXISTS (SELECT
					1
				FROM ClientSpecificConfig
				WHERE ClientSpecificConfigType = 439
				AND ClientId = @ClientId) THEN
			SET @IgnorePORemovalForClientAfterInvoiceApproval = 1;
		END IF;
		IF EXISTS (SELECT
					1
				FROM ClientSpecificConfig
				WHERE ClientSpecificConfigType = 584
				AND ClientId = @ClientId) THEN
			SET @MatchLineItemDetailWithPOByRecievedTransactionIdAndPONumber = 1;
		END IF;
		IF EXISTS (SELECT
					1
				FROM ClientSpecificConfig
				WHERE ClientSpecificConfigType = 242
				AND ClientId = @ClientId) THEN
			SET @CleanInvoicePOesFromPOTableAfterInvoiceApproval = 1;
		END IF;


		IF @ClientId = 64 THEN
			SET @isVersace = 0;
		END IF;

		IF @IsPO = 0 THEN
			SELECT
				IFNULL(SUM(pah.AmountAppoved), 0) INTO @AmountApproved
			FROM PendingApprovalHistory pah
			WHERE pah.InvoiceId = @InvoiceId;
			IF @AmountApproved = 0 THEN
				SELECT
					IFNULL(SUM(pah.AmountAppoved), 0) INTO @AmountApproved
				FROM ApprovalHistory pah
				WHERE pah.InvoiceId = @InvoiceId;
			END IF;
		ELSE
			SELECT
				IFNULL(SUM(TotalAmount), 0) INTO @AmountApproved
			FROM LineItemDetail
			WHERE InvoiceId = @InvoiceId;
		END IF;

		IF @DEBUGONLY = 1 THEN
			SELECT
				@SendBOLToApprovalOnDataEntry,
				@CalculateInvoiceTotalWithTax,
				@ExcludeTaxFromInvoiceTotalForNoPOApproval,
				@IgnorePOExistsWhenApprovingOrAccepting,
				@KeepInvoiceTypeBOLUnchanged,
				@ShowSubmitThroughRMSButtonForArchive,
				@SetPostingDateSameAsApprovedDateWhenApproving,
				@SetGLDateCurrentDatewhenApproving,
				@IgnorePORemovalForClientAfterInvoiceApproval,
				@MatchLineItemDetailWithPOByRecievedTransactionIdAndPONumber,
				@CleanInvoicePOesFromPOTableAfterInvoiceApproval;
		end IF;

		/*
		** Balance Housekeeping
		*/
		IF @IsPO = 1 THEN
			SELECT
				CONVERT(
					ifnull(CASE WHEN @CalculateInvoiceTotalWithTax = 1 THEN ifnull(nullif(i.InvoiceTotalWithTax, 0.00), i.InvoiceTotal) ELSE i.InvoiceTotal END, 0)
					- IFNULL(i.Tax, 0)
					- IFNULL(i.FreightCharges, 0)
					- IFNULL(i.CalculableOtherCharges, 0)
					- IFNULL(i.AdjustmentAmount, 0)
					- ifnull(@AmountApproved, 0)
					,decimal(18, 2))
				INTO @InvoiceBalance
			FROM Invoice i
			WHERE i.InvoiceId = @InvoiceId;
		ELSE
			IF @isVersace = 0 THEN
				SELECT
					CONVERT(i.InvoiceTotal - @AmountApproved, decimal(18, 2)) INTO @InvoiceBalance
				FROM Invoice i
				WHERE i.InvoiceId = @InvoiceId;
			ELSE
				SELECT
					CONVERT(
					i.InvoiceTotal - @AmountApproved -
					CASE WHEN @CostCenter = '450' AND
							@ExcludeTaxFromInvoiceTotalForNoPOApproval = 1 THEN IFNULL(i.Tax, 0) ELSE 0 END, decimal(18, 2)) INTO @InvoiceBalance
				FROM Invoice i
				WHERE i.InvoiceId = @InvoiceId;
			END IF;
		END IF;


		/*
		**	Check is the invoice has PO Data
		*/

		SET @PONumber = NULL;
		SET @POLookup = NULL;
		SET @POReverseLookup = NULL;
		SET @POReverseLookupVariance = NULL;
		SET @LineItemsQuantityFilterVariance = NULL;
		IF @IsPO = 1 THEN
			SELECT
				PONumber,
				POLookup,
				POReverseLookup,
				POReverseLookupVariance,
				LineItemsQuantityFilterVariance INTO @PONumber, @POLookup, @POReverseLookup, @POReverseLookupVariance, @LineItemsQuantityFilterVariance
			FROM Invoice
			WHERE InvoiceId = @InvoiceId;
			-- AND IFNULL(LineItemsQuantityFiltervariance, 0) > 0;

			SET @PONumber = REPLACE(@PONumber, '|', ',');

			IF @IgnorePOExistsWhenApprovingOrAccepting = 0 THEN
				SET @POCount = 0;
				CALL GetPONumbersByFilterCriteria_Original(@ClientId, @PONumber, @POLookup, @POReverseLookup, @POReverseLookupVariance, @LineItemsQuantityFilterVariance, @InvoiceId, 1);
				SELECT
					COUNT(*) INTO @POCount
				FROM GetPONumbersByFilterCriteriaTempTable;
				-- DROP TEMPORARY TABLE IF EXISTS GetPONumbersByFilterCriteriaTempTable;

				IF @POCount < (SELECT
							COUNT(*)
						FROM LineItemDetail lid
						WHERE lid.InvoiceId = @InvoiceId) THEN
					SET pMessage = 'PO data for this invoice is missing';
					LEAVE ThisProc;
				END IF;
			END IF;

			IF @AmountApproved = 0 THEN
				SET pMessage = 'PO data for this invoice is missing or totals to zero (0)';
				LEAVE ThisProc;
			END IF;
		END IF;


		IF @isArchived = 1 THEN
			IF @DEBUGONLY = 1 THEN
				IF @SendBOLToApprovalOnDataEntry = 1
					AND @isBOL = 1
					AND @ApprovalStatusId = 1 THEN
					SELECT
						'Update Invoice set isPaused = 0, ApprovalStatusId=3, ApprovedDate=UTC_TIMESTAMP(), ApproverId=',
						pUserId;
				ELSE
					IF @KeepInvoiceTypeBOLUnchanged = 1 THEN
						SELECT
							'Update Invoice set isPaused = 0,ApprovalStatusId=5, islocked = 0';
						IF pSubmittedThruRMS = 1
							AND @ShowSubmitThroughRMSButtonForArchive = 1 THEN
							SELECT
								'Update Invoice set USerfield1 = 0';
						END IF;
					ELSE
						SELECT
							'Update Invoice set isPaused = 0,InvoiceType=Archive, reason=Not an invoice (if not already empty)'
						UNION ALL
						SELECT
							'Update Invoice set ApprovalStatusId=5, islocked = 0';
						IF pSubmittedThruRMS = 1
							AND @ShowSubmitThroughRMSButtonForArchive = 1 THEN
							SELECT
								'Update Invoice set USerfield1 = 0';
						END IF;
					END IF;
				END IF;
			end if;
			IF @SendBOLToApprovalOnDataEntry = 1
				AND @isBOL = 1
				AND @ApprovalStatusId = 1 THEN
				UPDATE Invoice
				SET IsPaused = 0,
					ApprovalStatusId = 3,
					AprovedDate = @Now,
					ApproverId = pUserId
				WHERE InvoiceId = @InvoiceId;
			ELSE
				UPDATE Invoice
				SET IsPaused = 0,
					ApprovalStatusId = 5,
					IsLocked = 0,
					InvoiceType = CASE WHEN @KeepInvoiceTypeBOLUnchanged = 0 THEN 'Archive' ELSE InvoiceType END,
					ArchiveReason = CASE WHEN IFNULL(ArchiveReason, '') = '' THEN 'Not an invoice' ELSE ArchiveReason END,
					UserField1 = CASE WHEN pSubmittedThruRMS = 1 AND
							@ShowSubmitThroughRMSButtonForArchive = 1 THEN '0' ELSE UserField1 END
				WHERE InvoiceId = @InvoiceId;
			END IF;

		ELSE
			IF @isHAULER = 1 THEN
				IF @DEBUGONLY = 1 THEN
					SELECT
						'WODetails to Delete',
						'WOId=',
						WOId,
						'InvoiceId=',
						InvoiceId
					FROM WODetails ToDelete
					WHERE ToDelete.WOId IN (SELECT
							w.WOId
						FROM WODetails w
						WHERE w.InvoiceId = @InvoiceId
						AND w.WOId IS NOT NULL)
					AND EXISTS (SELECT
							1
						FROM Invoice i
						WHERE i.InvoiceId = ToDelete.InvoiceId
						AND i.ApproverId = @ApprovalStatusId)
					AND ToDelete.InvoiceId <> @InvoiceId;
					SELECT
						'WOs to Delete',
						'WOId=',
						WOId
					FROM WO ToDelete
					WHERE ToDelete.WOId IN (SELECT
							w.WOId
						FROM WODetails w
						WHERE w.InvoiceId = @InvoiceId
						AND w.WOId IS NOT NULL);
					SELECT
						'Update Invoice set ApprovalStatusId=4,ApprovedDate=UTC_TIMESTAMP(),ApproverId=',
						pUserId;
				end if;
				DELETE ToDelete
					FROM WODetails ToDelete
				WHERE ToDelete.WOId IN (SELECT
							w.WOId
						FROM WODetails w
						WHERE w.InvoiceId = @InvoiceId
						AND w.WOId IS NOT NULL)
					AND EXISTS (SELECT
							1
						FROM Invoice i
						WHERE i.InvoiceId = ToDelete.InvoiceId
						AND i.ApproverId = @ApprovalStatusId)
					AND ToDelete.InvoiceId <> @InvoiceId;
				DELETE ToDelete
					FROM WO ToDelete
				WHERE ToDelete.WOId IN (SELECT
							w.WOId
						FROM WODetails w
						WHERE w.InvoiceId = @InvoiceId
						AND w.WOId IS NOT NULL);
				UPDATE Invoice
				SET ApprovalStatusId = 4,
					AprovedDate = @Now,
					ApproverId = pUserId
				WHERE InvoiceId = @InvoiceId;

			END IF;
			IF @DEBUGONLY = 1 THEN
				SELECT
					'Update invoice set ApprovalStatusId=4, ApproverId = puser, AprovedDate = UTC_TIMESTAMP()';
			end if;
			UPDATE Invoice
			SET ApprovalStatusId = 4,
				AprovedDate = @Now,
				ApproverId = pUserId
			WHERE InvoiceId = @InvoiceId;
		END IF;

		SELECT
			ApprovalStatusId INTO @ApprovalStatusId
		FROM Invoice
		WHERE InvoiceId = @InvoiceId;

		IF @SetPostingDateSameAsApprovedDateWhenApproving = 1
			OR @SetGLDateCurrentDatewhenApproving = 1 THEN
			IF @DEBUGONLY = 1 THEN
				SELECT
					'Update invoice set GLDate=UTC_TIMESTAMP()';
			end if;
			UPDATE Invoice
			SET GLDate = @Now
			WHERE InvoiceId = @InvoiceId;
		END IF;

		IF @DEBUGONLY = 1 THEN
			SELECT
				'Update invoice set AcceptedDate=case when ApprovalStatusId = 5 then UTC_TIMESTAMP() else AcceptedDate end';
		END IF;

		UPDATE Invoice
		SET AcceptedDate = CASE WHEN ApprovalStatusId = 5 THEN @Now ELSE AcceptedDate END
		WHERE InvoiceId = @InvoiceId;


		IF @InvoiceBalance <> 0
			AND NOT EXISTS (SELECT
					1
				FROM Invoice
				WHERE InvoiceId = @InvoiceId
				AND InvoiceType = 'Archive') THEN
			SET pMessage = CONCAT('You are the last approver, but the invoice has still a remaining amount. The remaining amount to be approved is ', FORMAT(@InvoiceBalance, 2));
			LEAVE ThisProc;
		END IF;


		IF @DEBUGONLY = 1 THEN
			SELECT
				CONCAT('Update invoice set LastActionDate=UTC_TIMESTAMP(),LastActionBy=SYSTEM')
			UNION ALL
			SELECT
				'Delete all the entries in UserInvoiceAssignment';
			SELECT
				'InvoiceHistory',
				@InvoiceId,
				'System' AS Actor,
				'Update' AS Action,
				@Now AS ActionDate,
				'' AS PreviousData,
				'' AS NewData,
				'Invoice Status' AS FIELD,
				_x_GetInvoiceStatusName(@OriginalApprovalStatusId) AS InitialStatus,
				_x_GetInvoiceStatusName(@ApprovalStatusId) AS CurentStatus,
				'00000000-0000-0000-0000-000000000000' AS ActorId,
				NULL AS OldId;
		end if;
		UPDATE 	Invoice
		SET 	LastActionDate = @Now,
				LastActionBy = @LastActionByName
		WHERE	InvoiceId = @InvoiceId;
		DELETE
			FROM UserInvoiceAssignment
		WHERE InvoiceId = @InvoiceId;
		INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId, OldID)
			SELECT	@InvoiceId,
					'System' 												AS Actor,
					'Update' 												AS Action,
					@Now 													AS ActionDate,
					'' 														AS PreviousData,
					'' 														AS NewData,
					'Invoice Status' 										AS FIELD,
					_x_GetInvoiceStatusName(@OriginalApprovalStatusId) 		AS InitialStatus,
					_x_GetInvoiceStatusName(@ApprovalStatusId) 				AS CurentStatus,
					'00000000-0000-0000-0000-000000000000' 					AS ActorId,
					NULL 													AS OldId;


		IF @isProfitDistribution = 1 THEN
			IF @DEBUGONLY = 1 THEN
				SELECT
					'INVOICE',
					ClientId,
					InvoiceId 																		AS ParentInvoiceId,
					'???' 																			AS ApprovalStatusId,
					VendorId,
					ah.AmountAppoved 																AS InvoiceTotal,
					InvoiceDate,
					CONCAT(LEFT(REPLACE(v.VendorName, ' ', ''), 3), DATE_FORMAT(@now, '%d%m%Y')) 	AS InvoiceNo,
					InvoiceName,
					BatchId,
					@Now 																			AS ScannedDate,
					isPOInvoice,
					'Invoice' 																		AS InvoiceType,
					i.CompanyCode,
					@Now 																			AS PaymentDueDate,
					1 																				AS ApprovalRequired,
					Comment
				FROM Invoice i
					INNER JOIN ApprovalHistory ah
						ON i.InvoiceId = ah.InvoiceId
					INNER JOIN Vendor v
						ON v.VendorId = i.VendorId
				WHERE Invoice = @InvoiceId;

				SELECT
					'ApprovalHistory',
					i.InvoiceId,
					i.InvoiceTotal AS AmountApproved,
					pUserId AS ApproverId,
					ah.CategoryId,
					i.CompanyCode,
					i.ClientId,
					i.NSDepartmentId,
					ah.GLCodeId,
					ah.SpecialNote,
					@Now AS StateChangedDate,
					ah.TaxableAmount,
					ah.TaxAmount,
					ah.TaxCodeId,
					ah.ProjectId,
					ah.RecoverableTaxAmout
				FROM Invoice i
					INNER JOIN ApprovalHistory ah
						ON i.ParentInvoiceId = ah.InvoiceId
				WHERE i.InvoiceId = @InvoiceId; -- this will read ParentInvoiceId = @InvoiceId

				SELECT
					'InvoiceDocs',
					i.InvoiceId,
					ID.Url
				FROM Invoice i
					INNER JOIN InvoiceDocs id
						ON id.InvoiceId = i.ParentInvoiceId
				WHERE i.InvoiceId = @InvoiceId; -- this will read ParentInvoiceId = @InvoiceId

				SELECT
					'Update invoice set InvoiceType=Archive, ArchiveReason=Not an Invoice, ApprovalStatusId=5,AcceptedDate=@Now';
			end if;
			INSERT INTO invoice (ClientId, ParentInvoiceId, ApprovalStatusId, VendorId, AmountAppoved, InvoiceDate,
									InvoiceNo, InvoiceName, BatchId, ScannedDate, isPOInvoice, InvoiceType,
									CompanyCode, PaymentDueDate, ApprovalRequired, Comment, ItemId)
				SELECT	i.ClientId,
						i.InvoiceId 																	AS ParentInvoiceId,
						'???' 																			AS ApprovalStatusId,
						VendorId,
						ah.AmountAppoved 																AS InvoiceTotal,
						InvoiceDate,
						CONCAT(LEFT(REPLACE(v.VendorName, ' ', ''), 3), DATE_FORMAT(@now, '%d%m%Y')) 	AS InvoiceNo,
						InvoiceName,
						BatchId,
						@Now 																			AS ScannedDate,
						isPOInvoice,
						'Invoice' 																		AS InvoiceType,
						i.CompanyCode,
						@Now 																			AS PaymentDueDate,
						1 																				AS ApprovalRequired,
						Comment,
						ah.ApprovalHistoryID -- Needed to join on the next query, this will later be nulled after work done.
				FROM Invoice i
					INNER JOIN ApprovalHistory ah		ON i.InvoiceId = ah.InvoiceId
					INNER JOIN Vendor v					ON v.VendorId = i.VendorId
				WHERE i.Invoice = @InvoiceId;


			INSERT INTO ApprovalHistory (InvoiceId, AmountApproved, ApproverId, CategoryId, CompanyCode,
											ClientId, NSDepartmentId, GLCodeId, SpecialNote, StateChangedDate,
											TaxableAmount, TaxAmount, TaxCodeId, ProjectId, RecoverableTaxAmout)
				SELECT	i.InvoiceId,
						i.InvoiceTotal AS AmountApproved,
						pUserId AS ApproverId,
						ah.CategoryId,
						i.CompanyCode,
						i.ClientId,
						i.NSDepartmentId,
						ah.GLCodeId,
						ah.SpecialNote,
						@Now AS StateChangedDate,
						ah.TaxableAmount,
						ah.TaxAmount,
						ah.TaxCodeId,
						ah.ProjectId,
						ah.RecoverableTaxAmout
				FROM Invoice i
					INNER JOIN ApprovalHistory ah		ON i.ParentInvoiceId = ah.InvoiceId
															AND i.ItemId = ah.ApprovalHistoryID
				WHERE ParentInvoiceId = @InvoiceId;

			INSERT INTO InvoiceDocs (InvoiceId, Url)
				SELECT	i.InvoiceId,
						ID.Url
				FROM Invoice i
					INNER JOIN InvoiceDocs id			ON id.InvoiceId = i.ParentInvoiceId
				WHERE i.ParentInvoiceId = @InvoiceId; -- this will read ParentInvoiceId = @InvoiceId

			UPDATE Invoice
			SET InvoiceType = 'Archive',
				ArchiveReason = 'Not an Invoice',
				ApprovalStatusId = 5,
				AcceptedDate = @Now,
				ItemId = NULL -- Null this, it used to house the ApprovalHistoryId for this specific process.
			WHERE InvoiceId = @InvoiceId;
		END IF;


		INSERT INTO ApprovalHistory (InvoiceId,ApproverId,GLCodeId,AmountAppoved,StateChangedDate,CustomerId,Recoverabletax,SpecialNote,CategoryId,DepartmentId,TaxCodeId,
										TaxableAmount,TaxAmount,WithholdingTaxId,PurchaseNum,ImportDoc,RecoverableTaxAmout,ProjectId,SubProjectId,CompanyCode,
										SourceApprovalHistoryId,ItemId,AccountingVariable1,AccountingVariable2,AccountingVariable3,AccountingVariable4,VendorId,OrgId,
										AmountInPercent,IsDistributedLine,Category1,Category2,SubCategory1,SubCategory2,ExternalRef)
			select 	InvoiceId,ApproverId,GLCodeId,AmountAppoved,now(),CustomerId,Recoverabletax,SpecialNote,CategoryId,DepartmentId,TaxCodeId,
					TaxableAmount,TaxAmount,null,null,ImportDoc,null,ProjectId,SubProjectId,CompanyCode,
					null,ItemId,AccountingVariable1,AccountingVariable2,AccountingVariable3,AccountingVariable4,VendorId,OrgId,
					AmountInPercent,IsDistributedLine,Category1,Category2,SubCategory1,SubCategory2,ExternalRef
			from PendingApprovalHistory
			where InvoiceId = @InvoiceId;

		Delete from PendingApprovalHistory 	where InvoiceId = @InvoiceId;
		Delete from TempApprovalHistory 	where InvoiceId = @InvoiceId;

		--	17
		SELECT
			ApprovalStatusId INTO @ApprovalStatusId
		FROM Invoice
		WHERE InvoiceId = @InvoiceId;
		IF not (
				@IgnorePORemovalForClientAfterInvoiceApproval = 0
				AND @isPO = 1
				AND @ApprovalStatusId IN (4, 5, 7)
				AND @IsArchived = 0) then
			SET pMessage = 'Final';
			LEAVE ThisProc;
		END IF;


		drop temporary table if exists POWorkMatch;
		Create temporary table if not exists POWorkMatch (
			POId 	int,
			LIDId	int
		);		


		-- Match the PO lines to the Invoice PO Lines
		Insert into  POWorkMatch (POId, LIDId)
			select 	p.Id as POId, lid.LineItemDetailId as LIDId
			FROM	PO p
					inner join LineItemDetail lid 	on (
															lid.POId is null
															and lid.PONumber						= p.PONumber
															and (p.RecievedTransactionId is null
																	or lid.RecievedTransactionId = p.RecievedTransactionId)
															and (
																	(
																		@MatchLineItemDetailWithPOByRecievedTransactionIdAndPONumber = 1
																		or 	
																		(lid.ProductId is null
																			or lid.ProductId		= p.VendorCatNumber)
																	)
																)
															and (p.LineNo is NULL
																	or lid.LineNo is null
																	or lid.LineNo = p.LineNo)
														)
														or lid.POid = p.Id
			where 	p.ClientId = @ClientId
					and lid.InvoiceId = @InvoiceId
					and (ifnull(p.RcvdQty, p.OrderQty) - lid.Quantity) is not null;


			-- Update the PO lines 
			Update 	PO p
					inner join POWorkMatch work 		on work.POId = p.Id
					inner join LineItemDetail lid 		on lid.LineItemDetailId = work.LIDId
			set 	p.MatchedFlag 	= case	when ifnull(p.RcvdQty, p.OrderQty) - lid.Quantity = 0 and @MarkCompletedPOLines = 1 and lid.RecievedTransactionId = p.RecievedTransactionId 	then 'Y' 
											else p.MatchedFlag end,
					p.UserField6	= case	when ifnull(p.RcvdQty, p.OrderQty) - lid.Quantity = 0 and @MarkCompletedPOLines = 1 and lid.RecievedTransactionId = p.RecievedTransactionId 	then null 
											else p.UserField6 end,
					p.UserField7	= case	when ifnull(p.RcvdQty, p.OrderQty) - lid.Quantity = 0 and @MarkCompletedPOLines = 1 and lid.RecievedTransactionId = p.RecievedTransactionId 	then null 
											else p.UserField7 end,
					p.OrderQty		= case  When p.RcvdQty is null 		then ifnull(p.RcvdQty, p.OrderQty) - lid.Quantity else OrderQty end,
					p.RcvdQty		= case  When p.RcvdQty is not null 	then ifnull(p.RcvdQty, p.OrderQty) - lid.Quantity else p.RcvdQty end;
			
			
			-- Update the Invoice Line Item Details lines 
			Update 	LineItemDetail lid
					inner join POWorkMatch work 		on work.LIDId = lid.LineItemDetailId
					inner join PO p				 		on p.Id = work.POId
			set 	lid.UserField6		= null,
					lid.UserField7		= null
			where 	p.MatchedFlag = 'Y';
			
			-- Dleet the PO lines if the Qty is 0
			Delete	p
					from PO p
					inner join POWorkMatch work 		on work.POId = p.Id
			where 	@DoNotRemovePODataOnPOApproval = 0 
					and ifnull(p.RcvdQty, p.OrderQty) = 0;

		SET pMessage = 'Final';

	END ThisProc ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceApproveSubmitTestingOnly` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceApproveSubmitTestingOnly`(bCommit int)
ThisProc:BEGIN
-- noformat
	declare isRollback bit default 0;
	declare isMessage varchar(5000) default '';
  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
  	begin
	set isRollback = 1;
 		GET DIAGNOSTICS CONDITION 1
 		@p1 = MESSAGE_TEXT;
 		SET isMessage = @p1;
	end ;
  DROP TEMPORARY TABLE IF EXISTS GetPONumbersByFilterCriteriaTempTable;


  --	-- IgnorePOExistsWhenApprovingOrAccepting
  -- 	SET @ClientId = 35;
  -- 	SET @UserId = '6de67cc1-a02e-4b3c-8370-e27d64bf00f1';
  -- 	SET @InvoiceID = '660821847';

  -- KeepInvoiceTypeBOLUnchanged
  -- No config set up in test


  -- 	-- ShowSubmitThroughRMSButtonForArchive
  -- 	set @ClientId = 27;
  -- 	set @InvoiceId = 660818140; -- Fail
  -- 	set @InvoiceId = 660818136;
  -- 	set @UserId = '0815d5fa-6ea2-40c4-ba1b-8165faf3393d';


  -- SetPostingDateSameAsApprovedDateWhenApproving
  -- No config set up in test

  --	-- SetGLDateCurrentDatewhenApproving
  -- 	set @ClientId = 64;
  -- 	set @InvoiceId = 660817095;
  -- 	set @UserId = 'cb994fda-b9df-4aea-8b74-af509a6bbc9c';


  -- IgnorePORemovalForClientAfterInvoiceApproval
  -- set @ClientId = 61;
  -- set @InvoiceId = 660818394;
  -- set @UserId = '080d2a60-4adc-4318-8753-488f09a15c04';


  -- MatchLineItemDetailWithPOByRecievedTransactionIdAndPONumber
  -- 	set @ClientId = 97;
  -- 	set @InvoiceId = 660823822;
  -- 	set @UserId = '0299e3b2-463f-4b8a-934b-062e2ee090b5';


  --	-- CleanInvoicePOesFromPOTableAfterInvoiceApproval
  -- 		set @ClientId = 50;
  -- 		set @InvoiceId = 660754188;
  -- 		set @UserId = '8da146c3-2bb2-4bd7-a8dd-08831cb2224f';


  --	-- Versace 
  -- 		set @ClientId=64;
  -- 		set @InvoiceId= 660795197;
  -- 		set @UserId= '240ccc47-3dc2-44d8-bd45-dac465d6f1ec';
  -- 		set @ClientId=64;
  -- 		set @InvoiceId= 660283273;
  -- 		set @UserId= '199c536e-847b-41c1-a1e6-7279b466141f';


--   -- AssignbackuserId 
--   SET @ClientId = 64;
--   SET @InvoiceId = 660283273;
--   SET @UserId = '6e748e68-a974-443e-8bac-fd36e9b037b2';

--   -- You are the last approver, but the invoice has still a remaining amount. The remaining amount to be approved is -53,297.97
--   SET @ClientId = 88;
--   SET @InvoiceId = 662593547;
--   SET @UserId = '18b61a24-d0a4-11e9-b055-22000a1f9f3d';


  -- InvoiceId not in list
--   SET @ClientId = 88;
--   SET @InvoiceId = 662594186;
--   SET @UserId = '18b61a24-d0a4-11e9-b055-22000a1f9f3d';


--   -- Approver BY amount
--   SET @ClientId = 88;
--   SET @InvoiceId = 660791162;
--   SET @UserId = '2a59fe87-8ef7-460c-9442-ea0ff6546038';


--   -- Approver BY amount
--   SET @ClientId = 88;
--   SET @InvoiceId = 660791162;
--   SET @UserId = '7cbe8f05-ff53-40f8-9c9d-73e5e16af2de';

--   -- Approver BY amount
--   SET @ClientId = 88;
--   SET @InvoiceId = 662583973;
--   SET @UserId = '8d7960f2-6159-406b-9dde-c2fafb0d1033';



  -- Exception already
  SET @ClientId = 88;
  SET @InvoiceId = 662604531;
  SET @UserId = '18b61a24-d0a4-11e9-b055-22000a1f9f3d';


  -- Captured state
  SET @ClientId = 88;
  SET @InvoiceId = 660783747;
  SET @UserId = '18b61a24-d0a4-11e9-b055-22000a1f9f3d';

  SET @ClientId = 88;
  SET @InvoiceId = 663247517;
  SET @UserId = '8d7960f2-6159-406b-9dde-c2fafb0d1033';

  set @ApprovalStatusId = 0;
  select ApprovalStatusId
  into @ApprovalStatusId
  from Invoice i
  where InvoiceId = @InvoiceId;


  SET @Response = '';

  START TRANSACTION;
  	set @Response = '';
	if @ApprovalStatusId = 3 then 
		select 'APPROVING';
	    CALL _x_InvoiceApprove(@ClientId, @InvoiceID, @UserId, 1, @Response);
	elseif @ApprovalStatusId in (1,6) then
		select 'Submitting';
	    CALL _x_InvoiceSubmit(@ClientId, @InvoiceID, @UserId, 1, @Response);
		select * from Exception e where InvoiceId = @InvoiceID;
	elseif @ApprovalStatusId in (4) then
		select 'Resetting';
	    CALL _x_InvoiceReset(@ClientId, @InvoiceID, @UserId);
		select * from Exception e where InvoiceId = @InvoiceID;
	else
		select 'Wrong status to run this PROC';
	end if;

	select 'EndOfCall', @Response;
    SELECT
			i.ApprovalStatusId,
			i.IsPOInvoice,
			i.InvoiceTotalWithTax,
			i.InvoiceTotal,
			i.Tax,
			i.FreightCharges,
			i.CalculableOtherCharges,
			i.AdjustmentAmount,
			PONumber,
			POLookup,
			POReverseLookup,
			POReverseLookupVariance,
			LineItemsQuantityFilterVariance,
			i.*
    FROM Invoice i
    WHERE InvoiceId = @InvoiceID;
    SELECT
      *
    FROM LineItemDetail
    WHERE InvoiceId = @InvoiceId;
    SELECT
      *
    FROM PendingApprovalHistory pah
    WHERE pah.InvoiceId = @InvoiceId;

    SELECT
      *
    FROM InvoiceHistory ih
    WHERE InvoiceId = @InvoiceID;
     SELECT
       *
     FROM UserInvoiceAssignment ah
     WHERE ah.InvoiceId = @InvoiceId;

    SELECT	*
    FROM	PO
    WHERE	PONumber = (SELECT	PONumber FROM Invoice WHERE InvoiceId = @InvoiceID)
		    AND ClientId = @ClientID;

	select * from UserNotification where LinkValue = @InvoiceID and ReadDate is null order by ReceivedDate desc limit 4;

    IF @Response in ('Approved','Submitted') and isRollback = 0 THEN
	  	if bCommit = 1 THEN	
		      SELECT @Response, 'Commit';
	  		commit;
		else 
		      SELECT @Response, 'Rollback';
      		ROLLBACK; -- Commit;
		end if;
    ELSE
      IF @Response = 'Final'  and isRollback = 0 THEN
		      SELECT @Response, 'Commit';
        SELECT @Response;
	  	if bCommit = 1 THEN	
	  		commit;
		else 
		      SELECT @Response, 'Rollback';
      		ROLLBACK; -- Commit;
		end if;
      ELSE
        SELECT @Response, isRollback, isMessage, 'Rollback';
        ROLLBACK;
      END IF;
    END IF;


    IF bCommit = 1 and EXISTS (SELECT	*
        		FROM	InvoiceHistory ih
		        WHERE	InvoiceId = @InvoiceID
        				AND DATE(ActionDate) = DATE(UTC_TIMESTAMP()))
      	OR NOT EXISTS (SELECT	*
        				FROM	InvoiceHistory ih
        				WHERE	InvoiceId = @InvoiceID) THEN
		SELECT	*
		FROM	Invoice
		WHERE	InvoiceId = @InvoiceID;
		
		SELECT	*
		FROM	InvoiceHistory ih
		WHERE	InvoiceId = @InvoiceID
				AND DATE(actiondate) = DATE(UTC_TIMESTAMP());


    END IF;

	
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceById`(
-- noformat
	IN `pAttrNames` varchar(2000),
	IN `pInvoiceId` int,
	IN `pClientId` 	int,
	IN `pUserId` 	varchar(36)
)
BEGIN

	set @VendorNoAfterName = 1;

  	SET @Expression = CONCAT('
		SELECT 
				', pAttrNames, ',
				Invoice.IsPOInvoice,
				COALESCE(Invoice.IsConfidential, 0) 																				AS IsConfidential,
				Invoice.ApprovalStatusId,

				case when ', @VendorNoAfterName, ' = 1 THEN
						concat(IFNULL(Vendor.VendorName, ""), " [", IFNULL(Vendor.VendorNo, ""), "]")
					else
						concat("[", IFNULL(Vendor.VendorNo, ""), "] ", IFNULL(Vendor.VendorName, "")) end 							as VendorName,
-- 				COALESCE(CONCAT(Vendor.VendorNo, ", ", Vendor.VendorName), Vendor.VendorNo) 										AS VendorName,

 				case when ', @VendorNoAfterName, ' = 1 THEN
 						concat(IFNULL(OrgData.OrgName, ""), " [", IFNULL(OrgData.OrgId, ""), "]")
 					else
 						concat("[", IFNULL(OrgData.OrgId, ""), "] ", IFNULL(OrgData.OrgName, "")) end 								as OrgName,
-- 				COALESCE(CONCAT(OrgData.OrgId, ", ", OrgData.OrgName), OrgData.OrgId) 												AS OrgName,

 				case when ', @VendorNoAfterName, ' = 1 THEN
 						concat(IFNULL(Department.`Description`, ""), " [", IFNULL(Department.DepartmentName, ""), "]")
 					else
 						concat("[", IFNULL(Department.DepartmentName, ""), "] ", IFNULL(Department.`Description`, "")) end 			as DepartmentName,
--				COALESCE(CONCAT(Department.DepartmentName, ", ", Department.`Description`), Department.DepartmentName) 				AS DepartmentName,
				ClientCompany.Id 																									AS CompanyId,

 				case when ', @VendorNoAfterName, ' = 1 THEN
 						concat(IFNULL(ClientCompany.`Description`, ""), " [", IFNULL(ClientCompany.CompanyCode, ""), "]")
 					else
 						concat("[", IFNULL(ClientCompany.CompanyCode, ""), "] ", IFNULL(ClientCompany.`Description`, "")) end 		as CompanyName,
--				COALESCE(CONCAT(ClientCompany.CompanyCode, ", ", ClientCompany.`Description`), ClientCompany.CompanyCode) 			AS CompanyName,
				Tax.TaxCode 																										AS TaxCodeName,
				Customer.CustomerName,

 				case when ', @VendorNoAfterName, ' = 1 THEN
 						concat(IFNULL(ProjectType.ProjectName, ""), " [", IFNULL(ProjectType.ProjectName, ""), "]")
 					else
 						concat("[", IFNULL(ProjectType.ProjectName, ""), "] ", IFNULL(ProjectType.ProjectName, "")) end 			as ProjectName,
--				COALESCE(CONCAT(ProjectType.ProjectName, ", ", ProjectType.`Description`), ProjectType.ProjectName) 				AS ProjectName,
				NSClass.`NSClass` 																									AS ClassName,


 				case when ', @VendorNoAfterName, ' = 1 THEN
 						concat(IFNULL(NSDepartment.`Description`, ""), " [", IFNULL(NSDepartment.NSDepartmentName, ""), "]")
 					else
 						concat("[", IFNULL(NSDepartment.NSDepartmentName, ""), "] ", IFNULL(NSDepartment.`Description`, "")) end 	as NSDepartmentName
--				COALESCE(CONCAT(NSDepartment.NSDepartmentName, ", ", NSDepartment.`Description`), NSDepartment.NSDepartmentName) 	AS NSDepartmentName
		FROM 	Invoice 
				LEFT JOIN Vendor 					ON Invoice.VendorId = Vendor.VendorId
				LEFT JOIN OrgData 					ON Invoice.OrgId = OrgData.Id
				LEFT JOIN Department 				ON Invoice.VendorSiteId = Department.Id
				LEFT JOIN ClientCompany 			ON Invoice.ClientId = ClientCompany.ClientId 
														AND Invoice.CompanyCode = ClientCompany.CompanyCode
				LEFT JOIN Tax 						ON Invoice.ClientId = Tax.ClientId 
														AND Invoice.TaxCodeId = Tax.Id
				LEFT JOIN Customer 					ON Invoice.CustomerId = Customer.CustomerId
				LEFT JOIN ProjectType 				ON Invoice.ProjectTypeId = ProjectType.Id
				LEFT JOIN NSClass 					ON Invoice.ClientId = NSClass.ClientId 
														AND Invoice.ClassId = NSClass.Id
				LEFT JOIN NSDepartment 				ON Invoice.ClientId = NSDepartment.ClientId 
														AND Invoice.NSDepartmentId = NSDepartment.Id
		WHERE 	Invoice.InvoiceId = ', pInvoiceId, 
				' AND Invoice.ClientId = ', pClientId, 
				' AND Invoice.IsDeleted = FALSE 
		LIMIT 1;');

  PREPARE myquery FROM @Expression;
  EXECUTE myquery;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceCall` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceCall`(
-- noformat
	IN `pInvoiceId` int,
	IN `pClientId` 	int,
	IN `pUserId` 	varchar(36)
)
BEGIN

	SET SESSION group_concat_max_len = 1000000;

	set @InvoiceStatus = 0;
	set @isAdmin = 0;
	set @InMyQueue = 0;
    IF EXISTS (SELECT	1
		        FROM	ClientUserRoles cur
		          		INNER JOIN ClientRoles cr		ON	cr.RoleId = cur.RoleId
		            										AND cr.isAdmin = 1
		        WHERE	cur.UserId = pUserId) THEN
		set @isAdmin = 1;
	end if;


	set @InMyQueue = 0;
	set @InvoiceStatus = 0;
	set @ClientId = 0;
	select 	ApprovalStatusId, ClientId
	into 	@InvoiceStatus, @ClientId
	from 	Invoice 
	Where	InvoiceId = pInvoiceId;



	-- 
	-- Get the position of the invoice in the appropriate queue to allow the web site to use it in Previous and Next
	--
	set @CurrentIndexInQueue = null;
	set @Dummy = 0;
	if @InvoiceStatus = 1 then			-- Captured
		call _x_InvoiceMyQueueOther (@ClientId, @InvoiceStatus, pInvoiceId, 1, 0, 0, @CurrentIndexInQueue, @Dummy);	-- Get the postion in the captured Queue
	elseif @InvoiceStatus = 6 then		-- Exception
		if exists (SELECT 1 from _x_UserParameters up	WHERE up.UserId = pUserId and up.IsExceptionHandler = 1) THEN
			set @InMyQueue = 1;
		end if;

		call _x_InvoiceMyQueueOther (@ClientId, @InvoiceStatus, pInvoiceId, 1, 0, 0, @CurrentIndexInQueue, @Dummy);	-- Get the postion in the exception Queue
	elseif @InvoiceStatus = 3 then		-- Inapproval
		call _x_InvoiceMyQueue (pUserId, pInvoiceId, 1, 0, 0, @CurrentIndexInQueue, @Dummy);						-- Get the postion in the Approval Queue
	end if;



	IF EXISTS (select 	1
				FROM	Invoice i
						INNER JOIN InvoiceStatus iStatus			ON iStatus.StateId = i.ApprovalStatusId
						left join Batch b 							on b.ID = i.BatchID
						left join Vendor v 							on v.ClientId = i.ClientId 
																		and v.VendorId = i.VendorId
						left join UserInvoiceAssignment ass			on ass.InvoiceId = i.InvoiceId
																		and ass.UserId = pUserId
						left join UserReassignmentHistory reassH	on reassH.TargetUserId = pUserId
																	and Now() between reassH.DateFrom and reassH.DateTo
						left join UserInvoiceAssignment reass		on reass.InvoiceId = i.InvoiceId 
																		and reass.UserId = reassH.SourceUserId
						WHERE i.ClientId = pClientId
								AND i.IsDeleted 			= 0
								and i.IsPaused  			= 0
								and i.ApprovalStatusId		= 3
								and i.InvoiceType 			<> 'Archive'
								and i.InvoiceID				= pInvoiceId
								and date(now()) 			> ifnull(ifnull(reass.HoldEndDate, ass.HoldEndDate), date_sub(date(now()), interval 1 day))
								and (
										ass.InvoiceId is not null
										or reass.InvoiceId is not null
									)
				) THEN
       	set @InMyQueue = 1;                                    
	END IF;

	select ApprovalStatusId into @InvoiceStatus from Invoice where InvoiceId = pInvoiceId;

	if @InvoiceStatus in (1) then
		set @LastAction = 'Captured';
	elseif @InvoiceStatus in (4,5) then
		select  GROUP_CONCAT(Actor separator ' » ')
		into 	@LastAction
		from 	InvoiceHistory ih 
		where 	InvoiceId = pInvoiceId
				and Id > (select 	max(Id) 
							from 	InvoiceHistory 
							where 	InvoiceId = pInvoiceId
									and CurrentStatus = 'Captured')
				and Action = 'Approve'
		order 	by Id;
	elseif @InvoiceStatus in (6) then
		select	GROUP_CONCAT(concat(User.LastName, ', ', User.FirstName) order by User.LastName separator '<small></small>')
		into 	@LastAction
		from	User 
				inner join _x_UserParameters up 	on up.UserId = User.UserId
		where 	ClientId = pClientId
				and up.IsExceptionHandler = 1
		order 	by LastName, FirstName;
	else
		select	GROUP_CONCAT(concat(User.LastName, ', ', User.FirstName) order by User.LastName separator '<small></small>')
		into 	@LastAction
		from	UserInvoiceAssignment Data
				inner join User 	on User.UserId = Data.UserId
		where 	InvoiceId = pInvoiceId
		order 	by LastName, FirstName;
	end if;





  SELECT
			Invoice.VendorId,
			Invoice.InvoiceNo,
			Invoice.InvoiceTotal,
			Invoice.ApprovalStatusId,
			Invoice.IsPaused,
			Invoice.IsPOInvoice,
			COALESCE(Invoice.IsConfidential, 0) 																	AS IsConfidential,    
			Invoice.PONumber,
			COALESCE(@LastAction, Invoice.LastActionBy) 															AS LastActionBy,
			Invoice.AdjustmentAmount,
			IF(UserInvoiceAssignment.HoldStartDate IS NULL, FALSE, TRUE) 											AS IsHold,
			PausedInvoice.`Comment` AS PausedComment,
			Case when Invoice.ApprovalStatusId = 3 and Invoice.IsPaused = 0 and (@isAdmin = 1 or @InMyQueue = 1)  
					then 1 
					else 0 end 																						AS isApproveAllowed,
			@CurrentIndexInQueue 																					as CurrentIndexInQueue

	FROM	Invoice
			LEFT JOIN PausedInvoice 			ON Invoice.InvoiceId = PausedInvoice.InvoiceId
			LEFT JOIN UserInvoiceAssignment 	ON Invoice.InvoiceId = UserInvoiceAssignment.InvoiceId 
													AND DATE(UserInvoiceAssignment.HoldEndDate) > DATE(UTC_TIMESTAMP())
	WHERE Invoice.InvoiceId = pInvoiceId
  		AND Invoice.ClientId = pClientId
  		AND Invoice.IsDeleted = FALSE 
	LIMIT 1;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceCaptureQueue` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceCaptureQueue`(
-- Noformat
	IN pUserId 		char(36),
	IN pInvoiceId 		int,
	in pIndexInQueue 	int,				-- This parm is always 0 when comming from the website, used within the SPs
											-- If 1 the pCount returns the Index of the Invoice Id in the the Users Approval Queue
											-- If 2 the pCount returns total count and total amount only
	IN pOffset 			INT,
	IN pSize 			INT,
	OUT pCount 			int,
	OUT pTotal 			decimal(18,2)
)
ThisProc:BEGIN

	set @VendorNoAfterName = 1;



	SELECT	IFNULL(IsCloudxUser, 0), ClientId 
	INTO	@isCloudxUser, @ClientId
	FROM	User
	WHERE	UserId = pUserId;

	call _x_SetClientTimeZone(@ClientId);

	-- Put into a TempTable for return the count then later join to return the data for the page requested

	drop TEMPORARY TABLE IF EXISTS CaptureQueue;

	CREATE TEMPORARY TABLE IF NOT EXISTS CaptureQueue AS (
			SELECT	Distinct 
					i.InvoiceNo,
					case when @VendorNoAfterName = 1 THEN
							concat(IFNULL(v.VendorName, ''), ' [', IFNULL(v.VendorNo, ''), ']')
						else
							concat('[', IFNULL(v.VendorNo, ''), '] ', IFNULL(v.VendorName, '')) end 						as Vendor,
					date(i.NetTermDate)																						as DiscountDate,
					date(i.PaymentDueDate)																					as PaymentDueDate,
					date(i.InvoiceDate) 																					as InvoiceDate,
					i.InvoiceTotal,
					i.ApprovalStatusId,
					Case	when i.InvoiceType = 'Invoice' then
								case when i.IsPOInvoice = true then concat('PO:', ifnull(i.PONUmber, '')) else 'Non PO' END
							else i.InvoiceType end 																			as InvoiceType,
					iStatus.StateName																						AS InvoiceStatus,
					IFNULL(DATE_FORMAT(convert_tz(i.ScannedDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 			AS ScannedDate,
					DATEDIFF(date(now()), date(i.SubmissionDate))+1															as InQueueDays,
					case when nullif(b.Sender, '') is not NULL
						then ifnull(nullif(b.Source, ''), '...')
						else nullif(b.Source, '') end																		as InvoiceSource,
					b.Sender 																								as InvoiceSender,
					i.InvoiceId,
					i.LastActionBy,
					IFNULL(DATE_FORMAT(convert_tz(i.LastActionDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 			AS LastActionDate,
					IFNULL(DATE_FORMAT(convert_tz(i.LastActionDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 			AS SubmissionDate,
					case	when i.NetTermDate >= now() 		then  1													-- Priority on DiscountDate
							when i.PaymentDueDate >= now() 		then  2													-- The Duedate
							else 3 end																						as OrderByField1,												-- 
		
					case	when i.NetTermDate >= now() 		then  abs(Datediff(now(), i.NetTermDate))
							when i.PaymentDueDate >= now() 		then  abs(Datediff(now(), i.PaymentDueDate))
							else abs(DATEDIFF(date(now()), date(i.SubmissionDate))) end										as OrderByField2

			FROM Invoice i
				INNER JOIN InvoiceStatus iStatus			ON iStatus.StateId = i.ApprovalStatusId
				left join Batch b 							on b.ID = i.BatchID
				left join Vendor v 							on v.ClientId = i.ClientId 
																and v.VendorId = i.VendorId
			WHERE i.ClientId = @ClientId
					AND i.IsDeleted 			= 0
					AND i.IsPaused	 			= 0
					and i.ApprovalStatusId		= 1
					and i.InvoiceType 			<> 'Archive'
					and (
							(
								ifnull(pIndexInQueue, 0) = 0	
								and i.InvoiceID		<> ifnull(pInvoiceId, 0)
							)
								or pIndexInQueue in (1, 2)
						)
					and date(now()) 			> date_sub(date(now()), interval 1 day)
		);


 	if pIndexInQueue = 1 THEN
		select 	RowNumber-1
		into 	pCount
		from 	(
					select	ROW_NUMBER() OVER (ORDER BY OrderByField1, OrderbyField2, Vendor, InvoiceType, InvoiceNo) AS RowNumber,
							InvoiceId
					from 	CaptureQueue
				) Data
		where 	InvoiceId = pInvoiceId;
		set pTotal = 0.00;
		Leave ThisProc;
	end if;


	select 	count(*), sum(InvoiceTotal)  into pCount, pTotal from CaptureQueue;
	if pIndexInQueue = 2 THEN
		leave ThisProc;
	end if;


	select 	
			IFNULL(InvoiceNo, '') AS InvoiceNo,
			Vendor,
			DiscountDate,
			PaymentDueDate,
			InvoiceTotal,
			ApprovalStatusId,
			InvoiceType,
			InvoiceStatus,
			InvoiceType,
			InQueueDays,
			InvoiceSource,
			InvoiceSender,
			InvoiceId,
			IFNULL(LastActionBy, '') 																	AS LastActionBy,
			IFNULL(DATE_FORMAT(InvoiceDate, "%b %e, %Y"), '') 											AS InvoiceDate,
			ScannedDate,
			LastActionDate,
			ROW_NUMBER() OVER (ORDER BY OrderByField1, OrderbyField2, Vendor, InvoiceType, InvoiceNo)-1	AS RowIndex
	from 	CaptureQueue
	order	by 
			OrderByField1, OrderbyField2, Vendor, InvoiceType, InvoiceNo 
	LIMIT pOffset, pSize;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceFileAttach` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceFileAttach`(IN `pUserId` char(36),
IN `pInvoiceId` int,
OUT `pNewInvoiceId` int)
ThisProc:
	BEGIN

-- noformat
	set @UserName = null;
	set @Now = now();

	SELECT	CONCAT(u.LastName, ', ', u.FirstName) 
	INTO	@UserName
	FROM	User u
	WHERE	u.UserId = pUserId;

	-- Add to History that a supporting document was added to the current invoice
	INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId, OldID)
		SELECT
			pInvoiceId,
			@UserName 		AS Actor,
			'Document added' 	AS Action,
			@Now 				AS ActionDate,
			'' 					AS PreviousData,
			'' 					AS NewData,
			'' 					AS Field,
			'' 					AS InitialStatus,
			'' 					AS CurentStatus,
			pUserId 			AS ActorId,
			NULL 				AS OldId;



	INSERT INTO Invoice (ClientId, InvoiceNo, InvoiceDate, InvoiceTotal, VendorId, PONumber, Comment, 
							ApprovalRequired, ApprovalStatusId, IsPaused, IsExceptionRaised, IsPOInvoice, ScannedDate, InvoiceType, ArchiveReason, SourceInvoiceId, 
							IsModified, CompanyCode, InvoiceName, isDeleted, IsOutPutPending, PayImmediate, IsMultipleSubmission, isLocked, 
							LastActionDate, LastActionBy, 
							PaperlessSubmission, Reissued, IsDaat, ApproverId)
		SELECT
			ClientId,
			InvoiceNo,
			InvoiceDate,
			InvoiceTotal,
			VendorId,
			PONumber,
			Comment,
			case when IsPOInvoice then 0 else 1 end,		1,				0,			0, 				IsPOInvoice, 	@Now, 		'Archive', 	'Not an invoice', pInvoiceId, 
			0,		CompanyCode,	InvoiceName,	0,				0,			0,			0,			0,
			@Now, 	@UserName,
			1, 		Reissued,		IsDaat, null
		FROM Invoice
		WHERE InvoiceId = pInvoiceId;
		SET pNewInvoiceId = LAST_INSERT_ID();


	set @Action = 'Document added as related';

	-- Add to History that this supporting document was added for invoice 
	INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId, OldID)
		SELECT
			pNewInvoiceId,
			@UserName 			AS Actor,
			@Action			 	AS Action,
			@Now 				AS ActionDate,
			'' 					AS PreviousData,
			'' 					AS NewData,
			'' 					AS Field,
			'' 					AS InitialStatus,
			'' 					AS CurentStatus,
			pUserId 			AS ActorId,
			NULL 				AS OldId;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceHold` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceHold`(
	IN `pType` TINYINT,
	IN `pClientId` INT,
	IN `pInvoiceId` INT,
	IN `pUserId` CHAR(36),
	IN `pHoldEndDate` DATETIME,
	IN `pComments` VARCHAR(250)
)
BEGIN

	SET @RowCount = 0;
	SET @StepId = 0;
	SET @SubStepId = 0;
	SET @UserName = NULL;
	
	SELECT CONCAT(LastName, ' ', FirstName) INTO @UserName
	FROM User WHERE ClientId = pClientId AND UserId = pUserId;
	
	IF (pType = 0) THEN /* Invoice Hold */
	
		-- Check if any record already exists
		SELECT COUNT(*) INTO @RowCount FROM UserInvoiceAssignment WHERE InvoiceId = pInvoiceId;
		
		IF @RowCount > 0 THEN
			UPDATE UserInvoiceAssignment
			SET HoldStartDate = UTC_TIMESTAMP(), HoldEndDate = pHoldEndDate
			WHERE InvoiceId = pInvoiceId;
		ELSE
			SELECT ApprovalStepId INTO @StepId FROM ApprovalStep WHERE ClientId = pClientId ORDER BY OrderNo LIMIT 1;
			SELECT ApprovalSubStepId INTO @SubStepId FROM ApprovalSubStep WHERE ApprovalStepId = @StepId ORDER BY OrderNo LIMIT 1;
			
			INSERT INTO UserInvoiceAssignment (InvoiceId, UserId, Type, State, ApprovalSubStepId, HoldStartDate, HoldEndDate, DateCreated, AssignBackToUserId, Comments)
			VALUES (pInvoiceId, pUserId, 0, 1, @SubStepId, UTC_TIMESTAMP(), pHoldEndDate, UTC_TIMESTAMP(), NULL, NULL);     
		END IF;
	
		INSERT INTO InvoiceHistory (InvoiceId, ActorId, Actor, `Action`, ActionDate, NewData, `Field`, InitialStatus, CurrentStatus)
		VALUES (pInvoiceId, pUserId, @UserName, 'Hold', UTC_TIMESTAMP(), 'Invoice on Hold', 'Invoice Status', NULL, 'In Approval');
	
	ELSEIF (pType = 1) THEN /* Invoice Un-Hold */
	
		UPDATE UserInvoiceAssignment
		SET HoldStartDate = NULL, HoldEndDate = NULL, Comments = pComments 
		WHERE InvoiceId = pInvoiceId;
		
		INSERT INTO InvoiceHistory (InvoiceId, ActorId, Actor, `Action`, ActionDate, NewData, `Field`, InitialStatus, CurrentStatus)
		VALUES (pInvoiceId, pUserId, @UserName, 'Un-Hold', UTC_TIMESTAMP(), 'Invoice no longer on Hold', 'Invoice Status', NULL, 'In Approval');
	
	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceImageAdd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceImageAdd`(IN pInvoiceId int, IN pUrl varchar(250))
ThisProc:
	BEGIN

	-- noformat

		IF NOT EXISTS (SELECT	1
						FROM	Invoice 
						WHERE	InvoiceId = pInvoiceId) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The invoice cannot be found.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;

		insert into InvoiceDocs (InvoiceId, Url) Values (pInvoiceId, pUrl);

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceImageGet` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceImageGet`(IN pInvoiceId int)
BEGIN	

	-- noformat
	SELECT	Id 									AS ImageId,
			REPLACE(Url, 'http://', 'https://') AS ImageUrl
	FROM	InvoiceDocs id
	WHERE	id.InvoiceId = pInvoiceId
	ORDER	BY 1;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceImageSplit` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceImageSplit`(IN pUserId char(36), IN pImageId int, INOUT pNewInvoiceId int)
ThisProc:
	BEGIN

	-- noformat

		SET @CurInvoiceId = NULL;

		IF NOT EXISTS (SELECT	1
						FROM	InvoiceDocs id
						WHERE	id.id = pImageId) THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This image cannot be found.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;


		IF pNewInvoiceId IS NULL THEN
			SELECT	i.InvoiceId 
			INTO	@CurInvoiceId
			FROM InvoiceDocs idoc
				INNER JOIN Invoice i	ON i.InvoiceId = idoc.InvoiceId
			WHERE idoc.Id = pImageId;

			INSERT INTO Invoice (ClientId, VendorId, ApprovalRequired, ApprovalStatusId, ApproverId, IsPaused, IsExceptionRaised, IsPOInvoice, ScannedDate, InvoiceType, IsModified, CompanyCode, BatchId, InvoiceName, isDeleted, IsOutPutPending, PayImmediate, IsMultipleSubmission, isLocked, PaperlessSubmission, Reissued, IsDaat)
				SELECT	ClientId,
						VendorId,
						ApprovalRequired,
						1,
						null, 
						IsPaused,
						IsExceptionRaised,
						IsPOInvoice,
						ScannedDate,
						InvoiceType,
						IsModified,
						CompanyCode,
						BatchId,
						InvoiceName,
						isDeleted,
						IsOutPutPending,
						PayImmediate,
						IsMultipleSubmission,
						0,
						PaperlessSubmission,
						Reissued,
						IsDaat
				FROM	Invoice
				WHERE	InvoiceId = @CurInvoiceId;
			SET pNewInvoiceId = LAST_INSERT_ID();
		END IF;

		--
		-- Transfert the image to the new invoice
		--

		UPDATE InvoiceDocs
		SET InvoiceId = pNewInvoiceId
		WHERE id = pImageId;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceMeta` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceMeta`(
	IN `pType` tinyint,
	IN `pInvoiceId` int
)
BEGIN

	set @ClientId = 0;
	select 	ClientId 
	into 	@ClientId
	FROM	Invoice i
	where 	InvoiceId = pInvoiceId;

	call _x_SetClientTimeZone(@ClientId);
	
	IF (pType = 0) THEN
		SELECT	ExceptionTypeId AS TypeId,
				`Comment`
		
		FROM	Exception
		WHERE	InvoiceId = pInvoiceId;
	
	ELSEIF (pType = 1) THEN
		SELECT	`Action`,
				Actor,
				convert_tz(ActionDate, 'GMT', @@session.time_zone)											AS ActionDate,
				IFNULL(`Field`, '') 																		AS `Field`,
				IFNULL(PreviousData, '') 																	AS PreviousData,
				IFNULL(NewData, '') 																		AS NewData,
				IFNULL(InitialStatus, '') 																	AS InitialStatus,
				IFNULL(CurrentStatus, '') 																	AS CurrentStatus
	
		FROM 	InvoiceHistory
		WHERE 	InvoiceId = pInvoiceId
		ORDER 	BY Id DESC;
	
	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceMyQueue` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceMyQueue`(
-- Noformat
	IN pUserId 		char(36),
	IN pInvoiceId 		int,
	in pIndexInQueue 	int,				-- This parm is always 0 when comming from the website, used within the SPs
											-- If 1 the pCount returns the Index of the Invoice Id in the the Users Approval Queue
											-- If 2 the pCount returns total count and total amount only
	IN pOffset 			INT,
	IN pSize 			INT,
	OUT pCount 			int,
	OUT pTotal 			decimal(18,2)
)
ThisProc:BEGIN

	set @VendorNoAfterName = 1;



	SELECT	IFNULL(IsCloudxUser, 0), ClientId 
	INTO	@isCloudxUser, @ClientId
	FROM	User
	WHERE	UserId = pUserId;

	call _x_SetClientTimeZone(@ClientId);

	-- Put into a TempTable for return the count then later join to return the data for the page requested

	drop TEMPORARY TABLE IF EXISTS MyQueue;

	CREATE TEMPORARY TABLE IF NOT EXISTS MyQueue AS (
			SELECT	Distinct 
					i.InvoiceNo,
					case when @VendorNoAfterName = 1 THEN
							concat(IFNULL(v.VendorName, ''), ' [', IFNULL(v.VendorNo, ''), ']')
						else
							concat('[', IFNULL(v.VendorNo, ''), '] ', IFNULL(v.VendorName, '')) end 						as Vendor,
					date(i.NetTermDate)																						as DiscountDate,
					date(i.PaymentDueDate)																					as PaymentDueDate,
					date(i.InvoiceDate) 																					as InvoiceDate,
					i.InvoiceTotal,
					i.ApprovalStatusId,
					Case	when i.InvoiceType = 'Invoice' then
								case when i.IsPOInvoice = true then concat('PO:', ifnull(i.PONUmber, '')) else 'Non PO' END
							else i.InvoiceType end 																			as InvoiceType,
					iStatus.StateName																						AS InvoiceStatus,
					IFNULL(DATE_FORMAT(convert_tz(i.ScannedDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 			AS ScannedDate,
					DATEDIFF(date(now()), date(i.SubmissionDate))+1															as InQueueDays,
					case when nullif(b.Sender, '') is not NULL
						then ifnull(nullif(b.Source, ''), '...')
						else nullif(b.Source, '') end																		as InvoiceSource,
					b.Sender 																								as InvoiceSender,
					case when reass.InvoiceId is null then '' else '*' end													as ReAssigned,
					i.InvoiceId,
					i.LastActionBy,
					IFNULL(DATE_FORMAT(convert_tz(i.LastActionDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 			AS LastActionDate,
					IFNULL(DATE_FORMAT(convert_tz(i.LastActionDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 			AS SubmissionDate,
					case	when i.NetTermDate >= now() 		then  1													-- Priority on DiscountDate
							when i.PaymentDueDate >= now() 		then  2													-- The Duedate
							else 3 end																						as OrderByField1,												-- 
		
					case	when i.NetTermDate >= now() 		then  abs(Datediff(now(), i.NetTermDate))
							when i.PaymentDueDate >= now() 		then  abs(Datediff(now(), i.PaymentDueDate))
							else abs(DATEDIFF(date(now()), date(i.SubmissionDate))) end										as OrderByField2

			FROM Invoice i
				INNER JOIN InvoiceStatus iStatus			ON iStatus.StateId = i.ApprovalStatusId
				left join Batch b 							on b.ID = i.BatchID
				left join Vendor v 							on v.ClientId = i.ClientId 
																and v.VendorId = i.VendorId
				left join UserInvoiceAssignment ass			on ass.InvoiceId = i.InvoiceId
																and ass.UserId = pUserId
				left join UserReassignmentHistory reassH	on reassH.TargetUserId = pUserId
															and Now() between reassH.DateFrom and reassH.DateTo
				left join UserInvoiceAssignment reass		on reass.InvoiceId = i.InvoiceId 
																and reass.UserId = reassH.SourceUserId
			WHERE i.ClientId = @ClientId
					AND i.IsDeleted 			= 0
					AND i.IsPaused	 			= 0
					and i.ApprovalStatusId		= 3
					and i.InvoiceType 			<> 'Archive'
					and (
							(
								ifnull(pIndexInQueue, 0) = 0	
								and i.InvoiceID		<> ifnull(pInvoiceId, 0)
							)
								or pIndexInQueue in (1, 2)
						)
					and date(now()) 			> ifnull(ifnull(reass.HoldEndDate, ass.HoldEndDate), date_sub(date(now()), interval 1 day))
					and (
							ass.InvoiceId is not null
							or reass.InvoiceId is not null
						)
		);


 	if pIndexInQueue = 1 THEN
		select 	RowNumber-1
		into 	pCount
		from 	(
					select	ROW_NUMBER() OVER (ORDER BY OrderByField1, OrderbyField2, Vendor, InvoiceType, InvoiceNo) AS RowNumber,
							InvoiceId
					from 	MyQueue
				) Data
		where 	InvoiceId = pInvoiceId;
		set pTotal = 0.00;
		Leave ThisProc;
	end if;


	select 	count(*), sum(InvoiceTotal)  into pCount, pTotal from MyQueue;
	if pIndexInQueue = 2 THEN
		leave ThisProc;
	end if;


	select 	
			IFNULL(InvoiceNo, '') AS InvoiceNo,
			Vendor,
			DiscountDate,
			PaymentDueDate,
			InvoiceTotal,
			ApprovalStatusId,
			InvoiceType,
			InvoiceStatus,
			InvoiceType,
			InQueueDays,
			Reassigned,
			InvoiceSource,
			InvoiceSender,
			InvoiceId,
			IFNULL(LastActionBy, '') 																	AS LastActionBy,
			IFNULL(DATE_FORMAT(InvoiceDate, "%b %e, %Y"), '') 											AS InvoiceDate,
			ScannedDate,
			LastActionDate,
			ROW_NUMBER() OVER (ORDER BY OrderByField1, OrderbyField2, Vendor, InvoiceType, InvoiceNo)-1	AS RowIndex
	from 	MyQueue
	order	by 
			OrderByField1, OrderbyField2, Vendor, InvoiceType, InvoiceNo 
	LIMIT pOffset, pSize;
/*
set @pCount = 0;
set @pTotal = 0.00;
call _x_InvoiceMyQueue ('18b61a24-d0a4-11e9-b055-22000a1f9f3d', null, 0, 99, @pCount, @pTotal);
select @pCount, @pTotal;
*/

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceMyQueueOther` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceMyQueueOther`(
-- Noformat
	IN pClientId 		char(36),
	in pInvoiceStatus 	int,				-- 1=Captured 6=Exception
	IN pInvoiceId 		int,
	in pIndexInQueue 	int,				-- This parm is always 0 when coming from the website, used within the SPs
											-- If 1 the pCount returns the Index of the Invoice Id in the the Users Approval Queue
											-- If 2 the pCount returns total count and total amount only
	IN pOffset 			INT,
	IN pSize 			INT,
	OUT pCount 			int,
	OUT pTotal 			decimal(18,2)
)
ThisProc:BEGIN

	set @VendorNoAfterName = 1;
	set @ClientId = pClientId;

	call _x_SetClientTimeZone(@ClientId);
	
	-- Put into a TempTable for return the count then later join to return the data for the page requested

	drop TEMPORARY TABLE IF EXISTS MyQueue;

	CREATE TEMPORARY TABLE IF NOT EXISTS MyQueue AS (
			SELECT	Distinct 
					i.InvoiceNo,
					case when @VendorNoAfterName = 1 THEN
							concat(IFNULL(v.VendorName, ''), ' [', IFNULL(v.VendorNo, ''), ']')
						else
							concat('[', IFNULL(v.VendorNo, ''), '] ', IFNULL(v.VendorName, '')) end 							as Vendor,
					date(i.NetTermDate)																						as DiscountDate,
					date(i.PaymentDueDate)																					as PaymentDueDate,
					date(i.InvoiceDate) 																					as InvoiceDate,
					i.InvoiceTotal,
					Case	when i.InvoiceType = 'Invoice' then
								case when i.IsPOInvoice = true then concat('PO:', ifnull(i.PONUmber, '')) else 'Non PO' END
							else i.InvoiceType end 																			as InvoiceType,
					IFNULL(DATE_FORMAT(convert_tz(i.ScannedDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 			AS ScannedDate,
					DATEDIFF(date(now()), date(i.SubmissionDate))+1															as InQueueDays,
					case when nullif(b.Sender, '') is not NULL
						then ifnull(nullif(b.Source, ''), '...')
						else nullif(b.Source, '') end																		as InvoiceSource,
					b.Sender 																								as InvoiceSender,
					i.InvoiceId,
					i.LastActionBy,
					IFNULL(DATE_FORMAT(convert_tz(i.LastActionDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 			AS LastActionDate,
					IFNULL(DATE_FORMAT(convert_tz(i.LastActionDate, 'GMT', @@session.time_zone), "%b %e, %Y"), '') 			AS SubmissionDate,
					case	when i.NetTermDate >= now() 		then  1													-- Priority on DiscountDate
							when i.PaymentDueDate >= now() 		then  2													-- The Duedate
							else 3 end																						as OrderByField1,												-- 
		
					case	when i.NetTermDate >= now() 		then  abs(Datediff(now(), i.NetTermDate))
							when i.PaymentDueDate >= now() 		then  abs(Datediff(now(), i.PaymentDueDate))
							else abs(DATEDIFF(date(now()), date(i.SubmissionDate))) end										as OrderByField2

			FROM Invoice i
				left join Batch b 							on b.ID = i.BatchID
				left join Vendor v 							on v.ClientId = i.ClientId 
																and v.VendorId = i.VendorId
			WHERE i.ClientId = @ClientId
					AND i.IsDeleted 			= 0
					AND i.IsPaused	 			= 0
					and i.ApprovalStatusId		= pInvoiceStatus
					and i.InvoiceType 			<> 'Archive'
					and (
							(
								ifnull(pIndexInQueue, 0) = 0	
								and i.InvoiceID		<> ifnull(pInvoiceId, 0)
							)
								or pIndexInQueue in (1,2)
						)
		);


 	if pIndexInQueue = 1 THEN
		select 	RowNumber-1
		into 	pCount
		from 	(
					select	ROW_NUMBER() OVER (ORDER BY OrderByField1, OrderbyField2, Vendor, InvoiceType, InvoiceNo) AS RowNumber,
							InvoiceId
					from 	MyQueue
				) Data
		where 	InvoiceId = pInvoiceId;
		set pTotal = 0.00;
		Leave ThisProc;
	end if;


	select 	count(*), sum(InvoiceTotal)  into pCount, pTotal from MyQueue;
	if pIndexInQueue = 2 THEN
		leave ThisProc;
	end if;



	select 	
			Vendor,
			IFNULL(InvoiceNo, '') AS InvoiceNo,
			InvoiceType,
			InvoiceTotal,
			DiscountDate,
			PaymentDueDate,
			InQueueDays,
			'' as Reassigned,
			InvoiceSource,
			InvoiceSender,
			InvoiceId,
			IFNULL(LastActionBy, '') 																	AS LastActionBy,
			IFNULL(DATE_FORMAT(InvoiceDate, "%b %e, %Y"), '') 											AS InvoiceDate,
			ScannedDate,
			LastActionDate,
			ROW_NUMBER() OVER (ORDER BY OrderByField1, OrderbyField2, Vendor, InvoiceType, InvoiceNo)-1	AS RowIndex
	from MyQueue
	order	by 
			OrderByField1, OrderbyField2, Vendor, InvoiceType, InvoiceNo 
	LIMIT pOffset, pSize;
/*

set @pCount = 0;
set @pTotal = 0.00;
call _x_InvoiceMyQueueOther (88, 1, null, 0, 0, 15, @pCount, @pTotal);
select @pCount, @pTotal;


call _x_InvoiceMyQueueOther (88, 1, 660811554, 1, 0, 15, @pCount, @pTotal);
select @pCount, @pTotal;

*/

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoicePause` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoicePause`(
-- noformat 
	IN `pInvoiceId` 	int,
	IN `pClientId` 		int,
	IN `pUserId` 		char(36),
	IN `pComment` 		longtext,
	IN `pIsPaused` 		bool,
	OUT `pOldComment` 	longtext)
ThisProc:BEGIN
	IF (pIsPaused = TRUE) THEN /*Pause Invoice*/
		UPDATE	Invoice set 
				IsPaused = TRUE,
				LastActionDate = UTC_TIMESTAMP()
		WHERE	InvoiceId = pInvoiceId
				AND ClientId = pClientId;
		
		INSERT INTO PausedInvoice (InvoiceId, PauseBy, PausedDate, Comment)
			VALUES (pInvoiceId, pUserId, UTC_TIMESTAMP(), pComment)
			on duplicate key 	update 	PauseBy		= pUserId,
										PausedDate 	= UTC_TIMESTAMP(),
										Comment		= pComment;

		set @Message = null;
		select 	concat('Invoice paused for', char(13), char(10), VendorName, char(13), char(10), pComment)
		into 	@Message
		from 	Invoice 
				inner join Vendor 	on Vendor.VendorId = Invoice.VendorId and Vendor.ClientId = Invoice.ClientId
		WHERE	Invoice.InvoiceId = pInvoiceId
				AND Invoice.ClientId = pClientId;

		call _x_NotifyAdmins (pClientId, pUserId, 'Invoice paused', @Message, 'InvoicePause', 'Invoice', pInvoiceId);
	
	ELSEIF (pIsPaused = FALSE) THEN /*Unpause Invoice*/

		SELECT	Comment 
		INTO	pOldComment
		FROM	PausedInvoice
		WHERE	InvoiceId = pInvoiceId;
		
		UPDATE	Invoice		SET IsPaused = FALSE
		WHERE	InvoiceId = pInvoiceId
				AND ClientId = pClientId;
		
		DELETE	FROM PausedInvoice
		WHERE	InvoiceId = pInvoiceId;

		delete	Data
		from	UserNotification Data
				inner join User u	on u.UserId = Data.UserId
		where 	u.ClientId = pClientId
				and Data.Source = 'InvoicePause' 
				and Data.LinkPage = 'Invoice' 
				and Data.LinkValue = pInvoiceId 
				and Data.ReadDate is null;
		
	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoicePONumber` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoicePONumber`(
-- noformat
	IN `pInvoiceId` INT,
	IN `pClientId` INT
)
BEGIN
	set @SplitChar = null;
	set @PONum = null;

	select SplitterCharacter 	into @SplitChar 	from ClientPONumberSplitter 	where ClientId = pClientId;
	SELECT PONumber 			INTO @PONum 		FROM Invoice 					WHERE InvoiceId = pInvoiceId;

	set @SplitChar 	= ifnull(@SplitChar, '|');
	set @PONum 		= ifnull(@PONum, '');

	call _x_StringToRows(@PONum, @SplitChar);

	select 	SearchValue 																						as PONumber,
			(Select count(*) 							from PO where ClientId = 88 and PONumber = SearchValue)	as TotalItems,
			(Select format(ifnull(SUM(ExtCost), 0),2) 	from PO where ClientId = 88 and PONumber = SearchValue)	as TotalOfPO
	from 	tSearchList
	order 	by 1;

-- 	SET @Expression = CONCAT(' SELECT
-- 											PONumber,
-- 											COUNT(DISTINCT ItemNumber) 	AS TotalItems, 
-- 											format(SUM(ExtCost),2) 		AS TotalOfPO								   
-- 								FROM	PO
-- 								WHERE	ClientId = ',pClientId,' 
-- 										and "', @SplitChar, @PONum, @SplitChar, '" like concat("%', @SplitChar, '", PONumber, "', @SplitChar, '%")
-- 								GROUP 	BY PONumber 
-- 								ORDER	BY PONumber ASC');
-- 
--  	PREPARE myquery FROM @Expression;
--  	EXECUTE myquery;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceRelatedDocs` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceRelatedDocs`(
	IN `pInvoiceId` int
)
BEGIN

-- Noformat

	SELECT	ClientId, CompanyCode, VendorId, InvoiceNo, PONumber, ParentInvoiceId, SourceInvoiceId
	INTO 	@ClientId, @CompanyCode, @VendorId, @InvoiceNo, @PONumber, @ParentInvoiceId, @SourceInvoiceId
	FROM 	Invoice
	WHERE 	InvoiceId = pInvoiceId;


	SELECT	case 
				when RD.SourceInvoiceId is not null 
					then 'Attachment'
				else RD.InvoiceType end 					as InvoiceType,
			RD.InvoiceNo,
			RD.PONumber,
			date(RD.InvoiceDate)							as InvoiceDate,
			RD.InvoiceTotal,
			iStatus.StateName								AS InvoiceStatus,
			(SELECT		COUNT(*)
				FROM	InvoiceDocs iDocs
				WHERE	iDocs.InvoiceId = RD.InvoiceId) 	AS PageCount,
			RD.InvoiceId
	FROM Invoice RD
		INNER JOIN InvoiceStatus iStatus	ON iStatus.StateId = RD.ApprovalStatusId
	WHERE RD.ClientId = @ClientId
			AND (RD.CompanyCode = @CompanyCode or RD.CompanyCode is null)
			AND RD.IsDeleted 	= 0
			AND RD.InvoiceId 	<> pInvoiceId
			AND (
					(	
						RD.VendorId 	= @VendorId
						and (
								RD.InvoiceNo 	= NULLIF(@InvoiceNo, '') 
								OR RD.PONumber 	= NULLIF(@PONumber, '')
							)
					)
					or RD.ParentInvoiceId	= pInvoiceId
					or RD.ParentInvoiceId	= @ParentInvoiceId
					or RD.InvoiceId 		= @ParentInvoiceId
					or RD.SourceInvoiceId	= pInvoiceId
					or RD.InvoiceId			= @SourceInvoiceId
				)
	ORDER 	BY case	when RD.SourceInvoiceId is not null then 1 
					when RD.InvoiceType = 'Invoice' then 99 
					else 10 end,
			RD.InvoiceNo,
			RD.PONumber,
			RD.InvoiceDate;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceReset` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceReset`(
-- noformat
	IN `pClientId` int,
	IN `pInvoiceId` int,
	IN `pUserId` char(36)
)
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
		@p1 = MESSAGE_TEXT;
		SET @Message = @p1;
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @p1, MYSQL_ERRNO = 1;
	END;

	set @CurrentStatus = '';
	select 	_x_GetInvoiceStatusName(ApprovalStatusId)
			into @CurrentStatus
	from	Invoice
	where 	ClientId = pClientId
			and InvoiceId = pInvoiceId;

	SELECT	CONCAT(LastName, ', ', FirstName) INTO @UserName
	FROM	User
	WHERE	ClientId = pClientId
			AND UserId = pUserId;


	INSERT INTO InvoiceHistory (InvoiceId, ActorId, Actor, `Action`, ActionDate, NewData, `Field`, InitialStatus, CurrentStatus)
 			VALUES (pInvoiceId, pUserId, @UserName, 'Update', UTC_TIMESTAMP(), 'Invoice was reset', 'Invoice Status', @CurrentStatus, 'Captured');
	
	Update 	Invoice set ApprovalStatusId = 1, AprovedDate = null
	where 	ClientId = pClientId
			and InvoiceId = pInvoiceId; 

 	DELETE	FROM PendingApprovalHistory			WHERE InvoiceId = pInvoiceId;
 	DELETE	FROM ApprovalHistory				WHERE InvoiceId = pInvoiceId;
 	DELETE	FROM UserInvoiceAssignment			WHERE InvoiceId = pInvoiceId;
 	DELETE	FROM UserInvoiceAssignmentHistory	WHERE InvoiceId = pInvoiceId;

	set @Message = null;
	call _x_InvoiceSubmit(pClientId, pInvoiceId, pUserId, 0, @Message);

	if not @Message in ('Submitted', 'Exception') THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @Message, MYSQL_ERRNO = 1;
	end if;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceSubmit` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceSubmit`(
-- noformat
	IN pClientId 	int,
	IN pInvoiceId 	int,
	IN pUserId 		varchar(36),
	IN pForTesting	int,
	INOUT pMessage	varchar(500)
)
ThisProc:BEGIN
	DECLARE done int DEFAULT FALSE;
	DECLARE InvoiceFieldName 		varchar(100);
	DECLARE InvoiceDisplayName 		varchar(100);
	declare FieldDatatype 			varchar(100);
	declare CheckDuplicate 			varchar(100);
	DECLARE curRequiredCheck CURSOR FOR SELECT * FROM MyRequiredFields;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
		@p1 = MESSAGE_TEXT;
		SET pMessage = @p1;
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @p1, MYSQL_ERRNO = 1;
	END;

	SET SESSION group_concat_max_len = 1000000;

	SET @DEBUGONLY = IFNULL(pForTesting, 0);


	SET @ApprovalStatusId 	= -1;
	set @VendorId			= null;
	set @InvoiceType 		= null;
	set @InvoiceTotal		= null;
	set @InvoiceNo			= null;
	set @PONumber			= null;
	set @isPO				= null;
	set @CompanyCode		= null;
	set @InvoiceTaxAmount	= null;
	set @FreightAmount		= null;

	-- Get the information about the invoice
	select 	ApprovalStatusId,
			VendorId, i.InvoiceNo, i.PONumber, i.IsPOInvoice, i.CompanyCode, i.InvoiceType,
			ifnull(i.InvoiceTotal, 0), ifnull(i.Tax, 0), ifnull(i.FreightCharges, 0)
	into 	@ApprovalStatusId, 
			@VendorId, @InvoiceNo, @PONumber, @isPO, @CompanyCode, @InvoiceType,
			@InvoiceTotal, @InvoiceTaxAmount, @FreightAmount
	from 	Invoice i
	where 	InvoiceId = pInvoiceId and ClientId = pClientId
			and i.IsPaused = 0 and i.IsDeleted = 0;


	If not @ApprovalStatusId in (1,6) THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The invoice is no longer in exception.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;

	

-- Get The information about the submitter
	SET @ApproverName 		= null;
	set @isAdmin 			= 0;
	set @isEHandler 		= 0;

	SELECT	CONCAT(u.LastName, ', ', u.FirstName),
			xup.IsExceptionHandler
	INTO	@ApproverName, @isEHandler
	FROM	User u
 			inner join 	_x_UserParameters xup ON xup.UserId = u.UserId
 	WHERE	u.UserId = pUserId;

	if exists (SELECT	cr.*
				FROM	ClientUserRoles cur
						INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
				WHERE 	cr.isAdmin	= 1
						aND cur.UserId	= pUserId
				limit 	1) then 
		SET @IsAdmin = 1;
	END IF;


	IF @ApproverName is null THEN
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Unknown user.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;	
	IF @IsEHandler = 0 and @isAdmin = 0 then 
		SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Not authorized to submit this invoice.', MYSQL_ERRNO = 1;
		LEAVE ThisProc;
	END IF;	


	-- Clear the exceptions for this invoice
	Insert into ExceptionHistory (InvoiceId, ExceptionTypeId, ExceptionHandlerId, ExceptionHandledDate, Comment, SourceExceptionId)
		select	InvoiceId, ExceptionTypeId, pUserId, Now(), Comment, null
		from	Exception where InvoiceId = pInvoiceId;

	Delete from Exception where InvoiceId = pInvoiceId;
	
	set @SQLDuplicateCheck = null;

	-- Check all the required fields
	drop TEMPORARY TABLE IF EXISTS MyRequiredFields;

	CREATE TEMPORARY TABLE IF NOT EXISTS MyRequiredFields AS (
		select 	ia.InvoiceAttributeName, ifnull(cia.DisplayName, ia.DefaultDisplayName) as DisplayName, COLUMNS.DATA_TYPE, cia.CheckDuplicate
		from	ClientInvoiceAttribute cia
				inner join 	InvoiceAttribute ia on ia.InvoiceAttributeID = cia.InvoiceAttributeID
				inner join 	information_schema.COLUMNS 	on COLUMNS.Column_Name = ia.InvoiceAttributeName
															and TABLE_SCHEMA = DATABASE()
 															and TABLE_NAME = 'Invoice'
		where 	ClientId = pClientId
				and cia.InvoiceType = @InvoiceType
				and (cia.IsRequred = 1 or cia.IsCritical = 1)
				and isReadOnly = 0
				and (
						(@ApprovalStatusId in (1,6) and Task = 2 and @isPO = 1)
						or (@ApprovalStatusId in (1,6) and Task = 3 and @isPO = 0)
					)
		);

	OPEN curRequiredCheck;
readParms:
	LOOP
		FETCH curRequiredCheck INTO InvoiceFieldName, InvoiceDisplayName, FieldDatatype, CheckDuplicate;
		IF done THEN
			LEAVE readParms;
		END IF;

		if CheckDuplicate = 1 then
			set @SQLDuplicateCheck = ifnull(concat(@SQLDuplicateCheck, char(13), char(10), 'and '), 'Select 1 into @DuplicateInvoice from Invoice Chk inner join Invoice Data on ');
			set @SQLDuplicateCheck = concat(@SQLDuplicateCheck, 'Data.', InvoiceFieldName, ' = Chk.', InvoiceFieldName);
		end if;

		set @SQL = Concat('Insert into Exception (InvoiceId, ExceptionTypeId, Comment)');
		set @SQL = Concat(@SQL, char(13), char(10), 'Select ', pInvoiceId, ',', 99, ', ', '''', InvoiceDisplayName, ' is missing.''');
		set @SQL = Concat(@SQL, char(13), char(10), 'from Invoice where InvoiceId = ', pInvoiceId);
		set @SQL = Concat(@SQL, char(13), char(10), 'and nullif(', InvoiceFieldName, ', ', case when FieldDatatype in ('varchar', 'longtext', 'text', 'mediumtext', 'char') then '''''' else '0' end, ') is null');
		PREPARE myquery FROM @SQL;
		EXECUTE myquery;
		deallocate PREPARE myquery;

	END LOOP;
	CLOSE curRequiredCheck;


	if @SQLDuplicateCheck is not null THEN
		set @SQLDuplicateCheck = concat(@SQLDuplicateCheck, char(13), char(10), 'and Data.ClientId = Chk.ClientId');
		set @SQLDuplicateCheck = concat(@SQLDuplicateCheck, char(13), char(10), 'and Chk.InvoiceId = ', pInvoiceId);
		set @SQLDuplicateCheck = concat(@SQLDuplicateCheck, char(13), char(10), 'Where Data.IsDeleted = 0 and Data.InvoiceId <> ', pInvoiceId);

		set @DuplicateInvoice = 0;
		PREPARE myquery FROM @SQLDuplicateCheck;
		EXECUTE myquery;
		deallocate PREPARE myquery;

		if pForTesting = 1 then 
			select 'Duplicate Check', @SQLDuplicateCheck;
		end if;
		
		if @DuplicateInvoice = 1 THEN
			Insert into Exception (InvoiceId, ExceptionTypeId, Comment)
				Values (pInvoiceId, 100, 'Duplicate Detected.');
		end if;

	end if;


	

-- 	if @isPO = 1 then 
-- 		SET @AdjustmentPercentPlus = 0;
-- 		SET @AdjustmentPercentMinus = 0;
-- 		set @AdjustmentAmountPlus = 0;		-- Priority is Percentage
-- 		set @AdjustmentAmountMinus = 0;
-- 		IF EXISTS ( SELECT	1
-- 					FROM	ClientSpecificConfig
-- 					WHERE	ClientSpecificConfigType = 29			-- ConsiderAdjustmentAmountForTreshold
-- 					AND	ClientId = pClientId) THEN
-- 
-- 			select	ifnull(-(AdjustmentPercent), 0), ifnull(-(AdjustmentAmount), 0)
-- 			into 	@AdjustmentPercentMinus, @AdjustmentAmountMinus
-- 			from	Client 
-- 			where	ClientId = pClientId;
-- 
-- 			IF EXISTS ( SELECT	1
-- 						FROM	ClientSpecificConfig
-- 						WHERE	ClientSpecificConfigType = 751		-- AllowNegativeThresholdTobeApprove
-- 						AND		ClientId = pClientId) THEN
-- 					SET @AdjustmentPercentPlus 	= @AdjustmentPercentMinus * -1;
-- 					SET @AmountPercentPlus	 	= @AdjustmentAmountMinus * -1;
-- 			END IF;
-- 		END IF;
-- 
-- 		-- Check PO rules to report any exceptions
-- 		if exists (select * from ClientExceptionRule where ClientId = pClientId and Task = 0 and ConfigurableExceptionType in  (0, 3)) THEN
-- 			if not exists (select * from LineItemDetail lid where InvoiceId = pInvoiceId) THEN
-- 				Insert into Exception (InvoiceId, ExceptionTypeId, Comment)
-- 					Values (pInvoiceId, 99, 'Missing line items.');
-- 			end if;
-- 			set @AmountCheckPlus 	= @InvoiceTotal + @InvoiceTaxAmount + @FreightAmount;
-- 			set @AmountCheckMinus 	= @InvoiceTotal + @InvoiceTaxAmount + @FreightAmount;
-- 
-- 			if @AdjustmentPercentMinus <> 0 then
-- 				set @AmountCheckPlus	= @AmountCheckPlus 	+ (@AmountCheckPlus * @AdjustmentPercentPlus / 100);
-- 				set @AmountCheckMinus	= @AmountCheckMinus + (@AmountCheckMinus * @AdjustmentPercentMinus / 100);
-- 			elseif @AdjustmentAmountMinus <> 0 then
-- 				set @AmountCheckPlus	= @AmountCheckPlus 	+ @AdjustmentAmountPlus;
-- 				set @AmountCheckMinus	= @AmountCheckMinus + @AdjustmentAmountMinus;
-- 			end if;
-- 
-- 			if @DEBUGONLY = 1 THEN
-- 				select 'Theshold',  @AmountCheckMinus, @AmountCheckPlus;
-- 			end if;
-- 
-- 			if not ifnull((	select	sum(lid.TotalAmount) 
-- 							from	LineItemDetail lid 
-- 							where	InvoiceId = pInvoiceId), @AmountCheckPlus) between @AmountCheckMinus and @AmountCheckPlus THEN
-- 				if @AmountCheckMinus = @AmountCheckPlus then
-- 					Insert into Exception (InvoiceId, ExceptionTypeId, Comment)
-- 						Values (pInvoiceId, 99, 'Sum of the line items do not match the invoice total.');
-- 				else
-- 					Insert into Exception (InvoiceId, ExceptionTypeId, Comment)
-- 						Values (pInvoiceId, 99, 'Adjustment amount exceeds the threshold configuration.');
-- 				end if;
-- 			end if;
-- 		end if;
-- 
-- 	end if;


	if exists (select 1 from Exception e where InvoiceId = pInvoiceId) THEN
		set pMessage = 'Exception';
		LEAVE ThisProc;
	end if;

	-- Housekeeping
	delete 	from UserInvoiceAssignment 			where InvoiceId = pInvoiceId;
	DELETE 	from PendingApprovalHistory 		where InvoiceId = pInvoiceId;
	DELETE 	from TempApprovalHistory 			where InvoiceId = pInvoiceId;
	DELETE 	from ApprovalHistory 				where InvoiceId = pInvoiceId;

	call _x_InvoiceApprove(pClientId, pInvoiceId, pUserId, pForTesting, pMessage);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceUpdate`(
-- noformat
	IN `pType` 				tinyint,
	IN `pClientId` 			int,
	IN `pInvoiceId` 		int,
	IN `pApprovalStatus` 	tinyint,
	IN `pUserId` 			varchar(36),
	IN `pSetStatement` 		longtext)
BEGIN

	IF (pType = 0) THEN	
 		set @Actor = null;



		set @CountOfGLCoding = 0;
		set @OldInvoiceTotal = 0;
		set @NewInvoiceTotal = 0;
		select 	InvoiceTotal, (select count(*) from PendingApprovalHistory pah where InvoiceId = pInvoiceId) as CountOfGLCoding, case when ApprovalStatusId = 1 then 'QC' else 'Update' end
				
		into 	@OldInvoiceTotal, @CountOfGLCoding, @Action
		from	Invoice 
		where 	InvoiceId = pInvoiceId;
		
		call _x_InvoiceUpdateDataChanges(pInvoiceId, pClientId, 'Before');

		SET @Expression = CONCAT("
				UPDATE 	Invoice SET 
						LastActionDate 		= UTC_TIMESTAMP(), 
						ApprovalStatusId 	= ", pApprovalStatus, ", ",
						pSetStatement, " 
				WHERE	ClientId = ", pClientId, " 
						AND InvoiceId = ", pInvoiceId);

		PREPARE myquery FROM @Expression;
		EXECUTE myquery;
		deallocate prepare myquery;

		Update	Invoice 	set ApprovalStatusId = 5, AcceptedDate = now()
		where 	InvoiceId = pInvoiceId 
				and ClientId = pClientId
				and ifnull(ArchiveReason, '') <> ''
				and ApprovalStatusId <> 5;
		
		call _x_InvoiceUpdateDataChanges(pInvoiceId, pClientId, 'After');

		select	ifnull(StateBefore.StateName, FieldValueBefore), ifnull(StateAfter.StateName, FieldValueAfter)
		into 	@OldStatus, @NewStatus
		from 	myDataChanges
				left join 	InvoiceStatus as StateBefore 	on StateBefore.StateId 	= myDataChanges.FieldValueBefore
				left join 	InvoiceStatus as StateAfter 	on StateAfter.StateId 	= myDataChanges.FieldValueAfter
		where 	FieldName = 'ApprovalStatusId';

		if exists (select 1 from myDataChanges where FieldName = 'ArchiveReason' and FieldValueBefore <> FieldValueAfter) then 
			select 	FieldValueBefore, FieldValueAfter
			into	@FieldValueBefore, @FieldValueAfter
			from	myDataChanges
			where 	FieldName = 'ArchiveReason';

			update	InvoiceArchiveReason iar
			SET		iar.TotalCount = TotalCount - 1
			where 	ClientId = pClientId
					and iar.ArchiveReason = @FieldValueBefore;

			Insert into InvoiceArchiveReason(ClientId, ArchiveReason, TotalCount, LastUsed)
				values(pClientId, @FieldValueAfter, 1, date(now()))
				on Duplicate key Update TotalCount = TotalCount + 1, LastUsed = date(LastUsed);

			Delete 	from UserInvoiceAssignment
					where InvoiceId = pInvoiceId;

			Delete	from UserNotification
					where LinkPage = 'Invoice' and LinkValue = pInvoiceId and ReadStatus = 0;

		end if;
		
		if exists (select 1 from myDataChanges where FieldName = 'InvoiceTotal' and FieldValueBefore <> FieldValueAfter) then 
			select 	FieldValueBefore, FieldValueAfter
			into	@FieldValueBefore, @FieldValueAfter
			from	myDataChanges
			where 	FieldName = 'InvoiceTotal';

			if @CountOfGLCoding > 1 then
				delete from PendingApprovalHistory where InvoiceId = pInvoiceId;
			elseif @CountOfGLCoding = 1 then
				update PendingApprovalHistory set AmountAppoved = @FieldValueAfter   
					where InvoiceId = pInvoiceId;
			end if;
		end if;

		-- relabel data so it can appear more readable in the history
		Update	myDataChanges
				left join 	InvoiceStatus as StateBefore 	on StateBefore.StateId 	= myDataChanges.FieldValueBefore
				left join 	InvoiceStatus as StateAfter 	on StateAfter.StateId 	= myDataChanges.FieldValueAfter
		set 	FieldValueBefore 	= ifnull(StateBefore.StateName, FieldValueBefore),
				FieldValueAfter 	= ifnull(StateAfter.StateName, FieldValueAfter)
		where 	FieldName = 'ApprovalStatusId';

		Update	myDataChanges
				left join 	Vendor as StateBefore 	on StateBefore.VendorId 	= myDataChanges.FieldValueBefore	and StateBefore.ClientId = pClientId
				left join 	Vendor as StateAfter 	on StateAfter.VendorId 		= myDataChanges.FieldValueAfter		and StateAfter.ClientId = pClientId
		set 	FieldValueBefore 	= ifnull(StateBefore.VendorName, FieldValueBefore),
				FieldValueAfter 	= ifnull(StateAfter.VendorName, FieldValueAfter)
		where 	FieldName = 'VendorId';

		Update	myDataChanges
				left join 	OrgData as StateBefore 	on StateBefore.Id 	= myDataChanges.FieldValueBefore	and StateBefore.ClientId = pClientId
				left join 	OrgData as StateAfter 	on StateAfter.Id 	= myDataChanges.FieldValueAfter		and StateAfter.ClientId = pClientId
		set 	FieldValueBefore 	= ifnull(StateBefore.OrgName, FieldValueBefore),
				FieldValueAfter 	= ifnull(StateAfter.OrgName, FieldValueAfter)
		where 	FieldName = 'OrgId';


		-- Birhanu HERE



		-- Birhanu HERE


		select 	LastActionBy
		into 	@Actor
		FROM	Invoice
		where 	InvoiceId = pInvoiceId;


		-- Insert change to history
		INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId, OldID)
			select	pInvoiceId, @Actor, @Action, now(), FieldValueBefore, FieldValueAfter, FieldLabel, @OldStatus, @NewStatus, pUserId, null
			from	myDataChanges
			where 	FieldValueBefore <> FieldValueAfter;

	ELSE
		UPDATE	Invoice	SET		IsDeleted = TRUE
		WHERE	ClientId = pClientId
				AND InvoiceId = pInvoiceId;
	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceUpdateDataChanges` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceUpdateDataChanges`(
	IN pInvoiceId int,
	IN pClientId int,
	in pStage varchar(10)
)
BEGIN
	DECLARE done int DEFAULT FALSE;
	DECLARE DataField varchar(100);
	DECLARE curParms CURSOR FOR SELECT FieldName FROM myDataChanges;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;


	if pStage = 'Before' then
		SELECT
				   CASE		WHEN ApprovalStatusId = 1 AND IsPOInvoice = 1 THEN 6 
							WHEN ApprovalStatusId = 1 AND IsPOInvoice = 0 THEN 7 
							WHEN ApprovalStatusId = 3 AND IsPOInvoice = 1 THEN 0 
							WHEN ApprovalStatusId = 3 AND IsPOInvoice = 0 THEN 1 
							WHEN ApprovalStatusId = 4 AND IsPOInvoice = 1 THEN 0 
							WHEN ApprovalStatusId = 4 AND IsPOInvoice = 0 THEN 1 
							WHEN ApprovalStatusId = 5 AND IsPOInvoice = 1 THEN 0 
							WHEN ApprovalStatusId = 5 AND IsPOInvoice = 0 THEN 1 
							WHEN ApprovalStatusId = 6 AND IsPOInvoice = 1 THEN 2 
							WHEN ApprovalStatusId = 6 AND IsPOInvoice = 0 THEN 3 
							WHEN ApprovalStatusId > 6 AND IsPOInvoice = 1 THEN 0 
							WHEN ApprovalStatusId > 6 AND IsPOInvoice = 0 THEN 1 
							ELSE 0 END AS Task
		INTO 	@TaskId
		FROM	Invoice
		WHERE	InvoiceId = pInvoiceId
		LIMIT 1;
		
		drop temporary table if exists myDataChanges;
		create temporary table myDataChanges (
			FieldName 			varchar(100),
			FieldLabel 			varchar(100),
			FieldValueBefore	text,
			FieldValueAfter		text
			);

		insert into myDataChanges(FieldName, FieldLabel)
			select 	CASE 	WHEN InvoiceAttribute.InvoiceAttributeName = 'GLCodeId' 		THEN 'InvoiceNo' 
							ELSE InvoiceAttribute.InvoiceAttributeName 						END,
					CASE	WHEN ClientInvoiceAttribute.DisplayName = '' 					THEN IF(InvoiceAttribute.DefaultDisplayName != '', InvoiceAttribute.DefaultDisplayName, InvoiceAttribute.InvoiceAttributeName) 
							ELSE COALESCE(ClientInvoiceAttribute.DisplayName, InvoiceAttribute.DefaultDisplayName, InvoiceAttribute.InvoiceAttributeName) END
					FROM 	ClientInvoiceAttribute
							INNER JOIN InvoiceAttribute				ON ClientInvoiceAttribute.InvoiceAttributeID = InvoiceAttribute.InvoiceAttributeID
					WHERE 	ClientInvoiceAttribute.ClientID = pClientId
							AND ClientInvoiceAttribute.Task = @TaskId
					ORDER BY OrderNo, DisplayName;

		insert into myDataChanges(FieldName, FieldLabel) Values ('ApprovalStatusId', 'Invoice status');

	end if;
	
	
	set @SQL = Concat("Update 	myDataChanges as t
								inner join Invoice as Data on InvoiceId = ", pInvoiceId, "
						set 	t.FieldValue", pStage, " = ifnull(case ");

	OPEN curParms;
readParms:
	LOOP
		FETCH curParms INTO DataField;	
		IF done THEN
			LEAVE readParms;
		END IF;
		set @SQL = concat(@SQL, "when t.FieldName = '", DataField, "' then Data.", DataField, "
								");
	END LOOP;
	CLOSE curParms;
	set @SQL = concat(@SQL, "else null end, '')");

	prepare stmt from @Sql;
	execute stmt;
	deallocate prepare stmt;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceUpdateHistory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceUpdateHistory`(
IN `pInvoiceId` int,
IN `pActor` varchar(250),
IN `pAction` varchar(250),
IN `pActionDate` datetime,
IN `pPreviousData` longtext,
IN `pNewData` longtext,
IN `pField` varchar(250),
IN `pInitialStatus` varchar(50),
IN `pCurrentStatus` varchar(50),
IN `pActorId` char(36),
IN `pOldID` int)
BEGIN

  INSERT INTO InvoiceHistory (InvoiceId, Actor, ACTION, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId, OldID)
    VALUES (pInvoiceId, pActor, pAction, UTC_TIMESTAMP(), pPreviousData, pNewData, pField, pInitialStatus, pCurrentStatus, pActorId, pOldID);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_InvoiceUsers` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_InvoiceUsers`(
-- noformat
	IN `p_TypeOp` tinyint,
	IN `pId` int,
	IN `pClientId` int,
	IN `pInvoiceId` int,
	IN `pUserId` char(36),
	IN `pType` tinyint,
	IN `pState` tinyint,
	IN `pDateCreated` datetime,
	IN `pApprovalSubStepId` int,
	IN `pHoldStartDate` date,
	IN `pHoldEndDate` date,
	IN `pAssignBackToUserId` char(36),
	IN `pComments` varchar(250)
)
BEGIN

	SET @RowCount = 0;
	SET @StepId = 0;
	SET @SubStepId = 0;
	set @NotificationMessage = 'This invoice was assigned to you.';

	
	IF (p_TypeOp = 1) THEN /* Select, Get assigned users*/

		SELECT	uia.Id,
				uia.InvoiceId,
				usr.UserName,
				CONCAT(usr.LastName, ', ', usr.FirstName) AS FullName,
				uia.DateCreated,
				CAST(usr.UserId AS char(36)) AS UserId
		FROM	UserInvoiceAssignment uia
		JOIN	User usr ON uia.UserId = usr.UserId
		WHERE	usr.ClientId = pClientId AND uia.InvoiceId = pInvoiceId;
		
	ELSEIF (p_TypeOp = 2) THEN /* Insert, assign user*/
		-- Check if user already exists
		SELECT COUNT(*) INTO @RowCount FROM UserInvoiceAssignment WHERE UserId = pUserId AND InvoiceId = pInvoiceId;
		
		select 	CONCAT('Invoice for ', format(InvoiceTotal, 2), ' assigned to you.')
		into 	@NotificationMessage
		from 	Invoice
		where InvoiceId = pInvoiceId;

		IF @RowCount = 0 THEN
			SELECT ApprovalStepId 		INTO @StepId 	FROM ApprovalStep 		WHERE ClientId = pClientId 		ORDER BY OrderNo LIMIT 1;
			SELECT ApprovalSubStepId 	INTO @SubStepId FROM ApprovalSubStep 	WHERE ApprovalStepId = @StepId 	ORDER BY OrderNo LIMIT 1;
			
			INSERT INTO UserInvoiceAssignment (InvoiceId, UserId, Type, State, DateCreated, ApprovalSubStepId, HoldStartDate, HoldEndDate, AssignBackToUserId, Comments)
			VALUES (pInvoiceId, pUserId, pType, pState, pDateCreated, @SubStepId, NULL, NULL, pAssignBackToUserId, pComments);
			
			CALL _x_Notify(pUserId, 'Invoice Assignment', CONCAT(@NotificationMessage, IFNULL(concat('\n', '"', nullif(pComments, ''), '"'), '')), 'Assignment', 'Invoice', pInvoiceId, NULL);
		END IF;
		
	ELSEIF (p_TypeOp = 3) THEN /* Delete, unassign user */
		
		DELETE	uia 
		FROM	UserInvoiceAssignment uia
				inner JOIN User u ON uia.UserId = u.UserId
		WHERE	uia.Id = pId 
				AND u.ClientId = pClientId;

		delete Data
		from	UserNotification Data
				inner join User u	on u.UserId = Data.UserId
		where 	u.ClientId = pClientId
				and Data.Source = 'Approval' 
				and Data.LinkPage = 'Invoice' 
				and Data.LinkValue = pInvoiceId 
				and Data.ReadDate is null;
		
	ELSE
		
		SELECT ("No operation");
	
	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_LineItemById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_LineItemById`(IN `pType` tinyint,
IN `pInvoiceId` int,
IN `pVendorId` int,
IN `pPONumber` varchar(250),
IN `pAttrNames` varchar(2000))
BEGIN

  IF (pType = 0) THEN

    SET @Expression = CONCAT('
			SELECT 
				LineItemDetail.LineItemDetailId AS Id,
				', pAttrNames, ',
				COALESCE(CONCAT(Vendor.VendorNo, ", ", Vendor.VendorName), Vendor.VendorNo) AS VendorName,
				COALESCE(CONCAT(Department.DepartmentName, ", ", Department.`Description`), Department.DepartmentName) AS DepartmentName,
				COALESCE(CONCAT(ProjectType.ProjectName, ", ", ProjectType.`Description`), ProjectType.ProjectName) AS ProjectName
				
			FROM LineItemDetail 
			LEFT JOIN Vendor ON LineItemDetail.VendorId = Vendor.VendorId
			LEFT JOIN Department ON LineItemDetail.DepartmentId = Department.Id
			LEFT JOIN ProjectType ON LineItemDetail.ProjectTypeId = ProjectType.Id
			WHERE LineItemDetail.InvoiceId = ', pInvoiceId, ';');

    PREPARE myquery FROM @Expression;
    EXECUTE myquery;

  ELSE
	set @ClientId = -1;
	select ClientId 			into @ClientId from Invoice where InvoiceId = pInvoiceId;
	select SplitterCharacter 	into @SplitChar 	from ClientPONumberSplitter 	where ClientId = @ClientId;
	set @SplitChar 	= ifnull(@SplitChar, '|');
	call _x_StringToRows(pPONumber, @SplitChar);


    SET @Expression = CONCAT('
			SELECT 
				', pAttrNames, ',
				Id
			FROM  PO 
			WHERE	VendorId = ', pVendorId, ' 
					AND ClientId = ', @ClientId, '
					and PONumber in (select SearchValue from tSearchList) 
					and not exists (select 1 from LineItemDetail lid where lid.InvoiceId = ', pInvoiceId,' and lid.POId = PO.Id)
			ORDER BY PONumber ASC;');

    PREPARE myquery FROM @Expression;
    EXECUTE myquery;

  END IF;



END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_LineItemUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_LineItemUpdate`(IN `pType` tinyint,
-- noformat
	IN `pClientId` int,
	IN `pInvoiceId` int,
	IN `pPOId` int,
	IN `pUserId` char(36),
	IN `pData` text)
BEGIN

	SET FOREIGN_KEY_CHECKS = 0;
	
	IF (pType = 0) THEN
		DELETE
		FROM LineItemDetail
		WHERE InvoiceId = pInvoiceId;
		
	ELSEIF (pType = 1) THEN
		SET @Expression = CONCAT(pData);
		PREPARE myquery FROM @Expression;
		EXECUTE myquery;
	
	ELSEIF (pType = 2) THEN
		set @SplitChar = null;
			INSERT INTO LineItemDetail (InvoiceId, ActualQty, Quantity, ProductId, ProductDescription, `Description`, UnitPrice, TotalAmount, ItemNo, UnitOfPurchase,
						LineNo, POHeaderId, POLineId, POLineLocationId, RecievedTransactionId, PONumber, `GLCode`, IsExpense, OrderQuantity, ClientCompanyId, DeliveryDate, Container,
						UserField1, UserField2, UserField3, UserField4, UserField5, UserField6, UserField7, UserField8, UserField9, UserField10,
						POType, POId, DepartmentId, Currency, CustomerId, ProjectTypeId, SubProjectTypeId, Title, SupplierType, PRUseDescription,
						IsRepairOrder, HaveParts, IsReturnToStock, IsCapitalProject, CapitalProjectNo, BudgetAvailableAfterPR, CheckPerson, DirectStockOrder, `VendorTerm`,
						PRNumber, GRNUse, HTSCode, SEApprovalNo, TaxCode, TaxCodeId, VendorId, AssetProjectId, ItemId)
			SELECT	pInvoiceId, RcvdQty, RcvdQty, VendorCatNumber, `Description`, `Description`, UnitCost, ExtCost, ItemNumber, UnitOfPurchase, 
					LineNo, POHeaderId, POLineId, POLineLocationId, RecievedTransactionId, PONumber, `GLCode`, IsExpense, OrderQty, ClientCompanyId, DeliveryDate, Container,
					UserField1, UserField2, UserField3, UserField4, UserField5, UserField6, UserField7, UserField8, UserField9, UserField10,
					POType, Id, DepartmentId, Currency, CustomerId, ProjectTypeId, SubProjectTypeId, Title, SupplierType, PRUseDescription,
					IsRepairOrder, HaveParts, IsReturnToStock, IsCapitalProject, CapitalProjectNo, BudgetAvailableAfterPR, CheckPerson, DirectStockOrder, `VendorTerm`,
					PRNumber, GRNUse, HTSCode, SEApprovalNo, TaxCode, TaxCodeId, VendorId, AssetProjectId, ItemId
			FROM	PO
			WHERE	Id = pPOId;
	


	ELSEIF (pType = 3) THEN
		set @PONum = null;
	
		select SplitterCharacter 	into @SplitChar 	from ClientPONumberSplitter 	where ClientId = pClientId;
		set @SplitChar 	= ifnull(@SplitChar, '|');
		call _x_StringToRows(@pData, @SplitChar);

		SET @VendorID = 0;
		
		SELECT	VendorId 
		INTO	@VendorID
		FROM	PO
		WHERE	ClientId = pClientId
				AND PONumber in (select SearchValue from tSearchList)
		LIMIT 1;
	
		IF (@VendorID > 0) THEN
			-- DELETE	FROM 	LineItemDetail					WHERE InvoiceId = pInvoiceId;
			UPDATE 	Invoice	SET VendorId = @VendorID		WHERE ClientId = pClientId AND InvoiceId = pInvoiceId;
			
			INSERT INTO LineItemDetail (InvoiceId, ActualQty, Quantity, ProductId, ProductDescription, `Description`, UnitPrice, TotalAmount, ItemNo, UnitOfPurchase,
										LineNo, POHeaderId, POLineId, POLineLocationId, RecievedTransactionId, PONumber, `GLCode`, IsExpense, OrderQuantity, ClientCompanyId, DeliveryDate, Container,
										UserField1, UserField2, UserField3, UserField4, UserField5, UserField6, UserField7, UserField8, UserField9, UserField10,
										POType, POId, DepartmentId, Currency, CustomerId, ProjectTypeId, SubProjectTypeId, Title, SupplierType, PRUseDescription,
										IsRepairOrder, HaveParts, IsReturnToStock, IsCapitalProject, CapitalProjectNo, BudgetAvailableAfterPR, CheckPerson, DirectStockOrder, `VendorTerm`,
										PRNumber, GRNUse, HTSCode, SEApprovalNo, TaxCode, TaxCodeId, VendorId, AssetProjectId, ItemId)
			SELECT	pInvoiceId, RcvdQty, RcvdQty, VendorCatNumber, `Description`, `Description`, UnitCost, ExtCost, ItemNumber, UnitOfPurchase, LineNo, POHeaderId, 
					POLineId, POLineLocationId, RecievedTransactionId, PONumber, `GLCode`, IsExpense, OrderQty,ClientCompanyId, DeliveryDate, Container,
					UserField1, UserField2, UserField3, UserField4, UserField5, UserField6, UserField7, UserField8, UserField9, UserField10, 
					POType, Id, DepartmentId, Currency, CustomerId,  ProjectTypeId, SubProjectTypeId, Title, SupplierType, PRUseDescription,
					IsRepairOrder, HaveParts, IsReturnToStock, IsCapitalProject, CapitalProjectNo, BudgetAvailableAfterPR, CheckPerson, DirectStockOrder, `VendorTerm`,
					PRNumber, GRNUse, HTSCode, SEApprovalNo, TaxCode, TaxCodeId, VendorId, AssetProjectId, ItemId
			FROM 	PO
			WHERE	ClientId = pClientId
					AND	PONumber in (select SearchValue from tSearchList)
					and VendorId = @VendorId
					and not exists (select 1 from LineItemDetail lid where lid.InvoiceId = pInvoiceId and lid.POId = PO.Id);
		END IF;
	ELSE
		SELECT	CONCAT(LastName, ' ', FirstName) 
		INTO	@UserName
		FROM	User
		WHERE	ClientId = pClientId
				AND UserId = pUserId;
	
		INSERT INTO InvoiceHistory (InvoiceId, ActorId, Actor, `Action`, ActionDate, NewData, `Field`, CurrentStatus)
			VALUES (pInvoiceId, pUserId, @UserName, 'Line Item Updated', UTC_TIMESTAMP(), pData, 'Line Item Detail', 'Updated');
	
	END IF;
	
	SET FOREIGN_KEY_CHECKS = 1;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_Notify` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_Notify`(IN pUsers text, IN pSubject varchar(200), IN pBody mediumtext, IN pSource varchar(20), IN pLinkPage varchar(20), IN pLinkValue varchar(20), IN pTemplate int)
ThisProc:
	BEGIN	
-- noformat

		CALL _x_StringToRows(pUsers, ';');
		--
		-- Notify the users
		--
		INSERT into UserNotification (UserId, SOURCE, Message, LinkPage, LinkValue, ReadStatus, ReadDate)
			SELECT 	u.UserId,	pSource, 	pBody, 	pLinkPage, pLinkValue, 
					CASE WHEN up.DisableNotifications = 0 THEN 0 ELSE 2 END,							-- 0 Unread, 1=READ 2=NOT notified but in their list
					CASE WHEN up.DisableNotifications = 0 THEN null ELSE now() END						-- if disabled, set it to read and then it will eventually be cleaned up
			FROM tSearchList
				INNER JOIN User u					ON u.UserId 	= tSearchList.SearchValue
				INNER JOIN _x_UserParameters up 	ON up.UserId 	= u.UserId
			WHERE u.IsActive = 1;



		--
		-- Emails
		--
		IF pUsers IS NOT null then
			SET @NewId = UUID();
			-- Send all emails that are immediate
			insert into Email (Id, ClientId, CreatedDate, Subject, Body, EmailType, Priority)
					SELECT 	@NewId, u.ClientId, now(),	pSubject	,pBody	,pTemplate, 9
					FROM 	tSearchList
							INNER JOIN User u					ON u.UserId 	= tSearchList.SearchValue
					WHERE 	u.IsActive = 1
							AND IFNULL(u.LimitMailPerDay, 0) = 2
					limit 1;
			if ROW_COUNT() > 0 then 
				insert into EmailRecipients(EmailId, EmailAddress, UserId, RecipientType)
						SELECT 	distinct @NewId, u.Email, u.UserId, 1
						FROM 	tSearchList
								INNER JOIN User u					ON u.UserId 	= tSearchList.SearchValue
						WHERE 	u.IsActive = 1
								and u.Email <> ''
								AND IFNULL(u.LimitMailPerDay, 0) = 2;
			end if;

-- 			SET @NewId = UUID();
-- 			-- Send all emails that are 1 / day (sent it tomorrow)
-- 			insert into Email (Id, ClientId, CreatedDate, Subject, Body, EmailType, Priority, SendAfter)
-- 					SELECT 	@NewId, u.ClientId, now(),	pSubject	,pBody	,pTemplate, 99,
-- 							CONVERT_TZ(date_add(date(CONVERT_TZ(NOW(), 'UTC', xcp.TimeZone)), interval 1 day), xcp.TimeZone, 'UTC')
-- 					FROM tSearchList
-- 							INNER JOIN User u					ON u.UserId 	= tSearchList.SearchValue
-- 							INNER JOIN _x_ClientParameters xcp	ON xcp.ClientId	= u.ClientId
-- 					WHERE 	u.IsActive = 1
-- 							AND IFNULL(u.LimitMailPerDay, 0) = 1
-- 					limit 1;
-- 			if ROW_COUNT() > 0 then 
-- 				insert into EmailRecipients(EmailId, EmailAddress, UserId, RecipientType)
-- 						SELECT 	distinct @NewId, u.Email, u.UserId, 1
-- 						FROM 	tSearchList
-- 								INNER JOIN User u					ON u.UserId 	= tSearchList.SearchValue
-- 						WHERE 	u.IsActive = 1
-- 								and u.Email <> ''
-- 								AND IFNULL(u.LimitMailPerDay, 0) = 1;
-- 			end if;
		ELSE 
			SET @NewId = UUID();
			insert into Email (Id, ClientId, CreatedDate, Subject, Body, EmailType, Priority)
					Values (@NewId, null, now(),	pSubject	,pBody	,pTemplate, 1);
			insert into EmailRecipients(EmailId, EmailAddress, RecipientType)
					values (@NewId, 'support@cloudxdpo.com', 1);
		END IF;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_NotifyAdmins` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_NotifyAdmins`(IN pClientId text, in pUserId char(36), IN pSubject varchar(200), IN pBody mediumtext, IN pSource varchar(20), IN pLinkPage varchar(20), IN pLinkValue varchar(20))
ThisProc:
	BEGIN	
-- noformat
		SET SESSION group_concat_max_len = 1000000;

		set @Admins = null;
		set @Notify = 1;
		-- Check if the client does not want admins to be notified for this Source

		if @Notify = 0 then 
			Leave ThisProc;
		end if;

		-- get the admins, if the person sending is already an admin then do not sent to this person

		select	GROUP_CONCAT(u.UserId SEPARATOR ';')
		into 	@Admins
		from	User u
		where 	ClientId = pClientId
				and u.IsActive = 1
				and u.IsCloudxUser = 0
				and u.UserId <> ifnull(pUserId, '00000000-0000-0000-0000-000000000000')
				and exists (SELECT	cr.*
							FROM	ClientUserRoles cur
									INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
							WHERE	cr.isAdmin	= 1
									and cr.isInternal = 0
									and cr.ClientId = pClientId
									AND cur.UserId	= u.UserId);

		if @Admins is not null then
			call _x_Notify(@Admins, pSubject, pBody, pSource, pLinkPage, pLinkValue, null);
		end if;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_NotifyInfo` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_NotifyInfo`(IN pUserId char(36), IN pRequest varchar(10), INOUT pCount int)
ThisProc:
	BEGIN	
-- noformat

-- pRequest
--		Count	Number of unread notifications
--		List 	The last 15 notifications received eless there are not unread
--		History	All data



	declare pPage int;
	declare pRows int;

	set @ClientId = null;

	select	count(*), max(ClientId)
	into	pCount, @ClientId
	from 	UserNotification
			inner join User 	on User.UserId = UserNotification.UserId
	where 	UserNotification.UserId = pUserId
			and UserNotification.ReadStatus = 0;


	if pRequest = 'Count' then
		Leave ThisProc;
	end if;

	call _x_SetClientTimeZone(@ClientId);

	SET pPage = IFNULL(pPage, 1);
	if pRequest = 'List' THEN
		set pRows = pCount;
		if pRows <= 15 THEN
			set pRows = 15;
		end if;
	else 
		SET pRows = 999999;
	end if;
	SET pPage = ((pPage - 1) * pRows);


	select	SOURCE, 
			Message, 
			LinkPage, 
			LinkValue, 
			case when ReadStatus = 0 then 1 else 0 end 				as isNew, 
 			convert_tz(ReceivedDate, 'GMT', @@session.time_zone)	AS ReceivedDate,
 			convert_tz(ReadDate, 'GMT', @@session.time_zone) 		AS ReadDate
	from 	UserNotification
	where 	UserId = pUserId
	order	by ReceivedDate desc
	LIMIT	pPage, pRows;
	
	if pRequest = 'List' THEN
		set TIME_ZONE = @@global.time_zone;
		Update UserNotification set ReadStatus = 1, ReadDate = now()
			where UserId = pUserId and ReadStatus = 0;
	end if;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_Payment` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_Payment`(IN `pType` tinyint,
IN `pClientId` int,
IN `pDateFrom` date,
IN `pDateTo` date,
IN `pAmountMin` decimal(18, 2),
IN `pAmountMax` decimal(18, 2),
IN `pOffset` int,
IN `pSize` int)
BEGIN

  IF (pType = 0) THEN

    SELECT
      Invoice.InvoiceId,
      Invoice.InvoiceNo,
      CONCAT(Vendor.VendorNo, ', ', Vendor.VendorName) AS VendorName,
      CONCAT('$', FORMAT(Invoice.InvoiceTotal, 2)) AS InvoiceTotal,
      Invoice.InvoiceDate,
      Invoice.ScannedDate,
      Batch.`Source`
    /*Invoice.CheckNumber*/

    FROM Invoice
      LEFT JOIN Vendor
        ON Invoice.VendorId = Vendor.VendorId
      LEFT JOIN Batch
        ON Invoice.BatchID = Batch.ID
    WHERE Invoice.ClientId = pClientId
    AND Invoice.IsDeleted = FALSE
    AND Invoice.ApprovalStatusId = 5
    AND (pDateFrom IS NULL
    OR Invoice.InvoiceDate >= pDateFrom)
    AND (pDateTo IS NULL
    OR Invoice.InvoiceDate < DATE_ADD(pDateTo, INTERVAL 1 DAY))
    AND (pAmountMin IS NULL
    OR Invoice.InvoiceTotal >= pAmountMin)
    AND (pAmountMax IS NULL
    OR Invoice.InvoiceTotal <= pAmountMax)
    AND Invoice.InvoiceTotal > 0
    AND Invoice.ApproverId IS NOT NULL
    AND Invoice.PaymentProcessingDate IS NULL
    AND Invoice.InvoiceDate < CURRENT_DATE()
    ORDER BY Invoice.InvoiceDate DESC, Invoice.InvoiceId ASC LIMIT pOffset, pSize;

  ELSE

    SELECT
      Invoice.InvoiceId,
      Invoice.InvoiceNo,
      CONCAT(Vendor.VendorNo, ', ', Vendor.VendorName) AS VendorName,
      CONCAT('$', FORMAT(Invoice.InvoiceTotal, 2)) AS InvoiceTotal,
      Invoice.InvoiceDate,
      Invoice.ScannedDate,
      Batch.`Source`
    /*Invoice.CheckNumber*/

    FROM Invoice
      LEFT JOIN Vendor
        ON Invoice.VendorId = Vendor.VendorId
      LEFT JOIN Batch
        ON Invoice.BatchID = Batch.ID
    WHERE Invoice.ClientId = pClientId
    AND Invoice.IsDeleted = FALSE
    AND Invoice.ApprovalStatusId = 5
    AND (pDateFrom IS NULL
    OR Invoice.ScannedDate >= pDateFrom)
    AND (pDateTo IS NULL
    OR Invoice.ScannedDate < DATE_ADD(pDateTo, INTERVAL 1 DAY))
    AND (pAmountMin IS NULL
    OR Invoice.InvoiceTotal >= pAmountMin)
    AND (pAmountMax IS NULL
    OR Invoice.InvoiceTotal <= pAmountMax)
    AND Invoice.InvoiceTotal > 0
    AND Invoice.ApproverId IS NOT NULL
    AND Invoice.PaymentProcessingDate IS NULL
    AND Invoice.InvoiceDate < CURRENT_DATE()
    ORDER BY Invoice.ScannedDate DESC, Invoice.InvoiceId ASC LIMIT pOffset, pSize;

  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_PaymentApprove` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_PaymentApprove`(IN `pClientId` int,
IN `pInvoiceIdList` varchar(16383),
IN `pUserId` varchar(36))
ThisProc:
  BEGIN
    SET @Now = UTC_TIMESTAMP();

	set @ClientPayer =  'CPayPlusFundApproval';




    /*
		**	Get the name of the user
		*/
    SELECT
      IFNULL(CONCAT(u.FirstName, ' ', u.LastName), 'System') INTO @LastActionByName
    FROM User u
    WHERE u.UserId = pUserId;


    /*pInvoiceIdList pattern "xxxxx,xxxx,xxxxxx"  (comma delimited)*/
    SET pInvoiceIdList = IFNULL(CONCAT(',', pInvoiceIdList, ','), '');

    -- Update the status
    UPDATE Invoice
    SET Invoice.ApprovalStatusId = 12
    WHERE Invoice.ClientId = pClientId
    AND Invoice.ApprovalStatusId = 10
    AND INSTR(pInvoiceIdList, CONCAT(',', InvoiceId, ',')) > 0;

    IF ROW_COUNT() = 0 THEN
      LEAVE ThisProc;
    END IF;

    -- updated PaymentStatus records
    UPDATE PaymentStatus
    JOIN Invoice
      ON PaymentStatus.InvoiceId = Invoice.InvoiceId
    SET PaymentStatus.TransactionIdentifier = 'Funding Approved'
    WHERE Invoice.ClientId = pClientId
    AND Invoice.ApprovalStatusId = 12
    AND INSTR(pInvoiceIdList, CONCAT(',', Invoice.InvoiceId, ',')) > 0;

    -- for the invoices updated, add to Invoice to Invoice history
    INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId, OldID)
      SELECT
        InvoiceId,
        @LastActionByName AS Actor,
        @ClientPayer AS Action,
        @Now AS ActionDate,
        'Payment Initiated' AS PreviousData,
        'PaymentApproved' AS NewData,
        'Invoice Status' AS FIELD,
        'Fund Requested' AS InitialStatus,
        'Funding Approved' AS CurentStatus,
        pUserId AS ActorId,
        NULL AS OldId
      FROM Invoice
      WHERE Invoice.ClientId = pClientId
      AND Invoice.ApprovalStatusId = 12
      AND INSTR(pInvoiceIdList, CONCAT(',', Invoice.InvoiceId, ',')) > 0;

  END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_PaymentCancel` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_PaymentCancel`(IN pUserId varchar(36), IN pInvoiceIdList text)
ThisProc:
	BEGIN
		-- noformat
		SET @Now = UTC_TIMESTAMP();

		set @ClientId = NULL;

		--	Get the name of the user		
		SELECT	IFNULL(CONCAT(u.LastName, ', ', u.FirstName), 'System'), ClientId INTO @LastActionByName, @ClientId
		FROM 	User u
		WHERE 	u.UserId = pUserId;


		/*pInvoiceIdList pattern "xxxxx,xxxx,xxxxxx"  comma delimited*/
		Call _x_StringToRows(pInvoiceIdList, ',');


		-- Update the status
		UPDATE 	Invoice
				INNER JOIN tSearchList Ids	ON Ids.SearchValue = Invoice.InvoiceId
		SET 	Invoice.ApprovalStatusId = 5
		WHERE 	Invoice.ClientId = @ClientId
				AND Invoice.ApprovalStatusId = 10;

		IF ROW_COUNT() = 0 THEN
			LEAVE ThisProc;
		END IF;

		-- Delete records from PaymentStatus based on InvoiceId
		DELETE	PaymentStatus
		FROM	PaymentStatus
				INNER JOIN Invoice			ON PaymentStatus.InvoiceId = Invoice.InvoiceId
				INNER JOIN tSearchList Ids	ON Ids.SearchValue = Invoice.InvoiceId
		WHERE Invoice.ClientId = @ClientId	
			AND Invoice.ApprovalStatusId = 5;

		-- for the invoices updated, add to Invoice to Invoice history
		INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId, OldID)
			SELECT
					InvoiceId,
					@LastActionByName 							AS Actor,
					'Cancel Payment Request' 					AS Action,
					@Now 										AS ActionDate,
					'Payment Initiated' 						AS PreviousData,
					'Accepted' 									AS NewData,
					'Invoice Status' 							AS FIELD,
					'Initiated' 								AS InitialStatus,
					'Accepted' 									AS CurentStatus,
					pUserId 									AS ActorId,
					NULL 										AS OldId
			FROM 	Invoice
					INNER JOIN tSearchList Ids	ON Ids.SearchValue = Invoice.InvoiceId
			WHERE 	Invoice.ClientId = @ClientId
					AND Invoice.ApprovalStatusId = 5;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_PaymentCheckEnabled` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_PaymentCheckEnabled`(IN pClientId int,
IN pActionType varchar(50),
IN `pUserId` varchar(36))
BEGIN
  IF (pActionType = 'IssuePayment') THEN
    SELECT
      "Issuing Payment is disabled for the day." AS Message,
      1 AS Enabled;

  ELSEIF (pActionType = 'ApproveFunds') THEN
    SELECT
      "Payment Approval is disabled for the day." AS Message,
      1 AS Enabled;

  ELSEIF (pActionType = 'CancelPayment') THEN
    SELECT
      "Canceling Payment is disabled for the day." AS Message,
      1 AS Enabled;

  END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_PaymentDiscount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_PaymentDiscount`(IN `pClientId` int,
IN `pInvoiceId` int,
IN `pPercent` decimal(18, 2),
IN `pDateFrom` datetime,
IN `pDateTo` datetime)
BEGIN

  UPDATE Invoice
  SET DiscountRequestedAmount = pPercent,
      PaymentProcessingDate = pDateFrom,
      DiscountExpireDate = pDateTo
  WHERE ClientId = pClientId
  AND InvoiceId = pInvoiceId;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_PaymentFundApprovalSearch` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_PaymentFundApprovalSearch`(IN pUserId varchar(36))
ThisProc:
	BEGIN
-- noformat

		SELECT 	ClientId INTO @ClientId
		FROM 	User
		WHERE 	UserId = pUserId;

		CALL _x_SetClientTimeZone(@ClientId);

		SELECT
			LTRIM(cc.CompanyCode)															 					AS Company,
			CONCAT(IFNULL(CONCAT('[', Vendor.VendorNo, '] '), ''), IFNULL(Vendor.VendorName, '')) 				AS Vendor,
			IFNULL(Invoice.InvoiceNo, '') 																		AS InvoiceNo,
			Invoice.InvoiceTotal,
			Invoice.InvoiceDate																					AS InvoiceDate,
			Invoice.PaymentDueDate																				AS InvoiceDueDate,
			
			CASE
				WHEN Invoice.NetTermDate IS NULL		THEN ''
				WHEN Invoice.NetTermDate >= date(NOW()) THEN Invoice.NetTermDate 									
				ELSE NULL					END 																AS DiscountDate,

			CASE
				WHEN Invoice.NetTermDiscount IS NULL	THEN ''
				WHEN Invoice.NetTermDate >= date(NOW()) THEN Invoice.NetTermDiscount 									
				ELSE ''									END 													AS DiscountAmount,
			CASE WHEN Invoice.NetTermDate < date(NOW()) THEN 'Lost' ELSE '' END 								AS DiscountNote, 									
			Invoice.InvoiceId,
			Invoice.VendorId

		FROM Invoice		
			INNER JOIN Vendor			ON Invoice.VendorId = Vendor.VendorId
			INNER JOIN PaymentStatus	ON PaymentStatus.InvoiceId = Invoice.InvoiceId
			INNER JOIN ClientCompany cc	ON cc.ClientId = Invoice.ClientId
											AND cc.CompanyCode = Invoice.CompanyCode
											AND cc.UserField1 IS NOT NULL
		WHERE Invoice.ClientId = @ClientId
				AND Invoice.IsDeleted = FALSE
				AND Invoice.IsPaused = FALSE
				AND Invoice.ApprovalStatusId = 10
				-- AND NULLIF(Invoice.UserField1, '') IS NOT NULL
		ORDER BY 1, 3, Invoice.NetTermDate, Invoice.PaymentDueDate;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_PaymentHistorySearch` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_PaymentHistorySearch`(IN pUserId varchar(36),			-- asdjhashjdgjahgsdjhgasdasd
IN pSearchString mediumtext,								-- InvoiceNo■12335■InvoiceAmount2■45000		
IN pRows int,					-- 10
IN pPage int)
ThisProc:
	BEGIN
-- noformat

		DECLARE done int DEFAULT FALSE;
		DECLARE DataValue mediumtext;
		DECLARE curParms CURSOR FOR SELECT* FROM tSearchList;
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

		set @CompanyCode 			= null;
		set @DocumentType			= null;
		set @InvoiceNo 				= null;
		set @Vendor 				= null;
		Set @InvoiceDate1 			= null;
		set @InvoiceDate2 			= null;
		set @PaymentDate1			= null;
		Set @PaymentDate2			= NULL;
		set @PaymentInfo 			= NULL;

		-- Break up the Data passed into the following order
		CALL _x_StringToRows(pSearchString, '■');

		IF MOD((SELECT	COUNT(*) FROM tSearchList), 2) <> 0 THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Improperly coded search string; Parameters not paired.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;

		OPEN curParms;
	readParms:
		LOOP
			FETCH curParms INTO DataValue;
			IF done THEN
				LEAVE readParms;
			END IF;
			SET @DataValue = DataValue;
			IF DataValue = 'CompanyCode' THEN
				FETCH curParms INTO DataValue;
				SET @CompanyCode = DataValue;
			ELSEIF DataValue = 'DocumentType' THEN
				FETCH curParms INTO DataValue;
				SET @DocumentType = DataValue;
			ELSEIF DataValue = 'InvoiceNo' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceNo = DataValue;
			ELSEIF DataValue = 'Vendor' THEN
				FETCH curParms INTO DataValue;
				SET @Vendor = DataValue;
			ELSEIF DataValue = 'InvoiceDate1' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceDate1 = DATE(DataValue);
			ELSEIF DataValue = 'InvoiceDate2' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceDate2 = DATE(DataValue);
			ELSEIF DataValue = 'PaymentDate1' THEN
				FETCH curParms INTO DataValue;
				SET @PaymentDate1 = DATE(DataValue);
			ELSEIF DataValue = 'PaymentDate2' THEN
				FETCH curParms INTO DataValue;
				SET @PaymentDate2 = DATE(DataValue);
			ELSEIF DataValue = 'PaymentInfo' THEN
				FETCH curParms INTO DataValue;
				SET @PaymentInfo = DataValue;
			ELSE
				SET @ErrMsg = CONCAT('Improperly coded search string; Unknown keyword [', DataValue, '].');
				SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @ErrMsg, MYSQL_ERRNO = 1;
				LEAVE ThisProc;
			END IF;

			INSERT INTO SystemAdvanceSearchFieldsUserStats (SearchType, Field, UserId, TotalUsed)
				VALUES ('PaymentHistory', REPLACE(REPLACE(@DataValue, '1', '#'), '2', '#'), pUserId, 1)
			ON DUPLICATE KEY UPDATE TotalUsed = TotalUsed + 1;


		END LOOP;
		CLOSE curParms;

		SELECT
			ClientId INTO @ClientId
		FROM User
		WHERE UserId = pUserId;

		SET pRows = IFNULL(pRows, 10);
		SET pPage = IFNULL(pPage, 1);
		SET pPage = ((pPage - 1) * pRows);
		SET @Sep = CHAR(254);


		CALL _x_StringToRegEx(@InvoiceNo);
		CALL _x_StringToRegEx(@PaymentInfo);


		SELECT
			cc.CompanyCode																												AS Company,
			CONCAT(IFNULL(CONCAT('[', Vendor.VendorNo, '] '), ''), IFNULL(Vendor.VendorName, '')) 										AS Vendor,
			Invoice.InvoiceType			 																								AS DocumentType,
			IFNULL(Invoice.InvoiceNo, '') 																								AS InvoiceNo,
			Invoice.InvoiceDate																											AS InvoiceDate,
			Invoice.InvoiceTotal						 																				AS InvoiceTotal,
			InvoiceStatus.StateName 																									AS InvoiceStatus,
			CASE
				WHEN Invoice.NetTermDiscount IS NULL							THEN ''
				ELSE Invoice.NetTermDiscount									END 													AS DiscountAmount,
			
			CASE
				WHEN Invoice.NetTermDiscount IS NULL							THEN ''
				WHEN Invoice.InvoiceTotal <> PaymentStatus.GrossAmount 			THEN 'Y'					
				ELSE 'N'														END 													AS DiscountTaken,

			PaymentStatus.ReceivedDate										 															AS PaymentDate,
			IFNULL(PaymentStatus.CardNumber, '')																						AS Cardnumber,  
			IFNULL(Invoice.UserField5, '')																								AS PaymentNumber,
			Invoice.InvoiceId,
			Invoice.VendorId

		FROM Invoice		
			Inner JOIN InvoiceStatus 	ON InvoiceStatus.StateId = Invoice.ApprovalStatusId
			inner JOIN Vendor			ON Invoice.VendorId = Vendor.VendorId
			INNER JOIN PaymentStatus	ON PaymentStatus.InvoiceId = Invoice.InvoiceId
			INNER JOIN ClientCompany cc	ON cc.ClientId = Invoice.ClientId
											AND cc.CompanyCode = Invoice.CompanyCode
		WHERE Invoice.ClientId = @ClientId
			AND Invoice.ApprovalStatusId IN (7, 11, 12, 13)


			AND Regexp_Like(IFNULL(Invoice.InvoiceNo, ''), @InvoiceNo, 'mi')
			AND Regexp_Like(CONCAT(IFNULL(PaymentStatus.CardNumber, ''), '■', IFNULL(Invoice.UserField5, '')), @PaymentInfo, 'mi')

			AND Invoice.InvoiceTotal BETWEEN IFNULL(@InvoiceAmount1, Invoice.InvoiceTotal) AND IFNULL(@InvoiceAmount2, Invoice.InvoiceTotal)

			AND IFNULL(Invoice.CompanyCode, '') = IFNULL(IFNULL(@CompanyCode, Invoice.CompanyCode), '')
	
			AND Invoice.InvoiceType = IFNULL(@DocumentType, Invoice.InvoiceType)
			AND Invoice.VendorId = IFNULL(@Vendor, Invoice.VendorId)
			AND Invoice.InvoiceDate BETWEEN IFNULL(@InvoiceDate1, Invoice.InvoiceDate) AND IFNULL(@InvoiceDate2, Invoice.InvoiceDate)
			AND PaymentStatus.ReceivedDate BETWEEN IFNULL(@PaymentDate1, PaymentStatus.ReceivedDate) AND IFNULL(@PaymentDate2, PaymentStatus.ReceivedDate)

		ORDER BY 1, 10 DESC, 2, 3, 4
		LIMIT pPage, pRows;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_PaymentInitiate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_PaymentInitiate`(IN pUserId varchar(36),
			IN pInvoiceIdList text)
ThisProc:
	BEGIN		
		SET @Now = UTC_TIMESTAMP();

		set @ClientId = NULL;

		--	Get the name of the user		
		SELECT	IFNULL(CONCAT(u.LastName, ', ', u.FirstName), 'System'), ClientId INTO @LastActionByName, @ClientId
		FROM 	User u
		WHERE 	u.UserId = pUserId;

		CALL _x_SetClientTimeZone(@ClientId);


		set @ClientPayer =  'CPayPlusFundApproval';




		set @IgnoreDiscountCalculationForPaymentProcessing = 0; 
		IF EXISTS (SELECT	1
					FROM	ClientSpecificConfig
					WHERE	ClientSpecificConfigType = 712
					AND		ClientId = @ClientId) THEN
			SET @IgnoreDiscountCalculationForPaymentProcessing = 1; 
		END IF;	



		set @ManuallyApprovePayment = 12; -- Payment approved
		IF EXISTS (SELECT	1
					FROM	ClientSpecificConfig
					WHERE	ClientSpecificConfigType = 148
					AND		ClientId = @ClientId) THEN
			SET @ManuallyApprovePayment = 10; -- Payment issued requires approval -- Payment Initiated
		END IF;	
		
		Set @TransactionIdentifier = 'Funding Approved';
		if exists  (select 1 from Client where ClientId = @ClientId and PaymentApprovalRequired = 1) then
			Set @TransactionIdentifier = 'Fund Requested';
		end if;


		/*pInvoiceIdList pattern "xxxxx,xxxx,xxxxxx"  comma delimited*/
		Call _x_StringToRows(pInvoiceIdList, ',');

		-- Update the status
		UPDATE 	Invoice		
				INNER JOIN tSearchList Ids	ON Ids.SearchValue = Invoice.InvoiceId
		set 	ApprovalStatusId = @ManuallyApprovePayment
		WHERE	Invoice.ClientId = @ClientId
				AND Invoice.ApprovalStatusId = 5;

		IF ROW_COUNT() = 0 THEN
			LEAVE ThisProc;
		END IF;

-- select InvoiceNo, InvoiceDate, NetTermDate, InvoiceTotal, NetTermDiscount, ClientId, InvoiceId
-- from Invoice 
-- where ClientId in (147)
-- 		and InvoiceType = 'Invoice'
-- 		and NetTermDiscount >0
-- 		and ApprovalStatusId = 7
-- 		and exists (select * from PaymentStatus ps where ps.InvoiceId = Invoice.InvoiceId and ps.GrossAmount = Invoice.InvoiceTotal)
-- limit 100;
-- 
-- select * from PaymentStatus ps where ps.InvoiceId = 660336092;
-- select * from InvoiceHistory	 ps where ps.InvoiceId = 660336092;



		-- for the invoices updated, generate the PaymentStatus records
		INSERT INTO PaymentStatus (InvoiceId, TransactionTypeId, SupplierNo, GrossAmount, CardNumber, ReceivedDate, InvoiceNo, TransactionIdentifier, TransactionTypeDescription)
			SELECT
				InvoiceId,
				1 																									AS TransactionTypeId,
				Vendor.VendorNo 																					AS SupplierNo,
				CASE
					when @IgnoreDiscountCalculationForPaymentProcessing = 1 then ROUND(Invoice.InvoiceTotal, 2)
					WHEN Invoice.NetTermDate IS NULL						THEN ROUND(Invoice.InvoiceTotal, 2)
					WHEN Invoice.NetTermDate < date(NOW()) 					THEN ROUND(Invoice.InvoiceTotal, 2)
					when nullif(ROUND(Invoice.NetTermDiscount, 2), 0) <= 0	then ROUND(Invoice.InvoiceTotal, 2)
					else ROUND(Invoice.InvoiceTotal, 2) - ROUND(Invoice.NetTermDiscount, 2)	end 					AS GrossAmount,
				IFNULL(NULLIF(Invoice.CheckNumber, ''), ' - ') 														AS CardNumber,
				@Now AS ReceivedDate,
				Invoice.InvoiceNo,
				@TransactionIdentifier,
				'Card Issuance' 																					AS TransactionTypeDescription
			FROM Invoice
				INNER JOIN Vendor			ON Invoice.VendorId = Vendor.VendorId
				INNER JOIN tSearchList Ids	ON Ids.SearchValue = Invoice.InvoiceId
			WHERE Invoice.ClientId = @ClientId
				AND Invoice.ApprovalStatusId = @ManuallyApprovePayment;

		-- for the invoices updated, add to Invoice to Invoice history
		INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId, OldID)
			SELECT
					InvoiceId,
					@LastActionByName 						AS Actor,
					'Issue Payment' 						AS Action,
					@Now 									AS ActionDate,
					'Accepted' 								AS PreviousData,
					'Payment Initiated' 					AS NewData,
					'Invoice Status' 						AS FIELD,
					'Accepted' 								AS InitialStatus,
					'Initiated' 							AS CurentStatus,
					pUserId 								AS ActorId,
					NULL 									AS OldId
			FROM 	Invoice
					INNER JOIN tSearchList Ids	ON Ids.SearchValue = Invoice.InvoiceId
			WHERE 	Invoice.ClientId = @ClientId
					AND Invoice.ApprovalStatusId = @ManuallyApprovePayment;

	
	    -- for the invoices updated, add to Invoice to Invoice history
	    INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId, OldID)
	 			SELECT
						InvoiceId,
						@LastActionByName 						AS Actor,
						@ClientPayer 							AS Action,
						@Now 									AS ActionDate,
						'Payment Initiated' 					AS PreviousData,
						'PaymentApproved' 						AS NewData,
						'Invoice Status' 						AS FIELD,
						'Fund Requested' 						AS InitialStatus,
						'Funding Approved' 						AS CurentStatus,
						pUserId 								AS ActorId,
						NULL 									AS OldId
				FROM 	Invoice
						INNER JOIN tSearchList Ids	ON Ids.SearchValue = Invoice.InvoiceId
				WHERE 	Invoice.ClientId = @ClientId
						AND Invoice.ApprovalStatusId = 12;	-- Payment approved


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_PaymentIssueSearch` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_PaymentIssueSearch`(IN pUserId varchar(36),			-- asdjhashjdgjahgsdjhgasdasd
IN pSearchString mediumtext)
ThisProc:
	BEGIN
-- noformat

		DECLARE done int DEFAULT FALSE;
		DECLARE DataValue mediumtext;
		DECLARE curParms CURSOR FOR
		SELECT	*
		FROM tSearchList;
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

		set @CompanyCode 			= null;
		set @DocumentType			= NULL;
		set @InvoiceAmount1 		= NULL;
		set @InvoiceAmount2 		= NULL;
		Set @InvoiceDate1 			= null;
		set @InvoiceDate2 			= null;
		set @InvoiceDueDate1 		= null;
		Set @InvoiceDueDate2 		= null;
		set @DiscountOnly			= null;

		-- Break up the Data passed into the following order
		CALL _x_StringToRows(pSearchString, '■');

		IF MOD((SELECT	COUNT(*) FROM tSearchList), 2) <> 0 THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Improperly coded search string; Parameters not paired.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;


		OPEN curParms;
	readParms:
		LOOP
			FETCH curParms INTO DataValue;
			IF done THEN
				LEAVE readParms;
			END IF;
			SET @DataValue = DataValue;
			IF DataValue = 'CompanyCode' THEN
				FETCH curParms INTO DataValue;
				SET @CompanyCode = DataValue;
			ELSEIF DataValue = 'DocumentType' THEN
				FETCH curParms INTO DataValue;
				SET @DocumentType = DataValue;
			ELSEIF DataValue = 'InvoiceNo' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceNo = DataValue;
			ELSEIF DataValue = 'Vendor' THEN
				FETCH curParms INTO DataValue;
				SET @Vendor = DataValue;
			ELSEIF DataValue = 'InvoiceAmount1' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceAmount1 = CAST(DataValue AS decimal(18, 2));
			ELSEIF DataValue = 'InvoiceAmount2' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceAmount2 = CAST(DataValue AS decimal(18, 2));
			ELSEIF DataValue = 'InvoiceDate1' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceDate1 = DATE(DataValue);
			ELSEIF DataValue = 'InvoiceDate2' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceDate2 = DATE(DataValue);
			ELSEIF DataValue = 'InvoiceDueDate1' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceDueDate1 = DATE(DataValue);
			ELSEIF DataValue = 'InvoiceDueDate2' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceDueDate2 = DATE(DataValue);
			ELSEIF DataValue = 'DiscountOnly' THEN
				FETCH curParms INTO DataValue;
				SET @DiscountOnly = CASE WHEN DataValue = 'True' THEN 1 ELSE 0 END;
			ELSE
				SET @ErrMsg = CONCAT('Improperly coded search string; Unknown keyword [', DataValue, '].');
				SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @ErrMsg, MYSQL_ERRNO = 1;
				LEAVE ThisProc;
			END IF;

			INSERT INTO SystemAdvanceSearchFieldsUserStats (SearchType, Field, UserId, TotalUsed)
				VALUES ('IssuePayment', REPLACE(REPLACE(@DataValue, '1', '#'), '2', '#'), pUserId, 1)
			ON DUPLICATE KEY UPDATE TotalUsed = TotalUsed + 1;


		END LOOP;
		CLOSE curParms;

		SELECT
			ClientId INTO @ClientId
		FROM User
		WHERE UserId = pUserId;

		CALL _x_SetClientTimeZone(@ClientId);

		SET @Sep = CHAR(254);


		CALL _x_StringToRegEx(@InvoiceNo);


		SELECT
			cc.CompanyCode																						AS Company,
			CONCAT(IFNULL(CONCAT('[', Vendor.VendorNo, '] '), ''), IFNULL(Vendor.VendorName, '')) 				AS Vendor,
			IFNULL(Invoice.InvoiceNo, '') 																		AS InvoiceNo,
			Invoice.InvoiceTotal,
			Invoice.InvoiceDate																					AS InvoiceDate,
			Invoice.PaymentDueDate																				AS InvoiceDueDate,
			
			CASE
				WHEN Invoice.NetTermDate IS NULL		THEN null
				WHEN Invoice.NetTermDate >= date(NOW()) THEN Invoice.NetTermDate 									
				ELSE NULL					END 																AS DiscountDate,

			CASE
				WHEN Invoice.NetTermDiscount IS NULL	THEN ''
				WHEN Invoice.NetTermDate >= date(NOW()) THEN Invoice.NetTermDiscount									
				ELSE ''									END 													AS DiscountAmount,
			CASE WHEN Invoice.NetTermDate < date(NOW()) THEN 'Lost' ELSE '' END 								AS DiscountNote, 									
			Invoice.InvoiceId,
			Invoice.VendorId
		FROM Invoice		
			inner JOIN Vendor			ON Invoice.VendorId = Vendor.VendorId
			INNER JOIN ClientCompany cc	ON cc.ClientId = Invoice.ClientId
											AND cc.CompanyCode = Invoice.CompanyCode
											AND cc.UserField1 IS NOT NULL
		WHERE Invoice.ClientId = @ClientId
				AND Invoice.IsDeleted = FALSE
				AND Invoice.IsPaused = FALSE
				AND Invoice.ApprovalStatusId = 5
				AND NULLIF(Invoice.UserField5, '') IS NULL -- No payment number

				AND Regexp_Like(IFNULL(Invoice.InvoiceNo, ''), @InvoiceNo, 'mi')
				AND Invoice.InvoiceTotal BETWEEN IFNULL(@InvoiceAmount1, Invoice.InvoiceTotal) AND IFNULL(@InvoiceAmount2, Invoice.InvoiceTotal)
				AND (IFNULL(@DiscountOnly, 0) = 0
						OR (IFNULL(@DiscountOnly, 0) = 1
							and	Invoice.NetTermDate <= date(NOW())
							)
					)
				AND IFNULL(Invoice.CompanyCode, '') = IFNULL(IFNULL(@CompanyCode, Invoice.CompanyCode), '')
		
				AND Invoice.InvoiceType = IFNULL(@DocumentType, Invoice.InvoiceType)
				AND Invoice.VendorId = IFNULL(@Vendor, Invoice.VendorId)
				AND Invoice.InvoiceDate BETWEEN IFNULL(@InvoiceDate1, Invoice.InvoiceDate) AND IFNULL(@InvoiceDate2, Invoice.InvoiceDate)
				AND Invoice.PaymentDueDate BETWEEN IFNULL(@InvoiceDueDate1, Invoice.PaymentDueDate) AND IFNULL(@InvoiceDueDate2, Invoice.PaymentDueDate)

		ORDER BY 1, 2, 3;


	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_PaymentSearch` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_PaymentSearch`(IN pUserId varchar(36),			-- asdjhashjdgjahgsdjhgasdasd
IN pSearchString mediumtext,								-- InvoiceNo■12335■InvoiceAmount2■45000		
IN pRows int,					-- 10
IN pPage int)
ThisProc:
	BEGIN
-- noformat

		DECLARE done int DEFAULT FALSE;
		DECLARE DataValue mediumtext;
		DECLARE curParms CURSOR FOR
		SELECT
			*
		FROM tSearchList;
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

		Set @CompanyCode = null;
		Set @InvoiceNo = null;
		Set @Vendor = null;
		Set @InvoiceDate1 = null;
		Set @InvoiceDate2 = null;
		Set @DueDate1 = null;
		Set @DueDate2 = null;
		Set @NetTermDate = null;
		Set @PaymentAmount1 = null;
		Set @PaymentAmount2 = null;
		Set @PaymentDate1 = null;
		Set @PaymentDate2 = null;
		Set @PaymentStatus = null;

		-- Break up the Data passed into the following order
		CALL _x_StringToRows(pSearchString, '■');

		IF MOD((SELECT
					COUNT(*)
				FROM tSearchList), 2) <> 0 THEN
			SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Improperly coded search string; Parameters not paired.', MYSQL_ERRNO = 1;
			LEAVE ThisProc;
		END IF;


		OPEN curParms;
	readParms:
		LOOP
			FETCH curParms INTO DataValue;
			IF done THEN
				LEAVE readParms;
			END IF;
			SET @DataValue = DataValue;
			IF DataValue = 'CompanyCode' THEN
				FETCH curParms INTO DataValue;
				SET @CompanyCode = DataValue;
			ELSEIF DataValue = 'InvoiceNo' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceNo = DataValue;
			ELSEIF DataValue = 'Vendor' THEN
				FETCH curParms INTO DataValue;
				SET @Vendor = DataValue;
			ELSEIF DataValue = 'InvoiceDate1' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceDate1 = DATE(DataValue);
			ELSEIF DataValue = 'InvoiceDate2' THEN
				FETCH curParms INTO DataValue;
				SET @InvoiceDate2 = DATE(DataValue);
			ELSEIF DataValue = 'DueDate1' THEN
				FETCH curParms INTO DataValue;
				SET @DueDate1 = DATE(DataValue);
			ELSEIF DataValue = 'DueDate2' THEN
				FETCH curParms INTO DataValue;
				SET @DueDate2 = DATE(DataValue);
			ELSEIF DataValue = 'NetTermDate' THEN
				FETCH curParms INTO DataValue;
				SET @NetTermDate = DATE(DataValue);
			ELSEIF DataValue = 'PaymentAmount1' THEN
				FETCH curParms INTO DataValue;
				SET @PaymentAmount1 = CAST(DataValue AS decimal(18, 2));
			ELSEIF DataValue = 'PaymentAmount2' THEN
				FETCH curParms INTO DataValue;
				SET @PaymentAmount2 = CAST(DataValue AS decimal(18, 2));
			ELSEIF DataValue = 'PaymentDate1' THEN
				FETCH curParms INTO DataValue;
				SET @PaymentDate1 = DATE(DataValue);
			ELSEIF DataValue = 'PaymentDate2' THEN
				FETCH curParms INTO DataValue;
				SET @PaymentDate2 = DATE(DataValue);
			ELSEIF DataValue = 'PaymentStatus' THEN
				FETCH curParms INTO DataValue;
				SET @PaymentStatus = DataValue;
			ELSE
				SET @ErrMsg = CONCAT('Improperly coded search string; Unknown keyword [', DataValue, '].');
				SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = @ErrMsg, MYSQL_ERRNO = 1;
				LEAVE ThisProc;
			END IF;

-- 			INSERT INTO SystemAdvanceSearchFieldsUserStats (SearchType, SearchField, UserId, TotalUsed)
-- 				VALUES ('IssuePayment', REPLACE(REPLACE(@DataValue, '1', '#'), '2', '#'), pUserId, 1)
-- 			ON DUPLICATE KEY UPDATE TotalUsed = TotalUsed + 1;


		END LOOP;
		CLOSE curParms;

		SELECT
			ClientId INTO @ClientId
		FROM User
		WHERE UserId = pUserId;

		SET pRows = IFNULL(pRows, 10);
		SET pPage = IFNULL(pPage, 1);
		SET pPage = ((pPage - 1) * pRows);
		SET @Sep = CHAR(254);


		CALL _x_StringToRegEx(@InvoiceNo);


		SELECT
			Invoice.InvoiceId,
			CONCAT(IFNULL(CONCAT('[', Vendor.VendorNo, '] '), ''), IFNULL(Vendor.VendorName, '')) AS Vendor,
			IFNULL(Invoice.InvoiceNo, '') AS InvoiceNo,
			CONCAT('$', FORMAT(Invoice.InvoiceTotal, 2)) AS InvoiceTotal,
			_x_GetInvoiceStatusName(Invoice.ApprovalStatusId) AS InvoiceStatus,
			IFNULL(DATE_FORMAT(Invoice.InvoiceDate, "%b %e, %Y"), '') AS InvoiceDate,
			IFNULL(DATE_FORMAT(Invoice.PaymentDueDate, "%b %e, %Y"), '') AS DueDate,
			IFNULL(DATE_FORMAT(Invoice.NetTermDate, "%b %e, %Y"), '') AS DiscountDate,
			CONCAT('$', FORMAT(Invoice.NetTermDiscount, 2)) AS DiscountAmount,
			IFNULL(DATE_FORMAT(PaymentStatus.ReceivedDate, "%b %e, %Y"), '') AS PaymentDate
		FROM Invoice
			inner JOIN Vendor			ON Invoice.VendorId = Vendor.VendorId
			left JOIN PaymentStatus		ON PaymentStatus.InvoiceId = Invoice.InvoiceId
		WHERE Invoice.ClientId = @ClientId
				AND Invoice.IsDeleted = FALSE
				AND Invoice.IsPaused = FALSE
				AND Regexp_Like(IFNULL(Invoice.InvoiceNo, ''), @InvoiceNo, 'mi')
		
				AND Invoice.InvoiceTotal BETWEEN IFNULL(@InvoiceAmount1, Invoice.InvoiceTotal) AND IFNULL(@InvoiceAmount2, Invoice.InvoiceTotal)
				AND IFNULL(Invoice.CompanyCode, '') = IFNULL(IFNULL(@CompanyCode, Invoice.CompanyCode), '')
		
				AND Invoice.VendorId = IFNULL(@Vendor, Invoice.VendorId)
				AND Invoice.InvoiceDate BETWEEN IFNULL(@InvoiceDate1, Invoice.InvoiceDate) AND IFNULL(@InvoiceDate2, Invoice.InvoiceDate)
		
				AND LOCATE(CONCAT(',', IFNULL(Invoice.ApprovalStatusId, -1), ','), CONCAT('%,', IFNULL(IFNULL(@Status, Invoice.ApprovalStatusId), -1), ',%')) > 0
				AND LOCATE(CONCAT(',', IFNULL(Invoice.VendorSiteId, -1), ','), CONCAT('%,', IFNULL(IFNULL(@Department, Invoice.VendorSiteId), -1), ',%')) > 0
		ORDER BY Invoice.InvoiceId DESC LIMIT pPage, pRows;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_Security` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_Security`(IN pUserId char(36))
ThisProc:
-- noformat 
  BEGIN

	set @GridPause				= null;
	set @GridCaptured			= null;
	set @GridApproval			= null;
	set @GridException			= null;
	set @GridApproved			= null;



	drop TEMPORARY TABLE if exists tmp;

    IF EXISTS (SELECT	1
		        FROM	ClientUserRoles cur
		          		INNER JOIN ClientRoles cr		ON	cr.RoleId = cur.RoleId
		            										AND cr.isAdmin = 1
		        WHERE	cur.UserId = pUserId) THEN
		CREATE TEMPORARY TABLE tmp (
			SELECT	FunctionKey,
			  		1 				AS Access
			FROM	SystemFunctions
			ORDER	BY 1
		);
		set @GridPause				= 1;
		set @GridCaptured			= 1;
		set @GridApproval			= 1;
		set @GridException			= 1;
		set @GridApproved			= 1;
    ELSE
		CREATE TEMPORARY TABLE tmp (
			SELECT	crf.FunctionKey,
			  		MAX(Access) 	AS Access
			FROM	ClientUserRoles cur
					INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
					INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
			WHERE	cur.UserId = pUserId
			GROUP	BY crf.FunctionKey
			ORDER	BY 1
		);

		if exists (select 1 from tmp where Access >= 1 and FunctionKey in ('InvoiceUpdate', 'InvoiceReset', 'InvoiceUnpause')) then 
			set @GridPause = 1;
		end if;

		if exists (select 1 from tmp where Access >= 1 and FunctionKey in ('InvoiceApprove')) then
			if exists (select 1 from tmp where Access >= 1 and FunctionKey in ('InvoiceReset')) then
				set @GridApproval = 1;
			end if;
		end if;

		if exists (SELECT	1 from _x_UserParameters up	WHERE up.UserId = pUserId and up.IsExceptionHandler = 1) then 
			set @GridException = 1;
		end if;


    END IF;

	insert into tmp 		select 	'GridPause', 			1 where @GridPause = 1;
	insert into tmp 		select 	'GridCaptured', 		1 where @GridCaptured = 1;
	insert into tmp 		select 	'GridApproval', 		1 where @GridApproval = 1;
	insert into tmp 		select 	'GridException', 		1 where @GridException = 1;
	insert into tmp 		select 	'GridApproved', 		1 where @GridApproved = 1;

	select * 
	from tmp;

/*
call _x_Security('b43b812f-f35e-4c13-8cb4-a15a4ffbc900');

-- call _x_Security('18b61a24-d0a4-11e9-b055-22000a1f9f3d');

*/

  END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_SecurityGenerate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_SecurityGenerate`(IN pClientId int, IN pFirstTime int)
ThisProc:
	BEGIN

-- noformat

		if pClientId is null THEN
			select 'No client passed';
			Leave ThisProc;
		end if;

		SET pFirstTime = IFNULL(pFirstTime, 0);
		
		DELETE
		FROM	ClientUserRoles
		WHERE	UserId IN (	SELECT	Userid
							FROM	User
							WHERE	ClientId = IFNULL(pClientId, ClientId));
		DELETE
		FROM	ClientRoleFunctions
		WHERE	RoleId IN (SELECT	RoleId
							FROM	ClientRoles
							WHERE	ClientId = IFNULL(pClientId, ClientId));
		DELETE
		FROM	ClientRoles
		WHERE	ClientId = IFNULL(pClientId, ClientId);

		IF pFirstTime = 1 THEN
			ALTER TABLE ClientRoles AUTO_INCREMENT = 1;
		END IF;


		CREATE TEMPORARY TABLE IF NOT EXISTS tmpSuperAdmins (
			UserId char(36)
		);

		CREATE TEMPORARY TABLE IF NOT EXISTS tmpUsers (
			ClientId 		int,
			UserId 			char(36),
			isAdmin 		int,
			IsCloudxUser 	int
		);

		Update User set IsCloudxUser = 1 
			where ClientId = IFNULL(pClientId, ClientId)
					and ifnull(IsCloudxUser, 0) = 0
					and (
							Email LIKE '%@cloudxdpo.com'
							or RoleId = 4
							or exists (select 1 from UserRoles ur where ur.UserId = User.UserId and ur.RoleId = 4)
						);

		INSERT INTO tmpUsers (ClientId, UserId, isAdmin, IsCloudxUser)
			SELECT	User.ClientId,
					User.UserId,
					CASE WHEN UserName LIKE '%admin' THEN 1 ELSE 0 END,
					CASE WHEN User.Email LIKE '%@cloudxdpo.com' THEN 1 ELSE IFNULL(IsCloudxUser, 0) END
			FROM	User
					INNER JOIN Client	ON Client.ClientId = User.ClientId
			WHERE	Client.ClientId = IFNULL(pClientId, Client.ClientId)
					AND User.IsActive = 1
					AND (
							(Client.Email <> ''	AND pClientId IS NULL)
							OR pClientId IS NOT NULL
						);


		INSERT INTO ClientRoles (RoleName, ClientId, isAdmin, isLocked, isInternal)
			SELECT	RoleName,
					ClientId,
					isAdmin,
					isLocked,
					isInternal
			FROM	(SELECT DISTINCT ClientId FROM	tmpUsers) tmpUsers
					CROSS JOIN (
											SELECT	'Super Administrator' AS RoleName,	1 AS isAdmin,	1 AS isLocked,	1 AS isInternal,	1 AS InsertOrder
								UNION ALL	SELECT	'Data Entry',						0,				1,				1,					2
								UNION ALL	SELECT	'Approver',							0,				1,				0,					3
								UNION ALL	SELECT	'Supervisor',						0,				1,				0,					4
								UNION ALL	SELECT	'Search User',						0,				0,				0,					6					
								UNION ALL	SELECT	'Vendor',							0,				0,				0,					7					
								UNION ALL	SELECT	'Administrator',					1,				1,				0,					9
								UNION ALL	SELECT	'Buyer',							0,				0,				0,					10
								UNION ALL	SELECT	'Requestor',						0,				0,				0,					11
								UNION ALL	SELECT	'Procurement',						0,				0,				0,					12
								UNION ALL	SELECT	'Accounting',						0,				0,				0,					13
								UNION ALL	SELECT	'Auditor',							0,				0,				0,					14) Roles
			ORDER BY ClientId, isInternal DESC, InsertOrder;


		INSERT INTO ClientRoleFunctions (RoleId, FunctionKey, Access)
			SELECT	cr.RoleId,
					ss.FunctionKey,
					CASE WHEN cr.RoleName = 'Auditor' THEN CASE WHEN ss.FunctionOptions LIKE '%=0%' THEN 0 ELSE 1 END ELSE 1 END
			FROM	ClientRoles cr
					CROSS JOIN SystemFunctions ss
			WHERE	cr.ClientId = IFNULL(pClientId, cr.ClientId)
					AND (ss.Migrate LIKE CONCAT('%', cr.RoleName, '%') OR ss.Migrate = '')
					AND cr.RoleName <> 'Super Administrator'
			ORDER BY 1, 2;


		-- Insert all Cloud X supervisors as Super Users
		INSERT INTO ClientUserRoles (UserId, RoleId)
			SELECT	DISTINCT	UserId,	cr.RoleId
			FROM	tmpUsers u
					INNER JOIN ClientRoles cr	ON cr.ClientId = u.ClientId
			WHERE	(cr.RoleName = 'Super Administrator'
					AND u.IsCloudxUser = 1
					AND u.isAdmin = 1)
			ORDER	BY 2, 1;

		-- Insert all Cloud X users in the data entry role for Cloudx
		INSERT INTO ClientUserRoles (UserId, RoleId)
			SELECT	DISTINCT	UserId, cr.RoleId
			FROM	tmpUsers u
					INNER JOIN ClientRoles cr	ON cr.ClientId = u.ClientId
			WHERE	(cr.RoleName = 'Data Entry'
					AND u.IsCloudxUser = 1
					AND u.isAdmin = 0)
			ORDER	BY 2, 1;



		INSERT INTO ClientUserRoles (UserId, RoleId)
			SELECT	DISTINCT ur.UserId, cr.roleid
			FROM	UserRoles ur
					INNER JOIN tmpUsers u				ON u.UserId = ur.UserId
					INNER JOIN Role r					ON r.RoleId = IFNULL(ur.RoleId, 5) -- Default to Search User
					INNER JOIN ClientRoles cr			ON cr.ClientId = u.ClientId
			WHERE	u.ClientId = IFNULL(pClientId, u.ClientId)
					AND cr.RoleName LIKE CONCAT('%', case when r.RoleName = 'Exception Handler' then 'Approver' else r.RoleName end , '%')  -- Treat all Exception Handlers as Approvers later they will be tagger in the user table
					AND cr.isInternal = 0
					AND u.IsCloudxUser = 0;


		INSERT INTO tmpSuperAdmins (UserId)
			SELECT DISTINCT	cur.UserId
			FROM ClientUserRoles cur
				INNER JOIN User u				ON u.UserId = cur.UserId
													AND u.ClientId = IFNULL(pClientId, u.ClientId)
													AND u.IsActive = 1
													AND u.IsCloudxUser = 1
				INNER JOIN ClientRoles cr		ON cr.RoleId = cur.RoleId
													AND cr.isAdmin = 1 and cr.isInternal = 1;



		-- Delete all roles if the user is already a SUPER ADMIN
		DELETE	cur
		FROM	ClientUserRoles cur
				INNER JOIN User u				ON u.UserId = cur.UserId
													AND u.ClientId = IFNULL(pClientId, u.ClientId)
				INNER JOIN ClientRoles cr		ON cr.RoleId = cur.RoleId
													AND cr.isAdmin = 0
				INNER JOIN tmpSuperAdmins sa	ON sa.UserId = cur.UserId;

		insert into _x_UserParameters (UserId)
			select	UserId
			from	User
			where 	ClientId in (select distinct ClientId from ClientRoles cr)
					and not exists (select 1 from _x_UserParameters xup where xup.UserId = User.UserId);

		-- If they have the RoleId = 3  <- Exception handler, then set the flag to true
		Update 	_x_UserParameters Data
				inner join tmpUsers t	on t.UserId = Data.UserId
		set 	Data.isExceptionHandler = 1
		where 	t.IsCloudxUser = 0 
				and exists (select 1 from UserRoles ur where ur.UserId = t.UserId and ur.RoleId = 3);

		DROP TEMPORARY TABLE tmpUsers;
		DROP TEMPORARY TABLE tmpSuperAdmins;


		if not exists (Select 1 from _x_ClientParameters where ClientId = pClientId) THEN
			insert into _x_ClientParameters values (pClientId, 'Timezone', 				'US/Eastern');
			insert into _x_ClientParameters values (pClientId, 'GLCodeMask', 			'%');
			insert into _x_ClientParameters values (pClientId, 'GLCodeMaskRequired', 	'No');
		end if;

		delete from InvoiceArchiveReason where ClientId = pClientId;

		set @D = 	date(date_sub(now(), interval 6 month));
		insert into InvoiceArchiveReason(ClientId, ArchiveReason, TotalCount, LastUsed)
			Select 	Invoice.ClientId, left(ArchiveReason, 200), count(*), date(max(LastActionDate))
			from 	Invoice 
			where 	Invoice.isDeleted = 0
					and Invoice.ClientId = pClientId
					and nullif(Invoice.ArchiveReason, 'null') is not null  
					and length(Invoice.ArchiveReason) >= 3
			group 	by Invoice.ClientId, ArchiveReason
			having 	date(max(LastActionDate)) >= @D;

		
		
		Update 	_x_UserParameters set LaunchPage = 'Invoice'
		where 	UserId in (select	UserId
						from 	User
						where 	ClientId = pClientId
								and exists 	(select		1 
												from	ClientUserRoles cur
														inner join ClientRoles cr on cr.RoleId = cur.RoleId 
																						and cr.RoleName = 'Approver'
												where cur.UserId = User.UserId));
		
		delete 
		from	ClientUserRoles
		where 	UserId in (
								select 	UserId
								from	User
								where 	UserId in (select	UserId
													from 	User
													where 	ClientId = pClientId
															and isCloudxUser = 1
															and not Email like '%@cloud%'));
		
		insert into ClientUserRoles (UserId, RoleId)
			select 	UserId, aa.RoleId
			from	User
					cross join (select Roleid From ClientRoles where RoleName = 'Search User' and ClientId = pClientId) aa
			where 	UserId in (select	UserId
								from 	User
								where 	ClientId = pClientId
										and isCloudxUser = 1
										and not Email like '%@cloud%');	
		
	
		-- Handle the Admin accounts that may have been badly assigned security
		UPDATE	User set isCloudxUser = 0
		where 	ClientId = pClientId
				and isCloudxUser = 1
				and not Email like '%@cloud%';
	
		delete 
		from	ClientUserRoles
		where	UserId in (select	UserId
								from 	User
								where 	ClientId = pClientId
										and isCloudxUser = 0
										and username like '%admin%');	
		
		insert into ClientUserRoles (UserId, RoleId)
			select 	UserId, aa.RoleId
			from	User
					cross join (select Roleid From ClientRoles where RoleName = 'Super Administrator' and ClientId = pClientId) aa
			where 	UserId in (select	UserId
								from 	User
								where 	ClientId = pClientId
										and isCloudxUser = 1
										and username like '%admin%')
					and not exists (select 1 from ClientUserRoles cr where cr.UserId = User.UserId and cr.RoleId = aa.RoleId);

	
	/*
	
	CALL _x_SecurityGenerate(1, 1);
	CALL _x_SecurityGenerate(88, null);
	CALL _x_SecurityGenerate(137, null);
	CALL _x_SecurityGenerate(147, null);
	
	*/

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_SetClientTimeZone` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_SetClientTimeZone`(IN pClientId int)
ThisProc:
	BEGIN

	-- noformat

	set 	@TZ = 'US/Eastern';

	SELECT	ifnull(nullif(ParamValue, ''), 'US/Eastern')
	INTO 	@TZ
	FROM 	_x_ClientParameters
	WHERE 	ClientId = pClientId
			and ParamKey = 'Timezone';

	set TIME_ZONE = @TZ;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_SigninAccess` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_SigninAccess`(IN `pUserId` char(36),
IN `pAccessCode` varchar(50),
IN `pAccessTail` char(2),
IN `pAccessDate` datetime)
BEGIN

-- noformat

	UPDATE _x_UserParameters 	set 
		AccessCode = pAccessCode,
		AccessTail = pAccessTail,
		AccessDate = pAccessDate
	WHERE UserId = pUserId;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_SigninCheck` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_SigninCheck`(
-- noformat
	IN pUsername varchar(50),
	IN pPassword varchar(50))
ThisProc:BEGIN
	
	set @MaxFails = 7;

	SET @UserId 		= NULL;
	set @isAdmin 		= null;
	SET @Email 			= NULL;
	SET @AccessTail 	= NULL;
	SET @AccessDate 	= NULL;
	SET @FailCount 		= NULL;
	set @Password 		= null; 

	SELECT	User.UserId,
			User.Password,
			User.Email,
			_x_UserParameters.AccessTail,
			_x_UserParameters.AccessDate,
			_x_UserParameters.FailCount
	INTO	@UserId, @Password, @Email, @AccessTail, @AccessDate, @FailCount
	FROM	User
			LEFT JOIN _x_UserParameters 	ON User.UserId = _x_UserParameters.UserId
	WHERE User.UserName = pUsername
			AND User.IsActive = TRUE
			AND IFNULL(_x_UserParameters.FailCount, 0) < @MaxFails
	LIMIT 1;

	IF @UserId IS NOT NULL AND @FailCount IS NULL THEN
		INSERT INTO _x_UserParameters (UserId)
			VALUES (@UserId);
	END IF;

	if @UserId IS NOT NULL then
		if pPassword <> @Password then 
			if @FailCount between @MaxFails-2 and @MaxFails-1 THEN
				set @msg = Concat('There has been a ', @FailCount, 'th attempt to login using your information.');
				set @msg = Concat(@msg, char(13), char(10), 'If this was not done by you, please contact your administrator immediately.');
				call _x_Notify(@UserId, 'Login attempts', @msg, 'Security', null, null, null);
			end if;
			SET @UserId 	= NULL;
			SET @Email 		= NULL;
			SET @AccessTail = NULL;
			SET @AccessDate = NULL;
		else
			if not exists 	   (SELECT	1
								FROM 	ClientUserRoles cur
										INNER JOIN ClientRoles cr	ON cr.RoleId = cur.RoleId
																		AND cr.isAdmin = 1
								WHERE cur.UserId = @UserId
								limit 1)
				and not exists (SELECT	1
								FROM	ClientUserRoles cur
										INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
										INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
								WHERE	cur.UserId = @UserId
										and Access >= 0
								limit 1) then
				SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'Please contact your administrator.  You have no roles assigned.', MYSQL_ERRNO = 1;
				LEAVE ThisProc;
			end if;
		end if;
	end if;

	SELECT	@UserId 		AS UserId,
			@Email 			AS Email,
			@AccessTail 	AS AccessTail,
			@AccessDate 	AS AccessDate;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_SigninFailed` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_SigninFailed`(IN `pUsername` varchar(50))
BEGIN

-- noformat

	UPDATE 	User
			LEFT JOIN _x_UserParameters 	ON User.UserId = _x_UserParameters.UserID
	set 	_x_UserParameters.FailCount = _x_UserParameters.FailCount + 1
	WHERE 	User.UserName = pUsername;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_SigninReset` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_SigninReset`(
	IN `pType` tinyint,
	IN `pClientId` int,
	IN `pUsername` VARCHAR(50),
	IN `pPassword` varchar(50),
	IN `pAccessCode` varchar(50),
	IN `pAccessDate` datetime
)
BEGIN

-- noformat

	SET @ClientId 		= 0;
	SET @UserId 		= NULL;    
	SET @Email        = NULL;	

	IF (pType = 0) THEN

		SELECT	ClientId, UserId, Email
		INTO	@ClientId, @UserId, @Email
		FROM	User
		WHERE	UserName = pUsername
				AND IsActive = TRUE 
		LIMIT 1;

		IF (@ClientId > 0) THEN

			UPDATE 	User
					LEFT JOIN _x_UserParameters	ON User.UserId = _x_UserParameters.UserID
			SET 	_x_UserParameters.AccessCode 	= pAccessCode,
					_x_UserParameters.FailCount 	= 0,
					_x_UserParameters.AccessDate 	= pAccessDate
			WHERE	User.UserId = @UserId;

			call _x_Notify(@UserId, 'Password reset', 'Someone requested to reset your password', 'Security', null, null, null);

			SELECT	@ClientId AS ClientId, @Email AS Email;
		ELSE
			SELECT	0 AS ClientId, NULL AS Email;
		END IF;

	ELSEIF (pType = 1) THEN
		SELECT	_x_UserParameters.AccessDate
		FROM	User
				LEFT JOIN _x_UserParameters		ON User.UserId = _x_UserParameters.UserID
		WHERE	User.ClientId = pClientId
				AND _x_UserParameters.AccessCode = pAccessCode
				AND User.IsActive = TRUE 
		LIMIT 1;
	ELSE
		UPDATE	User
				LEFT JOIN _x_UserParameters		ON User.UserId = _x_UserParameters.UserID
		SET 	User.Password 					= pPassword,
				User.LastPasswordChangeDate 	= now(),
				_x_UserParameters.AccessCode 	= NULL
		WHERE	User.ClientId = pClientId
				AND _x_UserParameters.AccessCode = pAccessCode
				AND User.IsActive = TRUE;

		SELECT	1 AS ClientId;

	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_SigninSocial` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_SigninSocial`(IN pEmail varchar(100))
BEGIN

-- noformat

	SELECT
		u.ClientId,
		CAST(u.UserId AS char(36)) AS UserId,
		u.IsCloudxUser,
		up.LaunchPage

	FROM User AS u
		LEFT JOIN _x_UserParameters AS up
			ON u.UserId = up.UserId
	WHERE u.Email = pEmail
	AND u.IsActive = TRUE
	AND up.FailCount < 7 LIMIT 1;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_SigninSuccess` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_SigninSuccess`(
-- noformat
	IN pUserId char(36),
	IN pAccessCode varchar(50))
BEGIN

	UPDATE 	_x_UserParameters
	set 	FailCount = 0
	WHERE 	UserId = pUserId LIMIT 1;

	SELECT
			u.ClientId,
			u.FirstName,
			u.IsCloudxUser,
			u.Email,
			up.LaunchPage,
			u.CanViewConfidentialInvoice
	FROM User u
		LEFT JOIN _x_UserParameters up	ON u.UserId = up.UserId
	WHERE 	u.UserId = pUserId
			AND IFNULL(up.AccessCode, '!@#$%^') = IFNULL(pAccessCode, '!@#$%^');


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_StringToRegEx` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_StringToRegEx`(INOUT pInput text)
BEGIN

	-- This is the regex Expression Jack and james are the fields being sought
	-- ^(?=.*jack)(?=.*james).*$'
	-- ^(?=.*Cleaning)(?=.*5547.04).*$

	IF IFNULL(pInput, '') <> '' THEN
		CALL _x_StringToRows(pInput, ' ');
		-- update tSearchList set SearchValue = replace(SearchValue, char(92), '\\\\\\\\\\');
		update tSearchList set SearchValue = replace(SearchValue, '+', '\\+');
		update tSearchList set SearchValue = replace(SearchValue, '^', '\\^');
		update tSearchList set SearchValue = replace(SearchValue, '*', '\\*');
		update tSearchList set SearchValue = replace(SearchValue, '[', '\\[');
		update tSearchList set SearchValue = replace(SearchValue, ']', '\\]');
		update tSearchList set SearchValue = replace(SearchValue, '-', '\\-');
		update tSearchList set SearchValue = replace(SearchValue, '(', '\\(');
		update tSearchList set SearchValue = replace(SearchValue, ')', '\\)');
		update tSearchList set SearchValue = replace(SearchValue, '{', '\\{');
		update tSearchList set SearchValue = replace(SearchValue, '}', '\\}');
		SELECT
			GROUP_CONCAT(DISTINCT SearchValue SEPARATOR '■') INTO pInput
		FROM tSearchList;
		SET pInput = CONCAT('^(?=.*', REPLACE(pInput, '■', ')(?=.*'), ').*$');
	else 
		set pInput = '.|^$';  -- This show be used to say found as true if string is empty
	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_StringToRows` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_StringToRows`(Input text, delimiter varchar(1))
ThisProc:
BEGIN
	-- noformat
	DROP TEMPORARY TABLE IF EXISTS tSearchList;
	CREATE TEMPORARY TABLE tSearchList (
		SearchValue text
	);

	DROP TEMPORARY TABLE IF EXISTS DataRows;
	CREATE TEMPORARY TABLE DataRows (
		Id int
	);

	
	set @Count = CHAR_LENGTH(Input) - CHAR_LENGTH(REPLACE(Input, delimiter, '')) + 1 ;
	INSERT DataRows (Id)
	WITH RECURSIVE sequence AS (
	    SELECT 1 AS Id
	    UNION ALL
	    SELECT Id + 1 
	    FROM sequence
	    WHERE sequence.Id < @Count
	)
	SELECT Id FROM sequence;

	INSERT INTO tSearchList(SearchValue)
		SELECT	SUBSTRING_INDEX (SUBSTRING_INDEX (val, delimiter, Id), delimiter, -1) AS myvalue
		FROM 	DataRows cnt
				CROSS JOIN (SELECT
						CONCAT(Input, REPEAT(delimiter, @Count)) AS val) AS c
			HAVING myvalue <> '';
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_UserAddFilter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_UserAddFilter`(IN `pType` tinyint,
IN `pUserId` char(36),
IN `pGLCodeId` int,
IN `pDepartmentId` int,
IN `pVendorId` int,
IN `pCompanyId` int,
IN `pAssigneeId` char(36),
IN `pAssignedId` char(36),
IN `pTypes` tinyint,
IN `pCenters` varchar(250),
IN `pAmount` decimal(18, 2),
IN `pIsChecked` tinyint,
IN `pDateFrom` datetime,
IN `pDateTo` datetime,
IN `pDateCreated` datetime)
BEGIN

  SET FOREIGN_KEY_CHECKS = 0;

  IF (pType = 1) THEN /* GLCode */

    DELETE
      FROM ApproverGLCode
    WHERE UserId = pUserId
      AND GLCodeId = pGLCodeId;
    INSERT INTO ApproverGLCode (UserId, GLCodeId)
      VALUES (pUserId, pGLCodeId);

  ELSEIF (pType = 2) THEN /* Department */

    DELETE
      FROM UserDepartment
    WHERE UserId = pUserId
      AND DepartmentId = pDepartmentId;
    INSERT INTO UserDepartment (UserId, DepartmentId, IsHomeDepartment)
      VALUES (pUserId, pDepartmentId, pIsChecked);

  ELSEIF (pType = 3) THEN /* Max Amount */

    IF (pIsChecked = 0) THEN
      DELETE
        FROM ApproverByAmount
      WHERE UserId = pUserId
        AND SecondApproverId = pAssigneeId
        AND ClientCompanyId = pCompanyId;

      INSERT INTO ApproverByAmount (UserId, SecondApproverId, ClientCompanyId, MaximumAllowedAmount, CostCenters, IsPOIsNoPOIsBoth)
        VALUES (pUserId, pAssigneeId, pCompanyId, pAmount, pCenters, pTypes);
    ELSE
      DELETE
        FROM ApproverByAmount
      WHERE UserId = pUserId
        AND SecondApproverId = pAssigneeId
        AND ClientCompanyId = pCompanyId
        AND VendorId = pVendorId;

      INSERT INTO ApproverByAmount (UserId, SecondApproverId, ClientCompanyId, MaximumAllowedAmount, VendorId, CostCenters, IsPOIsNoPOIsBoth)
        VALUES (pUserId, pAssigneeId, pCompanyId, pAmount, pVendorId, pCenters, pTypes);
    END IF;

  ELSEIF (pType = 4) THEN /* Reassignment */

    DELETE
      FROM UserReassignmentHistory
    WHERE SourceUserId = pUserId
      AND TargetUserId = pAssigneeId;

    IF (pIsChecked = 0) THEN

      INSERT INTO UserReassignmentHistory (SourceUserId, TargetUserId, UserId, WorkflowType, IsPermanent, DateFrom, DateTo, CreatedDate)
        VALUES (pUserId, pAssigneeId, pAssignedId, pTypes, pIsChecked, pDateFrom, pDateTo, pDateCreated);

    ELSE

      INSERT INTO UserReassignmentHistory (SourceUserId, TargetUserId, UserId, WorkflowType, IsPermanent, DateFrom, DateTo, CreatedDate)
        VALUES (pUserId, pAssigneeId, pAssignedId, pTypes, pIsChecked, NULL, NULL, pDateCreated);

    END IF;

  ELSEIF (pType = 5) THEN /* APClerkVendor */

    DELETE
      FROM APClerkVendor
    WHERE APClerkId = pUserId
      AND VendorId = pVendorId;
    INSERT INTO APClerkVendor (APClerkId, VendorId)
      VALUES (pUserId, pVendorId);

  ELSE /* Division */

    DELETE
      FROM UserClientCompanies
    WHERE UserId = pUserId
      AND ClientCompanyId = pCompanyId;
    INSERT INTO UserClientCompanies (UserId, ClientCompanyId)
      VALUES (pUserId, pCompanyId);

  END IF;

  SET FOREIGN_KEY_CHECKS = 1;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_UserById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_UserById`(

-- noformat
	IN pType int, 
	IN pClientId int, 
	IN pUserId char(36), 
	IN pOffset int,
	IN pSize int
)
BEGIN

	set @VendorNoAfterName = 1;

-- noformat

	IF (pType = 0) THEN  /* User Details */
		SELECT
				CAST(u.UserId AS char(36)) AS UserId,
				u.UserName,
				u.FirstName,
				u.LastName,
				u.AddressId,
				u.Email,
				u.Telephone,
				u.UserIdCard,
				u.OrgId,
				u.Duration,
				u.LimitMailPerDay,
				u.EnableEscalation,
				u.CanViewConfidentialInvoice,
				u.IsCloudxUser,
				u.ViewCapEx,
				u.IsActive,
				ua.AccessTail,
				ua.LaunchPage,
				ua.DisableNotifications,
				ua.UseSmartSearch,
				ua.IsExceptionHandler,
				(SELECT		GROUP_CONCAT(cr.RoleName order by cr.RoleName SEPARATOR ', ')
					FROM	ClientUserRoles cur
							INNER JOIN ClientRoles cr			ON cr.RoleId = cur.RoleId
					WHERE	cur.UserId = u.UserId) AS RoleName,
				ad.StateId,
				ad.ZipCode,
				ad.StreetName,
				ad.CityName,
				CONCAT(org.OrgId, ', ', org.OrgName) AS OrgName,
				CONCAT(st.StateNameShort, ', ', st.StateName) AS StateName
		FROM	User u
				LEFT JOIN _x_UserParameters ua			ON u.UserId = ua.UserId
				LEFT JOIN Address ad					ON u.AddressId = ad.AddressId
				LEFT JOIN State st						ON ad.StateId = st.StateId
				LEFT JOIN OrgData org					ON u.OrgId = org.Id
		WHERE u.ClientId = pClientId
				AND u.UserId = pUserId;
	
	ELSEIF (pType = 1) THEN /* List: GLCode */
		SELECT
				ApproverGLCode.Id,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(GLCode.Desccription, ''), ' [', IFNULL(GLCode.GLCodeName, ''), ']')
					else
						concat('[', IFNULL(GLCode.GLCodeName, ''), '] ', IFNULL(GLCode.Desccription, '')) end 					as GLCode,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(ClientCompany.Description, ''), ' [', IFNULL(ClientCompany.CompanyCode, ''), ']')
					else
						concat('[', IFNULL(ClientCompany.CompanyCode, ''), '] ', IFNULL(ClientCompany.Description, '')) end 	as Company
		FROM	ApproverGLCode
				LEFT JOIN GLCode			ON ApproverGLCode.GLCodeId = GLCode.GLCodeId
				LEFT JOIN ClientCompany		ON GLCode.ClientCompanyId = ClientCompany.Id
		WHERE	ApproverGLCode.UserId = pUserId
		ORDER	BY ApproverGLCode.Id DESC 
		LIMIT 	pOffset, pSize;
	
	ELSEIF (pType = 2) THEN /* List: Department */
		SELECT
				UserDepartment.Id,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Department.Description, ''), ' [', IFNULL(Department.DepartmentName, ''), ']')
					else
						concat('[', IFNULL(Department.DepartmentName, ''), '] ', IFNULL(Department.Description, '')) end 		as Department,
				UserDepartment.IsHomeDepartment
		FROM	UserDepartment
				LEFT JOIN Department		ON UserDepartment.DepartmentId = Department.Id
		WHERE	UserDepartment.UserId = pUserId
		ORDER	BY UserDepartment.Id DESC 
		LIMIT	pOffset, pSize;
	
	ELSEIF (pType = 3) THEN /* List: Max Amount */
		SELECT
				ApproverByAmount.Id,
				CONCAT('$', FORMAT(ApproverByAmount.MaximumAllowedAmount, 2)) AS MaxAmount,
				CONCAT(User.LastName, ', ', User.FirstName) AS Manager,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
					else
						concat('[', IFNULL(Vendor.VendorNo, ''), '] ', IFNULL(Vendor.VendorName, '')) end 					as Vendor,
				LENGTH(ApproverByAmount.CostCenters) - LENGTH(REPLACE(ApproverByAmount.CostCenters, ',', '')) + 1 AS Department,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(ClientCompany.Description, ''), ' [', IFNULL(ClientCompany.CompanyCode, ''), ']')
					else
						concat('[', IFNULL(ClientCompany.CompanyCode, ''), '] ', IFNULL(ClientCompany.Description, '')) end 	as Company,
				ApproverByAmount.IsPOIsNoPOIsBoth AS IsPo /* Both = null, NoPo = 0, Po = 1 */
		
		FROM	ApproverByAmount
				LEFT JOIN User				ON ApproverByAmount.SecondApproverId = User.UserId
				LEFT JOIN Vendor			ON ApproverByAmount.VendorId = Vendor.VendorId
				LEFT JOIN ClientCompany		ON ApproverByAmount.ClientCompanyId = ClientCompany.Id
		WHERE	ApproverByAmount.UserId = pUserId
		ORDER	BY ApproverByAmount.Id DESC 
		LIMIT	pOffset, pSize;
	
	ELSEIF (pType = 4) THEN /* List: Reassignment */
		SELECT
				UserReassignmentHistory.ReassignUserHistoryId AS Id,
				CONCAT(UserTarget.LastName, ', ', UserTarget.FirstName) AS Assignee,
				CONCAT(UserMain.LastName, ', ', UserMain.FirstName) AS AssignedBy,
				UserReassignmentHistory.IsPermanent,
				UserReassignmentHistory.DateFrom,
				UserReassignmentHistory.DateTo,
				UserReassignmentHistory.CreatedDate,
				UserReassignmentHistory.WorkflowType AS Type
		
		FROM	UserReassignmentHistory
				LEFT JOIN User AS UserTarget			ON UserReassignmentHistory.TargetUserId = UserTarget.UserId
				LEFT JOIN User AS UserMain				ON UserReassignmentHistory.UserId = UserMain.UserId
		WHERE	UserReassignmentHistory.SourceUserId = pUserId
		ORDER	BY UserReassignmentHistory.ReassignUserHistoryId DESC LIMIT pOffset, pSize;
	
	ELSEIF (pType = 5) THEN /* List: APClerkVendor */
		SELECT
				APClerkVendor.VendorId AS Id,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
					else
						concat('[', IFNULL(Vendor.VendorNo, ''), '] ', IFNULL(Vendor.VendorName, '')) end 					as Vendor
		FROM	APClerkVendor
				LEFT JOIN Vendor	ON APClerkVendor.VendorId = Vendor.VendorId
		WHERE	APClerkVendor.APClerkId = pUserId 
		LIMIT pOffset, pSize;
		
	ELSEIF (pType = 6) THEN /* List: Division */
		SELECT
				UserClientCompanies.ClientCompanyId AS Id,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(ClientCompany.Description, ''), ' [', IFNULL(ClientCompany.CompanyCode, ''), ']')
					else
						concat('[', IFNULL(ClientCompany.CompanyCode, ''), '] ', IFNULL(ClientCompany.Description, '')) end 	as Division
		FROM	UserClientCompanies
				LEFT JOIN ClientCompany	ON UserClientCompanies.ClientCompanyId = ClientCompany.Id
		WHERE	UserClientCompanies.UserId = pUserId 
		LIMIT pOffset, pSize;
	
	ELSEIF (pType = 7) THEN /* List: Roles */
		SELECT
				cr.RoleId,
				cr.RoleName, -- concat(cr.RoleName, case when isInternal=1 then ' **CloudX Only**' else '' end) as RoleName,
				CASE WHEN cur.UserId IS NULL THEN 0 ELSE 1 END AS IsAssigned,
				isInternal
		FROM	ClientRoles cr
				LEFT JOIN ClientUserRoles cur	ON cur.RoleId = cr.Roleid
													AND cur.Userid = pUserId		
				LEFT JOIN User u				ON u.UserId = pUserId
		WHERE	cr.ClientId = pClientId
				AND (
						cr.isInternal = u.isCloudxUser
						OR pUserId IS NULL
					)
		ORDER BY 4 DESC, 3 DESC, 2
		LIMIT pOffset, pSize;
		

	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_UserDelete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_UserDelete`(IN `pType` tinyint,
IN `pId` int,
IN `pUserId` char(36))
BEGIN

  SET FOREIGN_KEY_CHECKS = 0;

  IF (pType = 1) THEN

    DELETE
      FROM ApproverGLCode
    WHERE Id = pId;

  ELSEIF (pType = 2) THEN

    DELETE
      FROM UserDepartment
    WHERE Id = pId;

  ELSEIF (pType = 3) THEN

    DELETE
      FROM ApproverByAmount
    WHERE Id = pId;

  ELSEIF (pType = 4) THEN

    DELETE
      FROM UserReassignmentHistory
    WHERE ReassignUserHistoryId = pId;

  ELSEIF (pType = 5) THEN

    DELETE
      FROM APClerkVendor
    WHERE APClerkId = pUserId
      AND VendorId = pId;

  ELSE

    DELETE
      FROM UserClientCompanies
    WHERE UserId = pUserId
      AND ClientCompanyId = pId;

  END IF;

  SET FOREIGN_KEY_CHECKS = 1;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_UserEnable2FA` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_UserEnable2FA`(IN `pUserId` char(36),
IN `pIsEnabled` int)
ThisProc:

-- noformat

	BEGIN
		IF pIsEnabled = 1 THEN
			UPDATE _x_UserParameters 
			SET AccessTail = '00',
				AccessDate = DATE_SUB(UTC_TIMESTAMP(), INTERVAL 1 DAY)
			WHERE UserId = pUserId;
		ELSE
			UPDATE _x_UserParameters
			SET AccessCode = NULL,
				AccessTail = NULL,
				AccessDate = NULL
			WHERE UserId = pUserId;
		END IF;
	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_UserList` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_UserList`(IN pUserId char(36), IN pFilter varchar(20))
BEGIN

-- noformat
	
	SELECT	IFNULL(IsCloudxUser, 0), ClientId 
	INTO	@isCloudxUser, @ClientId
	FROM	User
	WHERE	UserId = pUserId;

	SET SESSION group_concat_max_len = 10000000;
  	SELECT	CAST(User.UserId AS char(36)) 													AS UserId,
			concat(CONCAT(User.LastName, ', ', User.FirstName) 									
			,CASE WHEN User.IsCloudxUser = 1 THEN ' (CloudX User)' ELSE '' END)				AS FullName,
			User.UserName,    
			ifnull(
					(	
						SELECT	GROUP_CONCAT(cr.RoleName order by cr.RoleName SEPARATOR ', ')
						FROM	ClientUserRoles cur
								INNER JOIN ClientRoles cr	ON cr.RoleId = cur.RoleId
						WHERE	cur.UserId = User.UserId
						ORDER	BY 1
					), '(not assigned)') 													AS RoleName,
			
			substring(ifnull(nullif(concat(
						case when xup.isExceptionHandler = 1 then ',Ehandler' else '' end,	
						case when User.CanViewConfidentialInvoice = 1 then ',ViewConfidential' else '' end	
						), ''), ',')				
						, 2, 999)															as Userproperty,
			case when User.isActive = 1 then '' else 'Inactive' END							as Status,
			User.isActive
  FROM 		User    
  			inner join _x_UserParameters xup on xup.UserId = User.UserId
  WHERE 	User.ClientId = @ClientId
  			and User.IsCloudxUser in (0, @isCloudxUser)
			and (
					(	pFilter is null
						or (pFilter = 'Approver'
							and exists (
											SELECT	1
											FROM	ClientUserRoles cur
													INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
													INNER JOIN ClientRoleFunctions crf		ON crf.RoleId = cr.RoleId
											WHERE	cur.UserId = User.UserId
													and crf.FunctionKey = 'InvoiceApprove'
													and crf.Access = 1
											limit 1
										)
							)
					)
				)
  	ORDER 	BY User.IsCloudxUser, User.LastName;



END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_UserStatus` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_UserStatus`(
-- noformat
	IN pUserId 		char(36),
	IN pIsActive	int,
	out pMessage 	mediumtext)
ThisProc:
	BEGIN
	
	SET SESSION group_concat_max_len = 1000000;

	set pMessage = null;

	set @ClientId = null;
	set @UserName = null;

	if pIsActive = 0 then
		select 	ClientId, CONCAT(LastName, ', ', FirstName)
		into	@ClientId, @UserName
		from	User 
		where 	UserId = pUserId;
	
		set @Msg = NULL;
		
		if exists (select 	1
					from 	ApprovalStep aStep
							inner join ApprovalSubStep ass ON aStep.ApprovalStepId = ass.ApprovalStepId
							inner join ApprovalSubStepUser asscau ON ass.ApprovalSubStepId = asscau.ApprovalSubStepId
					where 	aStep.ClientId = @ClientId 
							and asscau.UserId = pUserId
					limit 1) THEN
			set @Msg = concat(ifnull(concat(@msg, char(13), char(10)), ''), 'Currently assigned as an approver in a workflow.');
		end if;
	
		if exists (select 	1
					from 	ApprovalStep aStep
							inner join ApprovalSubStep ass ON aStep.ApprovalStepId = ass.ApprovalStepId
							inner join ApprovalSubStepCatchAllUsers asscau ON ass.ApprovalSubStepId = asscau.ApprovalSubStepId
							inner join User on User.UserId = asscau.UserId
					where 	aStep.ClientId = @ClientId
							and asscau.UserId = pUserId
					limit 1) THEN
			set @Msg = concat(ifnull(concat(@msg, char(13), char(10)), ''), 'Currently assigned as a catch approver in a workflow.');
		end if;

		set @ByAmountList = null;
		select	GROUP_CONCAT(concat(User.Firstname, ' ', User.LastName) order by User.LastName SEPARATOR ', ')
		into	@ByAmountList
		from 	ApproverByAmount
				inner join User 	on User.UserId = ApproverByAmount.UserId
		where 	User.ClientId = @ClientId
				and ApproverByAmount.SecondApproverId = pUserId;


		if @ByAmountList is not null THEN
			set @Msg = concat(ifnull(concat(@msg, char(13), char(10)), ''), '');
 			set @Msg = concat(ifnull(concat(@msg, char(13), char(10)), ''), 'Currently assigned as a manager for the max amount for the following users:');
			set @Msg = concat(ifnull(concat(@msg, char(13), char(10)), ''), @ByAmountList);
		end if;

		if @Msg is not null then
			set pMessage = @Msg;
			LEAVE ThisProc;
		END IF;











		drop TEMPORARY TABLE IF EXISTS Admins;
		CREATE TEMPORARY TABLE IF NOT EXISTS Admins AS (
			select	u.UserId, concat(u.LastName, ', ', u.FirstName) as AdminName
			from	User u
			where 	ClientId = @ClientId
					and u.IsActive = 1
					and u.IsCloudxUser = 0
					and exists (SELECT	cr.*
								FROM	ClientUserRoles cur
										INNER JOIN ClientRoles cr				ON cr.RoleId = cur.RoleId
								WHERE	cr.isAdmin	= 1
										and cr.isInternal = 0
										and cr.ClientId = @ClientId
										AND cur.UserId	= u.UserId)
		);



		-- checking the queues
		-- If the user is not the only user for an invoice, then we can delete the assignement
		-- if the user is the only one for that invoice, then we should assign to all admins
		drop TEMPORARY TABLE IF EXISTS MyData;
		CREATE TEMPORARY TABLE IF NOT EXISTS MyData AS (
			select	InvoiceId, count(distinct UserId) as cnt
			from 	UserInvoiceAssignment
			where 	InvoiceId in (	select	distinct InvoiceId 
									from 	UserInvoiceAssignment
									where 	UserId = pUserId)
			group by InvoiceId
		);

		-- If the user is not the only user for an invoice, then we can delete the assignement
		delete	from UserInvoiceAssignment 
		where	InvoiceId in (select InvoiceId from MyData where Cnt > 1)
				and UserId = pUserId;

		set 	@Admins = null;
		SELECT	GROUP_CONCAT(distinct Admins.UserId separator ';')
		into 	@Admins
		from 	UserInvoiceAssignment 
				cross join Admins
		where	InvoiceId in (select InvoiceId from MyData where Cnt = 1)
				and UserInvoiceAssignment.UserId = pUserId;


		-- IF @Admins is not null then there are Invoices in his queue where he is the only one.. THey have to be delegarted to admins.
		if @Admins is not null then
			-- if the user is the only one for that invoice, then we should assign to all admins
			insert into UserInvoiceAssignment(InvoiceId, UserId, Type, State, ApprovalSubStepId, HoldStartDate, HoldEndDate, DateCreated, Comments)
				select 	InvoiceId, Admins.UserId, Type, State, ApprovalSubStepId, HoldStartDate, HoldEndDate, now(), Comments
				from 	UserInvoiceAssignment 
						cross join Admins
				where	InvoiceId in (select InvoiceId from MyData where Cnt = 1)
						and UserInvoiceAssignment.UserId = pUserId;

			set @AdminNames = null;
			select 	GROUP_CONCAT(concat(AdminName) order by AdminName SEPARATOR '; ')
			into 	@AdminNames
			from 	Admins;


			INSERT INTO InvoiceHistory (InvoiceId, Actor, Action, ActionDate, PreviousData, NewData, Field, InitialStatus, CurrentStatus, ActorId, OldID)
				SELECT	InvoiceId,
						'System' 			AS Actor,
						'Delegation' 		AS Action,
						Now() 				AS ActionDate,
						@UserName			AS PreviousData,
						@AdminNames			AS NewData,
						'Approvers'			AS Field,
						'' 					AS InitialStatus,
						'' 					AS CurentStatus,
						NULL	 			AS ActorId,
						NULL 				AS OldId	
				from 	UserInvoiceAssignment 
				where	InvoiceId in (select InvoiceId from MyData where Cnt = 1)
						and UserInvoiceAssignment.UserId = pUserId;
	
			-- If the user is the only user for an invoice, then we can delete the assignement--The admins were assigned
			delete	from UserInvoiceAssignment 
			where	InvoiceId in (select InvoiceId from MyData where Cnt = 1)
					and UserId = pUserId;
	 		call _x_Notify(@Admins, 'Invoice approval', concat('Invoice(s) for ', @UserName, ' were reassigned to admins'), 'Approval', 'Invoice', null, null);
		end if;

	end if;	


	UPDATE User
	SET IsActive = pIsActive
	WHERE UserId = pUserId;

	UPDATE _x_UserParameters
	SET FailCount = 0
	WHERE UserId = pUserId;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_UserUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_UserUpdate`(
-- noformat

		IN pAsSelf 						tinyint,							-- 0 = Someone is modifing this user, 1 = The user is modifying themself
		
		-- Always this
		IN pUserId 						char(36),
		IN pClientId 					int,
		IN pEmail 						varchar(100),
		IN pFirstName 					varchar(50),
		IN pLastName 					varchar(50),

		-- Options
		IN pLimitMailPerDay 			int,
		in pLaunchPage 					varchar(20),
		in pUseSmartSearch	 			int,
		in pDisableNotifications 		int,

		-- Address
		IN pStreetName 					varchar(150),
		IN pCityName 					varchar(50),
		IN pStateId 					int,
		IN pZipCode 					varchar(20),
		IN pTelephone 					varchar(50),
		-- Password
		IN pCurrentPassword 			varchar(50),			-- pCurrentPassword is only needed for pAsSelf = 1
		IN pPassword 					varchar(50),			-- If Password is NULL then do not update
		IN pPasswordNotEncrypted		varchar(50),			-- This password is used to send an email to the user with the New password

		
		-- if pAsSelf = 0 then update all this
		IN pUserName 					varchar(50),
		IN pUserIdCard 					varchar(50),
		IN pOrgId 						varchar(50),
		IN pEnableEscalation 			tinyint,
		IN pCanViewConfidentialInvoice 	tinyint,
		IN pViewCapEx 					tinyint,
		IN pIsCloudxUser 				tinyint,
		IN pIsExceptionHandler			tinyint,


		-- Roles		
		IN pRoleIds 					varchar(1000)					-- Comma delimited list of roles the user is assigned to
		)
ThisProc:
	BEGIN
		SET @vAddressId = NULL;

		set pCurrentPassword 	= nullif(pCurrentPassword, '');
		set pIsCloudxUser 		= ifnull(pIsCloudxUser, 0);

		IF pAsSelf = 0 THEN
			-- Business logic
			-- Check is username already used
			IF EXISTS (SELECT	1
						FROM 	User
						WHERE 	UserName = pUserName
						AND 	UserId <> IFNULL(pUserId, '**NOMATCHPOSSIBLE**')) THEN
				SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'This user name is already being used.', MYSQL_ERRNO = 1;
				LEAVE ThisProc;
			END IF;

		ELSE
			IF pCurrentPassword IS NOT NULL THEN
				IF NOT EXISTS (SELECT	1
								FROM	User
								WHERE	UserId = pUserId
										AND Password = pCurrentPassword) THEN
					SIGNAL SQLSTATE '42000' SET MESSAGE_TEXT = 'The current password does not match the one entered.', MYSQL_ERRNO = 1;
					LEAVE ThisProc;
				END IF;
			ELSE
				SET pPassword = NULL;
			END IF;
		END IF;


		IF pUserId IS NULL THEN
			INSERT INTO Address (StreetName, CityName, StateId, ZipCode)
				VALUES (pStreetName, pCityName, pStateId, pZipCode);
			SET @vAddressId = LAST_INSERT_ID();


			SET pUserId = UUID();
			INSERT INTO User (ClientId, UserId, UserName, FirstName, LastName, Email,
								Telephone, UserIdCard, EnableEscalation, LimitMailPerDay,
								OrgId, CanViewConfidentialInvoice, IsCloudxUser, ViewCapEx,
								Password, AddressId)
				VALUES (pClientId, pUserId, pUserName, pFirstName, pLastName, pEmail, 
						pTelephone, pUserIdCard, pEnableEscalation, 1, 
						pOrgId, pCanViewConfidentialInvoice, pIsCloudxUser, pViewCapEx, 
						pPassword, @vAddressId);

			Insert into _x_UserParameters (UserId, LaunchPage, UseSmartSearch, DisableNotifications, IsExceptionHandler, FailCount)
				Values (pUserId, 'Home', 0, 0, pIsExceptionHandler, 0);

			set @Msg = concat('Hello ', pFirstName);
			set @Msg = concat(@Msg, char(13), char(10));
			set @Msg = concat(@Msg, char(13), char(10), 'Please connect to APSmart with the url below.');
			set @Msg = concat(@Msg, char(13), char(10), 'Your username is:', pUserName);
			set @Msg = concat(@Msg, char(13), char(10), 'Your password is:', pPasswordNotEncrypted);
			set @Msg = concat(@Msg, char(13), char(10));
			set @Msg = concat(@Msg, char(13), char(10), 'Once connected, please click on your name in the upper right-hand corner and change your password.');
			Call _x_Notify(pUserId, 'Welcome to APSmart', @Msg, 'Security', null, null, 1);

		ELSE
			SELECT	Addressid
			into 	@vAddressId
			FROM	User
			WHERE	UserId = pUserId;
			IF @vAddressId IS NULL THEN
				INSERT INTO Address (StreetName, CityName, StateId, ZipCode)
					VALUES (pStreetName, pCityName, pStateId, pZipCode);
				SET @vAddressId = LAST_INSERT_ID();
			ELSE
				UPDATE Address	SET 
					StreetName 	= pStreetName,
					CityName 	= pCityName,
					StateId 	= pStateId,
					ZipCode 	= pZipCode
				WHERE AddressId = @vAddressId;
			END IF;
			IF pAsSelf = 1 THEN
				update 	_x_UserParameters 	set
						LaunchPage				= pLaunchPage,
						UseSmartSearch			= pUseSmartSearch,
						DisableNotifications	= pDisableNotifications,
						FailCount 				= 0
				WHERE UserId = pUserId;						

				UPDATE User SET
						FirstName				= pFirstName,
						LastName				= pLastName,
						Email 					= pEmail,
						Telephone	 			= pTelephone,
						Password				= CASE WHEN pPassword IS NULL THEN Password 				ELSE pPassword END,
						LastPasswordChangeDate	= CASE WHEN pPassword IS NULL THEN LastPasswordChangeDate 	ELSE now() END,
						LimitMailPerDay			= pLimitMailPerDay,
						AddressId 				= @vAddressId
				WHERE UserId = pUserId;
			ELSE
				update 	_x_UserParameters 	set
						IsExceptionHandler		= pIsExceptionHandler
				WHERE UserId = pUserId;						

				UPDATE User	SET 
					FirstName 					= pFirstName,
					LastName 					= pLastName,
					UserName					= pUserName,
					Email						= pEmail,
					Telephone 					= pTelephone,
					UserIdCard 					= pUserIdCard,
					AddressId 					= @vAddressId,
					OrgId 						= pOrgId,
					EnableEscalation 			= pEnableEscalation,
					CanViewConfidentialInvoice	= pCanViewConfidentialInvoice,
					IsCloudxUser 				= pIsCloudxUser,
					ViewCapEx 					= pViewCapEx,
					Password					= case when pIsCloudxUser = 1 then ifnull(pPassword, Password) else Password end
				WHERE UserId = pUserId;

				if pPassword is not null then
					update 	_x_UserParameters 	set
							FailCount 			= 0
					WHERE UserId = pUserId;						
				end if;
			END IF;
		END IF;

		--
		-- Roles only changed if pAsSelf = 0
		--
		IF pAsSelf = 0 and IFNULL(pRoleIds, '') <> '' THEN
			DELETE
				FROM ClientUserRoles
			WHERE UserId = pUserId;

			SET @Pos = 1;
			SET @Count = LENGTH(pRoleIds) - LENGTH(REPLACE(pRoleIds, ',', '')) + 1;

			WHILE @Pos <= @Count DO
				SET @RoleId = _x_SPLIT_STRING(pRoleIds, ',', @Pos);
				IF @RoleId <> '' THEN
					SET @RoleId = CONVERT(@RoleId, UNSIGNED);
					INSERT INTO ClientUserRoles (UserId, RoleId)
						VALUES (pUserId, @RoleId);
				END IF;
				SET @Pos = @Pos + 1;
			END WHILE;
		END IF;




	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_Workflow` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_Workflow`(IN `pType` tinyint,
IN `pClientId` int,
IN `pCompanyId` int,
IN `pStepId` int,
IN `pOrderNo` tinyint)
BEGIN

	IF (pType = 0) THEN  /* Main Step */

		SELECT DISTINCT
			COALESCE(ClientCompany.Id, 0) AS Id,
			ifnull(nullif(ClientCompany.CompanyCode, ''), 'Workflow') AS Description,
			Case 
				when nullif(ClientCompany.CompanyCode, '') is null and nullif(ClientCompany.Description, '') is null 	then 'NA'
				when nullif(ClientCompany.CompanyCode, '') is null														then ClientCompany.Description
				when nullif(ClientCompany.Description, '') is null														then ClientCompany.CompanyCode
				else CONCAT(ClientCompany.CompanyCode, ', ', ClientCompany.Description) end 	as Company
		FROM ApprovalStep
			LEFT JOIN ClientCompany
				ON ApprovalStep.ClientCompanyId = ClientCompany.Id
		WHERE ApprovalStep.ClientId = pClientId;

	ELSEIF (pType = 1) THEN /* Step List */

		IF (pCompanyId > 0) THEN
			SELECT
				ApprovalStepId AS Id,
				StepName,
				ClientCompanyId AS CompanyId,
				IsPO,
				WorkflowType

			FROM ApprovalStep
			WHERE ClientId = pClientId
			AND ClientCompanyId = pCompanyId;
		ELSE
			SELECT
				ApprovalStepId AS Id,
				StepName,
				ClientCompanyId AS CompanyId,
				IsPO,
				WorkflowType

			FROM ApprovalStep
			WHERE ClientId = pClientId;
		END IF;

	ELSEIF (pType = 2) THEN /* SubStep 1 & 2 */

		SELECT
			ApprovalSubStep.ApprovalSubStepId AS Id,
			ApprovalStep.StepName,
			SUBSTRING_INDEX (ApprovalSubStep.SubStepName, '(', 1) AS SubStepName,
			ApprovalSubStep.OrderNo

		FROM ApprovalSubStep
			LEFT JOIN ApprovalStep
				ON ApprovalSubStep.ApprovalStepId = ApprovalStep.ApprovalStepId
		WHERE ApprovalSubStep.ApprovalStepId = pStepId
		AND ApprovalStep.ClientId = pClientId;

	ELSEIF (pType = 3) THEN /* User in SubStep 1 & 2 */

		SELECT
			CAST(ApprovalSubStepUser.UserId AS char(36)) AS UserId,
			CONCAT(`User`.LastName, ', ', `User`.FirstName) AS `Name`,
			`User`.UserName,
			ApprovalSubStepUser.ManualAssignmentOnly

		FROM ApprovalSubStep
			LEFT JOIN ApprovalSubStepUser
				ON ApprovalSubStep.ApprovalSubStepId = ApprovalSubStepUser.ApprovalSubStepId
			LEFT JOIN `User`
				ON ApprovalSubStepUser.UserId = `User`.UserId
		WHERE ApprovalSubStep.ApprovalSubStepId = pStepId
		AND ApprovalSubStep.OrderNo = pOrderNo
		AND `User`.ClientId = pClientId
		ORDER BY `User`.LastName ASC;

	ELSE /* Catch All Users */

		SELECT
			CAST(ApprovalSubStepCatchAllUsers.UserId AS char(36)) AS UserId,
			CONCAT(`User`.LastName, ', ', `User`.FirstName) AS `Name`,
			`User`.UserName

		FROM ApprovalSubStepCatchAllUsers
			LEFT JOIN `User`
				ON ApprovalSubStepCatchAllUsers.UserId = `User`.UserId
		WHERE ApprovalSubStepCatchAllUsers.ApprovalSubStepId = pStepId
		AND `User`.ClientId = pClientId
		ORDER BY `User`.LastName ASC;

	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_WorkflowAddFilter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_WorkflowAddFilter`(IN `pType` tinyint,
IN `pSubStepId` int,
IN `pUserId` char(36),
IN `pGLCodeId` int,
IN `pDepartmentId` int,
IN `pProjectId` int,
IN `pVendorId` int,
IN `pOrgId` int,
IN `pAccountNumber` varchar(250))
BEGIN

  SET FOREIGN_KEY_CHECKS = 0;

  IF (pType = 0) THEN   /* ByVendor (VendorId) */

    DELETE
      FROM ApprovalSubStepUserVendor
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId
      AND VendorId = pVendorId;
    INSERT INTO ApprovalSubStepUserVendor (ApprovalSubStepId, UserId, VendorId)
      VALUES (pSubStepId, pUserId, pVendorId);

  ELSEIF (pType = 3) THEN   /* ByDepartment (DepartmentId) */

    DELETE
      FROM ApprovalSubStepUserDepartment
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId
      AND DepartmentId = pDepartmentId;
    INSERT INTO ApprovalSubStepUserDepartment (ApprovalSubStepId, UserId, DepartmentId)
      VALUES (pSubStepId, pUserId, pDepartmentId);

  ELSEIF (pType = 4) THEN   /* ByGL (GLCodeId) */

    DELETE
      FROM ApprovalSubStepUserGL
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId
      AND GLCodeId = pGLCodeId;
    INSERT INTO ApprovalSubStepUserGL (ApprovalSubStepId, UserId, GLCodeId)
      VALUES (pSubStepId, pUserId, pGLCodeId);

  ELSEIF (pType = 5) THEN   /* ByVendorAndDepartment (VendorId & DepartmentId) */

    DELETE
      FROM ApprovalSubStepUserVendorDepartment
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId
      AND VendorId = pVendorId
      AND DepartmentId = pDepartmentId;
    INSERT INTO ApprovalSubStepUserVendorDepartment (ApprovalSubStepId, UserId, VendorId, DepartmentId)
      VALUES (pSubStepId, pUserId, pVendorId, pDepartmentId);

  ELSEIF (pType = 6) THEN   /* ByVendorAndAccountNumber (VendorId & AccountNumber) */

    DELETE
      FROM ApprovalSubStepUserVendorAccountNumber
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId
      AND VendorId = pVendorId
      AND AccountNumber = pAccountNumber;
    INSERT INTO ApprovalSubStepUserVendorAccountNumber (ApprovalSubStepId, UserId, VendorId, AccountNumber)
      VALUES (pSubStepId, pUserId, pVendorId, pAccountNumber);

  ELSEIF (pType = 7) THEN   /* ByProject (ProjectId) */

    DELETE
      FROM ApprovalSubStepUserProject
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId
      AND ProjectTypeId = pProjectId;
    INSERT INTO ApprovalSubStepUserProject (ApprovalSubStepId, UserId, ProjectTypeId)
      VALUES (pSubStepId, pUserId, pProjectId);

  ELSEIF (pType = 8) THEN   /* ByVendorAndOrgData (VendorId & OrgId) */

    DELETE
      FROM ApprovalSubStepUserVendorOrgData
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId
      AND VendorId = pVendorId
      AND OrgId = pOrgId;
    INSERT INTO ApprovalSubStepUserVendorOrgData (ApprovalSubStepId, UserId, VendorId, OrgId)
      VALUES (pSubStepId, pUserId, pVendorId, pOrgId);

  END IF;

  SET FOREIGN_KEY_CHECKS = 1;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_WorkflowAddUser` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_WorkflowAddUser`(IN `pType` tinyint,
IN `pSubStepId` int,
IN `pUserId` char(36),
IN `pAssign` tinyint)
BEGIN

  SET FOREIGN_KEY_CHECKS = 0;

  IF (pType = 0) THEN

    DELETE
      FROM ApprovalSubStepUser
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId;
    INSERT INTO ApprovalSubStepUser (ApprovalSubStepId, UserId, ManualAssignmentOnly, CompareByFilterIntersection)
      VALUES (pSubStepId, pUserId, pAssign, 0);

  ELSE

    DELETE
      FROM ApprovalSubStepCatchAllUsers
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId;
    INSERT INTO ApprovalSubStepCatchAllUsers (ApprovalSubStepId, UserId)
      VALUES (pSubStepId, pUserId);

  END IF;

  SET FOREIGN_KEY_CHECKS = 1;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_WorkflowDelete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_WorkflowDelete`(IN `pType` tinyint,
IN `pSubStepId` int,
IN `pUserId` char(36),
IN `pFilter` tinyint,
IN `pFilterId1` varchar(250),
IN `pFilterId2` varchar(250))
BEGIN

  SET FOREIGN_KEY_CHECKS = 0;

  IF (pType = 0) THEN  /* Delete Approver */

    DELETE
      FROM ApprovalSubStepUserVendor
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId;

    DELETE
      FROM ApprovalSubStepUserDepartment
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId;

    DELETE
      FROM ApprovalSubStepUserGL
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId;

    DELETE
      FROM ApprovalSubStepUserVendorDepartment
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId;

    DELETE
      FROM ApprovalSubStepUserVendorAccountNumber
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId;

    DELETE
      FROM ApprovalSubStepUserProject
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId;

    DELETE
      FROM ApprovalSubStepUserVendorOrgData
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId;

    DELETE
      FROM ApprovalSubStepUser
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId;

  ELSEIF (pType = 1) THEN /* Delete Catch Approver */

    DELETE
      FROM ApprovalSubStepCatchAllUsers
    WHERE ApprovalSubStepId = pSubStepId
      AND UserId = pUserId;

  ELSE

    IF (pFilter = 0) THEN   /* ByVendor (VendorId) */

      DELETE
        FROM ApprovalSubStepUserVendor
      WHERE ApprovalSubStepId = pSubStepId
        AND UserId = pUserId
        AND VendorId = pFilterId1;

    ELSEIF (pFilter = 3) THEN   /* ByDepartment (DepartmentId) */

      DELETE
        FROM ApprovalSubStepUserDepartment
      WHERE ApprovalSubStepId = pSubStepId
        AND UserId = pUserId
        AND DepartmentId = pFilterId1;

    ELSEIF (pFilter = 4) THEN   /* ByGL (GLCodeId) */

      DELETE
        FROM ApprovalSubStepUserGL
      WHERE ApprovalSubStepId = pSubStepId
        AND UserId = pUserId
        AND GLCodeId = pFilterId1;

    ELSEIF (pFilter = 5) THEN   /* ByVendorAndDepartment (VendorId & DepartmentId) */

      DELETE
        FROM ApprovalSubStepUserVendorDepartment
      WHERE ApprovalSubStepId = pSubStepId
        AND UserId = pUserId
        AND VendorId = pFilterId1
        AND DepartmentId = pFilterId2;

    ELSEIF (pFilter = 6) THEN   /* ByVendorAndAccountNumber (VendorId & AccountNumber) */

      DELETE
        FROM ApprovalSubStepUserVendorAccountNumber
      WHERE ApprovalSubStepId = pSubStepId
        AND UserId = pUserId
        AND VendorId = pFilterId1
        AND AccountNumber = pFilterId2;

    ELSEIF (pFilter = 7) THEN   /* ByProject (ProjectId) */

      DELETE
        FROM ApprovalSubStepUserProject
      WHERE ApprovalSubStepId = pSubStepId
        AND UserId = pUserId
        AND ProjectTypeId = pFilterId1;

    ELSEIF (pFilter = 8) THEN   /* ByVendorAndOrgData (VendorId & OrgId) */

      DELETE
        FROM ApprovalSubStepUserVendorOrgData
      WHERE ApprovalSubStepId = pSubStepId
        AND UserId = pUserId
        AND VendorId = pFilterId1
        AND OrgId = pFilterId2;

    END IF;

  END IF;

  SET FOREIGN_KEY_CHECKS = 1;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_WorkflowFilter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_WorkflowFilter`(
-- noformat
	IN `pType` tinyint,
	IN `pSubStepId` int,
	IN `pUserId` char(36),
	IN `pOffset` int,
	IN `pSize` int)
BEGIN
	
	set @VendorNoAfterName = 1;

	IF (pType = 0) THEN   /* ByVendor (VendorId) */
		SELECT	CONCAT(Vendor.VendorId, ';0') 																				AS Id,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
					else
						concat('[', IFNULL(Vendor.VendorNo, ''), '] ', IFNULL(Vendor.VendorName, '')) end 					as Vendor
		FROM	ApprovalSubStepUserVendor
				LEFT JOIN Vendor	ON ApprovalSubStepUserVendor.VendorId = Vendor.VendorId
		WHERE	ApprovalSubStepUserVendor.ApprovalSubStepId = pSubStepId
				AND ApprovalSubStepUserVendor.UserId = pUserId
		LIMIT 	pOffset, pSize;
	
	ELSEIF (pType = 3) THEN   /* ByDepartment (DepartmentId) */
		SELECT	CONCAT(Department.Id, ';0') AS Id,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Department.Description, ''), ' [', IFNULL(Department.DepartmentName, ''), ']')
					else
						concat('[', IFNULL(Department.DepartmentName, ''), '] ', IFNULL(Department.Description, '')) end 	as Department
		FROM 	ApprovalSubStepUserDepartment
				LEFT JOIN Department	ON ApprovalSubStepUserDepartment.DepartmentId = Department.Id
		WHERE	ApprovalSubStepUserDepartment.ApprovalSubStepId = pSubStepId
				AND ApprovalSubStepUserDepartment.UserId = pUserId
		LIMIT	pOffset, pSize;
	
	ELSEIF (pType = 4) THEN   /* ByGL (GLCodeId) */
		SELECT	CONCAT(GLCode.GLCodeId, ';0') AS Id,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(GLCode.Desccription, ''), ' [', IFNULL(GLCode.GLCodeName, ''), ']')
					else
						concat('[', IFNULL(GLCode.GLCodeName, ''), '] ', IFNULL(GLCode.Desccription, '')) end 	as GLCode

		FROM	ApprovalSubStepUserGL
				LEFT JOIN GLCode		ON ApprovalSubStepUserGL.GLCodeId = GLCode.GLCodeId
		WHERE	ApprovalSubStepUserGL.ApprovalSubStepId = pSubStepId
				AND ApprovalSubStepUserGL.UserId = pUserId
		LIMIT	pOffset, pSize;
	
	ELSEIF (pType = 5) THEN   /* ByVendorAndDepartment (VendorId & DepartmentId) */
	
		SELECT	CONCAT(Vendor.VendorId, ';', Department.Id) AS Id,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
					else
						concat('[', IFNULL(Vendor.VendorNo, ''), '] ', IFNULL(Vendor.VendorName, '')) end 					as Vendor,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Department.Description, ''), ' [', IFNULL(Department.DepartmentName, ''), ']')
					else
						concat('[', IFNULL(Department.DepartmentName, ''), '] ', IFNULL(Department.Description, '')) end 	as Department
		FROM	ApprovalSubStepUserVendorDepartment
				LEFT JOIN Vendor		ON ApprovalSubStepUserVendorDepartment.VendorId = Vendor.VendorId
				LEFT JOIN Department	ON ApprovalSubStepUserVendorDepartment.DepartmentId = Department.Id
		WHERE	ApprovalSubStepUserVendorDepartment.ApprovalSubStepId = pSubStepId
				AND ApprovalSubStepUserVendorDepartment.UserId = pUserId
		LIMIT pOffset, pSize;
	
	ELSEIF (pType = 6) THEN   /* ByVendorAndAccountNumber (VendorId & AccountNumber) */
		SELECT	CONCAT(Vendor.VendorId, ';', ApprovalSubStepUserVendorAccountNumber.AccountNumber) AS Id,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
					else
						concat('[', IFNULL(Vendor.VendorNo, ''), '] ', IFNULL(Vendor.VendorName, '')) end 					as Vendor,
				ApprovalSubStepUserVendorAccountNumber.AccountNumber
		FROM	ApprovalSubStepUserVendorAccountNumber
				LEFT JOIN Vendor	ON ApprovalSubStepUserVendorAccountNumber.VendorId = Vendor.VendorId
		WHERE	ApprovalSubStepUserVendorAccountNumber.ApprovalSubStepId = pSubStepId
				AND ApprovalSubStepUserVendorAccountNumber.UserId = pUserId
		LIMIT pOffset, pSize;
	
	ELSEIF (pType = 7) THEN   /* ByProject (ProjectId) */
		SELECT	CONCAT(ProjectType.Id, ';0') AS Id,
				ProjectType.ProjectName AS `Project`
		FROM	ApprovalSubStepUserProject
				LEFT JOIN ProjectType	ON ApprovalSubStepUserProject.ProjectTypeId = ProjectType.Id
		WHERE	ApprovalSubStepUserProject.ApprovalSubStepId = pSubStepId
				AND ApprovalSubStepUserProject.UserId = pUserId
		LIMIT pOffset, pSize;
	
	ELSEIF (pType = 8) THEN   /* ByVendorAndOrgData (VendorId & OrgId) */
		SELECT	CONCAT(Vendor.VendorId, ';', OrgData.Id) AS Id,
				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(Vendor.VendorName, ''), ' [', IFNULL(Vendor.VendorNo, ''), ']')
					else
						concat('[', IFNULL(Vendor.VendorNo, ''), '] ', IFNULL(Vendor.VendorName, '')) end 					as Vendor,

				case when @VendorNoAfterName = 1 THEN
						concat(IFNULL(OrgData.OrgName, ''), ' [', IFNULL(OrgData.OrgId, ''), ']')
					else
						concat('[', IFNULL(OrgData.OrgId, ''), '] ', IFNULL(OrgData.OrgName, '')) end 					as `Company`
		FROM	ApprovalSubStepUserVendorOrgData
				LEFT JOIN Vendor	ON ApprovalSubStepUserVendorOrgData.VendorId = Vendor.VendorId
				LEFT JOIN OrgData	ON ApprovalSubStepUserVendorOrgData.OrgId = OrgData.Id
		WHERE	ApprovalSubStepUserVendorOrgData.ApprovalSubStepId = pSubStepId
				AND ApprovalSubStepUserVendorOrgData.UserId = pUserId
		LIMIT 	pOffset, pSize;
	
	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_WorkflowType` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_WorkflowType`(IN `pSubStepId` int)
BEGIN

  SELECT
    ApprovalStepUserFilterType AS `Type`
  FROM ApprovalSubStepUserFilter
  WHERE ApprovalSubStepId = pSubStepId
  ORDER BY ApprovalStepUserFilterType DESC;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ZZZ_CheckIfClientIsWithNextGen` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ZZZ_CheckIfClientIsWithNextGen`(in pClientId int, out pResult varchar(3))
ThisProc:
	BEGIN	
-- noformat
	set pResult = 'No';

	if exists (
				select	1
				from 	ClientRoles cr
				Where	ClientId = pClientId
				limit 	1) THEN
		set pResult = 'Yes';
	end if;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ZZZ_DeleteOrphanedAddresses` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ZZZ_DeleteOrphanedAddresses`(in pBatchCount int)
ThisProc:
	BEGIN
	-- noFormat

	DROP TEMPORARY TABLE IF EXISTS _x_ZZZ_ToDelete;
	DROP TEMPORARY TABLE IF EXISTS _x_ZZZ_UniqueAddresses;
	DROP TEMPORARY TABLE IF EXISTS _x_ZZZ_DeleteOrphanedAddresses;
	CREATE TEMPORARY TABLE IF NOT EXISTS _x_ZZZ_ToDelete (Id int Primary key)			ENGINE = INNODB, CHARACTER SET utf8mb4;
	CREATE TEMPORARY TABLE IF NOT EXISTS _x_ZZZ_UniqueAddresses (Id int) 				ENGINE = INNODB, CHARACTER SET utf8mb4;
	CREATE TEMPORARY TABLE IF NOT EXISTS _x_ZZZ_DeleteOrphanedAddresses (Id int)		ENGINE = INNODB, CHARACTER SET utf8mb4;



	insert into _x_ZZZ_UniqueAddresses(Id)
		Select DISTINCT BillToAddressId as Id from AVGINV where BillToAddressId is not null
		union all Select DISTINCT RemitToAddressId as Id from AVGINV where RemitToAddressId is not null
		union all Select DISTINCT ShippedToAddressId as Id from AVGINV where ShippedToAddressId is not null
		union all Select DISTINCT BillToAddressId as Id from AcceptedNonPOInvoicesHardy where nullif(BillToAddressId, 'NULL') is not null
		union all Select DISTINCT RemitToAddressId as Id from AcceptedNonPOInvoicesHardy where nullif(RemitToAddressId, 'NULL') is not null
		union all Select DISTINCT ShippedToAddressId as Id from AcceptedNonPOInvoicesHardy where nullif(ShippedToAddressId, 'NULL') is not null
		union all Select DISTINCT BillToAddressId as Id from CSVInvoice where BillToAddressId is not null
		union all Select DISTINCT RemitToAddressId as Id from CSVInvoice where RemitToAddressId is not null
		union all Select DISTINCT ShippedToAddressId as Id from CSVInvoice where ShippedToAddressId is not null
		union all Select DISTINCT AddressId as Id from Client where AddressId is not null
		union all Select DISTINCT AddressId as Id from Customer where AddressId is not null
		union all Select DISTINCT AddressId as Id from CustomerLocation where AddressId is not null
		union all Select DISTINCT AddressId as Id from CustomerSite where AddressId is not null
		union all Select DISTINCT AddressId as Id from Department where AddressId is not null
		union all Select DISTINCT RemitToAddressId as Id from Department where RemitToAddressId is not null
		union all Select DISTINCT BillToAddressId as Id from Invoice where BillToAddressId is not null
		union all Select DISTINCT RemitToAddressId as Id from Invoice where RemitToAddressId is not null
		union all Select DISTINCT ShippedToAddressId as Id from Invoice where ShippedToAddressId is not null
		union all Select DISTINCT AddressId as Id from Location where AddressId is not null
		union all Select DISTINCT DeliveryAddressId as Id from POHeader where DeliveryAddressId is not null
		union all Select DISTINCT AddressId as Id from User where AddressId is not null
		union all Select DISTINCT AddressId as Id from Vendor where AddressId is not null
		union all Select DISTINCT AddressId as Id from VendorLocation where AddressId is not null;
	CREATE INDEX idx_x_ZZZ_UniqueAddresses ON _x_ZZZ_UniqueAddresses (Id);
		


	insert into _x_ZZZ_DeleteOrphanedAddresses(Id)
		Select 	DISTINCT 	
				a.AddressId
		from 	Address a
				left join _x_ZZZ_UniqueAddresses d on d.Id = a.AddressID
		where 	d.Id is null;




	DeleteLoop:Loop		
		Truncate table _x_ZZZ_ToDelete;

		insert into _x_ZZZ_ToDelete(Id)
			Select	DISTINCT 	
					AddressId
			from 	_x_ZZZ_DeleteOrphanedAddresses 
					inner join 	Address	on Address.AddressId = _x_ZZZ_DeleteOrphanedAddresses.Id
			limit	pBatchCount;

		delete 	a
		from 	_x_ZZZ_ToDelete d
				inner join  Address a on a.AddressId = d.Id;

		if ROW_COUNT() <= 0 then
			Leave DeleteLoop;
		end if;

		do sleep(1);
		end loop;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ZZZ_ExtractTemplateVariables` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ZZZ_ExtractTemplateVariables`()
ThisProc:
	BEGIN	
-- noformat
	DECLARE eof int 		DEFAULT 0;
	DECLARE dataValue		varchar(655535);
	DECLARE curTemplates CURSOR FOR 
			SELECT	Body
			FROM 	EmailTemplates et
			WHERE 	Body like '%[%'
			union all
			SELECT	Subject
			FROM 	EmailTemplates et
			WHERE 	Subject like '%[%';
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET eof = 1;


	CREATE TEMPORARY TABLE IF NOT EXISTS zzz_Keywords (
		KeyWord 		varchar(250)
	);


	OPEN curTemplates;
NoMoreData:
	LOOP
		FETCH curTemplates INTO dataValue;
		IF eof = 1 THEN
			LEAVE NoMoreData;
		END IF;
-- 		if dataValue like '%]%' then 
-- 			select dataValue;
-- 		end if;

 		CALL _x_StringToRows(dataValue, '[');
		insert into zzz_Keywords (KeyWord)
 			select	distinct rtrim(convert(left(SearchValue, instr(SearchValue, ']')-1), char(250)))
			from	tSearchList 
			where	SearchValue like '%]%';

	END LOOP;
	CLOSE curTemplates;	
	
	select distinct KeyWord from zzz_Keywords order by 1;

	drop TEMPORARY table zzz_Keywords;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `_x_ZZZ_GOLIVE_SCRIPT` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`cloudxuser`@`%` PROCEDURE `_x_ZZZ_GOLIVE_SCRIPT`()
ThisProc:
	BEGIN

	/*

		ALTER TABLE EmailRecipients
		  DROP FOREIGN KEY EmailRecipients_ibfk_2;
		
		
		ALTER TABLE EmailRecipients DROP PRIMARY KEY;
		
		delete from EmailRecipients where not exists (select 1 from Email where Id = EmailId);
		
		alter table EmailRecipients add primary key(EmailId, EmailAddress);
		
		ALTER TABLE EmailRecipients
		ADD CONSTRAINT EmailRecipients_ibfk_2 FOREIGN KEY (EmailId)
		REFERENCES Email (Id)  ON DELETE CASCADE;
		
		DROP TABLE IF EXISTS _x_ClientParameters;
		
		CREATE TABLE _x_ClientParameters (
			ClientId 			int NOT NULL,
			TimeZone 			varchar(100) DEFAULT 'US/Eastern',
			PRIMARY KEY (ClientId)
		)
		ENGINE = INNODB,
		AVG_ROW_LENGTH = 16384,
		CHARACTER SET utf8mb4,
		COLLATE utf8mb4_general_ci,
		ROW_FORMAT = DYNAMIC;		


		
		--
		-- Drop table `_x_UserParameters`
		--
		DROP TABLE IF EXISTS _x_UserParameters;
		
		--
		-- Create table `_x_UserParameters`
		--
		CREATE TABLE _x_UserParameters (
			UserId 					char(36) NOT NULL,
			LaunchPage 				varchar(50) DEFAULT 'Home',
			UseSmartSearch 			int DEFAULT 0,
			DisableNotifications 	tinyint default 0,
			IsExceptionHandler 		tinyint default 0,
			AccessCode 				varchar(50) DEFAULT NULL,
			AccessTail 				char(2) DEFAULT NULL,
			AccessDate 				datetime DEFAULT NULL,
			FailCount 				tinyint DEFAULT 0,
			PRIMARY KEY (UserId)
		)
		ENGINE = INNODB,
		AVG_ROW_LENGTH = 16384,
		CHARACTER SET utf8mb4,
		COLLATE utf8mb4_general_ci,
		ROW_FORMAT = DYNAMIC;
















	drop table IF EXISTS SystemAdvanceSearchFieldsUserStats;
	drop table IF EXISTS SystemAdvanceSearchFieldsHiddenUser;
	drop table IF EXISTS SystemAdvanceSearchFieldsClient;
	drop table IF EXISTS SystemAdvanceSearchFields;
	
	CREATE TABLE SystemAdvanceSearchFields (
		SearchType 					varchar(20) NOT NULL,
		Field 						varchar(20) NOT NULL,
		Label 						varchar(50) NOT NULL,
		DataType					varchar(20) NOT NULL,
		FieldOrder					int not null,
		DependencyField				varchar(20) NULL,
		PRIMARY KEY (SearchType, Field)
		);
	
	CREATE TABLE SystemAdvanceSearchFieldsHiddenUser (
		SearchType 					varchar(20) NOT NULL,
		Field 						varchar(20) NOT NULL,
		UserId 						varchar(36) NOT NULL,
		PRIMARY KEY (SearchType, Field, UserId)
		);
	
	CREATE TABLE SystemAdvanceSearchFieldsClient (
		SearchType 					varchar(20) NOT NULL,
		Field 						varchar(20) NOT NULL,
		ClientId 					integer 	NOT NULL,
		ClientFieldOrder 			integer 	NULL,
		ClientHidden	 			bit 		NULL,
		PRIMARY KEY (SearchType, Field, ClientId)
		);
	
	CREATE TABLE SystemAdvanceSearchFieldsUserStats (
		SearchType 					varchar(20) NOT NULL,
		Field 						varchar(20) NOT NULL,
		UserId 						varchar(36) NOT NULL,
		TotalUsed					integer NOT NULL,
		PRIMARY KEY (SearchType, Field, UserId)
		);
	
	
	
	ALTER TABLE SystemAdvanceSearchFieldsHiddenUser
		ADD CONSTRAINT SystemAdvanceSearchFieldsHiddenUser_Parent FOREIGN KEY (SearchType, Field)
		REFERENCES SystemAdvanceSearchFields (SearchType, Field) ON DELETE NO ACTION ON UPDATE NO ACTION;
	
	ALTER TABLE SystemAdvanceSearchFieldsHiddenUser
		ADD CONSTRAINT SystemAdvanceSearchFieldsHiddenUser_UserId FOREIGN KEY (UserId)
		REFERENCES User (UserId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	
	
	ALTER TABLE SystemAdvanceSearchFieldsClient
		ADD CONSTRAINT SystemAdvanceSearchFieldsClient_Parent FOREIGN KEY (SearchType, Field)
		REFERENCES SystemAdvanceSearchFields (SearchType, Field) ON DELETE NO ACTION ON UPDATE NO ACTION;
	
	ALTER TABLE SystemAdvanceSearchFieldsClient
		ADD CONSTRAINT SystemAdvanceSearchFieldsClient_ClientId FOREIGN KEY (ClientId)
		REFERENCES Client (ClientId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	
	
	
	ALTER TABLE SystemAdvanceSearchFieldsUserStats
		ADD CONSTRAINT SystemAdvanceSearchFieldsUserStats_Parent FOREIGN KEY (SearchType, Field)
		REFERENCES SystemAdvanceSearchFields (SearchType, Field) ON DELETE NO ACTION ON UPDATE NO ACTION;
	
	ALTER TABLE SystemAdvanceSearchFieldsUserStats
		ADD CONSTRAINT SystemAdvanceSearchFieldsUserStats_UserId FOREIGN KEY (UserId)
		REFERENCES User (UserId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	
	insert into SystemAdvanceSearchFields(SearchType, Field, Label, DataType, FieldOrder, DependencyField)
					select 'GlobalSearch', 'MyInvoices', 		'Only my invoices', 'Check', 			5,		null		
		union all	select 'GlobalSearch', 'InvoiceNo', 		'Invoice number', 	'text', 			10,		null
		union all 	select 'GlobalSearch', 'CompanyCode', 		'Company/Store', 	'Select', 			15,		null
		union all 	select 'GlobalSearch', 'Department', 		'Department', 		'MultiSelect', 		15,		'CompanyCode'
		union all 	select 'GlobalSearch', 'Vendor', 			'Vendor', 			'Select', 			20,		'CompanyCode'
		union all 	select 'GlobalSearch', 'Comment', 			'Comment', 			'text', 			25,		null
		union all 	select 'GlobalSearch', 'InvoiceAmount#', 	'Invoice total', 	'currency', 		30,		null
		union all 	select 'GlobalSearch', 'InvoiceType', 		'Invoice Type', 	'MultiSelect', 		35,		null
		union all 	select 'GlobalSearch', 'POorNonPO', 		'Is PO Invoice', 	'Radio', 			36,		null		
		union all 	select 'GlobalSearch', 'PONumber', 			'PO Number', 		'text', 			37,		null
		union all 	select 'GlobalSearch', 'CheckNumber', 		'Check Number', 'text', 				45,		null
		union all 	select 'GlobalSearch', 'isConfidential', 	'Is confidential', 'Check', 			50,		null
		union all 	select 'GlobalSearch', 'GLCode', 			'GL Code', 	'Select', 					55,		null
		union all 	select 'GlobalSearch', 'InvoiceStatus', 	'Status', 			'MultiSelect', 		80,		null
		union all 	select 'GlobalSearch', 'InvoiceDate#', 		'Invoice date',		'date', 			90,		null
		union all 	select 'GlobalSearch', 'ScanDate#', 		'Scan', 			'date', 			95,		null
		union all 	select 'GlobalSearch', 'LastActionDate#', 	'Last action', 		'date', 		   100,		null;	
	
	insert into SystemAdvanceSearchFields(SearchType, Field, Label, DataType, FieldOrder, DependencyField)
					select 'IssuePayment', 'DiscountOnly', 		'Discount applicable only', 'Check', 			5,		null		
		union all 	select 'IssuePayment', 'DocumentType', 		'Document type',			'Select', 			10,		null		
		union all	select 'IssuePayment', 'InvoiceNo', 		'Invoice number', 			'text', 			15,		null
		union all 	select 'IssuePayment', 'CompanyCode', 		'Company/Store', 			'Select', 			20,		null
		union all 	select 'IssuePayment', 'Vendor', 			'Vendor', 					'Select', 			25,		'CompanyCode'
		union all 	select 'IssuePayment', 'InvoiceAmount#', 	'Invoice total', 			'currency', 		30,		null
		union all 	select 'IssuePayment', 'InvoiceDueDate#', 	'Due date',					'date', 			35,		null
		union all 	select 'IssuePayment', 'InvoiceDate#', 		'Invoice date',				'date', 			40,		null	;	
	
	insert into SystemAdvanceSearchFields(SearchType, Field, Label, DataType, FieldOrder, DependencyField)
					select 'PaymentHistory', 'PaymentDate#', 	'Payment date',				'date', 			5,		null		
		union all 	select 'PaymentHistory', 'PaymentInfo', 	'Payment information',		'text', 			10,		null		
		union all	select 'PaymentHistory', 'InvoiceNo', 		'Invoice number', 			'text', 			15,		null
		union all 	select 'PaymentHistory', 'InvoiceDate#', 	'Invoice date',				'date', 			20,		null		
		union all 	select 'PaymentHistory', 'CompanyCode', 	'Company/Store', 			'Select', 			25,		null
		union all 	select 'PaymentHistory', 'Vendor', 			'Vendor', 					'Select', 			30,		'CompanyCode'
		union all 	select 'PaymentHistory', 'DocumentType', 	'Document type',			'Select', 			35,		null;		
	





	
	
	
	
	
	
	
	
	
	
	DROP TABLE IF EXISTS ClientUserRoles;
	DROP TABLE IF EXISTS ClientRoleFunctions;
	DROP TABLE IF EXISTS ClientRoles;
	DROP table IF EXISTS SystemFunctions;
			
	CREATE TABLE SystemFunctions (
		FunctionKey 		varchar(50) NOT NULL PRIMARY KEY,
		FunctionName 		varchar(50) NULL,
		FunctionOptions 	varchar(1000) NULL,
		FunctionGrouping	varchar(50) NULL,
		SortOrderGrouping	int null default 0,
		SortOrderName		int null default 0,
		isInternal 			smallint default 0,
		Migrate				varchar(1000) null
		);
		
	Insert into SystemFunctions values ('DashBoard', 'Allow access to Dashboard Screen', '1=Yes; -1=No; DEFAULT=-1', 'General', 1, 1, 0, 'Approver;Supervisor;Vendor;Administrator;Buyer;Procurement');
	Insert into SystemFunctions values ('BatchStatus', 'Allow access to Batch Status Screen', '1=Yes; -1=No; DEFAULT=-1', 'General', 1, 2, 0, 'Approver;Supervisor;Exception Handler;Administrator');
	Insert into SystemFunctions values ('Auditor', 'Allow access to Auditor Screen', '1=Yes; -1=No; DEFAULT=-1', 'General', 1, 3, 0, 'Administrator');
	Insert into SystemFunctions values ('Workflow', 'Workflows', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'General', 1, 4, 0, 'Administrator');
	Insert into SystemFunctions values ('Alert', 'Alerts', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'General', 1, 5, 0, 'Administrator');
	Insert into SystemFunctions values ('UserRole', 'Roles', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'User', 2, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('User', 'Users', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'User', 2, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('Invoice', 'Allow access to Invoice Screen', '1=Yes; -1=No; DEFAULT=-1', 'Invoice', 3, 0, 0, 'Approver;Supervisor;Exception Handler;Administrator;Search User;Auditor');
	Insert into SystemFunctions values ('InvoiceApprove', 'Allow Approve', '1=Yes; -1=No; DEFAULT=-1', 'Invoice', 3, 0, 0, 'Approver');
	Insert into SystemFunctions values ('InvoiceAssignUser', 'Allow Assign a User', '1=Yes; -1=No; DEFAULT=-1', 'Invoice', 3, 0, 0, 'Approver;Supervisor;Exception Handler;Administrator');
	Insert into SystemFunctions values ('InvoiceDelete', 'Allow Delete', '1=Yes; -1=No; DEFAULT=-1', 'Invoice', 3, 0, 0, 'Supervisor;Exception Handler;Administrator');
	Insert into SystemFunctions values ('InvoicePause', 'Allow Pause', '1=Yes; -1=No; DEFAULT=-1', 'Invoice', 3, 0, 0, 'Supervisor;Exception Handler;Administrator');
	Insert into SystemFunctions values ('InvoiceReset', 'Allow Reset', '1=Yes; -1=No; DEFAULT=-1', 'Invoice', 3, 0, 0, 'Supervisor;Exception Handler;Administrator');
	Insert into SystemFunctions values ('InvoiceUpdate', 'Allow Update', '1=Yes; -1=No; DEFAULT=-1', 'Invoice', 3, 0, 0, 'Supervisor;Exception Handler;Administrator');
	Insert into SystemFunctions values ('PaymentIssue', 'Allow Issue', '1=Yes; -1=No; DEFAULT=-1', 'Payment', 4, 1, 0, 'Supervisor;');
	Insert into SystemFunctions values ('PaymentApprove', 'Allow Approve', '1=Yes; -1=No; DEFAULT=-1', 'Payment', 4, 2, 0, 'Approver');
	Insert into SystemFunctions values ('PaymentCancel', 'Allow Cancel', '1=Yes; -1=No; DEFAULT=-1', 'Payment', 4, 3, 0, 'Supervisor');
	Insert into SystemFunctions values ('PaymentHistory', 'Consult History', '1=Yes; -1=No; DEFAULT=-1', 'Payment', 4, 4, 0, 'Supervisor;Auditor');
	Insert into SystemFunctions values ('ExportCategory', 'Allow export for Category', '1=Yes; -1=No; DEFAULT=-1', 'Export', 5, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('ExportCompany', 'Allow export for Company', '1=Yes; -1=No; DEFAULT=-1', 'Export', 5, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('ExportDepartment', 'Allow export for Department', '1=Yes; -1=No; DEFAULT=-1', 'Export', 5, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('ExportEmailCapture', 'Allow export for Email Caputre', '1=Yes; -1=No; DEFAULT=-1', 'Export', 5, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('ExportGL', 'Allow export for GL Accounts', '1=Yes; -1=No; DEFAULT=-1', 'Export', 5, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('ExportInvoice', 'Allow export for Invoice', '1=Yes; -1=No; DEFAULT=-1', 'Export', 5, 0, 0, 'Supervisor;Auditor;Administrator');
	Insert into SystemFunctions values ('ExportOrgData', 'Allow export for Org Data', '1=Yes; -1=No; DEFAULT=-1', 'Export', 5, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('ExportPayment', 'Allow export for Payment', '1=Yes; -1=No; DEFAULT=-1', 'Export', 5, 0, 0, 'Supervisor;Auditor;Administrator');
	Insert into SystemFunctions values ('ExportPOData', 'Allow export for PO Data', '1=Yes; -1=No; DEFAULT=-1', 'Export', 5, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('ExportUser', 'Allow export for User', '1=Yes; -1=No; DEFAULT=-1', 'Export', 5, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('ExportVendor', 'Allow export for Vendor', '1=Yes; -1=No; DEFAULT=-1', 'Export', 5, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('ExportVendorDepartment', 'Allow export for Vendor Department', '1=Yes; -1=No; DEFAULT=-1', 'Export', 5, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('DataLoadCategory', 'Category', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'DataLoad', 6, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('DataLoadClosingDate', 'ClosingDate', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'DataLoad', 6, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('DataLoadCompany', 'Company', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'DataLoad', 6, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('DataLoadDepartment', 'Department', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'DataLoad', 6, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('DataLoadEmailCapture', 'Email Caputre', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'DataLoad', 6, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('DataLoadGL', 'GL', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'DataLoad', 6, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('DataLoadOrgData', 'Org Data', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'DataLoad', 6, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('DataLoadPOData', 'PO Data', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'DataLoad', 6, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('DataLoadVendor', 'Vendor', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'DataLoad', 6, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('DataLoadVendorDepartment', 'Vendor Department', '1=FullAccess; 0=ReadOnly; -1=None; DEFAULT=-1', 'DataLoad', 6, 0, 0, 'Administrator');
	Insert into SystemFunctions values ('SystemDataEntry', 'Data Entry', '1=Yes; -1=No; DEFAULT=-1', 'General', 1, 0, 1, 'Data Entry');
	Insert into SystemFunctions values ('SystemDashBoard', 'Allow access to Dashboard Screen', '1=Yes; -1=No; DEFAULT=-1', 'Client', 2, 1, 1, 'XXX');
	Insert into SystemFunctions values ('SystemClient', 'Client Management', '1=Yes; -1=No; DEFAULT=-1', 'Client', 2, 2, 1, 'XXX');
	Insert into SystemFunctions values ('SystemReleaseOpen', 'Allow to Open and Complete', '1=Yes; -1=No; DEFAULT=-1', 'Release Management', 3, 1, 1, 'XXX');
	Insert into SystemFunctions values ('SystemReleaseReview', 'Allow Review', '1=Yes; -1=No; DEFAULT=-1', 'Release Management', 3, 2, 1, 'XXX');
	Insert into SystemFunctions values ('SystemReleaseRelease', 'Allow Release', '1=Yes; -1=No; DEFAULT=-1', 'Release Management', 3, 3, 1, 'XXX');
	Insert into SystemFunctions values ('SystemReleaseHistory', 'Allow access to History', '1=Yes; -1=No; DEFAULT=-1', 'Release Management', 3, 4, 1, 'XXX');	
	Insert into SystemFunctions values ('InvoiceUnpause', 'Allow Unpause', '1=Yes; -1=No; DEFAULT=-1', 'Invoice', 	3, 0, 0, 'Supervisor;Exception Handler;Administrator');
	Insert into SystemFunctions values ('InvoiceHold', 'Allow Hold', '1=Yes; -1=No; DEFAULT=-1', 'Invoice', 	3, 0, 0, 'Approver;Supervisor;Exception Handler;Administrator');
	Insert into SystemFunctions values ('InvoiceUnhold', 'Allow Unhold', '1=Yes; -1=No; DEFAULT=-1', 'Invoice', 	3, 0, 0, 'Approver;Supervisor;Exception Handler;Administrator');


	CREATE TABLE ClientRoles(
		RoleId 		int AUTO_INCREMENT,
		RoleName 	varchar(50),
		ClientId 	int,
		isAdmin 	tinyint,
		isInternal 	tinyint,
		isLocked	tinyint,
		PRIMARY KEY (RoleId)
		);
	ALTER TABLE ClientRoles
	ADD CONSTRAINT ClientRoles_ClientId FOREIGN KEY (ClientId)
	REFERENCES Client (ClientId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	
	
	
	CREATE TABLE ClientRoleFunctions (
		RoleId 		int NOT NULL,
		FunctionKey 	varchar(50) NOT NULL,
		Access 		tinyint,
		PRIMARY KEY (RoleId, FunctionKey)
		);
	ALTER TABLE ClientRoleFunctions
	ADD CONSTRAINT ClientRoleFunctions_FunctionKey FOREIGN KEY (FunctionKey)
	REFERENCES SystemFunctions (FunctionKey) ON DELETE NO ACTION ON UPDATE NO ACTION;
	
	Create TABLE ClientUserRoles (
		UserId 	char(36) NOT NULL,
		RoleId	int NOT NULL,
		PRIMARY KEY (UserId, RoleId)
		);
	
	ALTER TABLE ClientUserRoles
	ADD CONSTRAINT ClientUserRoles_RoleId FOREIGN KEY (RoleId)
	REFERENCES ClientRoles (RoleId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	ALTER TABLE ClientUserRoles
	ADD CONSTRAINT ClientUserRoles_UserId FOREIGN KEY (UserId)
	REFERENCES User (UserId) ON DELETE NO ACTION ON UPDATE NO ACTION;		
	
	
	
	
	








	
	
	
	
	
	drop table IF EXISTS SystemReleases;
	drop table IF EXISTS SystemReleasesClient;
	
	CREATE TABLE SystemReleases (
		ReleaseID			int AUTO_INCREMENT PRIMARY KEY,
		ReleaseNotes		MEDIUMTEXT NULL,
		InternalNotes 		MEDIUMTEXT NULL,
		JiraReference		varchar(20) null,
		CompletedDate 		Datetime null,
		ReviewedDate 		Datetime null,
		ReleaseDate 		Date null,
		SentDate			Datetime null,
		UpdatedDate 		Datetime null,
		Status 				varchar(20) as (case 
												when ReleaseDate is not null and SentDate is not null 		then 'Released'
												when ReleaseDate is not null and SentDate is null 			then 'Released-Not Sent'
												when ReviewedDate is not null 								then 'Reviewed'
												when CompletedDate is not null 								then 'Completed'
												else 'Open' end)
		);
	
	
	CREATE TABLE SystemReleasesClient (
		ReleaseID			int,
		ClientId 			int
		);
	
	ALTER TABLE SystemReleasesClient
		ADD CONSTRAINT SystemReleasesClient_ClientId FOREIGN KEY (ClientId)
		REFERENCES Client (ClientId) ON DELETE NO ACTION ON UPDATE NO ACTION;
		
		
		

















	drop table IF EXISTS AlertClientInstanceHit;
	drop table IF EXISTS AlertClientInstanceFields;
	drop table IF EXISTS AlertClientInstance;
	drop table IF EXISTS AlertClient;
	drop table IF EXISTS AlertFields;
	drop TABLE IF EXISTS Alert;
	
	CREATE TABLE Alert (
		AlertKey 					varchar(20) 	NOT NULL PRIMARY KEY,
		AlertName 					varchar(50) 	NULL,
		AlertGrouping				varchar(50)		NULL,
		Frequency 					int 			NOT NULL 				default(0),	-- 0 = Morning
		StoredProc					varchar(100) 	NULL,
		SortOrderGrouping			int 			not null default 0,
		SortOrderName				int 			not null default 0,
		isActive 					bit 			NOT NULL 				DEFAULT(0),
		isInternal					bit 			NULL
		);

	CREATE TABLE AlertFields (
		AlertKey 					varchar(20) 	NOT NULL,
		Field 						varchar(20) 	NOT NULL,
		Label 						varchar(50) 	NOT NULL,
		DataType					varchar(20) 	NOT NULL,
		FieldOrder					int 			not NULL,
		DependencyField				varchar(20) 	NULL,
		PRIMARY KEY (AlertKey, Field)
		);

	CREATE TABLE AlertClient (
		AlertKey 					varchar(20) 	NOT NULL,
		ClientId 					int 			NOT NULL,
		isActive 					bit 			NOT NULL DEFAULT(0),
		LastRunDateTime 			datetime 		NULL DEFAULT(now()),
		PRIMARY KEY (AlertKey, ClientId)
		);

	CREATE TABLE AlertClientInstance (
		AlertId 					int 			AUTO_INCREMENT PRIMARY KEY,
		AlertKey 					varchar(20) 	NOT NULL,
		ClientId 					int 			NOT NULL
		);

	CREATE TABLE AlertClientInstanceFields (
		AlertId 					int 			NOT NULL,
		Field 						varchar(20) 	NOT NULL,
		Value					 	mediumtext 		NOT null,
		PRIMARY KEY (AlertId, Field)
		);
	
	CREATE TABLE AlertClientInstanceHit (
		AlertId 					int 			NOT NULL,
		DataValue 					varchar(100)	NOT NULL, 
		RunDateTime 				datetime 		NOT NULL DEFAULT(now()),
		Primary Key (AlertId, DataValue, RunDateTime)
		);
	
	
	
	ALTER TABLE AlertFields
		ADD CONSTRAINT AlertFields_Alert FOREIGN KEY (AlertKey)
		REFERENCES Alert (AlertKey) ON DELETE NO ACTION ON UPDATE NO ACTION;

	ALTER TABLE AlertClient
		ADD CONSTRAINT AlertClient_Alert FOREIGN KEY (AlertKey)
		REFERENCES Alert (AlertKey) ON DELETE NO ACTION ON UPDATE NO ACTION;
	
	ALTER TABLE AlertClient
		ADD CONSTRAINT AlertClient_ClientId FOREIGN KEY (ClientId)
		REFERENCES Client (ClientId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	
	ALTER TABLE AlertClientInstance
		ADD CONSTRAINT AlertClientInstance_AlertClient FOREIGN KEY (AlertKey, ClientId)
		REFERENCES AlertClient (AlertKey, ClientId) ON DELETE NO ACTION ON UPDATE NO ACTION;
	
	ALTER TABLE AlertClientInstanceFields
		ADD CONSTRAINT AlertClientInstanceFields_AlertClientInstance FOREIGN KEY (AlertId)
		REFERENCES AlertClientInstance (AlertId) ON DELETE NO ACTION ON UPDATE NO ACTION;

	ALTER TABLE AlertClientInstanceHit
		ADD CONSTRAINT AlertClientInstanceHit_AlertClient FOREIGN KEY (AlertId)
		REFERENCES AlertClientInstance (AlertId) ON DELETE NO ACTION ON UPDATE NO ACTION;


	Insert into Alert (		AlertKey,			AlertName,											AlertGrouping, 			Frequency,	StoredProc,								isInternal)
					select	'DiscountDate',		'Approaching net terms discount date', 				'Invoices',				0,			'_x_AlertProcess_NetTerms',				0
		union all 	select	'DueDate',			'Approaching their due date', 						'Invoices',				0,			'_x_AlertProcess_DueDate',				0
		union all 	select	'InvoiceFlag',		'Requiring possible attention', 					'Invoices',				0,			'_x_AlertProcess_InvoiceFlag',			0;

	Insert into AlertFields (	AlertKey,			Field,				Label, 						DataType, 			FieldOrder,	DependencyField)
					SELECT 		'DiscountDate', 	'ClientRole', 		'Roles to alert', 			'Multiselect', 		1,			NULL
		UNION ALL	SELECT 		'DiscountDate', 	'DiscountAmount#', 	'Discount amount', 			'Currency', 		5,			NULL
		UNION ALL	SELECT 		'DiscountDate', 	'WarningDays', 		'Warning days', 			'Radio', 			9,			NULL
		UNION ALL	SELECT 		'DueDate', 			'ClientRole', 		'Roles to alert', 			'Multiselect', 		1,			NULL
		UNION ALL	SELECT 		'DueDate', 			'InvoiceAmount#', 	'Invoice amount', 			'Currency', 		5,			NULL
		UNION ALL	SELECT 		'DueDate', 			'WarningDays', 		'Warning days', 			'Radio', 			9,			NULL


		union all	SELECT 		'InvoiceFlag', 		'ClientRole', 		'Roles to alert', 			'Multiselect', 		1,			'Employee'
		union all	SELECT 		'InvoiceFlag', 		'Employee', 		'Users to alert', 			'Multiselect', 		5,			'ClientRole'
		union all 	select 		'InvoiceFlag', 		'CompanyCode', 		'Company/Store', 			'Select', 			10,			null
		union all 	select 		'InvoiceFlag', 		'Department', 		'Department', 				'MultiSelect', 		15,			'CompanyCode'
		union all 	select 		'InvoiceFlag', 		'Vendor', 			'Vendor', 					'MultiSelect', 		20,			'CompanyCode'
		union all 	select 		'InvoiceFlag', 		'Comment', 			'Comment', 					'text', 			25,			null
		union all 	select 		'InvoiceFlag', 		'InvoiceAmount#', 	'Invoice total', 			'currency', 		30,			null
		union all 	select 		'InvoiceFlag', 		'InvoiceType', 		'Type', 					'Radio', 			35,			null
		union all 	select 		'InvoiceFlag', 		'InvoiceStatus', 	'Status', 					'MultiSelect', 		40,			null;






	drop table IF EXISTS UserNotification;
	
	CREATE TABLE UserNotification (
		NotificationID				int 		NOT NULL AUTO_INCREMENT PRIMARY KEY,
		UserId 						varchar(36) NOT NULL,
		Source 						varchar(20) NULL,
		Message 					mediumtext 	NOT NULL,
		LinkPage					varchar(20) NULL,
		LinkValue					varchar(20) NULL,
		ReceivedDate				datetime 	not NULL DEFAULT(UTC_TIMESTAMP()),
		ReadDate					datetime 	NULL,
		ReadStatus 					smallint NOT NULL DEFAULT (0),
		INDEX UserNotification_idx (UserId, NotificationID)
		);

	
	ALTER TABLE UserNotification
		ADD CONSTRAINT UserNotification_User FOREIGN KEY (UserId)
		REFERENCES User (UserId) ON DELETE NO ACTION ON UPDATE NO ACTION;












	-- truncate table InvoiceArchiveReason;
	drop table IF EXISTS InvoiceArchiveReason;
	CREATE TABLE InvoiceArchiveReason (
		Id int 							NOT NULL AUTO_INCREMENT,
		ClientId 		int 			NOT NULL,
		ArchiveReason 	varchar(200) 	NOT NULL,
		TotalCount 		int				NOT NULL,
		LastUsed 		Date 			not null,
		UNIQUE KEY InvoiceArchiveReason_idx (ClientId, ArchiveReason),
		Primary key (Id)
	)
	ENGINE = INNODB,
	AUTO_INCREMENT = 2200,
	AVG_ROW_LENGTH = 60,
	CHARACTER SET utf8mb4,
	COLLATE utf8mb4_general_ci,
	ROW_FORMAT = DYNAMIC;
		

		
	*/



	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
SET @@SESSION.SQL_LOG_BIN = @MYSQLDUMP_TEMP_LOG_BIN;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2025-01-26 21:46:13
